
vmm/guest/obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
_head64:

# Save multiboot_info addr passed by bootloader
#ifdef VMM_GUEST
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
  100000:	b8 01 00 00 00       	mov    $0x1,%eax
    vmcall
  100005:	0f 01 c1             	vmcall 
#endif
	
    movl $multiboot_info, %eax
  100008:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  10000d:	89 18                	mov    %ebx,(%rax)
#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  10000f:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100014:	e8 cc 00 00 00       	callq  1000e5 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
  100019:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif
    movl %eax,%cr4
  10001e:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100021:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100026:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100028:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002d:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  10002f:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100034:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  100039:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  10003f:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100041:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100046:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  100049:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004c:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  10004f:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100054:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  100059:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  10005f:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100061:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100066:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006b:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006e:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100071:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100073:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100078:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007d:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100082:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100088:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008d:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  10008f:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100091:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100094:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100097:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009c:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  10009f:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a2:	75 e9                	jne    10008d <_head64+0x8d>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a4:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000a9:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b1:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b3:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b7:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000b9:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bc:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000bf:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c4:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000c9:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000ce:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d1:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d4:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000d9:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dc:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000de:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e3:	50                   	push   %rax

00000000001000e4 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e4:	cb                   	lret   

00000000001000e5 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e5:	9c                   	pushfq 
    popl %eax
  1000e6:	58                   	pop    %rax
    movl %eax,%ecx
  1000e7:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000e9:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ee:	50                   	push   %rax
    popfl
  1000ef:	9d                   	popfq  
    pushfl
  1000f0:	9c                   	pushfq 
    popl %eax
  1000f1:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f2:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f4:	74 1c                	je     100112 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f6:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fb:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fd:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100100:	72 10                	jb     100112 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100102:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100107:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  100109:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  10010f:	74 01                	je     100112 <verify_cpu_no_longmode>

    ret
  100111:	c3                   	retq   

0000000000100112 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100112:	eb fe                	jmp    100112 <verify_cpu_no_longmode>
  100114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 
  10011e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100125:	00 00 00 
  100128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10012f:	00 00 00 
  100132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100139:	00 00 00 
  10013c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100143:	00 00 00 
  100146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014d:	00 00 00 
  100150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100157:	00 00 00 
  10015a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100161:	00 00 00 
  100164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016b:	00 00 00 
  10016e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100175:	00 00 00 
  100178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10017f:	00 00 00 
  100182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100189:	00 00 00 
  10018c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100193:	00 00 00 
  100196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019d:	00 00 00 
  1001a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a7:	00 00 00 
  1001aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b1:	00 00 00 
  1001b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bb:	00 00 00 
  1001be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c5:	00 00 00 
  1001c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001cf:	00 00 00 
  1001d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d9:	00 00 00 
  1001dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e3:	00 00 00 
  1001e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ed:	00 00 00 
  1001f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f7:	00 00 00 
  1001fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100201:	00 00 00 
  100204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020b:	00 00 00 
  10020e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100215:	00 00 00 
  100218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10021f:	00 00 00 
  100222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100229:	00 00 00 
  10022c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100233:	00 00 00 
  100236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023d:	00 00 00 
  100240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100247:	00 00 00 
  10024a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100251:	00 00 00 
  100254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025b:	00 00 00 
  10025e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100265:	00 00 00 
  100268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10026f:	00 00 00 
  100272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100279:	00 00 00 
  10027c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100283:	00 00 00 
  100286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028d:	00 00 00 
  100290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100297:	00 00 00 
  10029a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a1:	00 00 00 
  1002a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ab:	00 00 00 
  1002ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b5:	00 00 00 
  1002b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002bf:	00 00 00 
  1002c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c9:	00 00 00 
  1002cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d3:	00 00 00 
  1002d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002dd:	00 00 00 
  1002e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e7:	00 00 00 
  1002ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f1:	00 00 00 
  1002f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fb:	00 00 00 
  1002fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100305:	00 00 00 
  100308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10030f:	00 00 00 
  100312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100319:	00 00 00 
  10031c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100323:	00 00 00 
  100326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032d:	00 00 00 
  100330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100337:	00 00 00 
  10033a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100341:	00 00 00 
  100344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034b:	00 00 00 
  10034e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100355:	00 00 00 
  100358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10035f:	00 00 00 
  100362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100369:	00 00 00 
  10036c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100373:	00 00 00 
  100376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037d:	00 00 00 
  100380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100387:	00 00 00 
  10038a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100391:	00 00 00 
  100394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039b:	00 00 00 
  10039e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a5:	00 00 00 
  1003a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003af:	00 00 00 
  1003b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b9:	00 00 00 
  1003bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c3:	00 00 00 
  1003c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003cd:	00 00 00 
  1003d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d7:	00 00 00 
  1003da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e1:	00 00 00 
  1003e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003eb:	00 00 00 
  1003ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f5:	00 00 00 
  1003f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ff:	00 00 00 
  100402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100409:	00 00 00 
  10040c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100413:	00 00 00 
  100416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041d:	00 00 00 
  100420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100427:	00 00 00 
  10042a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100431:	00 00 00 
  100434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043b:	00 00 00 
  10043e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100445:	00 00 00 
  100448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10044f:	00 00 00 
  100452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100459:	00 00 00 
  10045c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100463:	00 00 00 
  100466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046d:	00 00 00 
  100470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100477:	00 00 00 
  10047a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100481:	00 00 00 
  100484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048b:	00 00 00 
  10048e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100495:	00 00 00 
  100498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10049f:	00 00 00 
  1004a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a9:	00 00 00 
  1004ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b3:	00 00 00 
  1004b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004bd:	00 00 00 
  1004c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c7:	00 00 00 
  1004ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d1:	00 00 00 
  1004d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004db:	00 00 00 
  1004de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e5:	00 00 00 
  1004e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004ef:	00 00 00 
  1004f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f9:	00 00 00 
  1004fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100503:	00 00 00 
  100506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050d:	00 00 00 
  100510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100517:	00 00 00 
  10051a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100521:	00 00 00 
  100524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052b:	00 00 00 
  10052e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100535:	00 00 00 
  100538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10053f:	00 00 00 
  100542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100549:	00 00 00 
  10054c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100553:	00 00 00 
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055d:	00 00 00 
  100560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100567:	00 00 00 
  10056a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100571:	00 00 00 
  100574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057b:	00 00 00 
  10057e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100585:	00 00 00 
  100588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10058f:	00 00 00 
  100592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100599:	00 00 00 
  10059c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a3:	00 00 00 
  1005a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ad:	00 00 00 
  1005b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b7:	00 00 00 
  1005ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c1:	00 00 00 
  1005c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cb:	00 00 00 
  1005ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d5:	00 00 00 
  1005d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005df:	00 00 00 
  1005e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e9:	00 00 00 
  1005ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f3:	00 00 00 
  1005f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fd:	00 00 00 
  100600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100607:	00 00 00 
  10060a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100611:	00 00 00 
  100614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061b:	00 00 00 
  10061e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100625:	00 00 00 
  100628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10062f:	00 00 00 
  100632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100639:	00 00 00 
  10063c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100643:	00 00 00 
  100646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064d:	00 00 00 
  100650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100657:	00 00 00 
  10065a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100661:	00 00 00 
  100664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066b:	00 00 00 
  10066e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100675:	00 00 00 
  100678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10067f:	00 00 00 
  100682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100689:	00 00 00 
  10068c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100693:	00 00 00 
  100696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069d:	00 00 00 
  1006a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a7:	00 00 00 
  1006aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b1:	00 00 00 
  1006b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bb:	00 00 00 
  1006be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c5:	00 00 00 
  1006c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006cf:	00 00 00 
  1006d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d9:	00 00 00 
  1006dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e3:	00 00 00 
  1006e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ed:	00 00 00 
  1006f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f7:	00 00 00 
  1006fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100701:	00 00 00 
  100704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070b:	00 00 00 
  10070e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100715:	00 00 00 
  100718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10071f:	00 00 00 
  100722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100729:	00 00 00 
  10072c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100733:	00 00 00 
  100736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073d:	00 00 00 
  100740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100747:	00 00 00 
  10074a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100751:	00 00 00 
  100754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075b:	00 00 00 
  10075e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100765:	00 00 00 
  100768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10076f:	00 00 00 
  100772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100779:	00 00 00 
  10077c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100783:	00 00 00 
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078d:	00 00 00 
  100790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100797:	00 00 00 
  10079a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a1:	00 00 00 
  1007a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ab:	00 00 00 
  1007ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b5:	00 00 00 
  1007b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007bf:	00 00 00 
  1007c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c9:	00 00 00 
  1007cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d3:	00 00 00 
  1007d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007dd:	00 00 00 
  1007e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e7:	00 00 00 
  1007ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f1:	00 00 00 
  1007f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fb:	00 00 00 
  1007fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100805:	00 00 00 
  100808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10080f:	00 00 00 
  100812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100819:	00 00 00 
  10081c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100823:	00 00 00 
  100826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082d:	00 00 00 
  100830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100837:	00 00 00 
  10083a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100841:	00 00 00 
  100844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084b:	00 00 00 
  10084e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100855:	00 00 00 
  100858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10085f:	00 00 00 
  100862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100869:	00 00 00 
  10086c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100873:	00 00 00 
  100876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087d:	00 00 00 
  100880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100887:	00 00 00 
  10088a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100891:	00 00 00 
  100894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089b:	00 00 00 
  10089e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a5:	00 00 00 
  1008a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008af:	00 00 00 
  1008b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b9:	00 00 00 
  1008bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c3:	00 00 00 
  1008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008cd:	00 00 00 
  1008d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d7:	00 00 00 
  1008da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e1:	00 00 00 
  1008e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008eb:	00 00 00 
  1008ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f5:	00 00 00 
  1008f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ff:	00 00 00 
  100902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100909:	00 00 00 
  10090c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100913:	00 00 00 
  100916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091d:	00 00 00 
  100920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100927:	00 00 00 
  10092a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100931:	00 00 00 
  100934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093b:	00 00 00 
  10093e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100945:	00 00 00 
  100948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10094f:	00 00 00 
  100952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100959:	00 00 00 
  10095c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100963:	00 00 00 
  100966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096d:	00 00 00 
  100970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100977:	00 00 00 
  10097a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100981:	00 00 00 
  100984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098b:	00 00 00 
  10098e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100995:	00 00 00 
  100998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10099f:	00 00 00 
  1009a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a9:	00 00 00 
  1009ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b3:	00 00 00 
  1009b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009bd:	00 00 00 
  1009c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c7:	00 00 00 
  1009ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d1:	00 00 00 
  1009d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009db:	00 00 00 
  1009de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e5:	00 00 00 
  1009e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009ef:	00 00 00 
  1009f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f9:	00 00 00 
  1009fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a03:	00 00 00 
  100a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0d:	00 00 00 
  100a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a17:	00 00 00 
  100a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a21:	00 00 00 
  100a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2b:	00 00 00 
  100a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a35:	00 00 00 
  100a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a3f:	00 00 00 
  100a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a49:	00 00 00 
  100a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a53:	00 00 00 
  100a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5d:	00 00 00 
  100a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a67:	00 00 00 
  100a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a71:	00 00 00 
  100a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7b:	00 00 00 
  100a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a85:	00 00 00 
  100a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a8f:	00 00 00 
  100a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a99:	00 00 00 
  100a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa3:	00 00 00 
  100aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aad:	00 00 00 
  100ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab7:	00 00 00 
  100aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac1:	00 00 00 
  100ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acb:	00 00 00 
  100ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad5:	00 00 00 
  100ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100adf:	00 00 00 
  100ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae9:	00 00 00 
  100aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af3:	00 00 00 
  100af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afd:	00 00 00 
  100b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b07:	00 00 00 
  100b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b11:	00 00 00 
  100b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1b:	00 00 00 
  100b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b25:	00 00 00 
  100b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b2f:	00 00 00 
  100b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b39:	00 00 00 
  100b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b43:	00 00 00 
  100b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4d:	00 00 00 
  100b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b57:	00 00 00 
  100b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b61:	00 00 00 
  100b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6b:	00 00 00 
  100b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b75:	00 00 00 
  100b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b7f:	00 00 00 
  100b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b89:	00 00 00 
  100b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b93:	00 00 00 
  100b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9d:	00 00 00 
  100ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba7:	00 00 00 
  100baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb1:	00 00 00 
  100bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbb:	00 00 00 
  100bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc5:	00 00 00 
  100bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bcf:	00 00 00 
  100bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd9:	00 00 00 
  100bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be3:	00 00 00 
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bed:	00 00 00 
  100bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf7:	00 00 00 
  100bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c01:	00 00 00 
  100c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0b:	00 00 00 
  100c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c15:	00 00 00 
  100c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c1f:	00 00 00 
  100c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c29:	00 00 00 
  100c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c33:	00 00 00 
  100c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3d:	00 00 00 
  100c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c47:	00 00 00 
  100c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c51:	00 00 00 
  100c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5b:	00 00 00 
  100c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c65:	00 00 00 
  100c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6f:	00 00 00 
  100c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c79:	00 00 00 
  100c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c83:	00 00 00 
  100c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8d:	00 00 00 
  100c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c97:	00 00 00 
  100c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca1:	00 00 00 
  100ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cab:	00 00 00 
  100cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb5:	00 00 00 
  100cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cbf:	00 00 00 
  100cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc9:	00 00 00 
  100ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd3:	00 00 00 
  100cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cdd:	00 00 00 
  100ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce7:	00 00 00 
  100cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf1:	00 00 00 
  100cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfb:	00 00 00 
  100cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d05:	00 00 00 
  100d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d0f:	00 00 00 
  100d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d19:	00 00 00 
  100d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d23:	00 00 00 
  100d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2d:	00 00 00 
  100d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d37:	00 00 00 
  100d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d41:	00 00 00 
  100d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4b:	00 00 00 
  100d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d55:	00 00 00 
  100d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d5f:	00 00 00 
  100d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d69:	00 00 00 
  100d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d73:	00 00 00 
  100d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7d:	00 00 00 
  100d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d87:	00 00 00 
  100d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d91:	00 00 00 
  100d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9b:	00 00 00 
  100d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da5:	00 00 00 
  100da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100daf:	00 00 00 
  100db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db9:	00 00 00 
  100dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc3:	00 00 00 
  100dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dcd:	00 00 00 
  100dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd7:	00 00 00 
  100dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de1:	00 00 00 
  100de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100deb:	00 00 00 
  100dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df5:	00 00 00 
  100df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dff:	00 00 00 
  100e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e09:	00 00 00 
  100e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e13:	00 00 00 
  100e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1d:	00 00 00 
  100e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e27:	00 00 00 
  100e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e31:	00 00 00 
  100e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3b:	00 00 00 
  100e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e45:	00 00 00 
  100e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e4f:	00 00 00 
  100e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e59:	00 00 00 
  100e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e63:	00 00 00 
  100e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6d:	00 00 00 
  100e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e77:	00 00 00 
  100e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e81:	00 00 00 
  100e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8b:	00 00 00 
  100e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e95:	00 00 00 
  100e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e9f:	00 00 00 
  100ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea9:	00 00 00 
  100eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb3:	00 00 00 
  100eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebd:	00 00 00 
  100ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec7:	00 00 00 
  100eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed1:	00 00 00 
  100ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edb:	00 00 00 
  100ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee5:	00 00 00 
  100ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eef:	00 00 00 
  100ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef9:	00 00 00 
  100efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f03:	00 00 00 
  100f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0d:	00 00 00 
  100f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f17:	00 00 00 
  100f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f21:	00 00 00 
  100f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2b:	00 00 00 
  100f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f35:	00 00 00 
  100f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f3f:	00 00 00 
  100f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f49:	00 00 00 
  100f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f53:	00 00 00 
  100f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5d:	00 00 00 
  100f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f67:	00 00 00 
  100f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f71:	00 00 00 
  100f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7b:	00 00 00 
  100f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f85:	00 00 00 
  100f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f8f:	00 00 00 
  100f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f99:	00 00 00 
  100f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa3:	00 00 00 
  100fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fad:	00 00 00 
  100fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb7:	00 00 00 
  100fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc1:	00 00 00 
  100fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcb:	00 00 00 
  100fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd5:	00 00 00 
  100fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fdf:	00 00 00 
  100fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe9:	00 00 00 
  100fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff3:	00 00 00 
  100ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ffd:	00 00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 c0 22 04 80 	movabs $0x800422c038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 c0 22 04 80 	movabs $0x800422c000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 9e 01 20 04 80 	movabs $0x800420019e,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	53                   	push   %rbx
  800420005d:	48 83 ec 38          	sub    $0x38,%rsp
  8004200061:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004200064:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004200068:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420006c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200070:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004200074:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200077:	0f a2                	cpuid  
  8004200079:	89 de                	mov    %ebx,%esi
  800420007b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420007e:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004200081:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004200084:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004200087:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420008c:	74 09                	je     8004200097 <cpuid+0x3f>
		*eaxp = eax;
  800420008e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200092:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200095:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004200097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420009c:	74 09                	je     80042000a7 <cpuid+0x4f>
		*ebxp = ebx;
  800420009e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042000a2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042000a5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042000a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042000ac:	74 09                	je     80042000b7 <cpuid+0x5f>
		*ecxp = ecx;
  80042000ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042000b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042000b5:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042000b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042000bc:	74 09                	je     80042000c7 <cpuid+0x6f>
		*edxp = edx;
  80042000be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042000c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042000c5:	89 10                	mov    %edx,(%rax)
}
  80042000c7:	48 83 c4 38          	add    $0x38,%rsp
  80042000cb:	5b                   	pop    %rbx
  80042000cc:	5d                   	pop    %rbp
  80042000cd:	c3                   	retq   

00000080042000ce <xchg>:

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042000ce:	55                   	push   %rbp
  80042000cf:	48 89 e5             	mov    %rsp,%rbp
  80042000d2:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042000d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042000da:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042000dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042000e1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042000e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042000e8:	f0 87 02             	lock xchg %eax,(%rdx)
  80042000eb:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042000ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042000f1:	c9                   	leaveq 
  80042000f2:	c3                   	retq   

00000080042000f3 <lock_kernel>:
  80042000f3:	55                   	push   %rbp
  80042000f4:	48 89 e5             	mov    %rsp,%rbp
  80042000f7:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042000fe:	00 00 00 
  8004200101:	48 b8 5d 73 21 04 80 	movabs $0x800421735d,%rax
  8004200108:	00 00 00 
  800420010b:	ff d0                	callq  *%rax
  800420010d:	5d                   	pop    %rbp
  800420010e:	c3                   	retq   

000000800420010f <vmcall>:
  800420010f:	55                   	push   %rbp
  8004200110:	48 89 e5             	mov    %rsp,%rbp
  8004200113:	53                   	push   %rbx
  8004200114:	48 83 ec 48          	sub    $0x48,%rsp
  8004200118:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420011b:	89 75 d8             	mov    %esi,-0x28(%rbp)
  800420011e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004200122:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200126:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  800420012a:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  800420012e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200131:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004200135:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004200139:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  800420013d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004200141:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004200145:	4c 89 c3             	mov    %r8,%rbx
  8004200148:	0f 01 c1             	vmcall 
  800420014b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420014f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004200153:	74 3e                	je     8004200193 <vmcall+0x84>
  8004200155:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420015a:	7e 37                	jle    8004200193 <vmcall+0x84>
  800420015c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004200160:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200163:	49 89 d0             	mov    %rdx,%r8
  8004200166:	89 c1                	mov    %eax,%ecx
  8004200168:	48 ba a0 88 21 04 80 	movabs $0x80042188a0,%rdx
  800420016f:	00 00 00 
  8004200172:	be 35 00 00 00       	mov    $0x35,%esi
  8004200177:	48 bf bc 88 21 04 80 	movabs $0x80042188bc,%rdi
  800420017e:	00 00 00 
  8004200181:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200186:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800420018d:	00 00 00 
  8004200190:	41 ff d1             	callq  *%r9
  8004200193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200197:	48 83 c4 48          	add    $0x48,%rsp
  800420019b:	5b                   	pop    %rbx
  800420019c:	5d                   	pop    %rbp
  800420019d:	c3                   	retq   

000000800420019e <i386_init>:
  800420019e:	55                   	push   %rbp
  800420019f:	48 89 e5             	mov    %rsp,%rbp
  80042001a2:	48 83 ec 10          	sub    $0x10,%rsp
  80042001a6:	48 ba 10 e0 6d 04 80 	movabs $0x80046de010,%rdx
  80042001ad:	00 00 00 
  80042001b0:	48 b8 a0 be 49 04 80 	movabs $0x800449bea0,%rax
  80042001b7:	00 00 00 
  80042001ba:	48 29 c2             	sub    %rax,%rdx
  80042001bd:	48 89 d0             	mov    %rdx,%rax
  80042001c0:	48 89 c2             	mov    %rax,%rdx
  80042001c3:	be 00 00 00 00       	mov    $0x0,%esi
  80042001c8:	48 bf a0 be 49 04 80 	movabs $0x800449bea0,%rdi
  80042001cf:	00 00 00 
  80042001d2:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042001d9:	00 00 00 
  80042001dc:	ff d0                	callq  *%rax
  80042001de:	48 b8 e1 12 20 04 80 	movabs $0x80042012e1,%rax
  80042001e5:	00 00 00 
  80042001e8:	ff d0                	callq  *%rax
  80042001ea:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042001ef:	48 bf cb 88 21 04 80 	movabs $0x80042188cb,%rdi
  80042001f6:	00 00 00 
  80042001f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042001fe:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004200205:	00 00 00 
  8004200208:	ff d2                	callq  *%rdx
  800420020a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200211:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004200215:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420021b:	48 89 c1             	mov    %rax,%rcx
  800420021e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004200223:	be 00 00 00 00       	mov    $0x0,%esi
  8004200228:	bf 01 00 00 00       	mov    $0x1,%edi
  800420022d:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200234:	00 00 00 
  8004200237:	ff d0                	callq  *%rax
  8004200239:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420023c:	83 e0 20             	and    $0x20,%eax
  800420023f:	85 c0                	test   %eax,%eax
  8004200241:	74 2a                	je     800420026d <i386_init+0xcf>
  8004200243:	48 ba e8 88 21 04 80 	movabs $0x80042188e8,%rdx
  800420024a:	00 00 00 
  800420024d:	be 68 00 00 00       	mov    $0x68,%esi
  8004200252:	48 bf bc 88 21 04 80 	movabs $0x80042188bc,%rdi
  8004200259:	00 00 00 
  800420025c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200261:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004200268:	00 00 00 
  800420026b:	ff d1                	callq  *%rcx
  800420026d:	48 bf 10 89 21 04 80 	movabs $0x8004218910,%rdi
  8004200274:	00 00 00 
  8004200277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420027c:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004200283:	00 00 00 
  8004200286:	ff d2                	callq  *%rdx
  8004200288:	b8 00 00 00 00       	mov    $0x0,%eax
  800420028d:	48 ba 76 27 20 04 80 	movabs $0x8004202776,%rdx
  8004200294:	00 00 00 
  8004200297:	ff d2                	callq  *%rdx
  8004200299:	48 b8 a6 80 20 04 80 	movabs $0x80042080a6,%rax
  80042002a0:	00 00 00 
  80042002a3:	ff d0                	callq  *%rax
  80042002a5:	48 b8 fa 96 20 04 80 	movabs $0x80042096fa,%rax
  80042002ac:	00 00 00 
  80042002af:	ff d0                	callq  *%rax
  80042002b1:	48 b8 82 92 20 04 80 	movabs $0x8004209282,%rax
  80042002b8:	00 00 00 
  80042002bb:	ff d0                	callq  *%rax
  80042002bd:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042002c4:	00 00 00 
  80042002c7:	ff d0                	callq  *%rax
  80042002c9:	be 01 00 00 00       	mov    $0x1,%esi
  80042002ce:	48 bf 20 59 2b 04 80 	movabs $0x80042b5920,%rdi
  80042002d5:	00 00 00 
  80042002d8:	48 b8 36 89 20 04 80 	movabs $0x8004208936,%rax
  80042002df:	00 00 00 
  80042002e2:	ff d0                	callq  *%rax
  80042002e4:	be 00 00 00 00       	mov    $0x0,%esi
  80042002e9:	48 bf 40 d8 29 04 80 	movabs $0x800429d840,%rdi
  80042002f0:	00 00 00 
  80042002f3:	48 b8 36 89 20 04 80 	movabs $0x8004208936,%rax
  80042002fa:	00 00 00 
  80042002fd:	ff d0                	callq  *%rax
  80042002ff:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004200306:	00 00 00 
  8004200309:	ff d0                	callq  *%rax
  800420030b:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  8004200312:	00 00 00 
  8004200315:	ff d0                	callq  *%rax

0000008004200317 <boot_aps>:
  8004200317:	55                   	push   %rbp
  8004200318:	48 89 e5             	mov    %rsp,%rbp
  800420031b:	48 83 ec 30          	sub    $0x30,%rsp
  800420031f:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200326:	00 
  8004200327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420032b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420032f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200332:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200335:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420033c:	00 00 00 
  800420033f:	48 8b 00             	mov    (%rax),%rax
  8004200342:	48 39 c2             	cmp    %rax,%rdx
  8004200345:	72 32                	jb     8004200379 <boot_aps+0x62>
  8004200347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420034b:	48 89 c1             	mov    %rax,%rcx
  800420034e:	48 ba 38 89 21 04 80 	movabs $0x8004218938,%rdx
  8004200355:	00 00 00 
  8004200358:	be 01 01 00 00       	mov    $0x101,%esi
  800420035d:	48 bf bc 88 21 04 80 	movabs $0x80042188bc,%rdi
  8004200364:	00 00 00 
  8004200367:	b8 00 00 00 00       	mov    $0x0,%eax
  800420036c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004200373:	00 00 00 
  8004200376:	41 ff d0             	callq  *%r8
  8004200379:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200380:	00 00 00 
  8004200383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200387:	48 01 d0             	add    %rdx,%rax
  800420038a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420038e:	48 ba a6 64 21 04 80 	movabs $0x80042164a6,%rdx
  8004200395:	00 00 00 
  8004200398:	48 b8 c0 63 21 04 80 	movabs $0x80042163c0,%rax
  800420039f:	00 00 00 
  80042003a2:	48 29 c2             	sub    %rax,%rdx
  80042003a5:	48 89 d0             	mov    %rdx,%rax
  80042003a8:	48 89 c2             	mov    %rax,%rdx
  80042003ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042003af:	48 be c0 63 21 04 80 	movabs $0x80042163c0,%rsi
  80042003b6:	00 00 00 
  80042003b9:	48 89 c7             	mov    %rax,%rdi
  80042003bc:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  80042003c3:	00 00 00 
  80042003c6:	ff d0                	callq  *%rax
  80042003c8:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003cf:	00 00 00 
  80042003d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042003d6:	e9 0e 01 00 00       	jmpq   80042004e9 <boot_aps+0x1d2>
  80042003db:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042003e2:	00 00 00 
  80042003e5:	ff d0                	callq  *%rax
  80042003e7:	48 98                	cltq   
  80042003e9:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ed:	48 89 c2             	mov    %rax,%rdx
  80042003f0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f4:	48 01 c2             	add    %rax,%rdx
  80042003f7:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003fe:	00 00 00 
  8004200401:	48 01 d0             	add    %rdx,%rax
  8004200404:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200408:	75 05                	jne    800420040f <boot_aps+0xf8>
  800420040a:	e9 d2 00 00 00       	jmpq   80042004e1 <boot_aps+0x1ca>
  800420040f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200413:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420041a:	00 00 00 
  800420041d:	48 29 c2             	sub    %rax,%rdx
  8004200420:	48 89 d0             	mov    %rdx,%rax
  8004200423:	48 c1 f8 03          	sar    $0x3,%rax
  8004200427:	48 89 c2             	mov    %rax,%rdx
  800420042a:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200431:	f0 f0 f0 
  8004200434:	48 0f af c2          	imul   %rdx,%rax
  8004200438:	48 83 c0 01          	add    $0x1,%rax
  800420043c:	48 c1 e0 10          	shl    $0x10,%rax
  8004200440:	48 89 c2             	mov    %rax,%rdx
  8004200443:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  800420044a:	00 00 00 
  800420044d:	48 01 c2             	add    %rax,%rdx
  8004200450:	48 b8 d8 b5 69 04 80 	movabs $0x800469b5d8,%rax
  8004200457:	00 00 00 
  800420045a:	48 89 10             	mov    %rdx,(%rax)
  800420045d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200461:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200465:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420046c:	00 00 00 
  800420046f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200473:	77 32                	ja     80042004a7 <boot_aps+0x190>
  8004200475:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200479:	48 89 c1             	mov    %rax,%rcx
  800420047c:	48 ba 60 89 21 04 80 	movabs $0x8004218960,%rdx
  8004200483:	00 00 00 
  8004200486:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420048b:	48 bf bc 88 21 04 80 	movabs $0x80042188bc,%rdi
  8004200492:	00 00 00 
  8004200495:	b8 00 00 00 00       	mov    $0x0,%eax
  800420049a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042004a1:	00 00 00 
  80042004a4:	41 ff d0             	callq  *%r8
  80042004a7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042004ae:	ff ff ff 
  80042004b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042004b5:	48 01 d0             	add    %rdx,%rax
  80042004b8:	89 c2                	mov    %eax,%edx
  80042004ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004be:	0f b6 00             	movzbl (%rax),%eax
  80042004c1:	0f b6 c0             	movzbl %al,%eax
  80042004c4:	89 d6                	mov    %edx,%esi
  80042004c6:	89 c7                	mov    %eax,%edi
  80042004c8:	48 b8 42 70 21 04 80 	movabs $0x8004217042,%rax
  80042004cf:	00 00 00 
  80042004d2:	ff d0                	callq  *%rax
  80042004d4:	90                   	nop
  80042004d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004d9:	8b 40 04             	mov    0x4(%rax),%eax
  80042004dc:	83 f8 01             	cmp    $0x1,%eax
  80042004df:	75 f4                	jne    80042004d5 <boot_aps+0x1be>
  80042004e1:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042004e8:	00 
  80042004e9:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  80042004f0:	00 00 00 
  80042004f3:	8b 00                	mov    (%rax),%eax
  80042004f5:	48 98                	cltq   
  80042004f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042004fb:	48 89 c2             	mov    %rax,%rdx
  80042004fe:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200502:	48 01 c2             	add    %rax,%rdx
  8004200505:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420050c:	00 00 00 
  800420050f:	48 01 d0             	add    %rdx,%rax
  8004200512:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200516:	0f 87 bf fe ff ff    	ja     80042003db <boot_aps+0xc4>
  800420051c:	c9                   	leaveq 
  800420051d:	c3                   	retq   

000000800420051e <mp_main>:
  800420051e:	55                   	push   %rbp
  800420051f:	48 89 e5             	mov    %rsp,%rbp
  8004200522:	48 83 ec 10          	sub    $0x10,%rsp
  8004200526:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420052d:	00 00 00 
  8004200530:	48 8b 00             	mov    (%rax),%rax
  8004200533:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420053b:	0f 22 d8             	mov    %rax,%cr3
  800420053e:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004200545:	00 00 00 
  8004200548:	ff d0                	callq  *%rax
  800420054a:	89 c6                	mov    %eax,%esi
  800420054c:	48 bf 84 89 21 04 80 	movabs $0x8004218984,%rdi
  8004200553:	00 00 00 
  8004200556:	b8 00 00 00 00       	mov    $0x0,%eax
  800420055b:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004200562:	00 00 00 
  8004200565:	ff d2                	callq  *%rdx
  8004200567:	48 b8 db 6d 21 04 80 	movabs $0x8004216ddb,%rax
  800420056e:	00 00 00 
  8004200571:	ff d0                	callq  *%rax
  8004200573:	48 b8 73 81 20 04 80 	movabs $0x8004208173,%rax
  800420057a:	00 00 00 
  800420057d:	ff d0                	callq  *%rax
  800420057f:	48 b8 fd bd 20 04 80 	movabs $0x800420bdfd,%rax
  8004200586:	00 00 00 
  8004200589:	ff d0                	callq  *%rax
  800420058b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004200592:	00 00 00 
  8004200595:	ff d0                	callq  *%rax
  8004200597:	48 98                	cltq   
  8004200599:	48 c1 e0 03          	shl    $0x3,%rax
  800420059d:	48 89 c2             	mov    %rax,%rdx
  80042005a0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042005a4:	48 01 d0             	add    %rdx,%rax
  80042005a7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042005ae:	00 00 00 
  80042005b1:	48 01 d0             	add    %rdx,%rax
  80042005b4:	48 83 c0 04          	add    $0x4,%rax
  80042005b8:	be 01 00 00 00       	mov    $0x1,%esi
  80042005bd:	48 89 c7             	mov    %rax,%rdi
  80042005c0:	48 b8 ce 00 20 04 80 	movabs $0x80042000ce,%rax
  80042005c7:	00 00 00 
  80042005ca:	ff d0                	callq  *%rax
  80042005cc:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042005d3:	00 00 00 
  80042005d6:	ff d0                	callq  *%rax
  80042005d8:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  80042005df:	00 00 00 
  80042005e2:	ff d0                	callq  *%rax

00000080042005e4 <_panic>:
  80042005e4:	55                   	push   %rbp
  80042005e5:	48 89 e5             	mov    %rsp,%rbp
  80042005e8:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042005ef:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042005f6:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042005fc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004200603:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420060a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200611:	84 c0                	test   %al,%al
  8004200613:	74 20                	je     8004200635 <_panic+0x51>
  8004200615:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200619:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420061d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200621:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200625:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200629:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420062d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200631:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200635:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420063c:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  8004200643:	00 00 00 
  8004200646:	48 8b 00             	mov    (%rax),%rax
  8004200649:	48 85 c0             	test   %rax,%rax
  800420064c:	74 05                	je     8004200653 <_panic+0x6f>
  800420064e:	e9 b5 00 00 00       	jmpq   8004200708 <_panic+0x124>
  8004200653:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420065a:	00 00 00 
  800420065d:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200664:	48 89 10             	mov    %rdx,(%rax)
  8004200667:	fa                   	cli    
  8004200668:	fc                   	cld    
  8004200669:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200670:	00 00 00 
  8004200673:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420067a:	00 00 00 
  800420067d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200681:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200688:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200696:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420069d:	00 00 00 
  80042006a0:	ff d0                	callq  *%rax
  80042006a2:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  80042006a8:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042006af:	89 c6                	mov    %eax,%esi
  80042006b1:	48 bf a0 89 21 04 80 	movabs $0x80042189a0,%rdi
  80042006b8:	00 00 00 
  80042006bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006c0:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  80042006c7:	00 00 00 
  80042006ca:	41 ff d0             	callq  *%r8
  80042006cd:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006d4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006db:	48 89 d6             	mov    %rdx,%rsi
  80042006de:	48 89 c7             	mov    %rax,%rdi
  80042006e1:	48 b8 23 95 20 04 80 	movabs $0x8004209523,%rax
  80042006e8:	00 00 00 
  80042006eb:	ff d0                	callq  *%rax
  80042006ed:	48 bf c2 89 21 04 80 	movabs $0x80042189c2,%rdi
  80042006f4:	00 00 00 
  80042006f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006fc:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004200703:	00 00 00 
  8004200706:	ff d2                	callq  *%rdx
  8004200708:	bf 00 00 00 00       	mov    $0x0,%edi
  800420070d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  8004200714:	00 00 00 
  8004200717:	ff d0                	callq  *%rax
  8004200719:	eb ed                	jmp    8004200708 <_panic+0x124>

000000800420071b <_warn>:
  800420071b:	55                   	push   %rbp
  800420071c:	48 89 e5             	mov    %rsp,%rbp
  800420071f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200726:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420072d:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200733:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420073a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200741:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200748:	84 c0                	test   %al,%al
  800420074a:	74 20                	je     800420076c <_warn+0x51>
  800420074c:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200750:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200754:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200758:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420075c:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200760:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200764:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200768:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420076c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200773:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420077a:	00 00 00 
  800420077d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200784:	00 00 00 
  8004200787:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420078b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200792:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200799:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042007a0:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042007a6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042007ad:	48 89 c6             	mov    %rax,%rsi
  80042007b0:	48 bf c4 89 21 04 80 	movabs $0x80042189c4,%rdi
  80042007b7:	00 00 00 
  80042007ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007bf:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  80042007c6:	00 00 00 
  80042007c9:	ff d1                	callq  *%rcx
  80042007cb:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042007d2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042007d9:	48 89 d6             	mov    %rdx,%rsi
  80042007dc:	48 89 c7             	mov    %rax,%rdi
  80042007df:	48 b8 23 95 20 04 80 	movabs $0x8004209523,%rax
  80042007e6:	00 00 00 
  80042007e9:	ff d0                	callq  *%rax
  80042007eb:	48 bf c2 89 21 04 80 	movabs $0x80042189c2,%rdi
  80042007f2:	00 00 00 
  80042007f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007fa:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004200801:	00 00 00 
  8004200804:	ff d2                	callq  *%rdx
  8004200806:	c9                   	leaveq 
  8004200807:	c3                   	retq   

0000008004200808 <delay>:
  8004200808:	55                   	push   %rbp
  8004200809:	48 89 e5             	mov    %rsp,%rbp
  800420080c:	48 83 ec 20          	sub    $0x20,%rsp
  8004200810:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200817:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420081a:	89 c2                	mov    %eax,%edx
  800420081c:	ec                   	in     (%dx),%al
  800420081d:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200820:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200827:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420082a:	89 c2                	mov    %eax,%edx
  800420082c:	ec                   	in     (%dx),%al
  800420082d:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200830:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200837:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420083a:	89 c2                	mov    %eax,%edx
  800420083c:	ec                   	in     (%dx),%al
  800420083d:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200840:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200847:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420084a:	89 c2                	mov    %eax,%edx
  800420084c:	ec                   	in     (%dx),%al
  800420084d:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200850:	c9                   	leaveq 
  8004200851:	c3                   	retq   

0000008004200852 <serial_proc_data>:
  8004200852:	55                   	push   %rbp
  8004200853:	48 89 e5             	mov    %rsp,%rbp
  8004200856:	48 83 ec 10          	sub    $0x10,%rsp
  800420085a:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200861:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200864:	89 c2                	mov    %eax,%edx
  8004200866:	ec                   	in     (%dx),%al
  8004200867:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420086a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420086e:	0f b6 c0             	movzbl %al,%eax
  8004200871:	83 e0 01             	and    $0x1,%eax
  8004200874:	85 c0                	test   %eax,%eax
  8004200876:	75 07                	jne    800420087f <serial_proc_data+0x2d>
  8004200878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420087d:	eb 17                	jmp    8004200896 <serial_proc_data+0x44>
  800420087f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200886:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200889:	89 c2                	mov    %eax,%edx
  800420088b:	ec                   	in     (%dx),%al
  800420088c:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420088f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200893:	0f b6 c0             	movzbl %al,%eax
  8004200896:	c9                   	leaveq 
  8004200897:	c3                   	retq   

0000008004200898 <serial_intr>:
  8004200898:	55                   	push   %rbp
  8004200899:	48 89 e5             	mov    %rsp,%rbp
  800420089c:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042008a3:	00 00 00 
  80042008a6:	0f b6 00             	movzbl (%rax),%eax
  80042008a9:	84 c0                	test   %al,%al
  80042008ab:	74 16                	je     80042008c3 <serial_intr+0x2b>
  80042008ad:	48 bf 52 08 20 04 80 	movabs $0x8004200852,%rdi
  80042008b4:	00 00 00 
  80042008b7:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  80042008be:	00 00 00 
  80042008c1:	ff d0                	callq  *%rax
  80042008c3:	5d                   	pop    %rbp
  80042008c4:	c3                   	retq   

00000080042008c5 <serial_putc>:
  80042008c5:	55                   	push   %rbp
  80042008c6:	48 89 e5             	mov    %rsp,%rbp
  80042008c9:	48 83 ec 28          	sub    $0x28,%rsp
  80042008cd:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042008d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042008d7:	eb 10                	jmp    80042008e9 <serial_putc+0x24>
  80042008d9:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  80042008e0:	00 00 00 
  80042008e3:	ff d0                	callq  *%rax
  80042008e5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042008e9:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008f0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042008f3:	89 c2                	mov    %eax,%edx
  80042008f5:	ec                   	in     (%dx),%al
  80042008f6:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042008f9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042008fd:	0f b6 c0             	movzbl %al,%eax
  8004200900:	83 e0 20             	and    $0x20,%eax
  8004200903:	85 c0                	test   %eax,%eax
  8004200905:	75 09                	jne    8004200910 <serial_putc+0x4b>
  8004200907:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420090e:	7e c9                	jle    80042008d9 <serial_putc+0x14>
  8004200910:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200913:	0f b6 c0             	movzbl %al,%eax
  8004200916:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420091d:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200920:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200924:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200927:	ee                   	out    %al,(%dx)
  8004200928:	c9                   	leaveq 
  8004200929:	c3                   	retq   

000000800420092a <serial_init>:
  800420092a:	55                   	push   %rbp
  800420092b:	48 89 e5             	mov    %rsp,%rbp
  800420092e:	48 83 ec 50          	sub    $0x50,%rsp
  8004200932:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  8004200939:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420093d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200941:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200944:	ee                   	out    %al,(%dx)
  8004200945:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420094c:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200950:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200954:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200957:	ee                   	out    %al,(%dx)
  8004200958:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  800420095f:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200963:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200967:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420096a:	ee                   	out    %al,(%dx)
  800420096b:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200972:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200976:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420097a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420097d:	ee                   	out    %al,(%dx)
  800420097e:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200985:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  8004200989:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420098d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200990:	ee                   	out    %al,(%dx)
  8004200991:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200998:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420099c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042009a0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042009a3:	ee                   	out    %al,(%dx)
  80042009a4:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  80042009ab:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042009af:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042009b3:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042009b6:	ee                   	out    %al,(%dx)
  80042009b7:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009be:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042009c1:	89 c2                	mov    %eax,%edx
  80042009c3:	ec                   	in     (%dx),%al
  80042009c4:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042009c7:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042009cb:	3c ff                	cmp    $0xff,%al
  80042009cd:	0f 95 c2             	setne  %dl
  80042009d0:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042009d7:	00 00 00 
  80042009da:	88 10                	mov    %dl,(%rax)
  80042009dc:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009e3:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042009e6:	89 c2                	mov    %eax,%edx
  80042009e8:	ec                   	in     (%dx),%al
  80042009e9:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042009ec:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042009f3:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042009f6:	89 c2                	mov    %eax,%edx
  80042009f8:	ec                   	in     (%dx),%al
  80042009f9:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042009fc:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004200a03:	00 00 00 
  8004200a06:	0f b6 00             	movzbl (%rax),%eax
  8004200a09:	84 c0                	test   %al,%al
  8004200a0b:	74 23                	je     8004200a30 <serial_init+0x106>
  8004200a0d:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004200a14:	00 00 00 
  8004200a17:	0f b7 00             	movzwl (%rax),%eax
  8004200a1a:	0f b7 c0             	movzwl %ax,%eax
  8004200a1d:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200a22:	89 c7                	mov    %eax,%edi
  8004200a24:	48 b8 d4 93 20 04 80 	movabs $0x80042093d4,%rax
  8004200a2b:	00 00 00 
  8004200a2e:	ff d0                	callq  *%rax
  8004200a30:	c9                   	leaveq 
  8004200a31:	c3                   	retq   

0000008004200a32 <lpt_putc>:
  8004200a32:	55                   	push   %rbp
  8004200a33:	48 89 e5             	mov    %rsp,%rbp
  8004200a36:	48 83 ec 38          	sub    $0x38,%rsp
  8004200a3a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200a3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200a44:	eb 10                	jmp    8004200a56 <lpt_putc+0x24>
  8004200a46:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  8004200a4d:	00 00 00 
  8004200a50:	ff d0                	callq  *%rax
  8004200a52:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200a56:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200a5d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200a60:	89 c2                	mov    %eax,%edx
  8004200a62:	ec                   	in     (%dx),%al
  8004200a63:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200a66:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200a6a:	84 c0                	test   %al,%al
  8004200a6c:	78 09                	js     8004200a77 <lpt_putc+0x45>
  8004200a6e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200a75:	7e cf                	jle    8004200a46 <lpt_putc+0x14>
  8004200a77:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200a7a:	0f b6 c0             	movzbl %al,%eax
  8004200a7d:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200a84:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a87:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200a8b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200a8e:	ee                   	out    %al,(%dx)
  8004200a8f:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200a96:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  8004200a9a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200a9e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200aa1:	ee                   	out    %al,(%dx)
  8004200aa2:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  8004200aa9:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200aad:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200ab1:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200ab4:	ee                   	out    %al,(%dx)
  8004200ab5:	c9                   	leaveq 
  8004200ab6:	c3                   	retq   

0000008004200ab7 <cga_init>:
  8004200ab7:	55                   	push   %rbp
  8004200ab8:	48 89 e5             	mov    %rsp,%rbp
  8004200abb:	48 83 ec 30          	sub    $0x30,%rsp
  8004200abf:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  8004200ac6:	00 00 00 
  8004200ac9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ad1:	0f b7 00             	movzwl (%rax),%eax
  8004200ad4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004200ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200adc:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  8004200ae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ae5:	0f b7 00             	movzwl (%rax),%eax
  8004200ae8:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200aec:	74 20                	je     8004200b0e <cga_init+0x57>
  8004200aee:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200af5:	00 00 00 
  8004200af8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200afc:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b03:	00 00 00 
  8004200b06:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200b0c:	eb 1b                	jmp    8004200b29 <cga_init+0x72>
  8004200b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200b12:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200b16:	66 89 10             	mov    %dx,(%rax)
  8004200b19:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b20:	00 00 00 
  8004200b23:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200b29:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b30:	00 00 00 
  8004200b33:	8b 00                	mov    (%rax),%eax
  8004200b35:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200b38:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200b3c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200b40:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200b43:	ee                   	out    %al,(%dx)
  8004200b44:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b4b:	00 00 00 
  8004200b4e:	8b 00                	mov    (%rax),%eax
  8004200b50:	83 c0 01             	add    $0x1,%eax
  8004200b53:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b56:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200b59:	89 c2                	mov    %eax,%edx
  8004200b5b:	ec                   	in     (%dx),%al
  8004200b5c:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200b5f:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200b63:	0f b6 c0             	movzbl %al,%eax
  8004200b66:	c1 e0 08             	shl    $0x8,%eax
  8004200b69:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200b6c:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b73:	00 00 00 
  8004200b76:	8b 00                	mov    (%rax),%eax
  8004200b78:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200b7b:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200b7f:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200b83:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200b86:	ee                   	out    %al,(%dx)
  8004200b87:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b8e:	00 00 00 
  8004200b91:	8b 00                	mov    (%rax),%eax
  8004200b93:	83 c0 01             	add    $0x1,%eax
  8004200b96:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b99:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200b9c:	89 c2                	mov    %eax,%edx
  8004200b9e:	ec                   	in     (%dx),%al
  8004200b9f:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200ba2:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200ba6:	0f b6 c0             	movzbl %al,%eax
  8004200ba9:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200bac:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200bb3:	00 00 00 
  8004200bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200bba:	48 89 10             	mov    %rdx,(%rax)
  8004200bbd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200bc0:	89 c2                	mov    %eax,%edx
  8004200bc2:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200bc9:	00 00 00 
  8004200bcc:	66 89 10             	mov    %dx,(%rax)
  8004200bcf:	c9                   	leaveq 
  8004200bd0:	c3                   	retq   

0000008004200bd1 <cga_putc>:
  8004200bd1:	55                   	push   %rbp
  8004200bd2:	48 89 e5             	mov    %rsp,%rbp
  8004200bd5:	48 83 ec 40          	sub    $0x40,%rsp
  8004200bd9:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200bdc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bdf:	b0 00                	mov    $0x0,%al
  8004200be1:	85 c0                	test   %eax,%eax
  8004200be3:	75 07                	jne    8004200bec <cga_putc+0x1b>
  8004200be5:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200bec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bef:	0f b6 c0             	movzbl %al,%eax
  8004200bf2:	83 f8 09             	cmp    $0x9,%eax
  8004200bf5:	0f 84 f6 00 00 00    	je     8004200cf1 <cga_putc+0x120>
  8004200bfb:	83 f8 09             	cmp    $0x9,%eax
  8004200bfe:	7f 0a                	jg     8004200c0a <cga_putc+0x39>
  8004200c00:	83 f8 08             	cmp    $0x8,%eax
  8004200c03:	74 18                	je     8004200c1d <cga_putc+0x4c>
  8004200c05:	e9 3e 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c0a:	83 f8 0a             	cmp    $0xa,%eax
  8004200c0d:	74 75                	je     8004200c84 <cga_putc+0xb3>
  8004200c0f:	83 f8 0d             	cmp    $0xd,%eax
  8004200c12:	0f 84 89 00 00 00    	je     8004200ca1 <cga_putc+0xd0>
  8004200c18:	e9 2b 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c1d:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c24:	00 00 00 
  8004200c27:	0f b7 00             	movzwl (%rax),%eax
  8004200c2a:	66 85 c0             	test   %ax,%ax
  8004200c2d:	74 50                	je     8004200c7f <cga_putc+0xae>
  8004200c2f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c36:	00 00 00 
  8004200c39:	0f b7 00             	movzwl (%rax),%eax
  8004200c3c:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200c3f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c46:	00 00 00 
  8004200c49:	66 89 10             	mov    %dx,(%rax)
  8004200c4c:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200c53:	00 00 00 
  8004200c56:	48 8b 10             	mov    (%rax),%rdx
  8004200c59:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c60:	00 00 00 
  8004200c63:	0f b7 00             	movzwl (%rax),%eax
  8004200c66:	0f b7 c0             	movzwl %ax,%eax
  8004200c69:	48 01 c0             	add    %rax,%rax
  8004200c6c:	48 01 c2             	add    %rax,%rdx
  8004200c6f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c72:	b0 00                	mov    $0x0,%al
  8004200c74:	83 c8 20             	or     $0x20,%eax
  8004200c77:	66 89 02             	mov    %ax,(%rdx)
  8004200c7a:	e9 04 01 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c7f:	e9 ff 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c84:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c8b:	00 00 00 
  8004200c8e:	0f b7 00             	movzwl (%rax),%eax
  8004200c91:	8d 50 50             	lea    0x50(%rax),%edx
  8004200c94:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c9b:	00 00 00 
  8004200c9e:	66 89 10             	mov    %dx,(%rax)
  8004200ca1:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ca8:	00 00 00 
  8004200cab:	0f b7 30             	movzwl (%rax),%esi
  8004200cae:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200cb5:	00 00 00 
  8004200cb8:	0f b7 08             	movzwl (%rax),%ecx
  8004200cbb:	0f b7 c1             	movzwl %cx,%eax
  8004200cbe:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200cc4:	c1 e8 10             	shr    $0x10,%eax
  8004200cc7:	89 c2                	mov    %eax,%edx
  8004200cc9:	66 c1 ea 06          	shr    $0x6,%dx
  8004200ccd:	89 d0                	mov    %edx,%eax
  8004200ccf:	c1 e0 02             	shl    $0x2,%eax
  8004200cd2:	01 d0                	add    %edx,%eax
  8004200cd4:	c1 e0 04             	shl    $0x4,%eax
  8004200cd7:	29 c1                	sub    %eax,%ecx
  8004200cd9:	89 ca                	mov    %ecx,%edx
  8004200cdb:	29 d6                	sub    %edx,%esi
  8004200cdd:	89 f2                	mov    %esi,%edx
  8004200cdf:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ce6:	00 00 00 
  8004200ce9:	66 89 10             	mov    %dx,(%rax)
  8004200cec:	e9 92 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200cf1:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200cf6:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200cfd:	00 00 00 
  8004200d00:	ff d0                	callq  *%rax
  8004200d02:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d07:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d0e:	00 00 00 
  8004200d11:	ff d0                	callq  *%rax
  8004200d13:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d18:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d1f:	00 00 00 
  8004200d22:	ff d0                	callq  *%rax
  8004200d24:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d29:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d30:	00 00 00 
  8004200d33:	ff d0                	callq  *%rax
  8004200d35:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d3a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d41:	00 00 00 
  8004200d44:	ff d0                	callq  *%rax
  8004200d46:	eb 3b                	jmp    8004200d83 <cga_putc+0x1b2>
  8004200d48:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200d4f:	00 00 00 
  8004200d52:	48 8b 30             	mov    (%rax),%rsi
  8004200d55:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d5c:	00 00 00 
  8004200d5f:	0f b7 00             	movzwl (%rax),%eax
  8004200d62:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d65:	48 ba 10 c0 49 04 80 	movabs $0x800449c010,%rdx
  8004200d6c:	00 00 00 
  8004200d6f:	66 89 0a             	mov    %cx,(%rdx)
  8004200d72:	0f b7 c0             	movzwl %ax,%eax
  8004200d75:	48 01 c0             	add    %rax,%rax
  8004200d78:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200d7c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200d7f:	66 89 02             	mov    %ax,(%rdx)
  8004200d82:	90                   	nop
  8004200d83:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d8a:	00 00 00 
  8004200d8d:	0f b7 00             	movzwl (%rax),%eax
  8004200d90:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200d94:	0f 86 89 00 00 00    	jbe    8004200e23 <cga_putc+0x252>
  8004200d9a:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200da1:	00 00 00 
  8004200da4:	48 8b 00             	mov    (%rax),%rax
  8004200da7:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200dae:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200db5:	00 00 00 
  8004200db8:	48 8b 00             	mov    (%rax),%rax
  8004200dbb:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200dc0:	48 89 ce             	mov    %rcx,%rsi
  8004200dc3:	48 89 c7             	mov    %rax,%rdi
  8004200dc6:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  8004200dcd:	00 00 00 
  8004200dd0:	ff d0                	callq  *%rax
  8004200dd2:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200dd9:	eb 22                	jmp    8004200dfd <cga_putc+0x22c>
  8004200ddb:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200de2:	00 00 00 
  8004200de5:	48 8b 00             	mov    (%rax),%rax
  8004200de8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200deb:	48 63 d2             	movslq %edx,%rdx
  8004200dee:	48 01 d2             	add    %rdx,%rdx
  8004200df1:	48 01 d0             	add    %rdx,%rax
  8004200df4:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200df9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200dfd:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200e04:	7e d5                	jle    8004200ddb <cga_putc+0x20a>
  8004200e06:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e0d:	00 00 00 
  8004200e10:	0f b7 00             	movzwl (%rax),%eax
  8004200e13:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200e16:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e1d:	00 00 00 
  8004200e20:	66 89 10             	mov    %dx,(%rax)
  8004200e23:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e2a:	00 00 00 
  8004200e2d:	8b 00                	mov    (%rax),%eax
  8004200e2f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200e32:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200e36:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200e3a:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200e3d:	ee                   	out    %al,(%dx)
  8004200e3e:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e45:	00 00 00 
  8004200e48:	0f b7 00             	movzwl (%rax),%eax
  8004200e4b:	66 c1 e8 08          	shr    $0x8,%ax
  8004200e4f:	0f b6 c0             	movzbl %al,%eax
  8004200e52:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200e59:	00 00 00 
  8004200e5c:	8b 12                	mov    (%rdx),%edx
  8004200e5e:	83 c2 01             	add    $0x1,%edx
  8004200e61:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200e64:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200e67:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200e6b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200e6e:	ee                   	out    %al,(%dx)
  8004200e6f:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e76:	00 00 00 
  8004200e79:	8b 00                	mov    (%rax),%eax
  8004200e7b:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200e7e:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200e82:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200e86:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200e89:	ee                   	out    %al,(%dx)
  8004200e8a:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e91:	00 00 00 
  8004200e94:	0f b7 00             	movzwl (%rax),%eax
  8004200e97:	0f b6 c0             	movzbl %al,%eax
  8004200e9a:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200ea1:	00 00 00 
  8004200ea4:	8b 12                	mov    (%rdx),%edx
  8004200ea6:	83 c2 01             	add    $0x1,%edx
  8004200ea9:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200eac:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200eaf:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200eb3:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200eb6:	ee                   	out    %al,(%dx)
  8004200eb7:	c9                   	leaveq 
  8004200eb8:	c3                   	retq   

0000008004200eb9 <kbd_proc_data>:
  8004200eb9:	55                   	push   %rbp
  8004200eba:	48 89 e5             	mov    %rsp,%rbp
  8004200ebd:	48 83 ec 30          	sub    $0x30,%rsp
  8004200ec1:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ec8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ecb:	89 c2                	mov    %eax,%edx
  8004200ecd:	ec                   	in     (%dx),%al
  8004200ece:	88 45 ef             	mov    %al,-0x11(%rbp)
	return data;
  8004200ed1:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200ed5:	0f b6 c0             	movzbl %al,%eax
  8004200ed8:	83 e0 01             	and    $0x1,%eax
  8004200edb:	85 c0                	test   %eax,%eax
  8004200edd:	75 0a                	jne    8004200ee9 <kbd_proc_data+0x30>
  8004200edf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200ee4:	e9 28 02 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200ee9:	c7 45 e8 60 00 00 00 	movl   $0x60,-0x18(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ef0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200ef3:	89 c2                	mov    %eax,%edx
  8004200ef5:	ec                   	in     (%dx),%al
  8004200ef6:	88 45 e7             	mov    %al,-0x19(%rbp)
	return data;
  8004200ef9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200efd:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f00:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200f04:	75 27                	jne    8004200f2d <kbd_proc_data+0x74>
  8004200f06:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f0d:	00 00 00 
  8004200f10:	8b 00                	mov    (%rax),%eax
  8004200f12:	83 c8 40             	or     $0x40,%eax
  8004200f15:	89 c2                	mov    %eax,%edx
  8004200f17:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f1e:	00 00 00 
  8004200f21:	89 10                	mov    %edx,(%rax)
  8004200f23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f28:	e9 e4 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f31:	84 c0                	test   %al,%al
  8004200f33:	79 65                	jns    8004200f9a <kbd_proc_data+0xe1>
  8004200f35:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f3c:	00 00 00 
  8004200f3f:	8b 00                	mov    (%rax),%eax
  8004200f41:	83 e0 40             	and    $0x40,%eax
  8004200f44:	85 c0                	test   %eax,%eax
  8004200f46:	75 09                	jne    8004200f51 <kbd_proc_data+0x98>
  8004200f48:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f4c:	83 e0 7f             	and    $0x7f,%eax
  8004200f4f:	eb 04                	jmp    8004200f55 <kbd_proc_data+0x9c>
  8004200f51:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f55:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f58:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f5c:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200f63:	00 00 00 
  8004200f66:	48 98                	cltq   
  8004200f68:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f6c:	83 c8 40             	or     $0x40,%eax
  8004200f6f:	0f b6 c0             	movzbl %al,%eax
  8004200f72:	f7 d0                	not    %eax
  8004200f74:	89 c2                	mov    %eax,%edx
  8004200f76:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f7d:	00 00 00 
  8004200f80:	8b 00                	mov    (%rax),%eax
  8004200f82:	21 c2                	and    %eax,%edx
  8004200f84:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f8b:	00 00 00 
  8004200f8e:	89 10                	mov    %edx,(%rax)
  8004200f90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f95:	e9 77 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f9a:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fa1:	00 00 00 
  8004200fa4:	8b 00                	mov    (%rax),%eax
  8004200fa6:	83 e0 40             	and    $0x40,%eax
  8004200fa9:	85 c0                	test   %eax,%eax
  8004200fab:	74 21                	je     8004200fce <kbd_proc_data+0x115>
  8004200fad:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200fb1:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fb8:	00 00 00 
  8004200fbb:	8b 00                	mov    (%rax),%eax
  8004200fbd:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200fc0:	89 c2                	mov    %eax,%edx
  8004200fc2:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fc9:	00 00 00 
  8004200fcc:	89 10                	mov    %edx,(%rax)
  8004200fce:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200fd2:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200fd9:	00 00 00 
  8004200fdc:	48 98                	cltq   
  8004200fde:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200fe2:	0f b6 d0             	movzbl %al,%edx
  8004200fe5:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fec:	00 00 00 
  8004200fef:	8b 00                	mov    (%rax),%eax
  8004200ff1:	09 c2                	or     %eax,%edx
  8004200ff3:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200ffa:	00 00 00 
  8004200ffd:	89 10                	mov    %edx,(%rax)
  8004200fff:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201003:	48 ba 60 c1 22 04 80 	movabs $0x800422c160,%rdx
  800420100a:	00 00 00 
  800420100d:	48 98                	cltq   
  800420100f:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201013:	0f b6 d0             	movzbl %al,%edx
  8004201016:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420101d:	00 00 00 
  8004201020:	8b 00                	mov    (%rax),%eax
  8004201022:	31 c2                	xor    %eax,%edx
  8004201024:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420102b:	00 00 00 
  800420102e:	89 10                	mov    %edx,(%rax)
  8004201030:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201037:	00 00 00 
  800420103a:	8b 00                	mov    (%rax),%eax
  800420103c:	83 e0 03             	and    $0x3,%eax
  800420103f:	89 c2                	mov    %eax,%edx
  8004201041:	48 b8 60 c5 22 04 80 	movabs $0x800422c560,%rax
  8004201048:	00 00 00 
  800420104b:	89 d2                	mov    %edx,%edx
  800420104d:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004201051:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201055:	48 01 d0             	add    %rdx,%rax
  8004201058:	0f b6 00             	movzbl (%rax),%eax
  800420105b:	0f b6 c0             	movzbl %al,%eax
  800420105e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201061:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201068:	00 00 00 
  800420106b:	8b 00                	mov    (%rax),%eax
  800420106d:	83 e0 08             	and    $0x8,%eax
  8004201070:	85 c0                	test   %eax,%eax
  8004201072:	74 22                	je     8004201096 <kbd_proc_data+0x1dd>
  8004201074:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004201078:	7e 0c                	jle    8004201086 <kbd_proc_data+0x1cd>
  800420107a:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  800420107e:	7f 06                	jg     8004201086 <kbd_proc_data+0x1cd>
  8004201080:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004201084:	eb 10                	jmp    8004201096 <kbd_proc_data+0x1dd>
  8004201086:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  800420108a:	7e 0a                	jle    8004201096 <kbd_proc_data+0x1dd>
  800420108c:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004201090:	7f 04                	jg     8004201096 <kbd_proc_data+0x1dd>
  8004201092:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004201096:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420109d:	00 00 00 
  80042010a0:	8b 00                	mov    (%rax),%eax
  80042010a2:	f7 d0                	not    %eax
  80042010a4:	83 e0 06             	and    $0x6,%eax
  80042010a7:	85 c0                	test   %eax,%eax
  80042010a9:	75 37                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010ab:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  80042010b2:	75 2e                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010b4:	48 bf de 89 21 04 80 	movabs $0x80042189de,%rdi
  80042010bb:	00 00 00 
  80042010be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010c3:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042010ca:	00 00 00 
  80042010cd:	ff d2                	callq  *%rdx
  80042010cf:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%rbp)
  80042010d6:	c6 45 df 03          	movb   $0x3,-0x21(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042010da:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042010de:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042010e1:	ee                   	out    %al,(%dx)
  80042010e2:	83 7d fc 1b          	cmpl   $0x1b,-0x4(%rbp)
  80042010e6:	75 26                	jne    800420110e <kbd_proc_data+0x255>
  80042010e8:	48 bf ea 89 21 04 80 	movabs $0x80042189ea,%rdi
  80042010ef:	00 00 00 
  80042010f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010f7:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042010fe:	00 00 00 
  8004201101:	ff d2                	callq  *%rdx
  8004201103:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201108:	0f 01 c1             	vmcall 
  800420110b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420110e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201111:	c9                   	leaveq 
  8004201112:	c3                   	retq   

0000008004201113 <kbd_intr>:
  8004201113:	55                   	push   %rbp
  8004201114:	48 89 e5             	mov    %rsp,%rbp
  8004201117:	48 bf b9 0e 20 04 80 	movabs $0x8004200eb9,%rdi
  800420111e:	00 00 00 
  8004201121:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  8004201128:	00 00 00 
  800420112b:	ff d0                	callq  *%rax
  800420112d:	5d                   	pop    %rbp
  800420112e:	c3                   	retq   

000000800420112f <kbd_init>:
  800420112f:	55                   	push   %rbp
  8004201130:	48 89 e5             	mov    %rsp,%rbp
  8004201133:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420113a:	00 00 00 
  800420113d:	ff d0                	callq  *%rax
  800420113f:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004201146:	00 00 00 
  8004201149:	0f b7 00             	movzwl (%rax),%eax
  800420114c:	0f b7 c0             	movzwl %ax,%eax
  800420114f:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201154:	89 c7                	mov    %eax,%edi
  8004201156:	48 b8 d4 93 20 04 80 	movabs $0x80042093d4,%rax
  800420115d:	00 00 00 
  8004201160:	ff d0                	callq  *%rax
  8004201162:	5d                   	pop    %rbp
  8004201163:	c3                   	retq   

0000008004201164 <cons_intr>:
  8004201164:	55                   	push   %rbp
  8004201165:	48 89 e5             	mov    %rsp,%rbp
  8004201168:	48 83 ec 20          	sub    $0x20,%rsp
  800420116c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201170:	eb 6a                	jmp    80042011dc <cons_intr+0x78>
  8004201172:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201176:	75 02                	jne    800420117a <cons_intr+0x16>
  8004201178:	eb 62                	jmp    80042011dc <cons_intr+0x78>
  800420117a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201181:	00 00 00 
  8004201184:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420118a:	8d 48 01             	lea    0x1(%rax),%ecx
  800420118d:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  8004201194:	00 00 00 
  8004201197:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  800420119d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042011a0:	89 d1                	mov    %edx,%ecx
  80042011a2:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  80042011a9:	00 00 00 
  80042011ac:	89 c0                	mov    %eax,%eax
  80042011ae:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042011b1:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011b8:	00 00 00 
  80042011bb:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011c1:	3d 00 02 00 00       	cmp    $0x200,%eax
  80042011c6:	75 14                	jne    80042011dc <cons_intr+0x78>
  80042011c8:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011cf:	00 00 00 
  80042011d2:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  80042011d9:	00 00 00 
  80042011dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042011e0:	ff d0                	callq  *%rax
  80042011e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042011e5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042011e9:	75 87                	jne    8004201172 <cons_intr+0xe>
  80042011eb:	c9                   	leaveq 
  80042011ec:	c3                   	retq   

00000080042011ed <cons_getc>:
  80042011ed:	55                   	push   %rbp
  80042011ee:	48 89 e5             	mov    %rsp,%rbp
  80042011f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042011f5:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  80042011fc:	00 00 00 
  80042011ff:	ff d0                	callq  *%rax
  8004201201:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004201208:	00 00 00 
  800420120b:	ff d0                	callq  *%rax
  800420120d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201214:	00 00 00 
  8004201217:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  800420121d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201224:	00 00 00 
  8004201227:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420122d:	39 c2                	cmp    %eax,%edx
  800420122f:	74 69                	je     800420129a <cons_getc+0xad>
  8004201231:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201238:	00 00 00 
  800420123b:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201241:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201244:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420124b:	00 00 00 
  800420124e:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201254:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420125b:	00 00 00 
  800420125e:	89 c0                	mov    %eax,%eax
  8004201260:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201264:	0f b6 c0             	movzbl %al,%eax
  8004201267:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420126a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201271:	00 00 00 
  8004201274:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420127a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420127f:	75 14                	jne    8004201295 <cons_getc+0xa8>
  8004201281:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201288:	00 00 00 
  800420128b:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201292:	00 00 00 
  8004201295:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201298:	eb 05                	jmp    800420129f <cons_getc+0xb2>
  800420129a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420129f:	c9                   	leaveq 
  80042012a0:	c3                   	retq   

00000080042012a1 <cons_putc>:
  80042012a1:	55                   	push   %rbp
  80042012a2:	48 89 e5             	mov    %rsp,%rbp
  80042012a5:	48 83 ec 10          	sub    $0x10,%rsp
  80042012a9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042012ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012af:	89 c7                	mov    %eax,%edi
  80042012b1:	48 b8 c5 08 20 04 80 	movabs $0x80042008c5,%rax
  80042012b8:	00 00 00 
  80042012bb:	ff d0                	callq  *%rax
  80042012bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012c0:	89 c7                	mov    %eax,%edi
  80042012c2:	48 b8 32 0a 20 04 80 	movabs $0x8004200a32,%rax
  80042012c9:	00 00 00 
  80042012cc:	ff d0                	callq  *%rax
  80042012ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d1:	89 c7                	mov    %eax,%edi
  80042012d3:	48 b8 d1 0b 20 04 80 	movabs $0x8004200bd1,%rax
  80042012da:	00 00 00 
  80042012dd:	ff d0                	callq  *%rax
  80042012df:	c9                   	leaveq 
  80042012e0:	c3                   	retq   

00000080042012e1 <cons_init>:
  80042012e1:	55                   	push   %rbp
  80042012e2:	48 89 e5             	mov    %rsp,%rbp
  80042012e5:	48 b8 b7 0a 20 04 80 	movabs $0x8004200ab7,%rax
  80042012ec:	00 00 00 
  80042012ef:	ff d0                	callq  *%rax
  80042012f1:	48 b8 2f 11 20 04 80 	movabs $0x800420112f,%rax
  80042012f8:	00 00 00 
  80042012fb:	ff d0                	callq  *%rax
  80042012fd:	48 b8 2a 09 20 04 80 	movabs $0x800420092a,%rax
  8004201304:	00 00 00 
  8004201307:	ff d0                	callq  *%rax
  8004201309:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004201310:	00 00 00 
  8004201313:	0f b6 00             	movzbl (%rax),%eax
  8004201316:	83 f0 01             	xor    $0x1,%eax
  8004201319:	84 c0                	test   %al,%al
  800420131b:	74 1b                	je     8004201338 <cons_init+0x57>
  800420131d:	48 bf f7 89 21 04 80 	movabs $0x80042189f7,%rdi
  8004201324:	00 00 00 
  8004201327:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132c:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201333:	00 00 00 
  8004201336:	ff d2                	callq  *%rdx
  8004201338:	5d                   	pop    %rbp
  8004201339:	c3                   	retq   

000000800420133a <cputchar>:
  800420133a:	55                   	push   %rbp
  800420133b:	48 89 e5             	mov    %rsp,%rbp
  800420133e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201342:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201345:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201348:	89 c7                	mov    %eax,%edi
  800420134a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004201351:	00 00 00 
  8004201354:	ff d0                	callq  *%rax
  8004201356:	c9                   	leaveq 
  8004201357:	c3                   	retq   

0000008004201358 <getchar>:
  8004201358:	55                   	push   %rbp
  8004201359:	48 89 e5             	mov    %rsp,%rbp
  800420135c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201360:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  8004201367:	00 00 00 
  800420136a:	ff d0                	callq  *%rax
  800420136c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420136f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201373:	74 eb                	je     8004201360 <getchar+0x8>
  8004201375:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201378:	c9                   	leaveq 
  8004201379:	c3                   	retq   

000000800420137a <iscons>:
  800420137a:	55                   	push   %rbp
  800420137b:	48 89 e5             	mov    %rsp,%rbp
  800420137e:	48 83 ec 04          	sub    $0x4,%rsp
  8004201382:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201385:	b8 01 00 00 00       	mov    $0x1,%eax
  800420138a:	c9                   	leaveq 
  800420138b:	c3                   	retq   

000000800420138c <mon_help>:
  800420138c:	55                   	push   %rbp
  800420138d:	48 89 e5             	mov    %rsp,%rbp
  8004201390:	48 83 ec 30          	sub    $0x30,%rsp
  8004201394:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201397:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420139b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420139f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042013a6:	eb 6c                	jmp    8004201414 <mon_help+0x88>
  80042013a8:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  80042013af:	00 00 00 
  80042013b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013b5:	48 63 d0             	movslq %eax,%rdx
  80042013b8:	48 89 d0             	mov    %rdx,%rax
  80042013bb:	48 01 c0             	add    %rax,%rax
  80042013be:	48 01 d0             	add    %rdx,%rax
  80042013c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042013c5:	48 01 c8             	add    %rcx,%rax
  80042013c8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042013cc:	48 be 80 c5 22 04 80 	movabs $0x800422c580,%rsi
  80042013d3:	00 00 00 
  80042013d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013d9:	48 63 d0             	movslq %eax,%rdx
  80042013dc:	48 89 d0             	mov    %rdx,%rax
  80042013df:	48 01 c0             	add    %rax,%rax
  80042013e2:	48 01 d0             	add    %rdx,%rax
  80042013e5:	48 c1 e0 03          	shl    $0x3,%rax
  80042013e9:	48 01 f0             	add    %rsi,%rax
  80042013ec:	48 8b 00             	mov    (%rax),%rax
  80042013ef:	48 89 ca             	mov    %rcx,%rdx
  80042013f2:	48 89 c6             	mov    %rax,%rsi
  80042013f5:	48 bf a5 8a 21 04 80 	movabs $0x8004218aa5,%rdi
  80042013fc:	00 00 00 
  80042013ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201404:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420140b:	00 00 00 
  800420140e:	ff d1                	callq  *%rcx
  8004201410:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201414:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201417:	83 f8 03             	cmp    $0x3,%eax
  800420141a:	76 8c                	jbe    80042013a8 <mon_help+0x1c>
  800420141c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201421:	c9                   	leaveq 
  8004201422:	c3                   	retq   

0000008004201423 <mon_kerninfo>:
  8004201423:	55                   	push   %rbp
  8004201424:	48 89 e5             	mov    %rsp,%rbp
  8004201427:	48 83 ec 30          	sub    $0x30,%rsp
  800420142b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420142e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201432:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201436:	48 bf ae 8a 21 04 80 	movabs $0x8004218aae,%rdi
  800420143d:	00 00 00 
  8004201440:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201445:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420144c:	00 00 00 
  800420144f:	ff d2                	callq  *%rdx
  8004201451:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201458:	00 00 00 
  800420145b:	48 bf c8 8a 21 04 80 	movabs $0x8004218ac8,%rdi
  8004201462:	00 00 00 
  8004201465:	b8 00 00 00 00       	mov    $0x0,%eax
  800420146a:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201471:	00 00 00 
  8004201474:	ff d2                	callq  *%rdx
  8004201476:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  800420147d:	00 00 00 
  8004201480:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201487:	00 00 00 
  800420148a:	48 bf f0 8a 21 04 80 	movabs $0x8004218af0,%rdi
  8004201491:	00 00 00 
  8004201494:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201499:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  80042014a0:	00 00 00 
  80042014a3:	ff d1                	callq  *%rcx
  80042014a5:	48 ba 9b 88 21 00 00 	movabs $0x21889b,%rdx
  80042014ac:	00 00 00 
  80042014af:	48 be 9b 88 21 04 80 	movabs $0x800421889b,%rsi
  80042014b6:	00 00 00 
  80042014b9:	48 bf 18 8b 21 04 80 	movabs $0x8004218b18,%rdi
  80042014c0:	00 00 00 
  80042014c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014c8:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  80042014cf:	00 00 00 
  80042014d2:	ff d1                	callq  *%rcx
  80042014d4:	48 ba a0 be 49 00 00 	movabs $0x49bea0,%rdx
  80042014db:	00 00 00 
  80042014de:	48 be a0 be 49 04 80 	movabs $0x800449bea0,%rsi
  80042014e5:	00 00 00 
  80042014e8:	48 bf 40 8b 21 04 80 	movabs $0x8004218b40,%rdi
  80042014ef:	00 00 00 
  80042014f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f7:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  80042014fe:	00 00 00 
  8004201501:	ff d1                	callq  *%rcx
  8004201503:	48 ba 10 e0 6d 00 00 	movabs $0x6de010,%rdx
  800420150a:	00 00 00 
  800420150d:	48 be 10 e0 6d 04 80 	movabs $0x80046de010,%rsi
  8004201514:	00 00 00 
  8004201517:	48 bf 68 8b 21 04 80 	movabs $0x8004218b68,%rdi
  800420151e:	00 00 00 
  8004201521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201526:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420152d:	00 00 00 
  8004201530:	ff d1                	callq  *%rcx
  8004201532:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004201539:	00 
  800420153a:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201541:	00 00 00 
  8004201544:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201548:	48 29 c2             	sub    %rax,%rdx
  800420154b:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  8004201552:	00 00 00 
  8004201555:	48 83 e8 01          	sub    $0x1,%rax
  8004201559:	48 01 d0             	add    %rdx,%rax
  800420155c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201564:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201569:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420156d:	48 89 d0             	mov    %rdx,%rax
  8004201570:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201574:	48 29 c2             	sub    %rax,%rdx
  8004201577:	48 89 d0             	mov    %rdx,%rax
  800420157a:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201581:	48 85 c0             	test   %rax,%rax
  8004201584:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201588:	48 c1 f8 0a          	sar    $0xa,%rax
  800420158c:	48 89 c6             	mov    %rax,%rsi
  800420158f:	48 bf 90 8b 21 04 80 	movabs $0x8004218b90,%rdi
  8004201596:	00 00 00 
  8004201599:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159e:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042015a5:	00 00 00 
  80042015a8:	ff d2                	callq  *%rdx
  80042015aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015af:	c9                   	leaveq 
  80042015b0:	c3                   	retq   

00000080042015b1 <mon_backtrace>:
  80042015b1:	55                   	push   %rbp
  80042015b2:	48 89 e5             	mov    %rsp,%rbp
  80042015b5:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  80042015bc:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  80042015c2:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  80042015c9:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042015d0:	48 89 e8             	mov    %rbp,%rax
  80042015d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  80042015d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042015db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042015df:	48 89 e0             	mov    %rsp,%rax
  80042015e2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042015e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042015ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042015ee:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042015f5:	00 
  80042015f6:	74 21                	je     8004201619 <mon_backtrace+0x68>
  80042015f8:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042015ff:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004201603:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201607:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  800420160e:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004201615:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201619:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8004201620 <mon_backtrace+0x6f>
  8004201620:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201624:	48 bf ba 8b 21 04 80 	movabs $0x8004218bba,%rdi
  800420162b:	00 00 00 
  800420162e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201633:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420163a:	00 00 00 
  800420163d:	ff d2                	callq  *%rdx
  800420163f:	e9 17 03 00 00       	jmpq   800420195b <mon_backtrace+0x3aa>
  8004201644:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201648:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420164c:	48 89 c6             	mov    %rax,%rsi
  800420164f:	48 bf cc 8b 21 04 80 	movabs $0x8004218bcc,%rdi
  8004201656:	00 00 00 
  8004201659:	b8 00 00 00 00       	mov    $0x0,%eax
  800420165e:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  8004201665:	00 00 00 
  8004201668:	ff d1                	callq  *%rcx
  800420166a:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201675:	48 89 d6             	mov    %rdx,%rsi
  8004201678:	48 89 c7             	mov    %rax,%rdi
  800420167b:	48 b8 3c ec 20 04 80 	movabs $0x800420ec3c,%rax
  8004201682:	00 00 00 
  8004201685:	ff d0                	callq  *%rax
  8004201687:	85 c0                	test   %eax,%eax
  8004201689:	0f 88 9a 02 00 00    	js     8004201929 <mon_backtrace+0x378>
  800420168f:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  8004201696:	48 05 a8 00 00 00    	add    $0xa8,%rax
  800420169c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042016a0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  80042016a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042016ab:	48 89 d7             	mov    %rdx,%rdi
  80042016ae:	48 29 c7             	sub    %rax,%rdi
  80042016b1:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  80042016b8:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  80042016be:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  80042016c4:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  80042016cb:	49 89 f9             	mov    %rdi,%r9
  80042016ce:	49 89 f0             	mov    %rsi,%r8
  80042016d1:	48 89 c6             	mov    %rax,%rsi
  80042016d4:	48 bf e8 8b 21 04 80 	movabs $0x8004218be8,%rdi
  80042016db:	00 00 00 
  80042016de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042016e3:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  80042016ea:	00 00 00 
  80042016ed:	41 ff d2             	callq  *%r10
  80042016f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042016f4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042016f8:	66 83 f8 06          	cmp    $0x6,%ax
  80042016fc:	75 15                	jne    8004201713 <mon_backtrace+0x162>
  80042016fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201702:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420170a:	48 01 d0             	add    %rdx,%rax
  800420170d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201711:	eb 28                	jmp    800420173b <mon_backtrace+0x18a>
  8004201713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201717:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420171b:	66 83 f8 07          	cmp    $0x7,%ax
  800420171f:	75 15                	jne    8004201736 <mon_backtrace+0x185>
  8004201721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201725:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420172d:	48 01 d0             	add    %rdx,%rax
  8004201730:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201734:	eb 05                	jmp    800420173b <mon_backtrace+0x18a>
  8004201736:	e9 ee 01 00 00       	jmpq   8004201929 <mon_backtrace+0x378>
  800420173b:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201741:	89 c6                	mov    %eax,%esi
  8004201743:	48 bf 03 8c 21 04 80 	movabs $0x8004218c03,%rdi
  800420174a:	00 00 00 
  800420174d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201752:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201759:	00 00 00 
  800420175c:	ff d2                	callq  *%rdx
  800420175e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201765:	e9 f2 00 00 00       	jmpq   800420185c <mon_backtrace+0x2ab>
  800420176a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420176d:	48 98                	cltq   
  800420176f:	48 83 c0 0a          	add    $0xa,%rax
  8004201773:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420177a:	ff 
  800420177b:	48 85 c0             	test   %rax,%rax
  800420177e:	75 35                	jne    80042017b5 <mon_backtrace+0x204>
  8004201780:	48 b9 0e 8c 21 04 80 	movabs $0x8004218c0e,%rcx
  8004201787:	00 00 00 
  800420178a:	48 ba 24 8c 21 04 80 	movabs $0x8004218c24,%rdx
  8004201791:	00 00 00 
  8004201794:	be 78 00 00 00       	mov    $0x78,%esi
  8004201799:	48 bf 39 8c 21 04 80 	movabs $0x8004218c39,%rdi
  80042017a0:	00 00 00 
  80042017a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017a8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042017af:	00 00 00 
  80042017b2:	41 ff d0             	callq  *%r8
  80042017b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017b8:	48 98                	cltq   
  80042017ba:	48 83 c0 0a          	add    $0xa,%rax
  80042017be:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  80042017c5:	ff 
  80042017c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ca:	48 01 d0             	add    %rdx,%rax
  80042017cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042017d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017d4:	48 98                	cltq   
  80042017d6:	48 83 c0 08          	add    $0x8,%rax
  80042017da:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042017e1:	83 f8 02             	cmp    $0x2,%eax
  80042017e4:	74 31                	je     8004201817 <mon_backtrace+0x266>
  80042017e6:	83 f8 02             	cmp    $0x2,%eax
  80042017e9:	7f 07                	jg     80042017f2 <mon_backtrace+0x241>
  80042017eb:	83 f8 01             	cmp    $0x1,%eax
  80042017ee:	74 37                	je     8004201827 <mon_backtrace+0x276>
  80042017f0:	eb 44                	jmp    8004201836 <mon_backtrace+0x285>
  80042017f2:	83 f8 04             	cmp    $0x4,%eax
  80042017f5:	74 12                	je     8004201809 <mon_backtrace+0x258>
  80042017f7:	83 f8 08             	cmp    $0x8,%eax
  80042017fa:	75 3a                	jne    8004201836 <mon_backtrace+0x285>
  80042017fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201800:	48 8b 00             	mov    (%rax),%rax
  8004201803:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201807:	eb 2d                	jmp    8004201836 <mon_backtrace+0x285>
  8004201809:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420180d:	8b 00                	mov    (%rax),%eax
  800420180f:	89 c0                	mov    %eax,%eax
  8004201811:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201815:	eb 1f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201817:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420181b:	0f b7 00             	movzwl (%rax),%eax
  800420181e:	0f b7 c0             	movzwl %ax,%eax
  8004201821:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201825:	eb 0f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201827:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420182b:	0f b6 00             	movzbl (%rax),%eax
  800420182e:	0f b6 c0             	movzbl %al,%eax
  8004201831:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201835:	90                   	nop
  8004201836:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420183a:	48 89 c6             	mov    %rax,%rsi
  800420183d:	48 bf 4b 8c 21 04 80 	movabs $0x8004218c4b,%rdi
  8004201844:	00 00 00 
  8004201847:	b8 00 00 00 00       	mov    $0x0,%eax
  800420184c:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201853:	00 00 00 
  8004201856:	ff d2                	callq  *%rdx
  8004201858:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420185c:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201862:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004201865:	0f 8f ff fe ff ff    	jg     800420176a <mon_backtrace+0x1b9>
  800420186b:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201872:	0f b7 c0             	movzwl %ax,%eax
  8004201875:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420187a:	74 48                	je     80042018c4 <mon_backtrace+0x313>
  800420187c:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201881:	75 17                	jne    800420189a <mon_backtrace+0x2e9>
  8004201883:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420188a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420188e:	48 01 d0             	add    %rdx,%rax
  8004201891:	48 8b 00             	mov    (%rax),%rax
  8004201894:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201898:	eb 2b                	jmp    80042018c5 <mon_backtrace+0x314>
  800420189a:	48 ba 52 8c 21 04 80 	movabs $0x8004218c52,%rdx
  80042018a1:	00 00 00 
  80042018a4:	be 92 00 00 00       	mov    $0x92,%esi
  80042018a9:	48 bf 39 8c 21 04 80 	movabs $0x8004218c39,%rdi
  80042018b0:	00 00 00 
  80042018b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042018b8:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042018bf:	00 00 00 
  80042018c2:	ff d1                	callq  *%rcx
  80042018c4:	90                   	nop
  80042018c5:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  80042018cc:	0f b7 c0             	movzwl %ax,%eax
  80042018cf:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  80042018d4:	74 48                	je     800420191e <mon_backtrace+0x36d>
  80042018d6:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018db:	75 17                	jne    80042018f4 <mon_backtrace+0x343>
  80042018dd:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042018e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042018e8:	48 01 d0             	add    %rdx,%rax
  80042018eb:	48 8b 00             	mov    (%rax),%rax
  80042018ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042018f2:	eb 2b                	jmp    800420191f <mon_backtrace+0x36e>
  80042018f4:	48 ba 52 8c 21 04 80 	movabs $0x8004218c52,%rdx
  80042018fb:	00 00 00 
  80042018fe:	be 9d 00 00 00       	mov    $0x9d,%esi
  8004201903:	48 bf 39 8c 21 04 80 	movabs $0x8004218c39,%rdi
  800420190a:	00 00 00 
  800420190d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201912:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201919:	00 00 00 
  800420191c:	ff d1                	callq  *%rcx
  800420191e:	90                   	nop
  800420191f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201923:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201927:	eb 17                	jmp    8004201940 <mon_backtrace+0x38f>
  8004201929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420192d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004201931:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201935:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201939:	48 8b 00             	mov    (%rax),%rax
  800420193c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201940:	48 bf 63 8c 21 04 80 	movabs $0x8004218c63,%rdi
  8004201947:	00 00 00 
  800420194a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420194f:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201956:	00 00 00 
  8004201959:	ff d2                	callq  *%rdx
  800420195b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201960:	0f 85 de fc ff ff    	jne    8004201644 <mon_backtrace+0x93>
  8004201966:	b8 00 00 00 00       	mov    $0x0,%eax
  800420196b:	c9                   	leaveq 
  800420196c:	c3                   	retq   

000000800420196d <mon_exit>:
  800420196d:	55                   	push   %rbp
  800420196e:	48 89 e5             	mov    %rsp,%rbp
  8004201971:	48 83 ec 18          	sub    $0x18,%rsp
  8004201975:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420197c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201980:	f4                   	hlt    
  8004201981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004201986:	c9                   	leaveq 
  8004201987:	c3                   	retq   

0000008004201988 <runcmd>:
  8004201988:	55                   	push   %rbp
  8004201989:	48 89 e5             	mov    %rsp,%rbp
  800420198c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201993:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420199a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042019a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042019a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042019ab:	48 98                	cltq   
  80042019ad:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042019b4:	ff 00 00 00 00 
  80042019b9:	eb 15                	jmp    80042019d0 <runcmd+0x48>
  80042019bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019c2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042019c6:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042019cd:	c6 00 00             	movb   $0x0,(%rax)
  80042019d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019d7:	0f b6 00             	movzbl (%rax),%eax
  80042019da:	84 c0                	test   %al,%al
  80042019dc:	74 2a                	je     8004201a08 <runcmd+0x80>
  80042019de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019e5:	0f b6 00             	movzbl (%rax),%eax
  80042019e8:	0f be c0             	movsbl %al,%eax
  80042019eb:	89 c6                	mov    %eax,%esi
  80042019ed:	48 bf 65 8c 21 04 80 	movabs $0x8004218c65,%rdi
  80042019f4:	00 00 00 
  80042019f7:	48 b8 5d ff 20 04 80 	movabs $0x800420ff5d,%rax
  80042019fe:	00 00 00 
  8004201a01:	ff d0                	callq  *%rax
  8004201a03:	48 85 c0             	test   %rax,%rax
  8004201a06:	75 b3                	jne    80042019bb <runcmd+0x33>
  8004201a08:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a0f:	0f b6 00             	movzbl (%rax),%eax
  8004201a12:	84 c0                	test   %al,%al
  8004201a14:	75 21                	jne    8004201a37 <runcmd+0xaf>
  8004201a16:	90                   	nop
  8004201a17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a1a:	48 98                	cltq   
  8004201a1c:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201a23:	ff 00 00 00 00 
  8004201a28:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201a2c:	0f 85 a1 00 00 00    	jne    8004201ad3 <runcmd+0x14b>
  8004201a32:	e9 92 00 00 00       	jmpq   8004201ac9 <runcmd+0x141>
  8004201a37:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004201a3b:	75 2a                	jne    8004201a67 <runcmd+0xdf>
  8004201a3d:	be 10 00 00 00       	mov    $0x10,%esi
  8004201a42:	48 bf 6a 8c 21 04 80 	movabs $0x8004218c6a,%rdi
  8004201a49:	00 00 00 
  8004201a4c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a51:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201a58:	00 00 00 
  8004201a5b:	ff d2                	callq  *%rdx
  8004201a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a62:	e9 30 01 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201a67:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a6a:	8d 50 01             	lea    0x1(%rax),%edx
  8004201a6d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201a70:	48 98                	cltq   
  8004201a72:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201a79:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201a80:	ff 
  8004201a81:	eb 08                	jmp    8004201a8b <runcmd+0x103>
  8004201a83:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201a8a:	01 
  8004201a8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a92:	0f b6 00             	movzbl (%rax),%eax
  8004201a95:	84 c0                	test   %al,%al
  8004201a97:	74 2a                	je     8004201ac3 <runcmd+0x13b>
  8004201a99:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201aa0:	0f b6 00             	movzbl (%rax),%eax
  8004201aa3:	0f be c0             	movsbl %al,%eax
  8004201aa6:	89 c6                	mov    %eax,%esi
  8004201aa8:	48 bf 65 8c 21 04 80 	movabs $0x8004218c65,%rdi
  8004201aaf:	00 00 00 
  8004201ab2:	48 b8 5d ff 20 04 80 	movabs $0x800420ff5d,%rax
  8004201ab9:	00 00 00 
  8004201abc:	ff d0                	callq  *%rax
  8004201abe:	48 85 c0             	test   %rax,%rax
  8004201ac1:	74 c0                	je     8004201a83 <runcmd+0xfb>
  8004201ac3:	90                   	nop
  8004201ac4:	e9 07 ff ff ff       	jmpq   80042019d0 <runcmd+0x48>
  8004201ac9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ace:	e9 c4 00 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201ad3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201ada:	e9 82 00 00 00       	jmpq   8004201b61 <runcmd+0x1d9>
  8004201adf:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201ae6:	00 00 00 
  8004201ae9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201aec:	48 63 d0             	movslq %eax,%rdx
  8004201aef:	48 89 d0             	mov    %rdx,%rax
  8004201af2:	48 01 c0             	add    %rax,%rax
  8004201af5:	48 01 d0             	add    %rdx,%rax
  8004201af8:	48 c1 e0 03          	shl    $0x3,%rax
  8004201afc:	48 01 c8             	add    %rcx,%rax
  8004201aff:	48 8b 10             	mov    (%rax),%rdx
  8004201b02:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b09:	48 89 d6             	mov    %rdx,%rsi
  8004201b0c:	48 89 c7             	mov    %rax,%rdi
  8004201b0f:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004201b16:	00 00 00 
  8004201b19:	ff d0                	callq  *%rax
  8004201b1b:	85 c0                	test   %eax,%eax
  8004201b1d:	75 3e                	jne    8004201b5d <runcmd+0x1d5>
  8004201b1f:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b26:	00 00 00 
  8004201b29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b2c:	48 63 d0             	movslq %eax,%rdx
  8004201b2f:	48 89 d0             	mov    %rdx,%rax
  8004201b32:	48 01 c0             	add    %rax,%rax
  8004201b35:	48 01 d0             	add    %rdx,%rax
  8004201b38:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b3c:	48 01 c8             	add    %rcx,%rax
  8004201b3f:	48 83 c0 10          	add    $0x10,%rax
  8004201b43:	48 8b 00             	mov    (%rax),%rax
  8004201b46:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201b4d:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201b54:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201b57:	89 cf                	mov    %ecx,%edi
  8004201b59:	ff d0                	callq  *%rax
  8004201b5b:	eb 3a                	jmp    8004201b97 <runcmd+0x20f>
  8004201b5d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201b61:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b64:	83 f8 03             	cmp    $0x3,%eax
  8004201b67:	0f 86 72 ff ff ff    	jbe    8004201adf <runcmd+0x157>
  8004201b6d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b74:	48 89 c6             	mov    %rax,%rsi
  8004201b77:	48 bf 87 8c 21 04 80 	movabs $0x8004218c87,%rdi
  8004201b7e:	00 00 00 
  8004201b81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b86:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201b8d:	00 00 00 
  8004201b90:	ff d2                	callq  *%rdx
  8004201b92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b97:	c9                   	leaveq 
  8004201b98:	c3                   	retq   

0000008004201b99 <monitor>:
  8004201b99:	55                   	push   %rbp
  8004201b9a:	48 89 e5             	mov    %rsp,%rbp
  8004201b9d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201ba1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201ba5:	48 bf a0 8c 21 04 80 	movabs $0x8004218ca0,%rdi
  8004201bac:	00 00 00 
  8004201baf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bb4:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201bbb:	00 00 00 
  8004201bbe:	ff d2                	callq  *%rdx
  8004201bc0:	48 bf c8 8c 21 04 80 	movabs $0x8004218cc8,%rdi
  8004201bc7:	00 00 00 
  8004201bca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bcf:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201bd6:	00 00 00 
  8004201bd9:	ff d2                	callq  *%rdx
  8004201bdb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201be0:	74 13                	je     8004201bf5 <monitor+0x5c>
  8004201be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201be6:	48 89 c7             	mov    %rax,%rdi
  8004201be9:	48 b8 79 c2 20 04 80 	movabs $0x800420c279,%rax
  8004201bf0:	00 00 00 
  8004201bf3:	ff d0                	callq  *%rax
  8004201bf5:	48 bf ed 8c 21 04 80 	movabs $0x8004218ced,%rdi
  8004201bfc:	00 00 00 
  8004201bff:	48 b8 76 fb 20 04 80 	movabs $0x800420fb76,%rax
  8004201c06:	00 00 00 
  8004201c09:	ff d0                	callq  *%rax
  8004201c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201c14:	74 20                	je     8004201c36 <monitor+0x9d>
  8004201c16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c1e:	48 89 d6             	mov    %rdx,%rsi
  8004201c21:	48 89 c7             	mov    %rax,%rdi
  8004201c24:	48 b8 88 19 20 04 80 	movabs $0x8004201988,%rax
  8004201c2b:	00 00 00 
  8004201c2e:	ff d0                	callq  *%rax
  8004201c30:	85 c0                	test   %eax,%eax
  8004201c32:	79 02                	jns    8004201c36 <monitor+0x9d>
  8004201c34:	eb 02                	jmp    8004201c38 <monitor+0x9f>
  8004201c36:	eb bd                	jmp    8004201bf5 <monitor+0x5c>
  8004201c38:	c9                   	leaveq 
  8004201c39:	c3                   	retq   

0000008004201c3a <page2ppn>:
  8004201c3a:	55                   	push   %rbp
  8004201c3b:	48 89 e5             	mov    %rsp,%rbp
  8004201c3e:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201c4a:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201c51:	00 00 00 
  8004201c54:	48 8b 00             	mov    (%rax),%rax
  8004201c57:	48 29 c2             	sub    %rax,%rdx
  8004201c5a:	48 89 d0             	mov    %rdx,%rax
  8004201c5d:	48 c1 f8 04          	sar    $0x4,%rax
  8004201c61:	c9                   	leaveq 
  8004201c62:	c3                   	retq   

0000008004201c63 <page2pa>:
  8004201c63:	55                   	push   %rbp
  8004201c64:	48 89 e5             	mov    %rsp,%rbp
  8004201c67:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c73:	48 89 c7             	mov    %rax,%rdi
  8004201c76:	48 b8 3a 1c 20 04 80 	movabs $0x8004201c3a,%rax
  8004201c7d:	00 00 00 
  8004201c80:	ff d0                	callq  *%rax
  8004201c82:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201c86:	c9                   	leaveq 
  8004201c87:	c3                   	retq   

0000008004201c88 <pa2page>:
  8004201c88:	55                   	push   %rbp
  8004201c89:	48 89 e5             	mov    %rsp,%rbp
  8004201c8c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201c90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c98:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201c9c:	48 89 c2             	mov    %rax,%rdx
  8004201c9f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201ca6:	00 00 00 
  8004201ca9:	48 8b 00             	mov    (%rax),%rax
  8004201cac:	48 39 c2             	cmp    %rax,%rdx
  8004201caf:	72 2a                	jb     8004201cdb <pa2page+0x53>
  8004201cb1:	48 ba f8 8c 21 04 80 	movabs $0x8004218cf8,%rdx
  8004201cb8:	00 00 00 
  8004201cbb:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201cc0:	48 bf 17 8d 21 04 80 	movabs $0x8004218d17,%rdi
  8004201cc7:	00 00 00 
  8004201cca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ccf:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201cd6:	00 00 00 
  8004201cd9:	ff d1                	callq  *%rcx
  8004201cdb:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201ce2:	00 00 00 
  8004201ce5:	48 8b 00             	mov    (%rax),%rax
  8004201ce8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201cec:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201cf0:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201cf4:	48 01 d0             	add    %rdx,%rax
  8004201cf7:	c9                   	leaveq 
  8004201cf8:	c3                   	retq   

0000008004201cf9 <page2kva>:
  8004201cf9:	55                   	push   %rbp
  8004201cfa:	48 89 e5             	mov    %rsp,%rbp
  8004201cfd:	48 83 ec 20          	sub    $0x20,%rsp
  8004201d01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201d09:	48 89 c7             	mov    %rax,%rdi
  8004201d0c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004201d13:	00 00 00 
  8004201d16:	ff d0                	callq  *%rax
  8004201d18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d20:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201d24:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201d27:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201d2a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201d31:	00 00 00 
  8004201d34:	48 8b 00             	mov    (%rax),%rax
  8004201d37:	48 39 c2             	cmp    %rax,%rdx
  8004201d3a:	72 32                	jb     8004201d6e <page2kva+0x75>
  8004201d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d40:	48 89 c1             	mov    %rax,%rcx
  8004201d43:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004201d4a:	00 00 00 
  8004201d4d:	be 62 00 00 00       	mov    $0x62,%esi
  8004201d52:	48 bf 17 8d 21 04 80 	movabs $0x8004218d17,%rdi
  8004201d59:	00 00 00 
  8004201d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d61:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004201d68:	00 00 00 
  8004201d6b:	41 ff d0             	callq  *%r8
  8004201d6e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201d75:	00 00 00 
  8004201d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d7c:	48 01 d0             	add    %rdx,%rax
  8004201d7f:	c9                   	leaveq 
  8004201d80:	c3                   	retq   

0000008004201d81 <restrictive_type>:
  8004201d81:	55                   	push   %rbp
  8004201d82:	48 89 e5             	mov    %rsp,%rbp
  8004201d85:	48 83 ec 08          	sub    $0x8,%rsp
  8004201d89:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201d8c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201d8f:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201d93:	74 06                	je     8004201d9b <restrictive_type+0x1a>
  8004201d95:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201d99:	75 07                	jne    8004201da2 <restrictive_type+0x21>
  8004201d9b:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201da0:	eb 3e                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201da2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201da6:	74 06                	je     8004201dae <restrictive_type+0x2d>
  8004201da8:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201dac:	75 07                	jne    8004201db5 <restrictive_type+0x34>
  8004201dae:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201db3:	eb 2b                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201db5:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201db9:	74 06                	je     8004201dc1 <restrictive_type+0x40>
  8004201dbb:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201dbf:	75 07                	jne    8004201dc8 <restrictive_type+0x47>
  8004201dc1:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201dc6:	eb 18                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201dc8:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201dcc:	74 06                	je     8004201dd4 <restrictive_type+0x53>
  8004201dce:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201dd2:	75 07                	jne    8004201ddb <restrictive_type+0x5a>
  8004201dd4:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201dd9:	eb 05                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201ddb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201de0:	c9                   	leaveq 
  8004201de1:	c3                   	retq   

0000008004201de2 <nvram_read>:
  8004201de2:	55                   	push   %rbp
  8004201de3:	48 89 e5             	mov    %rsp,%rbp
  8004201de6:	53                   	push   %rbx
  8004201de7:	48 83 ec 18          	sub    $0x18,%rsp
  8004201deb:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201dee:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201df1:	89 c7                	mov    %eax,%edi
  8004201df3:	48 b8 06 92 20 04 80 	movabs $0x8004209206,%rax
  8004201dfa:	00 00 00 
  8004201dfd:	ff d0                	callq  *%rax
  8004201dff:	89 c3                	mov    %eax,%ebx
  8004201e01:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e04:	83 c0 01             	add    $0x1,%eax
  8004201e07:	89 c7                	mov    %eax,%edi
  8004201e09:	48 b8 06 92 20 04 80 	movabs $0x8004209206,%rax
  8004201e10:	00 00 00 
  8004201e13:	ff d0                	callq  *%rax
  8004201e15:	c1 e0 08             	shl    $0x8,%eax
  8004201e18:	09 d8                	or     %ebx,%eax
  8004201e1a:	48 83 c4 18          	add    $0x18,%rsp
  8004201e1e:	5b                   	pop    %rbx
  8004201e1f:	5d                   	pop    %rbp
  8004201e20:	c3                   	retq   

0000008004201e21 <multiboot_read>:
  8004201e21:	55                   	push   %rbp
  8004201e22:	48 89 e5             	mov    %rsp,%rbp
  8004201e25:	41 54                	push   %r12
  8004201e27:	53                   	push   %rbx
  8004201e28:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201e2f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201e36:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201e3d:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201e44:	48 89 e0             	mov    %rsp,%rax
  8004201e47:	49 89 c4             	mov    %rax,%r12
  8004201e4a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e51:	8b 40 30             	mov    0x30(%rax),%eax
  8004201e54:	89 c0                	mov    %eax,%eax
  8004201e56:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201e5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e61:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201e64:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201e69:	f7 e2                	mul    %edx
  8004201e6b:	89 d0                	mov    %edx,%eax
  8004201e6d:	c1 e8 04             	shr    $0x4,%eax
  8004201e70:	89 c0                	mov    %eax,%eax
  8004201e72:	48 89 c2             	mov    %rax,%rdx
  8004201e75:	48 83 ea 01          	sub    $0x1,%rdx
  8004201e79:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201e7d:	49 89 c0             	mov    %rax,%r8
  8004201e80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201e86:	48 89 c1             	mov    %rax,%rcx
  8004201e89:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201e8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004201e92:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201e96:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201e9b:	48 83 e8 01          	sub    $0x1,%rax
  8004201e9f:	48 01 d0             	add    %rdx,%rax
  8004201ea2:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201ea7:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201eac:	48 f7 f3             	div    %rbx
  8004201eaf:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201eb3:	48 29 c4             	sub    %rax,%rsp
  8004201eb6:	48 89 e0             	mov    %rsp,%rax
  8004201eb9:	48 83 c0 07          	add    $0x7,%rax
  8004201ebd:	48 c1 e8 03          	shr    $0x3,%rax
  8004201ec1:	48 c1 e0 03          	shl    $0x3,%rax
  8004201ec5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201ec9:	48 bf 4b 8d 21 04 80 	movabs $0x8004218d4b,%rdi
  8004201ed0:	00 00 00 
  8004201ed3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ed8:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004201edf:	00 00 00 
  8004201ee2:	ff d2                	callq  *%rdx
  8004201ee4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201eeb:	e9 6c 01 00 00       	jmpq   800420205c <multiboot_read+0x23b>
  8004201ef0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ef3:	48 63 d0             	movslq %eax,%rdx
  8004201ef6:	48 89 d0             	mov    %rdx,%rax
  8004201ef9:	48 01 c0             	add    %rax,%rax
  8004201efc:	48 01 d0             	add    %rdx,%rax
  8004201eff:	48 c1 e0 03          	shl    $0x3,%rax
  8004201f03:	48 89 c2             	mov    %rax,%rdx
  8004201f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201f0a:	48 01 d0             	add    %rdx,%rax
  8004201f0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201f11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f15:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f18:	89 c0                	mov    %eax,%eax
  8004201f1a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f1e:	48 89 c2             	mov    %rax,%rdx
  8004201f21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f25:	8b 40 04             	mov    0x4(%rax),%eax
  8004201f28:	89 c0                	mov    %eax,%eax
  8004201f2a:	48 01 d0             	add    %rdx,%rax
  8004201f2d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201f31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f35:	8b 40 10             	mov    0x10(%rax),%eax
  8004201f38:	89 c0                	mov    %eax,%eax
  8004201f3a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f3e:	48 89 c2             	mov    %rax,%rdx
  8004201f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f45:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201f48:	89 c0                	mov    %eax,%eax
  8004201f4a:	48 01 d0             	add    %rdx,%rax
  8004201f4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201f51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f55:	8b 70 14             	mov    0x14(%rax),%esi
  8004201f58:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f5c:	8b 00                	mov    (%rax),%eax
  8004201f5e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201f62:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201f66:	41 89 f0             	mov    %esi,%r8d
  8004201f69:	89 c6                	mov    %eax,%esi
  8004201f6b:	48 bf 60 8d 21 04 80 	movabs $0x8004218d60,%rdi
  8004201f72:	00 00 00 
  8004201f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f7a:	49 b9 82 95 20 04 80 	movabs $0x8004209582,%r9
  8004201f81:	00 00 00 
  8004201f84:	41 ff d1             	callq  *%r9
  8004201f87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f8b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f8e:	83 f8 05             	cmp    $0x5,%eax
  8004201f91:	77 0b                	ja     8004201f9e <multiboot_read+0x17d>
  8004201f93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f97:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f9a:	85 c0                	test   %eax,%eax
  8004201f9c:	75 0b                	jne    8004201fa9 <multiboot_read+0x188>
  8004201f9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fa2:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201fa9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201fb0:	e9 85 00 00 00       	jmpq   800420203a <multiboot_read+0x219>
  8004201fb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201fb9:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201fbc:	48 63 d2             	movslq %edx,%rdx
  8004201fbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201fc3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201fc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fcb:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fce:	89 c0                	mov    %eax,%eax
  8004201fd0:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd4:	48 89 c2             	mov    %rax,%rdx
  8004201fd7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fdb:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fde:	89 c0                	mov    %eax,%eax
  8004201fe0:	48 01 d0             	add    %rdx,%rax
  8004201fe3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201fe7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201feb:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201fef:	76 45                	jbe    8004202036 <multiboot_read+0x215>
  8004201ff1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ff4:	83 c0 01             	add    $0x1,%eax
  8004201ff7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ffa:	eb 30                	jmp    800420202c <multiboot_read+0x20b>
  8004201ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202000:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202003:	48 63 d2             	movslq %edx,%rdx
  8004202006:	48 c1 e2 03          	shl    $0x3,%rdx
  800420200a:	48 01 c2             	add    %rax,%rdx
  800420200d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202011:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004202014:	48 63 c9             	movslq %ecx,%rcx
  8004202017:	48 c1 e1 03          	shl    $0x3,%rcx
  800420201b:	48 83 e9 08          	sub    $0x8,%rcx
  800420201f:	48 01 c8             	add    %rcx,%rax
  8004202022:	48 8b 00             	mov    (%rax),%rax
  8004202025:	48 89 02             	mov    %rax,(%rdx)
  8004202028:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  800420202c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420202f:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004202032:	75 c8                	jne    8004201ffc <multiboot_read+0x1db>
  8004202034:	eb 10                	jmp    8004202046 <multiboot_read+0x225>
  8004202036:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420203a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420203d:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004202040:	0f 8c 6f ff ff ff    	jl     8004201fb5 <multiboot_read+0x194>
  8004202046:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420204a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420204d:	48 63 d2             	movslq %edx,%rdx
  8004202050:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202054:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004202058:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420205c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420205f:	48 63 c8             	movslq %eax,%rcx
  8004202062:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202069:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420206c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202071:	f7 e2                	mul    %edx
  8004202073:	89 d0                	mov    %edx,%eax
  8004202075:	c1 e8 04             	shr    $0x4,%eax
  8004202078:	89 c0                	mov    %eax,%eax
  800420207a:	48 39 c1             	cmp    %rax,%rcx
  800420207d:	0f 82 6d fe ff ff    	jb     8004201ef0 <multiboot_read+0xcf>
  8004202083:	48 bf 97 8d 21 04 80 	movabs $0x8004218d97,%rdi
  800420208a:	00 00 00 
  800420208d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202092:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004202099:	00 00 00 
  800420209c:	ff d2                	callq  *%rdx
  800420209e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042020a5:	e9 93 01 00 00       	jmpq   800420223d <multiboot_read+0x41c>
  80042020aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020ad:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042020b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020b4:	48 63 d2             	movslq %edx,%rdx
  80042020b7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042020bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042020c6:	48 63 d2             	movslq %edx,%rdx
  80042020c9:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020cd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042020d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020d5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020d8:	89 c0                	mov    %eax,%eax
  80042020da:	48 c1 e0 20          	shl    $0x20,%rax
  80042020de:	48 89 c2             	mov    %rax,%rdx
  80042020e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e5:	8b 40 04             	mov    0x4(%rax),%eax
  80042020e8:	89 c0                	mov    %eax,%eax
  80042020ea:	48 01 d0             	add    %rdx,%rax
  80042020ed:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042020f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020f5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020f8:	89 c0                	mov    %eax,%eax
  80042020fa:	48 c1 e0 20          	shl    $0x20,%rax
  80042020fe:	48 89 c2             	mov    %rax,%rdx
  8004202101:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202105:	8b 40 04             	mov    0x4(%rax),%eax
  8004202108:	89 c0                	mov    %eax,%eax
  800420210a:	48 01 d0             	add    %rdx,%rax
  800420210d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004202111:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202115:	8b 40 10             	mov    0x10(%rax),%eax
  8004202118:	89 c0                	mov    %eax,%eax
  800420211a:	48 c1 e0 20          	shl    $0x20,%rax
  800420211e:	48 89 c2             	mov    %rax,%rdx
  8004202121:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202125:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202128:	89 c0                	mov    %eax,%eax
  800420212a:	48 01 d0             	add    %rdx,%rax
  800420212d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004202134:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202138:	8b 40 10             	mov    0x10(%rax),%eax
  800420213b:	89 c0                	mov    %eax,%eax
  800420213d:	48 c1 e0 20          	shl    $0x20,%rax
  8004202141:	48 89 c2             	mov    %rax,%rdx
  8004202144:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202148:	8b 40 0c             	mov    0xc(%rax),%eax
  800420214b:	89 c0                	mov    %eax,%eax
  800420214d:	48 01 d0             	add    %rdx,%rax
  8004202150:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004202157:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420215e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202162:	48 01 d0             	add    %rdx,%rax
  8004202165:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202169:	75 7c                	jne    80042021e7 <multiboot_read+0x3c6>
  800420216b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420216f:	8b 50 14             	mov    0x14(%rax),%edx
  8004202172:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202176:	8b 40 14             	mov    0x14(%rax),%eax
  8004202179:	39 c2                	cmp    %eax,%edx
  800420217b:	75 6a                	jne    80042021e7 <multiboot_read+0x3c6>
  800420217d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202184:	89 c2                	mov    %eax,%edx
  8004202186:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420218d:	01 c2                	add    %eax,%edx
  800420218f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202193:	89 50 0c             	mov    %edx,0xc(%rax)
  8004202196:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420219d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042021a4:	48 01 d0             	add    %rdx,%rax
  80042021a7:	48 c1 e8 20          	shr    $0x20,%rax
  80042021ab:	89 c2                	mov    %eax,%edx
  80042021ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021b1:	89 50 10             	mov    %edx,0x10(%rax)
  80042021b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021b8:	8b 50 04             	mov    0x4(%rax),%edx
  80042021bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021bf:	89 50 04             	mov    %edx,0x4(%rax)
  80042021c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021c6:	8b 50 08             	mov    0x8(%rax),%edx
  80042021c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021cd:	89 50 08             	mov    %edx,0x8(%rax)
  80042021d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042021d3:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042021d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042021da:	48 63 d2             	movslq %edx,%rdx
  80042021dd:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042021e4:	00 
  80042021e5:	eb 52                	jmp    8004202239 <multiboot_read+0x418>
  80042021e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042021ee:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042021f2:	48 01 d0             	add    %rdx,%rax
  80042021f5:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042021f9:	76 3e                	jbe    8004202239 <multiboot_read+0x418>
  80042021fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021ff:	8b 50 14             	mov    0x14(%rax),%edx
  8004202202:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202206:	8b 40 14             	mov    0x14(%rax),%eax
  8004202209:	89 d6                	mov    %edx,%esi
  800420220b:	89 c7                	mov    %eax,%edi
  800420220d:	48 b8 81 1d 20 04 80 	movabs $0x8004201d81,%rax
  8004202214:	00 00 00 
  8004202217:	ff d0                	callq  *%rax
  8004202219:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  800420221f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202223:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202229:	89 50 14             	mov    %edx,0x14(%rax)
  800420222c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202230:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202236:	89 50 14             	mov    %edx,0x14(%rax)
  8004202239:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420223d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202240:	48 63 c8             	movslq %eax,%rcx
  8004202243:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420224a:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420224d:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202252:	f7 e2                	mul    %edx
  8004202254:	89 d0                	mov    %edx,%eax
  8004202256:	c1 e8 04             	shr    $0x4,%eax
  8004202259:	89 c0                	mov    %eax,%eax
  800420225b:	48 39 c1             	cmp    %rax,%rcx
  800420225e:	0f 82 46 fe ff ff    	jb     80042020aa <multiboot_read+0x289>
  8004202264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420226b:	e9 dc 00 00 00       	jmpq   800420234c <multiboot_read+0x52b>
  8004202270:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202274:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004202277:	48 63 d2             	movslq %edx,%rdx
  800420227a:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420227e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202285:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800420228c:	00 
  800420228d:	0f 84 b5 00 00 00    	je     8004202348 <multiboot_read+0x527>
  8004202293:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420229a:	8b 40 14             	mov    0x14(%rax),%eax
  800420229d:	83 f8 01             	cmp    $0x1,%eax
  80042022a0:	74 13                	je     80042022b5 <multiboot_read+0x494>
  80042022a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022a9:	8b 40 14             	mov    0x14(%rax),%eax
  80042022ac:	83 f8 03             	cmp    $0x3,%eax
  80042022af:	0f 85 93 00 00 00    	jne    8004202348 <multiboot_read+0x527>
  80042022b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022bc:	8b 40 04             	mov    0x4(%rax),%eax
  80042022bf:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042022c4:	77 49                	ja     800420230f <multiboot_read+0x4ee>
  80042022c6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022cd:	8b 40 08             	mov    0x8(%rax),%eax
  80042022d0:	85 c0                	test   %eax,%eax
  80042022d2:	75 3b                	jne    800420230f <multiboot_read+0x4ee>
  80042022d4:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042022db:	48 8b 10             	mov    (%rax),%rdx
  80042022de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022e5:	8b 40 10             	mov    0x10(%rax),%eax
  80042022e8:	89 c0                	mov    %eax,%eax
  80042022ea:	48 c1 e0 20          	shl    $0x20,%rax
  80042022ee:	48 89 c1             	mov    %rax,%rcx
  80042022f1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022f8:	8b 40 0c             	mov    0xc(%rax),%eax
  80042022fb:	89 c0                	mov    %eax,%eax
  80042022fd:	48 01 c8             	add    %rcx,%rax
  8004202300:	48 01 c2             	add    %rax,%rdx
  8004202303:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420230a:	48 89 10             	mov    %rdx,(%rax)
  800420230d:	eb 39                	jmp    8004202348 <multiboot_read+0x527>
  800420230f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202316:	48 8b 10             	mov    (%rax),%rdx
  8004202319:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202320:	8b 40 10             	mov    0x10(%rax),%eax
  8004202323:	89 c0                	mov    %eax,%eax
  8004202325:	48 c1 e0 20          	shl    $0x20,%rax
  8004202329:	48 89 c1             	mov    %rax,%rcx
  800420232c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202333:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202336:	89 c0                	mov    %eax,%eax
  8004202338:	48 01 c8             	add    %rcx,%rax
  800420233b:	48 01 c2             	add    %rax,%rdx
  800420233e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202345:	48 89 10             	mov    %rdx,(%rax)
  8004202348:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420234c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420234f:	48 63 c8             	movslq %eax,%rcx
  8004202352:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202359:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420235c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202361:	f7 e2                	mul    %edx
  8004202363:	89 d0                	mov    %edx,%eax
  8004202365:	c1 e8 04             	shr    $0x4,%eax
  8004202368:	89 c0                	mov    %eax,%eax
  800420236a:	48 39 c1             	cmp    %rax,%rcx
  800420236d:	0f 82 fd fe ff ff    	jb     8004202270 <multiboot_read+0x44f>
  8004202373:	4c 89 e4             	mov    %r12,%rsp
  8004202376:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420237a:	5b                   	pop    %rbx
  800420237b:	41 5c                	pop    %r12
  800420237d:	5d                   	pop    %rbp
  800420237e:	c3                   	retq   

000000800420237f <i386_detect_memory>:
  800420237f:	55                   	push   %rbp
  8004202380:	48 89 e5             	mov    %rsp,%rbp
  8004202383:	48 83 ec 50          	sub    $0x50,%rsp
  8004202387:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420238e:	00 
  800420238f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004202396:	00 
  8004202397:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  800420239e:	00 00 00 
  80042023a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042023a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042023a9:	48 8b 00             	mov    (%rax),%rax
  80042023ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042023b0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042023b5:	74 2d                	je     80042023e4 <i386_detect_memory+0x65>
  80042023b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023bb:	8b 00                	mov    (%rax),%eax
  80042023bd:	83 e0 40             	and    $0x40,%eax
  80042023c0:	85 c0                	test   %eax,%eax
  80042023c2:	74 20                	je     80042023e4 <i386_detect_memory+0x65>
  80042023c4:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  80042023c8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  80042023cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023d0:	48 89 ce             	mov    %rcx,%rsi
  80042023d3:	48 89 c7             	mov    %rax,%rdi
  80042023d6:	48 b8 21 1e 20 04 80 	movabs $0x8004201e21,%rax
  80042023dd:	00 00 00 
  80042023e0:	ff d0                	callq  *%rax
  80042023e2:	eb 34                	jmp    8004202418 <i386_detect_memory+0x99>
  80042023e4:	bf 15 00 00 00       	mov    $0x15,%edi
  80042023e9:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  80042023f0:	00 00 00 
  80042023f3:	ff d0                	callq  *%rax
  80042023f5:	c1 e0 0a             	shl    $0xa,%eax
  80042023f8:	48 98                	cltq   
  80042023fa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042023fe:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202403:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420240a:	00 00 00 
  800420240d:	ff d0                	callq  *%rax
  800420240f:	c1 e0 0a             	shl    $0xa,%eax
  8004202412:	48 98                	cltq   
  8004202414:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202418:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420241c:	48 85 c0             	test   %rax,%rax
  800420241f:	75 35                	jne    8004202456 <i386_detect_memory+0xd7>
  8004202421:	48 b9 99 8d 21 04 80 	movabs $0x8004218d99,%rcx
  8004202428:	00 00 00 
  800420242b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004202432:	00 00 00 
  8004202435:	be 8b 00 00 00       	mov    $0x8b,%esi
  800420243a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202441:	00 00 00 
  8004202444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202449:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202450:	00 00 00 
  8004202453:	41 ff d0             	callq  *%r8
  8004202456:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420245a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420245e:	48 89 c2             	mov    %rax,%rdx
  8004202461:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202468:	00 00 00 
  800420246b:	48 89 10             	mov    %rdx,(%rax)
  800420246e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202472:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202476:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420247a:	bf 17 00 00 00       	mov    $0x17,%edi
  800420247f:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  8004202486:	00 00 00 
  8004202489:	ff d0                	callq  *%rax
  800420248b:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202490:	75 2c                	jne    80042024be <i386_detect_memory+0x13f>
  8004202492:	bf 34 00 00 00       	mov    $0x34,%edi
  8004202497:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420249e:	00 00 00 
  80042024a1:	ff d0                	callq  *%rax
  80042024a3:	c1 e0 10             	shl    $0x10,%eax
  80042024a6:	48 98                	cltq   
  80042024a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042024ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042024b0:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  80042024b6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042024be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042024c3:	74 1a                	je     80042024df <i386_detect_memory+0x160>
  80042024c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042024c9:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  80042024d0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024d7:	00 00 00 
  80042024da:	48 89 10             	mov    %rdx,(%rax)
  80042024dd:	eb 1a                	jmp    80042024f9 <i386_detect_memory+0x17a>
  80042024df:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  80042024e6:	00 00 00 
  80042024e9:	48 8b 10             	mov    (%rax),%rdx
  80042024ec:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024f3:	00 00 00 
  80042024f6:	48 89 10             	mov    %rdx,(%rax)
  80042024f9:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202500:	00 00 00 
  8004202503:	48 8b 30             	mov    (%rax),%rsi
  8004202506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420250a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420250e:	48 c1 e8 0a          	shr    $0xa,%rax
  8004202512:	48 89 c1             	mov    %rax,%rcx
  8004202515:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  800420251c:	00 00 00 
  800420251f:	48 8b 00             	mov    (%rax),%rax
  8004202522:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202526:	48 c1 e8 0a          	shr    $0xa,%rax
  800420252a:	48 89 c2             	mov    %rax,%rdx
  800420252d:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202534:	00 00 00 
  8004202537:	48 8b 00             	mov    (%rax),%rax
  800420253a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420253e:	48 c1 e8 14          	shr    $0x14,%rax
  8004202542:	49 89 f0             	mov    %rsi,%r8
  8004202545:	48 89 c6             	mov    %rax,%rsi
  8004202548:	48 bf c8 8d 21 04 80 	movabs $0x8004218dc8,%rdi
  800420254f:	00 00 00 
  8004202552:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202557:	49 b9 82 95 20 04 80 	movabs $0x8004209582,%r9
  800420255e:	00 00 00 
  8004202561:	41 ff d1             	callq  *%r9
  8004202564:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420256b:	00 
  800420256c:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202573:	07 
  8004202574:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202578:	48 c1 e0 0c          	shl    $0xc,%rax
  800420257c:	48 c1 e8 14          	shr    $0x14,%rax
  8004202580:	48 89 c1             	mov    %rax,%rcx
  8004202583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202587:	48 c1 e0 0c          	shl    $0xc,%rax
  800420258b:	48 c1 e8 14          	shr    $0x14,%rax
  800420258f:	48 89 c6             	mov    %rax,%rsi
  8004202592:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202596:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420259a:	49 89 c8             	mov    %rcx,%r8
  800420259d:	48 89 d1             	mov    %rdx,%rcx
  80042025a0:	48 89 f2             	mov    %rsi,%rdx
  80042025a3:	48 89 c6             	mov    %rax,%rsi
  80042025a6:	48 bf 18 8e 21 04 80 	movabs $0x8004218e18,%rdi
  80042025ad:	00 00 00 
  80042025b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b5:	49 b9 82 95 20 04 80 	movabs $0x8004209582,%r9
  80042025bc:	00 00 00 
  80042025bf:	41 ff d1             	callq  *%r9
  80042025c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025c6:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042025ca:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  80042025cf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042025d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025da:	00 00 00 
  80042025dd:	48 8b 00             	mov    (%rax),%rax
  80042025e0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042025e4:	76 3a                	jbe    8004202620 <i386_detect_memory+0x2a1>
  80042025e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042025ea:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042025f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025f8:	00 00 00 
  80042025fb:	48 89 10             	mov    %rdx,(%rax)
  80042025fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202602:	48 89 c6             	mov    %rax,%rsi
  8004202605:	48 bf 80 8e 21 04 80 	movabs $0x8004218e80,%rdi
  800420260c:	00 00 00 
  800420260f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202614:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420261b:	00 00 00 
  800420261e:	ff d2                	callq  *%rdx
  8004202620:	c9                   	leaveq 
  8004202621:	c3                   	retq   

0000008004202622 <boot_alloc>:
  8004202622:	55                   	push   %rbp
  8004202623:	48 89 e5             	mov    %rsp,%rbp
  8004202626:	48 83 ec 40          	sub    $0x40,%rsp
  800420262a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420262d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202634:	00 00 00 
  8004202637:	48 8b 00             	mov    (%rax),%rax
  800420263a:	48 85 c0             	test   %rax,%rax
  800420263d:	75 4b                	jne    800420268a <boot_alloc+0x68>
  800420263f:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004202646:	00 
  8004202647:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  800420264e:	00 00 00 
  8004202651:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004202655:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202659:	48 01 d0             	add    %rdx,%rax
  800420265c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202664:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202669:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420266d:	48 89 d0             	mov    %rdx,%rax
  8004202670:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004202674:	48 29 c2             	sub    %rax,%rdx
  8004202677:	48 89 d0             	mov    %rdx,%rax
  800420267a:	48 89 c2             	mov    %rax,%rdx
  800420267d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202684:	00 00 00 
  8004202687:	48 89 10             	mov    %rdx,(%rax)
  800420268a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420268d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202694:	00 00 00 
  8004202697:	48 8b 00             	mov    (%rax),%rax
  800420269a:	48 01 c2             	add    %rax,%rdx
  800420269d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026a4:	00 00 00 
  80042026a7:	48 8b 00             	mov    (%rax),%rax
  80042026aa:	48 39 c2             	cmp    %rax,%rdx
  80042026ad:	72 2f                	jb     80042026de <boot_alloc+0xbc>
  80042026af:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026b6:	00 00 00 
  80042026b9:	48 8b 10             	mov    (%rax),%rdx
  80042026bc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042026bf:	48 01 c2             	add    %rax,%rdx
  80042026c2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042026c9:	00 00 00 
  80042026cc:	48 8b 00             	mov    (%rax),%rax
  80042026cf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  80042026d5:	48 c1 e0 0c          	shl    $0xc,%rax
  80042026d9:	48 39 c2             	cmp    %rax,%rdx
  80042026dc:	76 2a                	jbe    8004202708 <boot_alloc+0xe6>
  80042026de:	48 ba b0 8e 21 04 80 	movabs $0x8004218eb0,%rdx
  80042026e5:	00 00 00 
  80042026e8:	be f3 00 00 00       	mov    $0xf3,%esi
  80042026ed:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042026f4:	00 00 00 
  80042026f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026fc:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004202703:	00 00 00 
  8004202706:	ff d1                	callq  *%rcx
  8004202708:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420270f:	00 00 00 
  8004202712:	48 8b 00             	mov    (%rax),%rax
  8004202715:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202719:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004202720:	00 
  8004202721:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202728:	00 00 00 
  800420272b:	48 8b 10             	mov    (%rax),%rdx
  800420272e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202731:	48 01 d0             	add    %rdx,%rax
  8004202734:	48 89 c2             	mov    %rax,%rdx
  8004202737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420273b:	48 01 d0             	add    %rdx,%rax
  800420273e:	48 83 e8 01          	sub    $0x1,%rax
  8004202742:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420274a:	ba 00 00 00 00       	mov    $0x0,%edx
  800420274f:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004202753:	48 89 d0             	mov    %rdx,%rax
  8004202756:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420275a:	48 29 c2             	sub    %rax,%rdx
  800420275d:	48 89 d0             	mov    %rdx,%rax
  8004202760:	48 89 c2             	mov    %rax,%rdx
  8004202763:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420276a:	00 00 00 
  800420276d:	48 89 10             	mov    %rdx,(%rax)
  8004202770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202774:	c9                   	leaveq 
  8004202775:	c3                   	retq   

0000008004202776 <x64_vm_init>:
  8004202776:	55                   	push   %rbp
  8004202777:	48 89 e5             	mov    %rsp,%rbp
  800420277a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420277e:	48 b8 7f 23 20 04 80 	movabs $0x800420237f,%rax
  8004202785:	00 00 00 
  8004202788:	ff d0                	callq  *%rax
  800420278a:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420278f:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202796:	00 00 00 
  8004202799:	ff d0                	callq  *%rax
  800420279b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420279f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027a3:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042027a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042027ad:	48 89 c7             	mov    %rax,%rdi
  80042027b0:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042027b7:	00 00 00 
  80042027ba:	ff d0                	callq  *%rax
  80042027bc:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042027c3:	00 00 00 
  80042027c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042027ca:	48 89 10             	mov    %rdx,(%rax)
  80042027cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042027d5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027dc:	00 00 00 
  80042027df:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042027e3:	77 32                	ja     8004202817 <x64_vm_init+0xa1>
  80042027e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027e9:	48 89 c1             	mov    %rax,%rcx
  80042027ec:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  80042027f3:	00 00 00 
  80042027f6:	be 18 01 00 00       	mov    $0x118,%esi
  80042027fb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202802:	00 00 00 
  8004202805:	b8 00 00 00 00       	mov    $0x0,%eax
  800420280a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202811:	00 00 00 
  8004202814:	41 ff d0             	callq  *%r8
  8004202817:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420281e:	ff ff ff 
  8004202821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202825:	48 01 c2             	add    %rax,%rdx
  8004202828:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420282f:	00 00 00 
  8004202832:	48 89 10             	mov    %rdx,(%rax)
  8004202835:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420283c:	00 00 00 
  800420283f:	48 8b 00             	mov    (%rax),%rax
  8004202842:	48 c1 e0 04          	shl    $0x4,%rax
  8004202846:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420284a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420284e:	89 c7                	mov    %eax,%edi
  8004202850:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202857:	00 00 00 
  800420285a:	ff d0                	callq  *%rax
  800420285c:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  8004202863:	00 00 00 
  8004202866:	48 89 02             	mov    %rax,(%rdx)
  8004202869:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202870:	00 00 00 
  8004202873:	48 8b 00             	mov    (%rax),%rax
  8004202876:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420287a:	be 00 00 00 00       	mov    $0x0,%esi
  800420287f:	48 89 c7             	mov    %rax,%rdi
  8004202882:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004202889:	00 00 00 
  800420288c:	ff d0                	callq  *%rax
  800420288e:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  8004202893:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  800420289a:	00 00 00 
  800420289d:	ff d0                	callq  *%rax
  800420289f:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  80042028a6:	00 00 00 
  80042028a9:	48 89 02             	mov    %rax,(%rdx)
  80042028ac:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042028b3:	00 00 00 
  80042028b6:	48 8b 00             	mov    (%rax),%rax
  80042028b9:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  80042028be:	be 00 00 00 00       	mov    $0x0,%esi
  80042028c3:	48 89 c7             	mov    %rax,%rdi
  80042028c6:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042028cd:	00 00 00 
  80042028d0:	ff d0                	callq  *%rax
  80042028d2:	48 b8 30 2d 20 04 80 	movabs $0x8004202d30,%rax
  80042028d9:	00 00 00 
  80042028dc:	ff d0                	callq  *%rax
  80042028de:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042028e5:	00 00 00 
  80042028e8:	48 8b 00             	mov    (%rax),%rax
  80042028eb:	48 c1 e0 04          	shl    $0x4,%rax
  80042028ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042028f3:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042028fa:	00 00 00 
  80042028fd:	48 8b 00             	mov    (%rax),%rax
  8004202900:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202904:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420290b:	00 00 00 
  800420290e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004202912:	77 32                	ja     8004202946 <x64_vm_init+0x1d0>
  8004202914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202918:	48 89 c1             	mov    %rax,%rcx
  800420291b:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004202922:	00 00 00 
  8004202925:	be 43 01 00 00       	mov    $0x143,%esi
  800420292a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202931:	00 00 00 
  8004202934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202939:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202940:	00 00 00 
  8004202943:	41 ff d0             	callq  *%r8
  8004202946:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420294d:	ff ff ff 
  8004202950:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202954:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202958:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420295f:	00 00 00 
  8004202962:	48 8b 00             	mov    (%rax),%rax
  8004202965:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202969:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420296f:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202976:	00 00 00 
  8004202979:	48 89 c7             	mov    %rax,%rdi
  800420297c:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202983:	00 00 00 
  8004202986:	ff d0                	callq  *%rax
  8004202988:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420298f:	00 
  8004202990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202994:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420299a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420299e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029a2:	ba 00 00 00 00       	mov    $0x0,%edx
  80042029a7:	48 f7 75 d8          	divq   -0x28(%rbp)
  80042029ab:	48 89 d0             	mov    %rdx,%rax
  80042029ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042029b2:	48 29 c2             	sub    %rax,%rdx
  80042029b5:	48 89 d0             	mov    %rdx,%rax
  80042029b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029bc:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042029c3:	00 00 00 
  80042029c6:	48 8b 00             	mov    (%rax),%rax
  80042029c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042029cd:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042029d4:	00 00 00 
  80042029d7:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042029db:	77 32                	ja     8004202a0f <x64_vm_init+0x299>
  80042029dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042029e1:	48 89 c1             	mov    %rax,%rcx
  80042029e4:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  80042029eb:	00 00 00 
  80042029ee:	be 51 01 00 00       	mov    $0x151,%esi
  80042029f3:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042029fa:	00 00 00 
  80042029fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a02:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a09:	00 00 00 
  8004202a0c:	41 ff d0             	callq  *%r8
  8004202a0f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202a16:	ff ff ff 
  8004202a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a1d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202a21:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202a32:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  8004202a38:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202a3f:	00 00 00 
  8004202a42:	48 89 c7             	mov    %rax,%rdi
  8004202a45:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202a4c:	00 00 00 
  8004202a4f:	ff d0                	callq  *%rax
  8004202a51:	48 b8 00 c0 21 04 80 	movabs $0x800421c000,%rax
  8004202a58:	00 00 00 
  8004202a5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202a5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202a66:	00 00 00 
  8004202a69:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202a6d:	77 32                	ja     8004202aa1 <x64_vm_init+0x32b>
  8004202a6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a73:	48 89 c1             	mov    %rax,%rcx
  8004202a76:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004202a7d:	00 00 00 
  8004202a80:	be 62 01 00 00       	mov    $0x162,%esi
  8004202a85:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202a8c:	00 00 00 
  8004202a8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a94:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a9b:	00 00 00 
  8004202a9e:	41 ff d0             	callq  *%r8
  8004202aa1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202aa8:	ff ff ff 
  8004202aab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202aaf:	48 01 c2             	add    %rax,%rdx
  8004202ab2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202ab9:	00 00 00 
  8004202abc:	48 8b 00             	mov    (%rax),%rax
  8004202abf:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202ac5:	48 89 d1             	mov    %rdx,%rcx
  8004202ac8:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202acd:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202ad4:	00 00 00 
  8004202ad7:	48 89 c7             	mov    %rax,%rdi
  8004202ada:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202ae1:	00 00 00 
  8004202ae4:	ff d0                	callq  *%rax
  8004202ae6:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202af7:	48 89 c2             	mov    %rax,%rdx
  8004202afa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202b01:	00 00 00 
  8004202b04:	48 8b 00             	mov    (%rax),%rax
  8004202b07:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202b0d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004202b12:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  8004202b19:	00 00 00 
  8004202b1c:	48 89 c7             	mov    %rax,%rdi
  8004202b1f:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202b26:	00 00 00 
  8004202b29:	ff d0                	callq  *%rax
  8004202b2b:	48 b8 45 2c 20 04 80 	movabs $0x8004202c45,%rax
  8004202b32:	00 00 00 
  8004202b35:	ff d0                	callq  *%rax
  8004202b37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b3b:	48 83 c0 08          	add    $0x8,%rax
  8004202b3f:	48 8b 00             	mov    (%rax),%rax
  8004202b42:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b48:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202b4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b54:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202b57:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202b5a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202b61:	00 00 00 
  8004202b64:	48 8b 00             	mov    (%rax),%rax
  8004202b67:	48 39 c2             	cmp    %rax,%rdx
  8004202b6a:	72 32                	jb     8004202b9e <x64_vm_init+0x428>
  8004202b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b70:	48 89 c1             	mov    %rax,%rcx
  8004202b73:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004202b7a:	00 00 00 
  8004202b7d:	be 82 01 00 00       	mov    $0x182,%esi
  8004202b82:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202b89:	00 00 00 
  8004202b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b91:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202b98:	00 00 00 
  8004202b9b:	41 ff d0             	callq  *%r8
  8004202b9e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ba5:	00 00 00 
  8004202ba8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202bac:	48 01 d0             	add    %rdx,%rax
  8004202baf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202bb3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202bb7:	48 8b 00             	mov    (%rax),%rax
  8004202bba:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202bc0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bc8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bcc:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202bcf:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202bd2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202bd9:	00 00 00 
  8004202bdc:	48 8b 00             	mov    (%rax),%rax
  8004202bdf:	48 39 c2             	cmp    %rax,%rdx
  8004202be2:	72 32                	jb     8004202c16 <x64_vm_init+0x4a0>
  8004202be4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202be8:	48 89 c1             	mov    %rax,%rcx
  8004202beb:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004202bf2:	00 00 00 
  8004202bf5:	be 83 01 00 00       	mov    $0x183,%esi
  8004202bfa:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202c01:	00 00 00 
  8004202c04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202c10:	00 00 00 
  8004202c13:	41 ff d0             	callq  *%r8
  8004202c16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c1d:	00 00 00 
  8004202c20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202c24:	48 01 d0             	add    %rdx,%rax
  8004202c27:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202c2b:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202c3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202c40:	0f 22 d8             	mov    %rax,%cr3
  8004202c43:	c9                   	leaveq 
  8004202c44:	c3                   	retq   

0000008004202c45 <mem_init_mp>:
  8004202c45:	55                   	push   %rbp
  8004202c46:	48 89 e5             	mov    %rsp,%rbp
  8004202c49:	48 83 ec 20          	sub    $0x20,%rsp
  8004202c4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202c54:	e9 cb 00 00 00       	jmpq   8004202d24 <mem_init_mp+0xdf>
  8004202c59:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202c5c:	89 d0                	mov    %edx,%eax
  8004202c5e:	01 c0                	add    %eax,%eax
  8004202c60:	01 d0                	add    %edx,%eax
  8004202c62:	c1 e0 0f             	shl    $0xf,%eax
  8004202c65:	48 98                	cltq   
  8004202c67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c6e:	00 00 00 
  8004202c71:	48 29 c2             	sub    %rax,%rdx
  8004202c74:	48 89 d0             	mov    %rdx,%rax
  8004202c77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c7e:	48 98                	cltq   
  8004202c80:	48 c1 e0 10          	shl    $0x10,%rax
  8004202c84:	48 89 c2             	mov    %rax,%rdx
  8004202c87:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  8004202c8e:	00 00 00 
  8004202c91:	48 01 d0             	add    %rdx,%rax
  8004202c94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202c98:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c9f:	00 00 00 
  8004202ca2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202ca6:	77 32                	ja     8004202cda <mem_init_mp+0x95>
  8004202ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cac:	48 89 c1             	mov    %rax,%rcx
  8004202caf:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004202cb6:	00 00 00 
  8004202cb9:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202cbe:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202cc5:	00 00 00 
  8004202cc8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ccd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202cd4:	00 00 00 
  8004202cd7:	41 ff d0             	callq  *%r8
  8004202cda:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ce1:	ff ff ff 
  8004202ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ce8:	48 01 c2             	add    %rax,%rdx
  8004202ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202cef:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202cf6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202cfd:	00 00 00 
  8004202d00:	48 8b 00             	mov    (%rax),%rax
  8004202d03:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202d09:	48 89 d1             	mov    %rdx,%rcx
  8004202d0c:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202d11:	48 89 c7             	mov    %rax,%rdi
  8004202d14:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202d1b:	00 00 00 
  8004202d1e:	ff d0                	callq  *%rax
  8004202d20:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202d24:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202d28:	0f 8e 2b ff ff ff    	jle    8004202c59 <mem_init_mp+0x14>
  8004202d2e:	c9                   	leaveq 
  8004202d2f:	c3                   	retq   

0000008004202d30 <page_init>:
  8004202d30:	55                   	push   %rbp
  8004202d31:	48 89 e5             	mov    %rsp,%rbp
  8004202d34:	48 83 ec 50          	sub    $0x50,%rsp
  8004202d38:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202d3d:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202d44:	00 00 00 
  8004202d47:	ff d0                	callq  *%rax
  8004202d49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202d4d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202d54:	00 
  8004202d55:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202d5c:	00 
  8004202d5d:	e9 65 02 00 00       	jmpq   8004202fc7 <page_init+0x297>
  8004202d62:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d6e:	74 1a                	je     8004202d8a <page_init+0x5a>
  8004202d70:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202d77:	00 00 00 
  8004202d7a:	48 8b 00             	mov    (%rax),%rax
  8004202d7d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202d81:	73 07                	jae    8004202d8a <page_init+0x5a>
  8004202d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202d8a:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202d8f:	75 07                	jne    8004202d98 <page_init+0x68>
  8004202d91:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202da0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202da7:	00 00 00 
  8004202daa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202dae:	77 32                	ja     8004202de2 <page_init+0xb2>
  8004202db0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202db4:	48 89 c1             	mov    %rax,%rcx
  8004202db7:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004202dbe:	00 00 00 
  8004202dc1:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202dc6:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202dcd:	00 00 00 
  8004202dd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202dd5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ddc:	00 00 00 
  8004202ddf:	41 ff d0             	callq  *%r8
  8004202de2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202de9:	ff ff ff 
  8004202dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202df0:	48 01 d0             	add    %rdx,%rax
  8004202df3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202df7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202dfb:	77 07                	ja     8004202e04 <page_init+0xd4>
  8004202dfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e08:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202e0e:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202e12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202e16:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e1d:	00 00 00 
  8004202e20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e28:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e2c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202e2f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202e32:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202e39:	00 00 00 
  8004202e3c:	48 8b 00             	mov    (%rax),%rax
  8004202e3f:	48 39 c2             	cmp    %rax,%rdx
  8004202e42:	72 32                	jb     8004202e76 <page_init+0x146>
  8004202e44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e48:	48 89 c1             	mov    %rax,%rcx
  8004202e4b:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004202e52:	00 00 00 
  8004202e55:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202e5a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202e61:	00 00 00 
  8004202e64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202e69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202e70:	00 00 00 
  8004202e73:	41 ff d0             	callq  *%r8
  8004202e76:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202e7d:	00 00 00 
  8004202e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e84:	48 01 d0             	add    %rdx,%rax
  8004202e87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202e8b:	0f 87 84 00 00 00    	ja     8004202f15 <page_init+0x1e5>
  8004202e91:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e98:	00 00 00 
  8004202e9b:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202ea1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202ea5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ea9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ead:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202eb0:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202eb3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202eba:	00 00 00 
  8004202ebd:	48 8b 00             	mov    (%rax),%rax
  8004202ec0:	48 39 c2             	cmp    %rax,%rdx
  8004202ec3:	72 32                	jb     8004202ef7 <page_init+0x1c7>
  8004202ec5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ec9:	48 89 c1             	mov    %rax,%rcx
  8004202ecc:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004202ed3:	00 00 00 
  8004202ed6:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202edb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004202ee2:	00 00 00 
  8004202ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202eea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ef1:	00 00 00 
  8004202ef4:	41 ff d0             	callq  *%r8
  8004202ef7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202efe:	00 00 00 
  8004202f01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202f05:	48 01 d0             	add    %rdx,%rax
  8004202f08:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202f0c:	76 07                	jbe    8004202f15 <page_init+0x1e5>
  8004202f0e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202f15:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f1c:	00 00 00 
  8004202f1f:	48 8b 00             	mov    (%rax),%rax
  8004202f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f26:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f2a:	48 01 c2             	add    %rax,%rdx
  8004202f2d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202f30:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202f34:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f3b:	00 00 00 
  8004202f3e:	48 8b 00             	mov    (%rax),%rax
  8004202f41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f45:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f49:	48 01 d0             	add    %rdx,%rax
  8004202f4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202f53:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202f57:	75 69                	jne    8004202fc2 <page_init+0x292>
  8004202f59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202f5e:	74 21                	je     8004202f81 <page_init+0x251>
  8004202f60:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f67:	00 00 00 
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f71:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f75:	48 01 c2             	add    %rax,%rdx
  8004202f78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202f7c:	48 89 10             	mov    %rdx,(%rax)
  8004202f7f:	eb 25                	jmp    8004202fa6 <page_init+0x276>
  8004202f81:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f88:	00 00 00 
  8004202f8b:	48 8b 00             	mov    (%rax),%rax
  8004202f8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f92:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f96:	48 01 c2             	add    %rax,%rdx
  8004202f99:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202fa0:	00 00 00 
  8004202fa3:	48 89 10             	mov    %rdx,(%rax)
  8004202fa6:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202fad:	00 00 00 
  8004202fb0:	48 8b 00             	mov    (%rax),%rax
  8004202fb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fb7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202fbb:	48 01 d0             	add    %rdx,%rax
  8004202fbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202fc2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202fc7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202fce:	00 00 00 
  8004202fd1:	48 8b 00             	mov    (%rax),%rax
  8004202fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202fd8:	0f 82 84 fd ff ff    	jb     8004202d62 <page_init+0x32>
  8004202fde:	c9                   	leaveq 
  8004202fdf:	c3                   	retq   

0000008004202fe0 <page_alloc>:
  8004202fe0:	55                   	push   %rbp
  8004202fe1:	48 89 e5             	mov    %rsp,%rbp
  8004202fe4:	48 83 ec 20          	sub    $0x20,%rsp
  8004202fe8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202feb:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202ff2:	00 00 00 
  8004202ff5:	48 8b 00             	mov    (%rax),%rax
  8004202ff8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ffc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203001:	74 5e                	je     8004203061 <page_alloc+0x81>
  8004203003:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420300a:	00 00 00 
  800420300d:	48 8b 00             	mov    (%rax),%rax
  8004203010:	48 8b 10             	mov    (%rax),%rdx
  8004203013:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420301a:	00 00 00 
  800420301d:	48 89 10             	mov    %rdx,(%rax)
  8004203020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203024:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420302b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420302e:	83 e0 01             	and    $0x1,%eax
  8004203031:	85 c0                	test   %eax,%eax
  8004203033:	74 2c                	je     8004203061 <page_alloc+0x81>
  8004203035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203039:	48 89 c7             	mov    %rax,%rdi
  800420303c:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004203043:	00 00 00 
  8004203046:	ff d0                	callq  *%rax
  8004203048:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420304d:	be 00 00 00 00       	mov    $0x0,%esi
  8004203052:	48 89 c7             	mov    %rax,%rdi
  8004203055:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  800420305c:	00 00 00 
  800420305f:	ff d0                	callq  *%rax
  8004203061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203065:	c9                   	leaveq 
  8004203066:	c3                   	retq   

0000008004203067 <page_initpp>:
  8004203067:	55                   	push   %rbp
  8004203068:	48 89 e5             	mov    %rsp,%rbp
  800420306b:	48 83 ec 10          	sub    $0x10,%rsp
  800420306f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203077:	ba 10 00 00 00       	mov    $0x10,%edx
  800420307c:	be 00 00 00 00       	mov    $0x0,%esi
  8004203081:	48 89 c7             	mov    %rax,%rdi
  8004203084:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  800420308b:	00 00 00 
  800420308e:	ff d0                	callq  *%rax
  8004203090:	c9                   	leaveq 
  8004203091:	c3                   	retq   

0000008004203092 <page_free>:
  8004203092:	55                   	push   %rbp
  8004203093:	48 89 e5             	mov    %rsp,%rbp
  8004203096:	48 83 ec 10          	sub    $0x10,%rsp
  800420309a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420309e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a6:	66 85 c0             	test   %ax,%ax
  80042030a9:	75 0c                	jne    80042030b7 <page_free+0x25>
  80042030ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030af:	48 8b 00             	mov    (%rax),%rax
  80042030b2:	48 85 c0             	test   %rax,%rax
  80042030b5:	74 2c                	je     80042030e3 <page_free+0x51>
  80042030b7:	48 ba 00 8f 21 04 80 	movabs $0x8004218f00,%rdx
  80042030be:	00 00 00 
  80042030c1:	be 3d 02 00 00       	mov    $0x23d,%esi
  80042030c6:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042030cd:	00 00 00 
  80042030d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042030d5:	48 b9 1b 07 20 04 80 	movabs $0x800420071b,%rcx
  80042030dc:	00 00 00 
  80042030df:	ff d1                	callq  *%rcx
  80042030e1:	eb 2f                	jmp    8004203112 <page_free+0x80>
  80042030e3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030ea:	00 00 00 
  80042030ed:	48 8b 10             	mov    (%rax),%rdx
  80042030f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030f4:	48 89 10             	mov    %rdx,(%rax)
  80042030f7:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030fe:	00 00 00 
  8004203101:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203105:	48 89 10             	mov    %rdx,(%rax)
  8004203108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420310c:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004203112:	c9                   	leaveq 
  8004203113:	c3                   	retq   

0000008004203114 <page_decref>:
  8004203114:	55                   	push   %rbp
  8004203115:	48 89 e5             	mov    %rsp,%rbp
  8004203118:	48 83 ec 10          	sub    $0x10,%rsp
  800420311c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203124:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203128:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420312b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420312f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203137:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420313b:	66 85 c0             	test   %ax,%ax
  800420313e:	75 13                	jne    8004203153 <page_decref+0x3f>
  8004203140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203144:	48 89 c7             	mov    %rax,%rdi
  8004203147:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420314e:	00 00 00 
  8004203151:	ff d0                	callq  *%rax
  8004203153:	c9                   	leaveq 
  8004203154:	c3                   	retq   

0000008004203155 <pml4e_walk>:
  8004203155:	55                   	push   %rbp
  8004203156:	48 89 e5             	mov    %rsp,%rbp
  8004203159:	53                   	push   %rbx
  800420315a:	48 83 ec 68          	sub    $0x68,%rsp
  800420315e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203162:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203166:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203169:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800420316e:	0f 84 4e 02 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203174:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203178:	48 c1 e8 27          	shr    $0x27,%rax
  800420317c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203181:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203188:	00 
  8004203189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420318d:	48 01 d0             	add    %rdx,%rax
  8004203190:	48 8b 00             	mov    (%rax),%rax
  8004203193:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420319b:	83 e0 01             	and    $0x1,%eax
  800420319e:	48 85 c0             	test   %rax,%rax
  80042031a1:	0f 85 7f 01 00 00    	jne    8004203326 <pml4e_walk+0x1d1>
  80042031a7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042031ab:	0f 84 75 01 00 00    	je     8004203326 <pml4e_walk+0x1d1>
  80042031b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042031b8:	00 
  80042031b9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042031be:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042031c5:	00 00 00 
  80042031c8:	ff d0                	callq  *%rax
  80042031ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042031ce:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042031d3:	0f 84 43 01 00 00    	je     800420331c <pml4e_walk+0x1c7>
  80042031d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031dd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042031e1:	8d 50 01             	lea    0x1(%rax),%edx
  80042031e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031e8:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042031ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031f0:	48 c1 e8 27          	shr    $0x27,%rax
  80042031f4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203200:	00 
  8004203201:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203205:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420320d:	48 89 c7             	mov    %rax,%rdi
  8004203210:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203217:	00 00 00 
  800420321a:	ff d0                	callq  *%rax
  800420321c:	48 83 c8 07          	or     $0x7,%rax
  8004203220:	48 89 03             	mov    %rax,(%rbx)
  8004203223:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203227:	48 c1 e8 27          	shr    $0x27,%rax
  800420322b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203230:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203237:	00 
  8004203238:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420323c:	48 01 d0             	add    %rdx,%rax
  800420323f:	48 8b 00             	mov    (%rax),%rax
  8004203242:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203248:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420324c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203250:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203254:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203257:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420325a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203261:	00 00 00 
  8004203264:	48 8b 00             	mov    (%rax),%rax
  8004203267:	48 39 c2             	cmp    %rax,%rdx
  800420326a:	72 32                	jb     800420329e <pml4e_walk+0x149>
  800420326c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203270:	48 89 c1             	mov    %rax,%rcx
  8004203273:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420327a:	00 00 00 
  800420327d:	be 79 02 00 00       	mov    $0x279,%esi
  8004203282:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203289:	00 00 00 
  800420328c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203291:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203298:	00 00 00 
  800420329b:	41 ff d0             	callq  *%r8
  800420329e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042032a5:	00 00 00 
  80042032a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042032ac:	48 01 d0             	add    %rdx,%rax
  80042032af:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042032b2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042032b6:	48 89 ce             	mov    %rcx,%rsi
  80042032b9:	48 89 c7             	mov    %rax,%rdi
  80042032bc:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042032c3:	00 00 00 
  80042032c6:	ff d0                	callq  *%rax
  80042032c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042032cc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042032d1:	74 09                	je     80042032dc <pml4e_walk+0x187>
  80042032d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042032d7:	e9 eb 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  80042032dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032e0:	48 c1 e8 27          	shr    $0x27,%rax
  80042032e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032f0:	00 
  80042032f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032f5:	48 01 d0             	add    %rdx,%rax
  80042032f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042032ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203303:	48 89 c7             	mov    %rax,%rdi
  8004203306:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420330d:	00 00 00 
  8004203310:	ff d0                	callq  *%rax
  8004203312:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203317:	e9 ab 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  800420331c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203321:	e9 a1 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  8004203326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420332a:	83 e0 01             	and    $0x1,%eax
  800420332d:	48 85 c0             	test   %rax,%rax
  8004203330:	0f 84 8c 00 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420333a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203344:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203348:	48 c1 e8 0c          	shr    $0xc,%rax
  800420334c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420334f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203352:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203359:	00 00 00 
  800420335c:	48 8b 00             	mov    (%rax),%rax
  800420335f:	48 39 c2             	cmp    %rax,%rdx
  8004203362:	72 32                	jb     8004203396 <pml4e_walk+0x241>
  8004203364:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203368:	48 89 c1             	mov    %rax,%rcx
  800420336b:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004203372:	00 00 00 
  8004203375:	be 83 02 00 00       	mov    $0x283,%esi
  800420337a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203381:	00 00 00 
  8004203384:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203389:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203390:	00 00 00 
  8004203393:	41 ff d0             	callq  *%r8
  8004203396:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420339d:	00 00 00 
  80042033a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042033a4:	48 01 d0             	add    %rdx,%rax
  80042033a7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ae:	48 89 ce             	mov    %rcx,%rsi
  80042033b1:	48 89 c7             	mov    %rax,%rdi
  80042033b4:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042033bb:	00 00 00 
  80042033be:	ff d0                	callq  *%rax
  80042033c0:	eb 05                	jmp    80042033c7 <pml4e_walk+0x272>
  80042033c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c7:	48 83 c4 68          	add    $0x68,%rsp
  80042033cb:	5b                   	pop    %rbx
  80042033cc:	5d                   	pop    %rbp
  80042033cd:	c3                   	retq   

00000080042033ce <pdpe_walk>:
  80042033ce:	55                   	push   %rbp
  80042033cf:	48 89 e5             	mov    %rsp,%rbp
  80042033d2:	53                   	push   %rbx
  80042033d3:	48 83 ec 68          	sub    $0x68,%rsp
  80042033d7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042033db:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042033df:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042033e2:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042033e7:	0f 84 4e 02 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042033ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042033f1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042033f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042033fa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203401:	00 
  8004203402:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203406:	48 01 d0             	add    %rdx,%rax
  8004203409:	48 8b 00             	mov    (%rax),%rax
  800420340c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203414:	83 e0 01             	and    $0x1,%eax
  8004203417:	48 85 c0             	test   %rax,%rax
  800420341a:	0f 85 7f 01 00 00    	jne    800420359f <pdpe_walk+0x1d1>
  8004203420:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203424:	0f 84 75 01 00 00    	je     800420359f <pdpe_walk+0x1d1>
  800420342a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203431:	00 
  8004203432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203437:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420343e:	00 00 00 
  8004203441:	ff d0                	callq  *%rax
  8004203443:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203447:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420344c:	0f 84 43 01 00 00    	je     8004203595 <pdpe_walk+0x1c7>
  8004203452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203456:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420345a:	8d 50 01             	lea    0x1(%rax),%edx
  800420345d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203461:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203465:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203469:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420346d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203472:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203479:	00 
  800420347a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420347e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203482:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203486:	48 89 c7             	mov    %rax,%rdi
  8004203489:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203490:	00 00 00 
  8004203493:	ff d0                	callq  *%rax
  8004203495:	48 83 c8 07          	or     $0x7,%rax
  8004203499:	48 89 03             	mov    %rax,(%rbx)
  800420349c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042034a0:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042034a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042034a9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042034b0:	00 
  80042034b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042034b5:	48 01 d0             	add    %rdx,%rax
  80042034b8:	48 8b 00             	mov    (%rax),%rax
  80042034bb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042034c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042034c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042034cd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  80042034d0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042034d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042034da:	00 00 00 
  80042034dd:	48 8b 00             	mov    (%rax),%rax
  80042034e0:	48 39 c2             	cmp    %rax,%rdx
  80042034e3:	72 32                	jb     8004203517 <pdpe_walk+0x149>
  80042034e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034e9:	48 89 c1             	mov    %rax,%rcx
  80042034ec:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042034f3:	00 00 00 
  80042034f6:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042034fb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203502:	00 00 00 
  8004203505:	b8 00 00 00 00       	mov    $0x0,%eax
  800420350a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203511:	00 00 00 
  8004203514:	41 ff d0             	callq  *%r8
  8004203517:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420351e:	00 00 00 
  8004203521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203525:	48 01 d0             	add    %rdx,%rax
  8004203528:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420352b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420352f:	48 89 ce             	mov    %rcx,%rsi
  8004203532:	48 89 c7             	mov    %rax,%rdi
  8004203535:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  800420353c:	00 00 00 
  800420353f:	ff d0                	callq  *%rax
  8004203541:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203545:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420354a:	74 09                	je     8004203555 <pdpe_walk+0x187>
  800420354c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203550:	e9 eb 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203555:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203559:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420355d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203562:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203569:	00 
  800420356a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420356e:	48 01 d0             	add    %rdx,%rax
  8004203571:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420357c:	48 89 c7             	mov    %rax,%rdi
  800420357f:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203586:	00 00 00 
  8004203589:	ff d0                	callq  *%rax
  800420358b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203590:	e9 ab 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203595:	b8 00 00 00 00       	mov    $0x0,%eax
  800420359a:	e9 a1 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  800420359f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035a3:	83 e0 01             	and    $0x1,%eax
  80042035a6:	48 85 c0             	test   %rax,%rax
  80042035a9:	0f 84 8c 00 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042035af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035b3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042035b9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042035bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035c1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035c5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042035c8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042035cb:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042035d2:	00 00 00 
  80042035d5:	48 8b 00             	mov    (%rax),%rax
  80042035d8:	48 39 c2             	cmp    %rax,%rdx
  80042035db:	72 32                	jb     800420360f <pdpe_walk+0x241>
  80042035dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035e1:	48 89 c1             	mov    %rax,%rcx
  80042035e4:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042035eb:	00 00 00 
  80042035ee:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042035f3:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042035fa:	00 00 00 
  80042035fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203602:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203609:	00 00 00 
  800420360c:	41 ff d0             	callq  *%r8
  800420360f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203616:	00 00 00 
  8004203619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420361d:	48 01 d0             	add    %rdx,%rax
  8004203620:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203623:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203627:	48 89 ce             	mov    %rcx,%rsi
  800420362a:	48 89 c7             	mov    %rax,%rdi
  800420362d:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  8004203634:	00 00 00 
  8004203637:	ff d0                	callq  *%rax
  8004203639:	eb 05                	jmp    8004203640 <pdpe_walk+0x272>
  800420363b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203640:	48 83 c4 68          	add    $0x68,%rsp
  8004203644:	5b                   	pop    %rbx
  8004203645:	5d                   	pop    %rbp
  8004203646:	c3                   	retq   

0000008004203647 <pgdir_walk>:
  8004203647:	55                   	push   %rbp
  8004203648:	48 89 e5             	mov    %rsp,%rbp
  800420364b:	53                   	push   %rbx
  800420364c:	48 83 ec 58          	sub    $0x58,%rsp
  8004203650:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203654:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203658:	89 55 ac             	mov    %edx,-0x54(%rbp)
  800420365b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203660:	0f 84 fd 01 00 00    	je     8004203863 <pgdir_walk+0x21c>
  8004203666:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420366a:	48 c1 e8 15          	shr    $0x15,%rax
  800420366e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203673:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420367a:	00 
  800420367b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420367f:	48 01 d0             	add    %rdx,%rax
  8004203682:	48 8b 00             	mov    (%rax),%rax
  8004203685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420368d:	83 e0 01             	and    $0x1,%eax
  8004203690:	48 85 c0             	test   %rax,%rax
  8004203693:	0f 85 2f 01 00 00    	jne    80042037c8 <pgdir_walk+0x181>
  8004203699:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420369d:	0f 84 25 01 00 00    	je     80042037c8 <pgdir_walk+0x181>
  80042036a3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042036aa:	00 
  80042036ab:	bf 01 00 00 00       	mov    $0x1,%edi
  80042036b0:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042036b7:	00 00 00 
  80042036ba:	ff d0                	callq  *%rax
  80042036bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042036c0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042036c5:	0f 84 f3 00 00 00    	je     80042037be <pgdir_walk+0x177>
  80042036cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036cf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042036d3:	8d 50 01             	lea    0x1(%rax),%edx
  80042036d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036da:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042036de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036e2:	48 c1 e8 15          	shr    $0x15,%rax
  80042036e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036f2:	00 
  80042036f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042036f7:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042036fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036ff:	48 89 c7             	mov    %rax,%rdi
  8004203702:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203709:	00 00 00 
  800420370c:	ff d0                	callq  *%rax
  800420370e:	48 83 c8 07          	or     $0x7,%rax
  8004203712:	48 89 03             	mov    %rax,(%rbx)
  8004203715:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203719:	48 c1 e8 0c          	shr    $0xc,%rax
  800420371d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203722:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203729:	00 
  800420372a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420372e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203732:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203737:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  800420373e:	00 
  800420373f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203743:	48 01 c8             	add    %rcx,%rax
  8004203746:	48 8b 00             	mov    (%rax),%rax
  8004203749:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420374f:	48 01 d0             	add    %rdx,%rax
  8004203752:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420375a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420375e:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203761:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203764:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420376b:	00 00 00 
  800420376e:	48 8b 00             	mov    (%rax),%rax
  8004203771:	48 39 c2             	cmp    %rax,%rdx
  8004203774:	72 32                	jb     80042037a8 <pgdir_walk+0x161>
  8004203776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420377a:	48 89 c1             	mov    %rax,%rcx
  800420377d:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004203784:	00 00 00 
  8004203787:	be be 02 00 00       	mov    $0x2be,%esi
  800420378c:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203793:	00 00 00 
  8004203796:	b8 00 00 00 00       	mov    $0x0,%eax
  800420379b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042037a2:	00 00 00 
  80042037a5:	41 ff d0             	callq  *%r8
  80042037a8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042037af:	00 00 00 
  80042037b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042037b6:	48 01 d0             	add    %rdx,%rax
  80042037b9:	e9 aa 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037c3:	e9 a0 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037cc:	83 e0 01             	and    $0x1,%eax
  80042037cf:	48 85 c0             	test   %rax,%rax
  80042037d2:	0f 84 8b 00 00 00    	je     8004203863 <pgdir_walk+0x21c>
  80042037d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042037dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042037e0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037e5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037ec:	00 
  80042037ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037f1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037f7:	48 01 d0             	add    %rdx,%rax
  80042037fa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042037fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203802:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203806:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203809:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420380c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203813:	00 00 00 
  8004203816:	48 8b 00             	mov    (%rax),%rax
  8004203819:	48 39 c2             	cmp    %rax,%rdx
  800420381c:	72 32                	jb     8004203850 <pgdir_walk+0x209>
  800420381e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203822:	48 89 c1             	mov    %rax,%rcx
  8004203825:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420382c:	00 00 00 
  800420382f:	be c3 02 00 00       	mov    $0x2c3,%esi
  8004203834:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420383b:	00 00 00 
  800420383e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203843:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420384a:	00 00 00 
  800420384d:	41 ff d0             	callq  *%r8
  8004203850:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203857:	00 00 00 
  800420385a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420385e:	48 01 d0             	add    %rdx,%rax
  8004203861:	eb 05                	jmp    8004203868 <pgdir_walk+0x221>
  8004203863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203868:	48 83 c4 58          	add    $0x58,%rsp
  800420386c:	5b                   	pop    %rbx
  800420386d:	5d                   	pop    %rbp
  800420386e:	c3                   	retq   

000000800420386f <boot_map_region>:
  800420386f:	55                   	push   %rbp
  8004203870:	48 89 e5             	mov    %rsp,%rbp
  8004203873:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203877:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420387b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420387f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004203883:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203887:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  800420388b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203892:	00 
  8004203893:	e9 aa 02 00 00       	jmpq   8004203b42 <boot_map_region+0x2d3>
  8004203898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420389c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038a0:	48 01 d0             	add    %rdx,%rax
  80042038a3:	48 89 c1             	mov    %rax,%rcx
  80042038a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042038aa:	ba 01 00 00 00       	mov    $0x1,%edx
  80042038af:	48 89 ce             	mov    %rcx,%rsi
  80042038b2:	48 89 c7             	mov    %rax,%rdi
  80042038b5:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042038bc:	00 00 00 
  80042038bf:	ff d0                	callq  *%rax
  80042038c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042038c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038c9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042038cd:	48 01 d0             	add    %rdx,%rax
  80042038d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042038d4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042038d9:	74 23                	je     80042038fe <boot_map_region+0x8f>
  80042038db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042038e5:	48 89 c2             	mov    %rax,%rdx
  80042038e8:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042038eb:	48 98                	cltq   
  80042038ed:	48 09 d0             	or     %rdx,%rax
  80042038f0:	48 83 c8 01          	or     $0x1,%rax
  80042038f4:	48 89 c2             	mov    %rax,%rdx
  80042038f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042038fb:	48 89 10             	mov    %rdx,(%rax)
  80042038fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203902:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203906:	48 01 d0             	add    %rdx,%rax
  8004203909:	48 c1 e8 27          	shr    $0x27,%rax
  800420390d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203919:	00 
  800420391a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420391e:	48 01 d0             	add    %rdx,%rax
  8004203921:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203925:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203929:	48 01 ca             	add    %rcx,%rdx
  800420392c:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203930:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203936:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  800420393d:	00 
  800420393e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203942:	48 01 ca             	add    %rcx,%rdx
  8004203945:	48 8b 0a             	mov    (%rdx),%rcx
  8004203948:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420394b:	48 63 d2             	movslq %edx,%rdx
  800420394e:	48 09 ca             	or     %rcx,%rdx
  8004203951:	48 83 ca 01          	or     $0x1,%rdx
  8004203955:	48 89 10             	mov    %rdx,(%rax)
  8004203958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420395c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203960:	48 01 d0             	add    %rdx,%rax
  8004203963:	48 c1 e8 27          	shr    $0x27,%rax
  8004203967:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420396c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203973:	00 
  8004203974:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203978:	48 01 d0             	add    %rdx,%rax
  800420397b:	48 8b 00             	mov    (%rax),%rax
  800420397e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203984:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420398c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203990:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004203993:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203996:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420399d:	00 00 00 
  80042039a0:	48 8b 00             	mov    (%rax),%rax
  80042039a3:	48 39 c2             	cmp    %rax,%rdx
  80042039a6:	72 32                	jb     80042039da <boot_map_region+0x16b>
  80042039a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039ac:	48 89 c1             	mov    %rax,%rcx
  80042039af:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042039b6:	00 00 00 
  80042039b9:	be e6 02 00 00       	mov    $0x2e6,%esi
  80042039be:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042039c5:	00 00 00 
  80042039c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039cd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042039d4:	00 00 00 
  80042039d7:	41 ff d0             	callq  *%r8
  80042039da:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042039e1:	00 00 00 
  80042039e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039e8:	48 01 d0             	add    %rdx,%rax
  80042039eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042039ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039f3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039f7:	48 01 d0             	add    %rdx,%rax
  80042039fa:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042039fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a03:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a0a:	00 
  8004203a0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a0f:	48 01 d0             	add    %rdx,%rax
  8004203a12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203a16:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203a1a:	48 01 ca             	add    %rcx,%rdx
  8004203a1d:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203a21:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a27:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a2e:	00 
  8004203a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203a33:	48 01 ca             	add    %rcx,%rdx
  8004203a36:	48 8b 0a             	mov    (%rdx),%rcx
  8004203a39:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203a3c:	48 63 d2             	movslq %edx,%rdx
  8004203a3f:	48 09 ca             	or     %rcx,%rdx
  8004203a42:	48 83 ca 01          	or     $0x1,%rdx
  8004203a46:	48 89 10             	mov    %rdx,(%rax)
  8004203a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a4d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a51:	48 01 d0             	add    %rdx,%rax
  8004203a54:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a58:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a64:	00 
  8004203a65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a69:	48 01 d0             	add    %rdx,%rax
  8004203a6c:	48 8b 00             	mov    (%rax),%rax
  8004203a6f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203a75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203a79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a7d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203a81:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203a84:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203a87:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203a8e:	00 00 00 
  8004203a91:	48 8b 00             	mov    (%rax),%rax
  8004203a94:	48 39 c2             	cmp    %rax,%rdx
  8004203a97:	72 32                	jb     8004203acb <boot_map_region+0x25c>
  8004203a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a9d:	48 89 c1             	mov    %rax,%rcx
  8004203aa0:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004203aa7:	00 00 00 
  8004203aaa:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203aaf:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203ab6:	00 00 00 
  8004203ab9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203abe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203ac5:	00 00 00 
  8004203ac8:	41 ff d0             	callq  *%r8
  8004203acb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203ad2:	00 00 00 
  8004203ad5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203ad9:	48 01 d0             	add    %rdx,%rax
  8004203adc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004203ae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ae4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203ae8:	48 01 d0             	add    %rdx,%rax
  8004203aeb:	48 c1 e8 15          	shr    $0x15,%rax
  8004203aef:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203af4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203afb:	00 
  8004203afc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b00:	48 01 d0             	add    %rdx,%rax
  8004203b03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203b07:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203b0b:	48 01 ca             	add    %rcx,%rdx
  8004203b0e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203b12:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b18:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b1f:	00 
  8004203b20:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203b24:	48 01 ca             	add    %rcx,%rdx
  8004203b27:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b2a:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203b2d:	48 63 d2             	movslq %edx,%rdx
  8004203b30:	48 09 ca             	or     %rcx,%rdx
  8004203b33:	48 83 ca 01          	or     $0x1,%rdx
  8004203b37:	48 89 10             	mov    %rdx,(%rax)
  8004203b3a:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203b41:	00 
  8004203b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b46:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203b4a:	0f 82 48 fd ff ff    	jb     8004203898 <boot_map_region+0x29>
  8004203b50:	c9                   	leaveq 
  8004203b51:	c3                   	retq   

0000008004203b52 <page_insert>:
  8004203b52:	55                   	push   %rbp
  8004203b53:	48 89 e5             	mov    %rsp,%rbp
  8004203b56:	48 83 ec 60          	sub    $0x60,%rsp
  8004203b5a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203b5e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203b62:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203b66:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203b69:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203b6e:	0f 84 47 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b74:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203b79:	0f 84 3c 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b7f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b87:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203b8c:	48 89 ce             	mov    %rcx,%rsi
  8004203b8f:	48 89 c7             	mov    %rax,%rdi
  8004203b92:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203b99:	00 00 00 
  8004203b9c:	ff d0                	callq  *%rax
  8004203b9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203ba2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203ba7:	0f 84 07 03 00 00    	je     8004203eb4 <page_insert+0x362>
  8004203bad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bb1:	48 c1 e8 27          	shr    $0x27,%rax
  8004203bb5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203bba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bc1:	00 
  8004203bc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bc6:	48 01 d0             	add    %rdx,%rax
  8004203bc9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203bcd:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203bd1:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203bd7:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203bde:	00 
  8004203bdf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203be3:	48 01 ca             	add    %rcx,%rdx
  8004203be6:	48 8b 0a             	mov    (%rdx),%rcx
  8004203be9:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203bec:	80 e6 f1             	and    $0xf1,%dh
  8004203bef:	48 63 d2             	movslq %edx,%rdx
  8004203bf2:	48 09 ca             	or     %rcx,%rdx
  8004203bf5:	48 89 10             	mov    %rdx,(%rax)
  8004203bf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bfc:	48 c1 e8 27          	shr    $0x27,%rax
  8004203c00:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c0c:	00 
  8004203c0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203c11:	48 01 d0             	add    %rdx,%rax
  8004203c14:	48 8b 00             	mov    (%rax),%rax
  8004203c17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c25:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203c29:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203c2c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203c2f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203c36:	00 00 00 
  8004203c39:	48 8b 00             	mov    (%rax),%rax
  8004203c3c:	48 39 c2             	cmp    %rax,%rdx
  8004203c3f:	72 32                	jb     8004203c73 <page_insert+0x121>
  8004203c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c45:	48 89 c1             	mov    %rax,%rcx
  8004203c48:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004203c4f:	00 00 00 
  8004203c52:	be 13 03 00 00       	mov    $0x313,%esi
  8004203c57:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203c5e:	00 00 00 
  8004203c61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c66:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203c6d:	00 00 00 
  8004203c70:	41 ff d0             	callq  *%r8
  8004203c73:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c7a:	00 00 00 
  8004203c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c81:	48 01 d0             	add    %rdx,%rax
  8004203c84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203c88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c8c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203c90:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c9c:	00 
  8004203c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ca1:	48 01 d0             	add    %rdx,%rax
  8004203ca4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ca8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203cac:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203cb2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203cb9:	00 
  8004203cba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203cbe:	48 01 ca             	add    %rcx,%rdx
  8004203cc1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203cc4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203cc7:	80 e6 f1             	and    $0xf1,%dh
  8004203cca:	48 63 d2             	movslq %edx,%rdx
  8004203ccd:	48 09 ca             	or     %rcx,%rdx
  8004203cd0:	48 89 10             	mov    %rdx,(%rax)
  8004203cd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cd7:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cdb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ce0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ce7:	00 
  8004203ce8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203cec:	48 01 d0             	add    %rdx,%rax
  8004203cef:	48 8b 00             	mov    (%rax),%rax
  8004203cf2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cf8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203cfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d00:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203d04:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203d07:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203d0a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203d11:	00 00 00 
  8004203d14:	48 8b 00             	mov    (%rax),%rax
  8004203d17:	48 39 c2             	cmp    %rax,%rdx
  8004203d1a:	72 32                	jb     8004203d4e <page_insert+0x1fc>
  8004203d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d20:	48 89 c1             	mov    %rax,%rcx
  8004203d23:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004203d2a:	00 00 00 
  8004203d2d:	be 15 03 00 00       	mov    $0x315,%esi
  8004203d32:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203d39:	00 00 00 
  8004203d3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d41:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203d48:	00 00 00 
  8004203d4b:	41 ff d0             	callq  *%r8
  8004203d4e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203d55:	00 00 00 
  8004203d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d5c:	48 01 d0             	add    %rdx,%rax
  8004203d5f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203d63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203d67:	48 c1 e8 15          	shr    $0x15,%rax
  8004203d6b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d70:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d77:	00 
  8004203d78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203d7c:	48 01 d0             	add    %rdx,%rax
  8004203d7f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d83:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203d87:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203d8d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203d94:	00 
  8004203d95:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203d99:	48 01 ca             	add    %rcx,%rdx
  8004203d9c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203d9f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203da2:	80 e6 f1             	and    $0xf1,%dh
  8004203da5:	48 63 d2             	movslq %edx,%rdx
  8004203da8:	48 09 ca             	or     %rcx,%rdx
  8004203dab:	48 89 10             	mov    %rdx,(%rax)
  8004203dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203db2:	48 8b 00             	mov    (%rax),%rax
  8004203db5:	83 e0 01             	and    $0x1,%eax
  8004203db8:	48 85 c0             	test   %rax,%rax
  8004203dbb:	74 70                	je     8004203e2d <page_insert+0x2db>
  8004203dbd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203dc1:	48 89 c7             	mov    %rax,%rdi
  8004203dc4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203dcb:	00 00 00 
  8004203dce:	ff d0                	callq  *%rax
  8004203dd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dd4:	48 8b 12             	mov    (%rdx),%rdx
  8004203dd7:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203dde:	48 39 d0             	cmp    %rdx,%rax
  8004203de1:	75 4a                	jne    8004203e2d <page_insert+0x2db>
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c2             	mov    %rax,%rdx
  8004203df3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203df6:	48 98                	cltq   
  8004203df8:	48 09 d0             	or     %rdx,%rax
  8004203dfb:	48 83 c8 01          	or     $0x1,%rax
  8004203dff:	48 89 c2             	mov    %rax,%rdx
  8004203e02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e06:	48 89 10             	mov    %rdx,(%rax)
  8004203e09:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e11:	48 89 d6             	mov    %rdx,%rsi
  8004203e14:	48 89 c7             	mov    %rax,%rdi
  8004203e17:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203e1e:	00 00 00 
  8004203e21:	ff d0                	callq  *%rax
  8004203e23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e28:	e9 93 00 00 00       	jmpq   8004203ec0 <page_insert+0x36e>
  8004203e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e31:	48 8b 00             	mov    (%rax),%rax
  8004203e34:	83 e0 01             	and    $0x1,%eax
  8004203e37:	48 85 c0             	test   %rax,%rax
  8004203e3a:	74 1a                	je     8004203e56 <page_insert+0x304>
  8004203e3c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e44:	48 89 d6             	mov    %rdx,%rsi
  8004203e47:	48 89 c7             	mov    %rax,%rdi
  8004203e4a:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004203e51:	00 00 00 
  8004203e54:	ff d0                	callq  *%rax
  8004203e56:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e5a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203e5e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203e61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e65:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203e69:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e6d:	48 89 c7             	mov    %rax,%rdi
  8004203e70:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203e77:	00 00 00 
  8004203e7a:	ff d0                	callq  *%rax
  8004203e7c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203e7f:	48 63 d2             	movslq %edx,%rdx
  8004203e82:	48 09 d0             	or     %rdx,%rax
  8004203e85:	48 83 c8 01          	or     $0x1,%rax
  8004203e89:	48 89 c2             	mov    %rax,%rdx
  8004203e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e90:	48 89 10             	mov    %rdx,(%rax)
  8004203e93:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e9b:	48 89 d6             	mov    %rdx,%rsi
  8004203e9e:	48 89 c7             	mov    %rax,%rdi
  8004203ea1:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203ea8:	00 00 00 
  8004203eab:	ff d0                	callq  *%rax
  8004203ead:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eb2:	eb 0c                	jmp    8004203ec0 <page_insert+0x36e>
  8004203eb4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203eb9:	eb 05                	jmp    8004203ec0 <page_insert+0x36e>
  8004203ebb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ec0:	c9                   	leaveq 
  8004203ec1:	c3                   	retq   

0000008004203ec2 <page_lookup>:
  8004203ec2:	55                   	push   %rbp
  8004203ec3:	48 89 e5             	mov    %rsp,%rbp
  8004203ec6:	48 83 ec 30          	sub    $0x30,%rsp
  8004203eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203ed6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203edb:	74 69                	je     8004203f46 <page_lookup+0x84>
  8004203edd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ee5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203eea:	48 89 ce             	mov    %rcx,%rsi
  8004203eed:	48 89 c7             	mov    %rax,%rdi
  8004203ef0:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203ef7:	00 00 00 
  8004203efa:	ff d0                	callq  *%rax
  8004203efc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f05:	74 3f                	je     8004203f46 <page_lookup+0x84>
  8004203f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f0b:	48 8b 00             	mov    (%rax),%rax
  8004203f0e:	83 e0 01             	and    $0x1,%eax
  8004203f11:	48 85 c0             	test   %rax,%rax
  8004203f14:	74 30                	je     8004203f46 <page_lookup+0x84>
  8004203f16:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203f1b:	74 0b                	je     8004203f28 <page_lookup+0x66>
  8004203f1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203f25:	48 89 10             	mov    %rdx,(%rax)
  8004203f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f2c:	48 8b 00             	mov    (%rax),%rax
  8004203f2f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203f35:	48 89 c7             	mov    %rax,%rdi
  8004203f38:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  8004203f3f:	00 00 00 
  8004203f42:	ff d0                	callq  *%rax
  8004203f44:	eb 05                	jmp    8004203f4b <page_lookup+0x89>
  8004203f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203f4b:	c9                   	leaveq 
  8004203f4c:	c3                   	retq   

0000008004203f4d <page_remove>:
  8004203f4d:	55                   	push   %rbp
  8004203f4e:	48 89 e5             	mov    %rsp,%rbp
  8004203f51:	48 83 ec 20          	sub    $0x20,%rsp
  8004203f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203f59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203f5d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203f61:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f69:	48 89 ce             	mov    %rcx,%rsi
  8004203f6c:	48 89 c7             	mov    %rax,%rdi
  8004203f6f:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  8004203f76:	00 00 00 
  8004203f79:	ff d0                	callq  *%rax
  8004203f7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f84:	74 38                	je     8004203fbe <page_remove+0x71>
  8004203f86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8e:	48 89 d6             	mov    %rdx,%rsi
  8004203f91:	48 89 c7             	mov    %rax,%rdi
  8004203f94:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203f9b:	00 00 00 
  8004203f9e:	ff d0                	callq  *%rax
  8004203fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203fa4:	48 89 c7             	mov    %rax,%rdi
  8004203fa7:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203fae:	00 00 00 
  8004203fb1:	ff d0                	callq  *%rax
  8004203fb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203fb7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203fbe:	c9                   	leaveq 
  8004203fbf:	c3                   	retq   

0000008004203fc0 <tlb_invalidate>:
  8004203fc0:	55                   	push   %rbp
  8004203fc1:	48 89 e5             	mov    %rsp,%rbp
  8004203fc4:	48 83 ec 20          	sub    $0x20,%rsp
  8004203fc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203fcc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203fd0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203fd5:	75 35                	jne    800420400c <tlb_invalidate+0x4c>
  8004203fd7:	48 b9 27 8f 21 04 80 	movabs $0x8004218f27,%rcx
  8004203fde:	00 00 00 
  8004203fe1:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be 72 03 00 00       	mov    $0x372,%esi
  8004203ff0:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204006:	00 00 00 
  8004204009:	41 ff d0             	callq  *%r8
  800420400c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004204013:	00 00 00 
  8004204016:	ff d0                	callq  *%rax
  8004204018:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420401f:	00 00 00 
  8004204022:	48 98                	cltq   
  8004204024:	48 c1 e0 03          	shl    $0x3,%rax
  8004204028:	48 89 c1             	mov    %rax,%rcx
  800420402b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420402f:	48 01 c8             	add    %rcx,%rax
  8004204032:	48 01 d0             	add    %rdx,%rax
  8004204035:	48 83 c0 08          	add    $0x8,%rax
  8004204039:	48 8b 00             	mov    (%rax),%rax
  800420403c:	48 85 c0             	test   %rax,%rax
  800420403f:	74 3d                	je     800420407e <tlb_invalidate+0xbe>
  8004204041:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004204048:	00 00 00 
  800420404b:	ff d0                	callq  *%rax
  800420404d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004204054:	00 00 00 
  8004204057:	48 98                	cltq   
  8004204059:	48 c1 e0 03          	shl    $0x3,%rax
  800420405d:	48 89 c1             	mov    %rax,%rcx
  8004204060:	48 c1 e1 04          	shl    $0x4,%rcx
  8004204064:	48 01 c8             	add    %rcx,%rax
  8004204067:	48 01 d0             	add    %rdx,%rax
  800420406a:	48 83 c0 08          	add    $0x8,%rax
  800420406e:	48 8b 00             	mov    (%rax),%rax
  8004204071:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004204078:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420407c:	75 0f                	jne    800420408d <tlb_invalidate+0xcd>
  800420407e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004204086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420408a:	0f 01 38             	invlpg (%rax)
  800420408d:	c9                   	leaveq 
  800420408e:	c3                   	retq   

000000800420408f <mmio_map_region>:
  800420408f:	55                   	push   %rbp
  8004204090:	48 89 e5             	mov    %rsp,%rbp
  8004204093:	48 83 ec 30          	sub    $0x30,%rsp
  8004204097:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420409b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420409f:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040a6:	00 00 00 
  80042040a9:	48 8b 00             	mov    (%rax),%rax
  80042040ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042040b0:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  80042040b7:	00 
  80042040b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040c0:	48 01 d0             	add    %rdx,%rax
  80042040c3:	48 83 e8 01          	sub    $0x1,%rax
  80042040c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042040cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042040cf:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040d4:	48 f7 75 f0          	divq   -0x10(%rbp)
  80042040d8:	48 89 d0             	mov    %rdx,%rax
  80042040db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042040df:	48 29 c2             	sub    %rax,%rdx
  80042040e2:	48 89 d0             	mov    %rdx,%rax
  80042040e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042040e9:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040f0:	00 00 00 
  80042040f3:	48 8b 10             	mov    (%rax),%rdx
  80042040f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042040fa:	48 01 c2             	add    %rax,%rdx
  80042040fd:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204104:	00 00 00 
  8004204107:	48 89 10             	mov    %rdx,(%rax)
  800420410a:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204111:	00 00 00 
  8004204114:	48 8b 10             	mov    (%rax),%rdx
  8004204117:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420411e:	00 00 00 
  8004204121:	48 39 c2             	cmp    %rax,%rdx
  8004204124:	76 2a                	jbe    8004204150 <mmio_map_region+0xc1>
  8004204126:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  800420412d:	00 00 00 
  8004204130:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004204135:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420413c:	00 00 00 
  800420413f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204144:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420414b:	00 00 00 
  800420414e:	ff d1                	callq  *%rcx
  8004204150:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004204157:	00 00 00 
  800420415a:	48 8b 00             	mov    (%rax),%rax
  800420415d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204161:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204165:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204169:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420416f:	48 89 c7             	mov    %rax,%rdi
  8004204172:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004204179:	00 00 00 
  800420417c:	ff d0                	callq  *%rax
  800420417e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204182:	c9                   	leaveq 
  8004204183:	c3                   	retq   

0000008004204184 <user_mem_check>:
  8004204184:	55                   	push   %rbp
  8004204185:	48 89 e5             	mov    %rsp,%rbp
  8004204188:	48 83 ec 40          	sub    $0x40,%rsp
  800420418c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204190:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004204194:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204198:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800420419b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420419f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042041a3:	48 01 d0             	add    %rdx,%rax
  80042041a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042041aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042041ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042041b5:	00 00 00 
  80042041b8:	48 39 c2             	cmp    %rax,%rdx
  80042041bb:	77 0a                	ja     80042041c7 <user_mem_check+0x43>
  80042041bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042041c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042041c5:	76 1b                	jbe    80042041e2 <user_mem_check+0x5e>
  80042041c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041cb:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042041d2:	00 00 00 
  80042041d5:	48 89 10             	mov    %rdx,(%rax)
  80042041d8:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042041dd:	e9 c0 00 00 00       	jmpq   80042042a2 <user_mem_check+0x11e>
  80042041e2:	e9 a8 00 00 00       	jmpq   800420428f <user_mem_check+0x10b>
  80042041e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042041eb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042041f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042041f6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042041fb:	48 89 ce             	mov    %rcx,%rsi
  80042041fe:	48 89 c7             	mov    %rax,%rdi
  8004204201:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004204208:	00 00 00 
  800420420b:	ff d0                	callq  *%rax
  800420420d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004204211:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004204216:	74 1f                	je     8004204237 <user_mem_check+0xb3>
  8004204218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420421c:	48 8b 10             	mov    (%rax),%rdx
  800420421f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204222:	83 c8 01             	or     $0x1,%eax
  8004204225:	48 98                	cltq   
  8004204227:	48 21 c2             	and    %rax,%rdx
  800420422a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420422d:	83 c8 01             	or     $0x1,%eax
  8004204230:	48 98                	cltq   
  8004204232:	48 39 c2             	cmp    %rax,%rdx
  8004204235:	74 18                	je     800420424f <user_mem_check+0xcb>
  8004204237:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420423b:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  8004204242:	00 00 00 
  8004204245:	48 89 10             	mov    %rdx,(%rax)
  8004204248:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  800420424d:	eb 53                	jmp    80042042a2 <user_mem_check+0x11e>
  800420424f:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204256:	00 
  8004204257:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420425b:	48 83 c0 01          	add    $0x1,%rax
  800420425f:	48 89 c2             	mov    %rax,%rdx
  8004204262:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204266:	48 01 d0             	add    %rdx,%rax
  8004204269:	48 83 e8 01          	sub    $0x1,%rax
  800420426d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204275:	ba 00 00 00 00       	mov    $0x0,%edx
  800420427a:	48 f7 75 e8          	divq   -0x18(%rbp)
  800420427e:	48 89 d0             	mov    %rdx,%rax
  8004204281:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204285:	48 29 c2             	sub    %rax,%rdx
  8004204288:	48 89 d0             	mov    %rdx,%rax
  800420428b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420428f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204293:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204297:	0f 82 4a ff ff ff    	jb     80042041e7 <user_mem_check+0x63>
  800420429d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042a2:	c9                   	leaveq 
  80042042a3:	c3                   	retq   

00000080042042a4 <user_mem_assert>:
  80042042a4:	55                   	push   %rbp
  80042042a5:	48 89 e5             	mov    %rsp,%rbp
  80042042a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042042ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042042b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042042b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042042b8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042042bb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042be:	83 c8 04             	or     $0x4,%eax
  80042042c1:	89 c1                	mov    %eax,%ecx
  80042042c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042042c7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042042cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042cf:	48 89 c7             	mov    %rax,%rdi
  80042042d2:	48 b8 84 41 20 04 80 	movabs $0x8004204184,%rax
  80042042d9:	00 00 00 
  80042042dc:	ff d0                	callq  *%rax
  80042042de:	85 c0                	test   %eax,%eax
  80042042e0:	79 47                	jns    8004204329 <user_mem_assert+0x85>
  80042042e2:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042042e9:	00 00 00 
  80042042ec:	48 8b 10             	mov    (%rax),%rdx
  80042042ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042f3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042042f9:	89 c6                	mov    %eax,%esi
  80042042fb:	48 bf 58 8f 21 04 80 	movabs $0x8004218f58,%rdi
  8004204302:	00 00 00 
  8004204305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420430a:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  8004204311:	00 00 00 
  8004204314:	ff d1                	callq  *%rcx
  8004204316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431a:	48 89 c7             	mov    %rax,%rdi
  800420431d:	48 b8 6a 8e 20 04 80 	movabs $0x8004208e6a,%rax
  8004204324:	00 00 00 
  8004204327:	ff d0                	callq  *%rax
  8004204329:	c9                   	leaveq 
  800420432a:	c3                   	retq   

000000800420432b <check_page_free_list>:
  800420432b:	55                   	push   %rbp
  800420432c:	48 89 e5             	mov    %rsp,%rbp
  800420432f:	48 83 ec 60          	sub    $0x60,%rsp
  8004204333:	89 f8                	mov    %edi,%eax
  8004204335:	88 45 ac             	mov    %al,-0x54(%rbp)
  8004204338:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420433c:	74 07                	je     8004204345 <check_page_free_list+0x1a>
  800420433e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004204343:	eb 05                	jmp    800420434a <check_page_free_list+0x1f>
  8004204345:	b8 00 02 00 00       	mov    $0x200,%eax
  800420434a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420434d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004204354:	00 
  8004204355:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420435c:	00 
  800420435d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204364:	00 00 00 
  8004204367:	48 8b 00             	mov    (%rax),%rax
  800420436a:	48 85 c0             	test   %rax,%rax
  800420436d:	75 2a                	jne    8004204399 <check_page_free_list+0x6e>
  800420436f:	48 ba 90 8f 21 04 80 	movabs $0x8004218f90,%rdx
  8004204376:	00 00 00 
  8004204379:	be fd 03 00 00       	mov    $0x3fd,%esi
  800420437e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204385:	00 00 00 
  8004204388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420438d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004204394:	00 00 00 
  8004204397:	ff d1                	callq  *%rcx
  8004204399:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420439d:	0f 84 a9 00 00 00    	je     800420444c <check_page_free_list+0x121>
  80042043a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042043a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042043ab:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  80042043af:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042043b3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042043ba:	00 00 00 
  80042043bd:	48 8b 00             	mov    (%rax),%rax
  80042043c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043c4:	eb 58                	jmp    800420441e <check_page_free_list+0xf3>
  80042043c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042043ca:	48 89 c7             	mov    %rax,%rdi
  80042043cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042043d4:	00 00 00 
  80042043d7:	ff d0                	callq  *%rax
  80042043d9:	48 c1 e8 15          	shr    $0x15,%rax
  80042043dd:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042043e2:	48 89 c2             	mov    %rax,%rdx
  80042043e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042043e8:	48 39 c2             	cmp    %rax,%rdx
  80042043eb:	0f 93 c0             	setae  %al
  80042043ee:	0f b6 c0             	movzbl %al,%eax
  80042043f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042043f4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042043f7:	48 98                	cltq   
  80042043f9:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042043fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204402:	48 89 10             	mov    %rdx,(%rax)
  8004204405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204409:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420440c:	48 98                	cltq   
  800420440e:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  8004204413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204417:	48 8b 00             	mov    (%rax),%rax
  800420441a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420441e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204423:	75 a1                	jne    80042043c6 <check_page_free_list+0x9b>
  8004204425:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204429:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204430:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204434:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004204438:	48 89 10             	mov    %rdx,(%rax)
  800420443b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420443f:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204446:	00 00 00 
  8004204449:	48 89 10             	mov    %rdx,(%rax)
  800420444c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204453:	00 00 00 
  8004204456:	48 8b 00             	mov    (%rax),%rax
  8004204459:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420445d:	eb 5e                	jmp    80042044bd <check_page_free_list+0x192>
  800420445f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204463:	48 89 c7             	mov    %rax,%rdi
  8004204466:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420446d:	00 00 00 
  8004204470:	ff d0                	callq  *%rax
  8004204472:	48 c1 e8 15          	shr    $0x15,%rax
  8004204476:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420447b:	48 89 c2             	mov    %rax,%rdx
  800420447e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204481:	48 39 c2             	cmp    %rax,%rdx
  8004204484:	73 2c                	jae    80042044b2 <check_page_free_list+0x187>
  8004204486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420448a:	48 89 c7             	mov    %rax,%rdi
  800420448d:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204494:	00 00 00 
  8004204497:	ff d0                	callq  *%rax
  8004204499:	ba 80 00 00 00       	mov    $0x80,%edx
  800420449e:	be 97 00 00 00       	mov    $0x97,%esi
  80042044a3:	48 89 c7             	mov    %rax,%rdi
  80042044a6:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042044ad:	00 00 00 
  80042044b0:	ff d0                	callq  *%rax
  80042044b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b6:	48 8b 00             	mov    (%rax),%rax
  80042044b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042044c2:	75 9b                	jne    800420445f <check_page_free_list+0x134>
  80042044c4:	bf 00 00 00 00       	mov    $0x0,%edi
  80042044c9:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  80042044d0:	00 00 00 
  80042044d3:	ff d0                	callq  *%rax
  80042044d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042044d9:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042044e0:	00 00 00 
  80042044e3:	48 8b 00             	mov    (%rax),%rax
  80042044e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044ea:	e9 20 03 00 00       	jmpq   800420480f <check_page_free_list+0x4e4>
  80042044ef:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042044f6:	00 00 00 
  80042044f9:	48 8b 00             	mov    (%rax),%rax
  80042044fc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004204500:	73 35                	jae    8004204537 <check_page_free_list+0x20c>
  8004204502:	48 b9 b4 8f 21 04 80 	movabs $0x8004218fb4,%rcx
  8004204509:	00 00 00 
  800420450c:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204513:	00 00 00 
  8004204516:	be 17 04 00 00       	mov    $0x417,%esi
  800420451b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204522:	00 00 00 
  8004204525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420452a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204531:	00 00 00 
  8004204534:	41 ff d0             	callq  *%r8
  8004204537:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420453e:	00 00 00 
  8004204541:	48 8b 10             	mov    (%rax),%rdx
  8004204544:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420454b:	00 00 00 
  800420454e:	48 8b 00             	mov    (%rax),%rax
  8004204551:	48 c1 e0 04          	shl    $0x4,%rax
  8004204555:	48 01 d0             	add    %rdx,%rax
  8004204558:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420455c:	77 35                	ja     8004204593 <check_page_free_list+0x268>
  800420455e:	48 b9 c0 8f 21 04 80 	movabs $0x8004218fc0,%rcx
  8004204565:	00 00 00 
  8004204568:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420456f:	00 00 00 
  8004204572:	be 18 04 00 00       	mov    $0x418,%esi
  8004204577:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420457e:	00 00 00 
  8004204581:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204586:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420458d:	00 00 00 
  8004204590:	41 ff d0             	callq  *%r8
  8004204593:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204597:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420459e:	00 00 00 
  80042045a1:	48 8b 00             	mov    (%rax),%rax
  80042045a4:	48 29 c2             	sub    %rax,%rdx
  80042045a7:	48 89 d0             	mov    %rdx,%rax
  80042045aa:	83 e0 0f             	and    $0xf,%eax
  80042045ad:	48 85 c0             	test   %rax,%rax
  80042045b0:	74 35                	je     80042045e7 <check_page_free_list+0x2bc>
  80042045b2:	48 b9 d8 8f 21 04 80 	movabs $0x8004218fd8,%rcx
  80042045b9:	00 00 00 
  80042045bc:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042045c3:	00 00 00 
  80042045c6:	be 19 04 00 00       	mov    $0x419,%esi
  80042045cb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042045d2:	00 00 00 
  80042045d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045da:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042045e1:	00 00 00 
  80042045e4:	41 ff d0             	callq  *%r8
  80042045e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045eb:	48 89 c7             	mov    %rax,%rdi
  80042045ee:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042045f5:	00 00 00 
  80042045f8:	ff d0                	callq  *%rax
  80042045fa:	48 85 c0             	test   %rax,%rax
  80042045fd:	75 35                	jne    8004204634 <check_page_free_list+0x309>
  80042045ff:	48 b9 0a 90 21 04 80 	movabs $0x800421900a,%rcx
  8004204606:	00 00 00 
  8004204609:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204610:	00 00 00 
  8004204613:	be 1c 04 00 00       	mov    $0x41c,%esi
  8004204618:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420461f:	00 00 00 
  8004204622:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204627:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420462e:	00 00 00 
  8004204631:	41 ff d0             	callq  *%r8
  8004204634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204638:	48 89 c7             	mov    %rax,%rdi
  800420463b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204642:	00 00 00 
  8004204645:	ff d0                	callq  *%rax
  8004204647:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420464d:	75 35                	jne    8004204684 <check_page_free_list+0x359>
  800420464f:	48 b9 1b 90 21 04 80 	movabs $0x800421901b,%rcx
  8004204656:	00 00 00 
  8004204659:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204660:	00 00 00 
  8004204663:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204668:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420466f:	00 00 00 
  8004204672:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204677:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420467e:	00 00 00 
  8004204681:	41 ff d0             	callq  *%r8
  8004204684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204688:	48 89 c7             	mov    %rax,%rdi
  800420468b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204692:	00 00 00 
  8004204695:	ff d0                	callq  *%rax
  8004204697:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  800420469d:	75 35                	jne    80042046d4 <check_page_free_list+0x3a9>
  800420469f:	48 b9 38 90 21 04 80 	movabs $0x8004219038,%rcx
  80042046a6:	00 00 00 
  80042046a9:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042046b0:	00 00 00 
  80042046b3:	be 1e 04 00 00       	mov    $0x41e,%esi
  80042046b8:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042046bf:	00 00 00 
  80042046c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042046c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042046ce:	00 00 00 
  80042046d1:	41 ff d0             	callq  *%r8
  80042046d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046d8:	48 89 c7             	mov    %rax,%rdi
  80042046db:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042046e2:	00 00 00 
  80042046e5:	ff d0                	callq  *%rax
  80042046e7:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042046ed:	75 35                	jne    8004204724 <check_page_free_list+0x3f9>
  80042046ef:	48 b9 5b 90 21 04 80 	movabs $0x800421905b,%rcx
  80042046f6:	00 00 00 
  80042046f9:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204700:	00 00 00 
  8004204703:	be 1f 04 00 00       	mov    $0x41f,%esi
  8004204708:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420470f:	00 00 00 
  8004204712:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204717:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420471e:	00 00 00 
  8004204721:	41 ff d0             	callq  *%r8
  8004204724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204728:	48 89 c7             	mov    %rax,%rdi
  800420472b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204732:	00 00 00 
  8004204735:	ff d0                	callq  *%rax
  8004204737:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  800420473d:	76 4e                	jbe    800420478d <check_page_free_list+0x462>
  800420473f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204743:	48 89 c7             	mov    %rax,%rdi
  8004204746:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420474d:	00 00 00 
  8004204750:	ff d0                	callq  *%rax
  8004204752:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204756:	73 35                	jae    800420478d <check_page_free_list+0x462>
  8004204758:	48 b9 78 90 21 04 80 	movabs $0x8004219078,%rcx
  800420475f:	00 00 00 
  8004204762:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204769:	00 00 00 
  800420476c:	be 20 04 00 00       	mov    $0x420,%esi
  8004204771:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204778:	00 00 00 
  800420477b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204780:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204787:	00 00 00 
  800420478a:	41 ff d0             	callq  *%r8
  800420478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204791:	48 89 c7             	mov    %rax,%rdi
  8004204794:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420479b:	00 00 00 
  800420479e:	ff d0                	callq  *%rax
  80042047a0:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  80042047a6:	75 35                	jne    80042047dd <check_page_free_list+0x4b2>
  80042047a8:	48 b9 bd 90 21 04 80 	movabs $0x80042190bd,%rcx
  80042047af:	00 00 00 
  80042047b2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042047b9:	00 00 00 
  80042047bc:	be 23 04 00 00       	mov    $0x423,%esi
  80042047c1:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042047c8:	00 00 00 
  80042047cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042047d7:	00 00 00 
  80042047da:	41 ff d0             	callq  *%r8
  80042047dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047e1:	48 89 c7             	mov    %rax,%rdi
  80042047e4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042047eb:	00 00 00 
  80042047ee:	ff d0                	callq  *%rax
  80042047f0:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042047f6:	77 07                	ja     80042047ff <check_page_free_list+0x4d4>
  80042047f8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042047fd:	eb 05                	jmp    8004204804 <check_page_free_list+0x4d9>
  80042047ff:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204808:	48 8b 00             	mov    (%rax),%rax
  800420480b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420480f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204814:	0f 85 d5 fc ff ff    	jne    80042044ef <check_page_free_list+0x1c4>
  800420481a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420481f:	75 35                	jne    8004204856 <check_page_free_list+0x52b>
  8004204821:	48 b9 da 90 21 04 80 	movabs $0x80042190da,%rcx
  8004204828:	00 00 00 
  800420482b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204832:	00 00 00 
  8004204835:	be 2c 04 00 00       	mov    $0x42c,%esi
  800420483a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204841:	00 00 00 
  8004204844:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204849:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204850:	00 00 00 
  8004204853:	41 ff d0             	callq  *%r8
  8004204856:	c9                   	leaveq 
  8004204857:	c3                   	retq   

0000008004204858 <check_page_alloc>:
  8004204858:	55                   	push   %rbp
  8004204859:	48 89 e5             	mov    %rsp,%rbp
  800420485c:	48 83 ec 40          	sub    $0x40,%rsp
  8004204860:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204867:	00 00 00 
  800420486a:	48 8b 00             	mov    (%rax),%rax
  800420486d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204871:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204878:	eb 37                	jmp    80042048b1 <check_page_alloc+0x59>
  800420487a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420487e:	48 89 c7             	mov    %rax,%rdi
  8004204881:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204888:	00 00 00 
  800420488b:	ff d0                	callq  *%rax
  800420488d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204892:	be 97 00 00 00       	mov    $0x97,%esi
  8004204897:	48 89 c7             	mov    %rax,%rdi
  800420489a:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042048a1:	00 00 00 
  80042048a4:	ff d0                	callq  *%rax
  80042048a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048aa:	48 8b 00             	mov    (%rax),%rax
  80042048ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042048b6:	75 c2                	jne    800420487a <check_page_alloc+0x22>
  80042048b8:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042048bf:	00 00 00 
  80042048c2:	48 8b 00             	mov    (%rax),%rax
  80042048c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  80042048d0:	e9 ec 01 00 00       	jmpq   8004204ac1 <check_page_alloc+0x269>
  80042048d5:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042048dc:	00 00 00 
  80042048df:	48 8b 00             	mov    (%rax),%rax
  80042048e2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042048e6:	73 35                	jae    800420491d <check_page_alloc+0xc5>
  80042048e8:	48 b9 eb 90 21 04 80 	movabs $0x80042190eb,%rcx
  80042048ef:	00 00 00 
  80042048f2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042048f9:	00 00 00 
  80042048fc:	be 46 04 00 00       	mov    $0x446,%esi
  8004204901:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204908:	00 00 00 
  800420490b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204910:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204917:	00 00 00 
  800420491a:	41 ff d0             	callq  *%r8
  800420491d:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004204924:	00 00 00 
  8004204927:	48 8b 10             	mov    (%rax),%rdx
  800420492a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004204931:	00 00 00 
  8004204934:	48 8b 00             	mov    (%rax),%rax
  8004204937:	48 c1 e0 04          	shl    $0x4,%rax
  800420493b:	48 01 d0             	add    %rdx,%rax
  800420493e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204942:	77 35                	ja     8004204979 <check_page_alloc+0x121>
  8004204944:	48 b9 f8 90 21 04 80 	movabs $0x80042190f8,%rcx
  800420494b:	00 00 00 
  800420494e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204955:	00 00 00 
  8004204958:	be 47 04 00 00       	mov    $0x447,%esi
  800420495d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204964:	00 00 00 
  8004204967:	b8 00 00 00 00       	mov    $0x0,%eax
  800420496c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204973:	00 00 00 
  8004204976:	41 ff d0             	callq  *%r8
  8004204979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420497d:	48 89 c7             	mov    %rax,%rdi
  8004204980:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204987:	00 00 00 
  800420498a:	ff d0                	callq  *%rax
  800420498c:	48 85 c0             	test   %rax,%rax
  800420498f:	75 35                	jne    80042049c6 <check_page_alloc+0x16e>
  8004204991:	48 b9 0d 91 21 04 80 	movabs $0x800421910d,%rcx
  8004204998:	00 00 00 
  800420499b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042049a2:	00 00 00 
  80042049a5:	be 4a 04 00 00       	mov    $0x44a,%esi
  80042049aa:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042049b1:	00 00 00 
  80042049b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042049c0:	00 00 00 
  80042049c3:	41 ff d0             	callq  *%r8
  80042049c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042049ca:	48 89 c7             	mov    %rax,%rdi
  80042049cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042049d4:	00 00 00 
  80042049d7:	ff d0                	callq  *%rax
  80042049d9:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042049df:	75 35                	jne    8004204a16 <check_page_alloc+0x1be>
  80042049e1:	48 b9 1f 91 21 04 80 	movabs $0x800421911f,%rcx
  80042049e8:	00 00 00 
  80042049eb:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042049f2:	00 00 00 
  80042049f5:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042049fa:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204a01:	00 00 00 
  8004204a04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a10:	00 00 00 
  8004204a13:	41 ff d0             	callq  *%r8
  8004204a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a1a:	48 89 c7             	mov    %rax,%rdi
  8004204a1d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a24:	00 00 00 
  8004204a27:	ff d0                	callq  *%rax
  8004204a29:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204a2f:	75 35                	jne    8004204a66 <check_page_alloc+0x20e>
  8004204a31:	48 b9 40 91 21 04 80 	movabs $0x8004219140,%rcx
  8004204a38:	00 00 00 
  8004204a3b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204a42:	00 00 00 
  8004204a45:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204a4a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204a51:	00 00 00 
  8004204a54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a59:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a60:	00 00 00 
  8004204a63:	41 ff d0             	callq  *%r8
  8004204a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a6a:	48 89 c7             	mov    %rax,%rdi
  8004204a6d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a74:	00 00 00 
  8004204a77:	ff d0                	callq  *%rax
  8004204a79:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204a7f:	75 35                	jne    8004204ab6 <check_page_alloc+0x25e>
  8004204a81:	48 b9 64 91 21 04 80 	movabs $0x8004219164,%rcx
  8004204a88:	00 00 00 
  8004204a8b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204a92:	00 00 00 
  8004204a95:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204a9a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204aa1:	00 00 00 
  8004204aa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204aa9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ab0:	00 00 00 
  8004204ab3:	41 ff d0             	callq  *%r8
  8004204ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204aba:	48 8b 00             	mov    (%rax),%rax
  8004204abd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ac1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ac6:	0f 85 09 fe ff ff    	jne    80042048d5 <check_page_alloc+0x7d>
  8004204acc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204ad3:	00 
  8004204ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ad8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ae4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ae9:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204af0:	00 00 00 
  8004204af3:	ff d0                	callq  *%rax
  8004204af5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204af9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204afe:	75 35                	jne    8004204b35 <check_page_alloc+0x2dd>
  8004204b00:	48 b9 7f 91 21 04 80 	movabs $0x800421917f,%rcx
  8004204b07:	00 00 00 
  8004204b0a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204b11:	00 00 00 
  8004204b14:	be 51 04 00 00       	mov    $0x451,%esi
  8004204b19:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204b20:	00 00 00 
  8004204b23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b2f:	00 00 00 
  8004204b32:	41 ff d0             	callq  *%r8
  8004204b35:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b3a:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b41:	00 00 00 
  8004204b44:	ff d0                	callq  *%rax
  8004204b46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204b4a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204b4f:	75 35                	jne    8004204b86 <check_page_alloc+0x32e>
  8004204b51:	48 b9 95 91 21 04 80 	movabs $0x8004219195,%rcx
  8004204b58:	00 00 00 
  8004204b5b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204b62:	00 00 00 
  8004204b65:	be 52 04 00 00       	mov    $0x452,%esi
  8004204b6a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204b71:	00 00 00 
  8004204b74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b79:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b80:	00 00 00 
  8004204b83:	41 ff d0             	callq  *%r8
  8004204b86:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b8b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b92:	00 00 00 
  8004204b95:	ff d0                	callq  *%rax
  8004204b97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204b9b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ba0:	75 35                	jne    8004204bd7 <check_page_alloc+0x37f>
  8004204ba2:	48 b9 ab 91 21 04 80 	movabs $0x80042191ab,%rcx
  8004204ba9:	00 00 00 
  8004204bac:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204bb3:	00 00 00 
  8004204bb6:	be 53 04 00 00       	mov    $0x453,%esi
  8004204bbb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204bc2:	00 00 00 
  8004204bc5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204bd1:	00 00 00 
  8004204bd4:	41 ff d0             	callq  *%r8
  8004204bd7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204bdc:	75 35                	jne    8004204c13 <check_page_alloc+0x3bb>
  8004204bde:	48 b9 c1 91 21 04 80 	movabs $0x80042191c1,%rcx
  8004204be5:	00 00 00 
  8004204be8:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204bef:	00 00 00 
  8004204bf2:	be 54 04 00 00       	mov    $0x454,%esi
  8004204bf7:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204bfe:	00 00 00 
  8004204c01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c0d:	00 00 00 
  8004204c10:	41 ff d0             	callq  *%r8
  8004204c13:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204c18:	74 0a                	je     8004204c24 <check_page_alloc+0x3cc>
  8004204c1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c1e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c22:	75 35                	jne    8004204c59 <check_page_alloc+0x401>
  8004204c24:	48 b9 c5 91 21 04 80 	movabs $0x80042191c5,%rcx
  8004204c2b:	00 00 00 
  8004204c2e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204c35:	00 00 00 
  8004204c38:	be 55 04 00 00       	mov    $0x455,%esi
  8004204c3d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204c44:	00 00 00 
  8004204c47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c4c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c53:	00 00 00 
  8004204c56:	41 ff d0             	callq  *%r8
  8004204c59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204c5e:	74 14                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c64:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204c68:	74 0a                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c6e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c72:	75 35                	jne    8004204ca9 <check_page_alloc+0x451>
  8004204c74:	48 b9 d8 91 21 04 80 	movabs $0x80042191d8,%rcx
  8004204c7b:	00 00 00 
  8004204c7e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204c85:	00 00 00 
  8004204c88:	be 56 04 00 00       	mov    $0x456,%esi
  8004204c8d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204c94:	00 00 00 
  8004204c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c9c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ca3:	00 00 00 
  8004204ca6:	41 ff d0             	callq  *%r8
  8004204ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cad:	48 89 c7             	mov    %rax,%rdi
  8004204cb0:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204cb7:	00 00 00 
  8004204cba:	ff d0                	callq  *%rax
  8004204cbc:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204cc3:	00 00 00 
  8004204cc6:	48 8b 12             	mov    (%rdx),%rdx
  8004204cc9:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204ccd:	48 39 d0             	cmp    %rdx,%rax
  8004204cd0:	72 35                	jb     8004204d07 <check_page_alloc+0x4af>
  8004204cd2:	48 b9 f8 91 21 04 80 	movabs $0x80042191f8,%rcx
  8004204cd9:	00 00 00 
  8004204cdc:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204ce3:	00 00 00 
  8004204ce6:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ceb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204cf2:	00 00 00 
  8004204cf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cfa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d01:	00 00 00 
  8004204d04:	41 ff d0             	callq  *%r8
  8004204d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0b:	48 89 c7             	mov    %rax,%rdi
  8004204d0e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d15:	00 00 00 
  8004204d18:	ff d0                	callq  *%rax
  8004204d1a:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d21:	00 00 00 
  8004204d24:	48 8b 12             	mov    (%rdx),%rdx
  8004204d27:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d2b:	48 39 d0             	cmp    %rdx,%rax
  8004204d2e:	72 35                	jb     8004204d65 <check_page_alloc+0x50d>
  8004204d30:	48 b9 15 92 21 04 80 	movabs $0x8004219215,%rcx
  8004204d37:	00 00 00 
  8004204d3a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204d41:	00 00 00 
  8004204d44:	be 58 04 00 00       	mov    $0x458,%esi
  8004204d49:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204d50:	00 00 00 
  8004204d53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d58:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d5f:	00 00 00 
  8004204d62:	41 ff d0             	callq  *%r8
  8004204d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d69:	48 89 c7             	mov    %rax,%rdi
  8004204d6c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d73:	00 00 00 
  8004204d76:	ff d0                	callq  *%rax
  8004204d78:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d7f:	00 00 00 
  8004204d82:	48 8b 12             	mov    (%rdx),%rdx
  8004204d85:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d89:	48 39 d0             	cmp    %rdx,%rax
  8004204d8c:	72 35                	jb     8004204dc3 <check_page_alloc+0x56b>
  8004204d8e:	48 b9 32 92 21 04 80 	movabs $0x8004219232,%rcx
  8004204d95:	00 00 00 
  8004204d98:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204d9f:	00 00 00 
  8004204da2:	be 59 04 00 00       	mov    $0x459,%esi
  8004204da7:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204dae:	00 00 00 
  8004204db1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204db6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204dbd:	00 00 00 
  8004204dc0:	41 ff d0             	callq  *%r8
  8004204dc3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204dca:	00 00 00 
  8004204dcd:	48 8b 00             	mov    (%rax),%rax
  8004204dd0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204dd4:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204ddb:	00 00 00 
  8004204dde:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204de5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204dea:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204df1:	00 00 00 
  8004204df4:	ff d0                	callq  *%rax
  8004204df6:	48 85 c0             	test   %rax,%rax
  8004204df9:	74 35                	je     8004204e30 <check_page_alloc+0x5d8>
  8004204dfb:	48 b9 4f 92 21 04 80 	movabs $0x800421924f,%rcx
  8004204e02:	00 00 00 
  8004204e05:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204e0c:	00 00 00 
  8004204e0f:	be 60 04 00 00       	mov    $0x460,%esi
  8004204e14:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204e1b:	00 00 00 
  8004204e1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e23:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204e2a:	00 00 00 
  8004204e2d:	41 ff d0             	callq  *%r8
  8004204e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204e34:	48 89 c7             	mov    %rax,%rdi
  8004204e37:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e3e:	00 00 00 
  8004204e41:	ff d0                	callq  *%rax
  8004204e43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e47:	48 89 c7             	mov    %rax,%rdi
  8004204e4a:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e51:	00 00 00 
  8004204e54:	ff d0                	callq  *%rax
  8004204e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e5a:	48 89 c7             	mov    %rax,%rdi
  8004204e5d:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e64:	00 00 00 
  8004204e67:	ff d0                	callq  *%rax
  8004204e69:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204e70:	00 
  8004204e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e81:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204e86:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204e8d:	00 00 00 
  8004204e90:	ff d0                	callq  *%rax
  8004204e92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e96:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e9b:	75 35                	jne    8004204ed2 <check_page_alloc+0x67a>
  8004204e9d:	48 b9 7f 91 21 04 80 	movabs $0x800421917f,%rcx
  8004204ea4:	00 00 00 
  8004204ea7:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204eae:	00 00 00 
  8004204eb1:	be 67 04 00 00       	mov    $0x467,%esi
  8004204eb6:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204ebd:	00 00 00 
  8004204ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ec5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ecc:	00 00 00 
  8004204ecf:	41 ff d0             	callq  *%r8
  8004204ed2:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ed7:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204ede:	00 00 00 
  8004204ee1:	ff d0                	callq  *%rax
  8004204ee3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204ee7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204eec:	75 35                	jne    8004204f23 <check_page_alloc+0x6cb>
  8004204eee:	48 b9 95 91 21 04 80 	movabs $0x8004219195,%rcx
  8004204ef5:	00 00 00 
  8004204ef8:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204eff:	00 00 00 
  8004204f02:	be 68 04 00 00       	mov    $0x468,%esi
  8004204f07:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204f0e:	00 00 00 
  8004204f11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f16:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f1d:	00 00 00 
  8004204f20:	41 ff d0             	callq  *%r8
  8004204f23:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f28:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204f2f:	00 00 00 
  8004204f32:	ff d0                	callq  *%rax
  8004204f34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204f38:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204f3d:	75 35                	jne    8004204f74 <check_page_alloc+0x71c>
  8004204f3f:	48 b9 ab 91 21 04 80 	movabs $0x80042191ab,%rcx
  8004204f46:	00 00 00 
  8004204f49:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204f50:	00 00 00 
  8004204f53:	be 69 04 00 00       	mov    $0x469,%esi
  8004204f58:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204f5f:	00 00 00 
  8004204f62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f67:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f6e:	00 00 00 
  8004204f71:	41 ff d0             	callq  *%r8
  8004204f74:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204f79:	75 35                	jne    8004204fb0 <check_page_alloc+0x758>
  8004204f7b:	48 b9 c1 91 21 04 80 	movabs $0x80042191c1,%rcx
  8004204f82:	00 00 00 
  8004204f85:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204f8c:	00 00 00 
  8004204f8f:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204f94:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204f9b:	00 00 00 
  8004204f9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fa3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204faa:	00 00 00 
  8004204fad:	41 ff d0             	callq  *%r8
  8004204fb0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204fb5:	74 0a                	je     8004204fc1 <check_page_alloc+0x769>
  8004204fb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204fbb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204fbf:	75 35                	jne    8004204ff6 <check_page_alloc+0x79e>
  8004204fc1:	48 b9 c5 91 21 04 80 	movabs $0x80042191c5,%rcx
  8004204fc8:	00 00 00 
  8004204fcb:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004204fd2:	00 00 00 
  8004204fd5:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204fda:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004204fe1:	00 00 00 
  8004204fe4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fe9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ff0:	00 00 00 
  8004204ff3:	41 ff d0             	callq  *%r8
  8004204ff6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ffb:	74 14                	je     8004205011 <check_page_alloc+0x7b9>
  8004204ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205001:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004205005:	74 0a                	je     8004205011 <check_page_alloc+0x7b9>
  8004205007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420500b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420500f:	75 35                	jne    8004205046 <check_page_alloc+0x7ee>
  8004205011:	48 b9 d8 91 21 04 80 	movabs $0x80042191d8,%rcx
  8004205018:	00 00 00 
  800420501b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205022:	00 00 00 
  8004205025:	be 6c 04 00 00       	mov    $0x46c,%esi
  800420502a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205031:	00 00 00 
  8004205034:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205039:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205040:	00 00 00 
  8004205043:	41 ff d0             	callq  *%r8
  8004205046:	bf 00 00 00 00       	mov    $0x0,%edi
  800420504b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205052:	00 00 00 
  8004205055:	ff d0                	callq  *%rax
  8004205057:	48 85 c0             	test   %rax,%rax
  800420505a:	74 35                	je     8004205091 <check_page_alloc+0x839>
  800420505c:	48 b9 4f 92 21 04 80 	movabs $0x800421924f,%rcx
  8004205063:	00 00 00 
  8004205066:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420506d:	00 00 00 
  8004205070:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004205075:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420507c:	00 00 00 
  800420507f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205084:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420508b:	00 00 00 
  800420508e:	41 ff d0             	callq  *%r8
  8004205091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205095:	48 89 c7             	mov    %rax,%rdi
  8004205098:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420509f:	00 00 00 
  80042050a2:	ff d0                	callq  *%rax
  80042050a4:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042050ae:	48 89 c7             	mov    %rax,%rdi
  80042050b1:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042050b8:	00 00 00 
  80042050bb:	ff d0                	callq  *%rax
  80042050bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050c1:	48 89 c7             	mov    %rax,%rdi
  80042050c4:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042050cb:	00 00 00 
  80042050ce:	ff d0                	callq  *%rax
  80042050d0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042050d5:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042050dc:	00 00 00 
  80042050df:	ff d0                	callq  *%rax
  80042050e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042050e5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042050ea:	75 35                	jne    8004205121 <check_page_alloc+0x8c9>
  80042050ec:	48 b9 5e 92 21 04 80 	movabs $0x800421925e,%rcx
  80042050f3:	00 00 00 
  80042050f6:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042050fd:	00 00 00 
  8004205100:	be 72 04 00 00       	mov    $0x472,%esi
  8004205105:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420510c:	00 00 00 
  800420510f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205114:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420511b:	00 00 00 
  800420511e:	41 ff d0             	callq  *%r8
  8004205121:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205126:	74 0a                	je     8004205132 <check_page_alloc+0x8da>
  8004205128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420512c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205130:	74 35                	je     8004205167 <check_page_alloc+0x90f>
  8004205132:	48 b9 7c 92 21 04 80 	movabs $0x800421927c,%rcx
  8004205139:	00 00 00 
  800420513c:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205143:	00 00 00 
  8004205146:	be 73 04 00 00       	mov    $0x473,%esi
  800420514b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205152:	00 00 00 
  8004205155:	b8 00 00 00 00       	mov    $0x0,%eax
  800420515a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205161:	00 00 00 
  8004205164:	41 ff d0             	callq  *%r8
  8004205167:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420516b:	48 89 c7             	mov    %rax,%rdi
  800420516e:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004205175:	00 00 00 
  8004205178:	ff d0                	callq  *%rax
  800420517a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420517e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205185:	eb 4d                	jmp    80042051d4 <check_page_alloc+0x97c>
  8004205187:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420518a:	48 63 d0             	movslq %eax,%rdx
  800420518d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205191:	48 01 d0             	add    %rdx,%rax
  8004205194:	0f b6 00             	movzbl (%rax),%eax
  8004205197:	84 c0                	test   %al,%al
  8004205199:	74 35                	je     80042051d0 <check_page_alloc+0x978>
  800420519b:	48 b9 8c 92 21 04 80 	movabs $0x800421928c,%rcx
  80042051a2:	00 00 00 
  80042051a5:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042051ac:	00 00 00 
  80042051af:	be 76 04 00 00       	mov    $0x476,%esi
  80042051b4:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042051bb:	00 00 00 
  80042051be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042051ca:	00 00 00 
  80042051cd:	41 ff d0             	callq  *%r8
  80042051d0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042051d4:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042051db:	7e aa                	jle    8004205187 <check_page_alloc+0x92f>
  80042051dd:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042051e4:	00 00 00 
  80042051e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042051eb:	48 89 10             	mov    %rdx,(%rax)
  80042051ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042051f2:	48 89 c7             	mov    %rax,%rdi
  80042051f5:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042051fc:	00 00 00 
  80042051ff:	ff d0                	callq  *%rax
  8004205201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205205:	48 89 c7             	mov    %rax,%rdi
  8004205208:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420520f:	00 00 00 
  8004205212:	ff d0                	callq  *%rax
  8004205214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205218:	48 89 c7             	mov    %rax,%rdi
  800420521b:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004205222:	00 00 00 
  8004205225:	ff d0                	callq  *%rax
  8004205227:	48 bf 98 92 21 04 80 	movabs $0x8004219298,%rdi
  800420522e:	00 00 00 
  8004205231:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205236:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420523d:	00 00 00 
  8004205240:	ff d2                	callq  *%rdx
  8004205242:	c9                   	leaveq 
  8004205243:	c3                   	retq   

0000008004205244 <check_boot_pml4e>:
  8004205244:	55                   	push   %rbp
  8004205245:	48 89 e5             	mov    %rsp,%rbp
  8004205248:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420524f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205256:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420525d:	00 00 00 
  8004205260:	48 8b 00             	mov    (%rax),%rax
  8004205263:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205267:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  800420526e:	00 
  800420526f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205276:	00 00 00 
  8004205279:	48 8b 00             	mov    (%rax),%rax
  800420527c:	48 c1 e0 04          	shl    $0x4,%rax
  8004205280:	48 89 c2             	mov    %rax,%rdx
  8004205283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205287:	48 01 d0             	add    %rdx,%rax
  800420528a:	48 83 e8 01          	sub    $0x1,%rax
  800420528e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205296:	ba 00 00 00 00       	mov    $0x0,%edx
  800420529b:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420529f:	48 89 d0             	mov    %rdx,%rax
  80042052a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042052a6:	48 29 c2             	sub    %rax,%rdx
  80042052a9:	48 89 d0             	mov    %rdx,%rax
  80042052ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042052b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052b7:	00 
  80042052b8:	e9 d4 00 00 00       	jmpq   8004205391 <check_boot_pml4e+0x14d>
  80042052bd:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  80042052c4:	00 00 00 
  80042052c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052cb:	48 01 c2             	add    %rax,%rdx
  80042052ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052d2:	48 89 d6             	mov    %rdx,%rsi
  80042052d5:	48 89 c7             	mov    %rax,%rdi
  80042052d8:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042052df:	00 00 00 
  80042052e2:	ff d0                	callq  *%rax
  80042052e4:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  80042052eb:	00 00 00 
  80042052ee:	48 8b 12             	mov    (%rdx),%rdx
  80042052f1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042052f5:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052fc:	00 00 00 
  80042052ff:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  8004205303:	77 32                	ja     8004205337 <check_boot_pml4e+0xf3>
  8004205305:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205309:	48 89 c1             	mov    %rax,%rcx
  800420530c:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004205313:	00 00 00 
  8004205316:	be 96 04 00 00       	mov    $0x496,%esi
  800420531b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205322:	00 00 00 
  8004205325:	b8 00 00 00 00       	mov    $0x0,%eax
  800420532a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205331:	00 00 00 
  8004205334:	41 ff d0             	callq  *%r8
  8004205337:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420533e:	ff ff ff 
  8004205341:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205345:	48 01 d1             	add    %rdx,%rcx
  8004205348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420534c:	48 01 ca             	add    %rcx,%rdx
  800420534f:	48 39 d0             	cmp    %rdx,%rax
  8004205352:	74 35                	je     8004205389 <check_boot_pml4e+0x145>
  8004205354:	48 b9 b8 92 21 04 80 	movabs $0x80042192b8,%rcx
  800420535b:	00 00 00 
  800420535e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205365:	00 00 00 
  8004205368:	be 96 04 00 00       	mov    $0x496,%esi
  800420536d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205374:	00 00 00 
  8004205377:	b8 00 00 00 00       	mov    $0x0,%eax
  800420537c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205383:	00 00 00 
  8004205386:	41 ff d0             	callq  *%r8
  8004205389:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205390:	00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205399:	0f 82 1e ff ff ff    	jb     80042052bd <check_boot_pml4e+0x79>
  800420539f:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  80042053a6:	00 
  80042053a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053ab:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042053b1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042053b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042053b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042053be:	48 f7 75 c8          	divq   -0x38(%rbp)
  80042053c2:	48 89 d0             	mov    %rdx,%rax
  80042053c5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042053c9:	48 29 c2             	sub    %rax,%rdx
  80042053cc:	48 89 d0             	mov    %rdx,%rax
  80042053cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042053d3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042053da:	00 
  80042053db:	e9 d4 00 00 00       	jmpq   80042054b4 <check_boot_pml4e+0x270>
  80042053e0:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042053e7:	00 00 00 
  80042053ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053ee:	48 01 c2             	add    %rax,%rdx
  80042053f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053f5:	48 89 d6             	mov    %rdx,%rsi
  80042053f8:	48 89 c7             	mov    %rax,%rdi
  80042053fb:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004205402:	00 00 00 
  8004205405:	ff d0                	callq  *%rax
  8004205407:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  800420540e:	00 00 00 
  8004205411:	48 8b 12             	mov    (%rdx),%rdx
  8004205414:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004205418:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420541f:	00 00 00 
  8004205422:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  8004205426:	77 32                	ja     800420545a <check_boot_pml4e+0x216>
  8004205428:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420542c:	48 89 c1             	mov    %rax,%rcx
  800420542f:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  8004205436:	00 00 00 
  8004205439:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420543e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205445:	00 00 00 
  8004205448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420544d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205454:	00 00 00 
  8004205457:	41 ff d0             	callq  *%r8
  800420545a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205461:	ff ff ff 
  8004205464:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205468:	48 01 d1             	add    %rdx,%rcx
  800420546b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420546f:	48 01 ca             	add    %rcx,%rdx
  8004205472:	48 39 d0             	cmp    %rdx,%rax
  8004205475:	74 35                	je     80042054ac <check_boot_pml4e+0x268>
  8004205477:	48 b9 f0 92 21 04 80 	movabs $0x80042192f0,%rcx
  800420547e:	00 00 00 
  8004205481:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205488:	00 00 00 
  800420548b:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205490:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205497:	00 00 00 
  800420549a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420549f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042054a6:	00 00 00 
  80042054a9:	41 ff d0             	callq  *%r8
  80042054ac:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042054b3:	00 
  80042054b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054b8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042054bc:	0f 82 1e ff ff ff    	jb     80042053e0 <check_boot_pml4e+0x19c>
  80042054c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042054c9:	00 
  80042054ca:	eb 6a                	jmp    8004205536 <check_boot_pml4e+0x2f2>
  80042054cc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054d3:	00 00 00 
  80042054d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054da:	48 01 c2             	add    %rax,%rdx
  80042054dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042054e1:	48 89 d6             	mov    %rdx,%rsi
  80042054e4:	48 89 c7             	mov    %rax,%rdi
  80042054e7:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042054ee:	00 00 00 
  80042054f1:	ff d0                	callq  *%rax
  80042054f3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042054f7:	74 35                	je     800420552e <check_boot_pml4e+0x2ea>
  80042054f9:	48 b9 28 93 21 04 80 	movabs $0x8004219328,%rcx
  8004205500:	00 00 00 
  8004205503:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420550a:	00 00 00 
  800420550d:	be a2 04 00 00       	mov    $0x4a2,%esi
  8004205512:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205519:	00 00 00 
  800420551c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205521:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205528:	00 00 00 
  800420552b:	41 ff d0             	callq  *%r8
  800420552e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205535:	00 
  8004205536:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420553d:	00 00 00 
  8004205540:	48 8b 00             	mov    (%rax),%rax
  8004205543:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205547:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420554b:	0f 87 7b ff ff ff    	ja     80042054cc <check_boot_pml4e+0x288>
  8004205551:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205558:	00 
  8004205559:	e9 a1 01 00 00       	jmpq   80042056ff <check_boot_pml4e+0x4bb>
  800420555e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205562:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205566:	48 89 d0             	mov    %rdx,%rax
  8004205569:	48 01 c0             	add    %rax,%rax
  800420556c:	48 01 d0             	add    %rdx,%rax
  800420556f:	48 c1 e0 0f          	shl    $0xf,%rax
  8004205573:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420557a:	00 00 00 
  800420557d:	48 29 c2             	sub    %rax,%rdx
  8004205580:	48 89 d0             	mov    %rdx,%rax
  8004205583:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205587:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420558e:	00 
  800420558f:	e9 e0 00 00 00       	jmpq   8004205674 <check_boot_pml4e+0x430>
  8004205594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205598:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420559c:	48 01 d0             	add    %rdx,%rax
  800420559f:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  80042055a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042055aa:	48 89 d6             	mov    %rdx,%rsi
  80042055ad:	48 89 c7             	mov    %rax,%rdi
  80042055b0:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042055b7:	00 00 00 
  80042055ba:	ff d0                	callq  *%rax
  80042055bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042055c0:	48 89 d1             	mov    %rdx,%rcx
  80042055c3:	48 c1 e1 10          	shl    $0x10,%rcx
  80042055c7:	48 ba 00 e0 69 04 80 	movabs $0x800469e000,%rdx
  80042055ce:	00 00 00 
  80042055d1:	48 01 ca             	add    %rcx,%rdx
  80042055d4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042055d8:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042055df:	00 00 00 
  80042055e2:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042055e6:	77 32                	ja     800420561a <check_boot_pml4e+0x3d6>
  80042055e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042055ec:	48 89 c1             	mov    %rax,%rcx
  80042055ef:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  80042055f6:	00 00 00 
  80042055f9:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042055fe:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205605:	00 00 00 
  8004205608:	b8 00 00 00 00       	mov    $0x0,%eax
  800420560d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205614:	00 00 00 
  8004205617:	41 ff d0             	callq  *%r8
  800420561a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205621:	ff ff ff 
  8004205624:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004205628:	48 01 d1             	add    %rdx,%rcx
  800420562b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420562f:	48 01 ca             	add    %rcx,%rdx
  8004205632:	48 39 d0             	cmp    %rdx,%rax
  8004205635:	74 35                	je     800420566c <check_boot_pml4e+0x428>
  8004205637:	48 b9 50 93 21 04 80 	movabs $0x8004219350,%rcx
  800420563e:	00 00 00 
  8004205641:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205648:	00 00 00 
  800420564b:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205650:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205657:	00 00 00 
  800420565a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420565f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205666:	00 00 00 
  8004205669:	41 ff d0             	callq  *%r8
  800420566c:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205673:	00 
  8004205674:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  800420567b:	00 
  800420567c:	0f 86 12 ff ff ff    	jbe    8004205594 <check_boot_pml4e+0x350>
  8004205682:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205689:	00 
  800420568a:	eb 64                	jmp    80042056f0 <check_boot_pml4e+0x4ac>
  800420568c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205690:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205694:	48 01 c2             	add    %rax,%rdx
  8004205697:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420569b:	48 89 d6             	mov    %rdx,%rsi
  800420569e:	48 89 c7             	mov    %rax,%rdi
  80042056a1:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042056a8:	00 00 00 
  80042056ab:	ff d0                	callq  *%rax
  80042056ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042056b1:	74 35                	je     80042056e8 <check_boot_pml4e+0x4a4>
  80042056b3:	48 b9 98 93 21 04 80 	movabs $0x8004219398,%rcx
  80042056ba:	00 00 00 
  80042056bd:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042056c4:	00 00 00 
  80042056c7:	be ad 04 00 00       	mov    $0x4ad,%esi
  80042056cc:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042056d3:	00 00 00 
  80042056d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056db:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042056e2:	00 00 00 
  80042056e5:	41 ff d0             	callq  *%r8
  80042056e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042056ef:	00 
  80042056f0:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042056f7:	00 
  80042056f8:	76 92                	jbe    800420568c <check_boot_pml4e+0x448>
  80042056fa:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042056ff:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  8004205704:	0f 86 54 fe ff ff    	jbe    800420555e <check_boot_pml4e+0x31a>
  800420570a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004205711:	00 00 00 
  8004205714:	48 8b 00             	mov    (%rax),%rax
  8004205717:	48 83 c0 08          	add    $0x8,%rax
  800420571b:	48 8b 00             	mov    (%rax),%rax
  800420571e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205724:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004205728:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420572c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205730:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004205733:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004205736:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420573d:	00 00 00 
  8004205740:	48 8b 00             	mov    (%rax),%rax
  8004205743:	48 39 c2             	cmp    %rax,%rdx
  8004205746:	72 32                	jb     800420577a <check_boot_pml4e+0x536>
  8004205748:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420574c:	48 89 c1             	mov    %rax,%rcx
  800420574f:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004205756:	00 00 00 
  8004205759:	be b7 04 00 00       	mov    $0x4b7,%esi
  800420575e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205765:	00 00 00 
  8004205768:	b8 00 00 00 00       	mov    $0x0,%eax
  800420576d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205774:	00 00 00 
  8004205777:	41 ff d0             	callq  *%r8
  800420577a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205781:	00 00 00 
  8004205784:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205788:	48 01 d0             	add    %rdx,%rax
  800420578b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420578f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205793:	48 8b 00             	mov    (%rax),%rax
  8004205796:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420579c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042057a0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057a4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042057a8:	89 45 84             	mov    %eax,-0x7c(%rbp)
  80042057ab:	8b 55 84             	mov    -0x7c(%rbp),%edx
  80042057ae:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042057b5:	00 00 00 
  80042057b8:	48 8b 00             	mov    (%rax),%rax
  80042057bb:	48 39 c2             	cmp    %rax,%rdx
  80042057be:	72 32                	jb     80042057f2 <check_boot_pml4e+0x5ae>
  80042057c0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057c4:	48 89 c1             	mov    %rax,%rcx
  80042057c7:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042057ce:	00 00 00 
  80042057d1:	be b8 04 00 00       	mov    $0x4b8,%esi
  80042057d6:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042057dd:	00 00 00 
  80042057e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057e5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042057ec:	00 00 00 
  80042057ef:	41 ff d0             	callq  *%r8
  80042057f2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042057f9:	00 00 00 
  80042057fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004205800:	48 01 d0             	add    %rdx,%rax
  8004205803:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800420580a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205811:	00 
  8004205812:	e9 50 01 00 00       	jmpq   8004205967 <check_boot_pml4e+0x723>
  8004205817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420581b:	48 83 f8 04          	cmp    $0x4,%rax
  800420581f:	72 67                	jb     8004205888 <check_boot_pml4e+0x644>
  8004205821:	48 83 f8 05          	cmp    $0x5,%rax
  8004205825:	76 06                	jbe    800420582d <check_boot_pml4e+0x5e9>
  8004205827:	48 83 f8 1f          	cmp    $0x1f,%rax
  800420582b:	75 5b                	jne    8004205888 <check_boot_pml4e+0x644>
  800420582d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205831:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205838:	00 
  8004205839:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205840:	48 01 d0             	add    %rdx,%rax
  8004205843:	48 8b 00             	mov    (%rax),%rax
  8004205846:	83 e0 01             	and    $0x1,%eax
  8004205849:	48 85 c0             	test   %rax,%rax
  800420584c:	75 35                	jne    8004205883 <check_boot_pml4e+0x63f>
  800420584e:	48 b9 bb 93 21 04 80 	movabs $0x80042193bb,%rcx
  8004205855:	00 00 00 
  8004205858:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420585f:	00 00 00 
  8004205862:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205867:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420586e:	00 00 00 
  8004205871:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205876:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420587d:	00 00 00 
  8004205880:	41 ff d0             	callq  *%r8
  8004205883:	e9 da 00 00 00       	jmpq   8004205962 <check_boot_pml4e+0x71e>
  8004205888:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  800420588d:	0f 86 ce 00 00 00    	jbe    8004205961 <check_boot_pml4e+0x71d>
  8004205893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205897:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420589e:	00 
  800420589f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058a6:	48 01 d0             	add    %rdx,%rax
  80042058a9:	48 8b 00             	mov    (%rax),%rax
  80042058ac:	83 e0 01             	and    $0x1,%eax
  80042058af:	48 85 c0             	test   %rax,%rax
  80042058b2:	74 5a                	je     800420590e <check_boot_pml4e+0x6ca>
  80042058b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058bf:	00 
  80042058c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058c7:	48 01 d0             	add    %rdx,%rax
  80042058ca:	48 8b 00             	mov    (%rax),%rax
  80042058cd:	83 e0 02             	and    $0x2,%eax
  80042058d0:	48 85 c0             	test   %rax,%rax
  80042058d3:	0f 85 88 00 00 00    	jne    8004205961 <check_boot_pml4e+0x71d>
  80042058d9:	48 b9 cc 93 21 04 80 	movabs $0x80042193cc,%rcx
  80042058e0:	00 00 00 
  80042058e3:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042058ea:	00 00 00 
  80042058ed:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042058f2:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042058f9:	00 00 00 
  80042058fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205901:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205908:	00 00 00 
  800420590b:	41 ff d0             	callq  *%r8
  800420590e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205921:	48 01 d0             	add    %rdx,%rax
  8004205924:	48 8b 00             	mov    (%rax),%rax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	74 35                	je     8004205961 <check_boot_pml4e+0x71d>
  800420592c:	48 b9 dd 93 21 04 80 	movabs $0x80042193dd,%rcx
  8004205933:	00 00 00 
  8004205936:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420593d:	00 00 00 
  8004205940:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205945:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420594c:	00 00 00 
  800420594f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205954:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420595b:	00 00 00 
  800420595e:	41 ff d0             	callq  *%r8
  8004205961:	90                   	nop
  8004205962:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205967:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  800420596e:	00 
  800420596f:	0f 86 a2 fe ff ff    	jbe    8004205817 <check_boot_pml4e+0x5d3>
  8004205975:	48 bf f0 93 21 04 80 	movabs $0x80042193f0,%rdi
  800420597c:	00 00 00 
  800420597f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205984:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420598b:	00 00 00 
  800420598e:	ff d2                	callq  *%rdx
  8004205990:	c9                   	leaveq 
  8004205991:	c3                   	retq   

0000008004205992 <check_va2pa>:
  8004205992:	55                   	push   %rbp
  8004205993:	48 89 e5             	mov    %rsp,%rbp
  8004205996:	48 83 ec 60          	sub    $0x60,%rsp
  800420599a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420599e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042059a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059a6:	48 c1 e8 27          	shr    $0x27,%rax
  80042059aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059af:	48 c1 e0 03          	shl    $0x3,%rax
  80042059b3:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  80042059b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059bb:	48 8b 00             	mov    (%rax),%rax
  80042059be:	83 e0 01             	and    $0x1,%eax
  80042059c1:	48 85 c0             	test   %rax,%rax
  80042059c4:	75 0c                	jne    80042059d2 <check_va2pa+0x40>
  80042059c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059cd:	e9 38 02 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  80042059d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059d6:	48 8b 00             	mov    (%rax),%rax
  80042059d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042059df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042059e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042059e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042059eb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042059ee:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042059f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042059f8:	00 00 00 
  80042059fb:	48 8b 00             	mov    (%rax),%rax
  80042059fe:	48 39 c2             	cmp    %rax,%rdx
  8004205a01:	72 32                	jb     8004205a35 <check_va2pa+0xa3>
  8004205a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a07:	48 89 c1             	mov    %rax,%rcx
  8004205a0a:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004205a11:	00 00 00 
  8004205a14:	be e1 04 00 00       	mov    $0x4e1,%esi
  8004205a19:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205a20:	00 00 00 
  8004205a23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205a2f:	00 00 00 
  8004205a32:	41 ff d0             	callq  *%r8
  8004205a35:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a3c:	00 00 00 
  8004205a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a43:	48 01 d0             	add    %rdx,%rax
  8004205a46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205a4a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a4e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a52:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a5e:	00 
  8004205a5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a63:	48 01 d0             	add    %rdx,%rax
  8004205a66:	48 8b 00             	mov    (%rax),%rax
  8004205a69:	83 e0 01             	and    $0x1,%eax
  8004205a6c:	48 85 c0             	test   %rax,%rax
  8004205a6f:	75 0c                	jne    8004205a7d <check_va2pa+0xeb>
  8004205a71:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a78:	e9 8d 01 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205a7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a81:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a85:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a8a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a91:	00 
  8004205a92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a96:	48 01 d0             	add    %rdx,%rax
  8004205a99:	48 8b 00             	mov    (%rax),%rax
  8004205a9c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205aa2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aaa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aae:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205ab1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004205ab4:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205abb:	00 00 00 
  8004205abe:	48 8b 00             	mov    (%rax),%rax
  8004205ac1:	48 39 c2             	cmp    %rax,%rdx
  8004205ac4:	72 32                	jb     8004205af8 <check_va2pa+0x166>
  8004205ac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aca:	48 89 c1             	mov    %rax,%rcx
  8004205acd:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004205ad4:	00 00 00 
  8004205ad7:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205adc:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205ae3:	00 00 00 
  8004205ae6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205aeb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205af2:	00 00 00 
  8004205af5:	41 ff d0             	callq  *%r8
  8004205af8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205aff:	00 00 00 
  8004205b02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205b06:	48 01 d0             	add    %rdx,%rax
  8004205b09:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205b0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205b11:	48 c1 e8 15          	shr    $0x15,%rax
  8004205b15:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205b1a:	48 c1 e0 03          	shl    $0x3,%rax
  8004205b1e:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  8004205b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b26:	48 8b 00             	mov    (%rax),%rax
  8004205b29:	83 e0 01             	and    $0x1,%eax
  8004205b2c:	48 85 c0             	test   %rax,%rax
  8004205b2f:	75 0c                	jne    8004205b3d <check_va2pa+0x1ab>
  8004205b31:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205b38:	e9 cd 00 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b41:	48 8b 00             	mov    (%rax),%rax
  8004205b44:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205b4a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b52:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205b56:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205b59:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205b5c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205b63:	00 00 00 
  8004205b66:	48 8b 00             	mov    (%rax),%rax
  8004205b69:	48 39 c2             	cmp    %rax,%rdx
  8004205b6c:	72 32                	jb     8004205ba0 <check_va2pa+0x20e>
  8004205b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b72:	48 89 c1             	mov    %rax,%rcx
  8004205b75:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004205b7c:	00 00 00 
  8004205b7f:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205b84:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205b8b:	00 00 00 
  8004205b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b93:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205b9a:	00 00 00 
  8004205b9d:	41 ff d0             	callq  *%r8
  8004205ba0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205ba7:	00 00 00 
  8004205baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205bae:	48 01 d0             	add    %rdx,%rax
  8004205bb1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205bb5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205bb9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bbd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bc2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bc9:	00 
  8004205bca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bce:	48 01 d0             	add    %rdx,%rax
  8004205bd1:	48 8b 00             	mov    (%rax),%rax
  8004205bd4:	83 e0 01             	and    $0x1,%eax
  8004205bd7:	48 85 c0             	test   %rax,%rax
  8004205bda:	75 09                	jne    8004205be5 <check_va2pa+0x253>
  8004205bdc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205be3:	eb 25                	jmp    8004205c0a <check_va2pa+0x278>
  8004205be5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205be9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bed:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bf2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bf9:	00 
  8004205bfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bfe:	48 01 d0             	add    %rdx,%rax
  8004205c01:	48 8b 00             	mov    (%rax),%rax
  8004205c04:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205c0a:	c9                   	leaveq 
  8004205c0b:	c3                   	retq   

0000008004205c0c <page_check>:
  8004205c0c:	55                   	push   %rbp
  8004205c0d:	48 89 e5             	mov    %rsp,%rbp
  8004205c10:	53                   	push   %rbx
  8004205c11:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205c18:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205c1f:	00 
  8004205c20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205c24:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205c2c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205c34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205c3c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205c40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205c44:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4d:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205c54:	00 00 00 
  8004205c57:	ff d0                	callq  *%rax
  8004205c59:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c5d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205c62:	75 35                	jne    8004205c99 <page_check+0x8d>
  8004205c64:	48 b9 0f 94 21 04 80 	movabs $0x800421940f,%rcx
  8004205c6b:	00 00 00 
  8004205c6e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205c75:	00 00 00 
  8004205c78:	be 02 05 00 00       	mov    $0x502,%esi
  8004205c7d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205c84:	00 00 00 
  8004205c87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205c93:	00 00 00 
  8004205c96:	41 ff d0             	callq  *%r8
  8004205c99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9e:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205ca5:	00 00 00 
  8004205ca8:	ff d0                	callq  *%rax
  8004205caa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205cae:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205cb3:	75 35                	jne    8004205cea <page_check+0xde>
  8004205cb5:	48 b9 23 94 21 04 80 	movabs $0x8004219423,%rcx
  8004205cbc:	00 00 00 
  8004205cbf:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205cc6:	00 00 00 
  8004205cc9:	be 03 05 00 00       	mov    $0x503,%esi
  8004205cce:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205cd5:	00 00 00 
  8004205cd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205ce4:	00 00 00 
  8004205ce7:	41 ff d0             	callq  *%r8
  8004205cea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205cef:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205cf6:	00 00 00 
  8004205cf9:	ff d0                	callq  *%rax
  8004205cfb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205cff:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d04:	75 35                	jne    8004205d3b <page_check+0x12f>
  8004205d06:	48 b9 37 94 21 04 80 	movabs $0x8004219437,%rcx
  8004205d0d:	00 00 00 
  8004205d10:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205d17:	00 00 00 
  8004205d1a:	be 04 05 00 00       	mov    $0x504,%esi
  8004205d1f:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205d26:	00 00 00 
  8004205d29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d2e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d35:	00 00 00 
  8004205d38:	41 ff d0             	callq  *%r8
  8004205d3b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d40:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d47:	00 00 00 
  8004205d4a:	ff d0                	callq  *%rax
  8004205d4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205d55:	75 35                	jne    8004205d8c <page_check+0x180>
  8004205d57:	48 b9 4b 94 21 04 80 	movabs $0x800421944b,%rcx
  8004205d5e:	00 00 00 
  8004205d61:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205d68:	00 00 00 
  8004205d6b:	be 05 05 00 00       	mov    $0x505,%esi
  8004205d70:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205d77:	00 00 00 
  8004205d7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d7f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d86:	00 00 00 
  8004205d89:	41 ff d0             	callq  *%r8
  8004205d8c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d91:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d98:	00 00 00 
  8004205d9b:	ff d0                	callq  *%rax
  8004205d9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205da1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205da6:	75 35                	jne    8004205ddd <page_check+0x1d1>
  8004205da8:	48 b9 5f 94 21 04 80 	movabs $0x800421945f,%rcx
  8004205daf:	00 00 00 
  8004205db2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205db9:	00 00 00 
  8004205dbc:	be 06 05 00 00       	mov    $0x506,%esi
  8004205dc1:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205dc8:	00 00 00 
  8004205dcb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dd0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205dd7:	00 00 00 
  8004205dda:	41 ff d0             	callq  *%r8
  8004205ddd:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205de2:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205de9:	00 00 00 
  8004205dec:	ff d0                	callq  *%rax
  8004205dee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205df2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205df7:	75 35                	jne    8004205e2e <page_check+0x222>
  8004205df9:	48 b9 73 94 21 04 80 	movabs $0x8004219473,%rcx
  8004205e00:	00 00 00 
  8004205e03:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205e0a:	00 00 00 
  8004205e0d:	be 07 05 00 00       	mov    $0x507,%esi
  8004205e12:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205e19:	00 00 00 
  8004205e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e21:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e28:	00 00 00 
  8004205e2b:	41 ff d0             	callq  *%r8
  8004205e2e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205e33:	75 35                	jne    8004205e6a <page_check+0x25e>
  8004205e35:	48 b9 c1 91 21 04 80 	movabs $0x80042191c1,%rcx
  8004205e3c:	00 00 00 
  8004205e3f:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205e46:	00 00 00 
  8004205e49:	be 09 05 00 00       	mov    $0x509,%esi
  8004205e4e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205e55:	00 00 00 
  8004205e58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e64:	00 00 00 
  8004205e67:	41 ff d0             	callq  *%r8
  8004205e6a:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205e6f:	74 0a                	je     8004205e7b <page_check+0x26f>
  8004205e71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205e75:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e79:	75 35                	jne    8004205eb0 <page_check+0x2a4>
  8004205e7b:	48 b9 c5 91 21 04 80 	movabs $0x80042191c5,%rcx
  8004205e82:	00 00 00 
  8004205e85:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205e8c:	00 00 00 
  8004205e8f:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205e94:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205e9b:	00 00 00 
  8004205e9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ea3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205eaa:	00 00 00 
  8004205ead:	41 ff d0             	callq  *%r8
  8004205eb0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205eb5:	74 14                	je     8004205ecb <page_check+0x2bf>
  8004205eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ebb:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ebf:	74 0a                	je     8004205ecb <page_check+0x2bf>
  8004205ec1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ec5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ec9:	75 35                	jne    8004205f00 <page_check+0x2f4>
  8004205ecb:	48 b9 d8 91 21 04 80 	movabs $0x80042191d8,%rcx
  8004205ed2:	00 00 00 
  8004205ed5:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205edc:	00 00 00 
  8004205edf:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205ee4:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205eeb:	00 00 00 
  8004205eee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ef3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205efa:	00 00 00 
  8004205efd:	41 ff d0             	callq  *%r8
  8004205f00:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205f05:	74 1e                	je     8004205f25 <page_check+0x319>
  8004205f07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f0b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f0f:	74 14                	je     8004205f25 <page_check+0x319>
  8004205f11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f15:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f19:	74 0a                	je     8004205f25 <page_check+0x319>
  8004205f1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f1f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f23:	75 35                	jne    8004205f5a <page_check+0x34e>
  8004205f25:	48 b9 88 94 21 04 80 	movabs $0x8004219488,%rcx
  8004205f2c:	00 00 00 
  8004205f2f:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205f36:	00 00 00 
  8004205f39:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205f3e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205f45:	00 00 00 
  8004205f48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f4d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205f54:	00 00 00 
  8004205f57:	41 ff d0             	callq  *%r8
  8004205f5a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205f5f:	74 28                	je     8004205f89 <page_check+0x37d>
  8004205f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f65:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205f69:	74 1e                	je     8004205f89 <page_check+0x37d>
  8004205f6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f6f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f73:	74 14                	je     8004205f89 <page_check+0x37d>
  8004205f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f79:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f7d:	74 0a                	je     8004205f89 <page_check+0x37d>
  8004205f7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f83:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f87:	75 35                	jne    8004205fbe <page_check+0x3b2>
  8004205f89:	48 b9 b8 94 21 04 80 	movabs $0x80042194b8,%rcx
  8004205f90:	00 00 00 
  8004205f93:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004205f9a:	00 00 00 
  8004205f9d:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205fa2:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004205fa9:	00 00 00 
  8004205fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205fb8:	00 00 00 
  8004205fbb:	41 ff d0             	callq  *%r8
  8004205fbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205fc3:	74 32                	je     8004205ff7 <page_check+0x3eb>
  8004205fc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fc9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205fcd:	74 28                	je     8004205ff7 <page_check+0x3eb>
  8004205fcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fd3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205fd7:	74 1e                	je     8004205ff7 <page_check+0x3eb>
  8004205fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fdd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205fe1:	74 14                	je     8004205ff7 <page_check+0x3eb>
  8004205fe3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fe7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205feb:	74 0a                	je     8004205ff7 <page_check+0x3eb>
  8004205fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ff1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ff5:	75 35                	jne    800420602c <page_check+0x420>
  8004205ff7:	48 b9 f8 94 21 04 80 	movabs $0x80042194f8,%rcx
  8004205ffe:	00 00 00 
  8004206001:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206008:	00 00 00 
  800420600b:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004206010:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206017:	00 00 00 
  800420601a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420601f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206026:	00 00 00 
  8004206029:	41 ff d0             	callq  *%r8
  800420602c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420603d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206044:	00 00 00 
  8004206047:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420604e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206053:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420605a:	00 00 00 
  800420605d:	ff d0                	callq  *%rax
  800420605f:	48 85 c0             	test   %rax,%rax
  8004206062:	74 35                	je     8004206099 <page_check+0x48d>
  8004206064:	48 b9 4f 92 21 04 80 	movabs $0x800421924f,%rcx
  800420606b:	00 00 00 
  800420606e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206075:	00 00 00 
  8004206078:	be 15 05 00 00       	mov    $0x515,%esi
  800420607d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206084:	00 00 00 
  8004206087:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206093:	00 00 00 
  8004206096:	41 ff d0             	callq  *%r8
  8004206099:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042060a0:	00 00 00 
  80042060a3:	48 8b 00             	mov    (%rax),%rax
  80042060a6:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  80042060ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 85 c0             	test   %rax,%rax
  80042060c4:	74 35                	je     80042060fb <page_check+0x4ef>
  80042060c6:	48 b9 48 95 21 04 80 	movabs $0x8004219548,%rcx
  80042060cd:	00 00 00 
  80042060d0:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042060d7:	00 00 00 
  80042060da:	be 18 05 00 00       	mov    $0x518,%esi
  80042060df:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042060e6:	00 00 00 
  80042060e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060ee:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042060f5:	00 00 00 
  80042060f8:	41 ff d0             	callq  *%r8
  80042060fb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206102:	00 00 00 
  8004206105:	48 8b 00             	mov    (%rax),%rax
  8004206108:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420610c:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206111:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206116:	48 89 c7             	mov    %rax,%rdi
  8004206119:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206120:	00 00 00 
  8004206123:	ff d0                	callq  *%rax
  8004206125:	85 c0                	test   %eax,%eax
  8004206127:	78 35                	js     800420615e <page_check+0x552>
  8004206129:	48 b9 80 95 21 04 80 	movabs $0x8004219580,%rcx
  8004206130:	00 00 00 
  8004206133:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420613a:	00 00 00 
  800420613d:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004206142:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206149:	00 00 00 
  800420614c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206151:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206158:	00 00 00 
  800420615b:	41 ff d0             	callq  *%r8
  800420615e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206162:	48 89 c7             	mov    %rax,%rdi
  8004206165:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420616c:	00 00 00 
  800420616f:	ff d0                	callq  *%rax
  8004206171:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206178:	00 00 00 
  800420617b:	48 8b 00             	mov    (%rax),%rax
  800420617e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206182:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206187:	ba 00 00 00 00       	mov    $0x0,%edx
  800420618c:	48 89 c7             	mov    %rax,%rdi
  800420618f:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206196:	00 00 00 
  8004206199:	ff d0                	callq  *%rax
  800420619b:	85 c0                	test   %eax,%eax
  800420619d:	78 35                	js     80042061d4 <page_check+0x5c8>
  800420619f:	48 b9 80 95 21 04 80 	movabs $0x8004219580,%rcx
  80042061a6:	00 00 00 
  80042061a9:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042061b0:	00 00 00 
  80042061b3:	be 1f 05 00 00       	mov    $0x51f,%esi
  80042061b8:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042061bf:	00 00 00 
  80042061c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042061ce:	00 00 00 
  80042061d1:	41 ff d0             	callq  *%r8
  80042061d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042061d8:	48 89 c7             	mov    %rax,%rdi
  80042061db:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061e2:	00 00 00 
  80042061e5:	ff d0                	callq  *%rax
  80042061e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061eb:	48 89 c7             	mov    %rax,%rdi
  80042061ee:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061f5:	00 00 00 
  80042061f8:	ff d0                	callq  *%rax
  80042061fa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206201:	00 00 00 
  8004206204:	48 8b 00             	mov    (%rax),%rax
  8004206207:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420620b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206210:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206215:	48 89 c7             	mov    %rax,%rdi
  8004206218:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420621f:	00 00 00 
  8004206222:	ff d0                	callq  *%rax
  8004206224:	85 c0                	test   %eax,%eax
  8004206226:	74 35                	je     800420625d <page_check+0x651>
  8004206228:	48 b9 b0 95 21 04 80 	movabs $0x80042195b0,%rcx
  800420622f:	00 00 00 
  8004206232:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206239:	00 00 00 
  800420623c:	be 25 05 00 00       	mov    $0x525,%esi
  8004206241:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206248:	00 00 00 
  800420624b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206250:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206257:	00 00 00 
  800420625a:	41 ff d0             	callq  *%r8
  800420625d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206264:	00 00 00 
  8004206267:	48 8b 00             	mov    (%rax),%rax
  800420626a:	48 8b 00             	mov    (%rax),%rax
  800420626d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206273:	48 89 c3             	mov    %rax,%rbx
  8004206276:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420627a:	48 89 c7             	mov    %rax,%rdi
  800420627d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206284:	00 00 00 
  8004206287:	ff d0                	callq  *%rax
  8004206289:	48 39 c3             	cmp    %rax,%rbx
  800420628c:	0f 84 97 00 00 00    	je     8004206329 <page_check+0x71d>
  8004206292:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206299:	00 00 00 
  800420629c:	48 8b 00             	mov    (%rax),%rax
  800420629f:	48 8b 00             	mov    (%rax),%rax
  80042062a2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062a8:	48 89 c3             	mov    %rax,%rbx
  80042062ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062af:	48 89 c7             	mov    %rax,%rdi
  80042062b2:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062b9:	00 00 00 
  80042062bc:	ff d0                	callq  *%rax
  80042062be:	48 39 c3             	cmp    %rax,%rbx
  80042062c1:	74 66                	je     8004206329 <page_check+0x71d>
  80042062c3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042062ca:	00 00 00 
  80042062cd:	48 8b 00             	mov    (%rax),%rax
  80042062d0:	48 8b 00             	mov    (%rax),%rax
  80042062d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062d9:	48 89 c3             	mov    %rax,%rbx
  80042062dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042062e0:	48 89 c7             	mov    %rax,%rdi
  80042062e3:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062ea:	00 00 00 
  80042062ed:	ff d0                	callq  *%rax
  80042062ef:	48 39 c3             	cmp    %rax,%rbx
  80042062f2:	74 35                	je     8004206329 <page_check+0x71d>
  80042062f4:	48 b9 e0 95 21 04 80 	movabs $0x80042195e0,%rcx
  80042062fb:	00 00 00 
  80042062fe:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206305:	00 00 00 
  8004206308:	be 26 05 00 00       	mov    $0x526,%esi
  800420630d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206314:	00 00 00 
  8004206317:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206323:	00 00 00 
  8004206326:	41 ff d0             	callq  *%r8
  8004206329:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206330:	00 00 00 
  8004206333:	48 8b 00             	mov    (%rax),%rax
  8004206336:	be 00 00 00 00       	mov    $0x0,%esi
  800420633b:	48 89 c7             	mov    %rax,%rdi
  800420633e:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206345:	00 00 00 
  8004206348:	ff d0                	callq  *%rax
  800420634a:	48 89 c3             	mov    %rax,%rbx
  800420634d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206351:	48 89 c7             	mov    %rax,%rdi
  8004206354:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420635b:	00 00 00 
  800420635e:	ff d0                	callq  *%rax
  8004206360:	48 39 c3             	cmp    %rax,%rbx
  8004206363:	74 35                	je     800420639a <page_check+0x78e>
  8004206365:	48 b9 68 96 21 04 80 	movabs $0x8004219668,%rcx
  800420636c:	00 00 00 
  800420636f:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206376:	00 00 00 
  8004206379:	be 27 05 00 00       	mov    $0x527,%esi
  800420637e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206385:	00 00 00 
  8004206388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420638d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206394:	00 00 00 
  8004206397:	41 ff d0             	callq  *%r8
  800420639a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420639e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063a2:	66 83 f8 01          	cmp    $0x1,%ax
  80042063a6:	74 35                	je     80042063dd <page_check+0x7d1>
  80042063a8:	48 b9 95 96 21 04 80 	movabs $0x8004219695,%rcx
  80042063af:	00 00 00 
  80042063b2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042063b9:	00 00 00 
  80042063bc:	be 28 05 00 00       	mov    $0x528,%esi
  80042063c1:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042063c8:	00 00 00 
  80042063cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042063d7:	00 00 00 
  80042063da:	41 ff d0             	callq  *%r8
  80042063dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042063e1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063e5:	66 83 f8 01          	cmp    $0x1,%ax
  80042063e9:	74 35                	je     8004206420 <page_check+0x814>
  80042063eb:	48 b9 a6 96 21 04 80 	movabs $0x80042196a6,%rcx
  80042063f2:	00 00 00 
  80042063f5:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042063fc:	00 00 00 
  80042063ff:	be 29 05 00 00       	mov    $0x529,%esi
  8004206404:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420640b:	00 00 00 
  800420640e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206413:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420641a:	00 00 00 
  800420641d:	41 ff d0             	callq  *%r8
  8004206420:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206424:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206428:	66 83 f8 01          	cmp    $0x1,%ax
  800420642c:	74 35                	je     8004206463 <page_check+0x857>
  800420642e:	48 b9 b7 96 21 04 80 	movabs $0x80042196b7,%rcx
  8004206435:	00 00 00 
  8004206438:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420643f:	00 00 00 
  8004206442:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206447:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420644e:	00 00 00 
  8004206451:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206456:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420645d:	00 00 00 
  8004206460:	41 ff d0             	callq  *%r8
  8004206463:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420646a:	00 00 00 
  800420646d:	48 8b 00             	mov    (%rax),%rax
  8004206470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206474:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206479:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420647e:	48 89 c7             	mov    %rax,%rdi
  8004206481:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206488:	00 00 00 
  800420648b:	ff d0                	callq  *%rax
  800420648d:	85 c0                	test   %eax,%eax
  800420648f:	74 35                	je     80042064c6 <page_check+0x8ba>
  8004206491:	48 b9 c8 96 21 04 80 	movabs $0x80042196c8,%rcx
  8004206498:	00 00 00 
  800420649b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042064a2:	00 00 00 
  80042064a5:	be 2c 05 00 00       	mov    $0x52c,%esi
  80042064aa:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042064b1:	00 00 00 
  80042064b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042064c0:	00 00 00 
  80042064c3:	41 ff d0             	callq  *%r8
  80042064c6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042064cd:	00 00 00 
  80042064d0:	48 8b 00             	mov    (%rax),%rax
  80042064d3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064d8:	48 89 c7             	mov    %rax,%rdi
  80042064db:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042064e2:	00 00 00 
  80042064e5:	ff d0                	callq  *%rax
  80042064e7:	48 89 c3             	mov    %rax,%rbx
  80042064ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042064ee:	48 89 c7             	mov    %rax,%rdi
  80042064f1:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042064f8:	00 00 00 
  80042064fb:	ff d0                	callq  *%rax
  80042064fd:	48 39 c3             	cmp    %rax,%rbx
  8004206500:	74 35                	je     8004206537 <page_check+0x92b>
  8004206502:	48 b9 00 97 21 04 80 	movabs $0x8004219700,%rcx
  8004206509:	00 00 00 
  800420650c:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206513:	00 00 00 
  8004206516:	be 2d 05 00 00       	mov    $0x52d,%esi
  800420651b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206522:	00 00 00 
  8004206525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420652a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206531:	00 00 00 
  8004206534:	41 ff d0             	callq  *%r8
  8004206537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420653b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420653f:	66 83 f8 02          	cmp    $0x2,%ax
  8004206543:	74 35                	je     800420657a <page_check+0x96e>
  8004206545:	48 b9 30 97 21 04 80 	movabs $0x8004219730,%rcx
  800420654c:	00 00 00 
  800420654f:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206556:	00 00 00 
  8004206559:	be 2e 05 00 00       	mov    $0x52e,%esi
  800420655e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206565:	00 00 00 
  8004206568:	b8 00 00 00 00       	mov    $0x0,%eax
  800420656d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206574:	00 00 00 
  8004206577:	41 ff d0             	callq  *%r8
  800420657a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420657f:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004206586:	00 00 00 
  8004206589:	ff d0                	callq  *%rax
  800420658b:	48 85 c0             	test   %rax,%rax
  800420658e:	74 35                	je     80042065c5 <page_check+0x9b9>
  8004206590:	48 b9 4f 92 21 04 80 	movabs $0x800421924f,%rcx
  8004206597:	00 00 00 
  800420659a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042065a1:	00 00 00 
  80042065a4:	be 31 05 00 00       	mov    $0x531,%esi
  80042065a9:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042065b0:	00 00 00 
  80042065b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042065bf:	00 00 00 
  80042065c2:	41 ff d0             	callq  *%r8
  80042065c5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042065cc:	00 00 00 
  80042065cf:	48 8b 00             	mov    (%rax),%rax
  80042065d2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042065d6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042065db:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042065e0:	48 89 c7             	mov    %rax,%rdi
  80042065e3:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042065ea:	00 00 00 
  80042065ed:	ff d0                	callq  *%rax
  80042065ef:	85 c0                	test   %eax,%eax
  80042065f1:	74 35                	je     8004206628 <page_check+0xa1c>
  80042065f3:	48 b9 c8 96 21 04 80 	movabs $0x80042196c8,%rcx
  80042065fa:	00 00 00 
  80042065fd:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206604:	00 00 00 
  8004206607:	be 34 05 00 00       	mov    $0x534,%esi
  800420660c:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206613:	00 00 00 
  8004206616:	b8 00 00 00 00       	mov    $0x0,%eax
  800420661b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206622:	00 00 00 
  8004206625:	41 ff d0             	callq  *%r8
  8004206628:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420662f:	00 00 00 
  8004206632:	48 8b 00             	mov    (%rax),%rax
  8004206635:	be 00 10 00 00       	mov    $0x1000,%esi
  800420663a:	48 89 c7             	mov    %rax,%rdi
  800420663d:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206644:	00 00 00 
  8004206647:	ff d0                	callq  *%rax
  8004206649:	48 89 c3             	mov    %rax,%rbx
  800420664c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206650:	48 89 c7             	mov    %rax,%rdi
  8004206653:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420665a:	00 00 00 
  800420665d:	ff d0                	callq  *%rax
  800420665f:	48 39 c3             	cmp    %rax,%rbx
  8004206662:	74 35                	je     8004206699 <page_check+0xa8d>
  8004206664:	48 b9 00 97 21 04 80 	movabs $0x8004219700,%rcx
  800420666b:	00 00 00 
  800420666e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206675:	00 00 00 
  8004206678:	be 35 05 00 00       	mov    $0x535,%esi
  800420667d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206684:	00 00 00 
  8004206687:	b8 00 00 00 00       	mov    $0x0,%eax
  800420668c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206693:	00 00 00 
  8004206696:	41 ff d0             	callq  *%r8
  8004206699:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420669d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042066a1:	66 83 f8 02          	cmp    $0x2,%ax
  80042066a5:	74 35                	je     80042066dc <page_check+0xad0>
  80042066a7:	48 b9 30 97 21 04 80 	movabs $0x8004219730,%rcx
  80042066ae:	00 00 00 
  80042066b1:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042066b8:	00 00 00 
  80042066bb:	be 36 05 00 00       	mov    $0x536,%esi
  80042066c0:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042066c7:	00 00 00 
  80042066ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066cf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042066d6:	00 00 00 
  80042066d9:	41 ff d0             	callq  *%r8
  80042066dc:	bf 00 00 00 00       	mov    $0x0,%edi
  80042066e1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042066e8:	00 00 00 
  80042066eb:	ff d0                	callq  *%rax
  80042066ed:	48 85 c0             	test   %rax,%rax
  80042066f0:	74 35                	je     8004206727 <page_check+0xb1b>
  80042066f2:	48 b9 4f 92 21 04 80 	movabs $0x800421924f,%rcx
  80042066f9:	00 00 00 
  80042066fc:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206703:	00 00 00 
  8004206706:	be 3a 05 00 00       	mov    $0x53a,%esi
  800420670b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206712:	00 00 00 
  8004206715:	b8 00 00 00 00       	mov    $0x0,%eax
  800420671a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206721:	00 00 00 
  8004206724:	41 ff d0             	callq  *%r8
  8004206727:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420672e:	00 00 00 
  8004206731:	48 8b 00             	mov    (%rax),%rax
  8004206734:	48 8b 00             	mov    (%rax),%rax
  8004206737:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420673d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206741:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206745:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206749:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800420674c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420674f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206756:	00 00 00 
  8004206759:	48 8b 00             	mov    (%rax),%rax
  800420675c:	48 39 c2             	cmp    %rax,%rdx
  800420675f:	72 32                	jb     8004206793 <page_check+0xb87>
  8004206761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206765:	48 89 c1             	mov    %rax,%rcx
  8004206768:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420676f:	00 00 00 
  8004206772:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206777:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420677e:	00 00 00 
  8004206781:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206786:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420678d:	00 00 00 
  8004206790:	41 ff d0             	callq  *%r8
  8004206793:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420679a:	00 00 00 
  800420679d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042067a1:	48 01 d0             	add    %rdx,%rax
  80042067a4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042067a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042067ac:	48 8b 00             	mov    (%rax),%rax
  80042067af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042067b5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042067b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042067c1:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042067c4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042067c7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042067ce:	00 00 00 
  80042067d1:	48 8b 00             	mov    (%rax),%rax
  80042067d4:	48 39 c2             	cmp    %rax,%rdx
  80042067d7:	72 32                	jb     800420680b <page_check+0xbff>
  80042067d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067dd:	48 89 c1             	mov    %rax,%rcx
  80042067e0:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042067e7:	00 00 00 
  80042067ea:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042067ef:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042067f6:	00 00 00 
  80042067f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067fe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206805:	00 00 00 
  8004206808:	41 ff d0             	callq  *%r8
  800420680b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206812:	00 00 00 
  8004206815:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206819:	48 01 d0             	add    %rdx,%rax
  800420681c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004206820:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206824:	48 8b 00             	mov    (%rax),%rax
  8004206827:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420682d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004206834:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420683b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420683f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206845:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  800420684b:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206852:	00 00 00 
  8004206855:	48 8b 00             	mov    (%rax),%rax
  8004206858:	48 39 c2             	cmp    %rax,%rdx
  800420685b:	72 35                	jb     8004206892 <page_check+0xc86>
  800420685d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206864:	48 89 c1             	mov    %rax,%rcx
  8004206867:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420686e:	00 00 00 
  8004206871:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206876:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420687d:	00 00 00 
  8004206880:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206885:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420688c:	00 00 00 
  800420688f:	41 ff d0             	callq  *%r8
  8004206892:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206899:	00 00 00 
  800420689c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042068a3:	48 01 d0             	add    %rdx,%rax
  80042068a6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042068ad:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042068b4:	00 00 00 
  80042068b7:	48 8b 00             	mov    (%rax),%rax
  80042068ba:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068bf:	be 00 10 00 00       	mov    $0x1000,%esi
  80042068c4:	48 89 c7             	mov    %rax,%rdi
  80042068c7:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042068ce:	00 00 00 
  80042068d1:	ff d0                	callq  *%rax
  80042068d3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042068da:	48 83 c2 08          	add    $0x8,%rdx
  80042068de:	48 39 d0             	cmp    %rdx,%rax
  80042068e1:	74 35                	je     8004206918 <page_check+0xd0c>
  80042068e3:	48 b9 48 97 21 04 80 	movabs $0x8004219748,%rcx
  80042068ea:	00 00 00 
  80042068ed:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042068f4:	00 00 00 
  80042068f7:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042068fc:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206903:	00 00 00 
  8004206906:	b8 00 00 00 00       	mov    $0x0,%eax
  800420690b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206912:	00 00 00 
  8004206915:	41 ff d0             	callq  *%r8
  8004206918:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420691f:	00 00 00 
  8004206922:	48 8b 00             	mov    (%rax),%rax
  8004206925:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206929:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420692e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206933:	48 89 c7             	mov    %rax,%rdi
  8004206936:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420693d:	00 00 00 
  8004206940:	ff d0                	callq  *%rax
  8004206942:	85 c0                	test   %eax,%eax
  8004206944:	74 35                	je     800420697b <page_check+0xd6f>
  8004206946:	48 b9 88 97 21 04 80 	movabs $0x8004219788,%rcx
  800420694d:	00 00 00 
  8004206950:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206957:	00 00 00 
  800420695a:	be 42 05 00 00       	mov    $0x542,%esi
  800420695f:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206966:	00 00 00 
  8004206969:	b8 00 00 00 00       	mov    $0x0,%eax
  800420696e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206975:	00 00 00 
  8004206978:	41 ff d0             	callq  *%r8
  800420697b:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206982:	00 00 00 
  8004206985:	48 8b 00             	mov    (%rax),%rax
  8004206988:	be 00 10 00 00       	mov    $0x1000,%esi
  800420698d:	48 89 c7             	mov    %rax,%rdi
  8004206990:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206997:	00 00 00 
  800420699a:	ff d0                	callq  *%rax
  800420699c:	48 89 c3             	mov    %rax,%rbx
  800420699f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069a3:	48 89 c7             	mov    %rax,%rdi
  80042069a6:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042069ad:	00 00 00 
  80042069b0:	ff d0                	callq  *%rax
  80042069b2:	48 39 c3             	cmp    %rax,%rbx
  80042069b5:	74 35                	je     80042069ec <page_check+0xde0>
  80042069b7:	48 b9 00 97 21 04 80 	movabs $0x8004219700,%rcx
  80042069be:	00 00 00 
  80042069c1:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042069c8:	00 00 00 
  80042069cb:	be 43 05 00 00       	mov    $0x543,%esi
  80042069d0:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042069d7:	00 00 00 
  80042069da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069df:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042069e6:	00 00 00 
  80042069e9:	41 ff d0             	callq  *%r8
  80042069ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069f0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042069f4:	66 83 f8 02          	cmp    $0x2,%ax
  80042069f8:	74 35                	je     8004206a2f <page_check+0xe23>
  80042069fa:	48 b9 30 97 21 04 80 	movabs $0x8004219730,%rcx
  8004206a01:	00 00 00 
  8004206a04:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206a0b:	00 00 00 
  8004206a0e:	be 44 05 00 00       	mov    $0x544,%esi
  8004206a13:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206a1a:	00 00 00 
  8004206a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a22:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a29:	00 00 00 
  8004206a2c:	41 ff d0             	callq  *%r8
  8004206a2f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a36:	00 00 00 
  8004206a39:	48 8b 00             	mov    (%rax),%rax
  8004206a3c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a41:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a46:	48 89 c7             	mov    %rax,%rdi
  8004206a49:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206a50:	00 00 00 
  8004206a53:	ff d0                	callq  *%rax
  8004206a55:	48 8b 00             	mov    (%rax),%rax
  8004206a58:	83 e0 04             	and    $0x4,%eax
  8004206a5b:	48 85 c0             	test   %rax,%rax
  8004206a5e:	75 35                	jne    8004206a95 <page_check+0xe89>
  8004206a60:	48 b9 c8 97 21 04 80 	movabs $0x80042197c8,%rcx
  8004206a67:	00 00 00 
  8004206a6a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206a71:	00 00 00 
  8004206a74:	be 45 05 00 00       	mov    $0x545,%esi
  8004206a79:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206a80:	00 00 00 
  8004206a83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a88:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a8f:	00 00 00 
  8004206a92:	41 ff d0             	callq  *%r8
  8004206a95:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a9c:	00 00 00 
  8004206a9f:	48 8b 00             	mov    (%rax),%rax
  8004206aa2:	48 8b 00             	mov    (%rax),%rax
  8004206aa5:	83 e0 04             	and    $0x4,%eax
  8004206aa8:	48 85 c0             	test   %rax,%rax
  8004206aab:	75 35                	jne    8004206ae2 <page_check+0xed6>
  8004206aad:	48 b9 fb 97 21 04 80 	movabs $0x80042197fb,%rcx
  8004206ab4:	00 00 00 
  8004206ab7:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206abe:	00 00 00 
  8004206ac1:	be 46 05 00 00       	mov    $0x546,%esi
  8004206ac6:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206acd:	00 00 00 
  8004206ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ad5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206adc:	00 00 00 
  8004206adf:	41 ff d0             	callq  *%r8
  8004206ae2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ae9:	00 00 00 
  8004206aec:	48 8b 00             	mov    (%rax),%rax
  8004206aef:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004206af3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206af8:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	85 c0                	test   %eax,%eax
  8004206b0e:	78 35                	js     8004206b45 <page_check+0xf39>
  8004206b10:	48 b9 18 98 21 04 80 	movabs $0x8004219818,%rcx
  8004206b17:	00 00 00 
  8004206b1a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206b21:	00 00 00 
  8004206b24:	be 4a 05 00 00       	mov    $0x54a,%esi
  8004206b29:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206b30:	00 00 00 
  8004206b33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b38:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206b3f:	00 00 00 
  8004206b42:	41 ff d0             	callq  *%r8
  8004206b45:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206b4c:	00 00 00 
  8004206b4f:	48 8b 00             	mov    (%rax),%rax
  8004206b52:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206b56:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b5b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206b60:	48 89 c7             	mov    %rax,%rdi
  8004206b63:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b6a:	00 00 00 
  8004206b6d:	ff d0                	callq  *%rax
  8004206b6f:	85 c0                	test   %eax,%eax
  8004206b71:	74 35                	je     8004206ba8 <page_check+0xf9c>
  8004206b73:	48 b9 50 98 21 04 80 	movabs $0x8004219850,%rcx
  8004206b7a:	00 00 00 
  8004206b7d:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206b84:	00 00 00 
  8004206b87:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206b8c:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206b93:	00 00 00 
  8004206b96:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ba2:	00 00 00 
  8004206ba5:	41 ff d0             	callq  *%r8
  8004206ba8:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206baf:	00 00 00 
  8004206bb2:	48 8b 00             	mov    (%rax),%rax
  8004206bb5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206bba:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206bbf:	48 89 c7             	mov    %rax,%rdi
  8004206bc2:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206bc9:	00 00 00 
  8004206bcc:	ff d0                	callq  *%rax
  8004206bce:	48 8b 00             	mov    (%rax),%rax
  8004206bd1:	83 e0 04             	and    $0x4,%eax
  8004206bd4:	48 85 c0             	test   %rax,%rax
  8004206bd7:	74 35                	je     8004206c0e <page_check+0x1002>
  8004206bd9:	48 b9 88 98 21 04 80 	movabs $0x8004219888,%rcx
  8004206be0:	00 00 00 
  8004206be3:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206bea:	00 00 00 
  8004206bed:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206bf2:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206bf9:	00 00 00 
  8004206bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c01:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c08:	00 00 00 
  8004206c0b:	41 ff d0             	callq  *%r8
  8004206c0e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c15:	00 00 00 
  8004206c18:	48 8b 00             	mov    (%rax),%rax
  8004206c1b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c20:	48 89 c7             	mov    %rax,%rdi
  8004206c23:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c2a:	00 00 00 
  8004206c2d:	ff d0                	callq  *%rax
  8004206c2f:	48 89 c3             	mov    %rax,%rbx
  8004206c32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206c36:	48 89 c7             	mov    %rax,%rdi
  8004206c39:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206c40:	00 00 00 
  8004206c43:	ff d0                	callq  *%rax
  8004206c45:	48 39 c3             	cmp    %rax,%rbx
  8004206c48:	74 35                	je     8004206c7f <page_check+0x1073>
  8004206c4a:	48 b9 c0 98 21 04 80 	movabs $0x80042198c0,%rcx
  8004206c51:	00 00 00 
  8004206c54:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206c5b:	00 00 00 
  8004206c5e:	be 51 05 00 00       	mov    $0x551,%esi
  8004206c63:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206c6a:	00 00 00 
  8004206c6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c79:	00 00 00 
  8004206c7c:	41 ff d0             	callq  *%r8
  8004206c7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c86:	00 00 00 
  8004206c89:	48 8b 00             	mov    (%rax),%rax
  8004206c8c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206c91:	48 89 c7             	mov    %rax,%rdi
  8004206c94:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c9b:	00 00 00 
  8004206c9e:	ff d0                	callq  *%rax
  8004206ca0:	48 89 c3             	mov    %rax,%rbx
  8004206ca3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ca7:	48 89 c7             	mov    %rax,%rdi
  8004206caa:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206cb1:	00 00 00 
  8004206cb4:	ff d0                	callq  *%rax
  8004206cb6:	48 39 c3             	cmp    %rax,%rbx
  8004206cb9:	74 35                	je     8004206cf0 <page_check+0x10e4>
  8004206cbb:	48 b9 f0 98 21 04 80 	movabs $0x80042198f0,%rcx
  8004206cc2:	00 00 00 
  8004206cc5:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206ccc:	00 00 00 
  8004206ccf:	be 52 05 00 00       	mov    $0x552,%esi
  8004206cd4:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206cdb:	00 00 00 
  8004206cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ce3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206cea:	00 00 00 
  8004206ced:	41 ff d0             	callq  *%r8
  8004206cf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cf4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206cf8:	66 83 f8 02          	cmp    $0x2,%ax
  8004206cfc:	74 35                	je     8004206d33 <page_check+0x1127>
  8004206cfe:	48 b9 20 99 21 04 80 	movabs $0x8004219920,%rcx
  8004206d05:	00 00 00 
  8004206d08:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206d0f:	00 00 00 
  8004206d12:	be 54 05 00 00       	mov    $0x554,%esi
  8004206d17:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206d1e:	00 00 00 
  8004206d21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d26:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d2d:	00 00 00 
  8004206d30:	41 ff d0             	callq  *%r8
  8004206d33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d37:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d3b:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d3f:	74 35                	je     8004206d76 <page_check+0x116a>
  8004206d41:	48 b9 31 99 21 04 80 	movabs $0x8004219931,%rcx
  8004206d48:	00 00 00 
  8004206d4b:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206d52:	00 00 00 
  8004206d55:	be 55 05 00 00       	mov    $0x555,%esi
  8004206d5a:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206d61:	00 00 00 
  8004206d64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d70:	00 00 00 
  8004206d73:	41 ff d0             	callq  *%r8
  8004206d76:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d7d:	00 00 00 
  8004206d80:	48 8b 00             	mov    (%rax),%rax
  8004206d83:	be 00 00 00 00       	mov    $0x0,%esi
  8004206d88:	48 89 c7             	mov    %rax,%rdi
  8004206d8b:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206d92:	00 00 00 
  8004206d95:	ff d0                	callq  *%rax
  8004206d97:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d9e:	00 00 00 
  8004206da1:	48 8b 00             	mov    (%rax),%rax
  8004206da4:	be 00 00 00 00       	mov    $0x0,%esi
  8004206da9:	48 89 c7             	mov    %rax,%rdi
  8004206dac:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206db3:	00 00 00 
  8004206db6:	ff d0                	callq  *%rax
  8004206db8:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206dbc:	74 35                	je     8004206df3 <page_check+0x11e7>
  8004206dbe:	48 b9 48 99 21 04 80 	movabs $0x8004219948,%rcx
  8004206dc5:	00 00 00 
  8004206dc8:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206dcf:	00 00 00 
  8004206dd2:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206dd7:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206dde:	00 00 00 
  8004206de1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206de6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ded:	00 00 00 
  8004206df0:	41 ff d0             	callq  *%r8
  8004206df3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206dfa:	00 00 00 
  8004206dfd:	48 8b 00             	mov    (%rax),%rax
  8004206e00:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e05:	48 89 c7             	mov    %rax,%rdi
  8004206e08:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206e0f:	00 00 00 
  8004206e12:	ff d0                	callq  *%rax
  8004206e14:	48 89 c3             	mov    %rax,%rbx
  8004206e17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e1b:	48 89 c7             	mov    %rax,%rdi
  8004206e1e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206e25:	00 00 00 
  8004206e28:	ff d0                	callq  *%rax
  8004206e2a:	48 39 c3             	cmp    %rax,%rbx
  8004206e2d:	74 35                	je     8004206e64 <page_check+0x1258>
  8004206e2f:	48 b9 f0 98 21 04 80 	movabs $0x80042198f0,%rcx
  8004206e36:	00 00 00 
  8004206e39:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206e40:	00 00 00 
  8004206e43:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206e48:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206e4f:	00 00 00 
  8004206e52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e57:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206e5e:	00 00 00 
  8004206e61:	41 ff d0             	callq  *%r8
  8004206e64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e6c:	66 83 f8 01          	cmp    $0x1,%ax
  8004206e70:	74 35                	je     8004206ea7 <page_check+0x129b>
  8004206e72:	48 b9 95 96 21 04 80 	movabs $0x8004219695,%rcx
  8004206e79:	00 00 00 
  8004206e7c:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206e83:	00 00 00 
  8004206e86:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206e8b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206e92:	00 00 00 
  8004206e95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e9a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ea1:	00 00 00 
  8004206ea4:	41 ff d0             	callq  *%r8
  8004206ea7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206eab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206eaf:	66 83 f8 01          	cmp    $0x1,%ax
  8004206eb3:	74 35                	je     8004206eea <page_check+0x12de>
  8004206eb5:	48 b9 31 99 21 04 80 	movabs $0x8004219931,%rcx
  8004206ebc:	00 00 00 
  8004206ebf:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206ec6:	00 00 00 
  8004206ec9:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206ece:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206ed5:	00 00 00 
  8004206ed8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206edd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ee4:	00 00 00 
  8004206ee7:	41 ff d0             	callq  *%r8
  8004206eea:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ef1:	00 00 00 
  8004206ef4:	48 8b 00             	mov    (%rax),%rax
  8004206ef7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206efb:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206f00:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206f05:	48 89 c7             	mov    %rax,%rdi
  8004206f08:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206f0f:	00 00 00 
  8004206f12:	ff d0                	callq  *%rax
  8004206f14:	85 c0                	test   %eax,%eax
  8004206f16:	74 35                	je     8004206f4d <page_check+0x1341>
  8004206f18:	48 b9 50 98 21 04 80 	movabs $0x8004219850,%rcx
  8004206f1f:	00 00 00 
  8004206f22:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206f29:	00 00 00 
  8004206f2c:	be 61 05 00 00       	mov    $0x561,%esi
  8004206f31:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206f38:	00 00 00 
  8004206f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f40:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f47:	00 00 00 
  8004206f4a:	41 ff d0             	callq  *%r8
  8004206f4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f51:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f55:	66 85 c0             	test   %ax,%ax
  8004206f58:	75 35                	jne    8004206f8f <page_check+0x1383>
  8004206f5a:	48 b9 6b 99 21 04 80 	movabs $0x800421996b,%rcx
  8004206f61:	00 00 00 
  8004206f64:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206f6b:	00 00 00 
  8004206f6e:	be 62 05 00 00       	mov    $0x562,%esi
  8004206f73:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206f7a:	00 00 00 
  8004206f7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f82:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f89:	00 00 00 
  8004206f8c:	41 ff d0             	callq  *%r8
  8004206f8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f93:	48 8b 00             	mov    (%rax),%rax
  8004206f96:	48 85 c0             	test   %rax,%rax
  8004206f99:	74 35                	je     8004206fd0 <page_check+0x13c4>
  8004206f9b:	48 b9 77 99 21 04 80 	movabs $0x8004219977,%rcx
  8004206fa2:	00 00 00 
  8004206fa5:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004206fac:	00 00 00 
  8004206faf:	be 63 05 00 00       	mov    $0x563,%esi
  8004206fb4:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004206fbb:	00 00 00 
  8004206fbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fc3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206fca:	00 00 00 
  8004206fcd:	41 ff d0             	callq  *%r8
  8004206fd0:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206fd7:	00 00 00 
  8004206fda:	48 8b 00             	mov    (%rax),%rax
  8004206fdd:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206fe2:	48 89 c7             	mov    %rax,%rdi
  8004206fe5:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206fec:	00 00 00 
  8004206fef:	ff d0                	callq  *%rax
  8004206ff1:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ff8:	00 00 00 
  8004206ffb:	48 8b 00             	mov    (%rax),%rax
  8004206ffe:	be 00 00 00 00       	mov    $0x0,%esi
  8004207003:	48 89 c7             	mov    %rax,%rdi
  8004207006:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  800420700d:	00 00 00 
  8004207010:	ff d0                	callq  *%rax
  8004207012:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207016:	74 35                	je     800420704d <page_check+0x1441>
  8004207018:	48 b9 48 99 21 04 80 	movabs $0x8004219948,%rcx
  800420701f:	00 00 00 
  8004207022:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207029:	00 00 00 
  800420702c:	be 67 05 00 00       	mov    $0x567,%esi
  8004207031:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207038:	00 00 00 
  800420703b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207040:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207047:	00 00 00 
  800420704a:	41 ff d0             	callq  *%r8
  800420704d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207054:	00 00 00 
  8004207057:	48 8b 00             	mov    (%rax),%rax
  800420705a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420705f:	48 89 c7             	mov    %rax,%rdi
  8004207062:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207069:	00 00 00 
  800420706c:	ff d0                	callq  *%rax
  800420706e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207072:	74 35                	je     80042070a9 <page_check+0x149d>
  8004207074:	48 b9 90 99 21 04 80 	movabs $0x8004219990,%rcx
  800420707b:	00 00 00 
  800420707e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207085:	00 00 00 
  8004207088:	be 68 05 00 00       	mov    $0x568,%esi
  800420708d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207094:	00 00 00 
  8004207097:	b8 00 00 00 00       	mov    $0x0,%eax
  800420709c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070a3:	00 00 00 
  80042070a6:	41 ff d0             	callq  *%r8
  80042070a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042070ad:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070b1:	66 85 c0             	test   %ax,%ax
  80042070b4:	74 35                	je     80042070eb <page_check+0x14df>
  80042070b6:	48 b9 b6 99 21 04 80 	movabs $0x80042199b6,%rcx
  80042070bd:	00 00 00 
  80042070c0:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042070c7:	00 00 00 
  80042070ca:	be 69 05 00 00       	mov    $0x569,%esi
  80042070cf:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042070d6:	00 00 00 
  80042070d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042070de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070e5:	00 00 00 
  80042070e8:	41 ff d0             	callq  *%r8
  80042070eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042070ef:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070f3:	66 83 f8 01          	cmp    $0x1,%ax
  80042070f7:	74 35                	je     800420712e <page_check+0x1522>
  80042070f9:	48 b9 31 99 21 04 80 	movabs $0x8004219931,%rcx
  8004207100:	00 00 00 
  8004207103:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420710a:	00 00 00 
  800420710d:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004207112:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207119:	00 00 00 
  800420711c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207121:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207128:	00 00 00 
  800420712b:	41 ff d0             	callq  *%r8
  800420712e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207135:	00 00 00 
  8004207138:	48 8b 00             	mov    (%rax),%rax
  800420713b:	48 8b 00             	mov    (%rax),%rax
  800420713e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207144:	48 89 c7             	mov    %rax,%rdi
  8004207147:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  800420714e:	00 00 00 
  8004207151:	ff d0                	callq  *%rax
  8004207153:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800420715a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207161:	00 00 00 
  8004207164:	48 8b 00             	mov    (%rax),%rax
  8004207167:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420716e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207172:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207176:	66 83 f8 01          	cmp    $0x1,%ax
  800420717a:	74 35                	je     80042071b1 <page_check+0x15a5>
  800420717c:	48 b9 31 99 21 04 80 	movabs $0x8004219931,%rcx
  8004207183:	00 00 00 
  8004207186:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420718d:	00 00 00 
  8004207190:	be 80 05 00 00       	mov    $0x580,%esi
  8004207195:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420719c:	00 00 00 
  800420719f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042071ab:	00 00 00 
  80042071ae:	41 ff d0             	callq  *%r8
  80042071b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071b8:	48 89 c7             	mov    %rax,%rdi
  80042071bb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071c2:	00 00 00 
  80042071c5:	ff d0                	callq  *%rax
  80042071c7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042071d2:	74 13                	je     80042071e7 <page_check+0x15db>
  80042071d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042071d8:	48 89 c7             	mov    %rax,%rdi
  80042071db:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071e2:	00 00 00 
  80042071e5:	ff d0                	callq  *%rax
  80042071e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ee:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042071f2:	74 13                	je     8004207207 <page_check+0x15fb>
  80042071f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042071f8:	48 89 c7             	mov    %rax,%rdi
  80042071fb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207202:	00 00 00 
  8004207205:	ff d0                	callq  *%rax
  8004207207:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420720e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004207212:	74 13                	je     8004207227 <page_check+0x161b>
  8004207214:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207218:	48 89 c7             	mov    %rax,%rdi
  800420721b:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207222:	00 00 00 
  8004207225:	ff d0                	callq  *%rax
  8004207227:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  800420722e:	00 40 06 00 
  8004207232:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207239:	00 00 00 
  800420723c:	48 8b 00             	mov    (%rax),%rax
  800420723f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207246:	ba 01 00 00 00       	mov    $0x1,%edx
  800420724b:	48 89 ce             	mov    %rcx,%rsi
  800420724e:	48 89 c7             	mov    %rax,%rdi
  8004207251:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207258:	00 00 00 
  800420725b:	ff d0                	callq  *%rax
  800420725d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207264:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420726b:	00 00 00 
  800420726e:	48 8b 00             	mov    (%rax),%rax
  8004207271:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207278:	48 c1 ea 27          	shr    $0x27,%rdx
  800420727c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207282:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207286:	48 01 d0             	add    %rdx,%rax
  8004207289:	48 8b 00             	mov    (%rax),%rax
  800420728c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207292:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207299:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072a0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  80042072aa:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  80042072b0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042072b7:	00 00 00 
  80042072ba:	48 8b 00             	mov    (%rax),%rax
  80042072bd:	48 39 c2             	cmp    %rax,%rdx
  80042072c0:	72 35                	jb     80042072f7 <page_check+0x16eb>
  80042072c2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072c9:	48 89 c1             	mov    %rax,%rcx
  80042072cc:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042072d3:	00 00 00 
  80042072d6:	be 88 05 00 00       	mov    $0x588,%esi
  80042072db:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042072e2:	00 00 00 
  80042072e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042072f1:	00 00 00 
  80042072f4:	41 ff d0             	callq  *%r8
  80042072f7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042072fe:	00 00 00 
  8004207301:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207308:	48 01 d0             	add    %rdx,%rax
  800420730b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420730f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207316:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420731a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420731f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207326:	00 
  8004207327:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420732b:	48 01 d0             	add    %rdx,%rax
  800420732e:	48 8b 00             	mov    (%rax),%rax
  8004207331:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207337:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420733e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207345:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207349:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420734f:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207355:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420735c:	00 00 00 
  800420735f:	48 8b 00             	mov    (%rax),%rax
  8004207362:	48 39 c2             	cmp    %rax,%rdx
  8004207365:	72 35                	jb     800420739c <page_check+0x1790>
  8004207367:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420736e:	48 89 c1             	mov    %rax,%rcx
  8004207371:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004207378:	00 00 00 
  800420737b:	be 89 05 00 00       	mov    $0x589,%esi
  8004207380:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207387:	00 00 00 
  800420738a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420738f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207396:	00 00 00 
  8004207399:	41 ff d0             	callq  *%r8
  800420739c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042073a3:	00 00 00 
  80042073a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042073ad:	48 01 d0             	add    %rdx,%rax
  80042073b0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042073b4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042073bb:	48 c1 e8 15          	shr    $0x15,%rax
  80042073bf:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042073c4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042073cb:	00 
  80042073cc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042073d0:	48 01 d0             	add    %rdx,%rax
  80042073d3:	48 8b 00             	mov    (%rax),%rax
  80042073d6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073dc:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042073e3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042073ea:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042073f4:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042073fa:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207401:	00 00 00 
  8004207404:	48 8b 00             	mov    (%rax),%rax
  8004207407:	48 39 c2             	cmp    %rax,%rdx
  800420740a:	72 35                	jb     8004207441 <page_check+0x1835>
  800420740c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207413:	48 89 c1             	mov    %rax,%rcx
  8004207416:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420741d:	00 00 00 
  8004207420:	be 8a 05 00 00       	mov    $0x58a,%esi
  8004207425:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420742c:	00 00 00 
  800420742f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207434:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420743b:	00 00 00 
  800420743e:	41 ff d0             	callq  *%r8
  8004207441:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207448:	00 00 00 
  800420744b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207452:	48 01 d0             	add    %rdx,%rax
  8004207455:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800420745c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207463:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207467:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420746c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207473:	00 
  8004207474:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420747b:	48 01 c2             	add    %rax,%rdx
  800420747e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207485:	48 39 c2             	cmp    %rax,%rdx
  8004207488:	74 35                	je     80042074bf <page_check+0x18b3>
  800420748a:	48 b9 c7 99 21 04 80 	movabs $0x80042199c7,%rcx
  8004207491:	00 00 00 
  8004207494:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420749b:	00 00 00 
  800420749e:	be 8b 05 00 00       	mov    $0x58b,%esi
  80042074a3:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042074aa:	00 00 00 
  80042074ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074b2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042074b9:	00 00 00 
  80042074bc:	41 ff d0             	callq  *%r8
  80042074bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042074c3:	48 89 c7             	mov    %rax,%rdi
  80042074c6:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  80042074cd:	00 00 00 
  80042074d0:	ff d0                	callq  *%rax
  80042074d2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042074d7:	be ff 00 00 00       	mov    $0xff,%esi
  80042074dc:	48 89 c7             	mov    %rax,%rdi
  80042074df:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042074e6:	00 00 00 
  80042074e9:	ff d0                	callq  *%rax
  80042074eb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042074f2:	00 00 00 
  80042074f5:	48 8b 00             	mov    (%rax),%rax
  80042074f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042074fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004207502:	48 89 c7             	mov    %rax,%rdi
  8004207505:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  800420750c:	00 00 00 
  800420750f:	ff d0                	callq  *%rax
  8004207511:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207518:	00 00 00 
  800420751b:	48 8b 00             	mov    (%rax),%rax
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207527:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  800420752e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207535:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207539:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800420753f:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207545:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420754c:	00 00 00 
  800420754f:	48 8b 00             	mov    (%rax),%rax
  8004207552:	48 39 c2             	cmp    %rax,%rdx
  8004207555:	72 35                	jb     800420758c <page_check+0x1980>
  8004207557:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420755e:	48 89 c1             	mov    %rax,%rcx
  8004207561:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  8004207568:	00 00 00 
  800420756b:	be 90 05 00 00       	mov    $0x590,%esi
  8004207570:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207577:	00 00 00 
  800420757a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420757f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207586:	00 00 00 
  8004207589:	41 ff d0             	callq  *%r8
  800420758c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207593:	00 00 00 
  8004207596:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420759d:	48 01 d0             	add    %rdx,%rax
  80042075a0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042075a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042075a8:	48 8b 00             	mov    (%rax),%rax
  80042075ab:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042075b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042075b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075bf:	48 c1 e8 0c          	shr    $0xc,%rax
  80042075c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042075c9:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042075cf:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042075d6:	00 00 00 
  80042075d9:	48 8b 00             	mov    (%rax),%rax
  80042075dc:	48 39 c2             	cmp    %rax,%rdx
  80042075df:	72 35                	jb     8004207616 <page_check+0x1a0a>
  80042075e1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075e8:	48 89 c1             	mov    %rax,%rcx
  80042075eb:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  80042075f2:	00 00 00 
  80042075f5:	be 91 05 00 00       	mov    $0x591,%esi
  80042075fa:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207601:	00 00 00 
  8004207604:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207609:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207610:	00 00 00 
  8004207613:	41 ff d0             	callq  *%r8
  8004207616:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420761d:	00 00 00 
  8004207620:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207627:	48 01 d0             	add    %rdx,%rax
  800420762a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420762e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207632:	48 8b 00             	mov    (%rax),%rax
  8004207635:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420763b:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207642:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207649:	48 c1 e8 0c          	shr    $0xc,%rax
  800420764d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004207653:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207659:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207660:	00 00 00 
  8004207663:	48 8b 00             	mov    (%rax),%rax
  8004207666:	48 39 c2             	cmp    %rax,%rdx
  8004207669:	72 35                	jb     80042076a0 <page_check+0x1a94>
  800420766b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207672:	48 89 c1             	mov    %rax,%rcx
  8004207675:	48 ba 28 8d 21 04 80 	movabs $0x8004218d28,%rdx
  800420767c:	00 00 00 
  800420767f:	be 92 05 00 00       	mov    $0x592,%esi
  8004207684:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  800420768b:	00 00 00 
  800420768e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207693:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420769a:	00 00 00 
  800420769d:	41 ff d0             	callq  *%r8
  80042076a0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042076a7:	00 00 00 
  80042076aa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076b1:	48 01 d0             	add    %rdx,%rax
  80042076b4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042076bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042076c2:	eb 58                	jmp    800420771c <page_check+0x1b10>
  80042076c4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042076cb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042076ce:	48 63 d2             	movslq %edx,%rdx
  80042076d1:	48 c1 e2 03          	shl    $0x3,%rdx
  80042076d5:	48 01 d0             	add    %rdx,%rax
  80042076d8:	48 8b 00             	mov    (%rax),%rax
  80042076db:	83 e0 01             	and    $0x1,%eax
  80042076de:	48 85 c0             	test   %rax,%rax
  80042076e1:	74 35                	je     8004207718 <page_check+0x1b0c>
  80042076e3:	48 b9 df 99 21 04 80 	movabs $0x80042199df,%rcx
  80042076ea:	00 00 00 
  80042076ed:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042076f4:	00 00 00 
  80042076f7:	be 94 05 00 00       	mov    $0x594,%esi
  80042076fc:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207703:	00 00 00 
  8004207706:	b8 00 00 00 00       	mov    $0x0,%eax
  800420770b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207712:	00 00 00 
  8004207715:	41 ff d0             	callq  *%r8
  8004207718:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420771c:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004207723:	7e 9f                	jle    80042076c4 <page_check+0x1ab8>
  8004207725:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420772c:	00 00 00 
  800420772f:	48 8b 00             	mov    (%rax),%rax
  8004207732:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207739:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004207740:	00 00 00 
  8004207743:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207747:	48 89 10             	mov    %rdx,(%rax)
  800420774a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420774e:	48 89 c7             	mov    %rax,%rdi
  8004207751:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207758:	00 00 00 
  800420775b:	ff d0                	callq  *%rax
  800420775d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207761:	48 89 c7             	mov    %rax,%rdi
  8004207764:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420776b:	00 00 00 
  800420776e:	ff d0                	callq  *%rax
  8004207770:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207774:	48 89 c7             	mov    %rax,%rdi
  8004207777:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420777e:	00 00 00 
  8004207781:	ff d0                	callq  *%rax
  8004207783:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207787:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420778b:	66 85 c0             	test   %ax,%ax
  800420778e:	74 35                	je     80042077c5 <page_check+0x1bb9>
  8004207790:	48 b9 f6 99 21 04 80 	movabs $0x80042199f6,%rcx
  8004207797:	00 00 00 
  800420779a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042077a1:	00 00 00 
  80042077a4:	be a0 05 00 00       	mov    $0x5a0,%esi
  80042077a9:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042077b0:	00 00 00 
  80042077b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042077bf:	00 00 00 
  80042077c2:	41 ff d0             	callq  *%r8
  80042077c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042077c9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077cd:	66 85 c0             	test   %ax,%ax
  80042077d0:	74 35                	je     8004207807 <page_check+0x1bfb>
  80042077d2:	48 b9 b6 99 21 04 80 	movabs $0x80042199b6,%rcx
  80042077d9:	00 00 00 
  80042077dc:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042077e3:	00 00 00 
  80042077e6:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042077eb:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042077f2:	00 00 00 
  80042077f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077fa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207801:	00 00 00 
  8004207804:	41 ff d0             	callq  *%r8
  8004207807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420780b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420780f:	66 85 c0             	test   %ax,%ax
  8004207812:	74 35                	je     8004207849 <page_check+0x1c3d>
  8004207814:	48 b9 07 9a 21 04 80 	movabs $0x8004219a07,%rcx
  800420781b:	00 00 00 
  800420781e:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207825:	00 00 00 
  8004207828:	be a2 05 00 00       	mov    $0x5a2,%esi
  800420782d:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207834:	00 00 00 
  8004207837:	b8 00 00 00 00       	mov    $0x0,%eax
  800420783c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207843:	00 00 00 
  8004207846:	41 ff d0             	callq  *%r8
  8004207849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420784d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207851:	66 85 c0             	test   %ax,%ax
  8004207854:	74 35                	je     800420788b <page_check+0x1c7f>
  8004207856:	48 b9 18 9a 21 04 80 	movabs $0x8004219a18,%rcx
  800420785d:	00 00 00 
  8004207860:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207867:	00 00 00 
  800420786a:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420786f:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207876:	00 00 00 
  8004207879:	b8 00 00 00 00       	mov    $0x0,%eax
  800420787e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207885:	00 00 00 
  8004207888:	41 ff d0             	callq  *%r8
  800420788b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420788f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207893:	66 85 c0             	test   %ax,%ax
  8004207896:	74 35                	je     80042078cd <page_check+0x1cc1>
  8004207898:	48 b9 29 9a 21 04 80 	movabs $0x8004219a29,%rcx
  800420789f:	00 00 00 
  80042078a2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042078a9:	00 00 00 
  80042078ac:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042078b1:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042078b8:	00 00 00 
  80042078bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042078c7:	00 00 00 
  80042078ca:	41 ff d0             	callq  *%r8
  80042078cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042078d1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042078d5:	66 85 c0             	test   %ax,%ax
  80042078d8:	74 35                	je     800420790f <page_check+0x1d03>
  80042078da:	48 b9 3a 9a 21 04 80 	movabs $0x8004219a3a,%rcx
  80042078e1:	00 00 00 
  80042078e4:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042078eb:	00 00 00 
  80042078ee:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042078f3:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042078fa:	00 00 00 
  80042078fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207902:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207909:	00 00 00 
  800420790c:	41 ff d0             	callq  *%r8
  800420790f:	be 01 10 00 00       	mov    $0x1001,%esi
  8004207914:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207919:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004207920:	00 00 00 
  8004207923:	ff d0                	callq  *%rax
  8004207925:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  800420792c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207931:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207936:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800420793d:	00 00 00 
  8004207940:	ff d0                	callq  *%rax
  8004207942:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207949:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207950:	00 00 00 
  8004207953:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  800420795a:	76 1d                	jbe    8004207979 <page_check+0x1d6d>
  800420795c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207963:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420796a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207971:	00 00 00 
  8004207974:	48 39 c2             	cmp    %rax,%rdx
  8004207977:	76 35                	jbe    80042079ae <page_check+0x1da2>
  8004207979:	48 b9 50 9a 21 04 80 	movabs $0x8004219a50,%rcx
  8004207980:	00 00 00 
  8004207983:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  800420798a:	00 00 00 
  800420798d:	be ac 05 00 00       	mov    $0x5ac,%esi
  8004207992:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207999:	00 00 00 
  800420799c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079a1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042079a8:	00 00 00 
  80042079ab:	41 ff d0             	callq  *%r8
  80042079ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042079b5:	00 00 00 
  80042079b8:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  80042079bf:	76 1d                	jbe    80042079de <page_check+0x1dd2>
  80042079c1:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042079c8:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  80042079cf:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  80042079d6:	00 00 00 
  80042079d9:	48 39 c2             	cmp    %rax,%rdx
  80042079dc:	76 35                	jbe    8004207a13 <page_check+0x1e07>
  80042079de:	48 b9 78 9a 21 04 80 	movabs $0x8004219a78,%rcx
  80042079e5:	00 00 00 
  80042079e8:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  80042079ef:	00 00 00 
  80042079f2:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042079f7:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  80042079fe:	00 00 00 
  8004207a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a0d:	00 00 00 
  8004207a10:	41 ff d0             	callq  *%r8
  8004207a13:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a1a:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a1f:	48 85 c0             	test   %rax,%rax
  8004207a22:	75 11                	jne    8004207a35 <page_check+0x1e29>
  8004207a24:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207a2b:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a30:	48 85 c0             	test   %rax,%rax
  8004207a33:	74 35                	je     8004207a6a <page_check+0x1e5e>
  8004207a35:	48 b9 a0 9a 21 04 80 	movabs $0x8004219aa0,%rcx
  8004207a3c:	00 00 00 
  8004207a3f:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207a46:	00 00 00 
  8004207a49:	be af 05 00 00       	mov    $0x5af,%esi
  8004207a4e:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207a55:	00 00 00 
  8004207a58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a64:	00 00 00 
  8004207a67:	41 ff d0             	callq  *%r8
  8004207a6a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a71:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207a77:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207a7e:	76 35                	jbe    8004207ab5 <page_check+0x1ea9>
  8004207a80:	48 b9 c7 9a 21 04 80 	movabs $0x8004219ac7,%rcx
  8004207a87:	00 00 00 
  8004207a8a:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207a91:	00 00 00 
  8004207a94:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207a99:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207aa0:	00 00 00 
  8004207aa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207aa8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207aaf:	00 00 00 
  8004207ab2:	41 ff d0             	callq  *%r8
  8004207ab5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207abc:	00 00 00 
  8004207abf:	48 8b 00             	mov    (%rax),%rax
  8004207ac2:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207ac9:	48 89 d6             	mov    %rdx,%rsi
  8004207acc:	48 89 c7             	mov    %rax,%rdi
  8004207acf:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ad6:	00 00 00 
  8004207ad9:	ff d0                	callq  *%rax
  8004207adb:	48 85 c0             	test   %rax,%rax
  8004207ade:	74 35                	je     8004207b15 <page_check+0x1f09>
  8004207ae0:	48 b9 e0 9a 21 04 80 	movabs $0x8004219ae0,%rcx
  8004207ae7:	00 00 00 
  8004207aea:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207af1:	00 00 00 
  8004207af4:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207af9:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207b00:	00 00 00 
  8004207b03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b0f:	00 00 00 
  8004207b12:	41 ff d0             	callq  *%r8
  8004207b15:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207b1c:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207b23:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b2a:	00 00 00 
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	48 89 d6             	mov    %rdx,%rsi
  8004207b33:	48 89 c7             	mov    %rax,%rdi
  8004207b36:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207b3d:	00 00 00 
  8004207b40:	ff d0                	callq  *%rax
  8004207b42:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207b48:	74 35                	je     8004207b7f <page_check+0x1f73>
  8004207b4a:	48 b9 08 9b 21 04 80 	movabs $0x8004219b08,%rcx
  8004207b51:	00 00 00 
  8004207b54:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207b5b:	00 00 00 
  8004207b5e:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207b63:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207b6a:	00 00 00 
  8004207b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b79:	00 00 00 
  8004207b7c:	41 ff d0             	callq  *%r8
  8004207b7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b86:	00 00 00 
  8004207b89:	48 8b 00             	mov    (%rax),%rax
  8004207b8c:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207b93:	48 89 d6             	mov    %rdx,%rsi
  8004207b96:	48 89 c7             	mov    %rax,%rdi
  8004207b99:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ba0:	00 00 00 
  8004207ba3:	ff d0                	callq  *%rax
  8004207ba5:	48 85 c0             	test   %rax,%rax
  8004207ba8:	74 35                	je     8004207bdf <page_check+0x1fd3>
  8004207baa:	48 b9 38 9b 21 04 80 	movabs $0x8004219b38,%rcx
  8004207bb1:	00 00 00 
  8004207bb4:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207bbb:	00 00 00 
  8004207bbe:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207bc3:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207bca:	00 00 00 
  8004207bcd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207bd9:	00 00 00 
  8004207bdc:	41 ff d0             	callq  *%r8
  8004207bdf:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207be6:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207bed:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207bf4:	00 00 00 
  8004207bf7:	48 8b 00             	mov    (%rax),%rax
  8004207bfa:	48 89 d6             	mov    %rdx,%rsi
  8004207bfd:	48 89 c7             	mov    %rax,%rdi
  8004207c00:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207c07:	00 00 00 
  8004207c0a:	ff d0                	callq  *%rax
  8004207c0c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207c10:	74 35                	je     8004207c47 <page_check+0x203b>
  8004207c12:	48 b9 60 9b 21 04 80 	movabs $0x8004219b60,%rcx
  8004207c19:	00 00 00 
  8004207c1c:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207c23:	00 00 00 
  8004207c26:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207c2b:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207c32:	00 00 00 
  8004207c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c3a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207c41:	00 00 00 
  8004207c44:	41 ff d0             	callq  *%r8
  8004207c47:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207c4e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207c55:	00 00 00 
  8004207c58:	48 8b 00             	mov    (%rax),%rax
  8004207c5b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c60:	48 89 ce             	mov    %rcx,%rsi
  8004207c63:	48 89 c7             	mov    %rax,%rdi
  8004207c66:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207c6d:	00 00 00 
  8004207c70:	ff d0                	callq  *%rax
  8004207c72:	48 8b 00             	mov    (%rax),%rax
  8004207c75:	83 e0 1a             	and    $0x1a,%eax
  8004207c78:	48 85 c0             	test   %rax,%rax
  8004207c7b:	75 35                	jne    8004207cb2 <page_check+0x20a6>
  8004207c7d:	48 b9 90 9b 21 04 80 	movabs $0x8004219b90,%rcx
  8004207c84:	00 00 00 
  8004207c87:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207c8e:	00 00 00 
  8004207c91:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207c96:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207c9d:	00 00 00 
  8004207ca0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ca5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207cac:	00 00 00 
  8004207caf:	41 ff d0             	callq  *%r8
  8004207cb2:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207cb9:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207cc0:	00 00 00 
  8004207cc3:	48 8b 00             	mov    (%rax),%rax
  8004207cc6:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207ccb:	48 89 ce             	mov    %rcx,%rsi
  8004207cce:	48 89 c7             	mov    %rax,%rdi
  8004207cd1:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207cd8:	00 00 00 
  8004207cdb:	ff d0                	callq  *%rax
  8004207cdd:	48 8b 00             	mov    (%rax),%rax
  8004207ce0:	83 e0 04             	and    $0x4,%eax
  8004207ce3:	48 85 c0             	test   %rax,%rax
  8004207ce6:	74 35                	je     8004207d1d <page_check+0x2111>
  8004207ce8:	48 b9 d8 9b 21 04 80 	movabs $0x8004219bd8,%rcx
  8004207cef:	00 00 00 
  8004207cf2:	48 ba a1 8d 21 04 80 	movabs $0x8004218da1,%rdx
  8004207cf9:	00 00 00 
  8004207cfc:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207d01:	48 bf b6 8d 21 04 80 	movabs $0x8004218db6,%rdi
  8004207d08:	00 00 00 
  8004207d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d10:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207d17:	00 00 00 
  8004207d1a:	41 ff d0             	callq  *%r8
  8004207d1d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207d24:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d2b:	00 00 00 
  8004207d2e:	48 8b 00             	mov    (%rax),%rax
  8004207d31:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d36:	48 89 ce             	mov    %rcx,%rsi
  8004207d39:	48 89 c7             	mov    %rax,%rdi
  8004207d3c:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d43:	00 00 00 
  8004207d46:	ff d0                	callq  *%rax
  8004207d48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d4f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207d56:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207d5c:	48 89 c1             	mov    %rax,%rcx
  8004207d5f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d66:	00 00 00 
  8004207d69:	48 8b 00             	mov    (%rax),%rax
  8004207d6c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d71:	48 89 ce             	mov    %rcx,%rsi
  8004207d74:	48 89 c7             	mov    %rax,%rdi
  8004207d77:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d7e:	00 00 00 
  8004207d81:	ff d0                	callq  *%rax
  8004207d83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d8a:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207d91:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d98:	00 00 00 
  8004207d9b:	48 8b 00             	mov    (%rax),%rax
  8004207d9e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207da3:	48 89 ce             	mov    %rcx,%rsi
  8004207da6:	48 89 c7             	mov    %rax,%rdi
  8004207da9:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207db0:	00 00 00 
  8004207db3:	ff d0                	callq  *%rax
  8004207db5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207dbc:	48 bf 0b 9c 21 04 80 	movabs $0x8004219c0b,%rdi
  8004207dc3:	00 00 00 
  8004207dc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcb:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004207dd2:	00 00 00 
  8004207dd5:	ff d2                	callq  *%rdx
  8004207dd7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207dde:	5b                   	pop    %rbx
  8004207ddf:	5d                   	pop    %rbp
  8004207de0:	c3                   	retq   

0000008004207de1 <page2ppn>:
  8004207de1:	55                   	push   %rbp
  8004207de2:	48 89 e5             	mov    %rsp,%rbp
  8004207de5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207de9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ded:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207df1:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207df8:	00 00 00 
  8004207dfb:	48 8b 00             	mov    (%rax),%rax
  8004207dfe:	48 29 c2             	sub    %rax,%rdx
  8004207e01:	48 89 d0             	mov    %rdx,%rax
  8004207e04:	48 c1 f8 04          	sar    $0x4,%rax
  8004207e08:	c9                   	leaveq 
  8004207e09:	c3                   	retq   

0000008004207e0a <page2pa>:
  8004207e0a:	55                   	push   %rbp
  8004207e0b:	48 89 e5             	mov    %rsp,%rbp
  8004207e0e:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e1a:	48 89 c7             	mov    %rax,%rdi
  8004207e1d:	48 b8 e1 7d 20 04 80 	movabs $0x8004207de1,%rax
  8004207e24:	00 00 00 
  8004207e27:	ff d0                	callq  *%rax
  8004207e29:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207e2d:	c9                   	leaveq 
  8004207e2e:	c3                   	retq   

0000008004207e2f <pa2page>:
  8004207e2f:	55                   	push   %rbp
  8004207e30:	48 89 e5             	mov    %rsp,%rbp
  8004207e33:	48 83 ec 10          	sub    $0x10,%rsp
  8004207e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e3f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207e43:	48 89 c2             	mov    %rax,%rdx
  8004207e46:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207e4d:	00 00 00 
  8004207e50:	48 8b 00             	mov    (%rax),%rax
  8004207e53:	48 39 c2             	cmp    %rax,%rdx
  8004207e56:	72 2a                	jb     8004207e82 <pa2page+0x53>
  8004207e58:	48 ba 28 9c 21 04 80 	movabs $0x8004219c28,%rdx
  8004207e5f:	00 00 00 
  8004207e62:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207e67:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004207e6e:	00 00 00 
  8004207e71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e76:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004207e7d:	00 00 00 
  8004207e80:	ff d1                	callq  *%rcx
  8004207e82:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207e89:	00 00 00 
  8004207e8c:	48 8b 00             	mov    (%rax),%rax
  8004207e8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207e93:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207e97:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207e9b:	48 01 d0             	add    %rdx,%rax
  8004207e9e:	c9                   	leaveq 
  8004207e9f:	c3                   	retq   

0000008004207ea0 <page2kva>:
  8004207ea0:	55                   	push   %rbp
  8004207ea1:	48 89 e5             	mov    %rsp,%rbp
  8004207ea4:	48 83 ec 20          	sub    $0x20,%rsp
  8004207ea8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207eb0:	48 89 c7             	mov    %rax,%rdi
  8004207eb3:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004207eba:	00 00 00 
  8004207ebd:	ff d0                	callq  *%rax
  8004207ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ec7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207ecb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207ece:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207ed1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207ed8:	00 00 00 
  8004207edb:	48 8b 00             	mov    (%rax),%rax
  8004207ede:	48 39 c2             	cmp    %rax,%rdx
  8004207ee1:	72 32                	jb     8004207f15 <page2kva+0x75>
  8004207ee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ee7:	48 89 c1             	mov    %rax,%rcx
  8004207eea:	48 ba 58 9c 21 04 80 	movabs $0x8004219c58,%rdx
  8004207ef1:	00 00 00 
  8004207ef4:	be 62 00 00 00       	mov    $0x62,%esi
  8004207ef9:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004207f00:	00 00 00 
  8004207f03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207f0f:	00 00 00 
  8004207f12:	41 ff d0             	callq  *%r8
  8004207f15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207f1c:	00 00 00 
  8004207f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f23:	48 01 d0             	add    %rdx,%rax
  8004207f26:	c9                   	leaveq 
  8004207f27:	c3                   	retq   

0000008004207f28 <unlock_kernel>:
  8004207f28:	55                   	push   %rbp
  8004207f29:	48 89 e5             	mov    %rsp,%rbp
  8004207f2c:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004207f33:	00 00 00 
  8004207f36:	48 b8 34 74 21 04 80 	movabs $0x8004217434,%rax
  8004207f3d:	00 00 00 
  8004207f40:	ff d0                	callq  *%rax
  8004207f42:	f3 90                	pause  
  8004207f44:	5d                   	pop    %rbp
  8004207f45:	c3                   	retq   

0000008004207f46 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207f46:	55                   	push   %rbp
  8004207f47:	48 89 e5             	mov    %rsp,%rbp
  8004207f4a:	53                   	push   %rbx
  8004207f4b:	48 83 ec 28          	sub    $0x28,%rsp
  8004207f4f:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207f52:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207f56:	89 d0                	mov    %edx,%eax
  8004207f58:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207f5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207f5f:	75 41                	jne    8004207fa2 <envid2env+0x5c>
		*env_store = curenv;
  8004207f61:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004207f68:	00 00 00 
  8004207f6b:	ff d0                	callq  *%rax
  8004207f6d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004207f74:	00 00 00 
  8004207f77:	48 98                	cltq   
  8004207f79:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f7d:	48 89 c1             	mov    %rax,%rcx
  8004207f80:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f84:	48 01 c8             	add    %rcx,%rax
  8004207f87:	48 01 d0             	add    %rdx,%rax
  8004207f8a:	48 83 c0 08          	add    $0x8,%rax
  8004207f8e:	48 8b 10             	mov    (%rax),%rdx
  8004207f91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f95:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207f98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f9d:	e9 fd 00 00 00       	jmpq   800420809f <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207fa2:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004207fa9:	00 00 00 
  8004207fac:	48 8b 10             	mov    (%rax),%rdx
  8004207faf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207fb2:	48 98                	cltq   
  8004207fb4:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207fb9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fc0:	48 01 d0             	add    %rdx,%rax
  8004207fc3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207fc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207fcb:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207fd1:	85 c0                	test   %eax,%eax
  8004207fd3:	74 0f                	je     8004207fe4 <envid2env+0x9e>
  8004207fd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207fd9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207fdf:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207fe2:	74 15                	je     8004207ff9 <envid2env+0xb3>
		*env_store = 0;
  8004207fe4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207fe8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207fef:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207ff4:	e9 a6 00 00 00       	jmpq   800420809f <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207ff9:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207ffd:	0f 84 8c 00 00 00    	je     800420808f <envid2env+0x149>
  8004208003:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420800a:	00 00 00 
  800420800d:	ff d0                	callq  *%rax
  800420800f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208016:	00 00 00 
  8004208019:	48 98                	cltq   
  800420801b:	48 c1 e0 03          	shl    $0x3,%rax
  800420801f:	48 89 c1             	mov    %rax,%rcx
  8004208022:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208026:	48 01 c8             	add    %rcx,%rax
  8004208029:	48 01 d0             	add    %rdx,%rax
  800420802c:	48 83 c0 08          	add    $0x8,%rax
  8004208030:	48 8b 00             	mov    (%rax),%rax
  8004208033:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004208037:	74 56                	je     800420808f <envid2env+0x149>
  8004208039:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420803d:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004208043:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420804a:	00 00 00 
  800420804d:	ff d0                	callq  *%rax
  800420804f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208056:	00 00 00 
  8004208059:	48 98                	cltq   
  800420805b:	48 c1 e0 03          	shl    $0x3,%rax
  800420805f:	48 89 c1             	mov    %rax,%rcx
  8004208062:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208066:	48 01 c8             	add    %rcx,%rax
  8004208069:	48 01 d0             	add    %rdx,%rax
  800420806c:	48 83 c0 08          	add    $0x8,%rax
  8004208070:	48 8b 00             	mov    (%rax),%rax
  8004208073:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208079:	39 c3                	cmp    %eax,%ebx
  800420807b:	74 12                	je     800420808f <envid2env+0x149>
		*env_store = 0;
  800420807d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208081:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004208088:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  800420808d:	eb 10                	jmp    800420809f <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  800420808f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208093:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208097:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  800420809a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420809f:	48 83 c4 28          	add    $0x28,%rsp
  80042080a3:	5b                   	pop    %rbx
  80042080a4:	5d                   	pop    %rbp
  80042080a5:	c3                   	retq   

00000080042080a6 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  80042080a6:	55                   	push   %rbp
  80042080a7:	48 89 e5             	mov    %rsp,%rbp
  80042080aa:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  80042080ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042080b5:	eb 6d                	jmp    8004208124 <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  80042080b7:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042080be:	00 00 00 
  80042080c1:	48 8b 10             	mov    (%rax),%rdx
  80042080c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080c7:	48 98                	cltq   
  80042080c9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080d0:	48 01 d0             	add    %rdx,%rax
  80042080d3:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042080da:	00 00 00 
		envs[i].env_link = &envs[i+1];
  80042080dd:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042080e4:	00 00 00 
  80042080e7:	48 8b 10             	mov    (%rax),%rdx
  80042080ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080ed:	48 98                	cltq   
  80042080ef:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080f6:	48 01 c2             	add    %rax,%rdx
  80042080f9:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208100:	00 00 00 
  8004208103:	48 8b 08             	mov    (%rax),%rcx
  8004208106:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208109:	48 98                	cltq   
  800420810b:	48 83 c0 01          	add    $0x1,%rax
  800420810f:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208116:	48 01 c8             	add    %rcx,%rax
  8004208119:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004208120:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004208124:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420812b:	7e 8a                	jle    80042080b7 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  800420812d:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208134:	00 00 00 
  8004208137:	48 8b 00             	mov    (%rax),%rax
  800420813a:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208140:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208147:	00 00 00 00 
	env_free_list = &envs[0];
  800420814b:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208152:	00 00 00 
  8004208155:	48 8b 10             	mov    (%rax),%rdx
  8004208158:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  800420815f:	00 00 00 
  8004208162:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208165:	48 b8 73 81 20 04 80 	movabs $0x8004208173,%rax
  800420816c:	00 00 00 
  800420816f:	ff d0                	callq  *%rax
}
  8004208171:	c9                   	leaveq 
  8004208172:	c3                   	retq   

0000008004208173 <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  8004208173:	55                   	push   %rbp
  8004208174:	48 89 e5             	mov    %rsp,%rbp
  8004208177:	53                   	push   %rbx
  8004208178:	48 83 ec 10          	sub    $0x10,%rsp
  800420817c:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  8004208183:	00 00 00 
  8004208186:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  800420818a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420818e:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  8004208191:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208196:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208198:	b8 23 00 00 00       	mov    $0x23,%eax
  800420819d:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420819f:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081a4:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  80042081a6:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081ab:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  80042081ad:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081b2:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  80042081b4:	b8 08 00 00 00       	mov    $0x8,%eax
  80042081b9:	89 c3                	mov    %eax,%ebx
  80042081bb:	53                   	push   %rbx
  80042081bc:	48 b8 c9 81 20 04 80 	movabs $0x80042081c9,%rax
  80042081c3:	00 00 00 
  80042081c6:	50                   	push   %rax
  80042081c7:	48 cb                	lretq  
  80042081c9:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  80042081cf:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  80042081d3:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  80042081d6:	48 83 c4 10          	add    $0x10,%rsp
  80042081da:	5b                   	pop    %rbx
  80042081db:	5d                   	pop    %rbp
  80042081dc:	c3                   	retq   

00000080042081dd <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  80042081dd:	55                   	push   %rbp
  80042081de:	48 89 e5             	mov    %rsp,%rbp
  80042081e1:	48 83 ec 20          	sub    $0x20,%rsp
  80042081e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042081e9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042081f0:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081f1:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f6:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042081fd:	00 00 00 
  8004208200:	ff d0                	callq  *%rax
  8004208202:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208206:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420820b:	75 0a                	jne    8004208217 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  800420820d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208212:	e9 bc 00 00 00       	jmpq   80042082d3 <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  8004208217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420821b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420821f:	8d 50 01             	lea    0x1(%rax),%edx
  8004208222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208226:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  800420822a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420822e:	48 89 c7             	mov    %rax,%rdi
  8004208231:	48 b8 a0 7e 20 04 80 	movabs $0x8004207ea0,%rax
  8004208238:	00 00 00 
  800420823b:	ff d0                	callq  *%rax
  800420823d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208241:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420824c:	48 89 c7             	mov    %rax,%rdi
  800420824f:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004208256:	00 00 00 
  8004208259:	ff d0                	callq  *%rax
  800420825b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420825f:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  8004208266:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420826a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208271:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208276:	be 00 00 00 00       	mov    $0x0,%esi
  800420827b:	48 89 c7             	mov    %rax,%rdi
  800420827e:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004208285:	00 00 00 
  8004208288:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  800420828a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420828e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208295:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208299:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042082a0:	00 00 00 
  80042082a3:	48 8b 00             	mov    (%rax),%rax
  80042082a6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042082aa:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  80042082ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082b1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082b8:	48 8d 50 10          	lea    0x10(%rax),%rdx
  80042082bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082c0:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042082c7:	48 83 c8 05          	or     $0x5,%rax
  80042082cb:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  80042082ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042082d3:	c9                   	leaveq 
  80042082d4:	c3                   	retq   

00000080042082d5 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  80042082d5:	55                   	push   %rbp
  80042082d6:	48 89 e5             	mov    %rsp,%rbp
  80042082d9:	48 83 ec 30          	sub    $0x30,%rsp
  80042082dd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042082e1:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  80042082e4:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  80042082eb:	00 00 00 
  80042082ee:	48 8b 00             	mov    (%rax),%rax
  80042082f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042082f5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042082fa:	75 0a                	jne    8004208306 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042082fc:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208301:	e9 5b 01 00 00       	jmpq   8004208461 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420830a:	48 89 c7             	mov    %rax,%rdi
  800420830d:	48 b8 dd 81 20 04 80 	movabs $0x80042081dd,%rax
  8004208314:	00 00 00 
  8004208317:	ff d0                	callq  *%rax
  8004208319:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420831c:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208320:	79 08                	jns    800420832a <env_alloc+0x55>
		return r;
  8004208322:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208325:	e9 37 01 00 00       	jmpq   8004208461 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  800420832a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420832e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208334:	05 00 10 00 00       	add    $0x1000,%eax
  8004208339:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  800420833e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  8004208341:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208345:	7f 07                	jg     800420834e <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  8004208347:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  800420834e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208352:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208359:	00 00 00 
  800420835c:	48 8b 00             	mov    (%rax),%rax
  800420835f:	48 29 c2             	sub    %rax,%rdx
  8004208362:	48 89 d0             	mov    %rdx,%rax
  8004208365:	48 c1 f8 03          	sar    $0x3,%rax
  8004208369:	48 89 c2             	mov    %rax,%rdx
  800420836c:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  8004208373:	fa a4 4f 
  8004208376:	48 0f af c2          	imul   %rdx,%rax
  800420837a:	0b 45 fc             	or     -0x4(%rbp),%eax
  800420837d:	89 c2                	mov    %eax,%edx
  800420837f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208383:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208389:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208390:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208396:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420839a:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  80042083a1:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  80042083a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083a8:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042083af:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042083b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083b6:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042083bb:	be 00 00 00 00       	mov    $0x0,%esi
  80042083c0:	48 89 c7             	mov    %rax,%rdi
  80042083c3:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042083ca:	00 00 00 
  80042083cd:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  80042083cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083d3:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  80042083da:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  80042083dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083e0:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  80042083e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083ea:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  80042083f1:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  80042083f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083f7:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  80042083fc:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208403:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208407:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  800420840e:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208410:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208414:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  800420841b:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  800420841f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208423:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  800420842a:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  800420842e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208432:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208439:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420843d:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208444:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  800420844b:	00 00 00 
  800420844e:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208451:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208455:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208459:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  800420845c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208461:	c9                   	leaveq 
  8004208462:	c3                   	retq   

0000008004208463 <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208463:	55                   	push   %rbp
  8004208464:	48 89 e5             	mov    %rsp,%rbp
  8004208467:	48 83 ec 40          	sub    $0x40,%rsp
  800420846b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420846f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208473:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208477:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420847b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420847f:	48 01 d0             	add    %rdx,%rax
  8004208482:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208486:	e9 c8 00 00 00       	jmpq   8004208553 <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  800420848b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208490:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004208497:	00 00 00 
  800420849a:	ff d0                	callq  *%rax
  800420849c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042084a0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042084a5:	75 30                	jne    80042084d7 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  80042084a7:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  80042084ac:	48 ba 80 9c 21 04 80 	movabs $0x8004219c80,%rdx
  80042084b3:	00 00 00 
  80042084b6:	be b2 01 00 00       	mov    $0x1b2,%esi
  80042084bb:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  80042084c2:	00 00 00 
  80042084c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042084ca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042084d1:	00 00 00 
  80042084d4:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  80042084d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042084db:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042084e2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042084e6:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042084ea:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042084ef:	48 89 c7             	mov    %rax,%rdi
  80042084f2:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042084f9:	00 00 00 
  80042084fc:	ff d0                	callq  *%rax
  80042084fe:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208501:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208505:	79 30                	jns    8004208537 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208507:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420850a:	89 c1                	mov    %eax,%ecx
  800420850c:	48 ba b8 9c 21 04 80 	movabs $0x8004219cb8,%rdx
  8004208513:	00 00 00 
  8004208516:	be b6 01 00 00       	mov    $0x1b6,%esi
  800420851b:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004208522:	00 00 00 
  8004208525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420852a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208531:	00 00 00 
  8004208534:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420853b:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208541:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208545:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208549:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420854f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208553:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208557:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420855b:	0f 82 2a ff ff ff    	jb     800420848b <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208561:	c9                   	leaveq 
  8004208562:	c3                   	retq   

0000008004208563 <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208563:	55                   	push   %rbp
  8004208564:	48 89 e5             	mov    %rsp,%rbp
  8004208567:	53                   	push   %rbx
  8004208568:	48 83 ec 78          	sub    $0x78,%rsp
  800420856c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208570:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208574:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208578:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  800420857c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208581:	0f 84 6f 03 00 00    	je     80042088f6 <load_icode+0x393>
  8004208587:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420858b:	8b 00                	mov    (%rax),%eax
  800420858d:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208592:	0f 85 5e 03 00 00    	jne    80042088f6 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208598:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420859c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042085a3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042085a7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042085ae:	00 00 00 
  80042085b1:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042085b5:	77 32                	ja     80042085e9 <load_icode+0x86>
  80042085b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085bb:	48 89 c1             	mov    %rax,%rcx
  80042085be:	48 ba e0 9c 21 04 80 	movabs $0x8004219ce0,%rdx
  80042085c5:	00 00 00 
  80042085c8:	be d8 01 00 00       	mov    $0x1d8,%esi
  80042085cd:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  80042085d4:	00 00 00 
  80042085d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042085dc:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042085e3:	00 00 00 
  80042085e6:	41 ff d0             	callq  *%r8
  80042085e9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042085f0:	ff ff ff 
  80042085f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085f7:	48 01 d0             	add    %rdx,%rax
  80042085fa:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  80042085fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208602:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208605:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208609:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800420860d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208611:	48 01 d0             	add    %rdx,%rax
  8004208614:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208618:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420861c:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208620:	0f b7 c0             	movzwl %ax,%eax
  8004208623:	48 c1 e0 03          	shl    $0x3,%rax
  8004208627:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420862e:	00 
  800420862f:	48 29 c2             	sub    %rax,%rdx
  8004208632:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208636:	48 01 d0             	add    %rdx,%rax
  8004208639:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  800420863d:	e9 bd 00 00 00       	jmpq   80042086ff <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208646:	8b 00                	mov    (%rax),%eax
  8004208648:	83 f8 01             	cmp    $0x1,%eax
  800420864b:	0f 85 a9 00 00 00    	jne    80042086fa <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208651:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208655:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208659:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420865d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208661:	48 89 c1             	mov    %rax,%rcx
  8004208664:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208668:	48 89 ce             	mov    %rcx,%rsi
  800420866b:	48 89 c7             	mov    %rax,%rdi
  800420866e:	48 b8 63 84 20 04 80 	movabs $0x8004208463,%rax
  8004208675:	00 00 00 
  8004208678:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  800420867a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420867e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208682:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208686:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800420868a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420868e:	48 01 c1             	add    %rax,%rcx
  8004208691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208695:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208699:	48 89 ce             	mov    %rcx,%rsi
  800420869c:	48 89 c7             	mov    %rax,%rdi
  800420869f:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  80042086a6:	00 00 00 
  80042086a9:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  80042086ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086af:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042086b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086b7:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042086bb:	48 39 c2             	cmp    %rax,%rdx
  80042086be:	73 3a                	jae    80042086fa <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  80042086c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086c4:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042086c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086cc:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042086d0:	48 29 c2             	sub    %rax,%rdx
  80042086d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086d7:	48 8b 48 10          	mov    0x10(%rax),%rcx
  80042086db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086df:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042086e3:	48 01 c8             	add    %rcx,%rax
  80042086e6:	be 00 00 00 00       	mov    $0x0,%esi
  80042086eb:	48 89 c7             	mov    %rax,%rdi
  80042086ee:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042086f5:	00 00 00 
  80042086f8:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  80042086fa:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  80042086ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208703:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208707:	0f 82 35 ff ff ff    	jb     8004208642 <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  800420870d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208711:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208716:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  800420871b:	48 89 c7             	mov    %rax,%rdi
  800420871e:	48 b8 63 84 20 04 80 	movabs $0x8004208463,%rax
  8004208725:	00 00 00 
  8004208728:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  800420872a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420872e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208732:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208736:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  800420873d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208741:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208746:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  800420874d:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208754:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208755:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208759:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420875d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208761:	48 01 d0             	add    %rdx,%rax
  8004208764:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208768:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420876c:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208770:	0f b7 c0             	movzwl %ax,%eax
  8004208773:	48 c1 e0 06          	shl    $0x6,%rax
  8004208777:	48 89 c2             	mov    %rax,%rdx
  800420877a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420877e:	48 01 d0             	add    %rdx,%rax
  8004208781:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208785:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208789:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800420878d:	0f b7 c0             	movzwl %ax,%eax
  8004208790:	48 c1 e0 06          	shl    $0x6,%rax
  8004208794:	48 89 c2             	mov    %rax,%rdx
  8004208797:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420879b:	48 01 d0             	add    %rdx,%rax
  800420879e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  80042087a2:	e9 27 01 00 00       	jmpq   80042088ce <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  80042087a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042087ab:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042087af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087b3:	8b 00                	mov    (%rax),%eax
  80042087b5:	89 c0                	mov    %eax,%eax
  80042087b7:	48 01 c2             	add    %rax,%rdx
  80042087ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087be:	48 01 d0             	add    %rdx,%rax
  80042087c1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  80042087c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087c9:	48 be 04 9d 21 04 80 	movabs $0x8004219d04,%rsi
  80042087d0:	00 00 00 
  80042087d3:	48 89 c7             	mov    %rax,%rdi
  80042087d6:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  80042087dd:	00 00 00 
  80042087e0:	ff d0                	callq  *%rax
  80042087e2:	85 c0                	test   %eax,%eax
  80042087e4:	0f 84 84 00 00 00    	je     800420886e <load_icode+0x30b>
  80042087ea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087ee:	48 be 10 9d 21 04 80 	movabs $0x8004219d10,%rsi
  80042087f5:	00 00 00 
  80042087f8:	48 89 c7             	mov    %rax,%rdi
  80042087fb:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004208802:	00 00 00 
  8004208805:	ff d0                	callq  *%rax
  8004208807:	85 c0                	test   %eax,%eax
  8004208809:	74 63                	je     800420886e <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  800420880b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420880f:	48 be 1e 9d 21 04 80 	movabs $0x8004219d1e,%rsi
  8004208816:	00 00 00 
  8004208819:	48 89 c7             	mov    %rax,%rdi
  800420881c:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004208823:	00 00 00 
  8004208826:	ff d0                	callq  *%rax
  8004208828:	85 c0                	test   %eax,%eax
  800420882a:	74 42                	je     800420886e <load_icode+0x30b>
  800420882c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208830:	48 be 2a 9d 21 04 80 	movabs $0x8004219d2a,%rsi
  8004208837:	00 00 00 
  800420883a:	48 89 c7             	mov    %rax,%rdi
  800420883d:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004208844:	00 00 00 
  8004208847:	ff d0                	callq  *%rax
  8004208849:	85 c0                	test   %eax,%eax
  800420884b:	74 21                	je     800420886e <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  800420884d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208851:	48 be 34 9d 21 04 80 	movabs $0x8004219d34,%rsi
  8004208858:	00 00 00 
  800420885b:	48 89 c7             	mov    %rax,%rdi
  800420885e:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004208865:	00 00 00 
  8004208868:	ff d0                	callq  *%rax
  800420886a:	85 c0                	test   %eax,%eax
  800420886c:	75 5b                	jne    80042088c9 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  800420886e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208872:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208876:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420887a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420887e:	48 89 ce             	mov    %rcx,%rsi
  8004208881:	48 89 c7             	mov    %rax,%rdi
  8004208884:	48 b8 63 84 20 04 80 	movabs $0x8004208463,%rax
  800420888b:	00 00 00 
  800420888e:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208890:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208894:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208898:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420889c:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042088a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042088a4:	48 01 c1             	add    %rax,%rcx
  80042088a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042088ab:	48 89 ce             	mov    %rcx,%rsi
  80042088ae:	48 89 c7             	mov    %rax,%rdi
  80042088b1:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  80042088b8:	00 00 00 
  80042088bb:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  80042088bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088c1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042088c5:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  80042088c9:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  80042088ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088d2:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  80042088d6:	0f 82 cb fe ff ff    	jb     80042087a7 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  80042088dc:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  80042088e3:	00 00 00 
  80042088e6:	48 8b 00             	mov    (%rax),%rax
  80042088e9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042088ed:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042088f1:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  80042088f4:	eb 2a                	jmp    8004208920 <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  80042088f6:	48 ba 3f 9d 21 04 80 	movabs $0x8004219d3f,%rdx
  80042088fd:	00 00 00 
  8004208900:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208905:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  800420890c:	00 00 00 
  800420890f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208914:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420891b:	00 00 00 
  800420891e:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208920:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208924:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208928:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  800420892f:	48 83 c4 78          	add    $0x78,%rsp
  8004208933:	5b                   	pop    %rbx
  8004208934:	5d                   	pop    %rbp
  8004208935:	c3                   	retq   

0000008004208936 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208936:	55                   	push   %rbp
  8004208937:	48 89 e5             	mov    %rsp,%rbp
  800420893a:	48 83 ec 20          	sub    $0x20,%rsp
  800420893e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208942:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208945:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208949:	be 00 00 00 00       	mov    $0x0,%esi
  800420894e:	48 89 c7             	mov    %rax,%rdi
  8004208951:	48 b8 d5 82 20 04 80 	movabs $0x80042082d5,%rax
  8004208958:	00 00 00 
  800420895b:	ff d0                	callq  *%rax
  800420895d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208960:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208964:	79 30                	jns    8004208996 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208966:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208969:	89 c1                	mov    %eax,%ecx
  800420896b:	48 ba 50 9d 21 04 80 	movabs $0x8004219d50,%rdx
  8004208972:	00 00 00 
  8004208975:	be 0d 02 00 00       	mov    $0x20d,%esi
  800420897a:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004208981:	00 00 00 
  8004208984:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208989:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208990:	00 00 00 
  8004208993:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004208996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420899a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420899e:	48 89 d6             	mov    %rdx,%rsi
  80042089a1:	48 89 c7             	mov    %rax,%rdi
  80042089a4:	48 b8 63 85 20 04 80 	movabs $0x8004208563,%rax
  80042089ab:	00 00 00 
  80042089ae:	ff d0                	callq  *%rax
	e->env_type = type;
  80042089b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089b4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042089b7:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  80042089bd:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  80042089c1:	75 19                	jne    80042089dc <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  80042089c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089cb:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  80042089d2:	80 ce 30             	or     $0x30,%dh
  80042089d5:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  80042089dc:	c9                   	leaveq 
  80042089dd:	c3                   	retq   

00000080042089de <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  80042089de:	55                   	push   %rbp
  80042089df:	48 89 e5             	mov    %rsp,%rbp
  80042089e2:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  80042089e9:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  80042089f0:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042089f7:	00 00 00 
  80042089fa:	ff d0                	callq  *%rax
  80042089fc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208a03:	00 00 00 
  8004208a06:	48 98                	cltq   
  8004208a08:	48 c1 e0 03          	shl    $0x3,%rax
  8004208a0c:	48 89 c1             	mov    %rax,%rcx
  8004208a0f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208a13:	48 01 c8             	add    %rcx,%rax
  8004208a16:	48 01 d0             	add    %rdx,%rax
  8004208a19:	48 83 c0 08          	add    $0x8,%rax
  8004208a1d:	48 8b 00             	mov    (%rax),%rax
  8004208a20:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  8004208a27:	75 18                	jne    8004208a41 <env_free+0x63>
		lcr3(boot_cr3);
  8004208a29:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004208a30:	00 00 00 
  8004208a33:	48 8b 00             	mov    (%rax),%rax
  8004208a36:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004208a3a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208a3e:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  8004208a41:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208a48:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208a4f:	48 8b 00             	mov    (%rax),%rax
  8004208a52:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208a58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208a5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a60:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208a64:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004208a67:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004208a6a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208a71:	00 00 00 
  8004208a74:	48 8b 00             	mov    (%rax),%rax
  8004208a77:	48 39 c2             	cmp    %rax,%rdx
  8004208a7a:	72 32                	jb     8004208aae <env_free+0xd0>
  8004208a7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a80:	48 89 c1             	mov    %rax,%rcx
  8004208a83:	48 ba 58 9c 21 04 80 	movabs $0x8004219c58,%rdx
  8004208a8a:	00 00 00 
  8004208a8d:	be 32 02 00 00       	mov    $0x232,%esi
  8004208a92:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004208a99:	00 00 00 
  8004208a9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208aa1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208aa8:	00 00 00 
  8004208aab:	41 ff d0             	callq  *%r8
  8004208aae:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208ab5:	00 00 00 
  8004208ab8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208abc:	48 01 d0             	add    %rdx,%rax
  8004208abf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208ac3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004208aca:	00 
  8004208acb:	e9 ab 02 00 00       	jmpq   8004208d7b <env_free+0x39d>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004208ad0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ad4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208adb:	00 
  8004208adc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ae0:	48 01 d0             	add    %rdx,%rax
  8004208ae3:	48 8b 00             	mov    (%rax),%rax
  8004208ae6:	83 e0 01             	and    $0x1,%eax
  8004208ae9:	48 85 c0             	test   %rax,%rax
  8004208aec:	75 05                	jne    8004208af3 <env_free+0x115>
			continue;
  8004208aee:	e9 83 02 00 00       	jmpq   8004208d76 <env_free+0x398>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  8004208af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208af7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208afe:	00 
  8004208aff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b03:	48 01 d0             	add    %rdx,%rax
  8004208b06:	48 8b 00             	mov    (%rax),%rax
  8004208b09:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b0f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208b13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b17:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208b1b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004208b1e:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004208b21:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208b28:	00 00 00 
  8004208b2b:	48 8b 00             	mov    (%rax),%rax
  8004208b2e:	48 39 c2             	cmp    %rax,%rdx
  8004208b31:	72 32                	jb     8004208b65 <env_free+0x187>
  8004208b33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b37:	48 89 c1             	mov    %rax,%rcx
  8004208b3a:	48 ba 58 9c 21 04 80 	movabs $0x8004219c58,%rdx
  8004208b41:	00 00 00 
  8004208b44:	be 3a 02 00 00       	mov    $0x23a,%esi
  8004208b49:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004208b50:	00 00 00 
  8004208b53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b58:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208b5f:	00 00 00 
  8004208b62:	41 ff d0             	callq  *%r8
  8004208b65:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208b6c:	00 00 00 
  8004208b6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b73:	48 01 d0             	add    %rdx,%rax
  8004208b76:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004208b7a:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208b7f:	75 07                	jne    8004208b88 <env_free+0x1aa>
  8004208b81:	b8 04 00 00 00       	mov    $0x4,%eax
  8004208b86:	eb 05                	jmp    8004208b8d <env_free+0x1af>
  8004208b88:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004208b8d:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208b90:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208b97:	00 
  8004208b98:	e9 6e 01 00 00       	jmpq   8004208d0b <env_free+0x32d>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004208b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ba1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ba8:	00 
  8004208ba9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bad:	48 01 d0             	add    %rdx,%rax
  8004208bb0:	48 8b 00             	mov    (%rax),%rax
  8004208bb3:	83 e0 01             	and    $0x1,%eax
  8004208bb6:	48 85 c0             	test   %rax,%rax
  8004208bb9:	75 05                	jne    8004208bc0 <env_free+0x1e2>
				continue;
  8004208bbb:	e9 46 01 00 00       	jmpq   8004208d06 <env_free+0x328>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004208bc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208bc4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208bcb:	00 
  8004208bcc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bd0:	48 01 d0             	add    %rdx,%rax
  8004208bd3:	48 8b 00             	mov    (%rax),%rax
  8004208bd6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bdc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004208be0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208be4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004208be8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208bec:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208bf0:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004208bf3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004208bf6:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208bfd:	00 00 00 
  8004208c00:	48 8b 00             	mov    (%rax),%rax
  8004208c03:	48 39 c2             	cmp    %rax,%rdx
  8004208c06:	72 32                	jb     8004208c3a <env_free+0x25c>
  8004208c08:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c0c:	48 89 c1             	mov    %rax,%rcx
  8004208c0f:	48 ba 58 9c 21 04 80 	movabs $0x8004219c58,%rdx
  8004208c16:	00 00 00 
  8004208c19:	be 44 02 00 00       	mov    $0x244,%esi
  8004208c1e:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004208c25:	00 00 00 
  8004208c28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c2d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208c34:	00 00 00 
  8004208c37:	41 ff d0             	callq  *%r8
  8004208c3a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208c41:	00 00 00 
  8004208c44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c48:	48 01 d0             	add    %rdx,%rax
  8004208c4b:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208c4f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004208c56:	00 
  8004208c57:	eb 67                	jmp    8004208cc0 <env_free+0x2e2>
				if (pt[pteno] & PTE_P){
  8004208c59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c64:	00 
  8004208c65:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004208c69:	48 01 d0             	add    %rdx,%rax
  8004208c6c:	48 8b 00             	mov    (%rax),%rax
  8004208c6f:	83 e0 01             	and    $0x1,%eax
  8004208c72:	48 85 c0             	test   %rax,%rax
  8004208c75:	74 44                	je     8004208cbb <env_free+0x2dd>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004208c77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c7b:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004208c7f:	48 89 c2             	mov    %rax,%rdx
  8004208c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c86:	48 c1 e0 15          	shl    $0x15,%rax
  8004208c8a:	48 09 c2             	or     %rax,%rdx
  8004208c8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c91:	48 c1 e0 0c          	shl    $0xc,%rax
  8004208c95:	48 09 d0             	or     %rdx,%rax
  8004208c98:	48 89 c2             	mov    %rax,%rdx
  8004208c9b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208ca2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208ca9:	48 89 d6             	mov    %rdx,%rsi
  8004208cac:	48 89 c7             	mov    %rax,%rdi
  8004208caf:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004208cb6:	00 00 00 
  8004208cb9:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208cbb:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004208cc0:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004208cc7:	00 
  8004208cc8:	76 8f                	jbe    8004208c59 <env_free+0x27b>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004208cca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208cce:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cd5:	00 
  8004208cd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208cda:	48 01 d0             	add    %rdx,%rax
  8004208cdd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004208ce4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ce8:	48 89 c7             	mov    %rax,%rdi
  8004208ceb:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208cf2:	00 00 00 
  8004208cf5:	ff d0                	callq  *%rax
  8004208cf7:	48 89 c7             	mov    %rax,%rdi
  8004208cfa:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d01:	00 00 00 
  8004208d04:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208d06:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004208d0b:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004208d0e:	48 98                	cltq   
  8004208d10:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208d14:	0f 87 83 fe ff ff    	ja     8004208b9d <env_free+0x1bf>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  8004208d1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d1e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d25:	00 
  8004208d26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d2a:	48 01 d0             	add    %rdx,%rax
  8004208d2d:	48 8b 00             	mov    (%rax),%rax
  8004208d30:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d36:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  8004208d3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d3e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d45:	00 
  8004208d46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d4a:	48 01 d0             	add    %rdx,%rax
  8004208d4d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004208d54:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d58:	48 89 c7             	mov    %rax,%rdi
  8004208d5b:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d62:	00 00 00 
  8004208d65:	ff d0                	callq  *%rax
  8004208d67:	48 89 c7             	mov    %rax,%rdi
  8004208d6a:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d71:	00 00 00 
  8004208d74:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208d76:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004208d7b:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208d80:	0f 86 4a fd ff ff    	jbe    8004208ad0 <env_free+0xf2>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  8004208d86:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d8d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208d94:	48 8b 00             	mov    (%rax),%rax
  8004208d97:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d9d:	48 89 c7             	mov    %rax,%rdi
  8004208da0:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208da7:	00 00 00 
  8004208daa:	ff d0                	callq  *%rax
  8004208dac:	48 89 c7             	mov    %rax,%rdi
  8004208daf:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208db6:	00 00 00 
  8004208db9:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004208dbb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dc2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208dc9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004208dd0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dd7:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208dde:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004208de2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208de9:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208df0:	00 00 00 00 
	e->env_cr3 = 0;
  8004208df4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dfb:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208e02:	00 00 00 00 
	page_decref(pa2page(pa));
  8004208e06:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e0a:	48 89 c7             	mov    %rax,%rdi
  8004208e0d:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208e14:	00 00 00 
  8004208e17:	ff d0                	callq  *%rax
  8004208e19:	48 89 c7             	mov    %rax,%rdi
  8004208e1c:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208e23:	00 00 00 
  8004208e26:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208e28:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e2f:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208e36:	00 00 00 
	e->env_link = env_free_list;
  8004208e39:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208e40:	00 00 00 
  8004208e43:	48 8b 10             	mov    (%rax),%rdx
  8004208e46:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e4d:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004208e54:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208e5b:	00 00 00 
  8004208e5e:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004208e65:	48 89 10             	mov    %rdx,(%rax)
}
  8004208e68:	c9                   	leaveq 
  8004208e69:	c3                   	retq   

0000008004208e6a <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004208e6a:	55                   	push   %rbp
  8004208e6b:	48 89 e5             	mov    %rsp,%rbp
  8004208e6e:	48 83 ec 10          	sub    $0x10,%rsp
  8004208e72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  8004208e76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208e7a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208e80:	83 f8 03             	cmp    $0x3,%eax
  8004208e83:	75 49                	jne    8004208ece <env_destroy+0x64>
  8004208e85:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004208e8c:	00 00 00 
  8004208e8f:	ff d0                	callq  *%rax
  8004208e91:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208e98:	00 00 00 
  8004208e9b:	48 98                	cltq   
  8004208e9d:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ea1:	48 89 c1             	mov    %rax,%rcx
  8004208ea4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208ea8:	48 01 c8             	add    %rcx,%rax
  8004208eab:	48 01 d0             	add    %rdx,%rax
  8004208eae:	48 83 c0 08          	add    $0x8,%rax
  8004208eb2:	48 8b 00             	mov    (%rax),%rax
  8004208eb5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208eb9:	74 13                	je     8004208ece <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004208ebb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ebf:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004208ec6:	00 00 00 
		return;
  8004208ec9:	e9 89 00 00 00       	jmpq   8004208f57 <env_destroy+0xed>
	}

	env_free(e);
  8004208ece:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ed2:	48 89 c7             	mov    %rax,%rdi
  8004208ed5:	48 b8 de 89 20 04 80 	movabs $0x80042089de,%rax
  8004208edc:	00 00 00 
  8004208edf:	ff d0                	callq  *%rax
	if (curenv == e) {
  8004208ee1:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004208ee8:	00 00 00 
  8004208eeb:	ff d0                	callq  *%rax
  8004208eed:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208ef4:	00 00 00 
  8004208ef7:	48 98                	cltq   
  8004208ef9:	48 c1 e0 03          	shl    $0x3,%rax
  8004208efd:	48 89 c1             	mov    %rax,%rcx
  8004208f00:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f04:	48 01 c8             	add    %rcx,%rax
  8004208f07:	48 01 d0             	add    %rdx,%rax
  8004208f0a:	48 83 c0 08          	add    $0x8,%rax
  8004208f0e:	48 8b 00             	mov    (%rax),%rax
  8004208f11:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208f15:	75 40                	jne    8004208f57 <env_destroy+0xed>
		curenv = NULL;
  8004208f17:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004208f1e:	00 00 00 
  8004208f21:	ff d0                	callq  *%rax
  8004208f23:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208f2a:	00 00 00 
  8004208f2d:	48 98                	cltq   
  8004208f2f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f33:	48 89 c1             	mov    %rax,%rcx
  8004208f36:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f3a:	48 01 c8             	add    %rcx,%rax
  8004208f3d:	48 01 d0             	add    %rdx,%rax
  8004208f40:	48 83 c0 08          	add    $0x8,%rax
  8004208f44:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004208f4b:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  8004208f52:	00 00 00 
  8004208f55:	ff d0                	callq  *%rax
	}
}
  8004208f57:	c9                   	leaveq 
  8004208f58:	c3                   	retq   

0000008004208f59 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004208f59:	55                   	push   %rbp
  8004208f5a:	48 89 e5             	mov    %rsp,%rbp
  8004208f5d:	53                   	push   %rbx
  8004208f5e:	48 83 ec 18          	sub    $0x18,%rsp
  8004208f62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  8004208f66:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004208f6d:	00 00 00 
  8004208f70:	ff d0                	callq  *%rax
  8004208f72:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208f79:	00 00 00 
  8004208f7c:	48 98                	cltq   
  8004208f7e:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f82:	48 89 c1             	mov    %rax,%rcx
  8004208f85:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f89:	48 01 c8             	add    %rcx,%rax
  8004208f8c:	48 01 d0             	add    %rdx,%rax
  8004208f8f:	48 83 c0 08          	add    $0x8,%rax
  8004208f93:	48 8b 18             	mov    (%rax),%rbx
  8004208f96:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004208f9d:	00 00 00 
  8004208fa0:	ff d0                	callq  *%rax
  8004208fa2:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004208fa8:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004208fac:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004208fb0:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004208fb5:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004208fba:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004208fbf:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004208fc4:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004208fc9:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004208fce:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004208fd3:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004208fd8:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004208fdd:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004208fe2:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004208fe7:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004208fec:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  8004208ff1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004208ff6:	48 83 c4 78          	add    $0x78,%rsp
  8004208ffa:	8e 04 24             	mov    (%rsp),%es
  8004208ffd:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  8004209001:	48 83 c4 10          	add    $0x10,%rsp
  8004209005:	48 83 c4 10          	add    $0x10,%rsp
  8004209009:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  800420900b:	48 ba 78 9d 21 04 80 	movabs $0x8004219d78,%rdx
  8004209012:	00 00 00 
  8004209015:	be 90 02 00 00       	mov    $0x290,%esi
  800420901a:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004209021:	00 00 00 
  8004209024:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209029:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004209030:	00 00 00 
  8004209033:	ff d1                	callq  *%rcx

0000008004209035 <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  8004209035:	55                   	push   %rbp
  8004209036:	48 89 e5             	mov    %rsp,%rbp
  8004209039:	48 83 ec 20          	sub    $0x20,%rsp
  800420903d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  8004209041:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004209048:	00 00 00 
  800420904b:	ff d0                	callq  *%rax
  800420904d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209054:	00 00 00 
  8004209057:	48 98                	cltq   
  8004209059:	48 c1 e0 03          	shl    $0x3,%rax
  800420905d:	48 89 c1             	mov    %rax,%rcx
  8004209060:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209064:	48 01 c8             	add    %rcx,%rax
  8004209067:	48 01 d0             	add    %rdx,%rax
  800420906a:	48 83 c0 08          	add    $0x8,%rax
  800420906e:	48 8b 00             	mov    (%rax),%rax
  8004209071:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004209075:	0f 84 28 01 00 00    	je     80042091a3 <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  800420907b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004209082:	00 00 00 
  8004209085:	ff d0                	callq  *%rax
  8004209087:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420908e:	00 00 00 
  8004209091:	48 98                	cltq   
  8004209093:	48 c1 e0 03          	shl    $0x3,%rax
  8004209097:	48 89 c1             	mov    %rax,%rcx
  800420909a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420909e:	48 01 c8             	add    %rcx,%rax
  80042090a1:	48 01 d0             	add    %rdx,%rax
  80042090a4:	48 83 c0 08          	add    $0x8,%rax
  80042090a8:	48 8b 00             	mov    (%rax),%rax
  80042090ab:	48 85 c0             	test   %rax,%rax
  80042090ae:	74 75                	je     8004209125 <env_run+0xf0>
  80042090b0:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042090b7:	00 00 00 
  80042090ba:	ff d0                	callq  *%rax
  80042090bc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042090c3:	00 00 00 
  80042090c6:	48 98                	cltq   
  80042090c8:	48 c1 e0 03          	shl    $0x3,%rax
  80042090cc:	48 89 c1             	mov    %rax,%rcx
  80042090cf:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090d3:	48 01 c8             	add    %rcx,%rax
  80042090d6:	48 01 d0             	add    %rdx,%rax
  80042090d9:	48 83 c0 08          	add    $0x8,%rax
  80042090dd:	48 8b 00             	mov    (%rax),%rax
  80042090e0:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042090e6:	83 f8 03             	cmp    $0x3,%eax
  80042090e9:	75 3a                	jne    8004209125 <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  80042090eb:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042090f2:	00 00 00 
  80042090f5:	ff d0                	callq  *%rax
  80042090f7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042090fe:	00 00 00 
  8004209101:	48 98                	cltq   
  8004209103:	48 c1 e0 03          	shl    $0x3,%rax
  8004209107:	48 89 c1             	mov    %rax,%rcx
  800420910a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420910e:	48 01 c8             	add    %rcx,%rax
  8004209111:	48 01 d0             	add    %rdx,%rax
  8004209114:	48 83 c0 08          	add    $0x8,%rax
  8004209118:	48 8b 00             	mov    (%rax),%rax
  800420911b:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004209122:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  8004209125:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420912c:	00 00 00 
  800420912f:	ff d0                	callq  *%rax
  8004209131:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209138:	00 00 00 
  800420913b:	48 98                	cltq   
  800420913d:	48 c1 e0 03          	shl    $0x3,%rax
  8004209141:	48 89 c1             	mov    %rax,%rcx
  8004209144:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209148:	48 01 c8             	add    %rcx,%rax
  800420914b:	48 01 d0             	add    %rdx,%rax
  800420914e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209156:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  8004209159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420915d:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209164:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  8004209167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420916b:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  8004209171:	8d 50 01             	lea    0x1(%rax),%edx
  8004209174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209178:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  800420917e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209182:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209188:	83 f8 03             	cmp    $0x3,%eax
  800420918b:	74 16                	je     80042091a3 <env_run+0x16e>
			lcr3(e->env_cr3);
  800420918d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209191:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209198:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420919c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091a0:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  80042091a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a7:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042091ad:	83 f8 03             	cmp    $0x3,%eax
  80042091b0:	74 35                	je     80042091e7 <env_run+0x1b2>
  80042091b2:	48 b9 84 9d 21 04 80 	movabs $0x8004219d84,%rcx
  80042091b9:	00 00 00 
  80042091bc:	48 ba a1 9d 21 04 80 	movabs $0x8004219da1,%rdx
  80042091c3:	00 00 00 
  80042091c6:	be b2 02 00 00       	mov    $0x2b2,%esi
  80042091cb:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  80042091d2:	00 00 00 
  80042091d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091da:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042091e1:	00 00 00 
  80042091e4:	41 ff d0             	callq  *%r8
	else {
		unlock_kernel();
		env_pop_tf(&e->env_tf);
	}
#else	/* VMM_GUEST */
	unlock_kernel();
  80042091e7:	48 b8 28 7f 20 04 80 	movabs $0x8004207f28,%rax
  80042091ee:	00 00 00 
  80042091f1:	ff d0                	callq  *%rax
	env_pop_tf(&e->env_tf);
  80042091f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091f7:	48 89 c7             	mov    %rax,%rdi
  80042091fa:	48 b8 59 8f 20 04 80 	movabs $0x8004208f59,%rax
  8004209201:	00 00 00 
  8004209204:	ff d0                	callq  *%rax

0000008004209206 <mc146818_read>:
  8004209206:	55                   	push   %rbp
  8004209207:	48 89 e5             	mov    %rsp,%rbp
  800420920a:	48 83 ec 14          	sub    $0x14,%rsp
  800420920e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209211:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209214:	0f b6 c0             	movzbl %al,%eax
  8004209217:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420921e:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209221:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209225:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209228:	ee                   	out    %al,(%dx)
  8004209229:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209230:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209233:	89 c2                	mov    %eax,%edx
  8004209235:	ec                   	in     (%dx),%al
  8004209236:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004209239:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420923d:	0f b6 c0             	movzbl %al,%eax
  8004209240:	c9                   	leaveq 
  8004209241:	c3                   	retq   

0000008004209242 <mc146818_write>:
  8004209242:	55                   	push   %rbp
  8004209243:	48 89 e5             	mov    %rsp,%rbp
  8004209246:	48 83 ec 18          	sub    $0x18,%rsp
  800420924a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420924d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209250:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209253:	0f b6 c0             	movzbl %al,%eax
  8004209256:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420925d:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209260:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209264:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209267:	ee                   	out    %al,(%dx)
  8004209268:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420926b:	0f b6 c0             	movzbl %al,%eax
  800420926e:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209275:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209278:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420927c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420927f:	ee                   	out    %al,(%dx)
  8004209280:	c9                   	leaveq 
  8004209281:	c3                   	retq   

0000008004209282 <pic_init>:
  8004209282:	55                   	push   %rbp
  8004209283:	48 89 e5             	mov    %rsp,%rbp
  8004209286:	48 83 ec 70          	sub    $0x70,%rsp
  800420928a:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  8004209291:	00 00 00 
  8004209294:	c6 00 01             	movb   $0x1,(%rax)
  8004209297:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  800420929e:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042092a2:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042092a6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092a9:	ee                   	out    %al,(%dx)
  80042092aa:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042092b1:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042092b5:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042092b9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042092bc:	ee                   	out    %al,(%dx)
  80042092bd:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042092c4:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042092c8:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042092cc:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042092cf:	ee                   	out    %al,(%dx)
  80042092d0:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042092d7:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042092db:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042092df:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042092e2:	ee                   	out    %al,(%dx)
  80042092e3:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042092ea:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042092ee:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042092f2:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042092f5:	ee                   	out    %al,(%dx)
  80042092f6:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042092fd:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209301:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209305:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209308:	ee                   	out    %al,(%dx)
  8004209309:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209310:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209314:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209318:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420931b:	ee                   	out    %al,(%dx)
  800420931c:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209323:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209327:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  800420932b:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420932e:	ee                   	out    %al,(%dx)
  800420932f:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209336:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  800420933a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  800420933e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209341:	ee                   	out    %al,(%dx)
  8004209342:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209349:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  800420934d:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209351:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209354:	ee                   	out    %al,(%dx)
  8004209355:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  800420935c:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209360:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209364:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209367:	ee                   	out    %al,(%dx)
  8004209368:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  800420936f:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209373:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209377:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420937a:	ee                   	out    %al,(%dx)
  800420937b:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209382:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209386:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  800420938a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420938d:	ee                   	out    %al,(%dx)
  800420938e:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209395:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209399:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  800420939d:	8b 55 94             	mov    -0x6c(%rbp),%edx
  80042093a0:	ee                   	out    %al,(%dx)
  80042093a1:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093a8:	00 00 00 
  80042093ab:	0f b7 00             	movzwl (%rax),%eax
  80042093ae:	66 83 f8 ff          	cmp    $0xffff,%ax
  80042093b2:	74 1e                	je     80042093d2 <pic_init+0x150>
  80042093b4:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093bb:	00 00 00 
  80042093be:	0f b7 00             	movzwl (%rax),%eax
  80042093c1:	0f b7 c0             	movzwl %ax,%eax
  80042093c4:	89 c7                	mov    %eax,%edi
  80042093c6:	48 b8 d4 93 20 04 80 	movabs $0x80042093d4,%rax
  80042093cd:	00 00 00 
  80042093d0:	ff d0                	callq  *%rax
  80042093d2:	c9                   	leaveq 
  80042093d3:	c3                   	retq   

00000080042093d4 <irq_setmask_8259A>:
  80042093d4:	55                   	push   %rbp
  80042093d5:	48 89 e5             	mov    %rsp,%rbp
  80042093d8:	48 83 ec 30          	sub    $0x30,%rsp
  80042093dc:	89 f8                	mov    %edi,%eax
  80042093de:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  80042093e2:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093e9:	00 00 00 
  80042093ec:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  80042093f0:	66 89 10             	mov    %dx,(%rax)
  80042093f3:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  80042093fa:	00 00 00 
  80042093fd:	0f b6 00             	movzbl (%rax),%eax
  8004209400:	83 f0 01             	xor    $0x1,%eax
  8004209403:	84 c0                	test   %al,%al
  8004209405:	74 05                	je     800420940c <irq_setmask_8259A+0x38>
  8004209407:	e9 b7 00 00 00       	jmpq   80042094c3 <irq_setmask_8259A+0xef>
  800420940c:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209410:	0f b6 c0             	movzbl %al,%eax
  8004209413:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  800420941a:	88 45 f7             	mov    %al,-0x9(%rbp)
  800420941d:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209421:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209424:	ee                   	out    %al,(%dx)
  8004209425:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209429:	66 c1 e8 08          	shr    $0x8,%ax
  800420942d:	0f b6 c0             	movzbl %al,%eax
  8004209430:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209437:	88 45 ef             	mov    %al,-0x11(%rbp)
  800420943a:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420943e:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209441:	ee                   	out    %al,(%dx)
  8004209442:	48 bf b6 9d 21 04 80 	movabs $0x8004219db6,%rdi
  8004209449:	00 00 00 
  800420944c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209451:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004209458:	00 00 00 
  800420945b:	ff d2                	callq  *%rdx
  800420945d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209464:	eb 3c                	jmp    80042094a2 <irq_setmask_8259A+0xce>
  8004209466:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  800420946a:	f7 d0                	not    %eax
  800420946c:	89 c2                	mov    %eax,%edx
  800420946e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209471:	89 c1                	mov    %eax,%ecx
  8004209473:	d3 fa                	sar    %cl,%edx
  8004209475:	89 d0                	mov    %edx,%eax
  8004209477:	83 e0 01             	and    $0x1,%eax
  800420947a:	85 c0                	test   %eax,%eax
  800420947c:	74 20                	je     800420949e <irq_setmask_8259A+0xca>
  800420947e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209481:	89 c6                	mov    %eax,%esi
  8004209483:	48 bf ca 9d 21 04 80 	movabs $0x8004219dca,%rdi
  800420948a:	00 00 00 
  800420948d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209492:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004209499:	00 00 00 
  800420949c:	ff d2                	callq  *%rdx
  800420949e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042094a2:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042094a6:	7e be                	jle    8004209466 <irq_setmask_8259A+0x92>
  80042094a8:	48 bf ce 9d 21 04 80 	movabs $0x8004219dce,%rdi
  80042094af:	00 00 00 
  80042094b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094b7:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042094be:	00 00 00 
  80042094c1:	ff d2                	callq  *%rdx
  80042094c3:	c9                   	leaveq 
  80042094c4:	c3                   	retq   

00000080042094c5 <irq_eoi>:
  80042094c5:	55                   	push   %rbp
  80042094c6:	48 89 e5             	mov    %rsp,%rbp
  80042094c9:	48 83 ec 10          	sub    $0x10,%rsp
  80042094cd:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  80042094d4:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  80042094d8:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042094dc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042094df:	ee                   	out    %al,(%dx)
  80042094e0:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  80042094e7:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  80042094eb:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042094ef:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042094f2:	ee                   	out    %al,(%dx)
  80042094f3:	c9                   	leaveq 
  80042094f4:	c3                   	retq   

00000080042094f5 <putch>:
  80042094f5:	55                   	push   %rbp
  80042094f6:	48 89 e5             	mov    %rsp,%rbp
  80042094f9:	48 83 ec 10          	sub    $0x10,%rsp
  80042094fd:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209500:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209504:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209507:	89 c7                	mov    %eax,%edi
  8004209509:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  8004209510:	00 00 00 
  8004209513:	ff d0                	callq  *%rax
  8004209515:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209519:	48 83 c0 04          	add    $0x4,%rax
  800420951d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209521:	c9                   	leaveq 
  8004209522:	c3                   	retq   

0000008004209523 <vcprintf>:
  8004209523:	55                   	push   %rbp
  8004209524:	48 89 e5             	mov    %rsp,%rbp
  8004209527:	48 83 ec 30          	sub    $0x30,%rsp
  800420952b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420952f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209533:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420953a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420953e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209542:	48 8b 0a             	mov    (%rdx),%rcx
  8004209545:	48 89 08             	mov    %rcx,(%rax)
  8004209548:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420954c:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209550:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209554:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209558:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  800420955c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209560:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209564:	48 89 c6             	mov    %rax,%rsi
  8004209567:	48 bf f5 94 20 04 80 	movabs $0x80042094f5,%rdi
  800420956e:	00 00 00 
  8004209571:	48 b8 e0 f3 20 04 80 	movabs $0x800420f3e0,%rax
  8004209578:	00 00 00 
  800420957b:	ff d0                	callq  *%rax
  800420957d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209580:	c9                   	leaveq 
  8004209581:	c3                   	retq   

0000008004209582 <cprintf>:
  8004209582:	55                   	push   %rbp
  8004209583:	48 89 e5             	mov    %rsp,%rbp
  8004209586:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  800420958d:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209594:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  800420959b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042095a2:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042095a9:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042095b0:	84 c0                	test   %al,%al
  80042095b2:	74 20                	je     80042095d4 <cprintf+0x52>
  80042095b4:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042095b8:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042095bc:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042095c0:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042095c4:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042095c8:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042095cc:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042095d0:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042095d4:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  80042095db:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  80042095e2:	00 00 00 
  80042095e5:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  80042095ec:	00 00 00 
  80042095ef:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042095f3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042095fa:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209601:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209608:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420960f:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209616:	48 8b 0a             	mov    (%rdx),%rcx
  8004209619:	48 89 08             	mov    %rcx,(%rax)
  800420961c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209620:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209624:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209628:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420962c:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209633:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420963a:	48 89 d6             	mov    %rdx,%rsi
  800420963d:	48 89 c7             	mov    %rax,%rdi
  8004209640:	48 b8 23 95 20 04 80 	movabs $0x8004209523,%rax
  8004209647:	00 00 00 
  800420964a:	ff d0                	callq  *%rax
  800420964c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209652:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209658:	c9                   	leaveq 
  8004209659:	c3                   	retq   

000000800420965a <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420965a:	55                   	push   %rbp
  800420965b:	48 89 e5             	mov    %rsp,%rbp
  800420965e:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209662:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209666:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209669:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420966d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209670:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209674:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209677:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420967a:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420967d:	c9                   	leaveq 
  800420967e:	c3                   	retq   

000000800420967f <lock_kernel>:
  800420967f:	55                   	push   %rbp
  8004209680:	48 89 e5             	mov    %rsp,%rbp
  8004209683:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420968a:	00 00 00 
  800420968d:	48 b8 5d 73 21 04 80 	movabs $0x800421735d,%rax
  8004209694:	00 00 00 
  8004209697:	ff d0                	callq  *%rax
  8004209699:	5d                   	pop    %rbp
  800420969a:	c3                   	retq   

000000800420969b <trapname>:
  800420969b:	55                   	push   %rbp
  800420969c:	48 89 e5             	mov    %rsp,%rbp
  800420969f:	48 83 ec 04          	sub    $0x4,%rsp
  80042096a3:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042096a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042096a9:	83 f8 13             	cmp    $0x13,%eax
  80042096ac:	77 16                	ja     80042096c4 <trapname+0x29>
  80042096ae:	48 b8 e0 a1 21 04 80 	movabs $0x800421a1e0,%rax
  80042096b5:	00 00 00 
  80042096b8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042096bb:	48 63 d2             	movslq %edx,%rdx
  80042096be:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042096c2:	eb 34                	jmp    80042096f8 <trapname+0x5d>
  80042096c4:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  80042096c8:	75 0c                	jne    80042096d6 <trapname+0x3b>
  80042096ca:	48 b8 e0 9d 21 04 80 	movabs $0x8004219de0,%rax
  80042096d1:	00 00 00 
  80042096d4:	eb 22                	jmp    80042096f8 <trapname+0x5d>
  80042096d6:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  80042096da:	7e 12                	jle    80042096ee <trapname+0x53>
  80042096dc:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  80042096e0:	7f 0c                	jg     80042096ee <trapname+0x53>
  80042096e2:	48 b8 ec 9d 21 04 80 	movabs $0x8004219dec,%rax
  80042096e9:	00 00 00 
  80042096ec:	eb 0a                	jmp    80042096f8 <trapname+0x5d>
  80042096ee:	48 b8 ff 9d 21 04 80 	movabs $0x8004219dff,%rax
  80042096f5:	00 00 00 
  80042096f8:	c9                   	leaveq 
  80042096f9:	c3                   	retq   

00000080042096fa <trap_init>:
  80042096fa:	55                   	push   %rbp
  80042096fb:	48 89 e5             	mov    %rsp,%rbp
  80042096fe:	48 83 ec 10          	sub    $0x10,%rsp
  8004209702:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209709:	e9 7d 01 00 00       	jmpq   800420988b <trap_init+0x191>
  800420970e:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  8004209715:	00 00 00 
  8004209718:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420971f:	00 00 00 
  8004209722:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209725:	48 63 c9             	movslq %ecx,%rcx
  8004209728:	48 c1 e1 04          	shl    $0x4,%rcx
  800420972c:	48 01 ca             	add    %rcx,%rdx
  800420972f:	66 89 02             	mov    %ax,(%rdx)
  8004209732:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209739:	00 00 00 
  800420973c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420973f:	48 63 d2             	movslq %edx,%rdx
  8004209742:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209746:	48 01 d0             	add    %rdx,%rax
  8004209749:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  800420974f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209756:	00 00 00 
  8004209759:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420975c:	48 63 d2             	movslq %edx,%rdx
  800420975f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209763:	48 01 d0             	add    %rdx,%rax
  8004209766:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  800420976a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420976d:	88 50 04             	mov    %dl,0x4(%rax)
  8004209770:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209777:	00 00 00 
  800420977a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420977d:	48 63 d2             	movslq %edx,%rdx
  8004209780:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209784:	48 01 d0             	add    %rdx,%rax
  8004209787:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  800420978b:	83 e2 07             	and    $0x7,%edx
  800420978e:	88 50 04             	mov    %dl,0x4(%rax)
  8004209791:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209798:	00 00 00 
  800420979b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420979e:	48 63 d2             	movslq %edx,%rdx
  80042097a1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097a5:	48 01 d0             	add    %rdx,%rax
  80042097a8:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097ac:	83 e2 f0             	and    $0xfffffff0,%edx
  80042097af:	83 ca 0e             	or     $0xe,%edx
  80042097b2:	88 50 05             	mov    %dl,0x5(%rax)
  80042097b5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097bc:	00 00 00 
  80042097bf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097c2:	48 63 d2             	movslq %edx,%rdx
  80042097c5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097c9:	48 01 d0             	add    %rdx,%rax
  80042097cc:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097d0:	83 e2 ef             	and    $0xffffffef,%edx
  80042097d3:	88 50 05             	mov    %dl,0x5(%rax)
  80042097d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097dd:	00 00 00 
  80042097e0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097e3:	48 63 d2             	movslq %edx,%rdx
  80042097e6:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097ea:	48 01 d0             	add    %rdx,%rax
  80042097ed:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097f1:	83 e2 9f             	and    $0xffffff9f,%edx
  80042097f4:	88 50 05             	mov    %dl,0x5(%rax)
  80042097f7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097fe:	00 00 00 
  8004209801:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209804:	48 63 d2             	movslq %edx,%rdx
  8004209807:	48 c1 e2 04          	shl    $0x4,%rdx
  800420980b:	48 01 d0             	add    %rdx,%rax
  800420980e:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209812:	83 ca 80             	or     $0xffffff80,%edx
  8004209815:	88 50 05             	mov    %dl,0x5(%rax)
  8004209818:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  800420981f:	00 00 00 
  8004209822:	48 c1 e8 10          	shr    $0x10,%rax
  8004209826:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420982d:	00 00 00 
  8004209830:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209833:	48 63 c9             	movslq %ecx,%rcx
  8004209836:	48 c1 e1 04          	shl    $0x4,%rcx
  800420983a:	48 01 ca             	add    %rcx,%rdx
  800420983d:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209841:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  8004209848:	00 00 00 
  800420984b:	48 c1 e8 20          	shr    $0x20,%rax
  800420984f:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  8004209856:	00 00 00 
  8004209859:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420985c:	48 63 c9             	movslq %ecx,%rcx
  800420985f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209863:	48 01 ca             	add    %rcx,%rdx
  8004209866:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209869:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209870:	00 00 00 
  8004209873:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209876:	48 63 d2             	movslq %edx,%rdx
  8004209879:	48 c1 e2 04          	shl    $0x4,%rdx
  800420987d:	48 01 d0             	add    %rdx,%rax
  8004209880:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209887:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420988b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420988e:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209893:	0f 86 75 fe ff ff    	jbe    800420970e <trap_init+0x14>
  8004209899:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  80042098a0:	00 00 00 
  80042098a3:	89 c2                	mov    %eax,%edx
  80042098a5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098ac:	00 00 00 
  80042098af:	66 89 10             	mov    %dx,(%rax)
  80042098b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098b9:	00 00 00 
  80042098bc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  80042098c2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098c9:	00 00 00 
  80042098cc:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042098d0:	83 e2 f8             	and    $0xfffffff8,%edx
  80042098d3:	88 50 04             	mov    %dl,0x4(%rax)
  80042098d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098dd:	00 00 00 
  80042098e0:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042098e4:	83 e2 07             	and    $0x7,%edx
  80042098e7:	88 50 04             	mov    %dl,0x4(%rax)
  80042098ea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098f1:	00 00 00 
  80042098f4:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042098f8:	83 e2 f0             	and    $0xfffffff0,%edx
  80042098fb:	83 ca 0e             	or     $0xe,%edx
  80042098fe:	88 50 05             	mov    %dl,0x5(%rax)
  8004209901:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209908:	00 00 00 
  800420990b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420990f:	83 e2 ef             	and    $0xffffffef,%edx
  8004209912:	88 50 05             	mov    %dl,0x5(%rax)
  8004209915:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420991c:	00 00 00 
  800420991f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209923:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209926:	88 50 05             	mov    %dl,0x5(%rax)
  8004209929:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209930:	00 00 00 
  8004209933:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209937:	83 ca 80             	or     $0xffffff80,%edx
  800420993a:	88 50 05             	mov    %dl,0x5(%rax)
  800420993d:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  8004209944:	00 00 00 
  8004209947:	48 c1 e8 10          	shr    $0x10,%rax
  800420994b:	89 c2                	mov    %eax,%edx
  800420994d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209954:	00 00 00 
  8004209957:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420995b:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  8004209962:	00 00 00 
  8004209965:	48 c1 e8 20          	shr    $0x20,%rax
  8004209969:	89 c2                	mov    %eax,%edx
  800420996b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209972:	00 00 00 
  8004209975:	89 50 08             	mov    %edx,0x8(%rax)
  8004209978:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420997f:	00 00 00 
  8004209982:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209989:	48 b8 ca d0 20 04 80 	movabs $0x800420d0ca,%rax
  8004209990:	00 00 00 
  8004209993:	89 c2                	mov    %eax,%edx
  8004209995:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420999c:	00 00 00 
  800420999f:	66 89 50 10          	mov    %dx,0x10(%rax)
  80042099a3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099aa:	00 00 00 
  80042099ad:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  80042099b3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099ba:	00 00 00 
  80042099bd:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  80042099c1:	83 e2 f8             	and    $0xfffffff8,%edx
  80042099c4:	88 50 14             	mov    %dl,0x14(%rax)
  80042099c7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099ce:	00 00 00 
  80042099d1:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  80042099d5:	83 e2 07             	and    $0x7,%edx
  80042099d8:	88 50 14             	mov    %dl,0x14(%rax)
  80042099db:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099e2:	00 00 00 
  80042099e5:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  80042099e9:	83 e2 f0             	and    $0xfffffff0,%edx
  80042099ec:	83 ca 0e             	or     $0xe,%edx
  80042099ef:	88 50 15             	mov    %dl,0x15(%rax)
  80042099f2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099f9:	00 00 00 
  80042099fc:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a00:	83 e2 ef             	and    $0xffffffef,%edx
  8004209a03:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a06:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a0d:	00 00 00 
  8004209a10:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a14:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209a17:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a1a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a21:	00 00 00 
  8004209a24:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a28:	83 ca 80             	or     $0xffffff80,%edx
  8004209a2b:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a2e:	48 b8 ca d0 20 04 80 	movabs $0x800420d0ca,%rax
  8004209a35:	00 00 00 
  8004209a38:	48 c1 e8 10          	shr    $0x10,%rax
  8004209a3c:	89 c2                	mov    %eax,%edx
  8004209a3e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a45:	00 00 00 
  8004209a48:	66 89 50 16          	mov    %dx,0x16(%rax)
  8004209a4c:	48 b8 ca d0 20 04 80 	movabs $0x800420d0ca,%rax
  8004209a53:	00 00 00 
  8004209a56:	48 c1 e8 20          	shr    $0x20,%rax
  8004209a5a:	89 c2                	mov    %eax,%edx
  8004209a5c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a63:	00 00 00 
  8004209a66:	89 50 18             	mov    %edx,0x18(%rax)
  8004209a69:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a70:	00 00 00 
  8004209a73:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  8004209a7a:	48 b8 d4 d0 20 04 80 	movabs $0x800420d0d4,%rax
  8004209a81:	00 00 00 
  8004209a84:	89 c2                	mov    %eax,%edx
  8004209a86:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a8d:	00 00 00 
  8004209a90:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004209a94:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a9b:	00 00 00 
  8004209a9e:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004209aa4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209aab:	00 00 00 
  8004209aae:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209ab2:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ab5:	88 50 24             	mov    %dl,0x24(%rax)
  8004209ab8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209abf:	00 00 00 
  8004209ac2:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209ac6:	83 e2 07             	and    $0x7,%edx
  8004209ac9:	88 50 24             	mov    %dl,0x24(%rax)
  8004209acc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ad3:	00 00 00 
  8004209ad6:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209ada:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209add:	83 ca 0e             	or     $0xe,%edx
  8004209ae0:	88 50 25             	mov    %dl,0x25(%rax)
  8004209ae3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209aea:	00 00 00 
  8004209aed:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209af1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209af4:	88 50 25             	mov    %dl,0x25(%rax)
  8004209af7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209afe:	00 00 00 
  8004209b01:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b05:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209b08:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b0b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b12:	00 00 00 
  8004209b15:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b19:	83 ca 80             	or     $0xffffff80,%edx
  8004209b1c:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b1f:	48 b8 d4 d0 20 04 80 	movabs $0x800420d0d4,%rax
  8004209b26:	00 00 00 
  8004209b29:	48 c1 e8 10          	shr    $0x10,%rax
  8004209b2d:	89 c2                	mov    %eax,%edx
  8004209b2f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b36:	00 00 00 
  8004209b39:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004209b3d:	48 b8 d4 d0 20 04 80 	movabs $0x800420d0d4,%rax
  8004209b44:	00 00 00 
  8004209b47:	48 c1 e8 20          	shr    $0x20,%rax
  8004209b4b:	89 c2                	mov    %eax,%edx
  8004209b4d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b54:	00 00 00 
  8004209b57:	89 50 28             	mov    %edx,0x28(%rax)
  8004209b5a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b61:	00 00 00 
  8004209b64:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  8004209b6b:	48 b8 de d0 20 04 80 	movabs $0x800420d0de,%rax
  8004209b72:	00 00 00 
  8004209b75:	89 c2                	mov    %eax,%edx
  8004209b77:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b7e:	00 00 00 
  8004209b81:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004209b85:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b8c:	00 00 00 
  8004209b8f:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004209b95:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b9c:	00 00 00 
  8004209b9f:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209ba3:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ba6:	88 50 34             	mov    %dl,0x34(%rax)
  8004209ba9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bb0:	00 00 00 
  8004209bb3:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209bb7:	83 e2 07             	and    $0x7,%edx
  8004209bba:	88 50 34             	mov    %dl,0x34(%rax)
  8004209bbd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bc4:	00 00 00 
  8004209bc7:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209bcb:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209bce:	83 ca 0e             	or     $0xe,%edx
  8004209bd1:	88 50 35             	mov    %dl,0x35(%rax)
  8004209bd4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bdb:	00 00 00 
  8004209bde:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209be2:	83 e2 ef             	and    $0xffffffef,%edx
  8004209be5:	88 50 35             	mov    %dl,0x35(%rax)
  8004209be8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bef:	00 00 00 
  8004209bf2:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209bf6:	83 ca 60             	or     $0x60,%edx
  8004209bf9:	88 50 35             	mov    %dl,0x35(%rax)
  8004209bfc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c03:	00 00 00 
  8004209c06:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c0a:	83 ca 80             	or     $0xffffff80,%edx
  8004209c0d:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c10:	48 b8 de d0 20 04 80 	movabs $0x800420d0de,%rax
  8004209c17:	00 00 00 
  8004209c1a:	48 c1 e8 10          	shr    $0x10,%rax
  8004209c1e:	89 c2                	mov    %eax,%edx
  8004209c20:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c27:	00 00 00 
  8004209c2a:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004209c2e:	48 b8 de d0 20 04 80 	movabs $0x800420d0de,%rax
  8004209c35:	00 00 00 
  8004209c38:	48 c1 e8 20          	shr    $0x20,%rax
  8004209c3c:	89 c2                	mov    %eax,%edx
  8004209c3e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c45:	00 00 00 
  8004209c48:	89 50 38             	mov    %edx,0x38(%rax)
  8004209c4b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c52:	00 00 00 
  8004209c55:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  8004209c5c:	48 b8 e8 d0 20 04 80 	movabs $0x800420d0e8,%rax
  8004209c63:	00 00 00 
  8004209c66:	89 c2                	mov    %eax,%edx
  8004209c68:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c6f:	00 00 00 
  8004209c72:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004209c76:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c7d:	00 00 00 
  8004209c80:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004209c86:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c8d:	00 00 00 
  8004209c90:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209c94:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209c97:	88 50 44             	mov    %dl,0x44(%rax)
  8004209c9a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ca1:	00 00 00 
  8004209ca4:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209ca8:	83 e2 07             	and    $0x7,%edx
  8004209cab:	88 50 44             	mov    %dl,0x44(%rax)
  8004209cae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cb5:	00 00 00 
  8004209cb8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cbc:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209cbf:	83 ca 0e             	or     $0xe,%edx
  8004209cc2:	88 50 45             	mov    %dl,0x45(%rax)
  8004209cc5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ccc:	00 00 00 
  8004209ccf:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cd3:	83 e2 ef             	and    $0xffffffef,%edx
  8004209cd6:	88 50 45             	mov    %dl,0x45(%rax)
  8004209cd9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ce0:	00 00 00 
  8004209ce3:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209ce7:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209cea:	88 50 45             	mov    %dl,0x45(%rax)
  8004209ced:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cf4:	00 00 00 
  8004209cf7:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cfb:	83 ca 80             	or     $0xffffff80,%edx
  8004209cfe:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d01:	48 b8 e8 d0 20 04 80 	movabs $0x800420d0e8,%rax
  8004209d08:	00 00 00 
  8004209d0b:	48 c1 e8 10          	shr    $0x10,%rax
  8004209d0f:	89 c2                	mov    %eax,%edx
  8004209d11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d18:	00 00 00 
  8004209d1b:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004209d1f:	48 b8 e8 d0 20 04 80 	movabs $0x800420d0e8,%rax
  8004209d26:	00 00 00 
  8004209d29:	48 c1 e8 20          	shr    $0x20,%rax
  8004209d2d:	89 c2                	mov    %eax,%edx
  8004209d2f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d36:	00 00 00 
  8004209d39:	89 50 48             	mov    %edx,0x48(%rax)
  8004209d3c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d43:	00 00 00 
  8004209d46:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  8004209d4d:	48 b8 f2 d0 20 04 80 	movabs $0x800420d0f2,%rax
  8004209d54:	00 00 00 
  8004209d57:	89 c2                	mov    %eax,%edx
  8004209d59:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d60:	00 00 00 
  8004209d63:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004209d67:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d6e:	00 00 00 
  8004209d71:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004209d77:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d7e:	00 00 00 
  8004209d81:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209d85:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209d88:	88 50 54             	mov    %dl,0x54(%rax)
  8004209d8b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d92:	00 00 00 
  8004209d95:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209d99:	83 e2 07             	and    $0x7,%edx
  8004209d9c:	88 50 54             	mov    %dl,0x54(%rax)
  8004209d9f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209da6:	00 00 00 
  8004209da9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dad:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209db0:	83 ca 0e             	or     $0xe,%edx
  8004209db3:	88 50 55             	mov    %dl,0x55(%rax)
  8004209db6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dbd:	00 00 00 
  8004209dc0:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dc4:	83 e2 ef             	and    $0xffffffef,%edx
  8004209dc7:	88 50 55             	mov    %dl,0x55(%rax)
  8004209dca:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dd1:	00 00 00 
  8004209dd4:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dd8:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ddb:	88 50 55             	mov    %dl,0x55(%rax)
  8004209dde:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209de5:	00 00 00 
  8004209de8:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dec:	83 ca 80             	or     $0xffffff80,%edx
  8004209def:	88 50 55             	mov    %dl,0x55(%rax)
  8004209df2:	48 b8 f2 d0 20 04 80 	movabs $0x800420d0f2,%rax
  8004209df9:	00 00 00 
  8004209dfc:	48 c1 e8 10          	shr    $0x10,%rax
  8004209e00:	89 c2                	mov    %eax,%edx
  8004209e02:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e09:	00 00 00 
  8004209e0c:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004209e10:	48 b8 f2 d0 20 04 80 	movabs $0x800420d0f2,%rax
  8004209e17:	00 00 00 
  8004209e1a:	48 c1 e8 20          	shr    $0x20,%rax
  8004209e1e:	89 c2                	mov    %eax,%edx
  8004209e20:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e27:	00 00 00 
  8004209e2a:	89 50 58             	mov    %edx,0x58(%rax)
  8004209e2d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e34:	00 00 00 
  8004209e37:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  8004209e3e:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  8004209e45:	00 00 00 
  8004209e48:	89 c2                	mov    %eax,%edx
  8004209e4a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e51:	00 00 00 
  8004209e54:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004209e58:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e5f:	00 00 00 
  8004209e62:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004209e68:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e6f:	00 00 00 
  8004209e72:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e76:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e79:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e7c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e83:	00 00 00 
  8004209e86:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e8a:	83 e2 07             	and    $0x7,%edx
  8004209e8d:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e90:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e97:	00 00 00 
  8004209e9a:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209e9e:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ea1:	83 ca 0e             	or     $0xe,%edx
  8004209ea4:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ea7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209eae:	00 00 00 
  8004209eb1:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209eb5:	83 e2 ef             	and    $0xffffffef,%edx
  8004209eb8:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ebb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ec2:	00 00 00 
  8004209ec5:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209ec9:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ecc:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ecf:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ed6:	00 00 00 
  8004209ed9:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209edd:	83 ca 80             	or     $0xffffff80,%edx
  8004209ee0:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ee3:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  8004209eea:	00 00 00 
  8004209eed:	48 c1 e8 10          	shr    $0x10,%rax
  8004209ef1:	89 c2                	mov    %eax,%edx
  8004209ef3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209efa:	00 00 00 
  8004209efd:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004209f01:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  8004209f08:	00 00 00 
  8004209f0b:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f0f:	89 c2                	mov    %eax,%edx
  8004209f11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f18:	00 00 00 
  8004209f1b:	89 50 68             	mov    %edx,0x68(%rax)
  8004209f1e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f25:	00 00 00 
  8004209f28:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  8004209f2f:	48 b8 06 d1 20 04 80 	movabs $0x800420d106,%rax
  8004209f36:	00 00 00 
  8004209f39:	89 c2                	mov    %eax,%edx
  8004209f3b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f42:	00 00 00 
  8004209f45:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004209f49:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f50:	00 00 00 
  8004209f53:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004209f59:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f60:	00 00 00 
  8004209f63:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f67:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209f6a:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f6d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f74:	00 00 00 
  8004209f77:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f7b:	83 e2 07             	and    $0x7,%edx
  8004209f7e:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f81:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f88:	00 00 00 
  8004209f8b:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f8f:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209f92:	83 ca 0e             	or     $0xe,%edx
  8004209f95:	88 50 75             	mov    %dl,0x75(%rax)
  8004209f98:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f9f:	00 00 00 
  8004209fa2:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fa6:	83 e2 ef             	and    $0xffffffef,%edx
  8004209fa9:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fb3:	00 00 00 
  8004209fb6:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fba:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209fbd:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fc0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fc7:	00 00 00 
  8004209fca:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fce:	83 ca 80             	or     $0xffffff80,%edx
  8004209fd1:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fd4:	48 b8 06 d1 20 04 80 	movabs $0x800420d106,%rax
  8004209fdb:	00 00 00 
  8004209fde:	48 c1 e8 10          	shr    $0x10,%rax
  8004209fe2:	89 c2                	mov    %eax,%edx
  8004209fe4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209feb:	00 00 00 
  8004209fee:	66 89 50 76          	mov    %dx,0x76(%rax)
  8004209ff2:	48 b8 06 d1 20 04 80 	movabs $0x800420d106,%rax
  8004209ff9:	00 00 00 
  8004209ffc:	48 c1 e8 20          	shr    $0x20,%rax
  800420a000:	89 c2                	mov    %eax,%edx
  800420a002:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a009:	00 00 00 
  800420a00c:	89 50 78             	mov    %edx,0x78(%rax)
  800420a00f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a016:	00 00 00 
  800420a019:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a020:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  800420a027:	00 00 00 
  800420a02a:	89 c2                	mov    %eax,%edx
  800420a02c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a033:	00 00 00 
  800420a036:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a03d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a044:	00 00 00 
  800420a047:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a04e:	08 00 
  800420a050:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a057:	00 00 00 
  800420a05a:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a061:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a064:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a06a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a071:	00 00 00 
  800420a074:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a07b:	83 e2 07             	and    $0x7,%edx
  800420a07e:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a084:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a08b:	00 00 00 
  800420a08e:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a095:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a098:	83 ca 0e             	or     $0xe,%edx
  800420a09b:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0a1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0a8:	00 00 00 
  800420a0ab:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0b2:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0b5:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0bb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0c2:	00 00 00 
  800420a0c5:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0cc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a0cf:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0d5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0dc:	00 00 00 
  800420a0df:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0e6:	83 ca 80             	or     $0xffffff80,%edx
  800420a0e9:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0ef:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  800420a0f6:	00 00 00 
  800420a0f9:	48 c1 e8 10          	shr    $0x10,%rax
  800420a0fd:	89 c2                	mov    %eax,%edx
  800420a0ff:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a106:	00 00 00 
  800420a109:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a110:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  800420a117:	00 00 00 
  800420a11a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a11e:	89 c2                	mov    %eax,%edx
  800420a120:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a127:	00 00 00 
  800420a12a:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a130:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a137:	00 00 00 
  800420a13a:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a141:	00 00 00 
  800420a144:	48 b8 18 d1 20 04 80 	movabs $0x800420d118,%rax
  800420a14b:	00 00 00 
  800420a14e:	89 c2                	mov    %eax,%edx
  800420a150:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a157:	00 00 00 
  800420a15a:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a161:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a168:	00 00 00 
  800420a16b:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a172:	08 00 
  800420a174:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a17b:	00 00 00 
  800420a17e:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a185:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a188:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a18e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a195:	00 00 00 
  800420a198:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a19f:	83 e2 07             	and    $0x7,%edx
  800420a1a2:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a1a8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1af:	00 00 00 
  800420a1b2:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1b9:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1bc:	83 ca 0e             	or     $0xe,%edx
  800420a1bf:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1cc:	00 00 00 
  800420a1cf:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1d6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1d9:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1df:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1e6:	00 00 00 
  800420a1e9:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1f0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a1f3:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1f9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a200:	00 00 00 
  800420a203:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a20a:	83 ca 80             	or     $0xffffff80,%edx
  800420a20d:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a213:	48 b8 18 d1 20 04 80 	movabs $0x800420d118,%rax
  800420a21a:	00 00 00 
  800420a21d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a221:	89 c2                	mov    %eax,%edx
  800420a223:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a22a:	00 00 00 
  800420a22d:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a234:	48 b8 18 d1 20 04 80 	movabs $0x800420d118,%rax
  800420a23b:	00 00 00 
  800420a23e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a242:	89 c2                	mov    %eax,%edx
  800420a244:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a24b:	00 00 00 
  800420a24e:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a254:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a25b:	00 00 00 
  800420a25e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a265:	00 00 00 
  800420a268:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a26f:	00 00 00 
  800420a272:	89 c2                	mov    %eax,%edx
  800420a274:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a27b:	00 00 00 
  800420a27e:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a285:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a28c:	00 00 00 
  800420a28f:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a296:	08 00 
  800420a298:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a29f:	00 00 00 
  800420a2a2:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a2a9:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2ac:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a2b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a2c3:	83 e2 07             	and    $0x7,%edx
  800420a2c6:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a2cc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2d3:	00 00 00 
  800420a2d6:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a2dd:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2e0:	83 ca 0e             	or     $0xe,%edx
  800420a2e3:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a2e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2f0:	00 00 00 
  800420a2f3:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a2fa:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2fd:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a303:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a30a:	00 00 00 
  800420a30d:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a314:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a317:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a31d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a324:	00 00 00 
  800420a327:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a32e:	83 ca 80             	or     $0xffffff80,%edx
  800420a331:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a337:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a33e:	00 00 00 
  800420a341:	48 c1 e8 10          	shr    $0x10,%rax
  800420a345:	89 c2                	mov    %eax,%edx
  800420a347:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a34e:	00 00 00 
  800420a351:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a358:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a35f:	00 00 00 
  800420a362:	48 c1 e8 20          	shr    $0x20,%rax
  800420a366:	89 c2                	mov    %eax,%edx
  800420a368:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a36f:	00 00 00 
  800420a372:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420a378:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a37f:	00 00 00 
  800420a382:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420a389:	00 00 00 
  800420a38c:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a393:	00 00 00 
  800420a396:	89 c2                	mov    %eax,%edx
  800420a398:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a39f:	00 00 00 
  800420a3a2:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420a3a9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3b0:	00 00 00 
  800420a3b3:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420a3ba:	08 00 
  800420a3bc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3c3:	00 00 00 
  800420a3c6:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a3cd:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a3d0:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a3d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3dd:	00 00 00 
  800420a3e0:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a3e7:	83 e2 07             	and    $0x7,%edx
  800420a3ea:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a3f0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3f7:	00 00 00 
  800420a3fa:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a401:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a404:	83 ca 0e             	or     $0xe,%edx
  800420a407:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a40d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a414:	00 00 00 
  800420a417:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a41e:	83 e2 ef             	and    $0xffffffef,%edx
  800420a421:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a427:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a42e:	00 00 00 
  800420a431:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a438:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a43b:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a441:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a448:	00 00 00 
  800420a44b:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a452:	83 ca 80             	or     $0xffffff80,%edx
  800420a455:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a45b:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a462:	00 00 00 
  800420a465:	48 c1 e8 10          	shr    $0x10,%rax
  800420a469:	89 c2                	mov    %eax,%edx
  800420a46b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a472:	00 00 00 
  800420a475:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420a47c:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a483:	00 00 00 
  800420a486:	48 c1 e8 20          	shr    $0x20,%rax
  800420a48a:	89 c2                	mov    %eax,%edx
  800420a48c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a493:	00 00 00 
  800420a496:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420a49c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4a3:	00 00 00 
  800420a4a6:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420a4ad:	00 00 00 
  800420a4b0:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a4b7:	00 00 00 
  800420a4ba:	89 c2                	mov    %eax,%edx
  800420a4bc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4c3:	00 00 00 
  800420a4c6:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420a4cd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4d4:	00 00 00 
  800420a4d7:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420a4de:	08 00 
  800420a4e0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4e7:	00 00 00 
  800420a4ea:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a4f1:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a4f4:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a4fa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a501:	00 00 00 
  800420a504:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a50b:	83 e2 07             	and    $0x7,%edx
  800420a50e:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a514:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a51b:	00 00 00 
  800420a51e:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a525:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a528:	83 ca 0e             	or     $0xe,%edx
  800420a52b:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a531:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a538:	00 00 00 
  800420a53b:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a542:	83 e2 ef             	and    $0xffffffef,%edx
  800420a545:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a54b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a552:	00 00 00 
  800420a555:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a55c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a55f:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a565:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a56c:	00 00 00 
  800420a56f:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a576:	83 ca 80             	or     $0xffffff80,%edx
  800420a579:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a57f:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a586:	00 00 00 
  800420a589:	48 c1 e8 10          	shr    $0x10,%rax
  800420a58d:	89 c2                	mov    %eax,%edx
  800420a58f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a596:	00 00 00 
  800420a599:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420a5a0:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a5a7:	00 00 00 
  800420a5aa:	48 c1 e8 20          	shr    $0x20,%rax
  800420a5ae:	89 c2                	mov    %eax,%edx
  800420a5b0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420a5c0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5c7:	00 00 00 
  800420a5ca:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420a5d1:	00 00 00 
  800420a5d4:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a5db:	00 00 00 
  800420a5de:	89 c2                	mov    %eax,%edx
  800420a5e0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5e7:	00 00 00 
  800420a5ea:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420a5f1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5f8:	00 00 00 
  800420a5fb:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420a602:	08 00 
  800420a604:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a60b:	00 00 00 
  800420a60e:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a615:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a618:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a61e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a625:	00 00 00 
  800420a628:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a62f:	83 e2 07             	and    $0x7,%edx
  800420a632:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a638:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a63f:	00 00 00 
  800420a642:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a649:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a64c:	83 ca 0e             	or     $0xe,%edx
  800420a64f:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a655:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a65c:	00 00 00 
  800420a65f:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a666:	83 e2 ef             	and    $0xffffffef,%edx
  800420a669:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a66f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a676:	00 00 00 
  800420a679:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a680:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a683:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a689:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a690:	00 00 00 
  800420a693:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a69a:	83 ca 80             	or     $0xffffff80,%edx
  800420a69d:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6a3:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a6aa:	00 00 00 
  800420a6ad:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6b1:	89 c2                	mov    %eax,%edx
  800420a6b3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6ba:	00 00 00 
  800420a6bd:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420a6c4:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a6cb:	00 00 00 
  800420a6ce:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6d2:	89 c2                	mov    %eax,%edx
  800420a6d4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6db:	00 00 00 
  800420a6de:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420a6e4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6eb:	00 00 00 
  800420a6ee:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420a6f5:	00 00 00 
  800420a6f8:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a6ff:	00 00 00 
  800420a702:	89 c2                	mov    %eax,%edx
  800420a704:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a70b:	00 00 00 
  800420a70e:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420a715:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a71c:	00 00 00 
  800420a71f:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420a726:	08 00 
  800420a728:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a72f:	00 00 00 
  800420a732:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a739:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a73c:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a742:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a749:	00 00 00 
  800420a74c:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a753:	83 e2 07             	and    $0x7,%edx
  800420a756:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a75c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a763:	00 00 00 
  800420a766:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a76d:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a770:	83 ca 0e             	or     $0xe,%edx
  800420a773:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a779:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a780:	00 00 00 
  800420a783:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a78a:	83 e2 ef             	and    $0xffffffef,%edx
  800420a78d:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a793:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a79a:	00 00 00 
  800420a79d:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7a4:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7a7:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7ad:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7b4:	00 00 00 
  800420a7b7:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7be:	83 ca 80             	or     $0xffffff80,%edx
  800420a7c1:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7c7:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a7ce:	00 00 00 
  800420a7d1:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7d5:	89 c2                	mov    %eax,%edx
  800420a7d7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7de:	00 00 00 
  800420a7e1:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420a7e8:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a7ef:	00 00 00 
  800420a7f2:	48 c1 e8 20          	shr    $0x20,%rax
  800420a7f6:	89 c2                	mov    %eax,%edx
  800420a7f8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7ff:	00 00 00 
  800420a802:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420a808:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a80f:	00 00 00 
  800420a812:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420a819:	00 00 00 
  800420a81c:	48 b8 46 d1 20 04 80 	movabs $0x800420d146,%rax
  800420a823:	00 00 00 
  800420a826:	89 c2                	mov    %eax,%edx
  800420a828:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a82f:	00 00 00 
  800420a832:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420a839:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a840:	00 00 00 
  800420a843:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420a84a:	08 00 
  800420a84c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a853:	00 00 00 
  800420a856:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a85d:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a860:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a866:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a86d:	00 00 00 
  800420a870:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a877:	83 e2 07             	and    $0x7,%edx
  800420a87a:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a880:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a887:	00 00 00 
  800420a88a:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a891:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a894:	83 ca 0e             	or     $0xe,%edx
  800420a897:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a89d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8a4:	00 00 00 
  800420a8a7:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8ae:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8b1:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8b7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8be:	00 00 00 
  800420a8c1:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8c8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8cb:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8d1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8d8:	00 00 00 
  800420a8db:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8e2:	83 ca 80             	or     $0xffffff80,%edx
  800420a8e5:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8eb:	48 b8 46 d1 20 04 80 	movabs $0x800420d146,%rax
  800420a8f2:	00 00 00 
  800420a8f5:	48 c1 e8 10          	shr    $0x10,%rax
  800420a8f9:	89 c2                	mov    %eax,%edx
  800420a8fb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a902:	00 00 00 
  800420a905:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420a90c:	48 b8 46 d1 20 04 80 	movabs $0x800420d146,%rax
  800420a913:	00 00 00 
  800420a916:	48 c1 e8 20          	shr    $0x20,%rax
  800420a91a:	89 c2                	mov    %eax,%edx
  800420a91c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a923:	00 00 00 
  800420a926:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420a92c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a933:	00 00 00 
  800420a936:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420a93d:	00 00 00 
  800420a940:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420a947:	00 00 00 
  800420a94a:	89 c2                	mov    %eax,%edx
  800420a94c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a953:	00 00 00 
  800420a956:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420a95d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a964:	00 00 00 
  800420a967:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420a96e:	08 00 
  800420a970:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a977:	00 00 00 
  800420a97a:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a981:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a984:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a98a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a991:	00 00 00 
  800420a994:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a99b:	83 e2 07             	and    $0x7,%edx
  800420a99e:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a9a4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9ab:	00 00 00 
  800420a9ae:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9b5:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9b8:	83 ca 0e             	or     $0xe,%edx
  800420a9bb:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9c1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9c8:	00 00 00 
  800420a9cb:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9d2:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9d5:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9db:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9e2:	00 00 00 
  800420a9e5:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9ec:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a9ef:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9f5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9fc:	00 00 00 
  800420a9ff:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa06:	83 ca 80             	or     $0xffffff80,%edx
  800420aa09:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa0f:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420aa16:	00 00 00 
  800420aa19:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa1d:	89 c2                	mov    %eax,%edx
  800420aa1f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa26:	00 00 00 
  800420aa29:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420aa30:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420aa37:	00 00 00 
  800420aa3a:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa3e:	89 c2                	mov    %eax,%edx
  800420aa40:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa47:	00 00 00 
  800420aa4a:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420aa50:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa57:	00 00 00 
  800420aa5a:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420aa61:	00 00 00 
  800420aa64:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420aa6b:	00 00 00 
  800420aa6e:	89 c2                	mov    %eax,%edx
  800420aa70:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa77:	00 00 00 
  800420aa7a:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420aa81:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa88:	00 00 00 
  800420aa8b:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420aa92:	08 00 
  800420aa94:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa9b:	00 00 00 
  800420aa9e:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aaa5:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aaa8:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aaae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aab5:	00 00 00 
  800420aab8:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aabf:	83 e2 07             	and    $0x7,%edx
  800420aac2:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aac8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aacf:	00 00 00 
  800420aad2:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aad9:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aadc:	83 ca 0e             	or     $0xe,%edx
  800420aadf:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aae5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aaec:	00 00 00 
  800420aaef:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aaf6:	83 e2 ef             	and    $0xffffffef,%edx
  800420aaf9:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aaff:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab06:	00 00 00 
  800420ab09:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab10:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab13:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab19:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab20:	00 00 00 
  800420ab23:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab2a:	83 ca 80             	or     $0xffffff80,%edx
  800420ab2d:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab33:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420ab3a:	00 00 00 
  800420ab3d:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab41:	89 c2                	mov    %eax,%edx
  800420ab43:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab4a:	00 00 00 
  800420ab4d:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420ab54:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420ab5b:	00 00 00 
  800420ab5e:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab62:	89 c2                	mov    %eax,%edx
  800420ab64:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab6b:	00 00 00 
  800420ab6e:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420ab74:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab7b:	00 00 00 
  800420ab7e:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420ab85:	00 00 00 
  800420ab88:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420ab8f:	00 00 00 
  800420ab92:	89 c2                	mov    %eax,%edx
  800420ab94:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab9b:	00 00 00 
  800420ab9e:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420aba5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abac:	00 00 00 
  800420abaf:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420abb6:	08 00 
  800420abb8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abbf:	00 00 00 
  800420abc2:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420abc9:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abcc:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420abd2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abd9:	00 00 00 
  800420abdc:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420abe3:	83 e2 07             	and    $0x7,%edx
  800420abe6:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420abec:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abf3:	00 00 00 
  800420abf6:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420abfd:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac00:	83 ca 0e             	or     $0xe,%edx
  800420ac03:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac09:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac10:	00 00 00 
  800420ac13:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac1a:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac1d:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac23:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac2a:	00 00 00 
  800420ac2d:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac34:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac37:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac3d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac44:	00 00 00 
  800420ac47:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac4e:	83 ca 80             	or     $0xffffff80,%edx
  800420ac51:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac57:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420ac5e:	00 00 00 
  800420ac61:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac65:	89 c2                	mov    %eax,%edx
  800420ac67:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac6e:	00 00 00 
  800420ac71:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420ac78:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420ac7f:	00 00 00 
  800420ac82:	48 c1 e8 20          	shr    $0x20,%rax
  800420ac86:	89 c2                	mov    %eax,%edx
  800420ac88:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac8f:	00 00 00 
  800420ac92:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420ac98:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac9f:	00 00 00 
  800420aca2:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420aca9:	00 00 00 
  800420acac:	48 b8 5c d1 20 04 80 	movabs $0x800420d15c,%rax
  800420acb3:	00 00 00 
  800420acb6:	89 c2                	mov    %eax,%edx
  800420acb8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acbf:	00 00 00 
  800420acc2:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420acc9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acd0:	00 00 00 
  800420acd3:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420acda:	08 00 
  800420acdc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ace3:	00 00 00 
  800420ace6:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420aced:	83 e2 f8             	and    $0xfffffff8,%edx
  800420acf0:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420acf6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acfd:	00 00 00 
  800420ad00:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad07:	83 e2 07             	and    $0x7,%edx
  800420ad0a:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad10:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad17:	00 00 00 
  800420ad1a:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad21:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad24:	83 ca 0e             	or     $0xe,%edx
  800420ad27:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad2d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad34:	00 00 00 
  800420ad37:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad3e:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad41:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad47:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad4e:	00 00 00 
  800420ad51:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad58:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad5b:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad61:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad68:	00 00 00 
  800420ad6b:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad72:	83 ca 80             	or     $0xffffff80,%edx
  800420ad75:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad7b:	48 b8 5c d1 20 04 80 	movabs $0x800420d15c,%rax
  800420ad82:	00 00 00 
  800420ad85:	48 c1 e8 10          	shr    $0x10,%rax
  800420ad89:	89 c2                	mov    %eax,%edx
  800420ad8b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad92:	00 00 00 
  800420ad95:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420ad9c:	48 b8 5c d1 20 04 80 	movabs $0x800420d15c,%rax
  800420ada3:	00 00 00 
  800420ada6:	48 c1 e8 20          	shr    $0x20,%rax
  800420adaa:	89 c2                	mov    %eax,%edx
  800420adac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adb3:	00 00 00 
  800420adb6:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420adbc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adc3:	00 00 00 
  800420adc6:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420adcd:	00 00 00 
  800420add0:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  800420add7:	00 00 00 
  800420adda:	89 c2                	mov    %eax,%edx
  800420addc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ade3:	00 00 00 
  800420ade6:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420aded:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adf4:	00 00 00 
  800420adf7:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420adfe:	08 00 
  800420ae00:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae07:	00 00 00 
  800420ae0a:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae11:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae14:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae1a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae21:	00 00 00 
  800420ae24:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae2b:	83 e2 07             	and    $0x7,%edx
  800420ae2e:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae34:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae3b:	00 00 00 
  800420ae3e:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae45:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae48:	83 ca 0e             	or     $0xe,%edx
  800420ae4b:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae51:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae58:	00 00 00 
  800420ae5b:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae62:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae65:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae6b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae72:	00 00 00 
  800420ae75:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae7c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae7f:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae85:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae8c:	00 00 00 
  800420ae8f:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae96:	83 ca 80             	or     $0xffffff80,%edx
  800420ae99:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae9f:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  800420aea6:	00 00 00 
  800420aea9:	48 c1 e8 10          	shr    $0x10,%rax
  800420aead:	89 c2                	mov    %eax,%edx
  800420aeaf:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aeb6:	00 00 00 
  800420aeb9:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420aec0:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  800420aec7:	00 00 00 
  800420aeca:	48 c1 e8 20          	shr    $0x20,%rax
  800420aece:	89 c2                	mov    %eax,%edx
  800420aed0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aed7:	00 00 00 
  800420aeda:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420aee0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aee7:	00 00 00 
  800420aeea:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420aef1:	00 00 00 
  800420aef4:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420aefb:	00 00 00 
  800420aefe:	89 c2                	mov    %eax,%edx
  800420af00:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af07:	00 00 00 
  800420af0a:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420af11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af18:	00 00 00 
  800420af1b:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420af22:	08 00 
  800420af24:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af2b:	00 00 00 
  800420af2e:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af35:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af38:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af3e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af45:	00 00 00 
  800420af48:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af4f:	83 e2 07             	and    $0x7,%edx
  800420af52:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af58:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af5f:	00 00 00 
  800420af62:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af69:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af6c:	83 ca 0e             	or     $0xe,%edx
  800420af6f:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af75:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af7c:	00 00 00 
  800420af7f:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af86:	83 e2 ef             	and    $0xffffffef,%edx
  800420af89:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af8f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af96:	00 00 00 
  800420af99:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afa0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afa3:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afa9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afb0:	00 00 00 
  800420afb3:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afba:	83 ca 80             	or     $0xffffff80,%edx
  800420afbd:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afc3:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420afca:	00 00 00 
  800420afcd:	48 c1 e8 10          	shr    $0x10,%rax
  800420afd1:	89 c2                	mov    %eax,%edx
  800420afd3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afda:	00 00 00 
  800420afdd:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420afe4:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420afeb:	00 00 00 
  800420afee:	48 c1 e8 20          	shr    $0x20,%rax
  800420aff2:	89 c2                	mov    %eax,%edx
  800420aff4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420affb:	00 00 00 
  800420affe:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b004:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b00b:	00 00 00 
  800420b00e:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b015:	00 00 00 
  800420b018:	48 b8 6e d1 20 04 80 	movabs $0x800420d16e,%rax
  800420b01f:	00 00 00 
  800420b022:	89 c2                	mov    %eax,%edx
  800420b024:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b02b:	00 00 00 
  800420b02e:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b035:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b03c:	00 00 00 
  800420b03f:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b046:	08 00 
  800420b048:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b04f:	00 00 00 
  800420b052:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b059:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b05c:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b062:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b069:	00 00 00 
  800420b06c:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b073:	83 e2 07             	and    $0x7,%edx
  800420b076:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b07c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b083:	00 00 00 
  800420b086:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b08d:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b090:	83 ca 0e             	or     $0xe,%edx
  800420b093:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b099:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0a0:	00 00 00 
  800420b0a3:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0aa:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ad:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0b3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0ba:	00 00 00 
  800420b0bd:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0c4:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0c7:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0cd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0d4:	00 00 00 
  800420b0d7:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0de:	83 ca 80             	or     $0xffffff80,%edx
  800420b0e1:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0e7:	48 b8 6e d1 20 04 80 	movabs $0x800420d16e,%rax
  800420b0ee:	00 00 00 
  800420b0f1:	48 c1 e8 10          	shr    $0x10,%rax
  800420b0f5:	89 c2                	mov    %eax,%edx
  800420b0f7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0fe:	00 00 00 
  800420b101:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b108:	48 b8 6e d1 20 04 80 	movabs $0x800420d16e,%rax
  800420b10f:	00 00 00 
  800420b112:	48 c1 e8 20          	shr    $0x20,%rax
  800420b116:	89 c2                	mov    %eax,%edx
  800420b118:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b11f:	00 00 00 
  800420b122:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b128:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b12f:	00 00 00 
  800420b132:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b139:	00 00 00 
  800420b13c:	48 b8 74 d1 20 04 80 	movabs $0x800420d174,%rax
  800420b143:	00 00 00 
  800420b146:	89 c2                	mov    %eax,%edx
  800420b148:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b14f:	00 00 00 
  800420b152:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b159:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b160:	00 00 00 
  800420b163:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b16a:	08 00 
  800420b16c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b173:	00 00 00 
  800420b176:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b17d:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b180:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b186:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b18d:	00 00 00 
  800420b190:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b197:	83 e2 07             	and    $0x7,%edx
  800420b19a:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b1a0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1a7:	00 00 00 
  800420b1aa:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1b1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1b4:	83 ca 0e             	or     $0xe,%edx
  800420b1b7:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1bd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1c4:	00 00 00 
  800420b1c7:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1ce:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1d1:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1d7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1de:	00 00 00 
  800420b1e1:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1e8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b1eb:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1f1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1f8:	00 00 00 
  800420b1fb:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b202:	83 ca 80             	or     $0xffffff80,%edx
  800420b205:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b20b:	48 b8 74 d1 20 04 80 	movabs $0x800420d174,%rax
  800420b212:	00 00 00 
  800420b215:	48 c1 e8 10          	shr    $0x10,%rax
  800420b219:	89 c2                	mov    %eax,%edx
  800420b21b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b222:	00 00 00 
  800420b225:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b22c:	48 b8 74 d1 20 04 80 	movabs $0x800420d174,%rax
  800420b233:	00 00 00 
  800420b236:	48 c1 e8 20          	shr    $0x20,%rax
  800420b23a:	89 c2                	mov    %eax,%edx
  800420b23c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b243:	00 00 00 
  800420b246:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b24c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b253:	00 00 00 
  800420b256:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b25d:	00 00 00 
  800420b260:	48 b8 7a d1 20 04 80 	movabs $0x800420d17a,%rax
  800420b267:	00 00 00 
  800420b26a:	89 c2                	mov    %eax,%edx
  800420b26c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b273:	00 00 00 
  800420b276:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b27d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b284:	00 00 00 
  800420b287:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b28e:	08 00 
  800420b290:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b297:	00 00 00 
  800420b29a:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2a1:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2a4:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b2aa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2b1:	00 00 00 
  800420b2b4:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2bb:	83 e2 07             	and    $0x7,%edx
  800420b2be:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b2c4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2cb:	00 00 00 
  800420b2ce:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b2d5:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2d8:	83 ca 0e             	or     $0xe,%edx
  800420b2db:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b2e1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2e8:	00 00 00 
  800420b2eb:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b2f2:	83 e2 ef             	and    $0xffffffef,%edx
  800420b2f5:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b2fb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b302:	00 00 00 
  800420b305:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b30c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b30f:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b315:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b31c:	00 00 00 
  800420b31f:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b326:	83 ca 80             	or     $0xffffff80,%edx
  800420b329:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b32f:	48 b8 7a d1 20 04 80 	movabs $0x800420d17a,%rax
  800420b336:	00 00 00 
  800420b339:	48 c1 e8 10          	shr    $0x10,%rax
  800420b33d:	89 c2                	mov    %eax,%edx
  800420b33f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b346:	00 00 00 
  800420b349:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b350:	48 b8 7a d1 20 04 80 	movabs $0x800420d17a,%rax
  800420b357:	00 00 00 
  800420b35a:	48 c1 e8 20          	shr    $0x20,%rax
  800420b35e:	89 c2                	mov    %eax,%edx
  800420b360:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b367:	00 00 00 
  800420b36a:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420b370:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b377:	00 00 00 
  800420b37a:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420b381:	00 00 00 
  800420b384:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420b38b:	00 00 00 
  800420b38e:	89 c2                	mov    %eax,%edx
  800420b390:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b397:	00 00 00 
  800420b39a:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420b3a1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420b3b2:	08 00 
  800420b3b4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3bb:	00 00 00 
  800420b3be:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b3c5:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3c8:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b3ce:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3d5:	00 00 00 
  800420b3d8:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b3df:	83 e2 07             	and    $0x7,%edx
  800420b3e2:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b3e8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3ef:	00 00 00 
  800420b3f2:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b3f9:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b3fc:	83 ca 0e             	or     $0xe,%edx
  800420b3ff:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b405:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b40c:	00 00 00 
  800420b40f:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b416:	83 e2 ef             	and    $0xffffffef,%edx
  800420b419:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b41f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b426:	00 00 00 
  800420b429:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b430:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b433:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b439:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b440:	00 00 00 
  800420b443:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b44a:	83 ca 80             	or     $0xffffff80,%edx
  800420b44d:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b453:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420b45a:	00 00 00 
  800420b45d:	48 c1 e8 10          	shr    $0x10,%rax
  800420b461:	89 c2                	mov    %eax,%edx
  800420b463:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b46a:	00 00 00 
  800420b46d:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420b474:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420b47b:	00 00 00 
  800420b47e:	48 c1 e8 20          	shr    $0x20,%rax
  800420b482:	89 c2                	mov    %eax,%edx
  800420b484:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b48b:	00 00 00 
  800420b48e:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420b494:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b49b:	00 00 00 
  800420b49e:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420b4a5:	00 00 00 
  800420b4a8:	48 b8 86 d1 20 04 80 	movabs $0x800420d186,%rax
  800420b4af:	00 00 00 
  800420b4b2:	89 c2                	mov    %eax,%edx
  800420b4b4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4bb:	00 00 00 
  800420b4be:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420b4c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420b4d6:	08 00 
  800420b4d8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4df:	00 00 00 
  800420b4e2:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b4e9:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b4ec:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b4f2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4f9:	00 00 00 
  800420b4fc:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b503:	83 e2 07             	and    $0x7,%edx
  800420b506:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b50c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b513:	00 00 00 
  800420b516:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b51d:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b520:	83 ca 0e             	or     $0xe,%edx
  800420b523:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b529:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b530:	00 00 00 
  800420b533:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b53a:	83 e2 ef             	and    $0xffffffef,%edx
  800420b53d:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b543:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b54a:	00 00 00 
  800420b54d:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b554:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b557:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b55d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b564:	00 00 00 
  800420b567:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b56e:	83 ca 80             	or     $0xffffff80,%edx
  800420b571:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b577:	48 b8 86 d1 20 04 80 	movabs $0x800420d186,%rax
  800420b57e:	00 00 00 
  800420b581:	48 c1 e8 10          	shr    $0x10,%rax
  800420b585:	89 c2                	mov    %eax,%edx
  800420b587:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b58e:	00 00 00 
  800420b591:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420b598:	48 b8 86 d1 20 04 80 	movabs $0x800420d186,%rax
  800420b59f:	00 00 00 
  800420b5a2:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5a6:	89 c2                	mov    %eax,%edx
  800420b5a8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5af:	00 00 00 
  800420b5b2:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420b5b8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5bf:	00 00 00 
  800420b5c2:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420b5c9:	00 00 00 
  800420b5cc:	48 b8 8c d1 20 04 80 	movabs $0x800420d18c,%rax
  800420b5d3:	00 00 00 
  800420b5d6:	89 c2                	mov    %eax,%edx
  800420b5d8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5df:	00 00 00 
  800420b5e2:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420b5e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420b5fa:	08 00 
  800420b5fc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b603:	00 00 00 
  800420b606:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b60d:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b610:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b616:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b61d:	00 00 00 
  800420b620:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b627:	83 e2 07             	and    $0x7,%edx
  800420b62a:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b630:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b637:	00 00 00 
  800420b63a:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b641:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b644:	83 ca 0e             	or     $0xe,%edx
  800420b647:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b64d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b654:	00 00 00 
  800420b657:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b65e:	83 e2 ef             	and    $0xffffffef,%edx
  800420b661:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b667:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b66e:	00 00 00 
  800420b671:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b678:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b67b:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b681:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b688:	00 00 00 
  800420b68b:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b692:	83 ca 80             	or     $0xffffff80,%edx
  800420b695:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b69b:	48 b8 8c d1 20 04 80 	movabs $0x800420d18c,%rax
  800420b6a2:	00 00 00 
  800420b6a5:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6a9:	89 c2                	mov    %eax,%edx
  800420b6ab:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6b2:	00 00 00 
  800420b6b5:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420b6bc:	48 b8 8c d1 20 04 80 	movabs $0x800420d18c,%rax
  800420b6c3:	00 00 00 
  800420b6c6:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6ca:	89 c2                	mov    %eax,%edx
  800420b6cc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6d3:	00 00 00 
  800420b6d6:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420b6dc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6e3:	00 00 00 
  800420b6e6:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420b6ed:	00 00 00 
  800420b6f0:	48 b8 92 d1 20 04 80 	movabs $0x800420d192,%rax
  800420b6f7:	00 00 00 
  800420b6fa:	89 c2                	mov    %eax,%edx
  800420b6fc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b703:	00 00 00 
  800420b706:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420b70d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b714:	00 00 00 
  800420b717:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420b71e:	08 00 
  800420b720:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b727:	00 00 00 
  800420b72a:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b731:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b734:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b73a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b741:	00 00 00 
  800420b744:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b74b:	83 e2 07             	and    $0x7,%edx
  800420b74e:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b754:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b75b:	00 00 00 
  800420b75e:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b765:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b768:	83 ca 0e             	or     $0xe,%edx
  800420b76b:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b771:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b778:	00 00 00 
  800420b77b:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b782:	83 e2 ef             	and    $0xffffffef,%edx
  800420b785:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b78b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b792:	00 00 00 
  800420b795:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b79c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b79f:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7a5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7ac:	00 00 00 
  800420b7af:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7b6:	83 ca 80             	or     $0xffffff80,%edx
  800420b7b9:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7bf:	48 b8 92 d1 20 04 80 	movabs $0x800420d192,%rax
  800420b7c6:	00 00 00 
  800420b7c9:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7cd:	89 c2                	mov    %eax,%edx
  800420b7cf:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7d6:	00 00 00 
  800420b7d9:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420b7e0:	48 b8 92 d1 20 04 80 	movabs $0x800420d192,%rax
  800420b7e7:	00 00 00 
  800420b7ea:	48 c1 e8 20          	shr    $0x20,%rax
  800420b7ee:	89 c2                	mov    %eax,%edx
  800420b7f0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7f7:	00 00 00 
  800420b7fa:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420b800:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b807:	00 00 00 
  800420b80a:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420b811:	00 00 00 
  800420b814:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420b81b:	00 00 00 
  800420b81e:	89 c2                	mov    %eax,%edx
  800420b820:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b827:	00 00 00 
  800420b82a:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420b831:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b838:	00 00 00 
  800420b83b:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420b842:	08 00 
  800420b844:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b84b:	00 00 00 
  800420b84e:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b855:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b858:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b85e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b865:	00 00 00 
  800420b868:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b86f:	83 e2 07             	and    $0x7,%edx
  800420b872:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b878:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b87f:	00 00 00 
  800420b882:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b889:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b88c:	83 ca 0e             	or     $0xe,%edx
  800420b88f:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b895:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b89c:	00 00 00 
  800420b89f:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8a6:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8a9:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8af:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8b6:	00 00 00 
  800420b8b9:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8c0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8c3:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8c9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8d0:	00 00 00 
  800420b8d3:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8da:	83 ca 80             	or     $0xffffff80,%edx
  800420b8dd:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8e3:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420b8ea:	00 00 00 
  800420b8ed:	48 c1 e8 10          	shr    $0x10,%rax
  800420b8f1:	89 c2                	mov    %eax,%edx
  800420b8f3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8fa:	00 00 00 
  800420b8fd:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420b904:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420b90b:	00 00 00 
  800420b90e:	48 c1 e8 20          	shr    $0x20,%rax
  800420b912:	89 c2                	mov    %eax,%edx
  800420b914:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b91b:	00 00 00 
  800420b91e:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420b924:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b92b:	00 00 00 
  800420b92e:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420b935:	00 00 00 
  800420b938:	48 b8 9e d1 20 04 80 	movabs $0x800420d19e,%rax
  800420b93f:	00 00 00 
  800420b942:	89 c2                	mov    %eax,%edx
  800420b944:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b94b:	00 00 00 
  800420b94e:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420b955:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b95c:	00 00 00 
  800420b95f:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420b966:	08 00 
  800420b968:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b96f:	00 00 00 
  800420b972:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b979:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b97c:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b982:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b989:	00 00 00 
  800420b98c:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b993:	83 e2 07             	and    $0x7,%edx
  800420b996:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b99c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9a3:	00 00 00 
  800420b9a6:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9ad:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9b0:	83 ca 0e             	or     $0xe,%edx
  800420b9b3:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9b9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9c0:	00 00 00 
  800420b9c3:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9ca:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9cd:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9d3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9da:	00 00 00 
  800420b9dd:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9e4:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b9e7:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9ed:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9f4:	00 00 00 
  800420b9f7:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9fe:	83 ca 80             	or     $0xffffff80,%edx
  800420ba01:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba07:	48 b8 9e d1 20 04 80 	movabs $0x800420d19e,%rax
  800420ba0e:	00 00 00 
  800420ba11:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba15:	89 c2                	mov    %eax,%edx
  800420ba17:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba1e:	00 00 00 
  800420ba21:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420ba28:	48 b8 9e d1 20 04 80 	movabs $0x800420d19e,%rax
  800420ba2f:	00 00 00 
  800420ba32:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba36:	89 c2                	mov    %eax,%edx
  800420ba38:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba3f:	00 00 00 
  800420ba42:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420ba48:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba4f:	00 00 00 
  800420ba52:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420ba59:	00 00 00 
  800420ba5c:	48 b8 a4 d1 20 04 80 	movabs $0x800420d1a4,%rax
  800420ba63:	00 00 00 
  800420ba66:	89 c2                	mov    %eax,%edx
  800420ba68:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba6f:	00 00 00 
  800420ba72:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420ba79:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba80:	00 00 00 
  800420ba83:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420ba8a:	08 00 
  800420ba8c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba93:	00 00 00 
  800420ba96:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420ba9d:	83 e2 f8             	and    $0xfffffff8,%edx
  800420baa0:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420baa6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420baad:	00 00 00 
  800420bab0:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420bab7:	83 e2 07             	and    $0x7,%edx
  800420baba:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bac0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bac7:	00 00 00 
  800420baca:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bad1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bad4:	83 ca 0e             	or     $0xe,%edx
  800420bad7:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420badd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bae4:	00 00 00 
  800420bae7:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420baee:	83 e2 ef             	and    $0xffffffef,%edx
  800420baf1:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420baf7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bafe:	00 00 00 
  800420bb01:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb08:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb0b:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb18:	00 00 00 
  800420bb1b:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb22:	83 ca 80             	or     $0xffffff80,%edx
  800420bb25:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb2b:	48 b8 a4 d1 20 04 80 	movabs $0x800420d1a4,%rax
  800420bb32:	00 00 00 
  800420bb35:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb39:	89 c2                	mov    %eax,%edx
  800420bb3b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb42:	00 00 00 
  800420bb45:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420bb4c:	48 b8 a4 d1 20 04 80 	movabs $0x800420d1a4,%rax
  800420bb53:	00 00 00 
  800420bb56:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb5a:	89 c2                	mov    %eax,%edx
  800420bb5c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb63:	00 00 00 
  800420bb66:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420bb6c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb73:	00 00 00 
  800420bb76:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420bb7d:	00 00 00 
  800420bb80:	48 b8 aa d1 20 04 80 	movabs $0x800420d1aa,%rax
  800420bb87:	00 00 00 
  800420bb8a:	89 c2                	mov    %eax,%edx
  800420bb8c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb93:	00 00 00 
  800420bb96:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420bb9d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bba4:	00 00 00 
  800420bba7:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420bbae:	08 00 
  800420bbb0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbb7:	00 00 00 
  800420bbba:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bbc1:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbc4:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bbca:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbd1:	00 00 00 
  800420bbd4:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bbdb:	83 e2 07             	and    $0x7,%edx
  800420bbde:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bbe4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbeb:	00 00 00 
  800420bbee:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bbf5:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bbf8:	83 ca 0e             	or     $0xe,%edx
  800420bbfb:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc01:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc08:	00 00 00 
  800420bc0b:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc12:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc15:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc1b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc22:	00 00 00 
  800420bc25:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc2c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc2f:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc35:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc3c:	00 00 00 
  800420bc3f:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc46:	83 ca 80             	or     $0xffffff80,%edx
  800420bc49:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc4f:	48 b8 aa d1 20 04 80 	movabs $0x800420d1aa,%rax
  800420bc56:	00 00 00 
  800420bc59:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc5d:	89 c2                	mov    %eax,%edx
  800420bc5f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc66:	00 00 00 
  800420bc69:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420bc70:	48 b8 aa d1 20 04 80 	movabs $0x800420d1aa,%rax
  800420bc77:	00 00 00 
  800420bc7a:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc7e:	89 c2                	mov    %eax,%edx
  800420bc80:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc87:	00 00 00 
  800420bc8a:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420bc90:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc97:	00 00 00 
  800420bc9a:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420bca1:	00 00 00 
  800420bca4:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420bcab:	00 00 00 
  800420bcae:	89 c2                	mov    %eax,%edx
  800420bcb0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcb7:	00 00 00 
  800420bcba:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420bcc1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcc8:	00 00 00 
  800420bccb:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420bcd2:	08 00 
  800420bcd4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcdb:	00 00 00 
  800420bcde:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bce5:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bce8:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bcee:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcf5:	00 00 00 
  800420bcf8:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bcff:	83 e2 07             	and    $0x7,%edx
  800420bd02:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd08:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd0f:	00 00 00 
  800420bd12:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd19:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd1c:	83 ca 0e             	or     $0xe,%edx
  800420bd1f:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd25:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd2c:	00 00 00 
  800420bd2f:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd36:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd39:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd3f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd46:	00 00 00 
  800420bd49:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd50:	83 ca 60             	or     $0x60,%edx
  800420bd53:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd59:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd60:	00 00 00 
  800420bd63:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd6a:	83 ca 80             	or     $0xffffff80,%edx
  800420bd6d:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd73:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420bd7a:	00 00 00 
  800420bd7d:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd81:	89 c2                	mov    %eax,%edx
  800420bd83:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd8a:	00 00 00 
  800420bd8d:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420bd94:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420bd9b:	00 00 00 
  800420bd9e:	48 c1 e8 20          	shr    $0x20,%rax
  800420bda2:	89 c2                	mov    %eax,%edx
  800420bda4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bdab:	00 00 00 
  800420bdae:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420bdb4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bdbb:	00 00 00 
  800420bdbe:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420bdc5:	00 00 00 
  800420bdc8:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420bdcf:	00 00 00 
  800420bdd2:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420bdd7:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420bdde:	00 00 00 
  800420bde1:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420bde8:	00 00 00 
  800420bdeb:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420bdef:	48 b8 fd bd 20 04 80 	movabs $0x800420bdfd,%rax
  800420bdf6:	00 00 00 
  800420bdf9:	ff d0                	callq  *%rax
  800420bdfb:	c9                   	leaveq 
  800420bdfc:	c3                   	retq   

000000800420bdfd <trap_init_percpu>:
  800420bdfd:	55                   	push   %rbp
  800420bdfe:	48 89 e5             	mov    %rsp,%rbp
  800420be01:	53                   	push   %rbx
  800420be02:	48 83 ec 18          	sub    $0x18,%rsp
  800420be06:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420be0d:	00 00 00 
  800420be10:	ff d0                	callq  *%rax
  800420be12:	01 c0                	add    %eax,%eax
  800420be14:	83 c0 05             	add    $0x5,%eax
  800420be17:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420be1a:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420be21:	00 00 00 
  800420be24:	ff d0                	callq  *%rax
  800420be26:	89 c3                	mov    %eax,%ebx
  800420be28:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420be2f:	00 00 00 
  800420be32:	ff d0                	callq  *%rax
  800420be34:	89 c2                	mov    %eax,%edx
  800420be36:	89 d0                	mov    %edx,%eax
  800420be38:	01 c0                	add    %eax,%eax
  800420be3a:	01 d0                	add    %edx,%eax
  800420be3c:	c1 e0 0f             	shl    $0xf,%eax
  800420be3f:	48 98                	cltq   
  800420be41:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420be48:	00 00 00 
  800420be4b:	48 29 c2             	sub    %rax,%rdx
  800420be4e:	48 89 d0             	mov    %rdx,%rax
  800420be51:	48 89 c2             	mov    %rax,%rdx
  800420be54:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  800420be5b:	00 00 00 
  800420be5e:	48 63 c3             	movslq %ebx,%rax
  800420be61:	48 c1 e0 03          	shl    $0x3,%rax
  800420be65:	48 89 c6             	mov    %rax,%rsi
  800420be68:	48 c1 e6 04          	shl    $0x4,%rsi
  800420be6c:	48 01 f0             	add    %rsi,%rax
  800420be6f:	48 01 c8             	add    %rcx,%rax
  800420be72:	48 83 c0 10          	add    $0x10,%rax
  800420be76:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420be7a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420be81:	00 00 00 
  800420be84:	48 8b 00             	mov    (%rax),%rax
  800420be87:	48 c1 f8 10          	sar    $0x10,%rax
  800420be8b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420be8f:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420be96:	00 00 00 
  800420be99:	ff d0                	callq  *%rax
  800420be9b:	c1 e0 04             	shl    $0x4,%eax
  800420be9e:	48 98                	cltq   
  800420bea0:	48 01 d8             	add    %rbx,%rax
  800420bea3:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420bea8:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420beaf:	00 00 00 
  800420beb2:	48 8b 00             	mov    (%rax),%rax
  800420beb5:	48 c1 f8 10          	sar    $0x10,%rax
  800420beb9:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bebd:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bec4:	00 00 00 
  800420bec7:	ff d0                	callq  *%rax
  800420bec9:	c1 e0 04             	shl    $0x4,%eax
  800420becc:	48 98                	cltq   
  800420bece:	48 01 d8             	add    %rbx,%rax
  800420bed1:	48 89 c3             	mov    %rax,%rbx
  800420bed4:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bedb:	00 00 00 
  800420bede:	ff d0                	callq  *%rax
  800420bee0:	48 98                	cltq   
  800420bee2:	48 c1 e0 03          	shl    $0x3,%rax
  800420bee6:	48 89 c2             	mov    %rax,%rdx
  800420bee9:	48 c1 e2 04          	shl    $0x4,%rdx
  800420beed:	48 01 d0             	add    %rdx,%rax
  800420bef0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bef4:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420befb:	00 00 00 
  800420befe:	48 01 d0             	add    %rdx,%rax
  800420bf01:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420bf05:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf0c:	00 00 00 
  800420bf0f:	48 8b 00             	mov    (%rax),%rax
  800420bf12:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf16:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf1a:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bf21:	00 00 00 
  800420bf24:	ff d0                	callq  *%rax
  800420bf26:	c1 e0 04             	shl    $0x4,%eax
  800420bf29:	48 98                	cltq   
  800420bf2b:	48 01 d8             	add    %rbx,%rax
  800420bf2e:	48 89 c3             	mov    %rax,%rbx
  800420bf31:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bf38:	00 00 00 
  800420bf3b:	ff d0                	callq  *%rax
  800420bf3d:	48 98                	cltq   
  800420bf3f:	48 c1 e0 03          	shl    $0x3,%rax
  800420bf43:	48 89 c2             	mov    %rax,%rdx
  800420bf46:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bf4a:	48 01 d0             	add    %rdx,%rax
  800420bf4d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf51:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420bf58:	00 00 00 
  800420bf5b:	48 01 d0             	add    %rdx,%rax
  800420bf5e:	48 c1 e8 10          	shr    $0x10,%rax
  800420bf62:	88 43 04             	mov    %al,0x4(%rbx)
  800420bf65:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf6c:	00 00 00 
  800420bf6f:	48 8b 00             	mov    (%rax),%rax
  800420bf72:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf76:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf7a:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bf81:	00 00 00 
  800420bf84:	ff d0                	callq  *%rax
  800420bf86:	c1 e0 04             	shl    $0x4,%eax
  800420bf89:	48 98                	cltq   
  800420bf8b:	48 01 d8             	add    %rbx,%rax
  800420bf8e:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bf92:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf95:	83 ca 09             	or     $0x9,%edx
  800420bf98:	88 50 05             	mov    %dl,0x5(%rax)
  800420bf9b:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfa2:	00 00 00 
  800420bfa5:	48 8b 00             	mov    (%rax),%rax
  800420bfa8:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfac:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfb0:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bfb7:	00 00 00 
  800420bfba:	ff d0                	callq  *%rax
  800420bfbc:	c1 e0 04             	shl    $0x4,%eax
  800420bfbf:	48 98                	cltq   
  800420bfc1:	48 01 d8             	add    %rbx,%rax
  800420bfc4:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bfc8:	83 e2 ef             	and    $0xffffffef,%edx
  800420bfcb:	88 50 05             	mov    %dl,0x5(%rax)
  800420bfce:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfd5:	00 00 00 
  800420bfd8:	48 8b 00             	mov    (%rax),%rax
  800420bfdb:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfdf:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfe3:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420bfea:	00 00 00 
  800420bfed:	ff d0                	callq  *%rax
  800420bfef:	c1 e0 04             	shl    $0x4,%eax
  800420bff2:	48 98                	cltq   
  800420bff4:	48 01 d8             	add    %rbx,%rax
  800420bff7:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bffb:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bffe:	88 50 05             	mov    %dl,0x5(%rax)
  800420c001:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c008:	00 00 00 
  800420c00b:	48 8b 00             	mov    (%rax),%rax
  800420c00e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c012:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c016:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c01d:	00 00 00 
  800420c020:	ff d0                	callq  *%rax
  800420c022:	c1 e0 04             	shl    $0x4,%eax
  800420c025:	48 98                	cltq   
  800420c027:	48 01 d8             	add    %rbx,%rax
  800420c02a:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c02e:	83 ca 80             	or     $0xffffff80,%edx
  800420c031:	88 50 05             	mov    %dl,0x5(%rax)
  800420c034:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c03b:	00 00 00 
  800420c03e:	48 8b 00             	mov    (%rax),%rax
  800420c041:	48 c1 f8 10          	sar    $0x10,%rax
  800420c045:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c049:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c050:	00 00 00 
  800420c053:	ff d0                	callq  *%rax
  800420c055:	c1 e0 04             	shl    $0x4,%eax
  800420c058:	48 98                	cltq   
  800420c05a:	48 01 d8             	add    %rbx,%rax
  800420c05d:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c061:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c064:	88 50 06             	mov    %dl,0x6(%rax)
  800420c067:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c06e:	00 00 00 
  800420c071:	48 8b 00             	mov    (%rax),%rax
  800420c074:	48 c1 f8 10          	sar    $0x10,%rax
  800420c078:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c07c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c083:	00 00 00 
  800420c086:	ff d0                	callq  *%rax
  800420c088:	c1 e0 04             	shl    $0x4,%eax
  800420c08b:	48 98                	cltq   
  800420c08d:	48 01 d8             	add    %rbx,%rax
  800420c090:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c094:	83 e2 ef             	and    $0xffffffef,%edx
  800420c097:	88 50 06             	mov    %dl,0x6(%rax)
  800420c09a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0a1:	00 00 00 
  800420c0a4:	48 8b 00             	mov    (%rax),%rax
  800420c0a7:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0ab:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0af:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c0b6:	00 00 00 
  800420c0b9:	ff d0                	callq  *%rax
  800420c0bb:	c1 e0 04             	shl    $0x4,%eax
  800420c0be:	48 98                	cltq   
  800420c0c0:	48 01 d8             	add    %rbx,%rax
  800420c0c3:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0c7:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0ca:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0cd:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0d4:	00 00 00 
  800420c0d7:	48 8b 00             	mov    (%rax),%rax
  800420c0da:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0de:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0e2:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	ff d0                	callq  *%rax
  800420c0ee:	c1 e0 04             	shl    $0x4,%eax
  800420c0f1:	48 98                	cltq   
  800420c0f3:	48 01 d8             	add    %rbx,%rax
  800420c0f6:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0fa:	83 e2 7f             	and    $0x7f,%edx
  800420c0fd:	88 50 06             	mov    %dl,0x6(%rax)
  800420c100:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c107:	00 00 00 
  800420c10a:	48 8b 00             	mov    (%rax),%rax
  800420c10d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c111:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c115:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c11c:	00 00 00 
  800420c11f:	ff d0                	callq  *%rax
  800420c121:	c1 e0 04             	shl    $0x4,%eax
  800420c124:	48 98                	cltq   
  800420c126:	48 01 d8             	add    %rbx,%rax
  800420c129:	48 89 c3             	mov    %rax,%rbx
  800420c12c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c133:	00 00 00 
  800420c136:	ff d0                	callq  *%rax
  800420c138:	48 98                	cltq   
  800420c13a:	48 c1 e0 03          	shl    $0x3,%rax
  800420c13e:	48 89 c2             	mov    %rax,%rdx
  800420c141:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c145:	48 01 d0             	add    %rdx,%rax
  800420c148:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c14c:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c153:	00 00 00 
  800420c156:	48 01 d0             	add    %rdx,%rax
  800420c159:	48 c1 e8 18          	shr    $0x18,%rax
  800420c15d:	88 43 07             	mov    %al,0x7(%rbx)
  800420c160:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c167:	00 00 00 
  800420c16a:	48 8b 00             	mov    (%rax),%rax
  800420c16d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c171:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c175:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c17c:	00 00 00 
  800420c17f:	ff d0                	callq  *%rax
  800420c181:	c1 e0 04             	shl    $0x4,%eax
  800420c184:	48 98                	cltq   
  800420c186:	48 01 d8             	add    %rbx,%rax
  800420c189:	48 89 c3             	mov    %rax,%rbx
  800420c18c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c193:	00 00 00 
  800420c196:	ff d0                	callq  *%rax
  800420c198:	48 98                	cltq   
  800420c19a:	48 c1 e0 03          	shl    $0x3,%rax
  800420c19e:	48 89 c2             	mov    %rax,%rdx
  800420c1a1:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c1a5:	48 01 d0             	add    %rdx,%rax
  800420c1a8:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c1ac:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c1b3:	00 00 00 
  800420c1b6:	48 01 d0             	add    %rdx,%rax
  800420c1b9:	48 c1 e8 20          	shr    $0x20,%rax
  800420c1bd:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c1c0:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1c7:	00 00 00 
  800420c1ca:	48 8b 00             	mov    (%rax),%rax
  800420c1cd:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1d1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c1d5:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c1dc:	00 00 00 
  800420c1df:	ff d0                	callq  *%rax
  800420c1e1:	c1 e0 04             	shl    $0x4,%eax
  800420c1e4:	48 98                	cltq   
  800420c1e6:	48 01 d8             	add    %rbx,%rax
  800420c1e9:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c1ed:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1f4:	00 00 00 
  800420c1f7:	48 8b 00             	mov    (%rax),%rax
  800420c1fa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1fe:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c202:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c209:	00 00 00 
  800420c20c:	ff d0                	callq  *%rax
  800420c20e:	c1 e0 04             	shl    $0x4,%eax
  800420c211:	48 98                	cltq   
  800420c213:	48 01 d8             	add    %rbx,%rax
  800420c216:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c21a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c221:	00 00 00 
  800420c224:	48 8b 00             	mov    (%rax),%rax
  800420c227:	48 c1 f8 10          	sar    $0x10,%rax
  800420c22b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c22f:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c236:	00 00 00 
  800420c239:	ff d0                	callq  *%rax
  800420c23b:	c1 e0 04             	shl    $0x4,%eax
  800420c23e:	48 98                	cltq   
  800420c240:	48 01 d8             	add    %rbx,%rax
  800420c243:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c249:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c24c:	c1 e0 03             	shl    $0x3,%eax
  800420c24f:	0f b7 c0             	movzwl %ax,%eax
  800420c252:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c256:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c25a:	0f 00 d8             	ltr    %ax
  800420c25d:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420c264:	00 00 00 
  800420c267:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c26b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c26f:	0f 01 18             	lidt   (%rax)
  800420c272:	48 83 c4 18          	add    $0x18,%rsp
  800420c276:	5b                   	pop    %rbx
  800420c277:	5d                   	pop    %rbp
  800420c278:	c3                   	retq   

000000800420c279 <print_trapframe>:
  800420c279:	55                   	push   %rbp
  800420c27a:	48 89 e5             	mov    %rsp,%rbp
  800420c27d:	48 83 ec 20          	sub    $0x20,%rsp
  800420c281:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c285:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c28c:	00 00 00 
  800420c28f:	ff d0                	callq  *%rax
  800420c291:	89 c2                	mov    %eax,%edx
  800420c293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c297:	48 89 c6             	mov    %rax,%rsi
  800420c29a:	48 bf 0e 9e 21 04 80 	movabs $0x8004219e0e,%rdi
  800420c2a1:	00 00 00 
  800420c2a4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2a9:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420c2b0:	00 00 00 
  800420c2b3:	ff d1                	callq  *%rcx
  800420c2b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2b9:	48 89 c7             	mov    %rax,%rdi
  800420c2bc:	48 b8 8a c5 20 04 80 	movabs $0x800420c58a,%rax
  800420c2c3:	00 00 00 
  800420c2c6:	ff d0                	callq  *%rax
  800420c2c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2cc:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c2d0:	0f b7 c0             	movzwl %ax,%eax
  800420c2d3:	89 c6                	mov    %eax,%esi
  800420c2d5:	48 bf 2c 9e 21 04 80 	movabs $0x8004219e2c,%rdi
  800420c2dc:	00 00 00 
  800420c2df:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2e4:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c2eb:	00 00 00 
  800420c2ee:	ff d2                	callq  *%rdx
  800420c2f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2f4:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c2fb:	0f b7 c0             	movzwl %ax,%eax
  800420c2fe:	89 c6                	mov    %eax,%esi
  800420c300:	48 bf 3f 9e 21 04 80 	movabs $0x8004219e3f,%rdi
  800420c307:	00 00 00 
  800420c30a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c30f:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c316:	00 00 00 
  800420c319:	ff d2                	callq  *%rdx
  800420c31b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c31f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c326:	89 c7                	mov    %eax,%edi
  800420c328:	48 b8 9b 96 20 04 80 	movabs $0x800420969b,%rax
  800420c32f:	00 00 00 
  800420c332:	ff d0                	callq  *%rax
  800420c334:	48 89 c2             	mov    %rax,%rdx
  800420c337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c33b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c342:	48 89 c6             	mov    %rax,%rsi
  800420c345:	48 bf 52 9e 21 04 80 	movabs $0x8004219e52,%rdi
  800420c34c:	00 00 00 
  800420c34f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c354:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420c35b:	00 00 00 
  800420c35e:	ff d1                	callq  *%rcx
  800420c360:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420c367:	00 00 00 
  800420c36a:	48 8b 00             	mov    (%rax),%rax
  800420c36d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420c371:	75 3a                	jne    800420c3ad <print_trapframe+0x134>
  800420c373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c377:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c37e:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c382:	75 29                	jne    800420c3ad <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420c384:	0f 20 d0             	mov    %cr2,%rax
  800420c387:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420c38b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c38f:	48 89 c6             	mov    %rax,%rsi
  800420c392:	48 bf 64 9e 21 04 80 	movabs $0x8004219e64,%rdi
  800420c399:	00 00 00 
  800420c39c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3a1:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c3a8:	00 00 00 
  800420c3ab:	ff d2                	callq  *%rdx
  800420c3ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3b1:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3b8:	48 89 c6             	mov    %rax,%rsi
  800420c3bb:	48 bf 73 9e 21 04 80 	movabs $0x8004219e73,%rdi
  800420c3c2:	00 00 00 
  800420c3c5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3ca:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c3d1:	00 00 00 
  800420c3d4:	ff d2                	callq  *%rdx
  800420c3d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3da:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c3e1:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c3e5:	0f 85 9c 00 00 00    	jne    800420c487 <print_trapframe+0x20e>
  800420c3eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3ef:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3f6:	83 e0 01             	and    $0x1,%eax
  800420c3f9:	48 85 c0             	test   %rax,%rax
  800420c3fc:	74 0c                	je     800420c40a <print_trapframe+0x191>
  800420c3fe:	48 b9 81 9e 21 04 80 	movabs $0x8004219e81,%rcx
  800420c405:	00 00 00 
  800420c408:	eb 0a                	jmp    800420c414 <print_trapframe+0x19b>
  800420c40a:	48 b9 8c 9e 21 04 80 	movabs $0x8004219e8c,%rcx
  800420c411:	00 00 00 
  800420c414:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c418:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c41f:	83 e0 02             	and    $0x2,%eax
  800420c422:	48 85 c0             	test   %rax,%rax
  800420c425:	74 0c                	je     800420c433 <print_trapframe+0x1ba>
  800420c427:	48 ba 98 9e 21 04 80 	movabs $0x8004219e98,%rdx
  800420c42e:	00 00 00 
  800420c431:	eb 0a                	jmp    800420c43d <print_trapframe+0x1c4>
  800420c433:	48 ba 9e 9e 21 04 80 	movabs $0x8004219e9e,%rdx
  800420c43a:	00 00 00 
  800420c43d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c441:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c448:	83 e0 04             	and    $0x4,%eax
  800420c44b:	48 85 c0             	test   %rax,%rax
  800420c44e:	74 0c                	je     800420c45c <print_trapframe+0x1e3>
  800420c450:	48 b8 a3 9e 21 04 80 	movabs $0x8004219ea3,%rax
  800420c457:	00 00 00 
  800420c45a:	eb 0a                	jmp    800420c466 <print_trapframe+0x1ed>
  800420c45c:	48 b8 a8 9e 21 04 80 	movabs $0x8004219ea8,%rax
  800420c463:	00 00 00 
  800420c466:	48 89 c6             	mov    %rax,%rsi
  800420c469:	48 bf af 9e 21 04 80 	movabs $0x8004219eaf,%rdi
  800420c470:	00 00 00 
  800420c473:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c478:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  800420c47f:	00 00 00 
  800420c482:	41 ff d0             	callq  *%r8
  800420c485:	eb 1b                	jmp    800420c4a2 <print_trapframe+0x229>
  800420c487:	48 bf be 9e 21 04 80 	movabs $0x8004219ebe,%rdi
  800420c48e:	00 00 00 
  800420c491:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c496:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c49d:	00 00 00 
  800420c4a0:	ff d2                	callq  *%rdx
  800420c4a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4a6:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420c4ad:	48 89 c6             	mov    %rax,%rsi
  800420c4b0:	48 bf c0 9e 21 04 80 	movabs $0x8004219ec0,%rdi
  800420c4b7:	00 00 00 
  800420c4ba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4bf:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c4c6:	00 00 00 
  800420c4c9:	ff d2                	callq  *%rdx
  800420c4cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4cf:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c4d6:	0f b7 c0             	movzwl %ax,%eax
  800420c4d9:	89 c6                	mov    %eax,%esi
  800420c4db:	48 bf cf 9e 21 04 80 	movabs $0x8004219ecf,%rdi
  800420c4e2:	00 00 00 
  800420c4e5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4ea:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c4f1:	00 00 00 
  800420c4f4:	ff d2                	callq  *%rdx
  800420c4f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4fa:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420c501:	48 89 c6             	mov    %rax,%rsi
  800420c504:	48 bf e2 9e 21 04 80 	movabs $0x8004219ee2,%rdi
  800420c50b:	00 00 00 
  800420c50e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c513:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c51a:	00 00 00 
  800420c51d:	ff d2                	callq  *%rdx
  800420c51f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c523:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c52a:	0f b7 c0             	movzwl %ax,%eax
  800420c52d:	83 e0 03             	and    $0x3,%eax
  800420c530:	85 c0                	test   %eax,%eax
  800420c532:	74 54                	je     800420c588 <print_trapframe+0x30f>
  800420c534:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c538:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420c53f:	48 89 c6             	mov    %rax,%rsi
  800420c542:	48 bf f1 9e 21 04 80 	movabs $0x8004219ef1,%rdi
  800420c549:	00 00 00 
  800420c54c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c551:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c558:	00 00 00 
  800420c55b:	ff d2                	callq  *%rdx
  800420c55d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c561:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420c568:	0f b7 c0             	movzwl %ax,%eax
  800420c56b:	89 c6                	mov    %eax,%esi
  800420c56d:	48 bf 00 9f 21 04 80 	movabs $0x8004219f00,%rdi
  800420c574:	00 00 00 
  800420c577:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c57c:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c583:	00 00 00 
  800420c586:	ff d2                	callq  *%rdx
  800420c588:	c9                   	leaveq 
  800420c589:	c3                   	retq   

000000800420c58a <print_regs>:
  800420c58a:	55                   	push   %rbp
  800420c58b:	48 89 e5             	mov    %rsp,%rbp
  800420c58e:	48 83 ec 10          	sub    $0x10,%rsp
  800420c592:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c59a:	48 8b 00             	mov    (%rax),%rax
  800420c59d:	48 89 c6             	mov    %rax,%rsi
  800420c5a0:	48 bf 13 9f 21 04 80 	movabs $0x8004219f13,%rdi
  800420c5a7:	00 00 00 
  800420c5aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5af:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c5b6:	00 00 00 
  800420c5b9:	ff d2                	callq  *%rdx
  800420c5bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5bf:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c5c3:	48 89 c6             	mov    %rax,%rsi
  800420c5c6:	48 bf 22 9f 21 04 80 	movabs $0x8004219f22,%rdi
  800420c5cd:	00 00 00 
  800420c5d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5d5:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c5dc:	00 00 00 
  800420c5df:	ff d2                	callq  *%rdx
  800420c5e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5e5:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c5e9:	48 89 c6             	mov    %rax,%rsi
  800420c5ec:	48 bf 31 9f 21 04 80 	movabs $0x8004219f31,%rdi
  800420c5f3:	00 00 00 
  800420c5f6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5fb:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c602:	00 00 00 
  800420c605:	ff d2                	callq  *%rdx
  800420c607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c60b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c60f:	48 89 c6             	mov    %rax,%rsi
  800420c612:	48 bf 40 9f 21 04 80 	movabs $0x8004219f40,%rdi
  800420c619:	00 00 00 
  800420c61c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c621:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c628:	00 00 00 
  800420c62b:	ff d2                	callq  *%rdx
  800420c62d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c631:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420c635:	48 89 c6             	mov    %rax,%rsi
  800420c638:	48 bf 4f 9f 21 04 80 	movabs $0x8004219f4f,%rdi
  800420c63f:	00 00 00 
  800420c642:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c647:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c64e:	00 00 00 
  800420c651:	ff d2                	callq  *%rdx
  800420c653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c657:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c65b:	48 89 c6             	mov    %rax,%rsi
  800420c65e:	48 bf 5e 9f 21 04 80 	movabs $0x8004219f5e,%rdi
  800420c665:	00 00 00 
  800420c668:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c66d:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c674:	00 00 00 
  800420c677:	ff d2                	callq  *%rdx
  800420c679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c67d:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420c681:	48 89 c6             	mov    %rax,%rsi
  800420c684:	48 bf 6d 9f 21 04 80 	movabs $0x8004219f6d,%rdi
  800420c68b:	00 00 00 
  800420c68e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c693:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c69a:	00 00 00 
  800420c69d:	ff d2                	callq  *%rdx
  800420c69f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6a3:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420c6a7:	48 89 c6             	mov    %rax,%rsi
  800420c6aa:	48 bf 7b 9f 21 04 80 	movabs $0x8004219f7b,%rdi
  800420c6b1:	00 00 00 
  800420c6b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6b9:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c6c0:	00 00 00 
  800420c6c3:	ff d2                	callq  *%rdx
  800420c6c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6c9:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420c6cd:	48 89 c6             	mov    %rax,%rsi
  800420c6d0:	48 bf 89 9f 21 04 80 	movabs $0x8004219f89,%rdi
  800420c6d7:	00 00 00 
  800420c6da:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6df:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c6e6:	00 00 00 
  800420c6e9:	ff d2                	callq  *%rdx
  800420c6eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6ef:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420c6f3:	48 89 c6             	mov    %rax,%rsi
  800420c6f6:	48 bf 98 9f 21 04 80 	movabs $0x8004219f98,%rdi
  800420c6fd:	00 00 00 
  800420c700:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c705:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c70c:	00 00 00 
  800420c70f:	ff d2                	callq  *%rdx
  800420c711:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c715:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420c719:	48 89 c6             	mov    %rax,%rsi
  800420c71c:	48 bf a7 9f 21 04 80 	movabs $0x8004219fa7,%rdi
  800420c723:	00 00 00 
  800420c726:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c72b:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c732:	00 00 00 
  800420c735:	ff d2                	callq  *%rdx
  800420c737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c73b:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420c73f:	48 89 c6             	mov    %rax,%rsi
  800420c742:	48 bf b6 9f 21 04 80 	movabs $0x8004219fb6,%rdi
  800420c749:	00 00 00 
  800420c74c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c751:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c758:	00 00 00 
  800420c75b:	ff d2                	callq  *%rdx
  800420c75d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c761:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420c765:	48 89 c6             	mov    %rax,%rsi
  800420c768:	48 bf c5 9f 21 04 80 	movabs $0x8004219fc5,%rdi
  800420c76f:	00 00 00 
  800420c772:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c777:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c77e:	00 00 00 
  800420c781:	ff d2                	callq  *%rdx
  800420c783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c787:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420c78b:	48 89 c6             	mov    %rax,%rsi
  800420c78e:	48 bf d4 9f 21 04 80 	movabs $0x8004219fd4,%rdi
  800420c795:	00 00 00 
  800420c798:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c79d:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c7a4:	00 00 00 
  800420c7a7:	ff d2                	callq  *%rdx
  800420c7a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7ad:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c7b1:	48 89 c6             	mov    %rax,%rsi
  800420c7b4:	48 bf e3 9f 21 04 80 	movabs $0x8004219fe3,%rdi
  800420c7bb:	00 00 00 
  800420c7be:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7c3:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c7ca:	00 00 00 
  800420c7cd:	ff d2                	callq  *%rdx
  800420c7cf:	c9                   	leaveq 
  800420c7d0:	c3                   	retq   

000000800420c7d1 <trap_dispatch>:
  800420c7d1:	55                   	push   %rbp
  800420c7d2:	48 89 e5             	mov    %rsp,%rbp
  800420c7d5:	48 83 ec 20          	sub    $0x20,%rsp
  800420c7d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c7dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7e1:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c7e8:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c7ec:	75 18                	jne    800420c806 <trap_dispatch+0x35>
  800420c7ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7f2:	48 89 c7             	mov    %rax,%rdi
  800420c7f5:	48 b8 4e cd 20 04 80 	movabs $0x800420cd4e,%rax
  800420c7fc:	00 00 00 
  800420c7ff:	ff d0                	callq  *%rax
  800420c801:	e9 e9 01 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c806:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c80a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c811:	48 83 f8 30          	cmp    $0x30,%rax
  800420c815:	75 55                	jne    800420c86c <trap_dispatch+0x9b>
  800420c817:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c81b:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420c81f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c823:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420c827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c82b:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420c82f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c833:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420c837:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c83b:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420c83f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c843:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c847:	4d 89 c1             	mov    %r8,%r9
  800420c84a:	49 89 f8             	mov    %rdi,%r8
  800420c84d:	48 89 c7             	mov    %rax,%rdi
  800420c850:	48 b8 95 e2 20 04 80 	movabs $0x800420e295,%rax
  800420c857:	00 00 00 
  800420c85a:	ff d0                	callq  *%rax
  800420c85c:	48 89 c2             	mov    %rax,%rdx
  800420c85f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c863:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420c867:	e9 83 01 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c86c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c870:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c877:	48 83 f8 03          	cmp    $0x3,%rax
  800420c87b:	75 18                	jne    800420c895 <trap_dispatch+0xc4>
  800420c87d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c881:	48 89 c7             	mov    %rax,%rdi
  800420c884:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420c88b:	00 00 00 
  800420c88e:	ff d0                	callq  *%rax
  800420c890:	e9 5a 01 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c895:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c899:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8a0:	48 83 f8 27          	cmp    $0x27,%rax
  800420c8a4:	75 33                	jne    800420c8d9 <trap_dispatch+0x108>
  800420c8a6:	48 bf f2 9f 21 04 80 	movabs $0x8004219ff2,%rdi
  800420c8ad:	00 00 00 
  800420c8b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c8b5:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420c8bc:	00 00 00 
  800420c8bf:	ff d2                	callq  *%rdx
  800420c8c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8c5:	48 89 c7             	mov    %rax,%rdi
  800420c8c8:	48 b8 79 c2 20 04 80 	movabs $0x800420c279,%rax
  800420c8cf:	00 00 00 
  800420c8d2:	ff d0                	callq  *%rax
  800420c8d4:	e9 16 01 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c8d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8dd:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8e4:	48 83 f8 20          	cmp    $0x20,%rax
  800420c8e8:	75 33                	jne    800420c91d <trap_dispatch+0x14c>
  800420c8ea:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c8f1:	00 00 00 
  800420c8f4:	ff d0                	callq  *%rax
  800420c8f6:	85 c0                	test   %eax,%eax
  800420c8f8:	75 0c                	jne    800420c906 <trap_dispatch+0x135>
  800420c8fa:	48 b8 0e 88 21 04 80 	movabs $0x800421880e,%rax
  800420c901:	00 00 00 
  800420c904:	ff d0                	callq  *%rax
  800420c906:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c90b:	0f 01 c1             	vmcall 
  800420c90e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420c911:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  800420c918:	00 00 00 
  800420c91b:	ff d0                	callq  *%rax
  800420c91d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c921:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c928:	48 83 f8 21          	cmp    $0x21,%rax
  800420c92c:	75 11                	jne    800420c93f <trap_dispatch+0x16e>
  800420c92e:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420c935:	00 00 00 
  800420c938:	ff d0                	callq  *%rax
  800420c93a:	e9 b0 00 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c93f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c943:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c94a:	48 83 f8 24          	cmp    $0x24,%rax
  800420c94e:	75 11                	jne    800420c961 <trap_dispatch+0x190>
  800420c950:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  800420c957:	00 00 00 
  800420c95a:	ff d0                	callq  *%rax
  800420c95c:	e9 8e 00 00 00       	jmpq   800420c9ef <trap_dispatch+0x21e>
  800420c961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c965:	48 89 c7             	mov    %rax,%rdi
  800420c968:	48 b8 79 c2 20 04 80 	movabs $0x800420c279,%rax
  800420c96f:	00 00 00 
  800420c972:	ff d0                	callq  *%rax
  800420c974:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c978:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c97f:	66 83 f8 08          	cmp    $0x8,%ax
  800420c983:	75 2a                	jne    800420c9af <trap_dispatch+0x1de>
  800420c985:	48 ba 0f a0 21 04 80 	movabs $0x800421a00f,%rdx
  800420c98c:	00 00 00 
  800420c98f:	be 77 01 00 00       	mov    $0x177,%esi
  800420c994:	48 bf 28 a0 21 04 80 	movabs $0x800421a028,%rdi
  800420c99b:	00 00 00 
  800420c99e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9a3:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420c9aa:	00 00 00 
  800420c9ad:	ff d1                	callq  *%rcx
  800420c9af:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420c9b6:	00 00 00 
  800420c9b9:	ff d0                	callq  *%rax
  800420c9bb:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420c9c2:	00 00 00 
  800420c9c5:	48 98                	cltq   
  800420c9c7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c9cb:	48 89 c1             	mov    %rax,%rcx
  800420c9ce:	48 c1 e1 04          	shl    $0x4,%rcx
  800420c9d2:	48 01 c8             	add    %rcx,%rax
  800420c9d5:	48 01 d0             	add    %rdx,%rax
  800420c9d8:	48 83 c0 08          	add    $0x8,%rax
  800420c9dc:	48 8b 00             	mov    (%rax),%rax
  800420c9df:	48 89 c7             	mov    %rax,%rdi
  800420c9e2:	48 b8 6a 8e 20 04 80 	movabs $0x8004208e6a,%rax
  800420c9e9:	00 00 00 
  800420c9ec:	ff d0                	callq  *%rax
  800420c9ee:	90                   	nop
  800420c9ef:	c9                   	leaveq 
  800420c9f0:	c3                   	retq   

000000800420c9f1 <trap>:
  800420c9f1:	55                   	push   %rbp
  800420c9f2:	48 89 e5             	mov    %rsp,%rbp
  800420c9f5:	48 83 ec 20          	sub    $0x20,%rsp
  800420c9f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c9fd:	fc                   	cld    
  800420c9fe:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420ca05:	00 00 00 
  800420ca08:	48 8b 00             	mov    (%rax),%rax
  800420ca0b:	48 85 c0             	test   %rax,%rax
  800420ca0e:	74 01                	je     800420ca11 <trap+0x20>
  800420ca10:	f4                   	hlt    
  800420ca11:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ca18:	00 00 00 
  800420ca1b:	ff d0                	callq  *%rax
  800420ca1d:	48 98                	cltq   
  800420ca1f:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca23:	48 89 c2             	mov    %rax,%rdx
  800420ca26:	48 c1 e2 04          	shl    $0x4,%rdx
  800420ca2a:	48 01 d0             	add    %rdx,%rax
  800420ca2d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ca34:	00 00 00 
  800420ca37:	48 01 d0             	add    %rdx,%rax
  800420ca3a:	48 83 c0 04          	add    $0x4,%rax
  800420ca3e:	be 01 00 00 00       	mov    $0x1,%esi
  800420ca43:	48 89 c7             	mov    %rax,%rdi
  800420ca46:	48 b8 5a 96 20 04 80 	movabs $0x800420965a,%rax
  800420ca4d:	00 00 00 
  800420ca50:	ff d0                	callq  *%rax
  800420ca52:	83 f8 02             	cmp    $0x2,%eax
  800420ca55:	75 0c                	jne    800420ca63 <trap+0x72>
  800420ca57:	48 b8 7f 96 20 04 80 	movabs $0x800420967f,%rax
  800420ca5e:	00 00 00 
  800420ca61:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420ca63:	9c                   	pushfq 
  800420ca64:	58                   	pop    %rax
  800420ca65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420ca69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca6d:	25 00 02 00 00       	and    $0x200,%eax
  800420ca72:	48 85 c0             	test   %rax,%rax
  800420ca75:	74 35                	je     800420caac <trap+0xbb>
  800420ca77:	48 b9 37 a0 21 04 80 	movabs $0x800421a037,%rcx
  800420ca7e:	00 00 00 
  800420ca81:	48 ba 50 a0 21 04 80 	movabs $0x800421a050,%rdx
  800420ca88:	00 00 00 
  800420ca8b:	be 94 01 00 00       	mov    $0x194,%esi
  800420ca90:	48 bf 28 a0 21 04 80 	movabs $0x800421a028,%rdi
  800420ca97:	00 00 00 
  800420ca9a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca9f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420caa6:	00 00 00 
  800420caa9:	41 ff d0             	callq  *%r8
  800420caac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cab0:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cab7:	0f b7 c0             	movzwl %ax,%eax
  800420caba:	83 e0 03             	and    $0x3,%eax
  800420cabd:	83 f8 03             	cmp    $0x3,%eax
  800420cac0:	0f 85 a9 01 00 00    	jne    800420cc6f <trap+0x27e>
  800420cac6:	48 b8 7f 96 20 04 80 	movabs $0x800420967f,%rax
  800420cacd:	00 00 00 
  800420cad0:	ff d0                	callq  *%rax
  800420cad2:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cad9:	00 00 00 
  800420cadc:	ff d0                	callq  *%rax
  800420cade:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cae5:	00 00 00 
  800420cae8:	48 98                	cltq   
  800420caea:	48 c1 e0 03          	shl    $0x3,%rax
  800420caee:	48 89 c1             	mov    %rax,%rcx
  800420caf1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420caf5:	48 01 c8             	add    %rcx,%rax
  800420caf8:	48 01 d0             	add    %rdx,%rax
  800420cafb:	48 83 c0 08          	add    $0x8,%rax
  800420caff:	48 8b 00             	mov    (%rax),%rax
  800420cb02:	48 85 c0             	test   %rax,%rax
  800420cb05:	75 35                	jne    800420cb3c <trap+0x14b>
  800420cb07:	48 b9 65 a0 21 04 80 	movabs $0x800421a065,%rcx
  800420cb0e:	00 00 00 
  800420cb11:	48 ba 50 a0 21 04 80 	movabs $0x800421a050,%rdx
  800420cb18:	00 00 00 
  800420cb1b:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420cb20:	48 bf 28 a0 21 04 80 	movabs $0x800421a028,%rdi
  800420cb27:	00 00 00 
  800420cb2a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb2f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cb36:	00 00 00 
  800420cb39:	41 ff d0             	callq  *%r8
  800420cb3c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cb43:	00 00 00 
  800420cb46:	ff d0                	callq  *%rax
  800420cb48:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb4f:	00 00 00 
  800420cb52:	48 98                	cltq   
  800420cb54:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb58:	48 89 c1             	mov    %rax,%rcx
  800420cb5b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb5f:	48 01 c8             	add    %rcx,%rax
  800420cb62:	48 01 d0             	add    %rdx,%rax
  800420cb65:	48 83 c0 08          	add    $0x8,%rax
  800420cb69:	48 8b 00             	mov    (%rax),%rax
  800420cb6c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cb72:	83 f8 01             	cmp    $0x1,%eax
  800420cb75:	75 7f                	jne    800420cbf6 <trap+0x205>
  800420cb77:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cb7e:	00 00 00 
  800420cb81:	ff d0                	callq  *%rax
  800420cb83:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb8a:	00 00 00 
  800420cb8d:	48 98                	cltq   
  800420cb8f:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb93:	48 89 c1             	mov    %rax,%rcx
  800420cb96:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb9a:	48 01 c8             	add    %rcx,%rax
  800420cb9d:	48 01 d0             	add    %rdx,%rax
  800420cba0:	48 83 c0 08          	add    $0x8,%rax
  800420cba4:	48 8b 00             	mov    (%rax),%rax
  800420cba7:	48 89 c7             	mov    %rax,%rdi
  800420cbaa:	48 b8 de 89 20 04 80 	movabs $0x80042089de,%rax
  800420cbb1:	00 00 00 
  800420cbb4:	ff d0                	callq  *%rax
  800420cbb6:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cbbd:	00 00 00 
  800420cbc0:	ff d0                	callq  *%rax
  800420cbc2:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cbc9:	00 00 00 
  800420cbcc:	48 98                	cltq   
  800420cbce:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbd2:	48 89 c1             	mov    %rax,%rcx
  800420cbd5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbd9:	48 01 c8             	add    %rcx,%rax
  800420cbdc:	48 01 d0             	add    %rdx,%rax
  800420cbdf:	48 83 c0 08          	add    $0x8,%rax
  800420cbe3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420cbea:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  800420cbf1:	00 00 00 
  800420cbf4:	ff d0                	callq  *%rax
  800420cbf6:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cbfd:	00 00 00 
  800420cc00:	ff d0                	callq  *%rax
  800420cc02:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc09:	00 00 00 
  800420cc0c:	48 98                	cltq   
  800420cc0e:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc12:	48 89 c1             	mov    %rax,%rcx
  800420cc15:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc19:	48 01 c8             	add    %rcx,%rax
  800420cc1c:	48 01 d0             	add    %rdx,%rax
  800420cc1f:	48 83 c0 08          	add    $0x8,%rax
  800420cc23:	48 8b 10             	mov    (%rax),%rdx
  800420cc26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc2a:	48 89 c6             	mov    %rax,%rsi
  800420cc2d:	b8 18 00 00 00       	mov    $0x18,%eax
  800420cc32:	48 89 d7             	mov    %rdx,%rdi
  800420cc35:	48 89 c1             	mov    %rax,%rcx
  800420cc38:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420cc3b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cc42:	00 00 00 
  800420cc45:	ff d0                	callq  *%rax
  800420cc47:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc4e:	00 00 00 
  800420cc51:	48 98                	cltq   
  800420cc53:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc57:	48 89 c1             	mov    %rax,%rcx
  800420cc5a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc5e:	48 01 c8             	add    %rcx,%rax
  800420cc61:	48 01 d0             	add    %rdx,%rax
  800420cc64:	48 83 c0 08          	add    $0x8,%rax
  800420cc68:	48 8b 00             	mov    (%rax),%rax
  800420cc6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cc6f:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420cc76:	00 00 00 
  800420cc79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420cc7d:	48 89 10             	mov    %rdx,(%rax)
  800420cc80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc84:	48 89 c7             	mov    %rax,%rdi
  800420cc87:	48 b8 d1 c7 20 04 80 	movabs $0x800420c7d1,%rax
  800420cc8e:	00 00 00 
  800420cc91:	ff d0                	callq  *%rax
  800420cc93:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cc9a:	00 00 00 
  800420cc9d:	ff d0                	callq  *%rax
  800420cc9f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cca6:	00 00 00 
  800420cca9:	48 98                	cltq   
  800420ccab:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccaf:	48 89 c1             	mov    %rax,%rcx
  800420ccb2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccb6:	48 01 c8             	add    %rcx,%rax
  800420ccb9:	48 01 d0             	add    %rdx,%rax
  800420ccbc:	48 83 c0 08          	add    $0x8,%rax
  800420ccc0:	48 8b 00             	mov    (%rax),%rax
  800420ccc3:	48 85 c0             	test   %rax,%rax
  800420ccc6:	74 7a                	je     800420cd42 <trap+0x351>
  800420ccc8:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cccf:	00 00 00 
  800420ccd2:	ff d0                	callq  *%rax
  800420ccd4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ccdb:	00 00 00 
  800420ccde:	48 98                	cltq   
  800420cce0:	48 c1 e0 03          	shl    $0x3,%rax
  800420cce4:	48 89 c1             	mov    %rax,%rcx
  800420cce7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cceb:	48 01 c8             	add    %rcx,%rax
  800420ccee:	48 01 d0             	add    %rdx,%rax
  800420ccf1:	48 83 c0 08          	add    $0x8,%rax
  800420ccf5:	48 8b 00             	mov    (%rax),%rax
  800420ccf8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ccfe:	83 f8 03             	cmp    $0x3,%eax
  800420cd01:	75 3f                	jne    800420cd42 <trap+0x351>
  800420cd03:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cd0a:	00 00 00 
  800420cd0d:	ff d0                	callq  *%rax
  800420cd0f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cd16:	00 00 00 
  800420cd19:	48 98                	cltq   
  800420cd1b:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd1f:	48 89 c1             	mov    %rax,%rcx
  800420cd22:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd26:	48 01 c8             	add    %rcx,%rax
  800420cd29:	48 01 d0             	add    %rdx,%rax
  800420cd2c:	48 83 c0 08          	add    $0x8,%rax
  800420cd30:	48 8b 00             	mov    (%rax),%rax
  800420cd33:	48 89 c7             	mov    %rax,%rdi
  800420cd36:	48 b8 35 90 20 04 80 	movabs $0x8004209035,%rax
  800420cd3d:	00 00 00 
  800420cd40:	ff d0                	callq  *%rax
  800420cd42:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  800420cd49:	00 00 00 
  800420cd4c:	ff d0                	callq  *%rax

000000800420cd4e <page_fault_handler>:
  800420cd4e:	55                   	push   %rbp
  800420cd4f:	48 89 e5             	mov    %rsp,%rbp
  800420cd52:	53                   	push   %rbx
  800420cd53:	48 83 ec 38          	sub    $0x38,%rsp
  800420cd57:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420cd5b:	0f 20 d0             	mov    %cr2,%rax
  800420cd5e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420cd62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420cd66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420cd6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd6e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cd75:	0f b7 c0             	movzwl %ax,%eax
  800420cd78:	83 e0 03             	and    $0x3,%eax
  800420cd7b:	85 c0                	test   %eax,%eax
  800420cd7d:	75 3d                	jne    800420cdbc <page_fault_handler+0x6e>
  800420cd7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd83:	48 89 c7             	mov    %rax,%rdi
  800420cd86:	48 b8 79 c2 20 04 80 	movabs $0x800420c279,%rax
  800420cd8d:	00 00 00 
  800420cd90:	ff d0                	callq  *%rax
  800420cd92:	48 ba 6c a0 21 04 80 	movabs $0x800421a06c,%rdx
  800420cd99:	00 00 00 
  800420cd9c:	be de 01 00 00       	mov    $0x1de,%esi
  800420cda1:	48 bf 28 a0 21 04 80 	movabs $0x800421a028,%rdi
  800420cda8:	00 00 00 
  800420cdab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdb0:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420cdb7:	00 00 00 
  800420cdba:	ff d1                	callq  *%rcx
  800420cdbc:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cdc3:	00 00 00 
  800420cdc6:	ff d0                	callq  *%rax
  800420cdc8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cdcf:	00 00 00 
  800420cdd2:	48 98                	cltq   
  800420cdd4:	48 c1 e0 03          	shl    $0x3,%rax
  800420cdd8:	48 89 c1             	mov    %rax,%rcx
  800420cddb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cddf:	48 01 c8             	add    %rcx,%rax
  800420cde2:	48 01 d0             	add    %rdx,%rax
  800420cde5:	48 83 c0 08          	add    $0x8,%rax
  800420cde9:	48 8b 00             	mov    (%rax),%rax
  800420cdec:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420cdf3:	48 85 c0             	test   %rax,%rax
  800420cdf6:	0f 85 b8 00 00 00    	jne    800420ceb4 <page_fault_handler+0x166>
  800420cdfc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce00:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420ce07:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ce0e:	00 00 00 
  800420ce11:	ff d0                	callq  *%rax
  800420ce13:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ce1a:	00 00 00 
  800420ce1d:	48 98                	cltq   
  800420ce1f:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce23:	48 89 c1             	mov    %rax,%rcx
  800420ce26:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce2a:	48 01 c8             	add    %rcx,%rax
  800420ce2d:	48 01 d0             	add    %rdx,%rax
  800420ce30:	48 83 c0 08          	add    $0x8,%rax
  800420ce34:	48 8b 00             	mov    (%rax),%rax
  800420ce37:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ce3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ce41:	48 89 d9             	mov    %rbx,%rcx
  800420ce44:	89 c6                	mov    %eax,%esi
  800420ce46:	48 bf 78 a0 21 04 80 	movabs $0x800421a078,%rdi
  800420ce4d:	00 00 00 
  800420ce50:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce55:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  800420ce5c:	00 00 00 
  800420ce5f:	41 ff d0             	callq  *%r8
  800420ce62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce66:	48 89 c7             	mov    %rax,%rdi
  800420ce69:	48 b8 79 c2 20 04 80 	movabs $0x800420c279,%rax
  800420ce70:	00 00 00 
  800420ce73:	ff d0                	callq  *%rax
  800420ce75:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ce7c:	00 00 00 
  800420ce7f:	ff d0                	callq  *%rax
  800420ce81:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ce88:	00 00 00 
  800420ce8b:	48 98                	cltq   
  800420ce8d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce91:	48 89 c1             	mov    %rax,%rcx
  800420ce94:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce98:	48 01 c8             	add    %rcx,%rax
  800420ce9b:	48 01 d0             	add    %rdx,%rax
  800420ce9e:	48 83 c0 08          	add    $0x8,%rax
  800420cea2:	48 8b 00             	mov    (%rax),%rax
  800420cea5:	48 89 c7             	mov    %rax,%rdi
  800420cea8:	48 b8 6a 8e 20 04 80 	movabs $0x8004208e6a,%rax
  800420ceaf:	00 00 00 
  800420ceb2:	ff d0                	callq  *%rax
  800420ceb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ceb8:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cebf:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420cec4:	48 39 c2             	cmp    %rax,%rdx
  800420cec7:	76 2c                	jbe    800420cef5 <page_fault_handler+0x1a7>
  800420cec9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cecd:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420ced4:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420ced9:	48 39 c2             	cmp    %rax,%rdx
  800420cedc:	77 17                	ja     800420cef5 <page_fault_handler+0x1a7>
  800420cede:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cee2:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cee9:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420ceef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cef3:	eb 09                	jmp    800420cefe <page_fault_handler+0x1b0>
  800420cef5:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420cefa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cefe:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420cf05:	00 00 00 
  800420cf08:	ff d0                	callq  *%rax
  800420cf0a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cf11:	00 00 00 
  800420cf14:	48 98                	cltq   
  800420cf16:	48 c1 e0 03          	shl    $0x3,%rax
  800420cf1a:	48 89 c1             	mov    %rax,%rcx
  800420cf1d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cf21:	48 01 c8             	add    %rcx,%rax
  800420cf24:	48 01 d0             	add    %rdx,%rax
  800420cf27:	48 83 c0 08          	add    $0x8,%rax
  800420cf2b:	48 8b 00             	mov    (%rax),%rax
  800420cf2e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420cf32:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420cf37:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420cf3c:	48 89 c7             	mov    %rax,%rdi
  800420cf3f:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420cf46:	00 00 00 
  800420cf49:	ff d0                	callq  *%rax
  800420cf4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf4f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cf53:	48 89 10             	mov    %rdx,(%rax)
  800420cf56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf5a:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420cf61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf65:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cf69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf6d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cf71:	48 8b 0a             	mov    (%rdx),%rcx
  800420cf74:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420cf78:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420cf7c:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420cf80:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420cf84:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420cf88:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420cf8c:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420cf90:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420cf94:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420cf98:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420cf9c:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420cfa0:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420cfa4:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420cfa8:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420cfac:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420cfb0:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420cfb4:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420cfb8:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420cfbc:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420cfc0:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420cfc4:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420cfc8:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420cfcc:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420cfd0:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420cfd4:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420cfd8:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420cfdc:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420cfe0:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420cfe4:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420cfeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cfef:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420cff6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cffa:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d001:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d005:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d00c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d010:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d017:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d01b:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d022:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d026:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d02d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d031:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d035:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d03c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d043:	00 00 00 
  800420d046:	ff d0                	callq  *%rax
  800420d048:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d04f:	00 00 00 
  800420d052:	48 98                	cltq   
  800420d054:	48 c1 e0 03          	shl    $0x3,%rax
  800420d058:	48 89 c1             	mov    %rax,%rcx
  800420d05b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d05f:	48 01 c8             	add    %rcx,%rax
  800420d062:	48 01 d0             	add    %rdx,%rax
  800420d065:	48 83 c0 08          	add    $0x8,%rax
  800420d069:	48 8b 00             	mov    (%rax),%rax
  800420d06c:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d073:	48 89 c2             	mov    %rax,%rdx
  800420d076:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d07a:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d081:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d088:	00 00 00 
  800420d08b:	ff d0                	callq  *%rax
  800420d08d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d094:	00 00 00 
  800420d097:	48 98                	cltq   
  800420d099:	48 c1 e0 03          	shl    $0x3,%rax
  800420d09d:	48 89 c1             	mov    %rax,%rcx
  800420d0a0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0a4:	48 01 c8             	add    %rcx,%rax
  800420d0a7:	48 01 d0             	add    %rdx,%rax
  800420d0aa:	48 83 c0 08          	add    $0x8,%rax
  800420d0ae:	48 8b 00             	mov    (%rax),%rax
  800420d0b1:	48 89 c7             	mov    %rax,%rdi
  800420d0b4:	48 b8 35 90 20 04 80 	movabs $0x8004209035,%rax
  800420d0bb:	00 00 00 
  800420d0be:	ff d0                	callq  *%rax

000000800420d0c0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d0c0:	6a 00                	pushq  $0x0
  800420d0c2:	6a 00                	pushq  $0x0
  800420d0c4:	e9 f7 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0c9:	90                   	nop

000000800420d0ca <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d0ca:	6a 00                	pushq  $0x0
  800420d0cc:	6a 01                	pushq  $0x1
  800420d0ce:	e9 ed 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0d3:	90                   	nop

000000800420d0d4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d0d4:	6a 00                	pushq  $0x0
  800420d0d6:	6a 02                	pushq  $0x2
  800420d0d8:	e9 e3 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0dd:	90                   	nop

000000800420d0de <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d0de:	6a 00                	pushq  $0x0
  800420d0e0:	6a 03                	pushq  $0x3
  800420d0e2:	e9 d9 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0e7:	90                   	nop

000000800420d0e8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d0e8:	6a 00                	pushq  $0x0
  800420d0ea:	6a 04                	pushq  $0x4
  800420d0ec:	e9 cf 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0f1:	90                   	nop

000000800420d0f2 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d0f2:	6a 00                	pushq  $0x0
  800420d0f4:	6a 05                	pushq  $0x5
  800420d0f6:	e9 c5 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d0fb:	90                   	nop

000000800420d0fc <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d0fc:	6a 00                	pushq  $0x0
  800420d0fe:	6a 06                	pushq  $0x6
  800420d100:	e9 bb 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d105:	90                   	nop

000000800420d106 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d106:	6a 00                	pushq  $0x0
  800420d108:	6a 07                	pushq  $0x7
  800420d10a:	e9 b1 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d10f:	90                   	nop

000000800420d110 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d110:	6a 08                	pushq  $0x8
  800420d112:	e9 a9 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d117:	90                   	nop

000000800420d118 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d118:	6a 0a                	pushq  $0xa
  800420d11a:	e9 a1 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d11f:	90                   	nop

000000800420d120 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d120:	6a 0b                	pushq  $0xb
  800420d122:	e9 99 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d127:	90                   	nop

000000800420d128 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d128:	6a 0c                	pushq  $0xc
  800420d12a:	e9 91 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d12f:	90                   	nop

000000800420d130 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d130:	6a 0d                	pushq  $0xd
  800420d132:	e9 89 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d137:	90                   	nop

000000800420d138 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d138:	6a 0e                	pushq  $0xe
  800420d13a:	e9 81 00 00 00       	jmpq   800420d1c0 <_alltraps>
  800420d13f:	90                   	nop

000000800420d140 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d140:	6a 00                	pushq  $0x0
  800420d142:	6a 10                	pushq  $0x10
  800420d144:	eb 7a                	jmp    800420d1c0 <_alltraps>

000000800420d146 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d146:	6a 11                	pushq  $0x11
  800420d148:	eb 76                	jmp    800420d1c0 <_alltraps>

000000800420d14a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d14a:	6a 00                	pushq  $0x0
  800420d14c:	6a 12                	pushq  $0x12
  800420d14e:	eb 70                	jmp    800420d1c0 <_alltraps>

000000800420d150 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d150:	6a 00                	pushq  $0x0
  800420d152:	6a 20                	pushq  $0x20
  800420d154:	eb 6a                	jmp    800420d1c0 <_alltraps>

000000800420d156 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d156:	6a 00                	pushq  $0x0
  800420d158:	6a 21                	pushq  $0x21
  800420d15a:	eb 64                	jmp    800420d1c0 <_alltraps>

000000800420d15c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d15c:	6a 00                	pushq  $0x0
  800420d15e:	6a 22                	pushq  $0x22
  800420d160:	eb 5e                	jmp    800420d1c0 <_alltraps>

000000800420d162 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d162:	6a 00                	pushq  $0x0
  800420d164:	6a 23                	pushq  $0x23
  800420d166:	eb 58                	jmp    800420d1c0 <_alltraps>

000000800420d168 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d168:	6a 00                	pushq  $0x0
  800420d16a:	6a 24                	pushq  $0x24
  800420d16c:	eb 52                	jmp    800420d1c0 <_alltraps>

000000800420d16e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d16e:	6a 00                	pushq  $0x0
  800420d170:	6a 25                	pushq  $0x25
  800420d172:	eb 4c                	jmp    800420d1c0 <_alltraps>

000000800420d174 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d174:	6a 00                	pushq  $0x0
  800420d176:	6a 26                	pushq  $0x26
  800420d178:	eb 46                	jmp    800420d1c0 <_alltraps>

000000800420d17a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d17a:	6a 00                	pushq  $0x0
  800420d17c:	6a 27                	pushq  $0x27
  800420d17e:	eb 40                	jmp    800420d1c0 <_alltraps>

000000800420d180 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d180:	6a 00                	pushq  $0x0
  800420d182:	6a 28                	pushq  $0x28
  800420d184:	eb 3a                	jmp    800420d1c0 <_alltraps>

000000800420d186 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d186:	6a 00                	pushq  $0x0
  800420d188:	6a 29                	pushq  $0x29
  800420d18a:	eb 34                	jmp    800420d1c0 <_alltraps>

000000800420d18c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d18c:	6a 00                	pushq  $0x0
  800420d18e:	6a 2a                	pushq  $0x2a
  800420d190:	eb 2e                	jmp    800420d1c0 <_alltraps>

000000800420d192 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d192:	6a 00                	pushq  $0x0
  800420d194:	6a 2b                	pushq  $0x2b
  800420d196:	eb 28                	jmp    800420d1c0 <_alltraps>

000000800420d198 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d198:	6a 00                	pushq  $0x0
  800420d19a:	6a 2c                	pushq  $0x2c
  800420d19c:	eb 22                	jmp    800420d1c0 <_alltraps>

000000800420d19e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d19e:	6a 00                	pushq  $0x0
  800420d1a0:	6a 2d                	pushq  $0x2d
  800420d1a2:	eb 1c                	jmp    800420d1c0 <_alltraps>

000000800420d1a4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d1a4:	6a 00                	pushq  $0x0
  800420d1a6:	6a 2e                	pushq  $0x2e
  800420d1a8:	eb 16                	jmp    800420d1c0 <_alltraps>

000000800420d1aa <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d1aa:	6a 00                	pushq  $0x0
  800420d1ac:	6a 2f                	pushq  $0x2f
  800420d1ae:	eb 10                	jmp    800420d1c0 <_alltraps>

000000800420d1b0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d1b0:	6a 00                	pushq  $0x0
  800420d1b2:	6a 30                	pushq  $0x30
  800420d1b4:	eb 0a                	jmp    800420d1c0 <_alltraps>

000000800420d1b6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d1b6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d1bb:	eb 03                	jmp    800420d1c0 <_alltraps>
  800420d1bd:	0f 1f 00             	nopl   (%rax)

000000800420d1c0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d1c0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d1c4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d1c8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d1cb:	48 83 ec 78          	sub    $0x78,%rsp
  800420d1cf:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d1d4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d1d9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d1de:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d1e3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d1e8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d1ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d1f2:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d1f7:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d1fc:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d201:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d206:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d20b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d210:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d215:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d219:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d21e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d220:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d222:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d224:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d226:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d228:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d22b:	e8 c1 f7 ff ff       	callq  800420c9f1 <trap>

000000800420d230 <spin>:
spin:	jmp spin
  800420d230:	eb fe                	jmp    800420d230 <spin>

000000800420d232 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d232:	55                   	push   %rbp
  800420d233:	48 89 e5             	mov    %rsp,%rbp
  800420d236:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d23a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d23e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d241:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d245:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d248:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d24c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d24f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d252:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d255:	c9                   	leaveq 
  800420d256:	c3                   	retq   

000000800420d257 <unlock_kernel>:
  800420d257:	55                   	push   %rbp
  800420d258:	48 89 e5             	mov    %rsp,%rbp
  800420d25b:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420d262:	00 00 00 
  800420d265:	48 b8 34 74 21 04 80 	movabs $0x8004217434,%rax
  800420d26c:	00 00 00 
  800420d26f:	ff d0                	callq  *%rax
  800420d271:	f3 90                	pause  
  800420d273:	5d                   	pop    %rbp
  800420d274:	c3                   	retq   

000000800420d275 <sched_yield>:
  800420d275:	55                   	push   %rbp
  800420d276:	48 89 e5             	mov    %rsp,%rbp
  800420d279:	48 83 ec 10          	sub    $0x10,%rsp
  800420d27d:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d284:	00 00 00 
  800420d287:	ff d0                	callq  *%rax
  800420d289:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d290:	00 00 00 
  800420d293:	48 98                	cltq   
  800420d295:	48 c1 e0 03          	shl    $0x3,%rax
  800420d299:	48 89 c1             	mov    %rax,%rcx
  800420d29c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2a0:	48 01 c8             	add    %rcx,%rax
  800420d2a3:	48 01 d0             	add    %rdx,%rax
  800420d2a6:	48 83 c0 08          	add    $0x8,%rax
  800420d2aa:	48 8b 00             	mov    (%rax),%rax
  800420d2ad:	48 85 c0             	test   %rax,%rax
  800420d2b0:	74 60                	je     800420d312 <sched_yield+0x9d>
  800420d2b2:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d2b9:	00 00 00 
  800420d2bc:	ff d0                	callq  *%rax
  800420d2be:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d2c5:	00 00 00 
  800420d2c8:	48 98                	cltq   
  800420d2ca:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2ce:	48 89 c1             	mov    %rax,%rcx
  800420d2d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2d5:	48 01 c8             	add    %rcx,%rax
  800420d2d8:	48 01 d0             	add    %rdx,%rax
  800420d2db:	48 83 c0 08          	add    $0x8,%rax
  800420d2df:	48 8b 00             	mov    (%rax),%rax
  800420d2e2:	48 89 c2             	mov    %rax,%rdx
  800420d2e5:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d2ec:	00 00 00 
  800420d2ef:	48 8b 00             	mov    (%rax),%rax
  800420d2f2:	48 29 c2             	sub    %rax,%rdx
  800420d2f5:	48 89 d0             	mov    %rdx,%rax
  800420d2f8:	48 c1 f8 03          	sar    $0x3,%rax
  800420d2fc:	48 89 c2             	mov    %rax,%rdx
  800420d2ff:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420d306:	fa a4 4f 
  800420d309:	48 0f af c2          	imul   %rdx,%rax
  800420d30d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d310:	eb 07                	jmp    800420d319 <sched_yield+0xa4>
  800420d312:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420d319:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420d320:	eb 75                	jmp    800420d397 <sched_yield+0x122>
  800420d322:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d325:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420d328:	01 c2                	add    %eax,%edx
  800420d32a:	89 d0                	mov    %edx,%eax
  800420d32c:	c1 f8 1f             	sar    $0x1f,%eax
  800420d32f:	c1 e8 16             	shr    $0x16,%eax
  800420d332:	01 c2                	add    %eax,%edx
  800420d334:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420d33a:	29 c2                	sub    %eax,%edx
  800420d33c:	89 d0                	mov    %edx,%eax
  800420d33e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420d341:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d348:	00 00 00 
  800420d34b:	48 8b 10             	mov    (%rax),%rdx
  800420d34e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d351:	48 98                	cltq   
  800420d353:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d35a:	48 01 d0             	add    %rdx,%rax
  800420d35d:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d363:	83 f8 02             	cmp    $0x2,%eax
  800420d366:	75 2b                	jne    800420d393 <sched_yield+0x11e>
  800420d368:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d36f:	00 00 00 
  800420d372:	48 8b 10             	mov    (%rax),%rdx
  800420d375:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d378:	48 98                	cltq   
  800420d37a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d381:	48 01 d0             	add    %rdx,%rax
  800420d384:	48 89 c7             	mov    %rax,%rdi
  800420d387:	48 b8 35 90 20 04 80 	movabs $0x8004209035,%rax
  800420d38e:	00 00 00 
  800420d391:	ff d0                	callq  *%rax
  800420d393:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d397:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420d39e:	7e 82                	jle    800420d322 <sched_yield+0xad>
  800420d3a0:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d3a7:	00 00 00 
  800420d3aa:	ff d0                	callq  *%rax
  800420d3ac:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d3b3:	00 00 00 
  800420d3b6:	48 98                	cltq   
  800420d3b8:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3bc:	48 89 c1             	mov    %rax,%rcx
  800420d3bf:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3c3:	48 01 c8             	add    %rcx,%rax
  800420d3c6:	48 01 d0             	add    %rdx,%rax
  800420d3c9:	48 83 c0 08          	add    $0x8,%rax
  800420d3cd:	48 8b 00             	mov    (%rax),%rax
  800420d3d0:	48 85 c0             	test   %rax,%rax
  800420d3d3:	74 7a                	je     800420d44f <sched_yield+0x1da>
  800420d3d5:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d3dc:	00 00 00 
  800420d3df:	ff d0                	callq  *%rax
  800420d3e1:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d3e8:	00 00 00 
  800420d3eb:	48 98                	cltq   
  800420d3ed:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3f1:	48 89 c1             	mov    %rax,%rcx
  800420d3f4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3f8:	48 01 c8             	add    %rcx,%rax
  800420d3fb:	48 01 d0             	add    %rdx,%rax
  800420d3fe:	48 83 c0 08          	add    $0x8,%rax
  800420d402:	48 8b 00             	mov    (%rax),%rax
  800420d405:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d40b:	83 f8 03             	cmp    $0x3,%eax
  800420d40e:	75 3f                	jne    800420d44f <sched_yield+0x1da>
  800420d410:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d417:	00 00 00 
  800420d41a:	ff d0                	callq  *%rax
  800420d41c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d423:	00 00 00 
  800420d426:	48 98                	cltq   
  800420d428:	48 c1 e0 03          	shl    $0x3,%rax
  800420d42c:	48 89 c1             	mov    %rax,%rcx
  800420d42f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d433:	48 01 c8             	add    %rcx,%rax
  800420d436:	48 01 d0             	add    %rdx,%rax
  800420d439:	48 83 c0 08          	add    $0x8,%rax
  800420d43d:	48 8b 00             	mov    (%rax),%rax
  800420d440:	48 89 c7             	mov    %rax,%rdi
  800420d443:	48 b8 35 90 20 04 80 	movabs $0x8004209035,%rax
  800420d44a:	00 00 00 
  800420d44d:	ff d0                	callq  *%rax
  800420d44f:	48 b8 5d d4 20 04 80 	movabs $0x800420d45d,%rax
  800420d456:	00 00 00 
  800420d459:	ff d0                	callq  *%rax
  800420d45b:	c9                   	leaveq 
  800420d45c:	c3                   	retq   

000000800420d45d <sched_halt>:
  800420d45d:	55                   	push   %rbp
  800420d45e:	48 89 e5             	mov    %rsp,%rbp
  800420d461:	48 83 ec 20          	sub    $0x20,%rsp
  800420d465:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420d46c:	eb 79                	jmp    800420d4e7 <sched_halt+0x8a>
  800420d46e:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d475:	00 00 00 
  800420d478:	48 8b 10             	mov    (%rax),%rdx
  800420d47b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d47e:	48 98                	cltq   
  800420d480:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d487:	48 01 d0             	add    %rdx,%rax
  800420d48a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d490:	83 f8 02             	cmp    $0x2,%eax
  800420d493:	74 5f                	je     800420d4f4 <sched_halt+0x97>
  800420d495:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d49c:	00 00 00 
  800420d49f:	48 8b 10             	mov    (%rax),%rdx
  800420d4a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4a5:	48 98                	cltq   
  800420d4a7:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4ae:	48 01 d0             	add    %rdx,%rax
  800420d4b1:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4b7:	83 f8 03             	cmp    $0x3,%eax
  800420d4ba:	74 38                	je     800420d4f4 <sched_halt+0x97>
  800420d4bc:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d4c3:	00 00 00 
  800420d4c6:	48 8b 10             	mov    (%rax),%rdx
  800420d4c9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4cc:	48 98                	cltq   
  800420d4ce:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4d5:	48 01 d0             	add    %rdx,%rax
  800420d4d8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4de:	83 f8 01             	cmp    $0x1,%eax
  800420d4e1:	74 11                	je     800420d4f4 <sched_halt+0x97>
  800420d4e3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420d4e7:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420d4ee:	0f 8e 7a ff ff ff    	jle    800420d46e <sched_halt+0x11>
  800420d4f4:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420d4fb:	75 2e                	jne    800420d52b <sched_halt+0xce>
  800420d4fd:	48 bf 80 a2 21 04 80 	movabs $0x800421a280,%rdi
  800420d504:	00 00 00 
  800420d507:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d50c:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420d513:	00 00 00 
  800420d516:	ff d2                	callq  *%rdx
  800420d518:	bf 00 00 00 00       	mov    $0x0,%edi
  800420d51d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420d524:	00 00 00 
  800420d527:	ff d0                	callq  *%rax
  800420d529:	eb ed                	jmp    800420d518 <sched_halt+0xbb>
  800420d52b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d532:	00 00 00 
  800420d535:	ff d0                	callq  *%rax
  800420d537:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d53e:	00 00 00 
  800420d541:	48 98                	cltq   
  800420d543:	48 c1 e0 03          	shl    $0x3,%rax
  800420d547:	48 89 c1             	mov    %rax,%rcx
  800420d54a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d54e:	48 01 c8             	add    %rcx,%rax
  800420d551:	48 01 d0             	add    %rdx,%rax
  800420d554:	48 83 c0 08          	add    $0x8,%rax
  800420d558:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d55f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420d566:	00 00 00 
  800420d569:	48 8b 00             	mov    (%rax),%rax
  800420d56c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420d570:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420d577:	00 00 00 
  800420d57a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420d57e:	77 32                	ja     800420d5b2 <sched_halt+0x155>
  800420d580:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d584:	48 89 c1             	mov    %rax,%rcx
  800420d587:	48 ba b0 a2 21 04 80 	movabs $0x800421a2b0,%rdx
  800420d58e:	00 00 00 
  800420d591:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420d596:	48 bf d4 a2 21 04 80 	movabs $0x800421a2d4,%rdi
  800420d59d:	00 00 00 
  800420d5a0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d5a5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420d5ac:	00 00 00 
  800420d5af:	41 ff d0             	callq  *%r8
  800420d5b2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420d5b9:	ff ff ff 
  800420d5bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d5c0:	48 01 d0             	add    %rdx,%rax
  800420d5c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420d5c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d5cb:	0f 22 d8             	mov    %rax,%cr3
  800420d5ce:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d5d5:	00 00 00 
  800420d5d8:	ff d0                	callq  *%rax
  800420d5da:	48 98                	cltq   
  800420d5dc:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5e0:	48 89 c2             	mov    %rax,%rdx
  800420d5e3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d5e7:	48 01 d0             	add    %rdx,%rax
  800420d5ea:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d5f1:	00 00 00 
  800420d5f4:	48 01 d0             	add    %rdx,%rax
  800420d5f7:	48 83 c0 04          	add    $0x4,%rax
  800420d5fb:	be 02 00 00 00       	mov    $0x2,%esi
  800420d600:	48 89 c7             	mov    %rax,%rdi
  800420d603:	48 b8 32 d2 20 04 80 	movabs $0x800420d232,%rax
  800420d60a:	00 00 00 
  800420d60d:	ff d0                	callq  *%rax
  800420d60f:	48 b8 57 d2 20 04 80 	movabs $0x800420d257,%rax
  800420d616:	00 00 00 
  800420d619:	ff d0                	callq  *%rax
  800420d61b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d622:	00 00 00 
  800420d625:	ff d0                	callq  *%rax
  800420d627:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d62e:	00 00 00 
  800420d631:	48 98                	cltq   
  800420d633:	48 c1 e0 03          	shl    $0x3,%rax
  800420d637:	48 89 c1             	mov    %rax,%rcx
  800420d63a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d63e:	48 01 c8             	add    %rcx,%rax
  800420d641:	48 01 d0             	add    %rdx,%rax
  800420d644:	48 83 c0 10          	add    $0x10,%rax
  800420d648:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420d64c:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420d653:	48 89 c4             	mov    %rax,%rsp
  800420d656:	6a 00                	pushq  $0x0
  800420d658:	6a 00                	pushq  $0x0
  800420d65a:	fb                   	sti    
  800420d65b:	f4                   	hlt    
  800420d65c:	c9                   	leaveq 
  800420d65d:	c3                   	retq   

000000800420d65e <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420d65e:	55                   	push   %rbp
  800420d65f:	48 89 e5             	mov    %rsp,%rbp
  800420d662:	48 83 ec 10          	sub    $0x10,%rsp
  800420d666:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d66a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420d66e:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d675:	00 00 00 
  800420d678:	ff d0                	callq  *%rax
  800420d67a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d681:	00 00 00 
  800420d684:	48 98                	cltq   
  800420d686:	48 c1 e0 03          	shl    $0x3,%rax
  800420d68a:	48 89 c1             	mov    %rax,%rcx
  800420d68d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d691:	48 01 c8             	add    %rcx,%rax
  800420d694:	48 01 d0             	add    %rdx,%rax
  800420d697:	48 83 c0 08          	add    $0x8,%rax
  800420d69b:	48 8b 00             	mov    (%rax),%rax
  800420d69e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d6a2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d6a6:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d6ab:	48 89 c7             	mov    %rax,%rdi
  800420d6ae:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d6b5:	00 00 00 
  800420d6b8:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420d6ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d6be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d6c2:	48 89 c6             	mov    %rax,%rsi
  800420d6c5:	48 bf e8 a2 21 04 80 	movabs $0x800421a2e8,%rdi
  800420d6cc:	00 00 00 
  800420d6cf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d6d4:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420d6db:	00 00 00 
  800420d6de:	ff d1                	callq  *%rcx
}
  800420d6e0:	c9                   	leaveq 
  800420d6e1:	c3                   	retq   

000000800420d6e2 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420d6e2:	55                   	push   %rbp
  800420d6e3:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420d6e6:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  800420d6ed:	00 00 00 
  800420d6f0:	ff d0                	callq  *%rax
}
  800420d6f2:	5d                   	pop    %rbp
  800420d6f3:	c3                   	retq   

000000800420d6f4 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420d6f4:	55                   	push   %rbp
  800420d6f5:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420d6f8:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d6ff:	00 00 00 
  800420d702:	ff d0                	callq  *%rax
  800420d704:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d70b:	00 00 00 
  800420d70e:	48 98                	cltq   
  800420d710:	48 c1 e0 03          	shl    $0x3,%rax
  800420d714:	48 89 c1             	mov    %rax,%rcx
  800420d717:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d71b:	48 01 c8             	add    %rcx,%rax
  800420d71e:	48 01 d0             	add    %rdx,%rax
  800420d721:	48 83 c0 08          	add    $0x8,%rax
  800420d725:	48 8b 00             	mov    (%rax),%rax
  800420d728:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d72e:	5d                   	pop    %rbp
  800420d72f:	c3                   	retq   

000000800420d730 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420d730:	55                   	push   %rbp
  800420d731:	48 89 e5             	mov    %rsp,%rbp
  800420d734:	48 83 ec 20          	sub    $0x20,%rsp
  800420d738:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d73b:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d73f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d742:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d747:	48 89 ce             	mov    %rcx,%rsi
  800420d74a:	89 c7                	mov    %eax,%edi
  800420d74c:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d753:	00 00 00 
  800420d756:	ff d0                	callq  *%rax
  800420d758:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d75b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d75f:	79 05                	jns    800420d766 <sys_env_destroy+0x36>
		return r;
  800420d761:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d764:	eb 18                	jmp    800420d77e <sys_env_destroy+0x4e>
	env_destroy(e);
  800420d766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d76a:	48 89 c7             	mov    %rax,%rdi
  800420d76d:	48 b8 6a 8e 20 04 80 	movabs $0x8004208e6a,%rax
  800420d774:	00 00 00 
  800420d777:	ff d0                	callq  *%rax
	return 0;
  800420d779:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d77e:	c9                   	leaveq 
  800420d77f:	c3                   	retq   

000000800420d780 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420d780:	55                   	push   %rbp
  800420d781:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420d784:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  800420d78b:	00 00 00 
  800420d78e:	ff d0                	callq  *%rax

000000800420d790 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420d790:	55                   	push   %rbp
  800420d791:	48 89 e5             	mov    %rsp,%rbp
  800420d794:	53                   	push   %rbx
  800420d795:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420d799:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d7a0:	00 00 00 
  800420d7a3:	ff d0                	callq  *%rax
  800420d7a5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d7ac:	00 00 00 
  800420d7af:	48 98                	cltq   
  800420d7b1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d7b5:	48 89 c1             	mov    %rax,%rcx
  800420d7b8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d7bc:	48 01 c8             	add    %rcx,%rax
  800420d7bf:	48 01 d0             	add    %rdx,%rax
  800420d7c2:	48 83 c0 08          	add    $0x8,%rax
  800420d7c6:	48 8b 00             	mov    (%rax),%rax
  800420d7c9:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420d7cf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420d7d3:	89 d6                	mov    %edx,%esi
  800420d7d5:	48 89 c7             	mov    %rax,%rdi
  800420d7d8:	48 b8 d5 82 20 04 80 	movabs $0x80042082d5,%rax
  800420d7df:	00 00 00 
  800420d7e2:	ff d0                	callq  *%rax
  800420d7e4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420d7e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420d7eb:	79 05                	jns    800420d7f2 <sys_exofork+0x62>
		return r;
  800420d7ed:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d7f0:	eb 6c                	jmp    800420d85e <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420d7f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d7f6:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420d7fd:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420d800:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420d804:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d80b:	00 00 00 
  800420d80e:	ff d0                	callq  *%rax
  800420d810:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d817:	00 00 00 
  800420d81a:	48 98                	cltq   
  800420d81c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d820:	48 89 c1             	mov    %rax,%rcx
  800420d823:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d827:	48 01 c8             	add    %rcx,%rax
  800420d82a:	48 01 d0             	add    %rdx,%rax
  800420d82d:	48 83 c0 08          	add    $0x8,%rax
  800420d831:	48 8b 00             	mov    (%rax),%rax
  800420d834:	48 89 da             	mov    %rbx,%rdx
  800420d837:	48 89 c6             	mov    %rax,%rsi
  800420d83a:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d83f:	48 89 d7             	mov    %rdx,%rdi
  800420d842:	48 89 c1             	mov    %rax,%rcx
  800420d845:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420d848:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d84c:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420d853:	00 
	return e->env_id;
  800420d854:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d858:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d85e:	48 83 c4 18          	add    $0x18,%rsp
  800420d862:	5b                   	pop    %rbx
  800420d863:	5d                   	pop    %rbp
  800420d864:	c3                   	retq   

000000800420d865 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420d865:	55                   	push   %rbp
  800420d866:	48 89 e5             	mov    %rsp,%rbp
  800420d869:	48 83 ec 20          	sub    $0x20,%rsp
  800420d86d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d870:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d873:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d877:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d87a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d87f:	48 89 ce             	mov    %rcx,%rsi
  800420d882:	89 c7                	mov    %eax,%edi
  800420d884:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d88b:	00 00 00 
  800420d88e:	ff d0                	callq  *%rax
  800420d890:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d893:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d897:	79 05                	jns    800420d89e <sys_env_set_status+0x39>
		return r;
  800420d899:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d89c:	eb 25                	jmp    800420d8c3 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420d89e:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420d8a2:	74 0d                	je     800420d8b1 <sys_env_set_status+0x4c>
  800420d8a4:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420d8a8:	74 07                	je     800420d8b1 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420d8aa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420d8af:	eb 12                	jmp    800420d8c3 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420d8b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d8b5:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420d8b8:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420d8be:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d8c3:	c9                   	leaveq 
  800420d8c4:	c3                   	retq   

000000800420d8c5 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420d8c5:	55                   	push   %rbp
  800420d8c6:	48 89 e5             	mov    %rsp,%rbp
  800420d8c9:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420d8d0:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420d8d6:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420d8dd:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420d8e4:	00 00 00 
  800420d8e7:	ff d0                	callq  *%rax
  800420d8e9:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d8f0:	00 00 00 
  800420d8f3:	48 98                	cltq   
  800420d8f5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d8f9:	48 89 c1             	mov    %rax,%rcx
  800420d8fc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d900:	48 01 c8             	add    %rcx,%rax
  800420d903:	48 01 d0             	add    %rdx,%rax
  800420d906:	48 83 c0 08          	add    $0x8,%rax
  800420d90a:	48 8b 00             	mov    (%rax),%rax
  800420d90d:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420d914:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d919:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420d91e:	48 89 c7             	mov    %rax,%rdi
  800420d921:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d928:	00 00 00 
  800420d92b:	ff d0                	callq  *%rax
	ltf = *tf;
  800420d92d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420d934:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420d93b:	48 89 c6             	mov    %rax,%rsi
  800420d93e:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d943:	48 89 d7             	mov    %rdx,%rdi
  800420d946:	48 89 c1             	mov    %rax,%rcx
  800420d949:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420d94c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d950:	80 cc 02             	or     $0x2,%ah
  800420d953:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420d957:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420d95b:	83 c8 03             	or     $0x3,%eax
  800420d95e:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d962:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d966:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420d96c:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d971:	48 89 ce             	mov    %rcx,%rsi
  800420d974:	89 c7                	mov    %eax,%edi
  800420d976:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d97d:	00 00 00 
  800420d980:	ff d0                	callq  *%rax
  800420d982:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d985:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d989:	79 05                	jns    800420d990 <sys_env_set_trapframe+0xcb>
		return r;
  800420d98b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d98e:	eb 21                	jmp    800420d9b1 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420d990:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d994:	48 89 c2             	mov    %rax,%rdx
  800420d997:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420d99e:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d9a3:	48 89 d7             	mov    %rdx,%rdi
  800420d9a6:	48 89 c1             	mov    %rax,%rcx
  800420d9a9:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420d9ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d9b1:	c9                   	leaveq 
  800420d9b2:	c3                   	retq   

000000800420d9b3 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420d9b3:	55                   	push   %rbp
  800420d9b4:	48 89 e5             	mov    %rsp,%rbp
  800420d9b7:	48 83 ec 20          	sub    $0x20,%rsp
  800420d9bb:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d9be:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d9c2:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d9c6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d9c9:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d9ce:	48 89 ce             	mov    %rcx,%rsi
  800420d9d1:	89 c7                	mov    %eax,%edi
  800420d9d3:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d9da:	00 00 00 
  800420d9dd:	ff d0                	callq  *%rax
  800420d9df:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9e2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9e6:	79 05                	jns    800420d9ed <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420d9e8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9eb:	eb 14                	jmp    800420da01 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420d9ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d9f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d9f5:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420d9fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420da01:	c9                   	leaveq 
  800420da02:	c3                   	retq   

000000800420da03 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420da03:	55                   	push   %rbp
  800420da04:	48 89 e5             	mov    %rsp,%rbp
  800420da07:	48 83 ec 30          	sub    $0x30,%rsp
  800420da0b:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420da0e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420da12:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420da15:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420da19:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420da1c:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da21:	48 89 ce             	mov    %rcx,%rsi
  800420da24:	89 c7                	mov    %eax,%edi
  800420da26:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420da2d:	00 00 00 
  800420da30:	ff d0                	callq  *%rax
  800420da32:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da35:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da39:	79 08                	jns    800420da43 <sys_page_alloc+0x40>
		return r;
  800420da3b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da3e:	e9 a7 00 00 00       	jmpq   800420daea <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420da43:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420da46:	f7 d0                	not    %eax
  800420da48:	83 e0 05             	and    $0x5,%eax
  800420da4b:	85 c0                	test   %eax,%eax
  800420da4d:	75 0c                	jne    800420da5b <sys_page_alloc+0x58>
  800420da4f:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420da52:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420da57:	85 c0                	test   %eax,%eax
  800420da59:	74 0a                	je     800420da65 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420da5b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420da60:	e9 85 00 00 00       	jmpq   800420daea <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420da65:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420da6c:	00 00 00 
  800420da6f:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420da73:	76 07                	jbe    800420da7c <sys_page_alloc+0x79>
		return -E_INVAL;
  800420da75:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420da7a:	eb 6e                	jmp    800420daea <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420da7c:	bf 01 00 00 00       	mov    $0x1,%edi
  800420da81:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420da88:	00 00 00 
  800420da8b:	ff d0                	callq  *%rax
  800420da8d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420da91:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420da96:	75 07                	jne    800420da9f <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420da98:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420da9d:	eb 4b                	jmp    800420daea <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420da9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420daa3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420daaa:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420daad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420dab1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420dab5:	48 89 c7             	mov    %rax,%rdi
  800420dab8:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dabf:	00 00 00 
  800420dac2:	ff d0                	callq  *%rax
  800420dac4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dac7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dacb:	79 18                	jns    800420dae5 <sys_page_alloc+0xe2>
		page_free(pp);
  800420dacd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dad1:	48 89 c7             	mov    %rax,%rdi
  800420dad4:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420dadb:	00 00 00 
  800420dade:	ff d0                	callq  *%rax
		return r;
  800420dae0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dae3:	eb 05                	jmp    800420daea <sys_page_alloc+0xe7>
	}
	return 0;
  800420dae5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420daea:	c9                   	leaveq 
  800420daeb:	c3                   	retq   

000000800420daec <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420daec:	55                   	push   %rbp
  800420daed:	48 89 e5             	mov    %rsp,%rbp
  800420daf0:	48 83 ec 60          	sub    $0x60,%rsp
  800420daf4:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420daf7:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420dafb:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420dafe:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420db02:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420db06:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db0d:	00 00 00 
  800420db10:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420db14:	77 10                	ja     800420db26 <sys_page_map+0x3a>
  800420db16:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db1d:	00 00 00 
  800420db20:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420db24:	76 0a                	jbe    800420db30 <sys_page_map+0x44>
		return -E_INVAL;
  800420db26:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db2b:	e9 3f 01 00 00       	jmpq   800420dc6f <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420db30:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420db34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420db38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420db3c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420db42:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420db46:	75 18                	jne    800420db60 <sys_page_map+0x74>
  800420db48:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420db4c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420db50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420db54:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420db5a:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420db5e:	74 0a                	je     800420db6a <sys_page_map+0x7e>
		return -E_INVAL;
  800420db60:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db65:	e9 05 01 00 00       	jmpq   800420dc6f <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420db6a:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420db6e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420db71:	ba 01 00 00 00       	mov    $0x1,%edx
  800420db76:	48 89 ce             	mov    %rcx,%rsi
  800420db79:	89 c7                	mov    %eax,%edi
  800420db7b:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420db82:	00 00 00 
  800420db85:	ff d0                	callq  *%rax
  800420db87:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db8a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db8e:	78 26                	js     800420dbb6 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420db90:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420db94:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420db97:	ba 01 00 00 00       	mov    $0x1,%edx
  800420db9c:	48 89 ce             	mov    %rcx,%rsi
  800420db9f:	89 c7                	mov    %eax,%edi
  800420dba1:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dba8:	00 00 00 
  800420dbab:	ff d0                	callq  *%rax
  800420dbad:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dbb0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dbb4:	79 08                	jns    800420dbbe <sys_page_map+0xd2>
		return r;
  800420dbb6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dbb9:	e9 b1 00 00 00       	jmpq   800420dc6f <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420dbbe:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dbc1:	f7 d0                	not    %eax
  800420dbc3:	83 e0 05             	and    $0x5,%eax
  800420dbc6:	85 c0                	test   %eax,%eax
  800420dbc8:	75 0c                	jne    800420dbd6 <sys_page_map+0xea>
  800420dbca:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dbcd:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dbd2:	85 c0                	test   %eax,%eax
  800420dbd4:	74 0a                	je     800420dbe0 <sys_page_map+0xf4>
		return -E_INVAL;
  800420dbd6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbdb:	e9 8f 00 00 00       	jmpq   800420dc6f <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420dbe0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dbe4:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dbeb:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420dbef:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420dbf3:	48 89 ce             	mov    %rcx,%rsi
  800420dbf6:	48 89 c7             	mov    %rax,%rdi
  800420dbf9:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420dc00:	00 00 00 
  800420dc03:	ff d0                	callq  *%rax
  800420dc05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420dc09:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420dc0e:	75 07                	jne    800420dc17 <sys_page_map+0x12b>
		return -E_INVAL;
  800420dc10:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc15:	eb 58                	jmp    800420dc6f <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420dc17:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc1a:	83 e0 02             	and    $0x2,%eax
  800420dc1d:	85 c0                	test   %eax,%eax
  800420dc1f:	74 16                	je     800420dc37 <sys_page_map+0x14b>
  800420dc21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dc25:	48 8b 00             	mov    (%rax),%rax
  800420dc28:	83 e0 02             	and    $0x2,%eax
  800420dc2b:	48 85 c0             	test   %rax,%rax
  800420dc2e:	75 07                	jne    800420dc37 <sys_page_map+0x14b>
		return -E_INVAL;
  800420dc30:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc35:	eb 38                	jmp    800420dc6f <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420dc37:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dc3b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc42:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420dc45:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420dc49:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dc4d:	48 89 c7             	mov    %rax,%rdi
  800420dc50:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dc57:	00 00 00 
  800420dc5a:	ff d0                	callq  *%rax
  800420dc5c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc5f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc63:	79 05                	jns    800420dc6a <sys_page_map+0x17e>
		return r;
  800420dc65:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc68:	eb 05                	jmp    800420dc6f <sys_page_map+0x183>
	return 0;
  800420dc6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dc6f:	c9                   	leaveq 
  800420dc70:	c3                   	retq   

000000800420dc71 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420dc71:	55                   	push   %rbp
  800420dc72:	48 89 e5             	mov    %rsp,%rbp
  800420dc75:	48 83 ec 20          	sub    $0x20,%rsp
  800420dc79:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dc7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420dc80:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dc84:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dc87:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dc8c:	48 89 ce             	mov    %rcx,%rsi
  800420dc8f:	89 c7                	mov    %eax,%edi
  800420dc91:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dc98:	00 00 00 
  800420dc9b:	ff d0                	callq  *%rax
  800420dc9d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dca0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dca4:	79 05                	jns    800420dcab <sys_page_unmap+0x3a>
		return r;
  800420dca6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dca9:	eb 4b                	jmp    800420dcf6 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420dcab:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dcb2:	00 00 00 
  800420dcb5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420dcb9:	77 0e                	ja     800420dcc9 <sys_page_unmap+0x58>
  800420dcbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dcbf:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420dcc4:	48 85 c0             	test   %rax,%rax
  800420dcc7:	74 07                	je     800420dcd0 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420dcc9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dcce:	eb 26                	jmp    800420dcf6 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420dcd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dcd4:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dcdb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420dcdf:	48 89 d6             	mov    %rdx,%rsi
  800420dce2:	48 89 c7             	mov    %rax,%rdi
  800420dce5:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  800420dcec:	00 00 00 
  800420dcef:	ff d0                	callq  *%rax
	return 0;
  800420dcf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dcf6:	c9                   	leaveq 
  800420dcf7:	c3                   	retq   

000000800420dcf8 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420dcf8:	55                   	push   %rbp
  800420dcf9:	48 89 e5             	mov    %rsp,%rbp
  800420dcfc:	53                   	push   %rbx
  800420dcfd:	48 83 ec 48          	sub    $0x48,%rsp
  800420dd01:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420dd04:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420dd07:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420dd0b:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420dd0e:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dd12:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420dd15:	ba 00 00 00 00       	mov    $0x0,%edx
  800420dd1a:	48 89 ce             	mov    %rcx,%rsi
  800420dd1d:	89 c7                	mov    %eax,%edi
  800420dd1f:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dd26:	00 00 00 
  800420dd29:	ff d0                	callq  *%rax
  800420dd2b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dd2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420dd32:	79 08                	jns    800420dd3c <sys_ipc_try_send+0x44>
        return r;
  800420dd34:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dd37:	e9 25 03 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420dd3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dd40:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420dd47:	83 f0 01             	xor    $0x1,%eax
  800420dd4a:	84 c0                	test   %al,%al
  800420dd4c:	74 0a                	je     800420dd58 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420dd4e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420dd53:	e9 09 03 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420dd58:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd5f:	00 00 00 
  800420dd62:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420dd66:	0f 87 70 02 00 00    	ja     800420dfdc <sys_ipc_try_send+0x2e4>
  800420dd6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dd70:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420dd77:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd7e:	00 00 00 
  800420dd81:	48 39 c2             	cmp    %rax,%rdx
  800420dd84:	0f 87 52 02 00 00    	ja     800420dfdc <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420dd8a:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dd8d:	f7 d0                	not    %eax
  800420dd8f:	83 e0 05             	and    $0x5,%eax
  800420dd92:	85 c0                	test   %eax,%eax
  800420dd94:	75 0c                	jne    800420dda2 <sys_ipc_try_send+0xaa>
  800420dd96:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dd99:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dd9e:	85 c0                	test   %eax,%eax
  800420dda0:	74 60                	je     800420de02 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420dda2:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420dda9:	00 00 00 
  800420ddac:	ff d0                	callq  *%rax
  800420ddae:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ddb5:	00 00 00 
  800420ddb8:	48 98                	cltq   
  800420ddba:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddbe:	48 89 c1             	mov    %rax,%rcx
  800420ddc1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ddc5:	48 01 c8             	add    %rcx,%rax
  800420ddc8:	48 01 d0             	add    %rdx,%rax
  800420ddcb:	48 83 c0 08          	add    $0x8,%rax
  800420ddcf:	48 8b 00             	mov    (%rax),%rax
  800420ddd2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ddd8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420dddb:	89 c6                	mov    %eax,%esi
  800420dddd:	48 bf f0 a2 21 04 80 	movabs $0x800421a2f0,%rdi
  800420dde4:	00 00 00 
  800420dde7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ddec:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420ddf3:	00 00 00 
  800420ddf6:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420ddf8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ddfd:	e9 5f 02 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420de02:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420de09:	00 00 00 
  800420de0c:	ff d0                	callq  *%rax
  800420de0e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de15:	00 00 00 
  800420de18:	48 98                	cltq   
  800420de1a:	48 c1 e0 03          	shl    $0x3,%rax
  800420de1e:	48 89 c1             	mov    %rax,%rcx
  800420de21:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de25:	48 01 c8             	add    %rcx,%rax
  800420de28:	48 01 d0             	add    %rdx,%rax
  800420de2b:	48 83 c0 08          	add    $0x8,%rax
  800420de2f:	48 8b 00             	mov    (%rax),%rax
  800420de32:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420de39:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420de3d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420de41:	48 89 ce             	mov    %rcx,%rsi
  800420de44:	48 89 c7             	mov    %rax,%rdi
  800420de47:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420de4e:	00 00 00 
  800420de51:	ff d0                	callq  *%rax
  800420de53:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420de57:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420de5c:	75 61                	jne    800420debf <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420de5e:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420de65:	00 00 00 
  800420de68:	ff d0                	callq  *%rax
  800420de6a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de71:	00 00 00 
  800420de74:	48 98                	cltq   
  800420de76:	48 c1 e0 03          	shl    $0x3,%rax
  800420de7a:	48 89 c1             	mov    %rax,%rcx
  800420de7d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de81:	48 01 c8             	add    %rcx,%rax
  800420de84:	48 01 d0             	add    %rdx,%rax
  800420de87:	48 83 c0 08          	add    $0x8,%rax
  800420de8b:	48 8b 00             	mov    (%rax),%rax
  800420de8e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420de94:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420de98:	89 c6                	mov    %eax,%esi
  800420de9a:	48 bf 18 a3 21 04 80 	movabs $0x800421a318,%rdi
  800420dea1:	00 00 00 
  800420dea4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dea9:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  800420deb0:	00 00 00 
  800420deb3:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420deb5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420deba:	e9 a2 01 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420debf:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dec2:	83 e0 02             	and    $0x2,%eax
  800420dec5:	85 c0                	test   %eax,%eax
  800420dec7:	74 6c                	je     800420df35 <sys_ipc_try_send+0x23d>
  800420dec9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420decd:	48 8b 00             	mov    (%rax),%rax
  800420ded0:	83 e0 02             	and    $0x2,%eax
  800420ded3:	48 85 c0             	test   %rax,%rax
  800420ded6:	75 5d                	jne    800420df35 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420ded8:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420dedf:	00 00 00 
  800420dee2:	ff d0                	callq  *%rax
  800420dee4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420deeb:	00 00 00 
  800420deee:	48 98                	cltq   
  800420def0:	48 c1 e0 03          	shl    $0x3,%rax
  800420def4:	48 89 c1             	mov    %rax,%rcx
  800420def7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420defb:	48 01 c8             	add    %rcx,%rax
  800420defe:	48 01 d0             	add    %rdx,%rax
  800420df01:	48 83 c0 08          	add    $0x8,%rax
  800420df05:	48 8b 00             	mov    (%rax),%rax
  800420df08:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420df0e:	89 c6                	mov    %eax,%esi
  800420df10:	48 bf 50 a3 21 04 80 	movabs $0x800421a350,%rdi
  800420df17:	00 00 00 
  800420df1a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df1f:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420df26:	00 00 00 
  800420df29:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420df2b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420df30:	e9 2c 01 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420df35:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420df38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df3c:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420df43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df47:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420df4e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420df52:	48 89 c7             	mov    %rax,%rdi
  800420df55:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420df5c:	00 00 00 
  800420df5f:	ff d0                	callq  *%rax
  800420df61:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420df64:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420df68:	79 63                	jns    800420dfcd <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420df6a:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420df71:	00 00 00 
  800420df74:	ff d0                	callq  *%rax
  800420df76:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420df7d:	00 00 00 
  800420df80:	48 98                	cltq   
  800420df82:	48 c1 e0 03          	shl    $0x3,%rax
  800420df86:	48 89 c1             	mov    %rax,%rcx
  800420df89:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df8d:	48 01 c8             	add    %rcx,%rax
  800420df90:	48 01 d0             	add    %rdx,%rax
  800420df93:	48 83 c0 08          	add    $0x8,%rax
  800420df97:	48 8b 00             	mov    (%rax),%rax
  800420df9a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dfa0:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420dfa3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420dfa7:	89 c6                	mov    %eax,%esi
  800420dfa9:	48 bf 98 a3 21 04 80 	movabs $0x800421a398,%rdi
  800420dfb0:	00 00 00 
  800420dfb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dfb8:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  800420dfbf:	00 00 00 
  800420dfc2:	41 ff d0             	callq  *%r8
            return r;
  800420dfc5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dfc8:	e9 94 00 00 00       	jmpq   800420e061 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420dfcd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dfd1:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420dfd4:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420dfda:	eb 0e                	jmp    800420dfea <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420dfdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dfe0:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420dfe7:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420dfea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dfee:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420dff5:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420dff9:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e000:	00 00 00 
  800420e003:	ff d0                	callq  *%rax
  800420e005:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e00c:	00 00 00 
  800420e00f:	48 98                	cltq   
  800420e011:	48 c1 e0 03          	shl    $0x3,%rax
  800420e015:	48 89 c1             	mov    %rax,%rcx
  800420e018:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e01c:	48 01 c8             	add    %rcx,%rax
  800420e01f:	48 01 d0             	add    %rdx,%rax
  800420e022:	48 83 c0 08          	add    $0x8,%rax
  800420e026:	48 8b 00             	mov    (%rax),%rax
  800420e029:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e02f:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e035:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e039:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e03c:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e042:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e046:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e04d:	00 
    e->env_status = ENV_RUNNABLE;
  800420e04e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e052:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e059:	00 00 00 
    return 0;
  800420e05c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e061:	48 83 c4 48          	add    $0x48,%rsp
  800420e065:	5b                   	pop    %rbx
  800420e066:	5d                   	pop    %rbp
  800420e067:	c3                   	retq   

000000800420e068 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e068:	55                   	push   %rbp
  800420e069:	48 89 e5             	mov    %rsp,%rbp
  800420e06c:	48 83 ec 10          	sub    $0x10,%rsp
  800420e070:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e074:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e07b:	00 00 00 
  800420e07e:	ff d0                	callq  *%rax
  800420e080:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e087:	00 00 00 
  800420e08a:	48 98                	cltq   
  800420e08c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e090:	48 89 c1             	mov    %rax,%rcx
  800420e093:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e097:	48 01 c8             	add    %rcx,%rax
  800420e09a:	48 01 d0             	add    %rdx,%rax
  800420e09d:	48 83 c0 08          	add    $0x8,%rax
  800420e0a1:	48 8b 00             	mov    (%rax),%rax
  800420e0a4:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e0ab:	84 c0                	test   %al,%al
  800420e0ad:	74 2a                	je     800420e0d9 <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e0af:	48 ba d1 a3 21 04 80 	movabs $0x800421a3d1,%rdx
  800420e0b6:	00 00 00 
  800420e0b9:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e0be:	48 bf e2 a3 21 04 80 	movabs $0x800421a3e2,%rdi
  800420e0c5:	00 00 00 
  800420e0c8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e0cd:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420e0d4:	00 00 00 
  800420e0d7:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420e0d9:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e0e0:	00 00 00 
  800420e0e3:	ff d0                	callq  *%rax
  800420e0e5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e0ec:	00 00 00 
  800420e0ef:	48 98                	cltq   
  800420e0f1:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0f5:	48 89 c1             	mov    %rax,%rcx
  800420e0f8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0fc:	48 01 c8             	add    %rcx,%rax
  800420e0ff:	48 01 d0             	add    %rdx,%rax
  800420e102:	48 83 c0 08          	add    $0x8,%rax
  800420e106:	48 8b 00             	mov    (%rax),%rax
  800420e109:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420e110:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e117:	00 00 00 
  800420e11a:	ff d0                	callq  *%rax
  800420e11c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e123:	00 00 00 
  800420e126:	48 98                	cltq   
  800420e128:	48 c1 e0 03          	shl    $0x3,%rax
  800420e12c:	48 89 c1             	mov    %rax,%rcx
  800420e12f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e133:	48 01 c8             	add    %rcx,%rax
  800420e136:	48 01 d0             	add    %rdx,%rax
  800420e139:	48 83 c0 08          	add    $0x8,%rax
  800420e13d:	48 8b 00             	mov    (%rax),%rax
  800420e140:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e144:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420e14b:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e152:	00 00 00 
  800420e155:	ff d0                	callq  *%rax
  800420e157:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e15e:	00 00 00 
  800420e161:	48 98                	cltq   
  800420e163:	48 c1 e0 03          	shl    $0x3,%rax
  800420e167:	48 89 c1             	mov    %rax,%rcx
  800420e16a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e16e:	48 01 c8             	add    %rcx,%rax
  800420e171:	48 01 d0             	add    %rdx,%rax
  800420e174:	48 83 c0 08          	add    $0x8,%rax
  800420e178:	48 8b 00             	mov    (%rax),%rax
  800420e17b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e182:	00 00 00 
	sched_yield();
  800420e185:	48 b8 75 d2 20 04 80 	movabs $0x800420d275,%rax
  800420e18c:	00 00 00 
  800420e18f:	ff d0                	callq  *%rax

000000800420e191 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420e191:	55                   	push   %rbp
  800420e192:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420e195:	48 b8 80 88 21 04 80 	movabs $0x8004218880,%rax
  800420e19c:	00 00 00 
  800420e19f:	ff d0                	callq  *%rax
}
  800420e1a1:	5d                   	pop    %rbp
  800420e1a2:	c3                   	retq   

000000800420e1a3 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420e1a3:	55                   	push   %rbp
  800420e1a4:	48 89 e5             	mov    %rsp,%rbp
  800420e1a7:	48 83 ec 10          	sub    $0x10,%rsp
  800420e1ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e1af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420e1b3:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e1ba:	00 00 00 
  800420e1bd:	ff d0                	callq  *%rax
  800420e1bf:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e1c6:	00 00 00 
  800420e1c9:	48 98                	cltq   
  800420e1cb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1cf:	48 89 c1             	mov    %rax,%rcx
  800420e1d2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1d6:	48 01 c8             	add    %rcx,%rax
  800420e1d9:	48 01 d0             	add    %rdx,%rax
  800420e1dc:	48 83 c0 08          	add    $0x8,%rax
  800420e1e0:	48 8b 00             	mov    (%rax),%rax
  800420e1e3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e1e7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e1eb:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e1f0:	48 89 c7             	mov    %rax,%rdi
  800420e1f3:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e1fa:	00 00 00 
  800420e1fd:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420e1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e203:	89 c2                	mov    %eax,%edx
  800420e205:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e209:	89 d6                	mov    %edx,%esi
  800420e20b:	48 89 c7             	mov    %rax,%rdi
  800420e20e:	48 b8 09 7a 21 04 80 	movabs $0x8004217a09,%rax
  800420e215:	00 00 00 
  800420e218:	ff d0                	callq  *%rax
}
  800420e21a:	c9                   	leaveq 
  800420e21b:	c3                   	retq   

000000800420e21c <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420e21c:	55                   	push   %rbp
  800420e21d:	48 89 e5             	mov    %rsp,%rbp
  800420e220:	48 83 ec 10          	sub    $0x10,%rsp
  800420e224:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e228:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420e22c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420e233:	00 00 00 
  800420e236:	ff d0                	callq  *%rax
  800420e238:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e23f:	00 00 00 
  800420e242:	48 98                	cltq   
  800420e244:	48 c1 e0 03          	shl    $0x3,%rax
  800420e248:	48 89 c1             	mov    %rax,%rcx
  800420e24b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e24f:	48 01 c8             	add    %rcx,%rax
  800420e252:	48 01 d0             	add    %rdx,%rax
  800420e255:	48 83 c0 08          	add    $0x8,%rax
  800420e259:	48 8b 00             	mov    (%rax),%rax
  800420e25c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e260:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e264:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e269:	48 89 c7             	mov    %rax,%rdi
  800420e26c:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e273:	00 00 00 
  800420e276:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420e278:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e27c:	89 c2                	mov    %eax,%edx
  800420e27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e282:	89 d6                	mov    %edx,%esi
  800420e284:	48 89 c7             	mov    %rax,%rdi
  800420e287:	48 b8 78 7b 21 04 80 	movabs $0x8004217b78,%rax
  800420e28e:	00 00 00 
  800420e291:	ff d0                	callq  *%rax
}
  800420e293:	c9                   	leaveq 
  800420e294:	c3                   	retq   

000000800420e295 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420e295:	55                   	push   %rbp
  800420e296:	48 89 e5             	mov    %rsp,%rbp
  800420e299:	48 83 ec 30          	sub    $0x30,%rsp
  800420e29d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e2a1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e2a5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420e2a9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420e2ad:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420e2b1:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420e2b5:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
  800420e2ba:	0f 87 0d 02 00 00    	ja     800420e4cd <syscall+0x238>
  800420e2c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e2c4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420e2cb:	00 
  800420e2cc:	48 b8 f8 a3 21 04 80 	movabs $0x800421a3f8,%rax
  800420e2d3:	00 00 00 
  800420e2d6:	48 01 d0             	add    %rdx,%rax
  800420e2d9:	48 8b 00             	mov    (%rax),%rax
  800420e2dc:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420e2de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e2e6:	48 89 d6             	mov    %rdx,%rsi
  800420e2e9:	48 89 c7             	mov    %rax,%rdi
  800420e2ec:	48 b8 5e d6 20 04 80 	movabs $0x800420d65e,%rax
  800420e2f3:	00 00 00 
  800420e2f6:	ff d0                	callq  *%rax
		return 0;
  800420e2f8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e2fd:	e9 d2 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_cgetc:
		return sys_cgetc();
  800420e302:	48 b8 e2 d6 20 04 80 	movabs $0x800420d6e2,%rax
  800420e309:	00 00 00 
  800420e30c:	ff d0                	callq  *%rax
  800420e30e:	48 98                	cltq   
  800420e310:	e9 bf 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_getenvid:
		return sys_getenvid();
  800420e315:	48 b8 f4 d6 20 04 80 	movabs $0x800420d6f4,%rax
  800420e31c:	00 00 00 
  800420e31f:	ff d0                	callq  *%rax
  800420e321:	48 98                	cltq   
  800420e323:	e9 ac 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420e328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e32c:	89 c7                	mov    %eax,%edi
  800420e32e:	48 b8 30 d7 20 04 80 	movabs $0x800420d730,%rax
  800420e335:	00 00 00 
  800420e338:	ff d0                	callq  *%rax
  800420e33a:	48 98                	cltq   
  800420e33c:	e9 93 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420e341:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e345:	89 c2                	mov    %eax,%edx
  800420e347:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420e34b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e34f:	48 89 ce             	mov    %rcx,%rsi
  800420e352:	89 c7                	mov    %eax,%edi
  800420e354:	48 b8 03 da 20 04 80 	movabs $0x800420da03,%rax
  800420e35b:	00 00 00 
  800420e35e:	ff d0                	callq  *%rax
  800420e360:	48 98                	cltq   
  800420e362:	e9 6d 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420e367:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e36b:	89 c7                	mov    %eax,%edi
  800420e36d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420e371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e375:	89 c2                	mov    %eax,%edx
  800420e377:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420e37b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e37f:	41 89 f8             	mov    %edi,%r8d
  800420e382:	89 c7                	mov    %eax,%edi
  800420e384:	48 b8 ec da 20 04 80 	movabs $0x800420daec,%rax
  800420e38b:	00 00 00 
  800420e38e:	ff d0                	callq  *%rax
  800420e390:	48 98                	cltq   
  800420e392:	e9 3d 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420e397:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e39b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e39f:	48 89 d6             	mov    %rdx,%rsi
  800420e3a2:	89 c7                	mov    %eax,%edi
  800420e3a4:	48 b8 71 dc 20 04 80 	movabs $0x800420dc71,%rax
  800420e3ab:	00 00 00 
  800420e3ae:	ff d0                	callq  *%rax
  800420e3b0:	48 98                	cltq   
  800420e3b2:	e9 1d 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_exofork:
		return sys_exofork();
  800420e3b7:	48 b8 90 d7 20 04 80 	movabs $0x800420d790,%rax
  800420e3be:	00 00 00 
  800420e3c1:	ff d0                	callq  *%rax
  800420e3c3:	48 98                	cltq   
  800420e3c5:	e9 0a 01 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420e3ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e3ce:	89 c2                	mov    %eax,%edx
  800420e3d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3d4:	89 d6                	mov    %edx,%esi
  800420e3d6:	89 c7                	mov    %eax,%edi
  800420e3d8:	48 b8 65 d8 20 04 80 	movabs $0x800420d865,%rax
  800420e3df:	00 00 00 
  800420e3e2:	ff d0                	callq  *%rax
  800420e3e4:	48 98                	cltq   
  800420e3e6:	e9 e9 00 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420e3eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e3ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3f3:	48 89 d6             	mov    %rdx,%rsi
  800420e3f6:	89 c7                	mov    %eax,%edi
  800420e3f8:	48 b8 c5 d8 20 04 80 	movabs $0x800420d8c5,%rax
  800420e3ff:	00 00 00 
  800420e402:	ff d0                	callq  *%rax
  800420e404:	48 98                	cltq   
  800420e406:	e9 c9 00 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420e40b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e413:	48 89 d6             	mov    %rdx,%rsi
  800420e416:	89 c7                	mov    %eax,%edi
  800420e418:	48 b8 b3 d9 20 04 80 	movabs $0x800420d9b3,%rax
  800420e41f:	00 00 00 
  800420e422:	ff d0                	callq  *%rax
  800420e424:	48 98                	cltq   
  800420e426:	e9 a9 00 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_yield:
		sys_yield();
  800420e42b:	48 b8 80 d7 20 04 80 	movabs $0x800420d780,%rax
  800420e432:	00 00 00 
  800420e435:	ff d0                	callq  *%rax
		return 0;
  800420e437:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e43c:	e9 93 00 00 00       	jmpq   800420e4d4 <syscall+0x23f>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420e441:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e445:	89 c1                	mov    %eax,%ecx
  800420e447:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e44b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e44f:	89 c6                	mov    %eax,%esi
  800420e451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e455:	89 c7                	mov    %eax,%edi
  800420e457:	48 b8 f8 dc 20 04 80 	movabs $0x800420dcf8,%rax
  800420e45e:	00 00 00 
  800420e461:	ff d0                	callq  *%rax
  800420e463:	48 98                	cltq   
  800420e465:	eb 6d                	jmp    800420e4d4 <syscall+0x23f>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420e467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e46b:	48 89 c7             	mov    %rax,%rdi
  800420e46e:	48 b8 68 e0 20 04 80 	movabs $0x800420e068,%rax
  800420e475:	00 00 00 
  800420e478:	ff d0                	callq  *%rax
		return 0;
  800420e47a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e47f:	eb 53                	jmp    800420e4d4 <syscall+0x23f>
	case SYS_time_msec:
		return sys_time_msec();
  800420e481:	48 b8 91 e1 20 04 80 	movabs $0x800420e191,%rax
  800420e488:	00 00 00 
  800420e48b:	ff d0                	callq  *%rax
  800420e48d:	48 98                	cltq   
  800420e48f:	eb 43                	jmp    800420e4d4 <syscall+0x23f>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420e491:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e495:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e499:	48 89 d6             	mov    %rdx,%rsi
  800420e49c:	48 89 c7             	mov    %rax,%rdi
  800420e49f:	48 b8 a3 e1 20 04 80 	movabs $0x800420e1a3,%rax
  800420e4a6:	00 00 00 
  800420e4a9:	ff d0                	callq  *%rax
  800420e4ab:	48 98                	cltq   
  800420e4ad:	eb 25                	jmp    800420e4d4 <syscall+0x23f>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420e4af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e4b7:	48 89 d6             	mov    %rdx,%rsi
  800420e4ba:	48 89 c7             	mov    %rax,%rdi
  800420e4bd:	48 b8 1c e2 20 04 80 	movabs $0x800420e21c,%rax
  800420e4c4:	00 00 00 
  800420e4c7:	ff d0                	callq  *%rax
  800420e4c9:	48 98                	cltq   
  800420e4cb:	eb 07                	jmp    800420e4d4 <syscall+0x23f>
		sys_vmx_incr_vmdisk_number();
		return 0;
#endif

	default:
		return -E_NO_SYS;
  800420e4cd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420e4d4:	c9                   	leaveq 
  800420e4d5:	c3                   	retq   

000000800420e4d6 <list_func_die>:
  800420e4d6:	55                   	push   %rbp
  800420e4d7:	48 89 e5             	mov    %rsp,%rbp
  800420e4da:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420e4e1:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420e4e8:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420e4ef:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420e4f6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e4fd:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420e504:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e508:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e50f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e516:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e51a:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420e521:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e528:	48 89 d1             	mov    %rdx,%rcx
  800420e52b:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e530:	48 89 ce             	mov    %rcx,%rsi
  800420e533:	48 89 c7             	mov    %rax,%rdi
  800420e536:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  800420e53d:	00 00 00 
  800420e540:	ff d0                	callq  *%rax
  800420e542:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420e549:	00 
  800420e54a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e551:	00 
  800420e552:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e559:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e55d:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420e561:	74 0a                	je     800420e56d <list_func_die+0x97>
  800420e563:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e568:	e9 cd 06 00 00       	jmpq   800420ec3a <list_func_die+0x764>
  800420e56d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420e574:	ba 38 00 00 00       	mov    $0x38,%edx
  800420e579:	be 00 00 00 00       	mov    $0x0,%esi
  800420e57e:	48 89 c7             	mov    %rax,%rdi
  800420e581:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  800420e588:	00 00 00 
  800420e58b:	ff d0                	callq  *%rax
  800420e58d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e594:	be 11 00 00 00       	mov    $0x11,%esi
  800420e599:	48 89 c7             	mov    %rax,%rdi
  800420e59c:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e5a3:	00 00 00 
  800420e5a6:	ff d0                	callq  *%rax
  800420e5a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420e5ac:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5b3:	be 12 00 00 00       	mov    $0x12,%esi
  800420e5b8:	48 89 c7             	mov    %rax,%rdi
  800420e5bb:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e5c2:	00 00 00 
  800420e5c5:	ff d0                	callq  *%rax
  800420e5c7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420e5cb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420e5d0:	0f 84 5f 06 00 00    	je     800420ec35 <list_func_die+0x75f>
  800420e5d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e5da:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e5de:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e5e5:	0f 83 4a 06 00 00    	jae    800420ec35 <list_func_die+0x75f>
  800420e5eb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e5f0:	0f 84 3f 06 00 00    	je     800420ec35 <list_func_die+0x75f>
  800420e5f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e5fa:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e5fe:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e605:	0f 86 2a 06 00 00    	jbe    800420ec35 <list_func_die+0x75f>
  800420e60b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e612:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e619:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e620:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e627:	48 89 10             	mov    %rdx,(%rax)
  800420e62a:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e631:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e638:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e63f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420e643:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e64a:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420e651:	48 89 c7             	mov    %rax,%rdi
  800420e654:	48 b8 cb fc 20 04 80 	movabs $0x800420fccb,%rax
  800420e65b:	00 00 00 
  800420e65e:	ff d0                	callq  *%rax
  800420e660:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420e667:	89 42 18             	mov    %eax,0x18(%rdx)
  800420e66a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e66e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420e672:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e679:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420e67d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e684:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e68b:	48 85 c0             	test   %rax,%rax
  800420e68e:	75 35                	jne    800420e6c5 <list_func_die+0x1ef>
  800420e690:	48 b9 a0 a7 21 04 80 	movabs $0x800421a7a0,%rcx
  800420e697:	00 00 00 
  800420e69a:	48 ba ac a7 21 04 80 	movabs $0x800421a7ac,%rdx
  800420e6a1:	00 00 00 
  800420e6a4:	be 95 00 00 00       	mov    $0x95,%esi
  800420e6a9:	48 bf c1 a7 21 04 80 	movabs $0x800421a7c1,%rdi
  800420e6b0:	00 00 00 
  800420e6b3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e6b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420e6bf:	00 00 00 
  800420e6c2:	41 ff d0             	callq  *%r8
  800420e6c5:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e6cc:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e6d3:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420e6da:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420e6e1:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e6e6:	48 89 c7             	mov    %rax,%rdi
  800420e6e9:	48 b8 2c 55 21 04 80 	movabs $0x800421552c,%rax
  800420e6f0:	00 00 00 
  800420e6f3:	ff d0                	callq  *%rax
  800420e6f5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420e6fc:	89 c2                	mov    %eax,%edx
  800420e6fe:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e705:	89 50 08             	mov    %edx,0x8(%rax)
  800420e708:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e70f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420e716:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e71d:	00 00 00 
  800420e720:	48 8b 00             	mov    (%rax),%rax
  800420e723:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e72a:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e731:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e735:	48 89 c7             	mov    %rax,%rdi
  800420e738:	48 b8 dc 21 21 04 80 	movabs $0x80042121dc,%rax
  800420e73f:	00 00 00 
  800420e742:	ff d0                	callq  *%rax
  800420e744:	83 f8 04             	cmp    $0x4,%eax
  800420e747:	0f 84 e1 04 00 00    	je     800420ec2e <list_func_die+0x758>
  800420e74d:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e754:	48 83 f8 05          	cmp    $0x5,%rax
  800420e758:	74 05                	je     800420e75f <list_func_die+0x289>
  800420e75a:	e9 cf 04 00 00       	jmpq   800420ec2e <list_func_die+0x758>
  800420e75f:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e766:	be 49 00 00 00       	mov    $0x49,%esi
  800420e76b:	48 89 c7             	mov    %rax,%rdi
  800420e76e:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e775:	00 00 00 
  800420e778:	ff d0                	callq  *%rax
  800420e77a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e77e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e783:	0f 84 d7 00 00 00    	je     800420e860 <list_func_die+0x38a>
  800420e789:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e78d:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e791:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e795:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e799:	48 01 d0             	add    %rdx,%rax
  800420e79c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420e7a0:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e7a7:	00 00 00 
  800420e7aa:	48 8b 08             	mov    (%rax),%rcx
  800420e7ad:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e7b4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420e7b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e7bc:	48 8b 38             	mov    (%rax),%rdi
  800420e7bf:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420e7c3:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420e7c7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420e7cc:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420e7d0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420e7d5:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420e7d9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420e7de:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420e7e2:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420e7e7:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420e7eb:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420e7f0:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420e7f4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420e7f9:	48 89 cf             	mov    %rcx,%rdi
  800420e7fc:	48 b8 02 1e 21 04 80 	movabs $0x8004211e02,%rax
  800420e803:	00 00 00 
  800420e806:	ff d0                	callq  *%rax
  800420e808:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e80f:	be 0b 00 00 00       	mov    $0xb,%esi
  800420e814:	48 89 c7             	mov    %rax,%rdi
  800420e817:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e81e:	00 00 00 
  800420e821:	ff d0                	callq  *%rax
  800420e823:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e827:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e82c:	74 0e                	je     800420e83c <list_func_die+0x366>
  800420e82e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e832:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e836:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420e83a:	eb 24                	jmp    800420e860 <list_func_die+0x38a>
  800420e83c:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e843:	be 49 00 00 00       	mov    $0x49,%esi
  800420e848:	48 89 c7             	mov    %rax,%rdi
  800420e84b:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e852:	00 00 00 
  800420e855:	ff d0                	callq  *%rax
  800420e857:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e85b:	e9 1e ff ff ff       	jmpq   800420e77e <list_func_die+0x2a8>
  800420e860:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e867:	00 
  800420e868:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e86f:	be 02 00 00 00       	mov    $0x2,%esi
  800420e874:	48 89 c7             	mov    %rax,%rdi
  800420e877:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e87e:	00 00 00 
  800420e881:	ff d0                	callq  *%rax
  800420e883:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e887:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e88c:	0f 84 a2 00 00 00    	je     800420e934 <list_func_die+0x45e>
  800420e892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e896:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420e89a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420e89e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e8a2:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420e8a6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e8aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e8ae:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e8b2:	48 83 f8 03          	cmp    $0x3,%rax
  800420e8b6:	72 7c                	jb     800420e934 <list_func_die+0x45e>
  800420e8b8:	48 83 f8 04          	cmp    $0x4,%rax
  800420e8bc:	76 06                	jbe    800420e8c4 <list_func_die+0x3ee>
  800420e8be:	48 83 f8 0a          	cmp    $0xa,%rax
  800420e8c2:	75 70                	jne    800420e934 <list_func_die+0x45e>
  800420e8c4:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420e8cb:	00 
  800420e8cc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e8d0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420e8d4:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420e8d8:	0f b6 00             	movzbl (%rax),%eax
  800420e8db:	88 45 af             	mov    %al,-0x51(%rbp)
  800420e8de:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420e8e3:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420e8e7:	75 4a                	jne    800420e933 <list_func_die+0x45d>
  800420e8e9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e8ed:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420e8f4:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420e8fb:	48 89 c7             	mov    %rax,%rdi
  800420e8fe:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  800420e905:	00 00 00 
  800420e908:	ff d0                	callq  *%rax
  800420e90a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e90e:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e915:	48 89 c2             	mov    %rax,%rdx
  800420e918:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e91c:	48 29 c2             	sub    %rax,%rdx
  800420e91f:	48 89 d0             	mov    %rdx,%rax
  800420e922:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420e926:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e92d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e931:	eb 00                	jmp    800420e933 <list_func_die+0x45d>
  800420e933:	90                   	nop
  800420e934:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e93b:	8b 48 28             	mov    0x28(%rax),%ecx
  800420e93e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e942:	89 c2                	mov    %eax,%edx
  800420e944:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e94b:	48 63 c9             	movslq %ecx,%rcx
  800420e94e:	48 83 c1 08          	add    $0x8,%rcx
  800420e952:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420e956:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e95d:	8b 50 28             	mov    0x28(%rax),%edx
  800420e960:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e967:	48 63 d2             	movslq %edx,%rdx
  800420e96a:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420e96e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e972:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420e977:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e97e:	8b 40 28             	mov    0x28(%rax),%eax
  800420e981:	8d 50 01             	lea    0x1(%rax),%edx
  800420e984:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e98b:	89 50 28             	mov    %edx,0x28(%rax)
  800420e98e:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e995:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e99c:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e9a1:	48 89 ce             	mov    %rcx,%rsi
  800420e9a4:	48 89 c7             	mov    %rax,%rdi
  800420e9a7:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  800420e9ae:	00 00 00 
  800420e9b1:	ff d0                	callq  *%rax
  800420e9b3:	e9 40 02 00 00       	jmpq   800420ebf8 <list_func_die+0x722>
  800420e9b8:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e9bf:	48 83 f8 05          	cmp    $0x5,%rax
  800420e9c3:	74 05                	je     800420e9ca <list_func_die+0x4f4>
  800420e9c5:	e9 64 02 00 00       	jmpq   800420ec2e <list_func_die+0x758>
  800420e9ca:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e9d1:	be 49 00 00 00       	mov    $0x49,%esi
  800420e9d6:	48 89 c7             	mov    %rax,%rdi
  800420e9d9:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420e9e0:	00 00 00 
  800420e9e3:	ff d0                	callq  *%rax
  800420e9e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e9e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e9ee:	0f 84 b1 00 00 00    	je     800420eaa5 <list_func_die+0x5cf>
  800420e9f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e9f8:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e9fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea00:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ea04:	48 01 d0             	add    %rdx,%rax
  800420ea07:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420ea0b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ea12:	00 00 00 
  800420ea15:	48 8b 08             	mov    (%rax),%rcx
  800420ea18:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420ea1f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420ea23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ea27:	48 8b 38             	mov    (%rax),%rdi
  800420ea2a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420ea2e:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420ea32:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420ea37:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420ea3b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420ea40:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420ea44:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420ea49:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420ea4d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420ea52:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420ea56:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420ea5b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420ea5f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420ea64:	48 89 cf             	mov    %rcx,%rdi
  800420ea67:	48 b8 02 1e 21 04 80 	movabs $0x8004211e02,%rax
  800420ea6e:	00 00 00 
  800420ea71:	ff d0                	callq  *%rax
  800420ea73:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ea7a:	be 0b 00 00 00       	mov    $0xb,%esi
  800420ea7f:	48 89 c7             	mov    %rax,%rdi
  800420ea82:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420ea89:	00 00 00 
  800420ea8c:	ff d0                	callq  *%rax
  800420ea8e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea92:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea97:	74 0c                	je     800420eaa5 <list_func_die+0x5cf>
  800420ea99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea9d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420eaa1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420eaa5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420eaac:	00 
  800420eaad:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420eab4:	be 02 00 00 00       	mov    $0x2,%esi
  800420eab9:	48 89 c7             	mov    %rax,%rdi
  800420eabc:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  800420eac3:	00 00 00 
  800420eac6:	ff d0                	callq  *%rax
  800420eac8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420eacc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ead1:	0f 84 a2 00 00 00    	je     800420eb79 <list_func_die+0x6a3>
  800420ead7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eadb:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420eadf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420eae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eae7:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420eaeb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420eaef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eaf3:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420eaf7:	48 83 f8 03          	cmp    $0x3,%rax
  800420eafb:	72 7c                	jb     800420eb79 <list_func_die+0x6a3>
  800420eafd:	48 83 f8 04          	cmp    $0x4,%rax
  800420eb01:	76 06                	jbe    800420eb09 <list_func_die+0x633>
  800420eb03:	48 83 f8 0a          	cmp    $0xa,%rax
  800420eb07:	75 70                	jne    800420eb79 <list_func_die+0x6a3>
  800420eb09:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eb10:	00 
  800420eb11:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb15:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420eb19:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420eb1d:	0f b6 00             	movzbl (%rax),%eax
  800420eb20:	88 45 97             	mov    %al,-0x69(%rbp)
  800420eb23:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420eb28:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420eb2c:	75 4a                	jne    800420eb78 <list_func_die+0x6a2>
  800420eb2e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb32:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420eb39:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420eb40:	48 89 c7             	mov    %rax,%rdi
  800420eb43:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  800420eb4a:	00 00 00 
  800420eb4d:	ff d0                	callq  *%rax
  800420eb4f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420eb53:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420eb5a:	48 89 c2             	mov    %rax,%rdx
  800420eb5d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb61:	48 29 c2             	sub    %rax,%rdx
  800420eb64:	48 89 d0             	mov    %rdx,%rax
  800420eb67:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420eb6b:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420eb72:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420eb76:	eb 00                	jmp    800420eb78 <list_func_die+0x6a2>
  800420eb78:	90                   	nop
  800420eb79:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb80:	8b 48 28             	mov    0x28(%rax),%ecx
  800420eb83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb87:	89 c2                	mov    %eax,%edx
  800420eb89:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb90:	48 63 c9             	movslq %ecx,%rcx
  800420eb93:	48 83 c1 08          	add    $0x8,%rcx
  800420eb97:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420eb9b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eba2:	8b 50 28             	mov    0x28(%rax),%edx
  800420eba5:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebac:	48 63 d2             	movslq %edx,%rdx
  800420ebaf:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420ebb3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ebb7:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420ebbc:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebc3:	8b 40 28             	mov    0x28(%rax),%eax
  800420ebc6:	8d 50 01             	lea    0x1(%rax),%edx
  800420ebc9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebd0:	89 50 28             	mov    %edx,0x28(%rax)
  800420ebd3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ebda:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420ebe1:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ebe6:	48 89 ce             	mov    %rcx,%rsi
  800420ebe9:	48 89 c7             	mov    %rax,%rdi
  800420ebec:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  800420ebf3:	00 00 00 
  800420ebf6:	ff d0                	callq  *%rax
  800420ebf8:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ebff:	00 00 00 
  800420ec02:	48 8b 00             	mov    (%rax),%rax
  800420ec05:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420ec09:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420ec10:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420ec17:	48 89 c7             	mov    %rax,%rdi
  800420ec1a:	48 b8 98 1f 21 04 80 	movabs $0x8004211f98,%rax
  800420ec21:	00 00 00 
  800420ec24:	ff d0                	callq  *%rax
  800420ec26:	85 c0                	test   %eax,%eax
  800420ec28:	0f 84 8a fd ff ff    	je     800420e9b8 <list_func_die+0x4e2>
  800420ec2e:	b8 01 00 00 00       	mov    $0x1,%eax
  800420ec33:	eb 05                	jmp    800420ec3a <list_func_die+0x764>
  800420ec35:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec3a:	c9                   	leaveq 
  800420ec3b:	c3                   	retq   

000000800420ec3c <debuginfo_rip>:
  800420ec3c:	55                   	push   %rbp
  800420ec3d:	48 89 e5             	mov    %rsp,%rbp
  800420ec40:	53                   	push   %rbx
  800420ec41:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420ec48:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420ec4f:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420ec56:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420ec5d:	00 
  800420ec5e:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420ec65:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ec69:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec70:	48 bb d2 a7 21 04 80 	movabs $0x800421a7d2,%rbx
  800420ec77:	00 00 00 
  800420ec7a:	48 89 18             	mov    %rbx,(%rax)
  800420ec7d:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420ec8b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec92:	48 bb d2 a7 21 04 80 	movabs $0x800421a7d2,%rbx
  800420ec99:	00 00 00 
  800420ec9c:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420eca0:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420eca7:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420ecae:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ecb5:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ecbc:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420ecc0:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ecc7:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420ecce:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420ecd5:	00 00 00 
  800420ecd8:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420ecdf:	76 13                	jbe    800420ecf4 <debuginfo_rip+0xb8>
  800420ece1:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420ece8:	00 00 00 
  800420eceb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ecef:	e9 04 01 00 00       	jmpq   800420edf8 <debuginfo_rip+0x1bc>
  800420ecf4:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ecfb:	00 00 00 
  800420ecfe:	ff d0                	callq  *%rax
  800420ed00:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed07:	00 00 00 
  800420ed0a:	48 98                	cltq   
  800420ed0c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed10:	48 89 c1             	mov    %rax,%rcx
  800420ed13:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed17:	48 01 c8             	add    %rcx,%rax
  800420ed1a:	48 01 d0             	add    %rdx,%rax
  800420ed1d:	48 83 c0 08          	add    $0x8,%rax
  800420ed21:	48 8b 10             	mov    (%rax),%rdx
  800420ed24:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420ed2b:	00 00 00 
  800420ed2e:	48 8b 00             	mov    (%rax),%rax
  800420ed31:	48 39 c2             	cmp    %rax,%rdx
  800420ed34:	0f 84 83 00 00 00    	je     800420edbd <debuginfo_rip+0x181>
  800420ed3a:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ed41:	00 00 00 
  800420ed44:	ff d0                	callq  *%rax
  800420ed46:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed4d:	00 00 00 
  800420ed50:	48 98                	cltq   
  800420ed52:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed56:	48 89 c1             	mov    %rax,%rcx
  800420ed59:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed5d:	48 01 c8             	add    %rcx,%rax
  800420ed60:	48 01 d0             	add    %rdx,%rax
  800420ed63:	48 83 c0 08          	add    $0x8,%rax
  800420ed67:	48 8b 00             	mov    (%rax),%rax
  800420ed6a:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ed71:	48 89 c7             	mov    %rax,%rdi
  800420ed74:	48 b8 27 57 21 04 80 	movabs $0x8004215727,%rax
  800420ed7b:	00 00 00 
  800420ed7e:	ff d0                	callq  *%rax
  800420ed80:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420ed87:	00 00 00 
  800420ed8a:	ff d0                	callq  *%rax
  800420ed8c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed93:	00 00 00 
  800420ed96:	48 98                	cltq   
  800420ed98:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed9c:	48 89 c1             	mov    %rax,%rcx
  800420ed9f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eda3:	48 01 c8             	add    %rcx,%rax
  800420eda6:	48 01 d0             	add    %rdx,%rax
  800420eda9:	48 83 c0 08          	add    $0x8,%rax
  800420edad:	48 8b 10             	mov    (%rax),%rdx
  800420edb0:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420edb7:	00 00 00 
  800420edba:	48 89 10             	mov    %rdx,(%rax)
  800420edbd:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  800420edc4:	00 00 00 
  800420edc7:	ff d0                	callq  *%rax
  800420edc9:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420edd0:	00 00 00 
  800420edd3:	48 98                	cltq   
  800420edd5:	48 c1 e0 03          	shl    $0x3,%rax
  800420edd9:	48 89 c1             	mov    %rax,%rcx
  800420eddc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ede0:	48 01 c8             	add    %rcx,%rax
  800420ede3:	48 01 d0             	add    %rdx,%rax
  800420ede6:	48 83 c0 08          	add    $0x8,%rax
  800420edea:	48 8b 00             	mov    (%rax),%rax
  800420eded:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420edf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420edf8:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420edff:	00 00 00 
  800420ee02:	48 8b 00             	mov    (%rax),%rax
  800420ee05:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee09:	48 89 d6             	mov    %rdx,%rsi
  800420ee0c:	48 89 c7             	mov    %rax,%rdi
  800420ee0f:	48 b8 10 0e 21 04 80 	movabs $0x8004210e10,%rax
  800420ee16:	00 00 00 
  800420ee19:	ff d0                	callq  *%rax
  800420ee1b:	48 bf dc a7 21 04 80 	movabs $0x800421a7dc,%rdi
  800420ee22:	00 00 00 
  800420ee25:	48 b8 a7 56 21 04 80 	movabs $0x80042156a7,%rax
  800420ee2c:	00 00 00 
  800420ee2f:	ff d0                	callq  *%rax
  800420ee31:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420ee35:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee3c:	00 00 00 
  800420ee3f:	48 8b 00             	mov    (%rax),%rax
  800420ee42:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420ee46:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420ee4a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420ee4e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee55:	00 00 00 
  800420ee58:	48 8b 00             	mov    (%rax),%rax
  800420ee5b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420ee5f:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420ee63:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420ee67:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee6e:	00 00 00 
  800420ee71:	48 8b 00             	mov    (%rax),%rax
  800420ee74:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ee78:	48 85 c0             	test   %rax,%rax
  800420ee7b:	75 35                	jne    800420eeb2 <debuginfo_rip+0x276>
  800420ee7d:	48 b9 e8 a7 21 04 80 	movabs $0x800421a7e8,%rcx
  800420ee84:	00 00 00 
  800420ee87:	48 ba ac a7 21 04 80 	movabs $0x800421a7ac,%rdx
  800420ee8e:	00 00 00 
  800420ee91:	be 40 01 00 00       	mov    $0x140,%esi
  800420ee96:	48 bf c1 a7 21 04 80 	movabs $0x800421a7c1,%rdi
  800420ee9d:	00 00 00 
  800420eea0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eea5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420eeac:	00 00 00 
  800420eeaf:	41 ff d0             	callq  *%r8
  800420eeb2:	e9 6f 01 00 00       	jmpq   800420f026 <debuginfo_rip+0x3ea>
  800420eeb7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eebe:	00 00 00 
  800420eec1:	48 8b 00             	mov    (%rax),%rax
  800420eec4:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420eec8:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420eecf:	be 00 00 00 00       	mov    $0x0,%esi
  800420eed4:	48 89 c7             	mov    %rax,%rdi
  800420eed7:	48 b8 98 1f 21 04 80 	movabs $0x8004211f98,%rax
  800420eede:	00 00 00 
  800420eee1:	ff d0                	callq  *%rax
  800420eee3:	83 f8 04             	cmp    $0x4,%eax
  800420eee6:	75 05                	jne    800420eeed <debuginfo_rip+0x2b1>
  800420eee8:	e9 39 01 00 00       	jmpq   800420f026 <debuginfo_rip+0x3ea>
  800420eeed:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420eef1:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420eef8:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420eeff:	00 00 00 00 
  800420ef03:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef0a:	00 00 00 
  800420ef0d:	48 8b 00             	mov    (%rax),%rax
  800420ef10:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420ef17:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420ef1e:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420ef22:	48 89 c7             	mov    %rax,%rdi
  800420ef25:	48 b8 dc 21 21 04 80 	movabs $0x80042121dc,%rax
  800420ef2c:	00 00 00 
  800420ef2f:	ff d0                	callq  *%rax
  800420ef31:	83 f8 04             	cmp    $0x4,%eax
  800420ef34:	75 05                	jne    800420ef3b <debuginfo_rip+0x2ff>
  800420ef36:	e9 eb 00 00 00       	jmpq   800420f026 <debuginfo_rip+0x3ea>
  800420ef3b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ef3f:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420ef46:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420ef4d:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420ef54:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ef5b:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420ef62:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ef69:	48 89 ce             	mov    %rcx,%rsi
  800420ef6c:	48 89 c7             	mov    %rax,%rdi
  800420ef6f:	48 b8 d6 e4 20 04 80 	movabs $0x800420e4d6,%rax
  800420ef76:	00 00 00 
  800420ef79:	ff d0                	callq  *%rax
  800420ef7b:	85 c0                	test   %eax,%eax
  800420ef7d:	74 30                	je     800420efaf <debuginfo_rip+0x373>
  800420ef7f:	90                   	nop
  800420ef80:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef87:	00 00 00 
  800420ef8a:	48 8b 00             	mov    (%rax),%rax
  800420ef8d:	be 00 00 00 00       	mov    $0x0,%esi
  800420ef92:	48 89 c7             	mov    %rax,%rdi
  800420ef95:	48 b8 b4 48 21 04 80 	movabs $0x80042148b4,%rax
  800420ef9c:	00 00 00 
  800420ef9f:	ff d0                	callq  *%rax
  800420efa1:	83 f8 01             	cmp    $0x1,%eax
  800420efa4:	0f 85 bb 00 00 00    	jne    800420f065 <debuginfo_rip+0x429>
  800420efaa:	e9 ac 00 00 00       	jmpq   800420f05b <debuginfo_rip+0x41f>
  800420efaf:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420efb6:	00 00 00 
  800420efb9:	48 8b 00             	mov    (%rax),%rax
  800420efbc:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420efc0:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420efc7:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420efce:	48 89 c7             	mov    %rax,%rdi
  800420efd1:	48 b8 98 1f 21 04 80 	movabs $0x8004211f98,%rax
  800420efd8:	00 00 00 
  800420efdb:	ff d0                	callq  *%rax
  800420efdd:	85 c0                	test   %eax,%eax
  800420efdf:	79 02                	jns    800420efe3 <debuginfo_rip+0x3a7>
  800420efe1:	eb 43                	jmp    800420f026 <debuginfo_rip+0x3ea>
  800420efe3:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420efea:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420eff1:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420eff6:	48 89 ce             	mov    %rcx,%rsi
  800420eff9:	48 89 c7             	mov    %rax,%rdi
  800420effc:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  800420f003:	00 00 00 
  800420f006:	ff d0                	callq  *%rax
  800420f008:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f00c:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f013:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f01a:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f021:	e9 2e ff ff ff       	jmpq   800420ef54 <debuginfo_rip+0x318>
  800420f026:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f02d:	00 00 00 
  800420f030:	48 8b 00             	mov    (%rax),%rax
  800420f033:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420f037:	48 89 d6             	mov    %rdx,%rsi
  800420f03a:	48 89 c7             	mov    %rax,%rdi
  800420f03d:	48 b8 f2 0e 21 04 80 	movabs $0x8004210ef2,%rax
  800420f044:	00 00 00 
  800420f047:	ff d0                	callq  *%rax
  800420f049:	85 c0                	test   %eax,%eax
  800420f04b:	0f 84 66 fe ff ff    	je     800420eeb7 <debuginfo_rip+0x27b>
  800420f051:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f056:	e9 a0 00 00 00       	jmpq   800420f0fb <debuginfo_rip+0x4bf>
  800420f05b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f060:	e9 96 00 00 00       	jmpq   800420f0fb <debuginfo_rip+0x4bf>
  800420f065:	48 b8 80 c6 22 04 80 	movabs $0x800422c680,%rax
  800420f06c:	00 00 00 
  800420f06f:	48 8b 08             	mov    (%rax),%rcx
  800420f072:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f079:	00 00 00 
  800420f07c:	48 8b 10             	mov    (%rax),%rdx
  800420f07f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f086:	00 00 00 
  800420f089:	48 8b 00             	mov    (%rax),%rax
  800420f08c:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420f093:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f099:	48 89 c7             	mov    %rax,%rdi
  800420f09c:	48 b8 1d 24 21 04 80 	movabs $0x800421241d,%rax
  800420f0a3:	00 00 00 
  800420f0a6:	ff d0                	callq  *%rax
  800420f0a8:	85 c0                	test   %eax,%eax
  800420f0aa:	75 4a                	jne    800420f0f6 <debuginfo_rip+0x4ba>
  800420f0ac:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f0b3:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420f0ba:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f0c1:	00 00 00 
  800420f0c4:	48 8b 30             	mov    (%rax),%rsi
  800420f0c7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f0ce:	00 00 00 
  800420f0d1:	48 8b 00             	mov    (%rax),%rax
  800420f0d4:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f0db:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f0e1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f0e7:	48 89 c7             	mov    %rax,%rdi
  800420f0ea:	48 b8 29 37 21 04 80 	movabs $0x8004213729,%rax
  800420f0f1:	00 00 00 
  800420f0f4:	ff d0                	callq  *%rax
  800420f0f6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f0fb:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420f102:	5b                   	pop    %rbx
  800420f103:	5d                   	pop    %rbp
  800420f104:	c3                   	retq   

000000800420f105 <printnum>:
  800420f105:	55                   	push   %rbp
  800420f106:	48 89 e5             	mov    %rsp,%rbp
  800420f109:	53                   	push   %rbx
  800420f10a:	48 83 ec 38          	sub    $0x38,%rsp
  800420f10e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f112:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420f116:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420f11a:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420f11d:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420f121:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420f125:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420f128:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420f12c:	77 3b                	ja     800420f169 <printnum+0x64>
  800420f12e:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420f131:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420f135:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420f138:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f13c:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f141:	48 f7 f3             	div    %rbx
  800420f144:	48 89 c2             	mov    %rax,%rdx
  800420f147:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420f14a:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f14d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f151:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f155:	41 89 f9             	mov    %edi,%r9d
  800420f158:	48 89 c7             	mov    %rax,%rdi
  800420f15b:	48 b8 05 f1 20 04 80 	movabs $0x800420f105,%rax
  800420f162:	00 00 00 
  800420f165:	ff d0                	callq  *%rax
  800420f167:	eb 1e                	jmp    800420f187 <printnum+0x82>
  800420f169:	eb 12                	jmp    800420f17d <printnum+0x78>
  800420f16b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f16f:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420f172:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f176:	48 89 ce             	mov    %rcx,%rsi
  800420f179:	89 d7                	mov    %edx,%edi
  800420f17b:	ff d0                	callq  *%rax
  800420f17d:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420f181:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420f185:	7f e4                	jg     800420f16b <printnum+0x66>
  800420f187:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f18a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f18e:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f193:	48 f7 f1             	div    %rcx
  800420f196:	48 89 d0             	mov    %rdx,%rax
  800420f199:	48 ba f0 a9 21 04 80 	movabs $0x800421a9f0,%rdx
  800420f1a0:	00 00 00 
  800420f1a3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420f1a7:	0f be d0             	movsbl %al,%edx
  800420f1aa:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f1ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1b2:	48 89 ce             	mov    %rcx,%rsi
  800420f1b5:	89 d7                	mov    %edx,%edi
  800420f1b7:	ff d0                	callq  *%rax
  800420f1b9:	48 83 c4 38          	add    $0x38,%rsp
  800420f1bd:	5b                   	pop    %rbx
  800420f1be:	5d                   	pop    %rbp
  800420f1bf:	c3                   	retq   

000000800420f1c0 <getuint>:
  800420f1c0:	55                   	push   %rbp
  800420f1c1:	48 89 e5             	mov    %rsp,%rbp
  800420f1c4:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f1c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f1cc:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f1cf:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f1d3:	7e 52                	jle    800420f227 <getuint+0x67>
  800420f1d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1d9:	8b 00                	mov    (%rax),%eax
  800420f1db:	83 f8 30             	cmp    $0x30,%eax
  800420f1de:	73 24                	jae    800420f204 <getuint+0x44>
  800420f1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1e4:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f1e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1ec:	8b 00                	mov    (%rax),%eax
  800420f1ee:	89 c0                	mov    %eax,%eax
  800420f1f0:	48 01 d0             	add    %rdx,%rax
  800420f1f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1f7:	8b 12                	mov    (%rdx),%edx
  800420f1f9:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f1fc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f200:	89 0a                	mov    %ecx,(%rdx)
  800420f202:	eb 17                	jmp    800420f21b <getuint+0x5b>
  800420f204:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f208:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f20c:	48 89 d0             	mov    %rdx,%rax
  800420f20f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f213:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f217:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f21b:	48 8b 00             	mov    (%rax),%rax
  800420f21e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f222:	e9 a3 00 00 00       	jmpq   800420f2ca <getuint+0x10a>
  800420f227:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f22b:	74 4f                	je     800420f27c <getuint+0xbc>
  800420f22d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f231:	8b 00                	mov    (%rax),%eax
  800420f233:	83 f8 30             	cmp    $0x30,%eax
  800420f236:	73 24                	jae    800420f25c <getuint+0x9c>
  800420f238:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f23c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f244:	8b 00                	mov    (%rax),%eax
  800420f246:	89 c0                	mov    %eax,%eax
  800420f248:	48 01 d0             	add    %rdx,%rax
  800420f24b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f24f:	8b 12                	mov    (%rdx),%edx
  800420f251:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f254:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f258:	89 0a                	mov    %ecx,(%rdx)
  800420f25a:	eb 17                	jmp    800420f273 <getuint+0xb3>
  800420f25c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f260:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f264:	48 89 d0             	mov    %rdx,%rax
  800420f267:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f26b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f26f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f273:	48 8b 00             	mov    (%rax),%rax
  800420f276:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f27a:	eb 4e                	jmp    800420f2ca <getuint+0x10a>
  800420f27c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f280:	8b 00                	mov    (%rax),%eax
  800420f282:	83 f8 30             	cmp    $0x30,%eax
  800420f285:	73 24                	jae    800420f2ab <getuint+0xeb>
  800420f287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f28b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f28f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f293:	8b 00                	mov    (%rax),%eax
  800420f295:	89 c0                	mov    %eax,%eax
  800420f297:	48 01 d0             	add    %rdx,%rax
  800420f29a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f29e:	8b 12                	mov    (%rdx),%edx
  800420f2a0:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f2a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2a7:	89 0a                	mov    %ecx,(%rdx)
  800420f2a9:	eb 17                	jmp    800420f2c2 <getuint+0x102>
  800420f2ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2af:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f2b3:	48 89 d0             	mov    %rdx,%rax
  800420f2b6:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f2ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2be:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f2c2:	8b 00                	mov    (%rax),%eax
  800420f2c4:	89 c0                	mov    %eax,%eax
  800420f2c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f2ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f2ce:	c9                   	leaveq 
  800420f2cf:	c3                   	retq   

000000800420f2d0 <getint>:
  800420f2d0:	55                   	push   %rbp
  800420f2d1:	48 89 e5             	mov    %rsp,%rbp
  800420f2d4:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f2d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f2dc:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f2df:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f2e3:	7e 52                	jle    800420f337 <getint+0x67>
  800420f2e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2e9:	8b 00                	mov    (%rax),%eax
  800420f2eb:	83 f8 30             	cmp    $0x30,%eax
  800420f2ee:	73 24                	jae    800420f314 <getint+0x44>
  800420f2f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2f4:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f2f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2fc:	8b 00                	mov    (%rax),%eax
  800420f2fe:	89 c0                	mov    %eax,%eax
  800420f300:	48 01 d0             	add    %rdx,%rax
  800420f303:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f307:	8b 12                	mov    (%rdx),%edx
  800420f309:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f30c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f310:	89 0a                	mov    %ecx,(%rdx)
  800420f312:	eb 17                	jmp    800420f32b <getint+0x5b>
  800420f314:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f318:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f31c:	48 89 d0             	mov    %rdx,%rax
  800420f31f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f323:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f327:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f32b:	48 8b 00             	mov    (%rax),%rax
  800420f32e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f332:	e9 a3 00 00 00       	jmpq   800420f3da <getint+0x10a>
  800420f337:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f33b:	74 4f                	je     800420f38c <getint+0xbc>
  800420f33d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f341:	8b 00                	mov    (%rax),%eax
  800420f343:	83 f8 30             	cmp    $0x30,%eax
  800420f346:	73 24                	jae    800420f36c <getint+0x9c>
  800420f348:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f34c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f354:	8b 00                	mov    (%rax),%eax
  800420f356:	89 c0                	mov    %eax,%eax
  800420f358:	48 01 d0             	add    %rdx,%rax
  800420f35b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f35f:	8b 12                	mov    (%rdx),%edx
  800420f361:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f364:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f368:	89 0a                	mov    %ecx,(%rdx)
  800420f36a:	eb 17                	jmp    800420f383 <getint+0xb3>
  800420f36c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f370:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f374:	48 89 d0             	mov    %rdx,%rax
  800420f377:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f37b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f37f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f383:	48 8b 00             	mov    (%rax),%rax
  800420f386:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f38a:	eb 4e                	jmp    800420f3da <getint+0x10a>
  800420f38c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f390:	8b 00                	mov    (%rax),%eax
  800420f392:	83 f8 30             	cmp    $0x30,%eax
  800420f395:	73 24                	jae    800420f3bb <getint+0xeb>
  800420f397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f39b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f39f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3a3:	8b 00                	mov    (%rax),%eax
  800420f3a5:	89 c0                	mov    %eax,%eax
  800420f3a7:	48 01 d0             	add    %rdx,%rax
  800420f3aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3ae:	8b 12                	mov    (%rdx),%edx
  800420f3b0:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f3b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3b7:	89 0a                	mov    %ecx,(%rdx)
  800420f3b9:	eb 17                	jmp    800420f3d2 <getint+0x102>
  800420f3bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3bf:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f3c3:	48 89 d0             	mov    %rdx,%rax
  800420f3c6:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f3ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3ce:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f3d2:	8b 00                	mov    (%rax),%eax
  800420f3d4:	48 98                	cltq   
  800420f3d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f3da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f3de:	c9                   	leaveq 
  800420f3df:	c3                   	retq   

000000800420f3e0 <vprintfmt>:
  800420f3e0:	55                   	push   %rbp
  800420f3e1:	48 89 e5             	mov    %rsp,%rbp
  800420f3e4:	41 54                	push   %r12
  800420f3e6:	53                   	push   %rbx
  800420f3e7:	48 83 ec 60          	sub    $0x60,%rsp
  800420f3eb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420f3ef:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420f3f3:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f3f7:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420f3fb:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f3ff:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f403:	48 8b 0a             	mov    (%rdx),%rcx
  800420f406:	48 89 08             	mov    %rcx,(%rax)
  800420f409:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f40d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f411:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f415:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f419:	eb 17                	jmp    800420f432 <vprintfmt+0x52>
  800420f41b:	85 db                	test   %ebx,%ebx
  800420f41d:	0f 84 cc 04 00 00    	je     800420f8ef <vprintfmt+0x50f>
  800420f423:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f427:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f42b:	48 89 d6             	mov    %rdx,%rsi
  800420f42e:	89 df                	mov    %ebx,%edi
  800420f430:	ff d0                	callq  *%rax
  800420f432:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f436:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f43a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f43e:	0f b6 00             	movzbl (%rax),%eax
  800420f441:	0f b6 d8             	movzbl %al,%ebx
  800420f444:	83 fb 25             	cmp    $0x25,%ebx
  800420f447:	75 d2                	jne    800420f41b <vprintfmt+0x3b>
  800420f449:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420f44d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420f454:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f45b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f462:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420f469:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f46d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f471:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f475:	0f b6 00             	movzbl (%rax),%eax
  800420f478:	0f b6 d8             	movzbl %al,%ebx
  800420f47b:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420f47e:	83 f8 55             	cmp    $0x55,%eax
  800420f481:	0f 87 34 04 00 00    	ja     800420f8bb <vprintfmt+0x4db>
  800420f487:	89 c0                	mov    %eax,%eax
  800420f489:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f490:	00 
  800420f491:	48 b8 18 aa 21 04 80 	movabs $0x800421aa18,%rax
  800420f498:	00 00 00 
  800420f49b:	48 01 d0             	add    %rdx,%rax
  800420f49e:	48 8b 00             	mov    (%rax),%rax
  800420f4a1:	ff e0                	jmpq   *%rax
  800420f4a3:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420f4a7:	eb c0                	jmp    800420f469 <vprintfmt+0x89>
  800420f4a9:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420f4ad:	eb ba                	jmp    800420f469 <vprintfmt+0x89>
  800420f4af:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420f4b6:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420f4b9:	89 d0                	mov    %edx,%eax
  800420f4bb:	c1 e0 02             	shl    $0x2,%eax
  800420f4be:	01 d0                	add    %edx,%eax
  800420f4c0:	01 c0                	add    %eax,%eax
  800420f4c2:	01 d8                	add    %ebx,%eax
  800420f4c4:	83 e8 30             	sub    $0x30,%eax
  800420f4c7:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f4ca:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f4ce:	0f b6 00             	movzbl (%rax),%eax
  800420f4d1:	0f be d8             	movsbl %al,%ebx
  800420f4d4:	83 fb 2f             	cmp    $0x2f,%ebx
  800420f4d7:	7e 0c                	jle    800420f4e5 <vprintfmt+0x105>
  800420f4d9:	83 fb 39             	cmp    $0x39,%ebx
  800420f4dc:	7f 07                	jg     800420f4e5 <vprintfmt+0x105>
  800420f4de:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420f4e3:	eb d1                	jmp    800420f4b6 <vprintfmt+0xd6>
  800420f4e5:	eb 58                	jmp    800420f53f <vprintfmt+0x15f>
  800420f4e7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f4ea:	83 f8 30             	cmp    $0x30,%eax
  800420f4ed:	73 17                	jae    800420f506 <vprintfmt+0x126>
  800420f4ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f4f3:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f4f6:	89 c0                	mov    %eax,%eax
  800420f4f8:	48 01 d0             	add    %rdx,%rax
  800420f4fb:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f4fe:	83 c2 08             	add    $0x8,%edx
  800420f501:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f504:	eb 0f                	jmp    800420f515 <vprintfmt+0x135>
  800420f506:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f50a:	48 89 d0             	mov    %rdx,%rax
  800420f50d:	48 83 c2 08          	add    $0x8,%rdx
  800420f511:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f515:	8b 00                	mov    (%rax),%eax
  800420f517:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f51a:	eb 23                	jmp    800420f53f <vprintfmt+0x15f>
  800420f51c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f520:	79 0c                	jns    800420f52e <vprintfmt+0x14e>
  800420f522:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420f529:	e9 3b ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f52e:	e9 36 ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f533:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420f53a:	e9 2a ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f53f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f543:	79 12                	jns    800420f557 <vprintfmt+0x177>
  800420f545:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f548:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420f54b:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f552:	e9 12 ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f557:	e9 0d ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f55c:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420f560:	e9 04 ff ff ff       	jmpq   800420f469 <vprintfmt+0x89>
  800420f565:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f568:	83 f8 30             	cmp    $0x30,%eax
  800420f56b:	73 17                	jae    800420f584 <vprintfmt+0x1a4>
  800420f56d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f571:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f574:	89 c0                	mov    %eax,%eax
  800420f576:	48 01 d0             	add    %rdx,%rax
  800420f579:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f57c:	83 c2 08             	add    $0x8,%edx
  800420f57f:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f582:	eb 0f                	jmp    800420f593 <vprintfmt+0x1b3>
  800420f584:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f588:	48 89 d0             	mov    %rdx,%rax
  800420f58b:	48 83 c2 08          	add    $0x8,%rdx
  800420f58f:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f593:	8b 10                	mov    (%rax),%edx
  800420f595:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f599:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f59d:	48 89 ce             	mov    %rcx,%rsi
  800420f5a0:	89 d7                	mov    %edx,%edi
  800420f5a2:	ff d0                	callq  *%rax
  800420f5a4:	e9 40 03 00 00       	jmpq   800420f8e9 <vprintfmt+0x509>
  800420f5a9:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5ac:	83 f8 30             	cmp    $0x30,%eax
  800420f5af:	73 17                	jae    800420f5c8 <vprintfmt+0x1e8>
  800420f5b1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f5b5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5b8:	89 c0                	mov    %eax,%eax
  800420f5ba:	48 01 d0             	add    %rdx,%rax
  800420f5bd:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f5c0:	83 c2 08             	add    $0x8,%edx
  800420f5c3:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f5c6:	eb 0f                	jmp    800420f5d7 <vprintfmt+0x1f7>
  800420f5c8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f5cc:	48 89 d0             	mov    %rdx,%rax
  800420f5cf:	48 83 c2 08          	add    $0x8,%rdx
  800420f5d3:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f5d7:	8b 18                	mov    (%rax),%ebx
  800420f5d9:	85 db                	test   %ebx,%ebx
  800420f5db:	79 02                	jns    800420f5df <vprintfmt+0x1ff>
  800420f5dd:	f7 db                	neg    %ebx
  800420f5df:	83 fb 15             	cmp    $0x15,%ebx
  800420f5e2:	7f 16                	jg     800420f5fa <vprintfmt+0x21a>
  800420f5e4:	48 b8 40 a9 21 04 80 	movabs $0x800421a940,%rax
  800420f5eb:	00 00 00 
  800420f5ee:	48 63 d3             	movslq %ebx,%rdx
  800420f5f1:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420f5f5:	4d 85 e4             	test   %r12,%r12
  800420f5f8:	75 2e                	jne    800420f628 <vprintfmt+0x248>
  800420f5fa:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f5fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f602:	89 d9                	mov    %ebx,%ecx
  800420f604:	48 ba 01 aa 21 04 80 	movabs $0x800421aa01,%rdx
  800420f60b:	00 00 00 
  800420f60e:	48 89 c7             	mov    %rax,%rdi
  800420f611:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f616:	49 b8 f8 f8 20 04 80 	movabs $0x800420f8f8,%r8
  800420f61d:	00 00 00 
  800420f620:	41 ff d0             	callq  *%r8
  800420f623:	e9 c1 02 00 00       	jmpq   800420f8e9 <vprintfmt+0x509>
  800420f628:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f62c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f630:	4c 89 e1             	mov    %r12,%rcx
  800420f633:	48 ba 0a aa 21 04 80 	movabs $0x800421aa0a,%rdx
  800420f63a:	00 00 00 
  800420f63d:	48 89 c7             	mov    %rax,%rdi
  800420f640:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f645:	49 b8 f8 f8 20 04 80 	movabs $0x800420f8f8,%r8
  800420f64c:	00 00 00 
  800420f64f:	41 ff d0             	callq  *%r8
  800420f652:	e9 92 02 00 00       	jmpq   800420f8e9 <vprintfmt+0x509>
  800420f657:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f65a:	83 f8 30             	cmp    $0x30,%eax
  800420f65d:	73 17                	jae    800420f676 <vprintfmt+0x296>
  800420f65f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f663:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f666:	89 c0                	mov    %eax,%eax
  800420f668:	48 01 d0             	add    %rdx,%rax
  800420f66b:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f66e:	83 c2 08             	add    $0x8,%edx
  800420f671:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f674:	eb 0f                	jmp    800420f685 <vprintfmt+0x2a5>
  800420f676:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f67a:	48 89 d0             	mov    %rdx,%rax
  800420f67d:	48 83 c2 08          	add    $0x8,%rdx
  800420f681:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f685:	4c 8b 20             	mov    (%rax),%r12
  800420f688:	4d 85 e4             	test   %r12,%r12
  800420f68b:	75 0a                	jne    800420f697 <vprintfmt+0x2b7>
  800420f68d:	49 bc 0d aa 21 04 80 	movabs $0x800421aa0d,%r12
  800420f694:	00 00 00 
  800420f697:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f69b:	7e 3f                	jle    800420f6dc <vprintfmt+0x2fc>
  800420f69d:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420f6a1:	74 39                	je     800420f6dc <vprintfmt+0x2fc>
  800420f6a3:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f6a6:	48 98                	cltq   
  800420f6a8:	48 89 c6             	mov    %rax,%rsi
  800420f6ab:	4c 89 e7             	mov    %r12,%rdi
  800420f6ae:	48 b8 f9 fc 20 04 80 	movabs $0x800420fcf9,%rax
  800420f6b5:	00 00 00 
  800420f6b8:	ff d0                	callq  *%rax
  800420f6ba:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420f6bd:	eb 17                	jmp    800420f6d6 <vprintfmt+0x2f6>
  800420f6bf:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420f6c3:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f6c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f6cb:	48 89 ce             	mov    %rcx,%rsi
  800420f6ce:	89 d7                	mov    %edx,%edi
  800420f6d0:	ff d0                	callq  *%rax
  800420f6d2:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f6d6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f6da:	7f e3                	jg     800420f6bf <vprintfmt+0x2df>
  800420f6dc:	eb 37                	jmp    800420f715 <vprintfmt+0x335>
  800420f6de:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420f6e2:	74 1e                	je     800420f702 <vprintfmt+0x322>
  800420f6e4:	83 fb 1f             	cmp    $0x1f,%ebx
  800420f6e7:	7e 05                	jle    800420f6ee <vprintfmt+0x30e>
  800420f6e9:	83 fb 7e             	cmp    $0x7e,%ebx
  800420f6ec:	7e 14                	jle    800420f702 <vprintfmt+0x322>
  800420f6ee:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f6f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f6f6:	48 89 d6             	mov    %rdx,%rsi
  800420f6f9:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420f6fe:	ff d0                	callq  *%rax
  800420f700:	eb 0f                	jmp    800420f711 <vprintfmt+0x331>
  800420f702:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f706:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f70a:	48 89 d6             	mov    %rdx,%rsi
  800420f70d:	89 df                	mov    %ebx,%edi
  800420f70f:	ff d0                	callq  *%rax
  800420f711:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f715:	4c 89 e0             	mov    %r12,%rax
  800420f718:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420f71c:	0f b6 00             	movzbl (%rax),%eax
  800420f71f:	0f be d8             	movsbl %al,%ebx
  800420f722:	85 db                	test   %ebx,%ebx
  800420f724:	74 10                	je     800420f736 <vprintfmt+0x356>
  800420f726:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f72a:	78 b2                	js     800420f6de <vprintfmt+0x2fe>
  800420f72c:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420f730:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f734:	79 a8                	jns    800420f6de <vprintfmt+0x2fe>
  800420f736:	eb 16                	jmp    800420f74e <vprintfmt+0x36e>
  800420f738:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f73c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f740:	48 89 d6             	mov    %rdx,%rsi
  800420f743:	bf 20 00 00 00       	mov    $0x20,%edi
  800420f748:	ff d0                	callq  *%rax
  800420f74a:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f74e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f752:	7f e4                	jg     800420f738 <vprintfmt+0x358>
  800420f754:	e9 90 01 00 00       	jmpq   800420f8e9 <vprintfmt+0x509>
  800420f759:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f75d:	be 03 00 00 00       	mov    $0x3,%esi
  800420f762:	48 89 c7             	mov    %rax,%rdi
  800420f765:	48 b8 d0 f2 20 04 80 	movabs $0x800420f2d0,%rax
  800420f76c:	00 00 00 
  800420f76f:	ff d0                	callq  *%rax
  800420f771:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f775:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f779:	48 85 c0             	test   %rax,%rax
  800420f77c:	79 1d                	jns    800420f79b <vprintfmt+0x3bb>
  800420f77e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f782:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f786:	48 89 d6             	mov    %rdx,%rsi
  800420f789:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420f78e:	ff d0                	callq  *%rax
  800420f790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f794:	48 f7 d8             	neg    %rax
  800420f797:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f79b:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f7a2:	e9 d5 00 00 00       	jmpq   800420f87c <vprintfmt+0x49c>
  800420f7a7:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7ab:	be 03 00 00 00       	mov    $0x3,%esi
  800420f7b0:	48 89 c7             	mov    %rax,%rdi
  800420f7b3:	48 b8 c0 f1 20 04 80 	movabs $0x800420f1c0,%rax
  800420f7ba:	00 00 00 
  800420f7bd:	ff d0                	callq  *%rax
  800420f7bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7c3:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f7ca:	e9 ad 00 00 00       	jmpq   800420f87c <vprintfmt+0x49c>
  800420f7cf:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7d3:	be 03 00 00 00       	mov    $0x3,%esi
  800420f7d8:	48 89 c7             	mov    %rax,%rdi
  800420f7db:	48 b8 c0 f1 20 04 80 	movabs $0x800420f1c0,%rax
  800420f7e2:	00 00 00 
  800420f7e5:	ff d0                	callq  *%rax
  800420f7e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7eb:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800420f7f2:	e9 85 00 00 00       	jmpq   800420f87c <vprintfmt+0x49c>
  800420f7f7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f7fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f7ff:	48 89 d6             	mov    %rdx,%rsi
  800420f802:	bf 30 00 00 00       	mov    $0x30,%edi
  800420f807:	ff d0                	callq  *%rax
  800420f809:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f80d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f811:	48 89 d6             	mov    %rdx,%rsi
  800420f814:	bf 78 00 00 00       	mov    $0x78,%edi
  800420f819:	ff d0                	callq  *%rax
  800420f81b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f81e:	83 f8 30             	cmp    $0x30,%eax
  800420f821:	73 17                	jae    800420f83a <vprintfmt+0x45a>
  800420f823:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f827:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f82a:	89 c0                	mov    %eax,%eax
  800420f82c:	48 01 d0             	add    %rdx,%rax
  800420f82f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f832:	83 c2 08             	add    $0x8,%edx
  800420f835:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f838:	eb 0f                	jmp    800420f849 <vprintfmt+0x469>
  800420f83a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f83e:	48 89 d0             	mov    %rdx,%rax
  800420f841:	48 83 c2 08          	add    $0x8,%rdx
  800420f845:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f849:	48 8b 00             	mov    (%rax),%rax
  800420f84c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f850:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f857:	eb 23                	jmp    800420f87c <vprintfmt+0x49c>
  800420f859:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f85d:	be 03 00 00 00       	mov    $0x3,%esi
  800420f862:	48 89 c7             	mov    %rax,%rdi
  800420f865:	48 b8 c0 f1 20 04 80 	movabs $0x800420f1c0,%rax
  800420f86c:	00 00 00 
  800420f86f:	ff d0                	callq  *%rax
  800420f871:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f875:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f87c:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420f881:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420f884:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420f887:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f88b:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f88f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f893:	45 89 c1             	mov    %r8d,%r9d
  800420f896:	41 89 f8             	mov    %edi,%r8d
  800420f899:	48 89 c7             	mov    %rax,%rdi
  800420f89c:	48 b8 05 f1 20 04 80 	movabs $0x800420f105,%rax
  800420f8a3:	00 00 00 
  800420f8a6:	ff d0                	callq  *%rax
  800420f8a8:	eb 3f                	jmp    800420f8e9 <vprintfmt+0x509>
  800420f8aa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f8ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f8b2:	48 89 d6             	mov    %rdx,%rsi
  800420f8b5:	89 df                	mov    %ebx,%edi
  800420f8b7:	ff d0                	callq  *%rax
  800420f8b9:	eb 2e                	jmp    800420f8e9 <vprintfmt+0x509>
  800420f8bb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f8bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f8c3:	48 89 d6             	mov    %rdx,%rsi
  800420f8c6:	bf 25 00 00 00       	mov    $0x25,%edi
  800420f8cb:	ff d0                	callq  *%rax
  800420f8cd:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f8d2:	eb 05                	jmp    800420f8d9 <vprintfmt+0x4f9>
  800420f8d4:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f8d9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f8dd:	48 83 e8 01          	sub    $0x1,%rax
  800420f8e1:	0f b6 00             	movzbl (%rax),%eax
  800420f8e4:	3c 25                	cmp    $0x25,%al
  800420f8e6:	75 ec                	jne    800420f8d4 <vprintfmt+0x4f4>
  800420f8e8:	90                   	nop
  800420f8e9:	90                   	nop
  800420f8ea:	e9 43 fb ff ff       	jmpq   800420f432 <vprintfmt+0x52>
  800420f8ef:	48 83 c4 60          	add    $0x60,%rsp
  800420f8f3:	5b                   	pop    %rbx
  800420f8f4:	41 5c                	pop    %r12
  800420f8f6:	5d                   	pop    %rbp
  800420f8f7:	c3                   	retq   

000000800420f8f8 <printfmt>:
  800420f8f8:	55                   	push   %rbp
  800420f8f9:	48 89 e5             	mov    %rsp,%rbp
  800420f8fc:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420f903:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420f90a:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420f911:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420f918:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420f91f:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420f926:	84 c0                	test   %al,%al
  800420f928:	74 20                	je     800420f94a <printfmt+0x52>
  800420f92a:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420f92e:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420f932:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420f936:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420f93a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420f93e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420f942:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420f946:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420f94a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420f951:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420f958:	00 00 00 
  800420f95b:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420f962:	00 00 00 
  800420f965:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420f969:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420f970:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f977:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420f97e:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420f985:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420f98c:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420f993:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420f99a:	48 89 c7             	mov    %rax,%rdi
  800420f99d:	48 b8 e0 f3 20 04 80 	movabs $0x800420f3e0,%rax
  800420f9a4:	00 00 00 
  800420f9a7:	ff d0                	callq  *%rax
  800420f9a9:	c9                   	leaveq 
  800420f9aa:	c3                   	retq   

000000800420f9ab <sprintputch>:
  800420f9ab:	55                   	push   %rbp
  800420f9ac:	48 89 e5             	mov    %rsp,%rbp
  800420f9af:	48 83 ec 10          	sub    $0x10,%rsp
  800420f9b3:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f9b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f9ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f9be:	8b 40 10             	mov    0x10(%rax),%eax
  800420f9c1:	8d 50 01             	lea    0x1(%rax),%edx
  800420f9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f9c8:	89 50 10             	mov    %edx,0x10(%rax)
  800420f9cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f9cf:	48 8b 10             	mov    (%rax),%rdx
  800420f9d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f9d6:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f9da:	48 39 c2             	cmp    %rax,%rdx
  800420f9dd:	73 17                	jae    800420f9f6 <sprintputch+0x4b>
  800420f9df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f9e3:	48 8b 00             	mov    (%rax),%rax
  800420f9e6:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420f9ea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f9ee:	48 89 0a             	mov    %rcx,(%rdx)
  800420f9f1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420f9f4:	88 10                	mov    %dl,(%rax)
  800420f9f6:	c9                   	leaveq 
  800420f9f7:	c3                   	retq   

000000800420f9f8 <vsnprintf>:
  800420f9f8:	55                   	push   %rbp
  800420f9f9:	48 89 e5             	mov    %rsp,%rbp
  800420f9fc:	48 83 ec 50          	sub    $0x50,%rsp
  800420fa00:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420fa04:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420fa07:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420fa0b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420fa0f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420fa13:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420fa17:	48 8b 0a             	mov    (%rdx),%rcx
  800420fa1a:	48 89 08             	mov    %rcx,(%rax)
  800420fa1d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fa21:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fa25:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fa29:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fa2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fa31:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fa35:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420fa38:	48 98                	cltq   
  800420fa3a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420fa3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fa42:	48 01 d0             	add    %rdx,%rax
  800420fa45:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fa49:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fa50:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420fa55:	74 06                	je     800420fa5d <vsnprintf+0x65>
  800420fa57:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fa5b:	7f 07                	jg     800420fa64 <vsnprintf+0x6c>
  800420fa5d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420fa62:	eb 2f                	jmp    800420fa93 <vsnprintf+0x9b>
  800420fa64:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420fa68:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420fa6c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420fa70:	48 89 c6             	mov    %rax,%rsi
  800420fa73:	48 bf ab f9 20 04 80 	movabs $0x800420f9ab,%rdi
  800420fa7a:	00 00 00 
  800420fa7d:	48 b8 e0 f3 20 04 80 	movabs $0x800420f3e0,%rax
  800420fa84:	00 00 00 
  800420fa87:	ff d0                	callq  *%rax
  800420fa89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fa8d:	c6 00 00             	movb   $0x0,(%rax)
  800420fa90:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420fa93:	c9                   	leaveq 
  800420fa94:	c3                   	retq   

000000800420fa95 <snprintf>:
  800420fa95:	55                   	push   %rbp
  800420fa96:	48 89 e5             	mov    %rsp,%rbp
  800420fa99:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420faa0:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420faa7:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420faad:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fab4:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fabb:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fac2:	84 c0                	test   %al,%al
  800420fac4:	74 20                	je     800420fae6 <snprintf+0x51>
  800420fac6:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420faca:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420face:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fad2:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fad6:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fada:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fade:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fae2:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fae6:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  800420faed:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420faf4:	00 00 00 
  800420faf7:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420fafe:	00 00 00 
  800420fb01:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420fb05:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420fb0c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fb13:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fb1a:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420fb21:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420fb28:	48 8b 0a             	mov    (%rdx),%rcx
  800420fb2b:	48 89 08             	mov    %rcx,(%rax)
  800420fb2e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fb32:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fb36:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fb3a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fb3e:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420fb45:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420fb4c:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420fb52:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420fb59:	48 89 c7             	mov    %rax,%rdi
  800420fb5c:	48 b8 f8 f9 20 04 80 	movabs $0x800420f9f8,%rax
  800420fb63:	00 00 00 
  800420fb66:	ff d0                	callq  *%rax
  800420fb68:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  800420fb6e:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800420fb74:	c9                   	leaveq 
  800420fb75:	c3                   	retq   

000000800420fb76 <readline>:
  800420fb76:	55                   	push   %rbp
  800420fb77:	48 89 e5             	mov    %rsp,%rbp
  800420fb7a:	48 83 ec 20          	sub    $0x20,%rsp
  800420fb7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fb82:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fb87:	74 22                	je     800420fbab <readline+0x35>
  800420fb89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb8d:	48 89 c6             	mov    %rax,%rsi
  800420fb90:	48 bf c8 ac 21 04 80 	movabs $0x800421acc8,%rdi
  800420fb97:	00 00 00 
  800420fb9a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fb9f:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420fba6:	00 00 00 
  800420fba9:	ff d2                	callq  *%rdx
  800420fbab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fbb2:	bf 00 00 00 00       	mov    $0x0,%edi
  800420fbb7:	48 b8 7a 13 20 04 80 	movabs $0x800420137a,%rax
  800420fbbe:	00 00 00 
  800420fbc1:	ff d0                	callq  *%rax
  800420fbc3:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420fbc6:	48 b8 58 13 20 04 80 	movabs $0x8004201358,%rax
  800420fbcd:	00 00 00 
  800420fbd0:	ff d0                	callq  *%rax
  800420fbd2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420fbd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420fbd9:	79 30                	jns    800420fc0b <readline+0x95>
  800420fbdb:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800420fbdf:	74 20                	je     800420fc01 <readline+0x8b>
  800420fbe1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fbe4:	89 c6                	mov    %eax,%esi
  800420fbe6:	48 bf cb ac 21 04 80 	movabs $0x800421accb,%rdi
  800420fbed:	00 00 00 
  800420fbf0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fbf5:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  800420fbfc:	00 00 00 
  800420fbff:	ff d2                	callq  *%rdx
  800420fc01:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fc06:	e9 be 00 00 00       	jmpq   800420fcc9 <readline+0x153>
  800420fc0b:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420fc0f:	74 06                	je     800420fc17 <readline+0xa1>
  800420fc11:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420fc15:	75 26                	jne    800420fc3d <readline+0xc7>
  800420fc17:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420fc1b:	7e 20                	jle    800420fc3d <readline+0xc7>
  800420fc1d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fc21:	74 11                	je     800420fc34 <readline+0xbe>
  800420fc23:	bf 08 00 00 00       	mov    $0x8,%edi
  800420fc28:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fc2f:	00 00 00 
  800420fc32:	ff d0                	callq  *%rax
  800420fc34:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420fc38:	e9 87 00 00 00       	jmpq   800420fcc4 <readline+0x14e>
  800420fc3d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420fc41:	7e 3f                	jle    800420fc82 <readline+0x10c>
  800420fc43:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420fc4a:	7f 36                	jg     800420fc82 <readline+0x10c>
  800420fc4c:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fc50:	74 11                	je     800420fc63 <readline+0xed>
  800420fc52:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fc55:	89 c7                	mov    %eax,%edi
  800420fc57:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fc5e:	00 00 00 
  800420fc61:	ff d0                	callq  *%rax
  800420fc63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fc66:	8d 50 01             	lea    0x1(%rax),%edx
  800420fc69:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800420fc6c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420fc6f:	89 d1                	mov    %edx,%ecx
  800420fc71:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fc78:	00 00 00 
  800420fc7b:	48 98                	cltq   
  800420fc7d:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420fc80:	eb 42                	jmp    800420fcc4 <readline+0x14e>
  800420fc82:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800420fc86:	74 06                	je     800420fc8e <readline+0x118>
  800420fc88:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800420fc8c:	75 36                	jne    800420fcc4 <readline+0x14e>
  800420fc8e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fc92:	74 11                	je     800420fca5 <readline+0x12f>
  800420fc94:	bf 0a 00 00 00       	mov    $0xa,%edi
  800420fc99:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fca0:	00 00 00 
  800420fca3:	ff d0                	callq  *%rax
  800420fca5:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fcac:	00 00 00 
  800420fcaf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fcb2:	48 98                	cltq   
  800420fcb4:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800420fcb8:	48 b8 a0 d2 49 04 80 	movabs $0x800449d2a0,%rax
  800420fcbf:	00 00 00 
  800420fcc2:	eb 05                	jmp    800420fcc9 <readline+0x153>
  800420fcc4:	e9 fd fe ff ff       	jmpq   800420fbc6 <readline+0x50>
  800420fcc9:	c9                   	leaveq 
  800420fcca:	c3                   	retq   

000000800420fccb <strlen>:
  800420fccb:	55                   	push   %rbp
  800420fccc:	48 89 e5             	mov    %rsp,%rbp
  800420fccf:	48 83 ec 18          	sub    $0x18,%rsp
  800420fcd3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fcd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fcde:	eb 09                	jmp    800420fce9 <strlen+0x1e>
  800420fce0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fce4:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fced:	0f b6 00             	movzbl (%rax),%eax
  800420fcf0:	84 c0                	test   %al,%al
  800420fcf2:	75 ec                	jne    800420fce0 <strlen+0x15>
  800420fcf4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fcf7:	c9                   	leaveq 
  800420fcf8:	c3                   	retq   

000000800420fcf9 <strnlen>:
  800420fcf9:	55                   	push   %rbp
  800420fcfa:	48 89 e5             	mov    %rsp,%rbp
  800420fcfd:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd05:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd09:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fd10:	eb 0e                	jmp    800420fd20 <strnlen+0x27>
  800420fd12:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fd16:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fd1b:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  800420fd20:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420fd25:	74 0b                	je     800420fd32 <strnlen+0x39>
  800420fd27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd2b:	0f b6 00             	movzbl (%rax),%eax
  800420fd2e:	84 c0                	test   %al,%al
  800420fd30:	75 e0                	jne    800420fd12 <strnlen+0x19>
  800420fd32:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fd35:	c9                   	leaveq 
  800420fd36:	c3                   	retq   

000000800420fd37 <strcpy>:
  800420fd37:	55                   	push   %rbp
  800420fd38:	48 89 e5             	mov    %rsp,%rbp
  800420fd3b:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd3f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd43:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd4b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fd4f:	90                   	nop
  800420fd50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd54:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fd58:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fd5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fd60:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fd64:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fd68:	0f b6 12             	movzbl (%rdx),%edx
  800420fd6b:	88 10                	mov    %dl,(%rax)
  800420fd6d:	0f b6 00             	movzbl (%rax),%eax
  800420fd70:	84 c0                	test   %al,%al
  800420fd72:	75 dc                	jne    800420fd50 <strcpy+0x19>
  800420fd74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fd78:	c9                   	leaveq 
  800420fd79:	c3                   	retq   

000000800420fd7a <strcat>:
  800420fd7a:	55                   	push   %rbp
  800420fd7b:	48 89 e5             	mov    %rsp,%rbp
  800420fd7e:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd82:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd86:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd8e:	48 89 c7             	mov    %rax,%rdi
  800420fd91:	48 b8 cb fc 20 04 80 	movabs $0x800420fccb,%rax
  800420fd98:	00 00 00 
  800420fd9b:	ff d0                	callq  *%rax
  800420fd9d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420fda0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fda3:	48 63 d0             	movslq %eax,%rdx
  800420fda6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdaa:	48 01 c2             	add    %rax,%rdx
  800420fdad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fdb1:	48 89 c6             	mov    %rax,%rsi
  800420fdb4:	48 89 d7             	mov    %rdx,%rdi
  800420fdb7:	48 b8 37 fd 20 04 80 	movabs $0x800420fd37,%rax
  800420fdbe:	00 00 00 
  800420fdc1:	ff d0                	callq  *%rax
  800420fdc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdc7:	c9                   	leaveq 
  800420fdc8:	c3                   	retq   

000000800420fdc9 <strncpy>:
  800420fdc9:	55                   	push   %rbp
  800420fdca:	48 89 e5             	mov    %rsp,%rbp
  800420fdcd:	48 83 ec 28          	sub    $0x28,%rsp
  800420fdd1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fdd5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fdd9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fde1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fde5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420fdec:	00 
  800420fded:	eb 2a                	jmp    800420fe19 <strncpy+0x50>
  800420fdef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdf3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fdf7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fdfb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fdff:	0f b6 12             	movzbl (%rdx),%edx
  800420fe02:	88 10                	mov    %dl,(%rax)
  800420fe04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fe08:	0f b6 00             	movzbl (%rax),%eax
  800420fe0b:	84 c0                	test   %al,%al
  800420fe0d:	74 05                	je     800420fe14 <strncpy+0x4b>
  800420fe0f:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  800420fe14:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420fe19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe1d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fe21:	72 cc                	jb     800420fdef <strncpy+0x26>
  800420fe23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fe27:	c9                   	leaveq 
  800420fe28:	c3                   	retq   

000000800420fe29 <strlcpy>:
  800420fe29:	55                   	push   %rbp
  800420fe2a:	48 89 e5             	mov    %rsp,%rbp
  800420fe2d:	48 83 ec 28          	sub    $0x28,%rsp
  800420fe31:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe35:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fe39:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fe3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fe45:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fe4a:	74 3d                	je     800420fe89 <strlcpy+0x60>
  800420fe4c:	eb 1d                	jmp    800420fe6b <strlcpy+0x42>
  800420fe4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe52:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fe56:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fe5a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fe5e:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fe62:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fe66:	0f b6 12             	movzbl (%rdx),%edx
  800420fe69:	88 10                	mov    %dl,(%rax)
  800420fe6b:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  800420fe70:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fe75:	74 0b                	je     800420fe82 <strlcpy+0x59>
  800420fe77:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fe7b:	0f b6 00             	movzbl (%rax),%eax
  800420fe7e:	84 c0                	test   %al,%al
  800420fe80:	75 cc                	jne    800420fe4e <strlcpy+0x25>
  800420fe82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe86:	c6 00 00             	movb   $0x0,(%rax)
  800420fe89:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe91:	48 29 c2             	sub    %rax,%rdx
  800420fe94:	48 89 d0             	mov    %rdx,%rax
  800420fe97:	c9                   	leaveq 
  800420fe98:	c3                   	retq   

000000800420fe99 <strcmp>:
  800420fe99:	55                   	push   %rbp
  800420fe9a:	48 89 e5             	mov    %rsp,%rbp
  800420fe9d:	48 83 ec 10          	sub    $0x10,%rsp
  800420fea1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fea5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fea9:	eb 0a                	jmp    800420feb5 <strcmp+0x1c>
  800420feab:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420feb0:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420feb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420feb9:	0f b6 00             	movzbl (%rax),%eax
  800420febc:	84 c0                	test   %al,%al
  800420febe:	74 12                	je     800420fed2 <strcmp+0x39>
  800420fec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fec4:	0f b6 10             	movzbl (%rax),%edx
  800420fec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fecb:	0f b6 00             	movzbl (%rax),%eax
  800420fece:	38 c2                	cmp    %al,%dl
  800420fed0:	74 d9                	je     800420feab <strcmp+0x12>
  800420fed2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fed6:	0f b6 00             	movzbl (%rax),%eax
  800420fed9:	0f b6 d0             	movzbl %al,%edx
  800420fedc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fee0:	0f b6 00             	movzbl (%rax),%eax
  800420fee3:	0f b6 c0             	movzbl %al,%eax
  800420fee6:	29 c2                	sub    %eax,%edx
  800420fee8:	89 d0                	mov    %edx,%eax
  800420feea:	c9                   	leaveq 
  800420feeb:	c3                   	retq   

000000800420feec <strncmp>:
  800420feec:	55                   	push   %rbp
  800420feed:	48 89 e5             	mov    %rsp,%rbp
  800420fef0:	48 83 ec 18          	sub    $0x18,%rsp
  800420fef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fef8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fefc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ff00:	eb 0f                	jmp    800420ff11 <strncmp+0x25>
  800420ff02:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  800420ff07:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff0c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420ff11:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff16:	74 1d                	je     800420ff35 <strncmp+0x49>
  800420ff18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff1c:	0f b6 00             	movzbl (%rax),%eax
  800420ff1f:	84 c0                	test   %al,%al
  800420ff21:	74 12                	je     800420ff35 <strncmp+0x49>
  800420ff23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff27:	0f b6 10             	movzbl (%rax),%edx
  800420ff2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ff2e:	0f b6 00             	movzbl (%rax),%eax
  800420ff31:	38 c2                	cmp    %al,%dl
  800420ff33:	74 cd                	je     800420ff02 <strncmp+0x16>
  800420ff35:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff3a:	75 07                	jne    800420ff43 <strncmp+0x57>
  800420ff3c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff41:	eb 18                	jmp    800420ff5b <strncmp+0x6f>
  800420ff43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff47:	0f b6 00             	movzbl (%rax),%eax
  800420ff4a:	0f b6 d0             	movzbl %al,%edx
  800420ff4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ff51:	0f b6 00             	movzbl (%rax),%eax
  800420ff54:	0f b6 c0             	movzbl %al,%eax
  800420ff57:	29 c2                	sub    %eax,%edx
  800420ff59:	89 d0                	mov    %edx,%eax
  800420ff5b:	c9                   	leaveq 
  800420ff5c:	c3                   	retq   

000000800420ff5d <strchr>:
  800420ff5d:	55                   	push   %rbp
  800420ff5e:	48 89 e5             	mov    %rsp,%rbp
  800420ff61:	48 83 ec 0c          	sub    $0xc,%rsp
  800420ff65:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ff69:	89 f0                	mov    %esi,%eax
  800420ff6b:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420ff6e:	eb 17                	jmp    800420ff87 <strchr+0x2a>
  800420ff70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff74:	0f b6 00             	movzbl (%rax),%eax
  800420ff77:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420ff7a:	75 06                	jne    800420ff82 <strchr+0x25>
  800420ff7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff80:	eb 15                	jmp    800420ff97 <strchr+0x3a>
  800420ff82:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff8b:	0f b6 00             	movzbl (%rax),%eax
  800420ff8e:	84 c0                	test   %al,%al
  800420ff90:	75 de                	jne    800420ff70 <strchr+0x13>
  800420ff92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff97:	c9                   	leaveq 
  800420ff98:	c3                   	retq   

000000800420ff99 <strfind>:
  800420ff99:	55                   	push   %rbp
  800420ff9a:	48 89 e5             	mov    %rsp,%rbp
  800420ff9d:	48 83 ec 0c          	sub    $0xc,%rsp
  800420ffa1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ffa5:	89 f0                	mov    %esi,%eax
  800420ffa7:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420ffaa:	eb 13                	jmp    800420ffbf <strfind+0x26>
  800420ffac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffb0:	0f b6 00             	movzbl (%rax),%eax
  800420ffb3:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420ffb6:	75 02                	jne    800420ffba <strfind+0x21>
  800420ffb8:	eb 10                	jmp    800420ffca <strfind+0x31>
  800420ffba:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ffbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffc3:	0f b6 00             	movzbl (%rax),%eax
  800420ffc6:	84 c0                	test   %al,%al
  800420ffc8:	75 e2                	jne    800420ffac <strfind+0x13>
  800420ffca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffce:	c9                   	leaveq 
  800420ffcf:	c3                   	retq   

000000800420ffd0 <memset>:
  800420ffd0:	55                   	push   %rbp
  800420ffd1:	48 89 e5             	mov    %rsp,%rbp
  800420ffd4:	48 83 ec 18          	sub    $0x18,%rsp
  800420ffd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ffdc:	89 75 f4             	mov    %esi,-0xc(%rbp)
  800420ffdf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ffe3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ffe8:	75 06                	jne    800420fff0 <memset+0x20>
  800420ffea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffee:	eb 69                	jmp    8004210059 <memset+0x89>
  800420fff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fff4:	83 e0 03             	and    $0x3,%eax
  800420fff7:	48 85 c0             	test   %rax,%rax
  800420fffa:	75 48                	jne    8004210044 <memset+0x74>
  800420fffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210000:	83 e0 03             	and    $0x3,%eax
  8004210003:	48 85 c0             	test   %rax,%rax
  8004210006:	75 3c                	jne    8004210044 <memset+0x74>
  8004210008:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  800421000f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210012:	c1 e0 18             	shl    $0x18,%eax
  8004210015:	89 c2                	mov    %eax,%edx
  8004210017:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421001a:	c1 e0 10             	shl    $0x10,%eax
  800421001d:	09 c2                	or     %eax,%edx
  800421001f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210022:	c1 e0 08             	shl    $0x8,%eax
  8004210025:	09 d0                	or     %edx,%eax
  8004210027:	09 45 f4             	or     %eax,-0xc(%rbp)
  800421002a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421002e:	48 c1 e8 02          	shr    $0x2,%rax
  8004210032:	48 89 c1             	mov    %rax,%rcx
  8004210035:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210039:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421003c:	48 89 d7             	mov    %rdx,%rdi
  800421003f:	fc                   	cld    
  8004210040:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210042:	eb 11                	jmp    8004210055 <memset+0x85>
  8004210044:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210048:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421004b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421004f:	48 89 d7             	mov    %rdx,%rdi
  8004210052:	fc                   	cld    
  8004210053:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210055:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210059:	c9                   	leaveq 
  800421005a:	c3                   	retq   

000000800421005b <memmove>:
  800421005b:	55                   	push   %rbp
  800421005c:	48 89 e5             	mov    %rsp,%rbp
  800421005f:	48 83 ec 28          	sub    $0x28,%rsp
  8004210063:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210067:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421006b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421006f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210073:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421007b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421007f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210083:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210087:	0f 83 88 00 00 00    	jae    8004210115 <memmove+0xba>
  800421008d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210091:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210095:	48 01 d0             	add    %rdx,%rax
  8004210098:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421009c:	76 77                	jbe    8004210115 <memmove+0xba>
  800421009e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100a2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042100a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100aa:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  80042100ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100b2:	83 e0 03             	and    $0x3,%eax
  80042100b5:	48 85 c0             	test   %rax,%rax
  80042100b8:	75 3b                	jne    80042100f5 <memmove+0x9a>
  80042100ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100be:	83 e0 03             	and    $0x3,%eax
  80042100c1:	48 85 c0             	test   %rax,%rax
  80042100c4:	75 2f                	jne    80042100f5 <memmove+0x9a>
  80042100c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100ca:	83 e0 03             	and    $0x3,%eax
  80042100cd:	48 85 c0             	test   %rax,%rax
  80042100d0:	75 23                	jne    80042100f5 <memmove+0x9a>
  80042100d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100d6:	48 83 e8 04          	sub    $0x4,%rax
  80042100da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042100de:	48 83 ea 04          	sub    $0x4,%rdx
  80042100e2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042100e6:	48 c1 e9 02          	shr    $0x2,%rcx
  80042100ea:	48 89 c7             	mov    %rax,%rdi
  80042100ed:	48 89 d6             	mov    %rdx,%rsi
  80042100f0:	fd                   	std    
  80042100f1:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042100f3:	eb 1d                	jmp    8004210112 <memmove+0xb7>
  80042100f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100f9:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042100fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210101:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210109:	48 89 d7             	mov    %rdx,%rdi
  800421010c:	48 89 c1             	mov    %rax,%rcx
  800421010f:	fd                   	std    
  8004210110:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210112:	fc                   	cld    
  8004210113:	eb 57                	jmp    800421016c <memmove+0x111>
  8004210115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210119:	83 e0 03             	and    $0x3,%eax
  800421011c:	48 85 c0             	test   %rax,%rax
  800421011f:	75 36                	jne    8004210157 <memmove+0xfc>
  8004210121:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210125:	83 e0 03             	and    $0x3,%eax
  8004210128:	48 85 c0             	test   %rax,%rax
  800421012b:	75 2a                	jne    8004210157 <memmove+0xfc>
  800421012d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210131:	83 e0 03             	and    $0x3,%eax
  8004210134:	48 85 c0             	test   %rax,%rax
  8004210137:	75 1e                	jne    8004210157 <memmove+0xfc>
  8004210139:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421013d:	48 c1 e8 02          	shr    $0x2,%rax
  8004210141:	48 89 c1             	mov    %rax,%rcx
  8004210144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210148:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421014c:	48 89 c7             	mov    %rax,%rdi
  800421014f:	48 89 d6             	mov    %rdx,%rsi
  8004210152:	fc                   	cld    
  8004210153:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210155:	eb 15                	jmp    800421016c <memmove+0x111>
  8004210157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421015b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421015f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210163:	48 89 c7             	mov    %rax,%rdi
  8004210166:	48 89 d6             	mov    %rdx,%rsi
  8004210169:	fc                   	cld    
  800421016a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  800421016c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210170:	c9                   	leaveq 
  8004210171:	c3                   	retq   

0000008004210172 <memcpy>:
  8004210172:	55                   	push   %rbp
  8004210173:	48 89 e5             	mov    %rsp,%rbp
  8004210176:	48 83 ec 18          	sub    $0x18,%rsp
  800421017a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421017e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210182:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210186:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421018a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421018e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210192:	48 89 ce             	mov    %rcx,%rsi
  8004210195:	48 89 c7             	mov    %rax,%rdi
  8004210198:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  800421019f:	00 00 00 
  80042101a2:	ff d0                	callq  *%rax
  80042101a4:	c9                   	leaveq 
  80042101a5:	c3                   	retq   

00000080042101a6 <memcmp>:
  80042101a6:	55                   	push   %rbp
  80042101a7:	48 89 e5             	mov    %rsp,%rbp
  80042101aa:	48 83 ec 28          	sub    $0x28,%rsp
  80042101ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042101b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042101b6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042101ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042101c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042101ca:	eb 36                	jmp    8004210202 <memcmp+0x5c>
  80042101cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101d0:	0f b6 10             	movzbl (%rax),%edx
  80042101d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042101d7:	0f b6 00             	movzbl (%rax),%eax
  80042101da:	38 c2                	cmp    %al,%dl
  80042101dc:	74 1a                	je     80042101f8 <memcmp+0x52>
  80042101de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101e2:	0f b6 00             	movzbl (%rax),%eax
  80042101e5:	0f b6 d0             	movzbl %al,%edx
  80042101e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042101ec:	0f b6 00             	movzbl (%rax),%eax
  80042101ef:	0f b6 c0             	movzbl %al,%eax
  80042101f2:	29 c2                	sub    %eax,%edx
  80042101f4:	89 d0                	mov    %edx,%eax
  80042101f6:	eb 20                	jmp    8004210218 <memcmp+0x72>
  80042101f8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042101fd:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210202:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210206:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421020a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421020e:	48 85 c0             	test   %rax,%rax
  8004210211:	75 b9                	jne    80042101cc <memcmp+0x26>
  8004210213:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210218:	c9                   	leaveq 
  8004210219:	c3                   	retq   

000000800421021a <memfind>:
  800421021a:	55                   	push   %rbp
  800421021b:	48 89 e5             	mov    %rsp,%rbp
  800421021e:	48 83 ec 28          	sub    $0x28,%rsp
  8004210222:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210226:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210229:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421022d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210231:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210235:	48 01 d0             	add    %rdx,%rax
  8004210238:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421023c:	eb 15                	jmp    8004210253 <memfind+0x39>
  800421023e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210242:	0f b6 10             	movzbl (%rax),%edx
  8004210245:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210248:	38 c2                	cmp    %al,%dl
  800421024a:	75 02                	jne    800421024e <memfind+0x34>
  800421024c:	eb 0f                	jmp    800421025d <memfind+0x43>
  800421024e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210257:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421025b:	72 e1                	jb     800421023e <memfind+0x24>
  800421025d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210261:	c9                   	leaveq 
  8004210262:	c3                   	retq   

0000008004210263 <strtol>:
  8004210263:	55                   	push   %rbp
  8004210264:	48 89 e5             	mov    %rsp,%rbp
  8004210267:	48 83 ec 34          	sub    $0x34,%rsp
  800421026b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421026f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210273:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210276:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421027d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210284:	00 
  8004210285:	eb 05                	jmp    800421028c <strtol+0x29>
  8004210287:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421028c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210290:	0f b6 00             	movzbl (%rax),%eax
  8004210293:	3c 20                	cmp    $0x20,%al
  8004210295:	74 f0                	je     8004210287 <strtol+0x24>
  8004210297:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421029b:	0f b6 00             	movzbl (%rax),%eax
  800421029e:	3c 09                	cmp    $0x9,%al
  80042102a0:	74 e5                	je     8004210287 <strtol+0x24>
  80042102a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102a6:	0f b6 00             	movzbl (%rax),%eax
  80042102a9:	3c 2b                	cmp    $0x2b,%al
  80042102ab:	75 07                	jne    80042102b4 <strtol+0x51>
  80042102ad:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042102b2:	eb 17                	jmp    80042102cb <strtol+0x68>
  80042102b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102b8:	0f b6 00             	movzbl (%rax),%eax
  80042102bb:	3c 2d                	cmp    $0x2d,%al
  80042102bd:	75 0c                	jne    80042102cb <strtol+0x68>
  80042102bf:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042102c4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  80042102cb:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042102cf:	74 06                	je     80042102d7 <strtol+0x74>
  80042102d1:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  80042102d5:	75 28                	jne    80042102ff <strtol+0x9c>
  80042102d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102db:	0f b6 00             	movzbl (%rax),%eax
  80042102de:	3c 30                	cmp    $0x30,%al
  80042102e0:	75 1d                	jne    80042102ff <strtol+0x9c>
  80042102e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102e6:	48 83 c0 01          	add    $0x1,%rax
  80042102ea:	0f b6 00             	movzbl (%rax),%eax
  80042102ed:	3c 78                	cmp    $0x78,%al
  80042102ef:	75 0e                	jne    80042102ff <strtol+0x9c>
  80042102f1:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  80042102f6:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  80042102fd:	eb 2c                	jmp    800421032b <strtol+0xc8>
  80042102ff:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210303:	75 19                	jne    800421031e <strtol+0xbb>
  8004210305:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210309:	0f b6 00             	movzbl (%rax),%eax
  800421030c:	3c 30                	cmp    $0x30,%al
  800421030e:	75 0e                	jne    800421031e <strtol+0xbb>
  8004210310:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210315:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  800421031c:	eb 0d                	jmp    800421032b <strtol+0xc8>
  800421031e:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210322:	75 07                	jne    800421032b <strtol+0xc8>
  8004210324:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  800421032b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421032f:	0f b6 00             	movzbl (%rax),%eax
  8004210332:	3c 2f                	cmp    $0x2f,%al
  8004210334:	7e 1d                	jle    8004210353 <strtol+0xf0>
  8004210336:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421033a:	0f b6 00             	movzbl (%rax),%eax
  800421033d:	3c 39                	cmp    $0x39,%al
  800421033f:	7f 12                	jg     8004210353 <strtol+0xf0>
  8004210341:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210345:	0f b6 00             	movzbl (%rax),%eax
  8004210348:	0f be c0             	movsbl %al,%eax
  800421034b:	83 e8 30             	sub    $0x30,%eax
  800421034e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210351:	eb 4e                	jmp    80042103a1 <strtol+0x13e>
  8004210353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210357:	0f b6 00             	movzbl (%rax),%eax
  800421035a:	3c 60                	cmp    $0x60,%al
  800421035c:	7e 1d                	jle    800421037b <strtol+0x118>
  800421035e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210362:	0f b6 00             	movzbl (%rax),%eax
  8004210365:	3c 7a                	cmp    $0x7a,%al
  8004210367:	7f 12                	jg     800421037b <strtol+0x118>
  8004210369:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421036d:	0f b6 00             	movzbl (%rax),%eax
  8004210370:	0f be c0             	movsbl %al,%eax
  8004210373:	83 e8 57             	sub    $0x57,%eax
  8004210376:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210379:	eb 26                	jmp    80042103a1 <strtol+0x13e>
  800421037b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421037f:	0f b6 00             	movzbl (%rax),%eax
  8004210382:	3c 40                	cmp    $0x40,%al
  8004210384:	7e 48                	jle    80042103ce <strtol+0x16b>
  8004210386:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421038a:	0f b6 00             	movzbl (%rax),%eax
  800421038d:	3c 5a                	cmp    $0x5a,%al
  800421038f:	7f 3d                	jg     80042103ce <strtol+0x16b>
  8004210391:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210395:	0f b6 00             	movzbl (%rax),%eax
  8004210398:	0f be c0             	movsbl %al,%eax
  800421039b:	83 e8 37             	sub    $0x37,%eax
  800421039e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042103a1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042103a4:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  80042103a7:	7c 02                	jl     80042103ab <strtol+0x148>
  80042103a9:	eb 23                	jmp    80042103ce <strtol+0x16b>
  80042103ab:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042103b0:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042103b3:	48 98                	cltq   
  80042103b5:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  80042103ba:	48 89 c2             	mov    %rax,%rdx
  80042103bd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042103c0:	48 98                	cltq   
  80042103c2:	48 01 d0             	add    %rdx,%rax
  80042103c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042103c9:	e9 5d ff ff ff       	jmpq   800421032b <strtol+0xc8>
  80042103ce:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042103d3:	74 0b                	je     80042103e0 <strtol+0x17d>
  80042103d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042103d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042103dd:	48 89 10             	mov    %rdx,(%rax)
  80042103e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042103e4:	74 09                	je     80042103ef <strtol+0x18c>
  80042103e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042103ea:	48 f7 d8             	neg    %rax
  80042103ed:	eb 04                	jmp    80042103f3 <strtol+0x190>
  80042103ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042103f3:	c9                   	leaveq 
  80042103f4:	c3                   	retq   

00000080042103f5 <strstr>:
  80042103f5:	55                   	push   %rbp
  80042103f6:	48 89 e5             	mov    %rsp,%rbp
  80042103f9:	48 83 ec 30          	sub    $0x30,%rsp
  80042103fd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210401:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210409:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421040d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210411:	0f b6 00             	movzbl (%rax),%eax
  8004210414:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210417:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421041b:	75 06                	jne    8004210423 <strstr+0x2e>
  800421041d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210421:	eb 6b                	jmp    800421048e <strstr+0x99>
  8004210423:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210427:	48 89 c7             	mov    %rax,%rdi
  800421042a:	48 b8 cb fc 20 04 80 	movabs $0x800420fccb,%rax
  8004210431:	00 00 00 
  8004210434:	ff d0                	callq  *%rax
  8004210436:	48 98                	cltq   
  8004210438:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421043c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210440:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210444:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210448:	0f b6 00             	movzbl (%rax),%eax
  800421044b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421044e:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004210452:	75 07                	jne    800421045b <strstr+0x66>
  8004210454:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210459:	eb 33                	jmp    800421048e <strstr+0x99>
  800421045b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421045f:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210462:	75 d8                	jne    800421043c <strstr+0x47>
  8004210464:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210468:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  800421046c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210470:	48 89 ce             	mov    %rcx,%rsi
  8004210473:	48 89 c7             	mov    %rax,%rdi
  8004210476:	48 b8 ec fe 20 04 80 	movabs $0x800420feec,%rax
  800421047d:	00 00 00 
  8004210480:	ff d0                	callq  *%rax
  8004210482:	85 c0                	test   %eax,%eax
  8004210484:	75 b6                	jne    800421043c <strstr+0x47>
  8004210486:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421048a:	48 83 e8 01          	sub    $0x1,%rax
  800421048e:	c9                   	leaveq 
  800421048f:	c3                   	retq   

0000008004210490 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210490:	55                   	push   %rbp
  8004210491:	48 89 e5             	mov    %rsp,%rbp
  8004210494:	48 83 ec 24          	sub    $0x24,%rsp
  8004210498:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421049c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042104a0:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042104a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042104a7:	48 8b 10             	mov    (%rax),%rdx
  80042104aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104ae:	48 01 d0             	add    %rdx,%rax
  80042104b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042104b5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042104bc:	00 
	switch (bytes_to_read) {
  80042104bd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042104c0:	83 f8 02             	cmp    $0x2,%eax
  80042104c3:	0f 84 ab 00 00 00    	je     8004210574 <_dwarf_read_lsb+0xe4>
  80042104c9:	83 f8 02             	cmp    $0x2,%eax
  80042104cc:	7f 0e                	jg     80042104dc <_dwarf_read_lsb+0x4c>
  80042104ce:	83 f8 01             	cmp    $0x1,%eax
  80042104d1:	0f 84 b3 00 00 00    	je     800421058a <_dwarf_read_lsb+0xfa>
  80042104d7:	e9 d9 00 00 00       	jmpq   80042105b5 <_dwarf_read_lsb+0x125>
  80042104dc:	83 f8 04             	cmp    $0x4,%eax
  80042104df:	74 65                	je     8004210546 <_dwarf_read_lsb+0xb6>
  80042104e1:	83 f8 08             	cmp    $0x8,%eax
  80042104e4:	0f 85 cb 00 00 00    	jne    80042105b5 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042104ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104ee:	48 83 c0 04          	add    $0x4,%rax
  80042104f2:	0f b6 00             	movzbl (%rax),%eax
  80042104f5:	0f b6 c0             	movzbl %al,%eax
  80042104f8:	48 c1 e0 20          	shl    $0x20,%rax
  80042104fc:	48 89 c2             	mov    %rax,%rdx
  80042104ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210503:	48 83 c0 05          	add    $0x5,%rax
  8004210507:	0f b6 00             	movzbl (%rax),%eax
  800421050a:	0f b6 c0             	movzbl %al,%eax
  800421050d:	48 c1 e0 28          	shl    $0x28,%rax
  8004210511:	48 09 d0             	or     %rdx,%rax
  8004210514:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421051c:	48 83 c0 06          	add    $0x6,%rax
  8004210520:	0f b6 00             	movzbl (%rax),%eax
  8004210523:	0f b6 c0             	movzbl %al,%eax
  8004210526:	48 c1 e0 30          	shl    $0x30,%rax
  800421052a:	48 89 c2             	mov    %rax,%rdx
  800421052d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210531:	48 83 c0 07          	add    $0x7,%rax
  8004210535:	0f b6 00             	movzbl (%rax),%eax
  8004210538:	0f b6 c0             	movzbl %al,%eax
  800421053b:	48 c1 e0 38          	shl    $0x38,%rax
  800421053f:	48 09 d0             	or     %rdx,%rax
  8004210542:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210546:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421054a:	48 83 c0 02          	add    $0x2,%rax
  800421054e:	0f b6 00             	movzbl (%rax),%eax
  8004210551:	0f b6 c0             	movzbl %al,%eax
  8004210554:	48 c1 e0 10          	shl    $0x10,%rax
  8004210558:	48 89 c2             	mov    %rax,%rdx
  800421055b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421055f:	48 83 c0 03          	add    $0x3,%rax
  8004210563:	0f b6 00             	movzbl (%rax),%eax
  8004210566:	0f b6 c0             	movzbl %al,%eax
  8004210569:	48 c1 e0 18          	shl    $0x18,%rax
  800421056d:	48 09 d0             	or     %rdx,%rax
  8004210570:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210578:	48 83 c0 01          	add    $0x1,%rax
  800421057c:	0f b6 00             	movzbl (%rax),%eax
  800421057f:	0f b6 c0             	movzbl %al,%eax
  8004210582:	48 c1 e0 08          	shl    $0x8,%rax
  8004210586:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421058a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421058e:	0f b6 00             	movzbl (%rax),%eax
  8004210591:	0f b6 c0             	movzbl %al,%eax
  8004210594:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210598:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004210599:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421059d:	48 8b 10             	mov    (%rax),%rdx
  80042105a0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042105a3:	48 98                	cltq   
  80042105a5:	48 01 c2             	add    %rax,%rdx
  80042105a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042105ac:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042105af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042105b3:	eb 05                	jmp    80042105ba <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  80042105b5:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  80042105ba:	c9                   	leaveq 
  80042105bb:	c3                   	retq   

00000080042105bc <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  80042105bc:	55                   	push   %rbp
  80042105bd:	48 89 e5             	mov    %rsp,%rbp
  80042105c0:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042105c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042105c8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  80042105cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105cf:	48 8b 00             	mov    (%rax),%rax
  80042105d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042105d6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042105dd:	00 
	switch (bytes_to_read) {
  80042105de:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042105e1:	83 f8 02             	cmp    $0x2,%eax
  80042105e4:	0f 84 ab 00 00 00    	je     8004210695 <_dwarf_decode_lsb+0xd9>
  80042105ea:	83 f8 02             	cmp    $0x2,%eax
  80042105ed:	7f 0e                	jg     80042105fd <_dwarf_decode_lsb+0x41>
  80042105ef:	83 f8 01             	cmp    $0x1,%eax
  80042105f2:	0f 84 b3 00 00 00    	je     80042106ab <_dwarf_decode_lsb+0xef>
  80042105f8:	e9 d9 00 00 00       	jmpq   80042106d6 <_dwarf_decode_lsb+0x11a>
  80042105fd:	83 f8 04             	cmp    $0x4,%eax
  8004210600:	74 65                	je     8004210667 <_dwarf_decode_lsb+0xab>
  8004210602:	83 f8 08             	cmp    $0x8,%eax
  8004210605:	0f 85 cb 00 00 00    	jne    80042106d6 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421060b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421060f:	48 83 c0 04          	add    $0x4,%rax
  8004210613:	0f b6 00             	movzbl (%rax),%eax
  8004210616:	0f b6 c0             	movzbl %al,%eax
  8004210619:	48 c1 e0 20          	shl    $0x20,%rax
  800421061d:	48 89 c2             	mov    %rax,%rdx
  8004210620:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210624:	48 83 c0 05          	add    $0x5,%rax
  8004210628:	0f b6 00             	movzbl (%rax),%eax
  800421062b:	0f b6 c0             	movzbl %al,%eax
  800421062e:	48 c1 e0 28          	shl    $0x28,%rax
  8004210632:	48 09 d0             	or     %rdx,%rax
  8004210635:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210639:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421063d:	48 83 c0 06          	add    $0x6,%rax
  8004210641:	0f b6 00             	movzbl (%rax),%eax
  8004210644:	0f b6 c0             	movzbl %al,%eax
  8004210647:	48 c1 e0 30          	shl    $0x30,%rax
  800421064b:	48 89 c2             	mov    %rax,%rdx
  800421064e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210652:	48 83 c0 07          	add    $0x7,%rax
  8004210656:	0f b6 00             	movzbl (%rax),%eax
  8004210659:	0f b6 c0             	movzbl %al,%eax
  800421065c:	48 c1 e0 38          	shl    $0x38,%rax
  8004210660:	48 09 d0             	or     %rdx,%rax
  8004210663:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421066b:	48 83 c0 02          	add    $0x2,%rax
  800421066f:	0f b6 00             	movzbl (%rax),%eax
  8004210672:	0f b6 c0             	movzbl %al,%eax
  8004210675:	48 c1 e0 10          	shl    $0x10,%rax
  8004210679:	48 89 c2             	mov    %rax,%rdx
  800421067c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210680:	48 83 c0 03          	add    $0x3,%rax
  8004210684:	0f b6 00             	movzbl (%rax),%eax
  8004210687:	0f b6 c0             	movzbl %al,%eax
  800421068a:	48 c1 e0 18          	shl    $0x18,%rax
  800421068e:	48 09 d0             	or     %rdx,%rax
  8004210691:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210695:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210699:	48 83 c0 01          	add    $0x1,%rax
  800421069d:	0f b6 00             	movzbl (%rax),%eax
  80042106a0:	0f b6 c0             	movzbl %al,%eax
  80042106a3:	48 c1 e0 08          	shl    $0x8,%rax
  80042106a7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042106ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106af:	0f b6 00             	movzbl (%rax),%eax
  80042106b2:	0f b6 c0             	movzbl %al,%eax
  80042106b5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042106b9:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  80042106ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106be:	48 8b 10             	mov    (%rax),%rdx
  80042106c1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042106c4:	48 98                	cltq   
  80042106c6:	48 01 c2             	add    %rax,%rdx
  80042106c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106cd:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042106d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042106d4:	eb 05                	jmp    80042106db <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  80042106d6:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  80042106db:	c9                   	leaveq 
  80042106dc:	c3                   	retq   

00000080042106dd <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042106dd:	55                   	push   %rbp
  80042106de:	48 89 e5             	mov    %rsp,%rbp
  80042106e1:	48 83 ec 24          	sub    $0x24,%rsp
  80042106e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042106e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042106ed:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042106f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042106f4:	48 8b 10             	mov    (%rax),%rdx
  80042106f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106fb:	48 01 d0             	add    %rdx,%rax
  80042106fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004210702:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210705:	83 f8 02             	cmp    $0x2,%eax
  8004210708:	74 35                	je     800421073f <_dwarf_read_msb+0x62>
  800421070a:	83 f8 02             	cmp    $0x2,%eax
  800421070d:	7f 0a                	jg     8004210719 <_dwarf_read_msb+0x3c>
  800421070f:	83 f8 01             	cmp    $0x1,%eax
  8004210712:	74 18                	je     800421072c <_dwarf_read_msb+0x4f>
  8004210714:	e9 53 01 00 00       	jmpq   800421086c <_dwarf_read_msb+0x18f>
  8004210719:	83 f8 04             	cmp    $0x4,%eax
  800421071c:	74 49                	je     8004210767 <_dwarf_read_msb+0x8a>
  800421071e:	83 f8 08             	cmp    $0x8,%eax
  8004210721:	0f 84 96 00 00 00    	je     80042107bd <_dwarf_read_msb+0xe0>
  8004210727:	e9 40 01 00 00       	jmpq   800421086c <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  800421072c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210730:	0f b6 00             	movzbl (%rax),%eax
  8004210733:	0f b6 c0             	movzbl %al,%eax
  8004210736:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421073a:	e9 34 01 00 00       	jmpq   8004210873 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800421073f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210743:	48 83 c0 01          	add    $0x1,%rax
  8004210747:	0f b6 00             	movzbl (%rax),%eax
  800421074a:	0f b6 d0             	movzbl %al,%edx
  800421074d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210751:	0f b6 00             	movzbl (%rax),%eax
  8004210754:	0f b6 c0             	movzbl %al,%eax
  8004210757:	48 c1 e0 08          	shl    $0x8,%rax
  800421075b:	48 09 d0             	or     %rdx,%rax
  800421075e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210762:	e9 0c 01 00 00       	jmpq   8004210873 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210767:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421076b:	48 83 c0 03          	add    $0x3,%rax
  800421076f:	0f b6 00             	movzbl (%rax),%eax
  8004210772:	0f b6 c0             	movzbl %al,%eax
  8004210775:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210779:	48 83 c2 02          	add    $0x2,%rdx
  800421077d:	0f b6 12             	movzbl (%rdx),%edx
  8004210780:	0f b6 d2             	movzbl %dl,%edx
  8004210783:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210787:	48 09 d0             	or     %rdx,%rax
  800421078a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800421078e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210792:	48 83 c0 01          	add    $0x1,%rax
  8004210796:	0f b6 00             	movzbl (%rax),%eax
  8004210799:	0f b6 c0             	movzbl %al,%eax
  800421079c:	48 c1 e0 10          	shl    $0x10,%rax
  80042107a0:	48 89 c2             	mov    %rax,%rdx
  80042107a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107a7:	0f b6 00             	movzbl (%rax),%eax
  80042107aa:	0f b6 c0             	movzbl %al,%eax
  80042107ad:	48 c1 e0 18          	shl    $0x18,%rax
  80042107b1:	48 09 d0             	or     %rdx,%rax
  80042107b4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042107b8:	e9 b6 00 00 00       	jmpq   8004210873 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042107bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107c1:	48 83 c0 07          	add    $0x7,%rax
  80042107c5:	0f b6 00             	movzbl (%rax),%eax
  80042107c8:	0f b6 c0             	movzbl %al,%eax
  80042107cb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042107cf:	48 83 c2 06          	add    $0x6,%rdx
  80042107d3:	0f b6 12             	movzbl (%rdx),%edx
  80042107d6:	0f b6 d2             	movzbl %dl,%edx
  80042107d9:	48 c1 e2 08          	shl    $0x8,%rdx
  80042107dd:	48 09 d0             	or     %rdx,%rax
  80042107e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042107e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107e8:	48 83 c0 05          	add    $0x5,%rax
  80042107ec:	0f b6 00             	movzbl (%rax),%eax
  80042107ef:	0f b6 c0             	movzbl %al,%eax
  80042107f2:	48 c1 e0 10          	shl    $0x10,%rax
  80042107f6:	48 89 c2             	mov    %rax,%rdx
  80042107f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107fd:	48 83 c0 04          	add    $0x4,%rax
  8004210801:	0f b6 00             	movzbl (%rax),%eax
  8004210804:	0f b6 c0             	movzbl %al,%eax
  8004210807:	48 c1 e0 18          	shl    $0x18,%rax
  800421080b:	48 09 d0             	or     %rdx,%rax
  800421080e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210812:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210816:	48 83 c0 03          	add    $0x3,%rax
  800421081a:	0f b6 00             	movzbl (%rax),%eax
  800421081d:	0f b6 c0             	movzbl %al,%eax
  8004210820:	48 c1 e0 20          	shl    $0x20,%rax
  8004210824:	48 89 c2             	mov    %rax,%rdx
  8004210827:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421082b:	48 83 c0 02          	add    $0x2,%rax
  800421082f:	0f b6 00             	movzbl (%rax),%eax
  8004210832:	0f b6 c0             	movzbl %al,%eax
  8004210835:	48 c1 e0 28          	shl    $0x28,%rax
  8004210839:	48 09 d0             	or     %rdx,%rax
  800421083c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210840:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210844:	48 83 c0 01          	add    $0x1,%rax
  8004210848:	0f b6 00             	movzbl (%rax),%eax
  800421084b:	0f b6 c0             	movzbl %al,%eax
  800421084e:	48 c1 e0 30          	shl    $0x30,%rax
  8004210852:	48 89 c2             	mov    %rax,%rdx
  8004210855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210859:	0f b6 00             	movzbl (%rax),%eax
  800421085c:	0f b6 c0             	movzbl %al,%eax
  800421085f:	48 c1 e0 38          	shl    $0x38,%rax
  8004210863:	48 09 d0             	or     %rdx,%rax
  8004210866:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421086a:	eb 07                	jmp    8004210873 <_dwarf_read_msb+0x196>
	default:
		return (0);
  800421086c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210871:	eb 1a                	jmp    800421088d <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004210873:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210877:	48 8b 10             	mov    (%rax),%rdx
  800421087a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421087d:	48 98                	cltq   
  800421087f:	48 01 c2             	add    %rax,%rdx
  8004210882:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210886:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421088d:	c9                   	leaveq 
  800421088e:	c3                   	retq   

000000800421088f <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  800421088f:	55                   	push   %rbp
  8004210890:	48 89 e5             	mov    %rsp,%rbp
  8004210893:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210897:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421089b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421089e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108a2:	48 8b 00             	mov    (%rax),%rax
  80042108a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042108a9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042108b0:	00 
	switch (bytes_to_read) {
  80042108b1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042108b4:	83 f8 02             	cmp    $0x2,%eax
  80042108b7:	74 35                	je     80042108ee <_dwarf_decode_msb+0x5f>
  80042108b9:	83 f8 02             	cmp    $0x2,%eax
  80042108bc:	7f 0a                	jg     80042108c8 <_dwarf_decode_msb+0x39>
  80042108be:	83 f8 01             	cmp    $0x1,%eax
  80042108c1:	74 18                	je     80042108db <_dwarf_decode_msb+0x4c>
  80042108c3:	e9 53 01 00 00       	jmpq   8004210a1b <_dwarf_decode_msb+0x18c>
  80042108c8:	83 f8 04             	cmp    $0x4,%eax
  80042108cb:	74 49                	je     8004210916 <_dwarf_decode_msb+0x87>
  80042108cd:	83 f8 08             	cmp    $0x8,%eax
  80042108d0:	0f 84 96 00 00 00    	je     800421096c <_dwarf_decode_msb+0xdd>
  80042108d6:	e9 40 01 00 00       	jmpq   8004210a1b <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  80042108db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108df:	0f b6 00             	movzbl (%rax),%eax
  80042108e2:	0f b6 c0             	movzbl %al,%eax
  80042108e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042108e9:	e9 34 01 00 00       	jmpq   8004210a22 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042108ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108f2:	48 83 c0 01          	add    $0x1,%rax
  80042108f6:	0f b6 00             	movzbl (%rax),%eax
  80042108f9:	0f b6 d0             	movzbl %al,%edx
  80042108fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210900:	0f b6 00             	movzbl (%rax),%eax
  8004210903:	0f b6 c0             	movzbl %al,%eax
  8004210906:	48 c1 e0 08          	shl    $0x8,%rax
  800421090a:	48 09 d0             	or     %rdx,%rax
  800421090d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210911:	e9 0c 01 00 00       	jmpq   8004210a22 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210916:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421091a:	48 83 c0 03          	add    $0x3,%rax
  800421091e:	0f b6 00             	movzbl (%rax),%eax
  8004210921:	0f b6 c0             	movzbl %al,%eax
  8004210924:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210928:	48 83 c2 02          	add    $0x2,%rdx
  800421092c:	0f b6 12             	movzbl (%rdx),%edx
  800421092f:	0f b6 d2             	movzbl %dl,%edx
  8004210932:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210936:	48 09 d0             	or     %rdx,%rax
  8004210939:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800421093d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210941:	48 83 c0 01          	add    $0x1,%rax
  8004210945:	0f b6 00             	movzbl (%rax),%eax
  8004210948:	0f b6 c0             	movzbl %al,%eax
  800421094b:	48 c1 e0 10          	shl    $0x10,%rax
  800421094f:	48 89 c2             	mov    %rax,%rdx
  8004210952:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210956:	0f b6 00             	movzbl (%rax),%eax
  8004210959:	0f b6 c0             	movzbl %al,%eax
  800421095c:	48 c1 e0 18          	shl    $0x18,%rax
  8004210960:	48 09 d0             	or     %rdx,%rax
  8004210963:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210967:	e9 b6 00 00 00       	jmpq   8004210a22 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421096c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210970:	48 83 c0 07          	add    $0x7,%rax
  8004210974:	0f b6 00             	movzbl (%rax),%eax
  8004210977:	0f b6 c0             	movzbl %al,%eax
  800421097a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421097e:	48 83 c2 06          	add    $0x6,%rdx
  8004210982:	0f b6 12             	movzbl (%rdx),%edx
  8004210985:	0f b6 d2             	movzbl %dl,%edx
  8004210988:	48 c1 e2 08          	shl    $0x8,%rdx
  800421098c:	48 09 d0             	or     %rdx,%rax
  800421098f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210993:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210997:	48 83 c0 05          	add    $0x5,%rax
  800421099b:	0f b6 00             	movzbl (%rax),%eax
  800421099e:	0f b6 c0             	movzbl %al,%eax
  80042109a1:	48 c1 e0 10          	shl    $0x10,%rax
  80042109a5:	48 89 c2             	mov    %rax,%rdx
  80042109a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109ac:	48 83 c0 04          	add    $0x4,%rax
  80042109b0:	0f b6 00             	movzbl (%rax),%eax
  80042109b3:	0f b6 c0             	movzbl %al,%eax
  80042109b6:	48 c1 e0 18          	shl    $0x18,%rax
  80042109ba:	48 09 d0             	or     %rdx,%rax
  80042109bd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042109c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109c5:	48 83 c0 03          	add    $0x3,%rax
  80042109c9:	0f b6 00             	movzbl (%rax),%eax
  80042109cc:	0f b6 c0             	movzbl %al,%eax
  80042109cf:	48 c1 e0 20          	shl    $0x20,%rax
  80042109d3:	48 89 c2             	mov    %rax,%rdx
  80042109d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109da:	48 83 c0 02          	add    $0x2,%rax
  80042109de:	0f b6 00             	movzbl (%rax),%eax
  80042109e1:	0f b6 c0             	movzbl %al,%eax
  80042109e4:	48 c1 e0 28          	shl    $0x28,%rax
  80042109e8:	48 09 d0             	or     %rdx,%rax
  80042109eb:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042109ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109f3:	48 83 c0 01          	add    $0x1,%rax
  80042109f7:	0f b6 00             	movzbl (%rax),%eax
  80042109fa:	0f b6 c0             	movzbl %al,%eax
  80042109fd:	48 c1 e0 30          	shl    $0x30,%rax
  8004210a01:	48 89 c2             	mov    %rax,%rdx
  8004210a04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a08:	0f b6 00             	movzbl (%rax),%eax
  8004210a0b:	0f b6 c0             	movzbl %al,%eax
  8004210a0e:	48 c1 e0 38          	shl    $0x38,%rax
  8004210a12:	48 09 d0             	or     %rdx,%rax
  8004210a15:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210a19:	eb 07                	jmp    8004210a22 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004210a1b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a20:	eb 1a                	jmp    8004210a3c <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004210a22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a26:	48 8b 10             	mov    (%rax),%rdx
  8004210a29:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210a2c:	48 98                	cltq   
  8004210a2e:	48 01 c2             	add    %rax,%rdx
  8004210a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a35:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210a38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210a3c:	c9                   	leaveq 
  8004210a3d:	c3                   	retq   

0000008004210a3e <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210a3e:	55                   	push   %rbp
  8004210a3f:	48 89 e5             	mov    %rsp,%rbp
  8004210a42:	48 83 ec 30          	sub    $0x30,%rsp
  8004210a46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210a4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004210a4e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210a55:	00 
	uint8_t b;
	int shift = 0;
  8004210a56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210a5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a61:	48 8b 10             	mov    (%rax),%rdx
  8004210a64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a68:	48 01 d0             	add    %rdx,%rax
  8004210a6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210a6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a73:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210a77:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210a7b:	0f b6 00             	movzbl (%rax),%eax
  8004210a7e:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210a81:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210a85:	83 e0 7f             	and    $0x7f,%eax
  8004210a88:	89 c2                	mov    %eax,%edx
  8004210a8a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a8d:	89 c1                	mov    %eax,%ecx
  8004210a8f:	d3 e2                	shl    %cl,%edx
  8004210a91:	89 d0                	mov    %edx,%eax
  8004210a93:	48 98                	cltq   
  8004210a95:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210a99:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a9d:	48 8b 00             	mov    (%rax),%rax
  8004210aa0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210aa4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210aa8:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210aab:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210aaf:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ab3:	84 c0                	test   %al,%al
  8004210ab5:	78 b8                	js     8004210a6f <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004210ab7:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210abb:	7f 1f                	jg     8004210adc <_dwarf_read_sleb128+0x9e>
  8004210abd:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ac1:	83 e0 40             	and    $0x40,%eax
  8004210ac4:	85 c0                	test   %eax,%eax
  8004210ac6:	74 14                	je     8004210adc <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004210ac8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210acb:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210ad0:	89 c1                	mov    %eax,%ecx
  8004210ad2:	d3 e2                	shl    %cl,%edx
  8004210ad4:	89 d0                	mov    %edx,%eax
  8004210ad6:	48 98                	cltq   
  8004210ad8:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004210adc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210ae0:	c9                   	leaveq 
  8004210ae1:	c3                   	retq   

0000008004210ae2 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210ae2:	55                   	push   %rbp
  8004210ae3:	48 89 e5             	mov    %rsp,%rbp
  8004210ae6:	48 83 ec 30          	sub    $0x30,%rsp
  8004210aea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210aee:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004210af2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210af9:	00 
	uint8_t b;
	int shift = 0;
  8004210afa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210b01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b05:	48 8b 10             	mov    (%rax),%rdx
  8004210b08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b0c:	48 01 d0             	add    %rdx,%rax
  8004210b0f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210b13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b17:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b1b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b1f:	0f b6 00             	movzbl (%rax),%eax
  8004210b22:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210b25:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b29:	83 e0 7f             	and    $0x7f,%eax
  8004210b2c:	89 c2                	mov    %eax,%edx
  8004210b2e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210b31:	89 c1                	mov    %eax,%ecx
  8004210b33:	d3 e2                	shl    %cl,%edx
  8004210b35:	89 d0                	mov    %edx,%eax
  8004210b37:	48 98                	cltq   
  8004210b39:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b41:	48 8b 00             	mov    (%rax),%rax
  8004210b44:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b4c:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210b4f:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210b53:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b57:	84 c0                	test   %al,%al
  8004210b59:	78 b8                	js     8004210b13 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004210b5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210b5f:	c9                   	leaveq 
  8004210b60:	c3                   	retq   

0000008004210b61 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004210b61:	55                   	push   %rbp
  8004210b62:	48 89 e5             	mov    %rsp,%rbp
  8004210b65:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b69:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004210b6d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210b74:	00 
	uint8_t b;
	int shift = 0;
  8004210b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210b7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b80:	48 8b 00             	mov    (%rax),%rax
  8004210b83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b8b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b8f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b93:	0f b6 00             	movzbl (%rax),%eax
  8004210b96:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210b99:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b9d:	83 e0 7f             	and    $0x7f,%eax
  8004210ba0:	89 c2                	mov    %eax,%edx
  8004210ba2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ba5:	89 c1                	mov    %eax,%ecx
  8004210ba7:	d3 e2                	shl    %cl,%edx
  8004210ba9:	89 d0                	mov    %edx,%eax
  8004210bab:	48 98                	cltq   
  8004210bad:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210bb1:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210bb5:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210bb9:	84 c0                	test   %al,%al
  8004210bbb:	78 ca                	js     8004210b87 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004210bbd:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210bc1:	7f 1f                	jg     8004210be2 <_dwarf_decode_sleb128+0x81>
  8004210bc3:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210bc7:	83 e0 40             	and    $0x40,%eax
  8004210bca:	85 c0                	test   %eax,%eax
  8004210bcc:	74 14                	je     8004210be2 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004210bce:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bd1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210bd6:	89 c1                	mov    %eax,%ecx
  8004210bd8:	d3 e2                	shl    %cl,%edx
  8004210bda:	89 d0                	mov    %edx,%eax
  8004210bdc:	48 98                	cltq   
  8004210bde:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004210be2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210be6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210bea:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210bed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210bf1:	c9                   	leaveq 
  8004210bf2:	c3                   	retq   

0000008004210bf3 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004210bf3:	55                   	push   %rbp
  8004210bf4:	48 89 e5             	mov    %rsp,%rbp
  8004210bf7:	48 83 ec 28          	sub    $0x28,%rsp
  8004210bfb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004210bff:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210c06:	00 
	uint8_t b;
	int shift = 0;
  8004210c07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210c0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c12:	48 8b 00             	mov    (%rax),%rax
  8004210c15:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210c19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c1d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c21:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210c25:	0f b6 00             	movzbl (%rax),%eax
  8004210c28:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210c2b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c2f:	83 e0 7f             	and    $0x7f,%eax
  8004210c32:	89 c2                	mov    %eax,%edx
  8004210c34:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c37:	89 c1                	mov    %eax,%ecx
  8004210c39:	d3 e2                	shl    %cl,%edx
  8004210c3b:	89 d0                	mov    %edx,%eax
  8004210c3d:	48 98                	cltq   
  8004210c3f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210c43:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210c47:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c4b:	84 c0                	test   %al,%al
  8004210c4d:	78 ca                	js     8004210c19 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004210c4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210c57:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210c5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210c5e:	c9                   	leaveq 
  8004210c5f:	c3                   	retq   

0000008004210c60 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004210c60:	55                   	push   %rbp
  8004210c61:	48 89 e5             	mov    %rsp,%rbp
  8004210c64:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c70:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004210c74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c78:	48 8b 10             	mov    (%rax),%rdx
  8004210c7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c7f:	48 01 d0             	add    %rdx,%rax
  8004210c82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210c86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004210c8e:	eb 17                	jmp    8004210ca7 <_dwarf_read_string+0x47>
		src++;
  8004210c90:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004210c95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c99:	48 8b 00             	mov    (%rax),%rax
  8004210c9c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210ca0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca4:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004210ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cab:	0f b6 00             	movzbl (%rax),%eax
  8004210cae:	84 c0                	test   %al,%al
  8004210cb0:	74 0d                	je     8004210cbf <_dwarf_read_string+0x5f>
  8004210cb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cb6:	48 8b 00             	mov    (%rax),%rax
  8004210cb9:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210cbd:	72 d1                	jb     8004210c90 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004210cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cc3:	0f b6 00             	movzbl (%rax),%eax
  8004210cc6:	84 c0                	test   %al,%al
  8004210cc8:	75 1f                	jne    8004210ce9 <_dwarf_read_string+0x89>
  8004210cca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cce:	48 8b 00             	mov    (%rax),%rax
  8004210cd1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210cd5:	73 12                	jae    8004210ce9 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004210cd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cdb:	48 8b 00             	mov    (%rax),%rax
  8004210cde:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210ce2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ce6:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210ce9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210ced:	c9                   	leaveq 
  8004210cee:	c3                   	retq   

0000008004210cef <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004210cef:	55                   	push   %rbp
  8004210cf0:	48 89 e5             	mov    %rsp,%rbp
  8004210cf3:	48 83 ec 28          	sub    $0x28,%rsp
  8004210cf7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210cfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210cff:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004210d03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d07:	48 8b 10             	mov    (%rax),%rdx
  8004210d0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d0e:	48 01 d0             	add    %rdx,%rax
  8004210d11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210d15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d19:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004210d1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d21:	48 8b 10             	mov    (%rax),%rdx
  8004210d24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d28:	48 01 c2             	add    %rax,%rdx
  8004210d2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d2f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210d32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210d36:	c9                   	leaveq 
  8004210d37:	c3                   	retq   

0000008004210d38 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004210d38:	55                   	push   %rbp
  8004210d39:	48 89 e5             	mov    %rsp,%rbp
  8004210d3c:	48 83 ec 20          	sub    $0x20,%rsp
  8004210d40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004210d44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210d4c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210d51:	75 35                	jne    8004210d88 <_dwarf_elf_get_byte_order+0x50>
  8004210d53:	48 b9 e0 ac 21 04 80 	movabs $0x800421ace0,%rcx
  8004210d5a:	00 00 00 
  8004210d5d:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004210d64:	00 00 00 
  8004210d67:	be 29 01 00 00       	mov    $0x129,%esi
  8004210d6c:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004210d73:	00 00 00 
  8004210d76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d7b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210d82:	00 00 00 
  8004210d85:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004210d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d8c:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004210d90:	0f b6 c0             	movzbl %al,%eax
  8004210d93:	83 f8 02             	cmp    $0x2,%eax
  8004210d96:	75 07                	jne    8004210d9f <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004210d98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d9d:	eb 05                	jmp    8004210da4 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004210d9f:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004210da4:	c9                   	leaveq 
  8004210da5:	c3                   	retq   

0000008004210da6 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004210da6:	55                   	push   %rbp
  8004210da7:	48 89 e5             	mov    %rsp,%rbp
  8004210daa:	48 83 ec 20          	sub    $0x20,%rsp
  8004210dae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004210db2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210db6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210dba:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210dbf:	75 35                	jne    8004210df6 <_dwarf_elf_get_pointer_size+0x50>
  8004210dc1:	48 b9 e0 ac 21 04 80 	movabs $0x800421ace0,%rcx
  8004210dc8:	00 00 00 
  8004210dcb:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004210dd2:	00 00 00 
  8004210dd5:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004210dda:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004210de1:	00 00 00 
  8004210de4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210de9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210df0:	00 00 00 
  8004210df3:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004210df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dfa:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004210dfe:	3c 01                	cmp    $0x1,%al
  8004210e00:	75 07                	jne    8004210e09 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004210e02:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210e07:	eb 05                	jmp    8004210e0e <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004210e09:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004210e0e:	c9                   	leaveq 
  8004210e0f:	c3                   	retq   

0000008004210e10 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004210e10:	55                   	push   %rbp
  8004210e11:	48 89 e5             	mov    %rsp,%rbp
  8004210e14:	53                   	push   %rbx
  8004210e15:	48 83 ec 18          	sub    $0x18,%rsp
  8004210e19:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e1d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004210e21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e25:	ba 60 00 00 00       	mov    $0x60,%edx
  8004210e2a:	be 00 00 00 00       	mov    $0x0,%esi
  8004210e2f:	48 89 c7             	mov    %rax,%rdi
  8004210e32:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004210e39:	00 00 00 
  8004210e3c:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004210e3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e42:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004210e49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e4d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004210e54:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004210e55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e59:	48 89 c7             	mov    %rax,%rdi
  8004210e5c:	48 b8 a6 0d 21 04 80 	movabs $0x8004210da6,%rax
  8004210e63:	00 00 00 
  8004210e66:	ff d0                	callq  *%rax
  8004210e68:	0f b6 d0             	movzbl %al,%edx
  8004210e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e6f:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004210e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e76:	48 89 c7             	mov    %rax,%rdi
  8004210e79:	48 b8 38 0d 21 04 80 	movabs $0x8004210d38,%rax
  8004210e80:	00 00 00 
  8004210e83:	ff d0                	callq  *%rax
  8004210e85:	85 c0                	test   %eax,%eax
  8004210e87:	75 26                	jne    8004210eaf <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004210e89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e8d:	48 b9 dd 06 21 04 80 	movabs $0x80042106dd,%rcx
  8004210e94:	00 00 00 
  8004210e97:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004210e9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e9f:	48 bb 8f 08 21 04 80 	movabs $0x800421088f,%rbx
  8004210ea6:	00 00 00 
  8004210ea9:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004210ead:	eb 24                	jmp    8004210ed3 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004210eaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210eb3:	48 b9 90 04 21 04 80 	movabs $0x8004210490,%rcx
  8004210eba:	00 00 00 
  8004210ebd:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004210ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ec5:	48 be bc 05 21 04 80 	movabs $0x80042105bc,%rsi
  8004210ecc:	00 00 00 
  8004210ecf:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004210ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ed7:	48 89 c7             	mov    %rax,%rdi
  8004210eda:	48 b8 dd 23 21 04 80 	movabs $0x80042123dd,%rax
  8004210ee1:	00 00 00 
  8004210ee4:	ff d0                	callq  *%rax
	return 0;
  8004210ee6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210eeb:	48 83 c4 18          	add    $0x18,%rsp
  8004210eef:	5b                   	pop    %rbx
  8004210ef0:	5d                   	pop    %rbp
  8004210ef1:	c3                   	retq   

0000008004210ef2 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004210ef2:	55                   	push   %rbp
  8004210ef3:	48 89 e5             	mov    %rsp,%rbp
  8004210ef6:	48 83 ec 20          	sub    $0x20,%rsp
  8004210efa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210efe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004210f02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f06:	48 8b 10             	mov    (%rax),%rdx
  8004210f09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f0d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004210f11:	48 39 c2             	cmp    %rax,%rdx
  8004210f14:	76 0a                	jbe    8004210f20 <_get_next_cu+0x2e>
		return -1;
  8004210f16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210f1b:	e9 6b 01 00 00       	jmpq   800421108b <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004210f20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f24:	48 8b 00             	mov    (%rax),%rax
  8004210f27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004210f2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210f2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f33:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004210f37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f3b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210f3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f43:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210f47:	48 89 d1             	mov    %rdx,%rcx
  8004210f4a:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210f4e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004210f53:	48 89 cf             	mov    %rcx,%rdi
  8004210f56:	ff d0                	callq  *%rax
  8004210f58:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004210f5b:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004210f5f:	75 2a                	jne    8004210f8b <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004210f61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f65:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210f69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f6d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210f71:	48 89 d1             	mov    %rdx,%rcx
  8004210f74:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210f78:	ba 08 00 00 00       	mov    $0x8,%edx
  8004210f7d:	48 89 cf             	mov    %rcx,%rdi
  8004210f80:	ff d0                	callq  *%rax
  8004210f82:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004210f85:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004210f89:	eb 04                	jmp    8004210f8f <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004210f8b:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004210f8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f93:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004210f97:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004210f9a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210f9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fa1:	48 01 c2             	add    %rax,%rdx
  8004210fa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fa8:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004210fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210faf:	48 8b 10             	mov    (%rax),%rdx
  8004210fb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fb6:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004210fba:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210fbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fc1:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004210fc4:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004210fc8:	75 07                	jne    8004210fd1 <_get_next_cu+0xdf>
  8004210fca:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210fcf:	eb 05                	jmp    8004210fd6 <_get_next_cu+0xe4>
  8004210fd1:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004210fd6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210fda:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004210fdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fe1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210fe5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210fe9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210fed:	48 89 d1             	mov    %rdx,%rcx
  8004210ff0:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210ff4:	ba 02 00 00 00       	mov    $0x2,%edx
  8004210ff9:	48 89 cf             	mov    %rcx,%rdi
  8004210ffc:	ff d0                	callq  *%rax
  8004210ffe:	89 c2                	mov    %eax,%edx
  8004211000:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211004:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211008:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421100c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211010:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211014:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211018:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  800421101c:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211020:	48 89 cf             	mov    %rcx,%rdi
  8004211023:	ff d0                	callq  *%rax
  8004211025:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211029:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  800421102d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211031:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211035:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211039:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800421103d:	48 89 d1             	mov    %rdx,%rcx
  8004211040:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211044:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211049:	48 89 cf             	mov    %rcx,%rdi
  800421104c:	ff d0                	callq  *%rax
  800421104e:	89 c2                	mov    %eax,%edx
  8004211050:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211054:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211057:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421105b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421105f:	66 83 f8 01          	cmp    $0x1,%ax
  8004211063:	76 0e                	jbe    8004211073 <_get_next_cu+0x181>
  8004211065:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211069:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421106d:	66 83 f8 04          	cmp    $0x4,%ax
  8004211071:	76 07                	jbe    800421107a <_get_next_cu+0x188>
		return -1;
  8004211073:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211078:	eb 11                	jmp    800421108b <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  800421107a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421107e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211082:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211086:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421108b:	c9                   	leaveq 
  800421108c:	c3                   	retq   

000000800421108d <print_cu>:

void print_cu(Dwarf_CU cu)
{
  800421108d:	55                   	push   %rbp
  800421108e:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211091:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211095:	0f b6 c8             	movzbl %al,%ecx
  8004211098:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  800421109c:	0f b7 d0             	movzwl %ax,%edx
  800421109f:	48 8b 45 10          	mov    0x10(%rbp),%rax
  80042110a3:	48 89 c6             	mov    %rax,%rsi
  80042110a6:	48 bf 12 ad 21 04 80 	movabs $0x800421ad12,%rdi
  80042110ad:	00 00 00 
  80042110b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042110b5:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  80042110bc:	00 00 00 
  80042110bf:	41 ff d0             	callq  *%r8
}
  80042110c2:	5d                   	pop    %rbp
  80042110c3:	c3                   	retq   

00000080042110c4 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  80042110c4:	55                   	push   %rbp
  80042110c5:	48 89 e5             	mov    %rsp,%rbp
  80042110c8:	48 83 ec 60          	sub    $0x60,%rsp
  80042110cc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  80042110d0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  80042110d4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042110d8:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  80042110dc:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042110e1:	75 35                	jne    8004211118 <_dwarf_abbrev_parse+0x54>
  80042110e3:	48 b9 21 ad 21 04 80 	movabs $0x800421ad21,%rcx
  80042110ea:	00 00 00 
  80042110ed:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  80042110f4:	00 00 00 
  80042110f7:	be a4 01 00 00       	mov    $0x1a4,%esi
  80042110fc:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211103:	00 00 00 
  8004211106:	b8 00 00 00 00       	mov    $0x0,%eax
  800421110b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211112:	00 00 00 
  8004211115:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211118:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  800421111d:	75 35                	jne    8004211154 <_dwarf_abbrev_parse+0x90>
  800421111f:	48 b9 2d ad 21 04 80 	movabs $0x800421ad2d,%rcx
  8004211126:	00 00 00 
  8004211129:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211130:	00 00 00 
  8004211133:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211138:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  800421113f:	00 00 00 
  8004211142:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211147:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421114e:	00 00 00 
  8004211151:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211154:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211158:	48 8b 10             	mov    (%rax),%rdx
  800421115b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421115f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211163:	48 39 c2             	cmp    %rax,%rdx
  8004211166:	72 0a                	jb     8004211172 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211168:	b8 04 00 00 00       	mov    $0x4,%eax
  800421116d:	e9 d3 01 00 00       	jmpq   8004211345 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211172:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211176:	48 8b 00             	mov    (%rax),%rax
  8004211179:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  800421117d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211181:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211185:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421118d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211191:	48 89 d6             	mov    %rdx,%rsi
  8004211194:	48 89 c7             	mov    %rax,%rdi
  8004211197:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  800421119e:	00 00 00 
  80042111a1:	ff d0                	callq  *%rax
  80042111a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  80042111a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042111ac:	75 15                	jne    80042111c3 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  80042111ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111b2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  80042111b9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042111be:	e9 82 01 00 00       	jmpq   8004211345 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042111c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111c7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042111cb:	48 89 d6             	mov    %rdx,%rsi
  80042111ce:	48 89 c7             	mov    %rax,%rdi
  80042111d1:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  80042111d8:	00 00 00 
  80042111db:	ff d0                	callq  *%rax
  80042111dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  80042111e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042111e5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042111e9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042111ed:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042111f1:	ba 01 00 00 00       	mov    $0x1,%edx
  80042111f6:	48 89 cf             	mov    %rcx,%rdi
  80042111f9:	ff d0                	callq  *%rax
  80042111fb:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  80042111fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211202:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211206:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211209:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421120d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211211:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211215:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211219:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  800421121d:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211220:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211224:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211228:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  800421122c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211230:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211237:	00 
	abp->ab_atnum    = 0;
  8004211238:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421123c:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211243:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211244:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211248:	48 8b 00             	mov    (%rax),%rax
  800421124b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421124f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211253:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211257:	48 89 d6             	mov    %rdx,%rsi
  800421125a:	48 89 c7             	mov    %rax,%rdi
  800421125d:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004211264:	00 00 00 
  8004211267:	ff d0                	callq  *%rax
  8004211269:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421126d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211271:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211275:	48 89 d6             	mov    %rdx,%rsi
  8004211278:	48 89 c7             	mov    %rax,%rdi
  800421127b:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004211282:	00 00 00 
  8004211285:	ff d0                	callq  *%rax
  8004211287:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800421128b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211290:	0f 84 89 00 00 00    	je     800421131f <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211296:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421129a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421129e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042112a2:	48 89 d0             	mov    %rdx,%rax
  80042112a5:	48 01 c0             	add    %rax,%rax
  80042112a8:	48 01 d0             	add    %rdx,%rax
  80042112ab:	48 c1 e0 03          	shl    $0x3,%rax
  80042112af:	48 01 c8             	add    %rcx,%rax
  80042112b2:	48 8d 50 30          	lea    0x30(%rax),%rdx
  80042112b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042112ba:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  80042112bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112c1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042112c5:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042112c9:	48 89 d0             	mov    %rdx,%rax
  80042112cc:	48 01 c0             	add    %rax,%rax
  80042112cf:	48 01 d0             	add    %rdx,%rax
  80042112d2:	48 c1 e0 03          	shl    $0x3,%rax
  80042112d6:	48 01 c8             	add    %rcx,%rax
  80042112d9:	48 8d 50 38          	lea    0x38(%rax),%rdx
  80042112dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042112e1:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  80042112e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112e8:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042112ec:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042112f0:	48 89 d0             	mov    %rdx,%rax
  80042112f3:	48 01 c0             	add    %rax,%rax
  80042112f6:	48 01 d0             	add    %rdx,%rax
  80042112f9:	48 c1 e0 03          	shl    $0x3,%rax
  80042112fd:	48 01 c8             	add    %rcx,%rax
  8004211300:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211304:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211308:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  800421130b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421130f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211313:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211317:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421131b:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  800421131f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211324:	0f 85 1a ff ff ff    	jne    8004211244 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  800421132a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421132e:	48 8b 00             	mov    (%rax),%rax
  8004211331:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211335:	48 89 c2             	mov    %rax,%rdx
  8004211338:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421133c:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211340:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211345:	c9                   	leaveq 
  8004211346:	c3                   	retq   

0000008004211347 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211347:	55                   	push   %rbp
  8004211348:	48 89 e5             	mov    %rsp,%rbp
  800421134b:	48 83 ec 70          	sub    $0x70,%rsp
  800421134f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211353:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211357:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  800421135b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211360:	75 0a                	jne    800421136c <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211362:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211367:	e9 0a 01 00 00       	jmpq   8004211476 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  800421136c:	48 bf 38 ad 21 04 80 	movabs $0x800421ad38,%rdi
  8004211373:	00 00 00 
  8004211376:	48 b8 a7 56 21 04 80 	movabs $0x80042156a7,%rax
  800421137d:	00 00 00 
  8004211380:	ff d0                	callq  *%rax
  8004211382:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211386:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421138b:	75 35                	jne    80042113c2 <_dwarf_abbrev_find+0x7b>
  800421138d:	48 b9 2d ad 21 04 80 	movabs $0x800421ad2d,%rcx
  8004211394:	00 00 00 
  8004211397:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  800421139e:	00 00 00 
  80042113a1:	be e5 01 00 00       	mov    $0x1e5,%esi
  80042113a6:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  80042113ad:	00 00 00 
  80042113b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042113b5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042113bc:	00 00 00 
  80042113bf:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  80042113c2:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042113c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  80042113ca:	e9 8d 00 00 00       	jmpq   800421145c <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  80042113cf:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  80042113d3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042113d7:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  80042113db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042113df:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042113e3:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042113e7:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  80042113eb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042113f0:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  80042113f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042113f9:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  80042113fd:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211402:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211406:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800421140b:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  800421140f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211414:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211418:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  800421141d:	48 89 c7             	mov    %rax,%rdi
  8004211420:	48 b8 c4 10 21 04 80 	movabs $0x80042110c4,%rax
  8004211427:	00 00 00 
  800421142a:	ff d0                	callq  *%rax
  800421142c:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  800421142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004211433:	74 05                	je     800421143a <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004211435:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211438:	eb 3c                	jmp    8004211476 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  800421143a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421143e:	48 8b 00             	mov    (%rax),%rax
  8004211441:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004211445:	75 07                	jne    800421144e <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004211447:	b8 00 00 00 00       	mov    $0x0,%eax
  800421144c:	eb 28                	jmp    8004211476 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  800421144e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211452:	48 8b 00             	mov    (%rax),%rax
  8004211455:	48 85 c0             	test   %rax,%rax
  8004211458:	75 02                	jne    800421145c <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  800421145a:	eb 15                	jmp    8004211471 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  800421145c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211460:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211464:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211468:	48 39 c2             	cmp    %rax,%rdx
  800421146b:	0f 87 5e ff ff ff    	ja     80042113cf <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004211471:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211476:	c9                   	leaveq 
  8004211477:	c3                   	retq   

0000008004211478 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004211478:	55                   	push   %rbp
  8004211479:	48 89 e5             	mov    %rsp,%rbp
  800421147c:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004211483:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421148a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004211491:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004211498:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800421149f:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  80042114a6:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  80042114ad:	48 bf 46 ad 21 04 80 	movabs $0x800421ad46,%rdi
  80042114b4:	00 00 00 
  80042114b7:	48 b8 a7 56 21 04 80 	movabs $0x80042156a7,%rax
  80042114be:	00 00 00 
  80042114c1:	ff d0                	callq  *%rax
  80042114c3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  80042114c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114cb:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042114cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  80042114d3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042114da:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042114de:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  80042114e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  80042114e8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042114ef:	ba 60 00 00 00       	mov    $0x60,%edx
  80042114f4:	be 00 00 00 00       	mov    $0x0,%esi
  80042114f9:	48 89 c7             	mov    %rax,%rdi
  80042114fc:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004211503:	00 00 00 
  8004211506:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004211508:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421150f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  8004211516:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421151d:	48 8b 00             	mov    (%rax),%rax
  8004211520:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  8004211524:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421152b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421152f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  8004211533:	8b 45 10             	mov    0x10(%rbp),%eax
  8004211536:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004211539:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004211540:	00 

	switch (form) {
  8004211541:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004211548:	20 
  8004211549:	0f 87 82 04 00 00    	ja     80042119d1 <_dwarf_attr_init+0x559>
  800421154f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004211556:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421155d:	00 
  800421155e:	48 b8 70 ad 21 04 80 	movabs $0x800421ad70,%rax
  8004211565:	00 00 00 
  8004211568:	48 01 d0             	add    %rdx,%rax
  800421156b:	48 8b 00             	mov    (%rax),%rax
  800421156e:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211570:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211577:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421157b:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211582:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211586:	0f b6 d2             	movzbl %dl,%edx
  8004211589:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211590:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211594:	48 89 cf             	mov    %rcx,%rdi
  8004211597:	ff d0                	callq  *%rax
  8004211599:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421159d:	e9 37 04 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042115a2:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042115a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115ad:	48 89 d6             	mov    %rdx,%rsi
  80042115b0:	48 89 c7             	mov    %rax,%rdi
  80042115b3:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  80042115ba:	00 00 00 
  80042115bd:	ff d0                	callq  *%rax
  80042115bf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042115c3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042115c7:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042115ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115d2:	48 89 ce             	mov    %rcx,%rsi
  80042115d5:	48 89 c7             	mov    %rax,%rdi
  80042115d8:	48 b8 ef 0c 21 04 80 	movabs $0x8004210cef,%rax
  80042115df:	00 00 00 
  80042115e2:	ff d0                	callq  *%rax
  80042115e4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042115e8:	e9 ec 03 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042115ed:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042115f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042115f8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042115ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211603:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211608:	48 89 cf             	mov    %rcx,%rdi
  800421160b:	ff d0                	callq  *%rax
  800421160d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211611:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211615:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421161c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211620:	48 89 ce             	mov    %rcx,%rsi
  8004211623:	48 89 c7             	mov    %rax,%rdi
  8004211626:	48 b8 ef 0c 21 04 80 	movabs $0x8004210cef,%rax
  800421162d:	00 00 00 
  8004211630:	ff d0                	callq  *%rax
  8004211632:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211636:	e9 9e 03 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800421163b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211642:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211646:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421164d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211651:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211656:	48 89 cf             	mov    %rcx,%rdi
  8004211659:	ff d0                	callq  *%rax
  800421165b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421165f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211663:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421166a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421166e:	48 89 ce             	mov    %rcx,%rsi
  8004211671:	48 89 c7             	mov    %rax,%rdi
  8004211674:	48 b8 ef 0c 21 04 80 	movabs $0x8004210cef,%rax
  800421167b:	00 00 00 
  800421167e:	ff d0                	callq  *%rax
  8004211680:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211684:	e9 50 03 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211689:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211690:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211694:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421169b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421169f:	ba 04 00 00 00       	mov    $0x4,%edx
  80042116a4:	48 89 cf             	mov    %rcx,%rdi
  80042116a7:	ff d0                	callq  *%rax
  80042116a9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042116ad:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042116b1:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042116b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116bc:	48 89 ce             	mov    %rcx,%rsi
  80042116bf:	48 89 c7             	mov    %rax,%rdi
  80042116c2:	48 b8 ef 0c 21 04 80 	movabs $0x8004210cef,%rax
  80042116c9:	00 00 00 
  80042116cc:	ff d0                	callq  *%rax
  80042116ce:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042116d2:	e9 02 03 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042116d7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116de:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116e2:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042116e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116ed:	ba 01 00 00 00       	mov    $0x1,%edx
  80042116f2:	48 89 cf             	mov    %rcx,%rdi
  80042116f5:	ff d0                	callq  *%rax
  80042116f7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042116fb:	e9 d9 02 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004211700:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211707:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421170b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211712:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211716:	ba 02 00 00 00       	mov    $0x2,%edx
  800421171b:	48 89 cf             	mov    %rcx,%rdi
  800421171e:	ff d0                	callq  *%rax
  8004211720:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211724:	e9 b0 02 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211729:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211730:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211734:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421173b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421173f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211744:	48 89 cf             	mov    %rcx,%rdi
  8004211747:	ff d0                	callq  *%rax
  8004211749:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421174d:	e9 87 02 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  8004211752:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211759:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421175d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211764:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211768:	ba 08 00 00 00       	mov    $0x8,%edx
  800421176d:	48 89 cf             	mov    %rcx,%rdi
  8004211770:	ff d0                	callq  *%rax
  8004211772:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211776:	e9 5e 02 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  800421177b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211786:	48 89 d6             	mov    %rdx,%rsi
  8004211789:	48 89 c7             	mov    %rax,%rdi
  800421178c:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004211793:	00 00 00 
  8004211796:	ff d0                	callq  *%rax
  8004211798:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800421179f:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  80042117a6:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  80042117ad:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  80042117b4:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042117bb:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042117c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117c9:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  80042117d0:	4d 89 c1             	mov    %r8,%r9
  80042117d3:	49 89 f8             	mov    %rdi,%r8
  80042117d6:	48 89 c7             	mov    %rax,%rdi
  80042117d9:	48 b8 78 14 21 04 80 	movabs $0x8004211478,%rax
  80042117e0:	00 00 00 
  80042117e3:	ff d0                	callq  *%rax
  80042117e5:	e9 1d 03 00 00       	jmpq   8004211b07 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  80042117ea:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042117f1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042117f5:	66 83 f8 02          	cmp    $0x2,%ax
  80042117f9:	75 2f                	jne    800421182a <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042117fb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211802:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211806:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421180d:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211811:	0f b6 d2             	movzbl %dl,%edx
  8004211814:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421181b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421181f:	48 89 cf             	mov    %rcx,%rdi
  8004211822:	ff d0                	callq  *%rax
  8004211824:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004211828:	eb 39                	jmp    8004211863 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  800421182a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211831:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211835:	66 83 f8 03          	cmp    $0x3,%ax
  8004211839:	75 28                	jne    8004211863 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421183b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211842:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211846:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421184a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211851:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211855:	48 89 cf             	mov    %rcx,%rdi
  8004211858:	ff d0                	callq  *%rax
  800421185a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421185e:	e9 76 01 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
  8004211863:	e9 71 01 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211868:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421186f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211873:	48 89 d6             	mov    %rdx,%rsi
  8004211876:	48 89 c7             	mov    %rax,%rdi
  8004211879:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004211880:	00 00 00 
  8004211883:	ff d0                	callq  *%rax
  8004211885:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211889:	e9 4b 01 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  800421188e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211895:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211899:	48 89 d6             	mov    %rdx,%rsi
  800421189c:	48 89 c7             	mov    %rax,%rdi
  800421189f:	48 b8 3e 0a 21 04 80 	movabs $0x8004210a3e,%rax
  80042118a6:	00 00 00 
  80042118a9:	ff d0                	callq  *%rax
  80042118ab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118af:	e9 25 01 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042118b4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042118bb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042118bf:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042118c3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042118ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042118ce:	48 89 cf             	mov    %rcx,%rdi
  80042118d1:	ff d0                	callq  *%rax
  80042118d3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118d7:	e9 fd 00 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  80042118dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118e0:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042118e4:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042118eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118ef:	48 89 ce             	mov    %rcx,%rsi
  80042118f2:	48 89 c7             	mov    %rax,%rdi
  80042118f5:	48 b8 60 0c 21 04 80 	movabs $0x8004210c60,%rax
  80042118fc:	00 00 00 
  80042118ff:	ff d0                	callq  *%rax
  8004211901:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211905:	e9 cf 00 00 00       	jmpq   80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421190a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211911:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211915:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211919:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211920:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211924:	48 89 cf             	mov    %rcx,%rdi
  8004211927:	ff d0                	callq  *%rax
  8004211929:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  800421192d:	48 bf 52 ad 21 04 80 	movabs $0x800421ad52,%rdi
  8004211934:	00 00 00 
  8004211937:	48 b8 a7 56 21 04 80 	movabs $0x80042156a7,%rax
  800421193e:	00 00 00 
  8004211941:	ff d0                	callq  *%rax
  8004211943:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004211947:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421194c:	75 35                	jne    8004211983 <_dwarf_attr_init+0x50b>
  800421194e:	48 b9 5d ad 21 04 80 	movabs $0x800421ad5d,%rcx
  8004211955:	00 00 00 
  8004211958:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  800421195f:	00 00 00 
  8004211962:	be 51 02 00 00       	mov    $0x251,%esi
  8004211967:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  800421196e:	00 00 00 
  8004211971:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211976:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421197d:	00 00 00 
  8004211980:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004211983:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211987:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421198b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421198f:	48 01 d0             	add    %rdx,%rax
  8004211992:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211996:	eb 41                	jmp    80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004211998:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  800421199f:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  80042119a0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042119a4:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042119ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119af:	48 89 ce             	mov    %rcx,%rsi
  80042119b2:	48 89 c7             	mov    %rax,%rdi
  80042119b5:	48 b8 ef 0c 21 04 80 	movabs $0x8004210cef,%rax
  80042119bc:	00 00 00 
  80042119bf:	ff d0                	callq  *%rax
  80042119c1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042119c5:	eb 12                	jmp    80042119d9 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  80042119c7:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  80042119ce:	00 
		break;
  80042119cf:	eb 08                	jmp    80042119d9 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  80042119d1:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  80042119d8:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  80042119d9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042119dd:	0f 85 21 01 00 00    	jne    8004211b04 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  80042119e3:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  80042119ea:	09 
  80042119eb:	74 1e                	je     8004211a0b <_dwarf_attr_init+0x593>
  80042119ed:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  80042119f4:	0a 
  80042119f5:	74 14                	je     8004211a0b <_dwarf_attr_init+0x593>
  80042119f7:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  80042119fe:	03 
  80042119ff:	74 0a                	je     8004211a0b <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004211a01:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004211a08:	04 
  8004211a09:	75 10                	jne    8004211a1b <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004211a0b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211a0f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004211a13:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211a17:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004211a1b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004211a1f:	48 83 f8 03          	cmp    $0x3,%rax
  8004211a23:	75 39                	jne    8004211a5e <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004211a25:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211a29:	48 83 f8 08          	cmp    $0x8,%rax
  8004211a2d:	74 1c                	je     8004211a4b <_dwarf_attr_init+0x5d3>
  8004211a2f:	48 83 f8 0e          	cmp    $0xe,%rax
  8004211a33:	74 02                	je     8004211a37 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004211a35:	eb 27                	jmp    8004211a5e <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  8004211a37:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211a3b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211a42:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211a49:	eb 13                	jmp    8004211a5e <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004211a4b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211a4f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211a56:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211a5d:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004211a5e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211a65:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211a6c:	8d 48 01             	lea    0x1(%rax),%ecx
  8004211a6f:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004211a76:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004211a7c:	0f b6 c0             	movzbl %al,%eax
  8004211a7f:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211a86:	48 63 d0             	movslq %eax,%rdx
  8004211a89:	48 89 d0             	mov    %rdx,%rax
  8004211a8c:	48 01 c0             	add    %rax,%rax
  8004211a8f:	48 01 d0             	add    %rdx,%rax
  8004211a92:	48 c1 e0 05          	shl    $0x5,%rax
  8004211a96:	48 01 c8             	add    %rcx,%rax
  8004211a99:	48 05 70 03 00 00    	add    $0x370,%rax
  8004211a9f:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004211aa6:	48 89 10             	mov    %rdx,(%rax)
  8004211aa9:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004211ab0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004211ab4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004211ab8:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004211abc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004211ac0:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211ac4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004211ac8:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004211acc:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211ad0:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004211ad4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211ad8:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004211adc:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004211ae0:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004211ae4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211ae8:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004211aec:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004211af0:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004211af4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004211af8:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004211afc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211b00:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004211b04:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004211b07:	c9                   	leaveq 
  8004211b08:	c3                   	retq   

0000008004211b09 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004211b09:	55                   	push   %rbp
  8004211b0a:	48 89 e5             	mov    %rsp,%rbp
  8004211b0d:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004211b14:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004211b1b:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004211b22:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004211b29:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004211b2f:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004211b36:	00 
  8004211b37:	75 35                	jne    8004211b6e <dwarf_search_die_within_cu+0x65>
  8004211b39:	48 b9 78 ae 21 04 80 	movabs $0x800421ae78,%rcx
  8004211b40:	00 00 00 
  8004211b43:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211b4a:	00 00 00 
  8004211b4d:	be 86 02 00 00       	mov    $0x286,%esi
  8004211b52:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211b59:	00 00 00 
  8004211b5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b61:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211b68:	00 00 00 
  8004211b6b:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004211b6e:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004211b75:	00 
  8004211b76:	75 35                	jne    8004211bad <dwarf_search_die_within_cu+0xa4>
  8004211b78:	48 b9 7c ae 21 04 80 	movabs $0x800421ae7c,%rcx
  8004211b7f:	00 00 00 
  8004211b82:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211b89:	00 00 00 
  8004211b8c:	be 88 02 00 00       	mov    $0x288,%esi
  8004211b91:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211b98:	00 00 00 
  8004211b9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ba0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211ba7:	00 00 00 
  8004211baa:	41 ff d0             	callq  *%r8

	level = 1;
  8004211bad:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211bb4:	e9 17 02 00 00       	jmpq   8004211dd0 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004211bb9:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211bc0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004211bc4:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211bcb:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211bcf:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004211bd6:	48 89 d6             	mov    %rdx,%rsi
  8004211bd9:	48 89 c7             	mov    %rax,%rdi
  8004211bdc:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004211be3:	00 00 00 
  8004211be6:	ff d0                	callq  *%rax
  8004211be8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004211bec:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211bf1:	75 22                	jne    8004211c15 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004211bf3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211bf7:	74 09                	je     8004211c02 <dwarf_search_die_within_cu+0xf9>
  8004211bf9:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211c00:	75 0a                	jne    8004211c0c <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004211c02:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211c07:	e9 f4 01 00 00       	jmpq   8004211e00 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004211c0c:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004211c10:	e9 bb 01 00 00       	jmpq   8004211dd0 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004211c15:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211c1c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211c20:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211c27:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004211c2b:	48 89 34 24          	mov    %rsi,(%rsp)
  8004211c2f:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004211c33:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004211c38:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004211c3c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004211c41:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004211c45:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004211c4a:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004211c4e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004211c53:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004211c57:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004211c5c:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004211c60:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004211c65:	48 89 ce             	mov    %rcx,%rsi
  8004211c68:	48 89 c7             	mov    %rax,%rdi
  8004211c6b:	48 b8 47 13 21 04 80 	movabs $0x8004211347,%rax
  8004211c72:	00 00 00 
  8004211c75:	ff d0                	callq  *%rax
  8004211c77:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211c7a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211c7e:	74 08                	je     8004211c88 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004211c80:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211c83:	e9 78 01 00 00       	jmpq   8004211e00 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004211c88:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c8f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211c93:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004211c96:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c9d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211ca1:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004211ca5:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211cac:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004211cb0:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211cb7:	b8 66 00 00 00       	mov    $0x66,%eax
  8004211cbc:	48 89 d6             	mov    %rdx,%rsi
  8004211cbf:	48 89 c1             	mov    %rax,%rcx
  8004211cc2:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004211cc5:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211ccc:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004211cd3:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004211cda:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211ce1:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211ce5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004211cec:	e9 8e 00 00 00       	jmpq   8004211d7f <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004211cf1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211cf4:	48 63 d0             	movslq %eax,%rdx
  8004211cf7:	48 89 d0             	mov    %rdx,%rax
  8004211cfa:	48 01 c0             	add    %rax,%rax
  8004211cfd:	48 01 d0             	add    %rdx,%rax
  8004211d00:	48 c1 e0 03          	shl    $0x3,%rax
  8004211d04:	48 01 e8             	add    %rbp,%rax
  8004211d07:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004211d0d:	48 8b 08             	mov    (%rax),%rcx
  8004211d10:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004211d17:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211d1a:	48 63 d0             	movslq %eax,%rdx
  8004211d1d:	48 89 d0             	mov    %rdx,%rax
  8004211d20:	48 01 c0             	add    %rax,%rax
  8004211d23:	48 01 d0             	add    %rdx,%rax
  8004211d26:	48 c1 e0 03          	shl    $0x3,%rax
  8004211d2a:	48 83 c0 30          	add    $0x30,%rax
  8004211d2e:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004211d32:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004211d39:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004211d40:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211d47:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004211d4e:	49 89 c9             	mov    %rcx,%r9
  8004211d51:	49 89 f8             	mov    %rdi,%r8
  8004211d54:	48 89 d1             	mov    %rdx,%rcx
  8004211d57:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004211d5b:	48 89 c7             	mov    %rax,%rdi
  8004211d5e:	48 b8 78 14 21 04 80 	movabs $0x8004211478,%rax
  8004211d65:	00 00 00 
  8004211d68:	ff d0                	callq  *%rax
  8004211d6a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211d6d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211d71:	74 08                	je     8004211d7b <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004211d73:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211d76:	e9 85 00 00 00       	jmpq   8004211e00 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211d7b:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004211d7f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211d82:	48 63 d0             	movslq %eax,%rdx
  8004211d85:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004211d8c:	48 39 c2             	cmp    %rax,%rdx
  8004211d8f:	0f 82 5c ff ff ff    	jb     8004211cf1 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004211d95:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004211d9c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211da3:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004211da7:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211dae:	74 19                	je     8004211dc9 <dwarf_search_die_within_cu+0x2c0>
  8004211db0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211db4:	7e 13                	jle    8004211dc9 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211db6:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004211dbd:	3c 01                	cmp    $0x1,%al
  8004211dbf:	75 06                	jne    8004211dc7 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004211dc1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211dc5:	eb 09                	jmp    8004211dd0 <dwarf_search_die_within_cu+0x2c7>
  8004211dc7:	eb 07                	jmp    8004211dd0 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004211dc9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211dce:	eb 30                	jmp    8004211e00 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211dd0:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004211dd4:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211ddb:	48 39 c2             	cmp    %rax,%rdx
  8004211dde:	76 1b                	jbe    8004211dfb <dwarf_search_die_within_cu+0x2f2>
  8004211de0:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211de7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004211deb:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211df2:	48 39 c2             	cmp    %rax,%rdx
  8004211df5:	0f 87 be fd ff ff    	ja     8004211bb9 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004211dfb:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211e00:	c9                   	leaveq 
  8004211e01:	c3                   	retq   

0000008004211e02 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004211e02:	55                   	push   %rbp
  8004211e03:	48 89 e5             	mov    %rsp,%rbp
  8004211e06:	48 83 ec 60          	sub    $0x60,%rsp
  8004211e0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211e0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211e12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004211e16:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211e1b:	75 35                	jne    8004211e52 <dwarf_offdie+0x50>
  8004211e1d:	48 b9 78 ae 21 04 80 	movabs $0x800421ae78,%rcx
  8004211e24:	00 00 00 
  8004211e27:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211e2e:	00 00 00 
  8004211e31:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004211e36:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211e3d:	00 00 00 
  8004211e40:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e45:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211e4c:	00 00 00 
  8004211e4f:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211e52:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211e57:	75 35                	jne    8004211e8e <dwarf_offdie+0x8c>
  8004211e59:	48 b9 7c ae 21 04 80 	movabs $0x800421ae7c,%rcx
  8004211e60:	00 00 00 
  8004211e63:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211e6a:	00 00 00 
  8004211e6d:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004211e72:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211e79:	00 00 00 
  8004211e7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e81:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211e88:	00 00 00 
  8004211e8b:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004211e8e:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004211e92:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211e96:	76 66                	jbe    8004211efe <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004211e98:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211e9c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004211ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ea4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004211ea8:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004211eac:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004211eb0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004211eb5:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004211eb9:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004211ebe:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004211ec2:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004211ec7:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004211ecb:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004211ed0:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004211ed4:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004211ed9:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004211edd:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004211ee2:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004211ee7:	48 89 c7             	mov    %rax,%rdi
  8004211eea:	48 b8 09 1b 21 04 80 	movabs $0x8004211b09,%rax
  8004211ef1:	00 00 00 
  8004211ef4:	ff d0                	callq  *%rax
  8004211ef6:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004211ef9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004211efc:	eb 05                	jmp    8004211f03 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004211efe:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211f03:	c9                   	leaveq 
  8004211f04:	c3                   	retq   

0000008004211f05 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004211f05:	55                   	push   %rbp
  8004211f06:	48 89 e5             	mov    %rsp,%rbp
  8004211f09:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211f0d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211f11:	89 f0                	mov    %esi,%eax
  8004211f13:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004211f17:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211f1e:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211f1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004211f26:	eb 57                	jmp    8004211f7f <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004211f28:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211f2c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211f2f:	48 63 d0             	movslq %eax,%rdx
  8004211f32:	48 89 d0             	mov    %rdx,%rax
  8004211f35:	48 01 c0             	add    %rax,%rax
  8004211f38:	48 01 d0             	add    %rdx,%rax
  8004211f3b:	48 c1 e0 05          	shl    $0x5,%rax
  8004211f3f:	48 01 c8             	add    %rcx,%rax
  8004211f42:	48 05 80 03 00 00    	add    $0x380,%rax
  8004211f48:	48 8b 10             	mov    (%rax),%rdx
  8004211f4b:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004211f4f:	48 39 c2             	cmp    %rax,%rdx
  8004211f52:	75 27                	jne    8004211f7b <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004211f54:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211f57:	48 63 d0             	movslq %eax,%rdx
  8004211f5a:	48 89 d0             	mov    %rdx,%rax
  8004211f5d:	48 01 c0             	add    %rax,%rax
  8004211f60:	48 01 d0             	add    %rdx,%rax
  8004211f63:	48 c1 e0 05          	shl    $0x5,%rax
  8004211f67:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004211f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f72:	48 01 d0             	add    %rdx,%rax
  8004211f75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004211f79:	eb 17                	jmp    8004211f92 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211f7b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004211f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f83:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211f8a:	0f b6 c0             	movzbl %al,%eax
  8004211f8d:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004211f90:	7f 96                	jg     8004211f28 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004211f92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211f96:	c9                   	leaveq 
  8004211f97:	c3                   	retq   

0000008004211f98 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004211f98:	55                   	push   %rbp
  8004211f99:	48 89 e5             	mov    %rsp,%rbp
  8004211f9c:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004211fa0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211fa4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211fa8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004211fac:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004211fb0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211fb5:	75 35                	jne    8004211fec <dwarf_siblingof+0x54>
  8004211fb7:	48 b9 78 ae 21 04 80 	movabs $0x800421ae78,%rcx
  8004211fbe:	00 00 00 
  8004211fc1:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004211fc8:	00 00 00 
  8004211fcb:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004211fd0:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004211fd7:	00 00 00 
  8004211fda:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fdf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211fe6:	00 00 00 
  8004211fe9:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211fec:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211ff1:	75 35                	jne    8004212028 <dwarf_siblingof+0x90>
  8004211ff3:	48 b9 7c ae 21 04 80 	movabs $0x800421ae7c,%rcx
  8004211ffa:	00 00 00 
  8004211ffd:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004212004:	00 00 00 
  8004212007:	be ed 02 00 00       	mov    $0x2ed,%esi
  800421200c:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004212013:	00 00 00 
  8004212016:	b8 00 00 00 00       	mov    $0x0,%eax
  800421201b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212022:	00 00 00 
  8004212025:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212028:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421202d:	75 35                	jne    8004212064 <dwarf_siblingof+0xcc>
  800421202f:	48 b9 84 ae 21 04 80 	movabs $0x800421ae84,%rcx
  8004212036:	00 00 00 
  8004212039:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004212040:	00 00 00 
  8004212043:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212048:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  800421204f:	00 00 00 
  8004212052:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212057:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421205e:	00 00 00 
  8004212061:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212064:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212069:	75 65                	jne    80042120d0 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800421206b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421206f:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212073:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212077:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421207b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421207f:	48 8b 38             	mov    (%rax),%rdi
  8004212082:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212086:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800421208a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800421208f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212093:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212098:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800421209c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042120a1:	48 8b 78 20          	mov    0x20(%rax),%rdi
  80042120a5:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042120aa:	48 8b 78 28          	mov    0x28(%rax),%rdi
  80042120ae:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  80042120b3:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042120b7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042120bc:	48 89 cf             	mov    %rcx,%rdi
  80042120bf:	48 b8 02 1e 21 04 80 	movabs $0x8004211e02,%rax
  80042120c6:	00 00 00 
  80042120c9:	ff d0                	callq  *%rax
  80042120cb:	e9 0a 01 00 00       	jmpq   80042121da <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  80042120d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042120d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042120db:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042120df:	84 c0                	test   %al,%al
  80042120e1:	75 0e                	jne    80042120f1 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  80042120e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042120e7:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042120eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042120ef:	eb 6b                	jmp    800421215c <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  80042120f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042120f5:	be 01 00 00 00       	mov    $0x1,%esi
  80042120fa:	48 89 c7             	mov    %rax,%rdi
  80042120fd:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  8004212104:	00 00 00 
  8004212107:	ff d0                	callq  *%rax
  8004212109:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421210d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212112:	74 35                	je     8004212149 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212118:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421211c:	48 83 f8 10          	cmp    $0x10,%rax
  8004212120:	74 19                	je     800421213b <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212122:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212126:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421212a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421212e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212132:	48 01 d0             	add    %rdx,%rax
  8004212135:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212139:	eb 21                	jmp    800421215c <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  800421213b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421213f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212143:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212147:	eb 13                	jmp    800421215c <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212149:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421214d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212151:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212155:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  800421215c:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421215f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212163:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212167:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800421216b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421216f:	4c 8b 00             	mov    (%rax),%r8
  8004212172:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212176:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421217a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800421217f:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212183:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212188:	4c 8b 40 18          	mov    0x18(%rax),%r8
  800421218c:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212191:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212195:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  800421219a:	4c 8b 40 28          	mov    0x28(%rax),%r8
  800421219e:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  80042121a3:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042121a7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042121ac:	48 b8 09 1b 21 04 80 	movabs $0x8004211b09,%rax
  80042121b3:	00 00 00 
  80042121b6:	ff d0                	callq  *%rax
  80042121b8:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  80042121bb:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  80042121bf:	75 07                	jne    80042121c8 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  80042121c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042121c6:	eb 12                	jmp    80042121da <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  80042121c8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042121cc:	74 07                	je     80042121d5 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  80042121ce:	b8 01 00 00 00       	mov    $0x1,%eax
  80042121d3:	eb 05                	jmp    80042121da <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  80042121d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042121da:	c9                   	leaveq 
  80042121db:	c3                   	retq   

00000080042121dc <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  80042121dc:	55                   	push   %rbp
  80042121dd:	48 89 e5             	mov    %rsp,%rbp
  80042121e0:	48 83 ec 70          	sub    $0x70,%rsp
  80042121e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042121e8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042121ec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042121f0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  80042121f4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042121f9:	75 35                	jne    8004212230 <dwarf_child+0x54>
  80042121fb:	48 b9 87 ae 21 04 80 	movabs $0x800421ae87,%rcx
  8004212202:	00 00 00 
  8004212205:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  800421220c:	00 00 00 
  800421220f:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212214:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  800421221b:	00 00 00 
  800421221e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212223:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421222a:	00 00 00 
  800421222d:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212230:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212235:	75 35                	jne    800421226c <dwarf_child+0x90>
  8004212237:	48 b9 7c ae 21 04 80 	movabs $0x800421ae7c,%rcx
  800421223e:	00 00 00 
  8004212241:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004212248:	00 00 00 
  800421224b:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212250:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004212257:	00 00 00 
  800421225a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421225f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212266:	00 00 00 
  8004212269:	41 ff d0             	callq  *%r8
	assert(dbg);
  800421226c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212271:	75 35                	jne    80042122a8 <dwarf_child+0xcc>
  8004212273:	48 b9 78 ae 21 04 80 	movabs $0x800421ae78,%rcx
  800421227a:	00 00 00 
  800421227d:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  8004212284:	00 00 00 
  8004212287:	be 1e 03 00 00       	mov    $0x31e,%esi
  800421228c:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  8004212293:	00 00 00 
  8004212296:	b8 00 00 00 00       	mov    $0x0,%eax
  800421229b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042122a2:	00 00 00 
  80042122a5:	41 ff d0             	callq  *%r8
	assert(cu);
  80042122a8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042122ad:	75 35                	jne    80042122e4 <dwarf_child+0x108>
  80042122af:	48 b9 84 ae 21 04 80 	movabs $0x800421ae84,%rcx
  80042122b6:	00 00 00 
  80042122b9:	48 ba ea ac 21 04 80 	movabs $0x800421acea,%rdx
  80042122c0:	00 00 00 
  80042122c3:	be 1f 03 00 00       	mov    $0x31f,%esi
  80042122c8:	48 bf ff ac 21 04 80 	movabs $0x800421acff,%rdi
  80042122cf:	00 00 00 
  80042122d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122d7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042122de:	00 00 00 
  80042122e1:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042122e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042122e8:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042122ec:	84 c0                	test   %al,%al
  80042122ee:	75 0a                	jne    80042122fa <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  80042122f0:	b8 04 00 00 00       	mov    $0x4,%eax
  80042122f5:	e9 84 00 00 00       	jmpq   800421237e <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  80042122fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042122fe:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212302:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212306:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  800421230a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421230e:	48 8b 08             	mov    (%rax),%rcx
  8004212311:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212315:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212319:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421231e:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212322:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212327:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421232b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212330:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212334:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212339:	48 8b 48 28          	mov    0x28(%rax),%rcx
  800421233d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212342:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212346:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421234b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212350:	48 b8 09 1b 21 04 80 	movabs $0x8004211b09,%rax
  8004212357:	00 00 00 
  800421235a:	ff d0                	callq  *%rax
  800421235c:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  800421235f:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212363:	75 07                	jne    800421236c <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212365:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421236a:	eb 12                	jmp    800421237e <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  800421236c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212370:	74 07                	je     8004212379 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212372:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212377:	eb 05                	jmp    800421237e <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212379:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421237e:	c9                   	leaveq 
  800421237f:	c3                   	retq   

0000008004212380 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212380:	55                   	push   %rbp
  8004212381:	48 89 e5             	mov    %rsp,%rbp
  8004212384:	48 83 ec 20          	sub    $0x20,%rsp
  8004212388:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  800421238c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212390:	48 8b 00             	mov    (%rax),%rax
  8004212393:	48 89 c7             	mov    %rax,%rdi
  8004212396:	48 b8 a7 56 21 04 80 	movabs $0x80042156a7,%rax
  800421239d:	00 00 00 
  80042123a0:	ff d0                	callq  *%rax
  80042123a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  80042123a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123aa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042123ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123b2:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  80042123b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123ba:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042123be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123c2:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  80042123c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123ca:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042123ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123d2:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  80042123d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042123db:	c9                   	leaveq 
  80042123dc:	c3                   	retq   

00000080042123dd <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  80042123dd:	55                   	push   %rbp
  80042123de:	48 89 e5             	mov    %rsp,%rbp
  80042123e1:	48 83 ec 08          	sub    $0x8,%rsp
  80042123e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  80042123e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123ed:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  80042123f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123f7:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  80042123fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212401:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212407:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421240b:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212415:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  800421241b:	c9                   	leaveq 
  800421241c:	c3                   	retq   

000000800421241d <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  800421241d:	55                   	push   %rbp
  800421241e:	48 89 e5             	mov    %rsp,%rbp
  8004212421:	48 83 ec 40          	sub    $0x40,%rsp
  8004212425:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212429:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421242d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212431:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212435:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212439:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421243d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212441:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212445:	ba 80 00 00 00       	mov    $0x80,%edx
  800421244a:	be 00 00 00 00       	mov    $0x0,%esi
  800421244f:	48 89 c7             	mov    %rax,%rdi
  8004212452:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004212459:	00 00 00 
  800421245c:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  800421245e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212462:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212466:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  800421246a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421246f:	75 07                	jne    8004212478 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004212471:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212476:	eb 75                	jmp    80042124ed <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212478:	eb 59                	jmp    80042124d3 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  800421247a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800421247e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212482:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212486:	be 01 00 00 00       	mov    $0x1,%esi
  800421248b:	48 89 c7             	mov    %rax,%rdi
  800421248e:	48 b8 32 46 21 04 80 	movabs $0x8004214632,%rax
  8004212495:	00 00 00 
  8004212498:	ff d0                	callq  *%rax
  800421249a:	85 c0                	test   %eax,%eax
  800421249c:	79 07                	jns    80042124a5 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  800421249e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042124a3:	eb 48                	jmp    80042124ed <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042124a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124a9:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042124ad:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042124b1:	77 20                	ja     80042124d3 <dwarf_get_fde_at_pc+0xb6>
  80042124b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124b7:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  80042124bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124bf:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042124c3:	48 01 d0             	add    %rdx,%rax
  80042124c6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042124ca:	76 07                	jbe    80042124d3 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  80042124cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042124d1:	eb 1a                	jmp    80042124ed <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042124d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124d7:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042124db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124df:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042124e3:	48 39 c2             	cmp    %rax,%rdx
  80042124e6:	72 92                	jb     800421247a <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  80042124e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042124ed:	c9                   	leaveq 
  80042124ee:	c3                   	retq   

00000080042124ef <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042124ef:	55                   	push   %rbp
  80042124f0:	48 89 e5             	mov    %rsp,%rbp
  80042124f3:	53                   	push   %rbx
  80042124f4:	48 83 ec 38          	sub    $0x38,%rsp
  80042124f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042124fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212500:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212504:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004212508:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421250d:	75 35                	jne    8004212544 <_dwarf_frame_regtable_copy+0x55>
  800421250f:	48 b9 9a ae 21 04 80 	movabs $0x800421ae9a,%rcx
  8004212516:	00 00 00 
  8004212519:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004212520:	00 00 00 
  8004212523:	be 57 00 00 00       	mov    $0x57,%esi
  8004212528:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  800421252f:	00 00 00 
  8004212532:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212537:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421253e:	00 00 00 
  8004212541:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004212544:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212549:	75 35                	jne    8004212580 <_dwarf_frame_regtable_copy+0x91>
  800421254b:	48 b9 d2 ae 21 04 80 	movabs $0x800421aed2,%rcx
  8004212552:	00 00 00 
  8004212555:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  800421255c:	00 00 00 
  800421255f:	be 58 00 00 00       	mov    $0x58,%esi
  8004212564:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  800421256b:	00 00 00 
  800421256e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212573:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421257a:	00 00 00 
  800421257d:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004212580:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212584:	48 8b 00             	mov    (%rax),%rax
  8004212587:	48 85 c0             	test   %rax,%rax
  800421258a:	75 39                	jne    80042125c5 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  800421258c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212590:	48 bb e0 d6 49 04 80 	movabs $0x800449d6e0,%rbx
  8004212597:	00 00 00 
  800421259a:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  800421259d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125a1:	48 8b 00             	mov    (%rax),%rax
  80042125a4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042125a8:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  80042125ac:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  80042125b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125b4:	48 8b 00             	mov    (%rax),%rax
  80042125b7:	48 bb e0 b7 69 04 80 	movabs $0x800469b7e0,%rbx
  80042125be:	00 00 00 
  80042125c1:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  80042125c5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042125c9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125cd:	48 8b 00             	mov    (%rax),%rax
  80042125d0:	ba 18 00 00 00       	mov    $0x18,%edx
  80042125d5:	48 89 ce             	mov    %rcx,%rsi
  80042125d8:	48 89 c7             	mov    %rax,%rdi
  80042125db:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  80042125e2:	00 00 00 
  80042125e5:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042125e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042125ee:	eb 5a                	jmp    800421264a <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042125f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042125f4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042125f8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042125fb:	48 63 d0             	movslq %eax,%rdx
  80042125fe:	48 89 d0             	mov    %rdx,%rax
  8004212601:	48 01 c0             	add    %rax,%rax
  8004212604:	48 01 d0             	add    %rdx,%rax
  8004212607:	48 c1 e0 03          	shl    $0x3,%rax
  800421260b:	48 01 c1             	add    %rax,%rcx
  800421260e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212612:	48 8b 00             	mov    (%rax),%rax
  8004212615:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212619:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421261c:	48 63 d0             	movslq %eax,%rdx
  800421261f:	48 89 d0             	mov    %rdx,%rax
  8004212622:	48 01 c0             	add    %rax,%rax
  8004212625:	48 01 d0             	add    %rdx,%rax
  8004212628:	48 c1 e0 03          	shl    $0x3,%rax
  800421262c:	48 01 f0             	add    %rsi,%rax
  800421262f:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212634:	48 89 ce             	mov    %rcx,%rsi
  8004212637:	48 89 c7             	mov    %rax,%rdi
  800421263a:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  8004212641:	00 00 00 
  8004212644:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004212646:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421264a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421264e:	48 8b 00             	mov    (%rax),%rax
  8004212651:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212655:	0f b7 c0             	movzwl %ax,%eax
  8004212658:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421265b:	7e 10                	jle    800421266d <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  800421265d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212661:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212665:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212668:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421266b:	7f 83                	jg     80042125f0 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421266d:	eb 32                	jmp    80042126a1 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  800421266f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212673:	48 8b 00             	mov    (%rax),%rax
  8004212676:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421267a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421267d:	48 63 d0             	movslq %eax,%rdx
  8004212680:	48 89 d0             	mov    %rdx,%rax
  8004212683:	48 01 c0             	add    %rax,%rax
  8004212686:	48 01 d0             	add    %rdx,%rax
  8004212689:	48 c1 e0 03          	shl    $0x3,%rax
  800421268d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004212691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212695:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004212699:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421269d:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042126a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042126a5:	48 8b 00             	mov    (%rax),%rax
  80042126a8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042126ac:	0f b7 c0             	movzwl %ax,%eax
  80042126af:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042126b2:	7f bb                	jg     800421266f <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  80042126b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042126b9:	48 83 c4 38          	add    $0x38,%rsp
  80042126bd:	5b                   	pop    %rbx
  80042126be:	5d                   	pop    %rbp
  80042126bf:	c3                   	retq   

00000080042126c0 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  80042126c0:	55                   	push   %rbp
  80042126c1:	48 89 e5             	mov    %rsp,%rbp
  80042126c4:	53                   	push   %rbx
  80042126c5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  80042126cc:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  80042126d0:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  80042126d4:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  80042126d8:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  80042126dc:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042126e3:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042126ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042126f1:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042126f8:	00 
  80042126f9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042126fd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  8004212701:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212705:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212709:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  800421270c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212710:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212714:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  8004212718:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421271c:	48 89 c7             	mov    %rax,%rdi
  800421271f:	48 b8 ef 24 21 04 80 	movabs $0x80042124ef,%rax
  8004212726:	00 00 00 
  8004212729:	ff d0                	callq  *%rax
	p = insts;
  800421272b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421272f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  8004212733:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212737:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421273b:	48 01 d0             	add    %rdx,%rax
  800421273e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  8004212742:	e9 3a 0d 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004212747:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421274b:	0f b6 00             	movzbl (%rax),%eax
  800421274e:	84 c0                	test   %al,%al
  8004212750:	75 11                	jne    8004212763 <_dwarf_frame_run_inst+0xa3>
			p++;
  8004212752:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212756:	48 83 c0 01          	add    $0x1,%rax
  800421275a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  800421275e:	e9 1e 0d 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  8004212763:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212767:	0f b6 00             	movzbl (%rax),%eax
  800421276a:	83 e0 c0             	and    $0xffffffc0,%eax
  800421276d:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004212770:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212774:	0f b6 00             	movzbl (%rax),%eax
  8004212777:	83 e0 3f             	and    $0x3f,%eax
  800421277a:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  800421277d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212781:	48 83 c0 01          	add    $0x1,%rax
  8004212785:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004212789:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  800421278d:	0f 84 a1 01 00 00    	je     8004212934 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  8004212793:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004212797:	3d 80 00 00 00       	cmp    $0x80,%eax
  800421279c:	74 38                	je     80042127d6 <_dwarf_frame_run_inst+0x116>
  800421279e:	3d c0 00 00 00       	cmp    $0xc0,%eax
  80042127a3:	0f 84 01 01 00 00    	je     80042128aa <_dwarf_frame_run_inst+0x1ea>
  80042127a9:	83 f8 40             	cmp    $0x40,%eax
  80042127ac:	0f 85 71 01 00 00    	jne    8004212923 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  80042127b2:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042127b6:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042127bd:	ff 
  80042127be:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  80042127c2:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042127c6:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042127ca:	73 05                	jae    80042127d1 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  80042127cc:	e9 be 0c 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			        break;
  80042127d1:	e9 59 01 00 00       	jmpq   800421292f <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  80042127d6:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042127da:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042127de:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042127e1:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042127e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042127e9:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042127ed:	66 39 c2             	cmp    %ax,%dx
  80042127f0:	72 0c                	jb     80042127fe <_dwarf_frame_run_inst+0x13e>
  80042127f2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042127f9:	e9 91 0c 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  80042127fe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212802:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212806:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421280a:	48 89 d0             	mov    %rdx,%rax
  800421280d:	48 01 c0             	add    %rax,%rax
  8004212810:	48 01 d0             	add    %rdx,%rax
  8004212813:	48 c1 e0 03          	shl    $0x3,%rax
  8004212817:	48 01 c8             	add    %rcx,%rax
  800421281a:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  800421281d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212821:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212825:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212829:	48 89 d0             	mov    %rdx,%rax
  800421282c:	48 01 c0             	add    %rax,%rax
  800421282f:	48 01 d0             	add    %rdx,%rax
  8004212832:	48 c1 e0 03          	shl    $0x3,%rax
  8004212836:	48 01 c8             	add    %rcx,%rax
  8004212839:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  800421283d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212841:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212845:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212849:	48 89 d0             	mov    %rdx,%rax
  800421284c:	48 01 c0             	add    %rax,%rax
  800421284f:	48 01 d0             	add    %rdx,%rax
  8004212852:	48 c1 e0 03          	shl    $0x3,%rax
  8004212856:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421285a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421285e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212862:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004212866:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421286a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421286e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212872:	48 89 d0             	mov    %rdx,%rax
  8004212875:	48 01 c0             	add    %rax,%rax
  8004212878:	48 01 d0             	add    %rdx,%rax
  800421287b:	48 c1 e0 03          	shl    $0x3,%rax
  800421287f:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004212883:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212887:	48 89 c7             	mov    %rax,%rdi
  800421288a:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212891:	00 00 00 
  8004212894:	ff d0                	callq  *%rax
  8004212896:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421289d:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  80042128a1:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  80042128a5:	e9 85 00 00 00       	jmpq   800421292f <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  80042128aa:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042128ae:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042128b2:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042128b5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128bd:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042128c1:	66 39 c2             	cmp    %ax,%dx
  80042128c4:	72 0c                	jb     80042128d2 <_dwarf_frame_run_inst+0x212>
  80042128c6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042128cd:	e9 bd 0b 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  80042128d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042128d6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042128da:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128de:	48 89 d0             	mov    %rdx,%rax
  80042128e1:	48 01 c0             	add    %rax,%rax
  80042128e4:	48 01 d0             	add    %rdx,%rax
  80042128e7:	48 c1 e0 03          	shl    $0x3,%rax
  80042128eb:	48 01 c1             	add    %rax,%rcx
  80042128ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128f2:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042128f6:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128fa:	48 89 d0             	mov    %rdx,%rax
  80042128fd:	48 01 c0             	add    %rax,%rax
  8004212900:	48 01 d0             	add    %rdx,%rax
  8004212903:	48 c1 e0 03          	shl    $0x3,%rax
  8004212907:	48 01 f0             	add    %rsi,%rax
  800421290a:	ba 18 00 00 00       	mov    $0x18,%edx
  800421290f:	48 89 ce             	mov    %rcx,%rsi
  8004212912:	48 89 c7             	mov    %rax,%rdi
  8004212915:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  800421291c:	00 00 00 
  800421291f:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004212921:	eb 0c                	jmp    800421292f <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004212923:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  800421292a:	e9 60 0b 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  800421292f:	e9 4d 0b 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  8004212934:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212938:	83 f8 16             	cmp    $0x16,%eax
  800421293b:	0f 87 37 0b 00 00    	ja     8004213478 <_dwarf_frame_run_inst+0xdb8>
  8004212941:	89 c0                	mov    %eax,%eax
  8004212943:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421294a:	00 
  800421294b:	48 b8 e0 ae 21 04 80 	movabs $0x800421aee0,%rax
  8004212952:	00 00 00 
  8004212955:	48 01 d0             	add    %rdx,%rax
  8004212958:	48 8b 00             	mov    (%rax),%rax
  800421295b:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  800421295d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212961:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212965:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212969:	8b 4a 28             	mov    0x28(%rdx),%ecx
  800421296c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212970:	89 ce                	mov    %ecx,%esi
  8004212972:	48 89 d7             	mov    %rdx,%rdi
  8004212975:	ff d0                	callq  *%rax
  8004212977:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421297b:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421297f:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212983:	73 05                	jae    800421298a <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004212985:	e9 05 0b 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			break;
  800421298a:	e9 f2 0a 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  800421298f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212993:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212997:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421299b:	be 01 00 00 00       	mov    $0x1,%esi
  80042129a0:	48 89 d7             	mov    %rdx,%rdi
  80042129a3:	ff d0                	callq  *%rax
  80042129a5:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042129ac:	ff 
  80042129ad:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042129b1:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042129b5:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042129b9:	73 05                	jae    80042129c0 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  80042129bb:	e9 cf 0a 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			break;
  80042129c0:	e9 bc 0a 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  80042129c5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042129c9:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042129cd:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042129d1:	be 02 00 00 00       	mov    $0x2,%esi
  80042129d6:	48 89 d7             	mov    %rdx,%rdi
  80042129d9:	ff d0                	callq  *%rax
  80042129db:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042129e2:	ff 
  80042129e3:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042129e7:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042129eb:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042129ef:	73 05                	jae    80042129f6 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  80042129f1:	e9 99 0a 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			break;
  80042129f6:	e9 86 0a 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  80042129fb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042129ff:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a03:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a07:	be 04 00 00 00       	mov    $0x4,%esi
  8004212a0c:	48 89 d7             	mov    %rdx,%rdi
  8004212a0f:	ff d0                	callq  *%rax
  8004212a11:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212a18:	ff 
  8004212a19:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a1d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a21:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a25:	73 05                	jae    8004212a2c <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  8004212a27:	e9 63 0a 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212a2c:	e9 50 0a 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004212a31:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212a35:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212a39:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212a3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212a40:	48 89 c7             	mov    %rax,%rdi
  8004212a43:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212a4a:	00 00 00 
  8004212a4d:	ff d0                	callq  *%rax
  8004212a4f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212a53:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212a57:	48 89 c7             	mov    %rax,%rdi
  8004212a5a:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212a61:	00 00 00 
  8004212a64:	ff d0                	callq  *%rax
  8004212a66:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212a6a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a6e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212a72:	0f b7 c0             	movzwl %ax,%eax
  8004212a75:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212a79:	77 0c                	ja     8004212a87 <_dwarf_frame_run_inst+0x3c7>
  8004212a7b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212a82:	e9 08 0a 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004212a87:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a8b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a8f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212a93:	48 89 d0             	mov    %rdx,%rax
  8004212a96:	48 01 c0             	add    %rax,%rax
  8004212a99:	48 01 d0             	add    %rdx,%rax
  8004212a9c:	48 c1 e0 03          	shl    $0x3,%rax
  8004212aa0:	48 01 c8             	add    %rcx,%rax
  8004212aa3:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004212aa6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212aaa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212aae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ab2:	48 89 d0             	mov    %rdx,%rax
  8004212ab5:	48 01 c0             	add    %rax,%rax
  8004212ab8:	48 01 d0             	add    %rdx,%rax
  8004212abb:	48 c1 e0 03          	shl    $0x3,%rax
  8004212abf:	48 01 c8             	add    %rcx,%rax
  8004212ac2:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212ac6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212aca:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ace:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ad2:	48 89 d0             	mov    %rdx,%rax
  8004212ad5:	48 01 c0             	add    %rax,%rax
  8004212ad8:	48 01 d0             	add    %rdx,%rax
  8004212adb:	48 c1 e0 03          	shl    $0x3,%rax
  8004212adf:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212ae3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212ae7:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212aeb:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004212aef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212af3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212af7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212afb:	48 89 d0             	mov    %rdx,%rax
  8004212afe:	48 01 c0             	add    %rax,%rax
  8004212b01:	48 01 d0             	add    %rdx,%rax
  8004212b04:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b08:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212b0c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212b13:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004212b18:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004212b1c:	e9 60 09 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004212b21:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212b25:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212b29:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212b2c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212b30:	48 89 c7             	mov    %rax,%rdi
  8004212b33:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212b3a:	00 00 00 
  8004212b3d:	ff d0                	callq  *%rax
  8004212b3f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212b43:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b47:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212b4b:	0f b7 c0             	movzwl %ax,%eax
  8004212b4e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212b52:	77 0c                	ja     8004212b60 <_dwarf_frame_run_inst+0x4a0>
  8004212b54:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212b5b:	e9 2f 09 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004212b60:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212b64:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b68:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b6c:	48 89 d0             	mov    %rdx,%rax
  8004212b6f:	48 01 c0             	add    %rax,%rax
  8004212b72:	48 01 d0             	add    %rdx,%rax
  8004212b75:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b79:	48 01 c1             	add    %rax,%rcx
  8004212b7c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b80:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212b84:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b88:	48 89 d0             	mov    %rdx,%rax
  8004212b8b:	48 01 c0             	add    %rax,%rax
  8004212b8e:	48 01 d0             	add    %rdx,%rax
  8004212b91:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b95:	48 01 f0             	add    %rsi,%rax
  8004212b98:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212b9d:	48 89 ce             	mov    %rcx,%rsi
  8004212ba0:	48 89 c7             	mov    %rax,%rdi
  8004212ba3:	48 b8 72 01 21 04 80 	movabs $0x8004210172,%rax
  8004212baa:	00 00 00 
  8004212bad:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004212baf:	e9 cd 08 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004212bb4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212bb8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212bbc:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212bbf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212bc3:	48 89 c7             	mov    %rax,%rdi
  8004212bc6:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212bcd:	00 00 00 
  8004212bd0:	ff d0                	callq  *%rax
  8004212bd2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212bd6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bda:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212bde:	0f b7 c0             	movzwl %ax,%eax
  8004212be1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212be5:	77 0c                	ja     8004212bf3 <_dwarf_frame_run_inst+0x533>
  8004212be7:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212bee:	e9 9c 08 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212bf3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bf7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bfb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212bff:	48 89 d0             	mov    %rdx,%rax
  8004212c02:	48 01 c0             	add    %rax,%rax
  8004212c05:	48 01 d0             	add    %rdx,%rax
  8004212c08:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c0c:	48 01 c8             	add    %rcx,%rax
  8004212c0f:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004212c12:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c16:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c1a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c1e:	48 89 d0             	mov    %rdx,%rax
  8004212c21:	48 01 c0             	add    %rax,%rax
  8004212c24:	48 01 d0             	add    %rdx,%rax
  8004212c27:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c2b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212c2f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212c33:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004212c37:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212c3b:	e9 41 08 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004212c40:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c44:	48 89 c7             	mov    %rax,%rdi
  8004212c47:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212c4e:	00 00 00 
  8004212c51:	ff d0                	callq  *%rax
  8004212c53:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212c57:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c5b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212c5f:	0f b7 c0             	movzwl %ax,%eax
  8004212c62:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212c66:	77 0c                	ja     8004212c74 <_dwarf_frame_run_inst+0x5b4>
  8004212c68:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212c6f:	e9 1b 08 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212c74:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c78:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c7c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c80:	48 89 d0             	mov    %rdx,%rax
  8004212c83:	48 01 c0             	add    %rax,%rax
  8004212c86:	48 01 d0             	add    %rdx,%rax
  8004212c89:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c8d:	48 01 c8             	add    %rcx,%rax
  8004212c90:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004212c93:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c97:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c9b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c9f:	48 89 d0             	mov    %rdx,%rax
  8004212ca2:	48 01 c0             	add    %rax,%rax
  8004212ca5:	48 01 d0             	add    %rdx,%rax
  8004212ca8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cac:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212cb0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212cb4:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004212cb8:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212cbc:	e9 c0 07 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004212cc1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212cc5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212cc9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212ccc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212cd0:	48 89 c7             	mov    %rax,%rdi
  8004212cd3:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212cda:	00 00 00 
  8004212cdd:	ff d0                	callq  *%rax
  8004212cdf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004212ce3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ce7:	48 89 c7             	mov    %rax,%rdi
  8004212cea:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212cf1:	00 00 00 
  8004212cf4:	ff d0                	callq  *%rax
  8004212cf6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212cfa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cfe:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212d02:	0f b7 c0             	movzwl %ax,%eax
  8004212d05:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212d09:	77 0c                	ja     8004212d17 <_dwarf_frame_run_inst+0x657>
  8004212d0b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212d12:	e9 78 07 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212d17:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d1b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d1f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d23:	48 89 d0             	mov    %rdx,%rax
  8004212d26:	48 01 c0             	add    %rax,%rax
  8004212d29:	48 01 d0             	add    %rdx,%rax
  8004212d2c:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d30:	48 01 c8             	add    %rcx,%rax
  8004212d33:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004212d36:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d3a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d3e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d42:	48 89 d0             	mov    %rdx,%rax
  8004212d45:	48 01 c0             	add    %rax,%rax
  8004212d48:	48 01 d0             	add    %rdx,%rax
  8004212d4b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d4f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212d53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212d57:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212d5b:	e9 21 07 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004212d60:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212d64:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212d68:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004212d6c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d70:	48 89 c7             	mov    %rax,%rdi
  8004212d73:	48 b8 ef 24 21 04 80 	movabs $0x80042124ef,%rax
  8004212d7a:	00 00 00 
  8004212d7d:	ff d0                	callq  *%rax
			break;
  8004212d7f:	e9 fd 06 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004212d84:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212d88:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212d8c:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004212d8f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212d93:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212d97:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004212d9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d9f:	48 89 c7             	mov    %rax,%rdi
  8004212da2:	48 b8 ef 24 21 04 80 	movabs $0x80042124ef,%rax
  8004212da9:	00 00 00 
  8004212dac:	ff d0                	callq  *%rax
			break;
  8004212dae:	e9 ce 06 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004212db3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212db7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212dbb:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212dbe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212dc2:	48 89 c7             	mov    %rax,%rdi
  8004212dc5:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212dcc:	00 00 00 
  8004212dcf:	ff d0                	callq  *%rax
  8004212dd1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212dd5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212dd9:	48 89 c7             	mov    %rax,%rdi
  8004212ddc:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212de3:	00 00 00 
  8004212de6:	ff d0                	callq  *%rax
  8004212de8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212dec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212df0:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212df3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212df7:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004212dfb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212dff:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e03:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212e07:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e0b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212e13:	e9 69 06 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004212e18:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e1c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e20:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212e23:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e27:	48 89 c7             	mov    %rax,%rdi
  8004212e2a:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212e31:	00 00 00 
  8004212e34:	ff d0                	callq  *%rax
  8004212e36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004212e3a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e3e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e42:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004212e46:	e9 36 06 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004212e4b:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e4f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e53:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004212e56:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e5a:	48 89 c7             	mov    %rax,%rdi
  8004212e5d:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212e64:	00 00 00 
  8004212e67:	ff d0                	callq  *%rax
  8004212e69:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212e6d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e71:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212e74:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e78:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212e7c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e80:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e84:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212e88:	e9 f4 05 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004212e8d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e91:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e95:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004212e98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e9c:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004212e9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ea3:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004212ea7:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004212eab:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212eaf:	48 89 c7             	mov    %rax,%rdi
  8004212eb2:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212eb9:	00 00 00 
  8004212ebc:	ff d0                	callq  *%rax
  8004212ebe:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004212ec2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ec6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212eca:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004212ece:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212ed2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ed6:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212eda:	48 01 d0             	add    %rdx,%rax
  8004212edd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212ee1:	e9 9b 05 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004212ee6:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212eea:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212eee:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212ef1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ef5:	48 89 c7             	mov    %rax,%rdi
  8004212ef8:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212eff:	00 00 00 
  8004212f02:	ff d0                	callq  *%rax
  8004212f04:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212f08:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f0c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212f10:	0f b7 c0             	movzwl %ax,%eax
  8004212f13:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212f17:	77 0c                	ja     8004212f25 <_dwarf_frame_run_inst+0x865>
  8004212f19:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212f20:	e9 6a 05 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212f25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f29:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f2d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f31:	48 89 d0             	mov    %rdx,%rax
  8004212f34:	48 01 c0             	add    %rax,%rax
  8004212f37:	48 01 d0             	add    %rdx,%rax
  8004212f3a:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f3e:	48 01 c8             	add    %rcx,%rax
  8004212f41:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004212f44:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f48:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f4c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f50:	48 89 d0             	mov    %rdx,%rax
  8004212f53:	48 01 c0             	add    %rax,%rax
  8004212f56:	48 01 d0             	add    %rdx,%rax
  8004212f59:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f5d:	48 01 c8             	add    %rcx,%rax
  8004212f60:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004212f64:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f68:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f6c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f70:	48 89 d0             	mov    %rdx,%rax
  8004212f73:	48 01 c0             	add    %rax,%rax
  8004212f76:	48 01 d0             	add    %rdx,%rax
  8004212f79:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f7d:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004212f81:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f85:	48 89 c7             	mov    %rax,%rdi
  8004212f88:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004212f8f:	00 00 00 
  8004212f92:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004212f94:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004212f98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f9c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212fa0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fa4:	48 89 d0             	mov    %rdx,%rax
  8004212fa7:	48 01 c0             	add    %rax,%rax
  8004212faa:	48 01 d0             	add    %rdx,%rax
  8004212fad:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fb1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212fb5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212fb9:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004212fbd:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004212fc1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fc5:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212fc9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fcd:	48 89 d0             	mov    %rdx,%rax
  8004212fd0:	48 01 c0             	add    %rax,%rax
  8004212fd3:	48 01 d0             	add    %rdx,%rax
  8004212fd6:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fda:	48 01 f0             	add    %rsi,%rax
  8004212fdd:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212fe1:	48 01 c8             	add    %rcx,%rax
  8004212fe4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212fe8:	e9 94 04 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004212fed:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ff1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ff5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212ff8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ffc:	48 89 c7             	mov    %rax,%rdi
  8004212fff:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004213006:	00 00 00 
  8004213009:	ff d0                	callq  *%rax
  800421300b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421300f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213013:	48 89 c7             	mov    %rax,%rdi
  8004213016:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  800421301d:	00 00 00 
  8004213020:	ff d0                	callq  *%rax
  8004213022:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213026:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421302a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421302e:	0f b7 c0             	movzwl %ax,%eax
  8004213031:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213035:	77 0c                	ja     8004213043 <_dwarf_frame_run_inst+0x983>
  8004213037:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421303e:	e9 4c 04 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213043:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213047:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421304b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421304f:	48 89 d0             	mov    %rdx,%rax
  8004213052:	48 01 c0             	add    %rax,%rax
  8004213055:	48 01 d0             	add    %rdx,%rax
  8004213058:	48 c1 e0 03          	shl    $0x3,%rax
  800421305c:	48 01 c8             	add    %rcx,%rax
  800421305f:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213062:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213066:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421306a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421306e:	48 89 d0             	mov    %rdx,%rax
  8004213071:	48 01 c0             	add    %rax,%rax
  8004213074:	48 01 d0             	add    %rdx,%rax
  8004213077:	48 c1 e0 03          	shl    $0x3,%rax
  800421307b:	48 01 c8             	add    %rcx,%rax
  800421307e:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213082:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213086:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421308a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421308e:	48 89 d0             	mov    %rdx,%rax
  8004213091:	48 01 c0             	add    %rax,%rax
  8004213094:	48 01 d0             	add    %rdx,%rax
  8004213097:	48 c1 e0 03          	shl    $0x3,%rax
  800421309b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421309f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042130a3:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042130a7:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042130ab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130af:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042130b3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130b7:	48 89 d0             	mov    %rdx,%rax
  80042130ba:	48 01 c0             	add    %rax,%rax
  80042130bd:	48 01 d0             	add    %rdx,%rax
  80042130c0:	48 c1 e0 03          	shl    $0x3,%rax
  80042130c4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042130c8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042130cf:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  80042130d4:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042130d8:	e9 a4 03 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  80042130dd:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042130e1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042130e5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042130e8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042130ec:	48 89 c7             	mov    %rax,%rdi
  80042130ef:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  80042130f6:	00 00 00 
  80042130f9:	ff d0                	callq  *%rax
  80042130fb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042130ff:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213103:	48 89 c7             	mov    %rax,%rdi
  8004213106:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  800421310d:	00 00 00 
  8004213110:	ff d0                	callq  *%rax
  8004213112:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213116:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421311a:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800421311d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213121:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213125:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213129:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421312d:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213131:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213135:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421313c:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213141:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213145:	e9 37 03 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  800421314a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421314e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213152:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213155:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213159:	48 89 c7             	mov    %rax,%rdi
  800421315c:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  8004213163:	00 00 00 
  8004213166:	ff d0                	callq  *%rax
  8004213168:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800421316c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213170:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213173:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213177:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800421317b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421317f:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213186:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800421318b:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421318f:	e9 ed 02 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213194:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213198:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421319c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421319f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131a3:	48 89 c7             	mov    %rax,%rdi
  80042131a6:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  80042131ad:	00 00 00 
  80042131b0:	ff d0                	callq  *%rax
  80042131b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042131b6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131ba:	48 89 c7             	mov    %rax,%rdi
  80042131bd:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  80042131c4:	00 00 00 
  80042131c7:	ff d0                	callq  *%rax
  80042131c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042131cd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131d1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042131d5:	0f b7 c0             	movzwl %ax,%eax
  80042131d8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042131dc:	77 0c                	ja     80042131ea <_dwarf_frame_run_inst+0xb2a>
  80042131de:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042131e5:	e9 a5 02 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042131ea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131ee:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131f6:	48 89 d0             	mov    %rdx,%rax
  80042131f9:	48 01 c0             	add    %rax,%rax
  80042131fc:	48 01 d0             	add    %rdx,%rax
  80042131ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004213203:	48 01 c8             	add    %rcx,%rax
  8004213206:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213209:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421320d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213211:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213215:	48 89 d0             	mov    %rdx,%rax
  8004213218:	48 01 c0             	add    %rax,%rax
  800421321b:	48 01 d0             	add    %rdx,%rax
  800421321e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213222:	48 01 c8             	add    %rcx,%rax
  8004213225:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213229:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421322d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213231:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213235:	48 89 d0             	mov    %rdx,%rax
  8004213238:	48 01 c0             	add    %rax,%rax
  800421323b:	48 01 d0             	add    %rdx,%rax
  800421323e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213242:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213246:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421324a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421324e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213252:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213256:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421325a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421325e:	48 89 d0             	mov    %rdx,%rax
  8004213261:	48 01 c0             	add    %rax,%rax
  8004213264:	48 01 d0             	add    %rdx,%rax
  8004213267:	48 c1 e0 03          	shl    $0x3,%rax
  800421326b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421326f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213276:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421327b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421327f:	e9 fd 01 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213284:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213288:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421328c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421328f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213293:	48 89 c7             	mov    %rax,%rdi
  8004213296:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  800421329d:	00 00 00 
  80042132a0:	ff d0                	callq  *%rax
  80042132a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042132a6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042132aa:	48 89 c7             	mov    %rax,%rdi
  80042132ad:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  80042132b4:	00 00 00 
  80042132b7:	ff d0                	callq  *%rax
  80042132b9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042132bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132c1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042132c5:	0f b7 c0             	movzwl %ax,%eax
  80042132c8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042132cc:	77 0c                	ja     80042132da <_dwarf_frame_run_inst+0xc1a>
  80042132ce:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042132d5:	e9 b5 01 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042132da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132de:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132e2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132e6:	48 89 d0             	mov    %rdx,%rax
  80042132e9:	48 01 c0             	add    %rax,%rax
  80042132ec:	48 01 d0             	add    %rdx,%rax
  80042132ef:	48 c1 e0 03          	shl    $0x3,%rax
  80042132f3:	48 01 c8             	add    %rcx,%rax
  80042132f6:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042132f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132fd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213301:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213305:	48 89 d0             	mov    %rdx,%rax
  8004213308:	48 01 c0             	add    %rax,%rax
  800421330b:	48 01 d0             	add    %rdx,%rax
  800421330e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213312:	48 01 c8             	add    %rcx,%rax
  8004213315:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213319:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421331d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213321:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213325:	48 89 d0             	mov    %rdx,%rax
  8004213328:	48 01 c0             	add    %rax,%rax
  800421332b:	48 01 d0             	add    %rdx,%rax
  800421332e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213332:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213336:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421333a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421333e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213342:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213346:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421334a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421334e:	48 89 d0             	mov    %rdx,%rax
  8004213351:	48 01 c0             	add    %rax,%rax
  8004213354:	48 01 d0             	add    %rdx,%rax
  8004213357:	48 c1 e0 03          	shl    $0x3,%rax
  800421335b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421335f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213366:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421336b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421336f:	e9 0d 01 00 00       	jmpq   8004213481 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213374:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213378:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421337c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421337f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213383:	48 89 c7             	mov    %rax,%rdi
  8004213386:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  800421338d:	00 00 00 
  8004213390:	ff d0                	callq  *%rax
  8004213392:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213396:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421339a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421339e:	0f b7 c0             	movzwl %ax,%eax
  80042133a1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042133a5:	77 0c                	ja     80042133b3 <_dwarf_frame_run_inst+0xcf3>
  80042133a7:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042133ae:	e9 dc 00 00 00       	jmpq   800421348f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042133b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133b7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133bb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133bf:	48 89 d0             	mov    %rdx,%rax
  80042133c2:	48 01 c0             	add    %rax,%rax
  80042133c5:	48 01 d0             	add    %rdx,%rax
  80042133c8:	48 c1 e0 03          	shl    $0x3,%rax
  80042133cc:	48 01 c8             	add    %rcx,%rax
  80042133cf:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  80042133d2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133d6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133da:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133de:	48 89 d0             	mov    %rdx,%rax
  80042133e1:	48 01 c0             	add    %rax,%rax
  80042133e4:	48 01 d0             	add    %rdx,%rax
  80042133e7:	48 c1 e0 03          	shl    $0x3,%rax
  80042133eb:	48 01 c8             	add    %rcx,%rax
  80042133ee:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042133f2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133f6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133fa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133fe:	48 89 d0             	mov    %rdx,%rax
  8004213401:	48 01 c0             	add    %rax,%rax
  8004213404:	48 01 d0             	add    %rdx,%rax
  8004213407:	48 c1 e0 03          	shl    $0x3,%rax
  800421340b:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  800421340f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213413:	48 89 c7             	mov    %rax,%rdi
  8004213416:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  800421341d:	00 00 00 
  8004213420:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213422:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213426:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421342a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421342e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213432:	48 89 d0             	mov    %rdx,%rax
  8004213435:	48 01 c0             	add    %rax,%rax
  8004213438:	48 01 d0             	add    %rdx,%rax
  800421343b:	48 c1 e0 03          	shl    $0x3,%rax
  800421343f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213443:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213447:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800421344b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421344f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213453:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213457:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421345b:	48 89 d0             	mov    %rdx,%rax
  800421345e:	48 01 c0             	add    %rax,%rax
  8004213461:	48 01 d0             	add    %rdx,%rax
  8004213464:	48 c1 e0 03          	shl    $0x3,%rax
  8004213468:	48 01 f0             	add    %rsi,%rax
  800421346b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421346f:	48 01 c8             	add    %rcx,%rax
  8004213472:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213476:	eb 09                	jmp    8004213481 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213478:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  800421347f:	eb 0e                	jmp    800421348f <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004213481:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213485:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213489:	0f 82 b8 f2 ff ff    	jb     8004212747 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  800421348f:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213492:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004213499:	5b                   	pop    %rbx
  800421349a:	5d                   	pop    %rbp
  800421349b:	c3                   	retq   

000000800421349c <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  800421349c:	55                   	push   %rbp
  800421349d:	48 89 e5             	mov    %rsp,%rbp
  80042134a0:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  80042134a4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042134a8:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042134ac:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042134b0:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042134b4:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  80042134b8:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  80042134bc:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  80042134c1:	75 35                	jne    80042134f8 <_dwarf_frame_get_internal_table+0x5c>
  80042134c3:	48 b9 98 af 21 04 80 	movabs $0x800421af98,%rcx
  80042134ca:	00 00 00 
  80042134cd:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  80042134d4:	00 00 00 
  80042134d7:	be 83 01 00 00       	mov    $0x183,%esi
  80042134dc:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  80042134e3:	00 00 00 
  80042134e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042134eb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042134f2:	00 00 00 
  80042134f5:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042134f8:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042134fd:	75 35                	jne    8004213534 <_dwarf_frame_get_internal_table+0x98>
  80042134ff:	48 b9 a7 af 21 04 80 	movabs $0x800421afa7,%rcx
  8004213506:	00 00 00 
  8004213509:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004213510:	00 00 00 
  8004213513:	be 86 01 00 00       	mov    $0x186,%esi
  8004213518:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  800421351f:	00 00 00 
  8004213522:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213527:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421352e:	00 00 00 
  8004213531:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  8004213534:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213538:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421353c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004213540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213544:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213549:	be 00 00 00 00       	mov    $0x0,%esi
  800421354e:	48 89 c7             	mov    %rax,%rdi
  8004213551:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  8004213558:	00 00 00 
  800421355b:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  800421355d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213561:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213565:	0f b7 d0             	movzwl %ax,%edx
  8004213568:	48 89 d0             	mov    %rdx,%rax
  800421356b:	48 01 c0             	add    %rax,%rax
  800421356e:	48 01 d0             	add    %rdx,%rax
  8004213571:	48 c1 e0 03          	shl    $0x3,%rax
  8004213575:	48 89 c2             	mov    %rax,%rdx
  8004213578:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421357c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213580:	be 00 00 00 00       	mov    $0x0,%esi
  8004213585:	48 89 c7             	mov    %rax,%rdi
  8004213588:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  800421358f:	00 00 00 
  8004213592:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213594:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421359b:	eb 2f                	jmp    80042135cc <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  800421359d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042135a1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135a5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042135a8:	48 63 d0             	movslq %eax,%rdx
  80042135ab:	48 89 d0             	mov    %rdx,%rax
  80042135ae:	48 01 c0             	add    %rax,%rax
  80042135b1:	48 01 d0             	add    %rdx,%rax
  80042135b4:	48 c1 e0 03          	shl    $0x3,%rax
  80042135b8:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042135bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042135c0:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  80042135c4:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042135c8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042135cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042135d0:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042135d4:	0f b7 c0             	movzwl %ax,%eax
  80042135d7:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042135da:	7f c1                	jg     800421359d <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  80042135dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042135e0:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042135e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  80042135e8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042135ed:	75 35                	jne    8004213624 <_dwarf_frame_get_internal_table+0x188>
  80042135ef:	48 b9 b3 af 21 04 80 	movabs $0x800421afb3,%rcx
  80042135f6:	00 00 00 
  80042135f9:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004213600:	00 00 00 
  8004213603:	be 95 01 00 00       	mov    $0x195,%esi
  8004213608:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  800421360f:	00 00 00 
  8004213612:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213617:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421361e:	00 00 00 
  8004213621:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  8004213624:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213628:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800421362c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213630:	4c 8b 40 38          	mov    0x38(%rax),%r8
  8004213634:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213638:	48 8b 48 70          	mov    0x70(%rax),%rcx
  800421363c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213640:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004213644:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213648:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421364c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004213650:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004213655:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004213659:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800421365e:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004213665:	ff ff 
  8004213667:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  800421366e:	00 
  800421366f:	48 89 c7             	mov    %rax,%rdi
  8004213672:	48 b8 c0 26 21 04 80 	movabs $0x80042126c0,%rax
  8004213679:	00 00 00 
  800421367c:	ff d0                	callq  *%rax
  800421367e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004213681:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213685:	74 08                	je     800421368f <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004213687:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421368a:	e9 98 00 00 00       	jmpq   8004213727 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  800421368f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213693:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213697:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800421369b:	77 6f                	ja     800421370c <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  800421369d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136a1:	48 8b 78 30          	mov    0x30(%rax),%rdi
  80042136a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042136a9:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042136ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042136b1:	4c 8b 50 38          	mov    0x38(%rax),%r10
  80042136b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136b9:	48 8b 48 58          	mov    0x58(%rax),%rcx
  80042136bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136c1:	48 8b 50 50          	mov    0x50(%rax),%rdx
  80042136c5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042136c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042136cd:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  80042136d1:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  80042136d6:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  80042136da:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042136df:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  80042136e3:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042136e8:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042136ec:	4d 89 d0             	mov    %r10,%r8
  80042136ef:	48 89 c7             	mov    %rax,%rdi
  80042136f2:	48 b8 c0 26 21 04 80 	movabs $0x80042126c0,%rax
  80042136f9:	00 00 00 
  80042136fc:	ff d0                	callq  *%rax
  80042136fe:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  8004213701:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213705:	74 05                	je     800421370c <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  8004213707:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421370a:	eb 1b                	jmp    8004213727 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  800421370c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213710:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213714:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  8004213717:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421371b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421371f:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004213722:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213727:	c9                   	leaveq 
  8004213728:	c3                   	retq   

0000008004213729 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004213729:	55                   	push   %rbp
  800421372a:	48 89 e5             	mov    %rsp,%rbp
  800421372d:	48 83 ec 50          	sub    $0x50,%rsp
  8004213731:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213735:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004213739:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421373d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004213741:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004213745:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004213749:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421374e:	74 07                	je     8004213757 <dwarf_get_fde_info_for_all_regs+0x2e>
  8004213750:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004213755:	75 0a                	jne    8004213761 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004213757:	b8 01 00 00 00       	mov    $0x1,%eax
  800421375c:	e9 eb 02 00 00       	jmpq   8004213a4c <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004213761:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213766:	75 35                	jne    800421379d <dwarf_get_fde_info_for_all_regs+0x74>
  8004213768:	48 b9 a7 af 21 04 80 	movabs $0x800421afa7,%rcx
  800421376f:	00 00 00 
  8004213772:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004213779:	00 00 00 
  800421377c:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004213781:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  8004213788:	00 00 00 
  800421378b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213790:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213797:	00 00 00 
  800421379a:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  800421379d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137a1:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042137a5:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042137a9:	77 19                	ja     80042137c4 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  80042137ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137af:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042137b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137b7:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042137bb:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  80042137be:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042137c2:	77 0a                	ja     80042137ce <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  80042137c4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042137c9:	e9 7e 02 00 00       	jmpq   8004213a4c <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  80042137ce:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  80042137d2:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  80042137d6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  80042137da:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042137de:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042137e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042137e6:	4d 89 c1             	mov    %r8,%r9
  80042137e9:	49 89 f8             	mov    %rdi,%r8
  80042137ec:	48 89 c7             	mov    %rax,%rdi
  80042137ef:	48 b8 9c 34 21 04 80 	movabs $0x800421349c,%rax
  80042137f6:	00 00 00 
  80042137f9:	ff d0                	callq  *%rax
  80042137fb:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042137fe:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004213802:	74 0a                	je     800421380e <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  8004213804:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213809:	e9 3e 02 00 00       	jmpq   8004213a4c <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  800421380e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213812:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213816:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  800421381a:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  800421381f:	0f 87 b1 00 00 00    	ja     80042138d6 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004213825:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004213829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421382d:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  8004213830:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213834:	48 63 c9             	movslq %ecx,%rcx
  8004213837:	48 83 c1 01          	add    $0x1,%rcx
  800421383b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421383f:	48 01 ca             	add    %rcx,%rdx
  8004213842:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004213844:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213848:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421384c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004213850:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213854:	48 63 c9             	movslq %ecx,%rcx
  8004213857:	48 83 c1 01          	add    $0x1,%rcx
  800421385b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421385f:	48 01 ca             	add    %rcx,%rdx
  8004213862:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004213865:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213869:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421386d:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213871:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213875:	48 63 c9             	movslq %ecx,%rcx
  8004213878:	48 83 c1 01          	add    $0x1,%rcx
  800421387c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213880:	48 01 ca             	add    %rcx,%rdx
  8004213883:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004213887:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421388b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421388f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213893:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213897:	48 63 c9             	movslq %ecx,%rcx
  800421389a:	48 83 c1 01          	add    $0x1,%rcx
  800421389e:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138a2:	48 01 ca             	add    %rcx,%rdx
  80042138a5:	48 83 c2 08          	add    $0x8,%rdx
  80042138a9:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  80042138ac:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042138b0:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  80042138b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138b8:	48 63 d2             	movslq %edx,%rdx
  80042138bb:	48 83 c2 01          	add    $0x1,%rdx
  80042138bf:	48 c1 e2 04          	shl    $0x4,%rdx
  80042138c3:	48 01 d0             	add    %rdx,%rax
  80042138c6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042138ca:	48 8b 00             	mov    (%rax),%rax
  80042138cd:	48 89 01             	mov    %rax,(%rcx)
  80042138d0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  80042138d4:	eb 3c                	jmp    8004213912 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  80042138d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138da:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  80042138dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138e1:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  80042138e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138e7:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042138eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138ef:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042138f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138f6:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042138fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138fe:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004213902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213906:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421390a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421390e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213912:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004213919:	e9 fd 00 00 00       	jmpq   8004213a1b <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  800421391e:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004213922:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213925:	75 05                	jne    800421392c <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  8004213927:	e9 eb 00 00 00       	jmpq   8004213a17 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  800421392c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213930:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213934:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213937:	48 63 d0             	movslq %eax,%rdx
  800421393a:	48 89 d0             	mov    %rdx,%rax
  800421393d:	48 01 c0             	add    %rax,%rax
  8004213940:	48 01 d0             	add    %rdx,%rax
  8004213943:	48 c1 e0 03          	shl    $0x3,%rax
  8004213947:	48 01 c8             	add    %rcx,%rax
  800421394a:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  800421394d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213951:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213954:	48 63 c9             	movslq %ecx,%rcx
  8004213957:	48 83 c1 01          	add    $0x1,%rcx
  800421395b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421395f:	48 01 ca             	add    %rcx,%rdx
  8004213962:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004213964:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213968:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421396c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421396f:	48 63 d0             	movslq %eax,%rdx
  8004213972:	48 89 d0             	mov    %rdx,%rax
  8004213975:	48 01 c0             	add    %rax,%rax
  8004213978:	48 01 d0             	add    %rdx,%rax
  800421397b:	48 c1 e0 03          	shl    $0x3,%rax
  800421397f:	48 01 c8             	add    %rcx,%rax
  8004213982:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004213986:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421398a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421398d:	48 63 c9             	movslq %ecx,%rcx
  8004213990:	48 83 c1 01          	add    $0x1,%rcx
  8004213994:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213998:	48 01 ca             	add    %rcx,%rdx
  800421399b:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  800421399e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139a2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042139a9:	48 63 d0             	movslq %eax,%rdx
  80042139ac:	48 89 d0             	mov    %rdx,%rax
  80042139af:	48 01 c0             	add    %rax,%rax
  80042139b2:	48 01 d0             	add    %rdx,%rax
  80042139b5:	48 c1 e0 03          	shl    $0x3,%rax
  80042139b9:	48 01 c8             	add    %rcx,%rax
  80042139bc:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042139c0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042139c4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042139c7:	48 63 c9             	movslq %ecx,%rcx
  80042139ca:	48 83 c1 01          	add    $0x1,%rcx
  80042139ce:	48 c1 e1 04          	shl    $0x4,%rcx
  80042139d2:	48 01 ca             	add    %rcx,%rdx
  80042139d5:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  80042139d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139dd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042139e4:	48 63 d0             	movslq %eax,%rdx
  80042139e7:	48 89 d0             	mov    %rdx,%rax
  80042139ea:	48 01 c0             	add    %rax,%rax
  80042139ed:	48 01 d0             	add    %rdx,%rax
  80042139f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042139f4:	48 01 c8             	add    %rcx,%rax
  80042139f7:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  80042139fb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042139ff:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a02:	48 63 c9             	movslq %ecx,%rcx
  8004213a05:	48 83 c1 01          	add    $0x1,%rcx
  8004213a09:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a0d:	48 01 ca             	add    %rcx,%rdx
  8004213a10:	48 83 c2 08          	add    $0x8,%rdx
  8004213a14:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  8004213a17:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213a1b:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004213a1f:	7f 14                	jg     8004213a35 <dwarf_get_fde_info_for_all_regs+0x30c>
  8004213a21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213a25:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004213a29:	0f b7 c0             	movzwl %ax,%eax
  8004213a2c:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213a2f:	0f 8f e9 fe ff ff    	jg     800421391e <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  8004213a35:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004213a3a:	74 0b                	je     8004213a47 <dwarf_get_fde_info_for_all_regs+0x31e>
  8004213a3c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213a40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213a44:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004213a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213a4c:	c9                   	leaveq 
  8004213a4d:	c3                   	retq   

0000008004213a4e <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004213a4e:	55                   	push   %rbp
  8004213a4f:	48 89 e5             	mov    %rsp,%rbp
  8004213a52:	48 83 ec 40          	sub    $0x40,%rsp
  8004213a56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213a5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213a5e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213a62:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213a66:	44 89 c0             	mov    %r8d,%eax
  8004213a69:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004213a6d:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004213a70:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004213a74:	75 0a                	jne    8004213a80 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004213a76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213a7b:	e9 e6 01 00 00       	jmpq   8004213c66 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004213a80:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213a84:	83 e0 f0             	and    $0xfffffff0,%eax
  8004213a87:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004213a8a:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004213a8e:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213a92:	83 f8 0c             	cmp    $0xc,%eax
  8004213a95:	0f 87 72 01 00 00    	ja     8004213c0d <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004213a9b:	89 c0                	mov    %eax,%eax
  8004213a9d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213aa4:	00 
  8004213aa5:	48 b8 c0 af 21 04 80 	movabs $0x800421afc0,%rax
  8004213aac:	00 00 00 
  8004213aaf:	48 01 d0             	add    %rdx,%rax
  8004213ab2:	48 8b 00             	mov    (%rax),%rax
  8004213ab5:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004213ab7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213abb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213abf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213ac3:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213ac6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213aca:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213ace:	48 89 cf             	mov    %rcx,%rdi
  8004213ad1:	ff d0                	callq  *%rax
  8004213ad3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213ad7:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213ada:	e9 35 01 00 00       	jmpq   8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004213adf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213ae7:	48 89 d6             	mov    %rdx,%rsi
  8004213aea:	48 89 c7             	mov    %rax,%rdi
  8004213aed:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004213af4:	00 00 00 
  8004213af7:	ff d0                	callq  *%rax
  8004213af9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213afd:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b00:	e9 0f 01 00 00       	jmpq   8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004213b05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b09:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b0d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b11:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b15:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213b1a:	48 89 cf             	mov    %rcx,%rdi
  8004213b1d:	ff d0                	callq  *%rax
  8004213b1f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b23:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b26:	e9 e9 00 00 00       	jmpq   8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004213b2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b2f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b33:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b37:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b3b:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213b40:	48 89 cf             	mov    %rcx,%rdi
  8004213b43:	ff d0                	callq  *%rax
  8004213b45:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b49:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b4c:	e9 c3 00 00 00       	jmpq   8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004213b51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b55:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b59:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b5d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b61:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213b66:	48 89 cf             	mov    %rcx,%rdi
  8004213b69:	ff d0                	callq  *%rax
  8004213b6b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b6f:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b72:	e9 9d 00 00 00       	jmpq   8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004213b77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213b7f:	48 89 d6             	mov    %rdx,%rsi
  8004213b82:	48 89 c7             	mov    %rax,%rdi
  8004213b85:	48 b8 3e 0a 21 04 80 	movabs $0x8004210a3e,%rax
  8004213b8c:	00 00 00 
  8004213b8f:	ff d0                	callq  *%rax
  8004213b91:	48 89 c2             	mov    %rax,%rdx
  8004213b94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213b98:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213b9b:	eb 77                	jmp    8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004213b9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ba1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ba5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213ba9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bad:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213bb2:	48 89 cf             	mov    %rcx,%rdi
  8004213bb5:	ff d0                	callq  *%rax
  8004213bb7:	48 0f bf d0          	movswq %ax,%rdx
  8004213bbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bbf:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213bc2:	eb 50                	jmp    8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004213bc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213bc8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213bcc:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213bd0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bd4:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213bd9:	48 89 cf             	mov    %rcx,%rdi
  8004213bdc:	ff d0                	callq  *%rax
  8004213bde:	48 63 d0             	movslq %eax,%rdx
  8004213be1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213be5:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213be8:	eb 2a                	jmp    8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004213bea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213bee:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213bf2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213bf6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bfa:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213bff:	48 89 cf             	mov    %rcx,%rdi
  8004213c02:	ff d0                	callq  *%rax
  8004213c04:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213c08:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213c0b:	eb 07                	jmp    8004213c14 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213c0d:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213c12:	eb 52                	jmp    8004213c66 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004213c14:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004213c18:	75 47                	jne    8004213c61 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004213c1a:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213c1e:	83 f8 01             	cmp    $0x1,%eax
  8004213c21:	7c 3d                	jl     8004213c60 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213c23:	83 f8 04             	cmp    $0x4,%eax
  8004213c26:	7e 0a                	jle    8004213c32 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004213c28:	83 e8 09             	sub    $0x9,%eax
  8004213c2b:	83 f8 03             	cmp    $0x3,%eax
  8004213c2e:	77 30                	ja     8004213c60 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213c30:	eb 17                	jmp    8004213c49 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004213c32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c36:	48 8b 10             	mov    (%rax),%rdx
  8004213c39:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c3d:	48 01 c2             	add    %rax,%rdx
  8004213c40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c44:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213c47:	eb 18                	jmp    8004213c61 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004213c49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c4d:	48 8b 10             	mov    (%rax),%rdx
  8004213c50:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c54:	48 01 c2             	add    %rax,%rdx
  8004213c57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c5b:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213c5e:	eb 01                	jmp    8004213c61 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004213c60:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004213c61:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213c66:	c9                   	leaveq 
  8004213c67:	c3                   	retq   

0000008004213c68 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004213c68:	55                   	push   %rbp
  8004213c69:	48 89 e5             	mov    %rsp,%rbp
  8004213c6c:	48 83 ec 50          	sub    $0x50,%rsp
  8004213c70:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213c74:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213c78:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004213c7c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c80:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213c84:	48 85 c0             	test   %rax,%rax
  8004213c87:	74 0f                	je     8004213c98 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004213c89:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c8d:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213c91:	0f b6 00             	movzbl (%rax),%eax
  8004213c94:	3c 7a                	cmp    $0x7a,%al
  8004213c96:	74 35                	je     8004213ccd <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004213c98:	48 b9 28 b0 21 04 80 	movabs $0x800421b028,%rcx
  8004213c9f:	00 00 00 
  8004213ca2:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004213ca9:	00 00 00 
  8004213cac:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004213cb1:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  8004213cb8:	00 00 00 
  8004213cbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213cc0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213cc7:	00 00 00 
  8004213cca:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004213ccd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213cd1:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213cd5:	48 83 c0 01          	add    $0x1,%rax
  8004213cd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004213cdd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ce1:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213ce5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004213ce9:	e9 af 00 00 00       	jmpq   8004213d9d <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004213cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213cf2:	0f b6 00             	movzbl (%rax),%eax
  8004213cf5:	0f b6 c0             	movzbl %al,%eax
  8004213cf8:	83 f8 50             	cmp    $0x50,%eax
  8004213cfb:	74 18                	je     8004213d15 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004213cfd:	83 f8 52             	cmp    $0x52,%eax
  8004213d00:	74 77                	je     8004213d79 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004213d02:	83 f8 4c             	cmp    $0x4c,%eax
  8004213d05:	0f 85 86 00 00 00    	jne    8004213d91 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004213d0b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004213d10:	e9 83 00 00 00       	jmpq   8004213d98 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004213d15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213d19:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213d1d:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213d21:	0f b6 00             	movzbl (%rax),%eax
  8004213d24:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004213d27:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004213d2e:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004213d2f:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004213d34:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004213d38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213d3c:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004213d40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213d44:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004213d48:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004213d4c:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004213d52:	48 89 c7             	mov    %rax,%rdi
  8004213d55:	48 b8 4e 3a 21 04 80 	movabs $0x8004213a4e,%rax
  8004213d5c:	00 00 00 
  8004213d5f:	ff d0                	callq  *%rax
  8004213d61:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004213d64:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004213d68:	74 05                	je     8004213d6f <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004213d6a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004213d6d:	eb 42                	jmp    8004213db1 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004213d6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213d73:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004213d77:	eb 1f                	jmp    8004213d98 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004213d79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213d7d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213d81:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213d85:	0f b6 10             	movzbl (%rax),%edx
  8004213d88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d8c:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004213d8f:	eb 07                	jmp    8004213d98 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213d91:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213d96:	eb 19                	jmp    8004213db1 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004213d98:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004213d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213da1:	0f b6 00             	movzbl (%rax),%eax
  8004213da4:	84 c0                	test   %al,%al
  8004213da6:	0f 85 42 ff ff ff    	jne    8004213cee <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004213dac:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213db1:	c9                   	leaveq 
  8004213db2:	c3                   	retq   

0000008004213db3 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004213db3:	55                   	push   %rbp
  8004213db4:	48 89 e5             	mov    %rsp,%rbp
  8004213db7:	48 83 ec 60          	sub    $0x60,%rsp
  8004213dbb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213dbf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213dc3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213dc7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213dcb:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004213dcf:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213dd4:	75 35                	jne    8004213e0b <_dwarf_frame_set_cie+0x58>
  8004213dd6:	48 b9 5d b0 21 04 80 	movabs $0x800421b05d,%rcx
  8004213ddd:	00 00 00 
  8004213de0:	48 ba a7 ae 21 04 80 	movabs $0x800421aea7,%rdx
  8004213de7:	00 00 00 
  8004213dea:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004213def:	48 bf bc ae 21 04 80 	movabs $0x800421aebc,%rdi
  8004213df6:	00 00 00 
  8004213df9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213dfe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213e05:	00 00 00 
  8004213e08:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004213e0b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213e0f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004213e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e17:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e1b:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004213e1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213e22:	48 8b 10             	mov    (%rax),%rdx
  8004213e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e29:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004213e2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e31:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e35:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e39:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e3d:	48 89 d1             	mov    %rdx,%rcx
  8004213e40:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e44:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213e49:	48 89 cf             	mov    %rcx,%rdi
  8004213e4c:	ff d0                	callq  *%rax
  8004213e4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004213e52:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213e57:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004213e5b:	75 2e                	jne    8004213e8b <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004213e5d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004213e64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e68:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e6c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e70:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e74:	48 89 d1             	mov    %rdx,%rcx
  8004213e77:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e7b:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213e80:	48 89 cf             	mov    %rcx,%rdi
  8004213e83:	ff d0                	callq  *%rax
  8004213e85:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213e89:	eb 07                	jmp    8004213e92 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004213e8b:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004213e92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e96:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004213e9a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213e9e:	48 8b 00             	mov    (%rax),%rax
  8004213ea1:	48 29 c2             	sub    %rax,%rdx
  8004213ea4:	48 89 d0             	mov    %rdx,%rax
  8004213ea7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004213eab:	73 0a                	jae    8004213eb7 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004213ead:	b8 12 00 00 00       	mov    $0x12,%eax
  8004213eb2:	e9 5d 03 00 00       	jmpq   8004214214 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004213eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213ebb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ebf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213ec3:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213ec7:	48 89 d1             	mov    %rdx,%rcx
  8004213eca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004213ecd:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213ed1:	48 89 cf             	mov    %rcx,%rdi
  8004213ed4:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004213ed6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213eda:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004213ede:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004213ee2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213ee6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213eea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213eee:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213ef2:	48 89 d1             	mov    %rdx,%rcx
  8004213ef5:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213ef9:	ba 01 00 00 00       	mov    $0x1,%edx
  8004213efe:	48 89 cf             	mov    %rcx,%rdi
  8004213f01:	ff d0                	callq  *%rax
  8004213f03:	89 c2                	mov    %eax,%edx
  8004213f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f09:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f11:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213f15:	66 83 f8 01          	cmp    $0x1,%ax
  8004213f19:	74 26                	je     8004213f41 <_dwarf_frame_set_cie+0x18e>
  8004213f1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f1f:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213f23:	66 83 f8 03          	cmp    $0x3,%ax
  8004213f27:	74 18                	je     8004213f41 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004213f29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f2d:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213f31:	66 83 f8 04          	cmp    $0x4,%ax
  8004213f35:	74 0a                	je     8004213f41 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004213f37:	b8 16 00 00 00       	mov    $0x16,%eax
  8004213f3c:	e9 d3 02 00 00       	jmpq   8004214214 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004213f41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f45:	48 8b 10             	mov    (%rax),%rdx
  8004213f48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f4c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213f50:	48 01 d0             	add    %rdx,%rax
  8004213f53:	48 89 c2             	mov    %rax,%rdx
  8004213f56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f5a:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004213f5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f62:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213f66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004213f6a:	90                   	nop
  8004213f6b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f6f:	48 8b 00             	mov    (%rax),%rax
  8004213f72:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004213f76:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004213f7a:	48 89 0a             	mov    %rcx,(%rdx)
  8004213f7d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213f81:	48 01 d0             	add    %rdx,%rax
  8004213f84:	0f b6 00             	movzbl (%rax),%eax
  8004213f87:	84 c0                	test   %al,%al
  8004213f89:	75 e0                	jne    8004213f6b <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004213f8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f8f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213f93:	0f b6 00             	movzbl (%rax),%eax
  8004213f96:	84 c0                	test   %al,%al
  8004213f98:	74 48                	je     8004213fe2 <_dwarf_frame_set_cie+0x22f>
  8004213f9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f9e:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213fa2:	0f b6 00             	movzbl (%rax),%eax
  8004213fa5:	3c 7a                	cmp    $0x7a,%al
  8004213fa7:	74 39                	je     8004213fe2 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004213fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fad:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004213fb1:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004213fb5:	75 07                	jne    8004213fbe <_dwarf_frame_set_cie+0x20b>
  8004213fb7:	b8 04 00 00 00       	mov    $0x4,%eax
  8004213fbc:	eb 05                	jmp    8004213fc3 <_dwarf_frame_set_cie+0x210>
  8004213fbe:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004213fc3:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004213fc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fca:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004213fce:	48 01 c2             	add    %rax,%rdx
  8004213fd1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213fd5:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004213fd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213fdd:	e9 32 02 00 00       	jmpq   8004214214 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004213fe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fe6:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213fea:	48 be 65 b0 21 04 80 	movabs $0x800421b065,%rsi
  8004213ff1:	00 00 00 
  8004213ff4:	48 89 c7             	mov    %rax,%rdi
  8004213ff7:	48 b8 f5 03 21 04 80 	movabs $0x80042103f5,%rax
  8004213ffe:	00 00 00 
  8004214001:	ff d0                	callq  *%rax
  8004214003:	48 85 c0             	test   %rax,%rax
  8004214006:	74 28                	je     8004214030 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214008:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421400c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214010:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214014:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214017:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421401b:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421401f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214023:	48 89 cf             	mov    %rcx,%rdi
  8004214026:	ff d0                	callq  *%rax
  8004214028:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421402c:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214034:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214038:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421403c:	48 89 d6             	mov    %rdx,%rsi
  800421403f:	48 89 c7             	mov    %rax,%rdi
  8004214042:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004214049:	00 00 00 
  800421404c:	ff d0                	callq  *%rax
  800421404e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214052:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214056:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421405a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421405e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214062:	48 89 d6             	mov    %rdx,%rsi
  8004214065:	48 89 c7             	mov    %rax,%rdi
  8004214068:	48 b8 3e 0a 21 04 80 	movabs $0x8004210a3e,%rax
  800421406f:	00 00 00 
  8004214072:	ff d0                	callq  *%rax
  8004214074:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214078:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  800421407c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214080:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214084:	66 83 f8 01          	cmp    $0x1,%ax
  8004214088:	75 2b                	jne    80042140b5 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800421408a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421408e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214092:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214096:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421409a:	48 89 d1             	mov    %rdx,%rcx
  800421409d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042140a1:	ba 01 00 00 00       	mov    $0x1,%edx
  80042140a6:	48 89 cf             	mov    %rcx,%rdi
  80042140a9:	ff d0                	callq  *%rax
  80042140ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140af:	48 89 42 48          	mov    %rax,0x48(%rdx)
  80042140b3:	eb 26                	jmp    80042140db <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042140b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140b9:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042140bd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042140c1:	48 89 d6             	mov    %rdx,%rsi
  80042140c4:	48 89 c7             	mov    %rax,%rdi
  80042140c7:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  80042140ce:	00 00 00 
  80042140d1:	ff d0                	callq  *%rax
  80042140d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140d7:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  80042140db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140df:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042140e3:	0f b6 00             	movzbl (%rax),%eax
  80042140e6:	3c 7a                	cmp    $0x7a,%al
  80042140e8:	0f 85 93 00 00 00    	jne    8004214181 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042140ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140f2:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042140f6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042140fa:	48 89 d6             	mov    %rdx,%rsi
  80042140fd:	48 89 c7             	mov    %rax,%rdi
  8004214100:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  8004214107:	00 00 00 
  800421410a:	ff d0                	callq  *%rax
  800421410c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214110:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214114:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214118:	48 8b 10             	mov    (%rax),%rdx
  800421411b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421411f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214123:	48 01 d0             	add    %rdx,%rax
  8004214126:	48 89 c2             	mov    %rax,%rdx
  8004214129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421412d:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214135:	48 8b 10             	mov    (%rax),%rdx
  8004214138:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421413c:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214140:	48 01 c2             	add    %rax,%rdx
  8004214143:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214147:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  800421414a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421414e:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214152:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214156:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421415a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421415e:	48 89 ce             	mov    %rcx,%rsi
  8004214161:	48 89 c7             	mov    %rax,%rdi
  8004214164:	48 b8 68 3c 21 04 80 	movabs $0x8004213c68,%rax
  800421416b:	00 00 00 
  800421416e:	ff d0                	callq  *%rax
  8004214170:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214173:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214177:	74 08                	je     8004214181 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214179:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421417c:	e9 93 00 00 00       	jmpq   8004214214 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214181:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214185:	48 8b 10             	mov    (%rax),%rdx
  8004214188:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421418c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214190:	48 01 d0             	add    %rdx,%rax
  8004214193:	48 89 c2             	mov    %rax,%rdx
  8004214196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421419a:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  800421419e:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042141a2:	75 2a                	jne    80042141ce <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  80042141a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141a8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042141ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042141b0:	48 01 c2             	add    %rax,%rdx
  80042141b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141b7:	48 8b 00             	mov    (%rax),%rax
  80042141ba:	48 29 c2             	sub    %rax,%rdx
  80042141bd:	48 89 d0             	mov    %rdx,%rax
  80042141c0:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042141c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141c8:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042141cc:	eb 28                	jmp    80042141f6 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  80042141ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141d2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042141d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042141da:	48 01 c2             	add    %rax,%rdx
  80042141dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141e1:	48 8b 00             	mov    (%rax),%rax
  80042141e4:	48 29 c2             	sub    %rax,%rdx
  80042141e7:	48 89 d0             	mov    %rdx,%rax
  80042141ea:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042141ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141f2:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  80042141f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141fa:	48 8b 10             	mov    (%rax),%rdx
  80042141fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214201:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214205:	48 01 c2             	add    %rax,%rdx
  8004214208:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421420c:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800421420f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214214:	c9                   	leaveq 
  8004214215:	c3                   	retq   

0000008004214216 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214216:	55                   	push   %rbp
  8004214217:	48 89 e5             	mov    %rsp,%rbp
  800421421a:	48 83 ec 70          	sub    $0x70,%rsp
  800421421e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214222:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214226:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421422a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421422e:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214232:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214236:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421423a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  800421423e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214242:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214246:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214249:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421424d:	48 8b 10             	mov    (%rax),%rdx
  8004214250:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214254:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214258:	48 01 d0             	add    %rdx,%rax
  800421425b:	48 89 c2             	mov    %rax,%rdx
  800421425e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214262:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214266:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421426a:	48 8b 10             	mov    (%rax),%rdx
  800421426d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214271:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214275:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214279:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421427d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214281:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214285:	48 89 d1             	mov    %rdx,%rcx
  8004214288:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421428c:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214291:	48 89 cf             	mov    %rcx,%rdi
  8004214294:	ff d0                	callq  *%rax
  8004214296:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800421429a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421429f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042142a3:	75 2e                	jne    80042142d3 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  80042142a5:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042142ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142b0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042142b4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042142b8:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042142bc:	48 89 d1             	mov    %rdx,%rcx
  80042142bf:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042142c3:	ba 08 00 00 00       	mov    $0x8,%edx
  80042142c8:	48 89 cf             	mov    %rcx,%rdi
  80042142cb:	ff d0                	callq  *%rax
  80042142cd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042142d1:	eb 07                	jmp    80042142da <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  80042142d3:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  80042142da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142de:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042142e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042142e6:	48 8b 00             	mov    (%rax),%rax
  80042142e9:	48 29 c2             	sub    %rax,%rdx
  80042142ec:	48 89 d0             	mov    %rdx,%rax
  80042142ef:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042142f3:	73 0a                	jae    80042142ff <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042142f5:	b8 12 00 00 00       	mov    $0x12,%eax
  80042142fa:	e9 ca 02 00 00       	jmpq   80042145c9 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  80042142ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214303:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214307:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  800421430b:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421430f:	74 5e                	je     800421436f <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214311:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214315:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214319:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421431d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214321:	48 89 d1             	mov    %rdx,%rcx
  8004214324:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214328:	ba 04 00 00 00       	mov    $0x4,%edx
  800421432d:	48 89 cf             	mov    %rcx,%rdi
  8004214330:	ff d0                	callq  *%rax
  8004214332:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214336:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  800421433a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421433e:	48 8b 10             	mov    (%rax),%rdx
  8004214341:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214345:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214349:	48 29 c2             	sub    %rax,%rdx
  800421434c:	48 89 d0             	mov    %rdx,%rax
  800421434f:	48 83 e8 04          	sub    $0x4,%rax
  8004214353:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421435b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421435f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214363:	75 3d                	jne    80042143a2 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214365:	b8 13 00 00 00       	mov    $0x13,%eax
  800421436a:	e9 5a 02 00 00       	jmpq   80042145c9 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  800421436f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214373:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214377:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421437b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421437f:	48 89 d1             	mov    %rdx,%rcx
  8004214382:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214385:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214389:	48 89 cf             	mov    %rcx,%rdi
  800421438c:	ff d0                	callq  *%rax
  800421438e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214392:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214396:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421439a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421439e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  80042143a2:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042143a6:	0f 84 c9 00 00 00    	je     8004214475 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042143ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042143b0:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042143b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042143b8:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042143bb:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042143bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042143c3:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042143c7:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  80042143cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143cf:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042143d3:	48 89 c2             	mov    %rax,%rdx
  80042143d6:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042143da:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042143de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143e2:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042143e6:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042143ea:	48 89 c7             	mov    %rax,%rdi
  80042143ed:	48 b8 4e 3a 21 04 80 	movabs $0x8004213a4e,%rax
  80042143f4:	00 00 00 
  80042143f7:	ff d0                	callq  *%rax
  80042143f9:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  80042143fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214400:	74 08                	je     800421440a <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214402:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214405:	e9 bf 01 00 00       	jmpq   80042145c9 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  800421440a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421440e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214412:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214416:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421441a:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421441e:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214422:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214426:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421442a:	48 89 c2             	mov    %rax,%rdx
  800421442d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214431:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214435:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214439:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421443d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214441:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214447:	48 89 c7             	mov    %rax,%rdi
  800421444a:	48 b8 4e 3a 21 04 80 	movabs $0x8004213a4e,%rax
  8004214451:	00 00 00 
  8004214454:	ff d0                	callq  *%rax
  8004214456:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004214459:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421445d:	74 08                	je     8004214467 <_dwarf_frame_set_fde+0x251>
			return (ret);
  800421445f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214462:	e9 62 01 00 00       	jmpq   80042145c9 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004214467:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421446b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421446f:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004214473:	eb 50                	jmp    80042144c5 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214475:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214479:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421447d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214481:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214484:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214488:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421448c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214490:	48 89 cf             	mov    %rcx,%rdi
  8004214493:	ff d0                	callq  *%rax
  8004214495:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214499:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421449d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144a1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144a5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042144a9:	8b 52 28             	mov    0x28(%rdx),%edx
  80042144ac:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042144b0:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042144b4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042144b8:	48 89 cf             	mov    %rcx,%rdi
  80042144bb:	ff d0                	callq  *%rax
  80042144bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042144c1:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  80042144c5:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042144c9:	74 6b                	je     8004214536 <_dwarf_frame_set_fde+0x320>
  80042144cb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042144cf:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042144d3:	0f b6 00             	movzbl (%rax),%eax
  80042144d6:	3c 7a                	cmp    $0x7a,%al
  80042144d8:	75 5c                	jne    8004214536 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042144da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144de:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042144e2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042144e6:	48 89 d6             	mov    %rdx,%rsi
  80042144e9:	48 89 c7             	mov    %rax,%rdi
  80042144ec:	48 b8 e2 0a 21 04 80 	movabs $0x8004210ae2,%rax
  80042144f3:	00 00 00 
  80042144f6:	ff d0                	callq  *%rax
  80042144f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042144fc:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214500:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214504:	48 8b 10             	mov    (%rax),%rdx
  8004214507:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421450b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421450f:	48 01 d0             	add    %rdx,%rax
  8004214512:	48 89 c2             	mov    %rax,%rdx
  8004214515:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214519:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  800421451d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214521:	48 8b 10             	mov    (%rax),%rdx
  8004214524:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214528:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421452c:	48 01 c2             	add    %rax,%rdx
  800421452f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214533:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214536:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421453a:	48 8b 10             	mov    (%rax),%rdx
  800421453d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214541:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214545:	48 01 d0             	add    %rdx,%rax
  8004214548:	48 89 c2             	mov    %rax,%rdx
  800421454b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421454f:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  8004214553:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214557:	75 2a                	jne    8004214583 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004214559:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421455d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214561:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214565:	48 01 c2             	add    %rax,%rdx
  8004214568:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421456c:	48 8b 00             	mov    (%rax),%rax
  800421456f:	48 29 c2             	sub    %rax,%rdx
  8004214572:	48 89 d0             	mov    %rdx,%rax
  8004214575:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214579:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421457d:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004214581:	eb 28                	jmp    80042145ab <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004214583:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214587:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421458b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421458f:	48 01 c2             	add    %rax,%rdx
  8004214592:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214596:	48 8b 00             	mov    (%rax),%rax
  8004214599:	48 29 c2             	sub    %rax,%rdx
  800421459c:	48 89 d0             	mov    %rdx,%rax
  800421459f:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042145a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145a7:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  80042145ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042145af:	48 8b 10             	mov    (%rax),%rdx
  80042145b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145b6:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042145ba:	48 01 c2             	add    %rax,%rdx
  80042145bd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042145c1:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042145c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042145c9:	c9                   	leaveq 
  80042145ca:	c3                   	retq   

00000080042145cb <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042145cb:	55                   	push   %rbp
  80042145cc:	48 89 e5             	mov    %rsp,%rbp
  80042145cf:	48 83 ec 20          	sub    $0x20,%rsp
  80042145d3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042145d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  80042145db:	48 b8 a0 d6 49 04 80 	movabs $0x800449d6a0,%rax
  80042145e2:	00 00 00 
  80042145e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  80042145e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145ed:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042145f1:	48 85 c0             	test   %rax,%rax
  80042145f4:	74 07                	je     80042145fd <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  80042145f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042145fb:	eb 33                	jmp    8004214630 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  80042145fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214601:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  8004214605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214609:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  800421460d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214611:	48 b9 20 be 69 04 80 	movabs $0x800469be20,%rcx
  8004214618:	00 00 00 
  800421461b:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  800421461f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214623:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214627:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  800421462b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214630:	c9                   	leaveq 
  8004214631:	c3                   	retq   

0000008004214632 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  8004214632:	55                   	push   %rbp
  8004214633:	48 89 e5             	mov    %rsp,%rbp
  8004214636:	48 83 ec 60          	sub    $0x60,%rsp
  800421463a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421463e:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004214641:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214645:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004214649:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214650:	00 00 00 
  8004214653:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004214657:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  800421465e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214662:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214666:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  800421466a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421466e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214672:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214676:	48 39 c2             	cmp    %rax,%rdx
  8004214679:	0f 86 fe 01 00 00    	jbe    800421487d <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  800421467f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214683:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004214687:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421468b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421468f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214693:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214697:	48 89 d1             	mov    %rdx,%rcx
  800421469a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421469e:	ba 04 00 00 00       	mov    $0x4,%edx
  80042146a3:	48 89 cf             	mov    %rcx,%rdi
  80042146a6:	ff d0                	callq  *%rax
  80042146a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  80042146ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042146b1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042146b5:	75 2e                	jne    80042146e5 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  80042146b7:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  80042146be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146c2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146c6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042146ca:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042146ce:	48 89 d1             	mov    %rdx,%rcx
  80042146d1:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042146d5:	ba 08 00 00 00       	mov    $0x8,%edx
  80042146da:	48 89 cf             	mov    %rcx,%rdi
  80042146dd:	ff d0                	callq  *%rax
  80042146df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042146e3:	eb 07                	jmp    80042146ec <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  80042146e5:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  80042146ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146f0:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042146f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042146f8:	48 29 c2             	sub    %rax,%rdx
  80042146fb:	48 89 d0             	mov    %rdx,%rax
  80042146fe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214702:	72 0d                	jb     8004214711 <_dwarf_get_next_fde+0xdf>
  8004214704:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214709:	75 10                	jne    800421471b <_dwarf_get_next_fde+0xe9>
  800421470b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421470f:	75 0a                	jne    800421471b <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214711:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214716:	e9 67 01 00 00       	jmpq   8004214882 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  800421471b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421471f:	74 11                	je     8004214732 <_dwarf_get_next_fde+0x100>
  8004214721:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214726:	75 0a                	jne    8004214732 <_dwarf_get_next_fde+0x100>
			return(-1);
  8004214728:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421472d:	e9 50 01 00 00       	jmpq   8004214882 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  8004214732:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214736:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421473a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421473e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214742:	48 89 d1             	mov    %rdx,%rcx
  8004214745:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214748:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421474c:	48 89 cf             	mov    %rcx,%rdi
  800421474f:	ff d0                	callq  *%rax
  8004214751:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  8004214755:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214759:	74 79                	je     80042147d4 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  800421475b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004214760:	75 32                	jne    8004214794 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214762:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214766:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421476a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421476e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214772:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214776:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421477a:	49 89 f8             	mov    %rdi,%r8
  800421477d:	48 89 c7             	mov    %rax,%rdi
  8004214780:	48 b8 b3 3d 21 04 80 	movabs $0x8004213db3,%rax
  8004214787:	00 00 00 
  800421478a:	ff d0                	callq  *%rax
  800421478c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421478f:	e9 c8 00 00 00       	jmpq   800421485c <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  8004214794:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214798:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421479c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042147a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042147a4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042147a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147ac:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042147b0:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042147b4:	4d 89 c1             	mov    %r8,%r9
  80042147b7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  80042147bd:	48 89 c7             	mov    %rax,%rdi
  80042147c0:	48 b8 16 42 21 04 80 	movabs $0x8004214216,%rax
  80042147c7:	00 00 00 
  80042147ca:	ff d0                	callq  *%rax
  80042147cc:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042147cf:	e9 88 00 00 00       	jmpq   800421485c <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  80042147d4:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042147d8:	75 0b                	jne    80042147e5 <_dwarf_get_next_fde+0x1b3>
  80042147da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042147df:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042147e3:	74 0d                	je     80042147f2 <_dwarf_get_next_fde+0x1c0>
  80042147e5:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042147e9:	75 36                	jne    8004214821 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  80042147eb:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  80042147f0:	75 2f                	jne    8004214821 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042147f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042147f6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042147fa:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042147fe:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214802:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214806:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421480a:	49 89 f8             	mov    %rdi,%r8
  800421480d:	48 89 c7             	mov    %rax,%rdi
  8004214810:	48 b8 b3 3d 21 04 80 	movabs $0x8004213db3,%rax
  8004214817:	00 00 00 
  800421481a:	ff d0                	callq  *%rax
  800421481c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421481f:	eb 3b                	jmp    800421485c <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004214821:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214825:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004214829:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800421482d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214831:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214835:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214839:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421483d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214841:	4d 89 c1             	mov    %r8,%r9
  8004214844:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421484a:	48 89 c7             	mov    %rax,%rdi
  800421484d:	48 b8 16 42 21 04 80 	movabs $0x8004214216,%rax
  8004214854:	00 00 00 
  8004214857:	ff d0                	callq  *%rax
  8004214859:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  800421485c:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004214860:	74 07                	je     8004214869 <_dwarf_get_next_fde+0x237>
			return(-1);
  8004214862:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214867:	eb 19                	jmp    8004214882 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004214869:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421486d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004214871:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214879:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  800421487d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214882:	c9                   	leaveq 
  8004214883:	c3                   	retq   

0000008004214884 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004214884:	55                   	push   %rbp
  8004214885:	48 89 e5             	mov    %rsp,%rbp
  8004214888:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421488c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214890:	89 f0                	mov    %esi,%eax
  8004214892:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004214896:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421489a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421489e:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  80042148a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148a6:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  80042148aa:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  80042148ae:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  80042148b2:	c9                   	leaveq 
  80042148b3:	c3                   	retq   

00000080042148b4 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042148b4:	55                   	push   %rbp
  80042148b5:	48 89 e5             	mov    %rsp,%rbp
  80042148b8:	48 83 ec 10          	sub    $0x10,%rsp
  80042148bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042148c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  80042148c4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042148c9:	75 0a                	jne    80042148d5 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042148cb:	b8 01 00 00 00       	mov    $0x1,%eax
  80042148d0:	e9 85 00 00 00       	jmpq   800421495a <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  80042148d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148d9:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042148dd:	48 85 c0             	test   %rax,%rax
  80042148e0:	75 25                	jne    8004214907 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  80042148e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042148e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148ea:	48 89 d6             	mov    %rdx,%rsi
  80042148ed:	48 89 c7             	mov    %rax,%rdi
  80042148f0:	48 b8 cb 45 21 04 80 	movabs $0x80042145cb,%rax
  80042148f7:	00 00 00 
  80042148fa:	ff d0                	callq  *%rax
  80042148fc:	85 c0                	test   %eax,%eax
  80042148fe:	74 07                	je     8004214907 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004214900:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214905:	eb 53                	jmp    800421495a <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  8004214907:	48 bf a0 c6 22 04 80 	movabs $0x800422c6a0,%rdi
  800421490e:	00 00 00 
  8004214911:	48 b8 80 23 21 04 80 	movabs $0x8004212380,%rax
  8004214918:	00 00 00 
  800421491b:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  800421491d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214921:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004214928:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004214929:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214930:	00 00 00 
  8004214933:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214937:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421493b:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  800421493f:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214946:	00 00 00 
  8004214949:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421494d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214951:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004214955:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421495a:	c9                   	leaveq 
  800421495b:	c3                   	retq   

000000800421495c <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  800421495c:	55                   	push   %rbp
  800421495d:	48 89 e5             	mov    %rsp,%rbp
  8004214960:	53                   	push   %rbx
  8004214961:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004214968:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800421496c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004214970:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214977:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  800421497e:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004214985:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  800421498c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214990:	48 83 c0 48          	add    $0x48,%rax
  8004214994:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004214998:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421499f:	00 
  80042149a0:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  80042149a7:	00 
  80042149a8:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  80042149af:	00 
  80042149b0:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042149b7:	00 
  80042149b8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042149bc:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042149c0:	0f b6 c0             	movzbl %al,%eax
  80042149c3:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042149c6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  80042149cd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  80042149d4:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  80042149db:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042149e2:	e9 0a 05 00 00       	jmpq   8004214ef1 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  80042149e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042149ee:	0f b6 00             	movzbl (%rax),%eax
  80042149f1:	84 c0                	test   %al,%al
  80042149f3:	0f 85 78 01 00 00    	jne    8004214b71 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  80042149f9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a00:	48 83 c0 01          	add    $0x1,%rax
  8004214a04:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004214a0b:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214a12:	48 89 c7             	mov    %rax,%rdi
  8004214a15:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214a1c:	00 00 00 
  8004214a1f:	ff d0                	callq  *%rax
  8004214a21:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004214a25:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a2c:	0f b6 00             	movzbl (%rax),%eax
  8004214a2f:	0f b6 c0             	movzbl %al,%eax
  8004214a32:	83 f8 02             	cmp    $0x2,%eax
  8004214a35:	74 7a                	je     8004214ab1 <_dwarf_lineno_run_program+0x155>
  8004214a37:	83 f8 03             	cmp    $0x3,%eax
  8004214a3a:	0f 84 b3 00 00 00    	je     8004214af3 <_dwarf_lineno_run_program+0x197>
  8004214a40:	83 f8 01             	cmp    $0x1,%eax
  8004214a43:	0f 85 09 01 00 00    	jne    8004214b52 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004214a49:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a50:	48 83 c0 01          	add    $0x1,%rax
  8004214a54:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004214a5b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004214a62:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004214a69:	00 
  8004214a6a:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214a71:	00 
  8004214a72:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004214a79:	00 
  8004214a7a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214a81:	00 
  8004214a82:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214a86:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214a8a:	0f b6 c0             	movzbl %al,%eax
  8004214a8d:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214a90:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214a97:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214a9e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214aa5:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214aac:	e9 bb 00 00 00       	jmpq   8004214b6c <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004214ab1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214ab8:	48 83 c0 01          	add    $0x1,%rax
  8004214abc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004214ac3:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214aca:	00 00 00 
  8004214acd:	48 8b 00             	mov    (%rax),%rax
  8004214ad0:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214ad4:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004214ad8:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004214adc:	0f b6 ca             	movzbl %dl,%ecx
  8004214adf:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214ae6:	89 ce                	mov    %ecx,%esi
  8004214ae8:	48 89 d7             	mov    %rdx,%rdi
  8004214aeb:	ff d0                	callq  *%rax
  8004214aed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004214af1:	eb 79                	jmp    8004214b6c <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004214af3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214afa:	48 83 c0 01          	add    $0x1,%rax
  8004214afe:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004214b05:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214b0c:	00 00 00 
  8004214b0f:	48 8b 08             	mov    (%rax),%rcx
  8004214b12:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004214b19:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004214b20:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214b24:	49 89 c8             	mov    %rcx,%r8
  8004214b27:	48 89 d1             	mov    %rdx,%rcx
  8004214b2a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004214b2f:	48 89 c7             	mov    %rax,%rdi
  8004214b32:	48 b8 14 4f 21 04 80 	movabs $0x8004214f14,%rax
  8004214b39:	00 00 00 
  8004214b3c:	ff d0                	callq  *%rax
  8004214b3e:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004214b41:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004214b45:	74 09                	je     8004214b50 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004214b47:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004214b48:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004214b4b:	e9 ba 03 00 00       	jmpq   8004214f0a <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004214b50:	eb 1a                	jmp    8004214b6c <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004214b52:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004214b59:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214b5d:	48 01 d0             	add    %rdx,%rax
  8004214b60:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004214b67:	e9 85 03 00 00       	jmpq   8004214ef1 <_dwarf_lineno_run_program+0x595>
  8004214b6c:	e9 80 03 00 00       	jmpq   8004214ef1 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004214b71:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b78:	0f b6 00             	movzbl (%rax),%eax
  8004214b7b:	84 c0                	test   %al,%al
  8004214b7d:	0f 84 3c 02 00 00    	je     8004214dbf <_dwarf_lineno_run_program+0x463>
  8004214b83:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b8a:	0f b6 10             	movzbl (%rax),%edx
  8004214b8d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214b91:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214b95:	38 c2                	cmp    %al,%dl
  8004214b97:	0f 83 22 02 00 00    	jae    8004214dbf <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004214b9d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214ba4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214ba8:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214baf:	0f b6 00             	movzbl (%rax),%eax
  8004214bb2:	0f b6 c0             	movzbl %al,%eax
  8004214bb5:	83 f8 0c             	cmp    $0xc,%eax
  8004214bb8:	0f 87 fb 01 00 00    	ja     8004214db9 <_dwarf_lineno_run_program+0x45d>
  8004214bbe:	89 c0                	mov    %eax,%eax
  8004214bc0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214bc7:	00 
  8004214bc8:	48 b8 68 b0 21 04 80 	movabs $0x800421b068,%rax
  8004214bcf:	00 00 00 
  8004214bd2:	48 01 d0             	add    %rdx,%rax
  8004214bd5:	48 8b 00             	mov    (%rax),%rax
  8004214bd8:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004214bda:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214be1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214be5:	73 0a                	jae    8004214bf1 <_dwarf_lineno_run_program+0x295>
  8004214be7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214bec:	e9 19 03 00 00       	jmpq   8004214f0a <_dwarf_lineno_run_program+0x5ae>
  8004214bf1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bf5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214bf9:	48 89 10             	mov    %rdx,(%rax)
  8004214bfc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c00:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214c07:	00 
  8004214c08:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c0c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214c10:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214c14:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c18:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214c1c:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214c20:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214c24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c28:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214c2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c30:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214c33:	89 50 28             	mov    %edx,0x28(%rax)
  8004214c36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c3a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214c3d:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214c40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c44:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214c47:	89 50 30             	mov    %edx,0x30(%rax)
  8004214c4a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214c4e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214c55:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214c59:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214c5d:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004214c64:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004214c6b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004214c72:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214c79:	e9 3c 01 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214c7e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214c85:	48 89 c7             	mov    %rax,%rdi
  8004214c88:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214c8f:	00 00 00 
  8004214c92:	ff d0                	callq  *%rax
					li->li_minlen;
  8004214c94:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004214c98:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214c9c:	0f b6 d2             	movzbl %dl,%edx
  8004214c9f:	48 0f af c2          	imul   %rdx,%rax
  8004214ca3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004214ca7:	e9 0e 01 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004214cac:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214cb3:	48 89 c7             	mov    %rax,%rdi
  8004214cb6:	48 b8 61 0b 21 04 80 	movabs $0x8004210b61,%rax
  8004214cbd:	00 00 00 
  8004214cc0:	ff d0                	callq  *%rax
  8004214cc2:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004214cc6:	e9 ef 00 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004214ccb:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214cd2:	48 89 c7             	mov    %rax,%rdi
  8004214cd5:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214cdc:	00 00 00 
  8004214cdf:	ff d0                	callq  *%rax
  8004214ce1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004214ce5:	e9 d0 00 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004214cea:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214cf1:	48 89 c7             	mov    %rax,%rdi
  8004214cf4:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214cfb:	00 00 00 
  8004214cfe:	ff d0                	callq  *%rax
  8004214d00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004214d04:	e9 b1 00 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004214d09:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004214d0d:	0f 94 c0             	sete   %al
  8004214d10:	0f b6 c0             	movzbl %al,%eax
  8004214d13:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004214d16:	e9 9f 00 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004214d1b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004214d22:	e9 93 00 00 00       	jmpq   8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004214d27:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d2b:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214d2f:	0f b6 c0             	movzbl %al,%eax
  8004214d32:	ba ff 00 00 00       	mov    $0xff,%edx
  8004214d37:	89 d1                	mov    %edx,%ecx
  8004214d39:	29 c1                	sub    %eax,%ecx
  8004214d3b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d3f:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214d43:	0f b6 d8             	movzbl %al,%ebx
  8004214d46:	89 c8                	mov    %ecx,%eax
  8004214d48:	99                   	cltd   
  8004214d49:	f7 fb                	idiv   %ebx
  8004214d4b:	89 c2                	mov    %eax,%edx
  8004214d4d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d51:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214d55:	0f b6 c0             	movzbl %al,%eax
  8004214d58:	0f af c2             	imul   %edx,%eax
  8004214d5b:	48 98                	cltq   
  8004214d5d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214d61:	eb 57                	jmp    8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004214d63:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214d6a:	00 00 00 
  8004214d6d:	48 8b 00             	mov    (%rax),%rax
  8004214d70:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214d74:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214d7b:	be 02 00 00 00       	mov    $0x2,%esi
  8004214d80:	48 89 d7             	mov    %rdx,%rdi
  8004214d83:	ff d0                	callq  *%rax
  8004214d85:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214d89:	eb 2f                	jmp    8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004214d8b:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004214d92:	eb 26                	jmp    8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004214d94:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004214d9b:	eb 1d                	jmp    8004214dba <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004214d9d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214da4:	48 89 c7             	mov    %rax,%rdi
  8004214da7:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214dae:	00 00 00 
  8004214db1:	ff d0                	callq  *%rax
  8004214db3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004214db7:	eb 01                	jmp    8004214dba <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004214db9:	90                   	nop
			}

		} else {
  8004214dba:	e9 32 01 00 00       	jmpq   8004214ef1 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004214dbf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214dc3:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004214dc7:	0f be c8             	movsbl %al,%ecx
  8004214dca:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214dd1:	0f b6 00             	movzbl (%rax),%eax
  8004214dd4:	0f b6 d0             	movzbl %al,%edx
  8004214dd7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ddb:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214ddf:	0f b6 c0             	movzbl %al,%eax
  8004214de2:	29 c2                	sub    %eax,%edx
  8004214de4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214de8:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214dec:	0f b6 f0             	movzbl %al,%esi
  8004214def:	89 d0                	mov    %edx,%eax
  8004214df1:	99                   	cltd   
  8004214df2:	f7 fe                	idiv   %esi
  8004214df4:	89 d0                	mov    %edx,%eax
  8004214df6:	01 c8                	add    %ecx,%eax
  8004214df8:	48 98                	cltq   
  8004214dfa:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004214dfe:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e05:	0f b6 00             	movzbl (%rax),%eax
  8004214e08:	0f b6 d0             	movzbl %al,%edx
  8004214e0b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e0f:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214e13:	0f b6 c0             	movzbl %al,%eax
  8004214e16:	89 d1                	mov    %edx,%ecx
  8004214e18:	29 c1                	sub    %eax,%ecx
  8004214e1a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e1e:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214e22:	0f b6 d8             	movzbl %al,%ebx
  8004214e25:	89 c8                	mov    %ecx,%eax
  8004214e27:	99                   	cltd   
  8004214e28:	f7 fb                	idiv   %ebx
  8004214e2a:	89 c2                	mov    %eax,%edx
  8004214e2c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e30:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214e34:	0f b6 c0             	movzbl %al,%eax
  8004214e37:	0f af c2             	imul   %edx,%eax
  8004214e3a:	48 98                	cltq   
  8004214e3c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004214e40:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214e47:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214e4b:	73 0a                	jae    8004214e57 <_dwarf_lineno_run_program+0x4fb>
  8004214e4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214e52:	e9 b3 00 00 00       	jmpq   8004214f0a <_dwarf_lineno_run_program+0x5ae>
  8004214e57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e5f:	48 89 10             	mov    %rdx,(%rax)
  8004214e62:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e66:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214e6d:	00 
  8004214e6e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214e76:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214e7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e7e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214e82:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214e86:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214e8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e8e:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214e92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e96:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214e99:	89 50 28             	mov    %edx,0x28(%rax)
  8004214e9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ea0:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214ea3:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214ea6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214eaa:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214ead:	89 50 30             	mov    %edx,0x30(%rax)
  8004214eb0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214eb4:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214ebb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214ebf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ec3:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004214eca:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004214ed1:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004214ed8:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004214edf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214ee6:	48 83 c0 01          	add    $0x1,%rax
  8004214eea:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214ef1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214ef8:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004214eff:	0f 82 e2 fa ff ff    	jb     80042149e7 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004214f05:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004214f0a:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004214f11:	5b                   	pop    %rbx
  8004214f12:	5d                   	pop    %rbp
  8004214f13:	c3                   	retq   

0000008004214f14 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004214f14:	55                   	push   %rbp
  8004214f15:	48 89 e5             	mov    %rsp,%rbp
  8004214f18:	53                   	push   %rbx
  8004214f19:	48 83 ec 48          	sub    $0x48,%rsp
  8004214f1d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004214f21:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214f25:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214f29:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214f2d:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004214f31:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214f35:	48 8b 00             	mov    (%rax),%rax
  8004214f38:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004214f3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214f40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004214f44:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004214f48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f4c:	48 89 c7             	mov    %rax,%rdi
  8004214f4f:	48 b8 cb fc 20 04 80 	movabs $0x800420fccb,%rax
  8004214f56:	00 00 00 
  8004214f59:	ff d0                	callq  *%rax
  8004214f5b:	48 98                	cltq   
  8004214f5d:	48 83 c0 01          	add    $0x1,%rax
  8004214f61:	48 01 d8             	add    %rbx,%rax
  8004214f64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004214f68:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f6c:	48 89 c7             	mov    %rax,%rdi
  8004214f6f:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214f76:	00 00 00 
  8004214f79:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004214f7b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f7f:	48 89 c7             	mov    %rax,%rdi
  8004214f82:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214f89:	00 00 00 
  8004214f8c:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004214f8e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f92:	48 89 c7             	mov    %rax,%rdi
  8004214f95:	48 b8 f3 0b 21 04 80 	movabs $0x8004210bf3,%rax
  8004214f9c:	00 00 00 
  8004214f9f:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004214fa1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214fa5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214fa9:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004214fac:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214fb1:	48 83 c4 48          	add    $0x48,%rsp
  8004214fb5:	5b                   	pop    %rbx
  8004214fb6:	5d                   	pop    %rbp
  8004214fb7:	c3                   	retq   

0000008004214fb8 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004214fb8:	55                   	push   %rbp
  8004214fb9:	48 89 e5             	mov    %rsp,%rbp
  8004214fbc:	53                   	push   %rbx
  8004214fbd:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004214fc4:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004214fcb:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004214fd2:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004214fd9:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004214fe0:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004214fe7:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004214fee:	00 
  8004214fef:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004214ff6:	00 
  8004214ff7:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004214ffe:	00 
  8004214fff:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215006:	00 
  8004215007:	48 b8 d0 b0 21 04 80 	movabs $0x800421b0d0,%rax
  800421500e:	00 00 00 
  8004215011:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215015:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215019:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  800421501d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215024:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800421502b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  800421502f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215034:	75 35                	jne    800421506b <_dwarf_lineno_init+0xb3>
  8004215036:	48 b9 dc b0 21 04 80 	movabs $0x800421b0dc,%rcx
  800421503d:	00 00 00 
  8004215040:	48 ba e7 b0 21 04 80 	movabs $0x800421b0e7,%rdx
  8004215047:	00 00 00 
  800421504a:	be 13 01 00 00       	mov    $0x113,%esi
  800421504f:	48 bf fc b0 21 04 80 	movabs $0x800421b0fc,%rdi
  8004215056:	00 00 00 
  8004215059:	b8 00 00 00 00       	mov    $0x0,%eax
  800421505e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215065:	00 00 00 
  8004215068:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421506b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215072:	00 00 00 
  8004215075:	48 8b 00             	mov    (%rax),%rax
  8004215078:	48 85 c0             	test   %rax,%rax
  800421507b:	75 35                	jne    80042150b2 <_dwarf_lineno_init+0xfa>
  800421507d:	48 b9 13 b1 21 04 80 	movabs $0x800421b113,%rcx
  8004215084:	00 00 00 
  8004215087:	48 ba e7 b0 21 04 80 	movabs $0x800421b0e7,%rdx
  800421508e:	00 00 00 
  8004215091:	be 14 01 00 00       	mov    $0x114,%esi
  8004215096:	48 bf fc b0 21 04 80 	movabs $0x800421b0fc,%rdi
  800421509d:	00 00 00 
  80042150a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042150a5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042150ac:	00 00 00 
  80042150af:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  80042150b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042150b6:	48 89 c7             	mov    %rax,%rdi
  80042150b9:	48 b8 80 23 21 04 80 	movabs $0x8004212380,%rax
  80042150c0:	00 00 00 
  80042150c3:	ff d0                	callq  *%rax
  80042150c5:	85 c0                	test   %eax,%eax
  80042150c7:	74 0a                	je     80042150d3 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  80042150c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042150ce:	e9 4f 04 00 00       	jmpq   8004215522 <_dwarf_lineno_init+0x56a>

	li = linfo;
  80042150d3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042150da:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  80042150de:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042150e5:	00 00 00 
  80042150e8:	48 8b 00             	mov    (%rax),%rax
  80042150eb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150ef:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042150f3:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042150f7:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042150fe:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215103:	48 89 cf             	mov    %rcx,%rdi
  8004215106:	ff d0                	callq  *%rax
  8004215108:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  800421510c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215111:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215115:	75 37                	jne    800421514e <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215117:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  800421511e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215125:	00 00 00 
  8004215128:	48 8b 00             	mov    (%rax),%rax
  800421512b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421512f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215133:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215137:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421513e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215143:	48 89 cf             	mov    %rcx,%rdi
  8004215146:	ff d0                	callq  *%rax
  8004215148:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421514c:	eb 07                	jmp    8004215155 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  800421514e:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215155:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215159:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421515d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215164:	48 29 c2             	sub    %rax,%rdx
  8004215167:	48 89 d0             	mov    %rdx,%rax
  800421516a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421516e:	73 0a                	jae    800421517a <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215170:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215175:	e9 a8 03 00 00       	jmpq   8004215522 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421517a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421517e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215182:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215185:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421518c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215190:	48 01 d0             	add    %rdx,%rax
  8004215193:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215197:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421519e:	00 00 00 
  80042151a1:	48 8b 00             	mov    (%rax),%rax
  80042151a4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151a8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151ac:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151b0:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042151b7:	ba 02 00 00 00       	mov    $0x2,%edx
  80042151bc:	48 89 cf             	mov    %rcx,%rdi
  80042151bf:	ff d0                	callq  *%rax
  80042151c1:	89 c2                	mov    %eax,%edx
  80042151c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042151c7:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  80042151cb:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151d2:	00 00 00 
  80042151d5:	48 8b 00             	mov    (%rax),%rax
  80042151d8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151dc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151e0:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151e4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042151e7:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042151ee:	48 89 cf             	mov    %rcx,%rdi
  80042151f1:	ff d0                	callq  *%rax
  80042151f3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042151f7:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  80042151fb:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215202:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215206:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421520d:	00 00 00 
  8004215210:	48 8b 00             	mov    (%rax),%rax
  8004215213:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215217:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421521b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421521f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215226:	ba 01 00 00 00       	mov    $0x1,%edx
  800421522b:	48 89 cf             	mov    %rcx,%rdi
  800421522e:	ff d0                	callq  *%rax
  8004215230:	89 c2                	mov    %eax,%edx
  8004215232:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215236:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215239:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215240:	00 00 00 
  8004215243:	48 8b 00             	mov    (%rax),%rax
  8004215246:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421524a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421524e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215252:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215259:	ba 01 00 00 00       	mov    $0x1,%edx
  800421525e:	48 89 cf             	mov    %rcx,%rdi
  8004215261:	ff d0                	callq  *%rax
  8004215263:	89 c2                	mov    %eax,%edx
  8004215265:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215269:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  800421526c:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215273:	00 00 00 
  8004215276:	48 8b 00             	mov    (%rax),%rax
  8004215279:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421527d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215281:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215285:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421528c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215291:	48 89 cf             	mov    %rcx,%rdi
  8004215294:	ff d0                	callq  *%rax
  8004215296:	89 c2                	mov    %eax,%edx
  8004215298:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421529c:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  800421529f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042152a6:	00 00 00 
  80042152a9:	48 8b 00             	mov    (%rax),%rax
  80042152ac:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152b0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152b4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152b8:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152bf:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152c4:	48 89 cf             	mov    %rcx,%rdi
  80042152c7:	ff d0                	callq  *%rax
  80042152c9:	89 c2                	mov    %eax,%edx
  80042152cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152cf:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  80042152d2:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042152d9:	00 00 00 
  80042152dc:	48 8b 00             	mov    (%rax),%rax
  80042152df:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152e7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152eb:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152f2:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152f7:	48 89 cf             	mov    %rcx,%rdi
  80042152fa:	ff d0                	callq  *%rax
  80042152fc:	89 c2                	mov    %eax,%edx
  80042152fe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215302:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215305:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215309:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421530d:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215310:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215314:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215318:	0f b6 c0             	movzbl %al,%eax
  800421531b:	83 e8 01             	sub    $0x1,%eax
  800421531e:	39 c2                	cmp    %eax,%edx
  8004215320:	7d 0c                	jge    800421532e <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215322:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215329:	e9 f1 01 00 00       	jmpq   800421551f <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  800421532e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215332:	48 bb 60 c4 69 04 80 	movabs $0x800469c460,%rbx
  8004215339:	00 00 00 
  800421533c:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215340:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215347:	eb 41                	jmp    800421538a <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215349:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421534d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215351:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215354:	48 98                	cltq   
  8004215356:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800421535a:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215361:	00 00 00 
  8004215364:	48 8b 00             	mov    (%rax),%rax
  8004215367:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421536b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421536f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215373:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421537a:	ba 01 00 00 00       	mov    $0x1,%edx
  800421537f:	48 89 cf             	mov    %rcx,%rdi
  8004215382:	ff d0                	callq  *%rax
  8004215384:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215386:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421538a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421538e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215392:	0f b6 c0             	movzbl %al,%eax
  8004215395:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215398:	7f af                	jg     8004215349 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  800421539a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042153a1:	00 
	p = ds->ds_data + offset;
  80042153a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042153a6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042153aa:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042153b1:	48 01 d0             	add    %rdx,%rax
  80042153b4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  80042153bb:	eb 1f                	jmp    80042153dc <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  80042153bd:	90                   	nop
  80042153be:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042153c5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042153c9:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  80042153d0:	0f b6 00             	movzbl (%rax),%eax
  80042153d3:	84 c0                	test   %al,%al
  80042153d5:	75 e7                	jne    80042153be <_dwarf_lineno_init+0x406>
			;
		length++;
  80042153d7:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  80042153dc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042153e3:	0f b6 00             	movzbl (%rax),%eax
  80042153e6:	84 c0                	test   %al,%al
  80042153e8:	75 d3                	jne    80042153bd <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  80042153ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042153f2:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042153f6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042153fd:	48 89 c2             	mov    %rax,%rdx
  8004215400:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215404:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215408:	48 29 c2             	sub    %rax,%rdx
  800421540b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421540f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215413:	48 98                	cltq   
  8004215415:	48 39 c2             	cmp    %rax,%rdx
  8004215418:	7e 0c                	jle    8004215426 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421541a:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215421:	e9 f9 00 00 00       	jmpq   800421551f <_dwarf_lineno_init+0x567>
	}
	p++;
  8004215426:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421542d:	48 83 c0 01          	add    $0x1,%rax
  8004215431:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215438:	eb 3c                	jmp    8004215476 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  800421543a:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215441:	00 00 00 
  8004215444:	48 8b 08             	mov    (%rax),%rcx
  8004215447:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800421544e:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004215455:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215459:	49 89 c8             	mov    %rcx,%r8
  800421545c:	48 89 d1             	mov    %rdx,%rcx
  800421545f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215464:	48 89 c7             	mov    %rax,%rdi
  8004215467:	48 b8 14 4f 21 04 80 	movabs $0x8004214f14,%rax
  800421546e:	00 00 00 
  8004215471:	ff d0                	callq  *%rax
  8004215473:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215476:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421547d:	0f b6 00             	movzbl (%rax),%eax
  8004215480:	84 c0                	test   %al,%al
  8004215482:	75 b6                	jne    800421543a <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004215484:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421548b:	48 83 c0 01          	add    $0x1,%rax
  800421548f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004215496:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421549d:	48 89 c2             	mov    %rax,%rdx
  80042154a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042154a4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042154a8:	48 29 c2             	sub    %rax,%rdx
  80042154ab:	48 89 d0             	mov    %rdx,%rax
  80042154ae:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  80042154b2:	48 89 c2             	mov    %rax,%rdx
  80042154b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042154b9:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042154bd:	48 39 c2             	cmp    %rax,%rdx
  80042154c0:	74 09                	je     80042154cb <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042154c2:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042154c9:	eb 54                	jmp    800421551f <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  80042154cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042154cf:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042154d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042154d7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042154db:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042154e2:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042154e9:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042154f0:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042154f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154f8:	4d 89 c1             	mov    %r8,%r9
  80042154fb:	49 89 f8             	mov    %rdi,%r8
  80042154fe:	48 89 c7             	mov    %rax,%rdi
  8004215501:	48 b8 5c 49 21 04 80 	movabs $0x800421495c,%rax
  8004215508:	00 00 00 
  800421550b:	ff d0                	callq  *%rax
  800421550d:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004215510:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215514:	74 02                	je     8004215518 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  8004215516:	eb 07                	jmp    800421551f <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004215518:	b8 00 00 00 00       	mov    $0x0,%eax
  800421551d:	eb 03                	jmp    8004215522 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  800421551f:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004215522:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004215529:	5b                   	pop    %rbx
  800421552a:	5d                   	pop    %rbp
  800421552b:	c3                   	retq   

000000800421552c <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  800421552c:	55                   	push   %rbp
  800421552d:	48 89 e5             	mov    %rsp,%rbp
  8004215530:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004215537:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421553e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004215545:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800421554c:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004215553:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  800421555a:	00 
  800421555b:	75 35                	jne    8004215592 <dwarf_srclines+0x66>
  800421555d:	48 b9 1f b1 21 04 80 	movabs $0x800421b11f,%rcx
  8004215564:	00 00 00 
  8004215567:	48 ba e7 b0 21 04 80 	movabs $0x800421b0e7,%rdx
  800421556e:	00 00 00 
  8004215571:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004215576:	48 bf fc b0 21 04 80 	movabs $0x800421b0fc,%rdi
  800421557d:	00 00 00 
  8004215580:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215585:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421558c:	00 00 00 
  800421558f:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215592:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004215599:	00 
  800421559a:	75 35                	jne    80042155d1 <dwarf_srclines+0xa5>
  800421559c:	48 b9 23 b1 21 04 80 	movabs $0x800421b123,%rcx
  80042155a3:	00 00 00 
  80042155a6:	48 ba e7 b0 21 04 80 	movabs $0x800421b0e7,%rdx
  80042155ad:	00 00 00 
  80042155b0:	be 9b 01 00 00       	mov    $0x19b,%esi
  80042155b5:	48 bf fc b0 21 04 80 	movabs $0x800421b0fc,%rdi
  80042155bc:	00 00 00 
  80042155bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042155c4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042155cb:	00 00 00 
  80042155ce:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  80042155d1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042155d8:	ba 88 00 00 00       	mov    $0x88,%edx
  80042155dd:	be 00 00 00 00       	mov    $0x0,%esi
  80042155e2:	48 89 c7             	mov    %rax,%rdi
  80042155e5:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042155ec:	00 00 00 
  80042155ef:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042155f1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042155f8:	be 10 00 00 00       	mov    $0x10,%esi
  80042155fd:	48 89 c7             	mov    %rax,%rdi
  8004215600:	48 b8 05 1f 21 04 80 	movabs $0x8004211f05,%rax
  8004215607:	00 00 00 
  800421560a:	ff d0                	callq  *%rax
  800421560c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215610:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215615:	75 0a                	jne    8004215621 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004215617:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421561c:	e9 84 00 00 00       	jmpq   80042156a5 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004215621:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215625:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004215629:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004215630:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004215637:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  800421563e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215645:	49 89 f8             	mov    %rdi,%r8
  8004215648:	48 89 c7             	mov    %rax,%rdi
  800421564b:	48 b8 b8 4f 21 04 80 	movabs $0x8004214fb8,%rax
  8004215652:	00 00 00 
  8004215655:	ff d0                	callq  *%rax
  8004215657:	85 c0                	test   %eax,%eax
  8004215659:	74 07                	je     8004215662 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  800421565b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215660:	eb 43                	jmp    80042156a5 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004215662:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004215669:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421566d:	48 89 10             	mov    %rdx,(%rax)
  8004215670:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215674:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215678:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421567c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215680:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215684:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215688:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421568c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215690:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215694:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215698:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421569c:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  80042156a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042156a5:	c9                   	leaveq 
  80042156a6:	c3                   	retq   

00000080042156a7 <_dwarf_find_section>:
  80042156a7:	55                   	push   %rbp
  80042156a8:	48 89 e5             	mov    %rsp,%rbp
  80042156ab:	48 83 ec 20          	sub    $0x20,%rsp
  80042156af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042156b3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042156ba:	00 
  80042156bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042156c2:	eb 57                	jmp    800421571b <_dwarf_find_section+0x74>
  80042156c4:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042156cb:	00 00 00 
  80042156ce:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042156d1:	48 63 d2             	movslq %edx,%rdx
  80042156d4:	48 c1 e2 05          	shl    $0x5,%rdx
  80042156d8:	48 01 d0             	add    %rdx,%rax
  80042156db:	48 8b 00             	mov    (%rax),%rax
  80042156de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042156e2:	48 89 d6             	mov    %rdx,%rsi
  80042156e5:	48 89 c7             	mov    %rax,%rdi
  80042156e8:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  80042156ef:	00 00 00 
  80042156f2:	ff d0                	callq  *%rax
  80042156f4:	85 c0                	test   %eax,%eax
  80042156f6:	75 1f                	jne    8004215717 <_dwarf_find_section+0x70>
  80042156f8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042156fb:	48 98                	cltq   
  80042156fd:	48 c1 e0 05          	shl    $0x5,%rax
  8004215701:	48 89 c2             	mov    %rax,%rdx
  8004215704:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421570b:	00 00 00 
  800421570e:	48 01 d0             	add    %rdx,%rax
  8004215711:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215715:	eb 0a                	jmp    8004215721 <_dwarf_find_section+0x7a>
  8004215717:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421571b:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421571f:	7e a3                	jle    80042156c4 <_dwarf_find_section+0x1d>
  8004215721:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215725:	c9                   	leaveq 
  8004215726:	c3                   	retq   

0000008004215727 <find_debug_sections>:
  8004215727:	55                   	push   %rbp
  8004215728:	48 89 e5             	mov    %rsp,%rbp
  800421572b:	48 83 ec 40          	sub    $0x40,%rsp
  800421572f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215733:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215737:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421573b:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004215742:	00 
  8004215743:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215747:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421574b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421574f:	48 01 d0             	add    %rdx,%rax
  8004215752:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004215756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421575a:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  800421575e:	0f b7 c0             	movzwl %ax,%eax
  8004215761:	48 c1 e0 06          	shl    $0x6,%rax
  8004215765:	48 89 c2             	mov    %rax,%rdx
  8004215768:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421576c:	48 01 d0             	add    %rdx,%rax
  800421576f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215777:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800421577b:	0f b7 c0             	movzwl %ax,%eax
  800421577e:	48 c1 e0 06          	shl    $0x6,%rax
  8004215782:	48 89 c2             	mov    %rax,%rdx
  8004215785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215789:	48 01 d0             	add    %rdx,%rax
  800421578c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215790:	e9 4b 02 00 00       	jmpq   80042159e0 <find_debug_sections+0x2b9>
  8004215795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215799:	8b 00                	mov    (%rax),%eax
  800421579b:	89 c2                	mov    %eax,%edx
  800421579d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042157a1:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042157a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042157a9:	48 01 c8             	add    %rcx,%rax
  80042157ac:	48 01 d0             	add    %rdx,%rax
  80042157af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042157b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042157b7:	48 be 2b b1 21 04 80 	movabs $0x800421b12b,%rsi
  80042157be:	00 00 00 
  80042157c1:	48 89 c7             	mov    %rax,%rdi
  80042157c4:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  80042157cb:	00 00 00 
  80042157ce:	ff d0                	callq  *%rax
  80042157d0:	85 c0                	test   %eax,%eax
  80042157d2:	75 4b                	jne    800421581f <find_debug_sections+0xf8>
  80042157d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042157d8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157df:	00 00 00 
  80042157e2:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042157e6:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157ed:	00 00 00 
  80042157f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042157f4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042157f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042157fc:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215800:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215807:	00 00 00 
  800421580a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421580e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215812:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215816:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421581a:	e9 bc 01 00 00       	jmpq   80042159db <find_debug_sections+0x2b4>
  800421581f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215823:	48 be 37 b1 21 04 80 	movabs $0x800421b137,%rsi
  800421582a:	00 00 00 
  800421582d:	48 89 c7             	mov    %rax,%rdi
  8004215830:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215837:	00 00 00 
  800421583a:	ff d0                	callq  *%rax
  800421583c:	85 c0                	test   %eax,%eax
  800421583e:	75 4b                	jne    800421588b <find_debug_sections+0x164>
  8004215840:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215844:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421584b:	00 00 00 
  800421584e:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215852:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215859:	00 00 00 
  800421585c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215860:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215868:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421586c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215873:	00 00 00 
  8004215876:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421587a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421587e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215882:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215886:	e9 50 01 00 00       	jmpq   80042159db <find_debug_sections+0x2b4>
  800421588b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421588f:	48 be 4f b1 21 04 80 	movabs $0x800421b14f,%rsi
  8004215896:	00 00 00 
  8004215899:	48 89 c7             	mov    %rax,%rdi
  800421589c:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  80042158a3:	00 00 00 
  80042158a6:	ff d0                	callq  *%rax
  80042158a8:	85 c0                	test   %eax,%eax
  80042158aa:	75 4b                	jne    80042158f7 <find_debug_sections+0x1d0>
  80042158ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042158b0:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158b7:	00 00 00 
  80042158ba:	48 89 50 68          	mov    %rdx,0x68(%rax)
  80042158be:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158c5:	00 00 00 
  80042158c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042158cc:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042158d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158d4:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042158d8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158df:	00 00 00 
  80042158e2:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042158e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158ea:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042158ee:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042158f2:	e9 e4 00 00 00       	jmpq   80042159db <find_debug_sections+0x2b4>
  80042158f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042158fb:	48 be 45 b1 21 04 80 	movabs $0x800421b145,%rsi
  8004215902:	00 00 00 
  8004215905:	48 89 c7             	mov    %rax,%rdi
  8004215908:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  800421590f:	00 00 00 
  8004215912:	ff d0                	callq  *%rax
  8004215914:	85 c0                	test   %eax,%eax
  8004215916:	75 53                	jne    800421596b <find_debug_sections+0x244>
  8004215918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421591c:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215920:	48 89 c2             	mov    %rax,%rdx
  8004215923:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421592a:	00 00 00 
  800421592d:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004215931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215935:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215939:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215940:	00 00 00 
  8004215943:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421594b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421594f:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215956:	00 00 00 
  8004215959:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800421595d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215961:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215965:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215969:	eb 70                	jmp    80042159db <find_debug_sections+0x2b4>
  800421596b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421596f:	48 be 5b b1 21 04 80 	movabs $0x800421b15b,%rsi
  8004215976:	00 00 00 
  8004215979:	48 89 c7             	mov    %rax,%rdi
  800421597c:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215983:	00 00 00 
  8004215986:	ff d0                	callq  *%rax
  8004215988:	85 c0                	test   %eax,%eax
  800421598a:	75 4f                	jne    80042159db <find_debug_sections+0x2b4>
  800421598c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215990:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215997:	00 00 00 
  800421599a:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  80042159a1:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159a8:	00 00 00 
  80042159ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042159af:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042159b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159ba:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042159be:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159c5:	00 00 00 
  80042159c8:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042159cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159d3:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042159d7:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042159db:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  80042159e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159e4:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042159e8:	0f 82 a7 fd ff ff    	jb     8004215795 <find_debug_sections+0x6e>
  80042159ee:	c9                   	leaveq 
  80042159ef:	c3                   	retq   

00000080042159f0 <read_section_headers>:
  80042159f0:	55                   	push   %rbp
  80042159f1:	48 89 e5             	mov    %rsp,%rbp
  80042159f4:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  80042159fb:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004215a02:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004215a09:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004215a10:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a15:	ba 14 00 00 00       	mov    $0x14,%edx
  8004215a1a:	48 89 f7             	mov    %rsi,%rdi
  8004215a1d:	48 89 d1             	mov    %rdx,%rcx
  8004215a20:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004215a23:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004215a2a:	00 
  8004215a2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215a2f:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004215a36:	48 01 d0             	add    %rdx,%rax
  8004215a39:	48 83 e8 01          	sub    $0x1,%rax
  8004215a3d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215a41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215a45:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215a4a:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004215a4e:	48 89 d0             	mov    %rdx,%rax
  8004215a51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a55:	48 29 c2             	sub    %rax,%rdx
  8004215a58:	48 89 d0             	mov    %rdx,%rax
  8004215a5b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215a5f:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004215a66:	00 00 00 00 
  8004215a6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215a6e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215a72:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004215a79:	00 
  8004215a7a:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004215a81:	00 00 00 
  8004215a84:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004215a8b:	75 11                	jne    8004215a9e <read_section_headers+0xae>
  8004215a8d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a94:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215a98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215a9c:	eb 26                	jmp    8004215ac4 <read_section_headers+0xd4>
  8004215a9e:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215aa5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215aa9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215ab0:	48 01 c2             	add    %rax,%rdx
  8004215ab3:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004215aba:	ff ff ff 
  8004215abd:	48 01 d0             	add    %rdx,%rax
  8004215ac0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215ac4:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215acb:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215acf:	0f b7 c0             	movzwl %ax,%eax
  8004215ad2:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004215ad5:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215adc:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004215ae0:	0f b7 c0             	movzwl %ax,%eax
  8004215ae3:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004215ae6:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215aed:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004215af1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004215af4:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004215af8:	48 63 f0             	movslq %eax,%rsi
  8004215afb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215aff:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215b06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215b0a:	48 89 c7             	mov    %rax,%rdi
  8004215b0d:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  8004215b14:	00 00 00 
  8004215b17:	ff d0                	callq  *%rax
  8004215b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b1d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004215b21:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215b25:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215b2b:	48 89 c2             	mov    %rax,%rdx
  8004215b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b32:	48 29 d0             	sub    %rdx,%rax
  8004215b35:	48 89 c2             	mov    %rax,%rdx
  8004215b38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b3c:	48 01 d0             	add    %rdx,%rax
  8004215b3f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004215b43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215b4a:	eb 24                	jmp    8004215b70 <read_section_headers+0x180>
  8004215b4c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b4f:	48 98                	cltq   
  8004215b51:	48 c1 e0 06          	shl    $0x6,%rax
  8004215b55:	48 89 c2             	mov    %rax,%rdx
  8004215b58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215b5c:	48 01 c2             	add    %rax,%rdx
  8004215b5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b62:	48 98                	cltq   
  8004215b64:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004215b6b:	ff 
  8004215b6c:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215b70:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b73:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004215b76:	7c d4                	jl     8004215b4c <read_section_headers+0x15c>
  8004215b78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215b7c:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215b80:	0f b7 c0             	movzwl %ax,%eax
  8004215b83:	48 98                	cltq   
  8004215b85:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215b8c:	ff 
  8004215b8d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004215b91:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215b98:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215b9c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215ba0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215ba4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215ba8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215bac:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215bb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215bb7:	48 01 c8             	add    %rcx,%rax
  8004215bba:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215bc1:	48 89 c7             	mov    %rax,%rdi
  8004215bc4:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  8004215bcb:	00 00 00 
  8004215bce:	ff d0                	callq  *%rax
  8004215bd0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215bd4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215bd8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215bdc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215be0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004215be4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004215be8:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215bee:	48 29 c2             	sub    %rax,%rdx
  8004215bf1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215bf5:	48 01 c2             	add    %rax,%rdx
  8004215bf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215bfc:	48 01 d0             	add    %rdx,%rax
  8004215bff:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004215c03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215c0a:	e9 04 05 00 00       	jmpq   8004216113 <read_section_headers+0x723>
  8004215c0f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c12:	48 98                	cltq   
  8004215c14:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c1b:	ff 
  8004215c1c:	8b 00                	mov    (%rax),%eax
  8004215c1e:	89 c2                	mov    %eax,%edx
  8004215c20:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004215c24:	48 01 d0             	add    %rdx,%rax
  8004215c27:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004215c2b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215c32:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004215c37:	48 85 c0             	test   %rax,%rax
  8004215c3a:	74 35                	je     8004215c71 <read_section_headers+0x281>
  8004215c3c:	48 b9 66 b1 21 04 80 	movabs $0x800421b166,%rcx
  8004215c43:	00 00 00 
  8004215c46:	48 ba 7f b1 21 04 80 	movabs $0x800421b17f,%rdx
  8004215c4d:	00 00 00 
  8004215c50:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004215c55:	48 bf 94 b1 21 04 80 	movabs $0x800421b194,%rdi
  8004215c5c:	00 00 00 
  8004215c5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c64:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215c6b:	00 00 00 
  8004215c6e:	41 ff d0             	callq  *%r8
  8004215c71:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215c78:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215c7c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215c80:	48 be 2b b1 21 04 80 	movabs $0x800421b12b,%rsi
  8004215c87:	00 00 00 
  8004215c8a:	48 89 c7             	mov    %rax,%rdi
  8004215c8d:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215c94:	00 00 00 
  8004215c97:	ff d0                	callq  *%rax
  8004215c99:	85 c0                	test   %eax,%eax
  8004215c9b:	0f 85 d8 00 00 00    	jne    8004215d79 <read_section_headers+0x389>
  8004215ca1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ca4:	48 98                	cltq   
  8004215ca6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215cad:	ff 
  8004215cae:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215cb2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cb5:	48 98                	cltq   
  8004215cb7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215cbe:	ff 
  8004215cbf:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215cc3:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215cca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215cce:	48 01 c8             	add    %rcx,%rax
  8004215cd1:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215cd8:	48 89 c7             	mov    %rax,%rdi
  8004215cdb:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  8004215ce2:	00 00 00 
  8004215ce5:	ff d0                	callq  *%rax
  8004215ce7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cea:	48 98                	cltq   
  8004215cec:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215cf3:	ff 
  8004215cf4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215cf8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cfb:	48 98                	cltq   
  8004215cfd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d04:	ff 
  8004215d05:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d09:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004215d0d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d11:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215d17:	48 29 c2             	sub    %rax,%rdx
  8004215d1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215d1e:	48 01 c2             	add    %rax,%rdx
  8004215d21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215d25:	48 01 c2             	add    %rax,%rdx
  8004215d28:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d2f:	00 00 00 
  8004215d32:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215d36:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d3d:	00 00 00 
  8004215d40:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215d44:	48 89 c2             	mov    %rax,%rdx
  8004215d47:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d4e:	00 00 00 
  8004215d51:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215d55:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d58:	48 98                	cltq   
  8004215d5a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d61:	ff 
  8004215d62:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215d66:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d6d:	00 00 00 
  8004215d70:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215d74:	e9 96 03 00 00       	jmpq   800421610f <read_section_headers+0x71f>
  8004215d79:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215d7d:	48 be 37 b1 21 04 80 	movabs $0x800421b137,%rsi
  8004215d84:	00 00 00 
  8004215d87:	48 89 c7             	mov    %rax,%rdi
  8004215d8a:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215d91:	00 00 00 
  8004215d94:	ff d0                	callq  *%rax
  8004215d96:	85 c0                	test   %eax,%eax
  8004215d98:	0f 85 de 00 00 00    	jne    8004215e7c <read_section_headers+0x48c>
  8004215d9e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215da1:	48 98                	cltq   
  8004215da3:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215daa:	ff 
  8004215dab:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215daf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215db2:	48 98                	cltq   
  8004215db4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215dbb:	ff 
  8004215dbc:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215dc0:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215dc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215dcb:	48 01 c8             	add    %rcx,%rax
  8004215dce:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215dd5:	48 89 c7             	mov    %rax,%rdi
  8004215dd8:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  8004215ddf:	00 00 00 
  8004215de2:	ff d0                	callq  *%rax
  8004215de4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215de7:	48 98                	cltq   
  8004215de9:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215df0:	ff 
  8004215df1:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215df5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215df8:	48 98                	cltq   
  8004215dfa:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e01:	ff 
  8004215e02:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e06:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215e0d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215e14:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215e1a:	48 29 c2             	sub    %rax,%rdx
  8004215e1d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215e21:	48 01 c2             	add    %rax,%rdx
  8004215e24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215e28:	48 01 c2             	add    %rax,%rdx
  8004215e2b:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e32:	00 00 00 
  8004215e35:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215e39:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e40:	00 00 00 
  8004215e43:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215e47:	48 89 c2             	mov    %rax,%rdx
  8004215e4a:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e51:	00 00 00 
  8004215e54:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215e58:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e5b:	48 98                	cltq   
  8004215e5d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e64:	ff 
  8004215e65:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215e69:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e70:	00 00 00 
  8004215e73:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215e77:	e9 93 02 00 00       	jmpq   800421610f <read_section_headers+0x71f>
  8004215e7c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215e80:	48 be 4f b1 21 04 80 	movabs $0x800421b14f,%rsi
  8004215e87:	00 00 00 
  8004215e8a:	48 89 c7             	mov    %rax,%rdi
  8004215e8d:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215e94:	00 00 00 
  8004215e97:	ff d0                	callq  *%rax
  8004215e99:	85 c0                	test   %eax,%eax
  8004215e9b:	0f 85 de 00 00 00    	jne    8004215f7f <read_section_headers+0x58f>
  8004215ea1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ea4:	48 98                	cltq   
  8004215ea6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ead:	ff 
  8004215eae:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215eb2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215eb5:	48 98                	cltq   
  8004215eb7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ebe:	ff 
  8004215ebf:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215ec3:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215eca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215ece:	48 01 c8             	add    %rcx,%rax
  8004215ed1:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215ed8:	48 89 c7             	mov    %rax,%rdi
  8004215edb:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  8004215ee2:	00 00 00 
  8004215ee5:	ff d0                	callq  *%rax
  8004215ee7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215eea:	48 98                	cltq   
  8004215eec:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ef3:	ff 
  8004215ef4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215ef8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215efb:	48 98                	cltq   
  8004215efd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f04:	ff 
  8004215f05:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f09:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004215f10:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004215f17:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215f1d:	48 29 c2             	sub    %rax,%rdx
  8004215f20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215f24:	48 01 c2             	add    %rax,%rdx
  8004215f27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215f2b:	48 01 c2             	add    %rax,%rdx
  8004215f2e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f35:	00 00 00 
  8004215f38:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004215f3c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f43:	00 00 00 
  8004215f46:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004215f4a:	48 89 c2             	mov    %rax,%rdx
  8004215f4d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f54:	00 00 00 
  8004215f57:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215f5b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f5e:	48 98                	cltq   
  8004215f60:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f67:	ff 
  8004215f68:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215f6c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f73:	00 00 00 
  8004215f76:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215f7a:	e9 90 01 00 00       	jmpq   800421610f <read_section_headers+0x71f>
  8004215f7f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215f83:	48 be 45 b1 21 04 80 	movabs $0x800421b145,%rsi
  8004215f8a:	00 00 00 
  8004215f8d:	48 89 c7             	mov    %rax,%rdi
  8004215f90:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  8004215f97:	00 00 00 
  8004215f9a:	ff d0                	callq  *%rax
  8004215f9c:	85 c0                	test   %eax,%eax
  8004215f9e:	75 65                	jne    8004216005 <read_section_headers+0x615>
  8004215fa0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fa3:	48 98                	cltq   
  8004215fa5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fac:	ff 
  8004215fad:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215fb1:	48 89 c2             	mov    %rax,%rdx
  8004215fb4:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215fbb:	00 00 00 
  8004215fbe:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004215fc2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215fc9:	00 00 00 
  8004215fcc:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004215fd0:	48 89 c2             	mov    %rax,%rdx
  8004215fd3:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215fda:	00 00 00 
  8004215fdd:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215fe1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fe4:	48 98                	cltq   
  8004215fe6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fed:	ff 
  8004215fee:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215ff2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ff9:	00 00 00 
  8004215ffc:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216000:	e9 0a 01 00 00       	jmpq   800421610f <read_section_headers+0x71f>
  8004216005:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216009:	48 be 5b b1 21 04 80 	movabs $0x800421b15b,%rsi
  8004216010:	00 00 00 
  8004216013:	48 89 c7             	mov    %rax,%rdi
  8004216016:	48 b8 99 fe 20 04 80 	movabs $0x800420fe99,%rax
  800421601d:	00 00 00 
  8004216020:	ff d0                	callq  *%rax
  8004216022:	85 c0                	test   %eax,%eax
  8004216024:	0f 85 e5 00 00 00    	jne    800421610f <read_section_headers+0x71f>
  800421602a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421602d:	48 98                	cltq   
  800421602f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216036:	ff 
  8004216037:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421603b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421603e:	48 98                	cltq   
  8004216040:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216047:	ff 
  8004216048:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421604c:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216053:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216057:	48 01 c8             	add    %rcx,%rax
  800421605a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216061:	48 89 c7             	mov    %rax,%rdi
  8004216064:	48 b8 2f 61 21 04 80 	movabs $0x800421612f,%rax
  800421606b:	00 00 00 
  800421606e:	ff d0                	callq  *%rax
  8004216070:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216073:	48 98                	cltq   
  8004216075:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421607c:	ff 
  800421607d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216081:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216084:	48 98                	cltq   
  8004216086:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421608d:	ff 
  800421608e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216092:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216099:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042160a0:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042160a6:	48 29 c2             	sub    %rax,%rdx
  80042160a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042160ad:	48 01 c2             	add    %rax,%rdx
  80042160b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042160b4:	48 01 c2             	add    %rax,%rdx
  80042160b7:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160be:	00 00 00 
  80042160c1:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  80042160c8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160cf:	00 00 00 
  80042160d2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  80042160d9:	48 89 c2             	mov    %rax,%rdx
  80042160dc:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160e3:	00 00 00 
  80042160e6:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042160ed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160f0:	48 98                	cltq   
  80042160f2:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160f9:	ff 
  80042160fa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042160fe:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216105:	00 00 00 
  8004216108:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421610f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216113:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216116:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216119:	0f 8c f0 fa ff ff    	jl     8004215c0f <read_section_headers+0x21f>
  800421611f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216123:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421612a:	48 01 d0             	add    %rdx,%rax
  800421612d:	c9                   	leaveq 
  800421612e:	c3                   	retq   

000000800421612f <readseg>:
  800421612f:	55                   	push   %rbp
  8004216130:	48 89 e5             	mov    %rsp,%rbp
  8004216133:	48 83 ec 30          	sub    $0x30,%rsp
  8004216137:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421613b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421613f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216143:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216147:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421614b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421614f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216153:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216157:	48 01 d0             	add    %rdx,%rax
  800421615a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421615e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216162:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216167:	48 85 c0             	test   %rax,%rax
  800421616a:	74 35                	je     80042161a1 <readseg+0x72>
  800421616c:	48 b9 a5 b1 21 04 80 	movabs $0x800421b1a5,%rcx
  8004216173:	00 00 00 
  8004216176:	48 ba 7f b1 21 04 80 	movabs $0x800421b17f,%rdx
  800421617d:	00 00 00 
  8004216180:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216185:	48 bf 94 b1 21 04 80 	movabs $0x800421b194,%rdi
  800421618c:	00 00 00 
  800421618f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216194:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421619b:	00 00 00 
  800421619e:	41 ff d0             	callq  *%r8
  80042161a1:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  80042161a8:	ff 
  80042161a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042161ad:	48 c1 e8 09          	shr    $0x9,%rax
  80042161b1:	48 83 c0 01          	add    $0x1,%rax
  80042161b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042161b9:	eb 3c                	jmp    80042161f7 <readseg+0xc8>
  80042161bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042161bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042161c3:	48 89 d6             	mov    %rdx,%rsi
  80042161c6:	48 89 c7             	mov    %rax,%rdi
  80042161c9:	48 b8 bf 62 21 04 80 	movabs $0x80042162bf,%rax
  80042161d0:	00 00 00 
  80042161d3:	ff d0                	callq  *%rax
  80042161d5:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  80042161dc:	00 
  80042161dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161e1:	48 8b 00             	mov    (%rax),%rax
  80042161e4:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042161eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161ef:	48 89 10             	mov    %rdx,(%rax)
  80042161f2:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042161f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042161fb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042161ff:	72 ba                	jb     80042161bb <readseg+0x8c>
  8004216201:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216205:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421620a:	48 89 c2             	mov    %rax,%rdx
  800421620d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216211:	48 01 d0             	add    %rdx,%rax
  8004216214:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  800421621a:	76 2f                	jbe    800421624b <readseg+0x11c>
  800421621c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216220:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216224:	48 89 d6             	mov    %rdx,%rsi
  8004216227:	48 89 c7             	mov    %rax,%rdi
  800421622a:	48 b8 bf 62 21 04 80 	movabs $0x80042162bf,%rax
  8004216231:	00 00 00 
  8004216234:	ff d0                	callq  *%rax
  8004216236:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421623a:	48 8b 00             	mov    (%rax),%rax
  800421623d:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216244:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216248:	48 89 10             	mov    %rdx,(%rax)
  800421624b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421624f:	48 8b 00             	mov    (%rax),%rax
  8004216252:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216257:	48 85 c0             	test   %rax,%rax
  800421625a:	74 35                	je     8004216291 <readseg+0x162>
  800421625c:	48 b9 b8 b1 21 04 80 	movabs $0x800421b1b8,%rcx
  8004216263:	00 00 00 
  8004216266:	48 ba 7f b1 21 04 80 	movabs $0x800421b17f,%rdx
  800421626d:	00 00 00 
  8004216270:	be da 00 00 00       	mov    $0xda,%esi
  8004216275:	48 bf 94 b1 21 04 80 	movabs $0x800421b194,%rdi
  800421627c:	00 00 00 
  800421627f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216284:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421628b:	00 00 00 
  800421628e:	41 ff d0             	callq  *%r8
  8004216291:	c9                   	leaveq 
  8004216292:	c3                   	retq   

0000008004216293 <waitdisk>:
  8004216293:	55                   	push   %rbp
  8004216294:	48 89 e5             	mov    %rsp,%rbp
  8004216297:	48 83 ec 10          	sub    $0x10,%rsp
  800421629b:	90                   	nop
  800421629c:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042162a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042162a6:	89 c2                	mov    %eax,%edx
  80042162a8:	ec                   	in     (%dx),%al
  80042162a9:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  80042162ac:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042162b0:	0f b6 c0             	movzbl %al,%eax
  80042162b3:	25 c0 00 00 00       	and    $0xc0,%eax
  80042162b8:	83 f8 40             	cmp    $0x40,%eax
  80042162bb:	75 df                	jne    800421629c <waitdisk+0x9>
  80042162bd:	c9                   	leaveq 
  80042162be:	c3                   	retq   

00000080042162bf <readsect>:
  80042162bf:	55                   	push   %rbp
  80042162c0:	48 89 e5             	mov    %rsp,%rbp
  80042162c3:	48 83 ec 60          	sub    $0x60,%rsp
  80042162c7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042162cb:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042162cf:	48 b8 93 62 21 04 80 	movabs $0x8004216293,%rax
  80042162d6:	00 00 00 
  80042162d9:	ff d0                	callq  *%rax
  80042162db:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  80042162e2:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042162e6:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042162ea:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042162ed:	ee                   	out    %al,(%dx)
  80042162ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042162f2:	0f b6 c0             	movzbl %al,%eax
  80042162f5:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  80042162fc:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042162ff:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216303:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216306:	ee                   	out    %al,(%dx)
  8004216307:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421630b:	48 c1 e8 08          	shr    $0x8,%rax
  800421630f:	0f b6 c0             	movzbl %al,%eax
  8004216312:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216319:	88 45 eb             	mov    %al,-0x15(%rbp)
  800421631c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216320:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216323:	ee                   	out    %al,(%dx)
  8004216324:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216328:	48 c1 e8 10          	shr    $0x10,%rax
  800421632c:	0f b6 c0             	movzbl %al,%eax
  800421632f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216336:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216339:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800421633d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216340:	ee                   	out    %al,(%dx)
  8004216341:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216345:	48 c1 e8 18          	shr    $0x18,%rax
  8004216349:	83 c8 e0             	or     $0xffffffe0,%eax
  800421634c:	0f b6 c0             	movzbl %al,%eax
  800421634f:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004216356:	88 45 db             	mov    %al,-0x25(%rbp)
  8004216359:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421635d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216360:	ee                   	out    %al,(%dx)
  8004216361:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216368:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800421636c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216370:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216373:	ee                   	out    %al,(%dx)
  8004216374:	48 b8 93 62 21 04 80 	movabs $0x8004216293,%rax
  800421637b:	00 00 00 
  800421637e:	ff d0                	callq  *%rax
  8004216380:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216387:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421638b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421638f:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216396:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216399:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421639d:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042163a0:	48 89 ce             	mov    %rcx,%rsi
  80042163a3:	48 89 f7             	mov    %rsi,%rdi
  80042163a6:	89 c1                	mov    %eax,%ecx
  80042163a8:	fc                   	cld    
  80042163a9:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  80042163ab:	89 c8                	mov    %ecx,%eax
  80042163ad:	48 89 fe             	mov    %rdi,%rsi
  80042163b0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042163b4:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042163b7:	c9                   	leaveq 
  80042163b8:	c3                   	retq   
  80042163b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000080042163c0 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  80042163c0:	fa                   	cli    
	xorw    %ax, %ax
  80042163c1:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  80042163c3:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042163c5:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042163c7:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  80042163c9:	0f 01 16             	lgdt   (%rsi)
  80042163cc:	e0 70                	loopne 800421643e <start64+0x10>
	movl    %cr0, %eax
  80042163ce:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042163d1:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  80042163d5:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  80042163d8:	ea                   	(bad)  
  80042163d9:	1d                   	.byte 0x1d
  80042163da:	70 08                	jo     80042163e4 <start32+0x7>
	...

00000080042163dd <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  80042163dd:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042163e1:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042163e3:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042163e5:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042163e7:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042163eb:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042163ed:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
  80042163ef:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif

	movl %eax,%cr4
  80042163f4:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  80042163f7:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421d4be <bootstack+0x14be>
	movl    %cr0, %eax
  80042163fe:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216401:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216404:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216407:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  800421640c:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  800421640f:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216414:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216416:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  800421641a:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  800421641c:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  800421641f:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216424:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216427:	ea                   	(bad)  
  8004216428:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004216429:	70 00                	jo     800421642b <start32+0x4e>
  800421642b:	00 08                	add    %cl,(%rax)
	...

000000800421642e <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  800421642e:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216432:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216434:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216436:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216438:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421643c:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421643e:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216440:	48 a1 d8 b5 69 04 80 	movabs 0x800469b5d8,%rax
  8004216447:	00 00 00 
	movq    %rax,%rsp
  800421644a:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  800421644d:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004216454:	48 b8 1e 05 20 04 80 	movabs $0x800420051e,%rax
  800421645b:	00 00 00 
	call    *%rax
  800421645e:	ff d0                	callq  *%rax

0000008004216460 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216460:	eb fe                	jmp    8004216460 <spin>
  8004216462:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216468 <gdt>:
	...
  8004216470:	ff                   	(bad)  
  8004216471:	ff 00                	incl   (%rax)
  8004216473:	00 00                	add    %al,(%rax)
  8004216475:	9a                   	(bad)  
  8004216476:	af                   	scas   %es:(%rdi),%eax
  8004216477:	00 ff                	add    %bh,%bh
  8004216479:	ff 00                	incl   (%rax)
  800421647b:	00 00                	add    %al,(%rax)
  800421647d:	92                   	xchg   %eax,%edx
  800421647e:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216480 <gdtdesc>:
  8004216480:	17                   	(bad)  
  8004216481:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004216487:	90                   	nop

0000008004216488 <gdt32>:
	...
  8004216490:	ff                   	(bad)  
  8004216491:	ff 00                	incl   (%rax)
  8004216493:	00 00                	add    %al,(%rax)
  8004216495:	9a                   	(bad)  
  8004216496:	cf                   	iret   
  8004216497:	00 ff                	add    %bh,%bh
  8004216499:	ff 00                	incl   (%rax)
  800421649b:	00 00                	add    %al,(%rax)
  800421649d:	92                   	xchg   %eax,%edx
  800421649e:	cf                   	iret   
	...

00000080042164a0 <gdt32desc>:
  80042164a0:	17                   	(bad)  
  80042164a1:	00 c8                	add    %cl,%al
  80042164a3:	70 00                	jo     80042164a5 <gdt32desc+0x5>
	...

00000080042164a6 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  80042164a6:	90                   	nop

00000080042164a7 <sum>:
  80042164a7:	55                   	push   %rbp
  80042164a8:	48 89 e5             	mov    %rsp,%rbp
  80042164ab:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042164af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042164b3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042164b6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042164bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042164c4:	eb 1a                	jmp    80042164e0 <sum+0x39>
  80042164c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042164c9:	48 63 d0             	movslq %eax,%rdx
  80042164cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042164d0:	48 01 d0             	add    %rdx,%rax
  80042164d3:	0f b6 00             	movzbl (%rax),%eax
  80042164d6:	0f b6 c0             	movzbl %al,%eax
  80042164d9:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042164dc:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042164e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042164e3:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042164e6:	7c de                	jl     80042164c6 <sum+0x1f>
  80042164e8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042164eb:	c9                   	leaveq 
  80042164ec:	c3                   	retq   

00000080042164ed <mpsearch1>:
  80042164ed:	55                   	push   %rbp
  80042164ee:	48 89 e5             	mov    %rsp,%rbp
  80042164f1:	48 83 ec 40          	sub    $0x40,%rsp
  80042164f5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042164f9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042164fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216500:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216508:	48 c1 e8 0c          	shr    $0xc,%rax
  800421650c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421650f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216512:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216519:	00 00 00 
  800421651c:	48 8b 00             	mov    (%rax),%rax
  800421651f:	48 39 c2             	cmp    %rax,%rdx
  8004216522:	72 32                	jb     8004216556 <mpsearch1+0x69>
  8004216524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216528:	48 89 c1             	mov    %rax,%rcx
  800421652b:	48 ba d8 b1 21 04 80 	movabs $0x800421b1d8,%rdx
  8004216532:	00 00 00 
  8004216535:	be 74 00 00 00       	mov    $0x74,%esi
  800421653a:	48 bf fb b1 21 04 80 	movabs $0x800421b1fb,%rdi
  8004216541:	00 00 00 
  8004216544:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216549:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216550:	00 00 00 
  8004216553:	41 ff d0             	callq  *%r8
  8004216556:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421655d:	00 00 00 
  8004216560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216564:	48 01 d0             	add    %rdx,%rax
  8004216567:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421656b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421656e:	48 63 d0             	movslq %eax,%rdx
  8004216571:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216575:	48 01 d0             	add    %rdx,%rax
  8004216578:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421657c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216580:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216584:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004216587:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421658a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216591:	00 00 00 
  8004216594:	48 8b 00             	mov    (%rax),%rax
  8004216597:	48 39 c2             	cmp    %rax,%rdx
  800421659a:	72 32                	jb     80042165ce <mpsearch1+0xe1>
  800421659c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165a0:	48 89 c1             	mov    %rax,%rcx
  80042165a3:	48 ba d8 b1 21 04 80 	movabs $0x800421b1d8,%rdx
  80042165aa:	00 00 00 
  80042165ad:	be 74 00 00 00       	mov    $0x74,%esi
  80042165b2:	48 bf fb b1 21 04 80 	movabs $0x800421b1fb,%rdi
  80042165b9:	00 00 00 
  80042165bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042165c1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042165c8:	00 00 00 
  80042165cb:	41 ff d0             	callq  *%r8
  80042165ce:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042165d5:	00 00 00 
  80042165d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165dc:	48 01 d0             	add    %rdx,%rax
  80042165df:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042165e3:	eb 4d                	jmp    8004216632 <mpsearch1+0x145>
  80042165e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165e9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042165ee:	48 be 0e b2 21 04 80 	movabs $0x800421b20e,%rsi
  80042165f5:	00 00 00 
  80042165f8:	48 89 c7             	mov    %rax,%rdi
  80042165fb:	48 b8 a6 01 21 04 80 	movabs $0x80042101a6,%rax
  8004216602:	00 00 00 
  8004216605:	ff d0                	callq  *%rax
  8004216607:	85 c0                	test   %eax,%eax
  8004216609:	75 22                	jne    800421662d <mpsearch1+0x140>
  800421660b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421660f:	be 10 00 00 00       	mov    $0x10,%esi
  8004216614:	48 89 c7             	mov    %rax,%rdi
  8004216617:	48 b8 a7 64 21 04 80 	movabs $0x80042164a7,%rax
  800421661e:	00 00 00 
  8004216621:	ff d0                	callq  *%rax
  8004216623:	84 c0                	test   %al,%al
  8004216625:	75 06                	jne    800421662d <mpsearch1+0x140>
  8004216627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421662b:	eb 14                	jmp    8004216641 <mpsearch1+0x154>
  800421662d:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  8004216632:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216636:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421663a:	72 a9                	jb     80042165e5 <mpsearch1+0xf8>
  800421663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216641:	c9                   	leaveq 
  8004216642:	c3                   	retq   

0000008004216643 <mpsearch>:
  8004216643:	55                   	push   %rbp
  8004216644:	48 89 e5             	mov    %rsp,%rbp
  8004216647:	48 83 ec 30          	sub    $0x30,%rsp
  800421664b:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004216652:	00 
  8004216653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216657:	48 c1 e8 0c          	shr    $0xc,%rax
  800421665b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421665e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216661:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216668:	00 00 00 
  800421666b:	48 8b 00             	mov    (%rax),%rax
  800421666e:	48 39 c2             	cmp    %rax,%rdx
  8004216671:	72 32                	jb     80042166a5 <mpsearch+0x62>
  8004216673:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216677:	48 89 c1             	mov    %rax,%rcx
  800421667a:	48 ba d8 b1 21 04 80 	movabs $0x800421b1d8,%rdx
  8004216681:	00 00 00 
  8004216684:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004216689:	48 bf fb b1 21 04 80 	movabs $0x800421b1fb,%rdi
  8004216690:	00 00 00 
  8004216693:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216698:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421669f:	00 00 00 
  80042166a2:	41 ff d0             	callq  *%r8
  80042166a5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042166ac:	00 00 00 
  80042166af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166b3:	48 01 d0             	add    %rdx,%rax
  80042166b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042166ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042166be:	48 83 c0 0e          	add    $0xe,%rax
  80042166c2:	0f b7 00             	movzwl (%rax),%eax
  80042166c5:	0f b7 c0             	movzwl %ax,%eax
  80042166c8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042166cb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042166cf:	74 2c                	je     80042166fd <mpsearch+0xba>
  80042166d1:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  80042166d5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042166d8:	be 00 04 00 00       	mov    $0x400,%esi
  80042166dd:	48 89 c7             	mov    %rax,%rdi
  80042166e0:	48 b8 ed 64 21 04 80 	movabs $0x80042164ed,%rax
  80042166e7:	00 00 00 
  80042166ea:	ff d0                	callq  *%rax
  80042166ec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042166f0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042166f5:	74 49                	je     8004216740 <mpsearch+0xfd>
  80042166f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042166fb:	eb 59                	jmp    8004216756 <mpsearch+0x113>
  80042166fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216701:	48 83 c0 13          	add    $0x13,%rax
  8004216705:	0f b7 00             	movzwl (%rax),%eax
  8004216708:	0f b7 c0             	movzwl %ax,%eax
  800421670b:	c1 e0 0a             	shl    $0xa,%eax
  800421670e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216711:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216714:	2d 00 04 00 00       	sub    $0x400,%eax
  8004216719:	89 c0                	mov    %eax,%eax
  800421671b:	be 00 04 00 00       	mov    $0x400,%esi
  8004216720:	48 89 c7             	mov    %rax,%rdi
  8004216723:	48 b8 ed 64 21 04 80 	movabs $0x80042164ed,%rax
  800421672a:	00 00 00 
  800421672d:	ff d0                	callq  *%rax
  800421672f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216733:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216738:	74 06                	je     8004216740 <mpsearch+0xfd>
  800421673a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421673e:	eb 16                	jmp    8004216756 <mpsearch+0x113>
  8004216740:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216745:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  800421674a:	48 b8 ed 64 21 04 80 	movabs $0x80042164ed,%rax
  8004216751:	00 00 00 
  8004216754:	ff d0                	callq  *%rax
  8004216756:	c9                   	leaveq 
  8004216757:	c3                   	retq   

0000008004216758 <mpconfig>:
  8004216758:	55                   	push   %rbp
  8004216759:	48 89 e5             	mov    %rsp,%rbp
  800421675c:	48 83 ec 30          	sub    $0x30,%rsp
  8004216760:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004216764:	48 b8 43 66 21 04 80 	movabs $0x8004216643,%rax
  800421676b:	00 00 00 
  800421676e:	ff d0                	callq  *%rax
  8004216770:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216774:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004216779:	75 0a                	jne    8004216785 <mpconfig+0x2d>
  800421677b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216780:	e9 f6 01 00 00       	jmpq   800421697b <mpconfig+0x223>
  8004216785:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216789:	8b 40 04             	mov    0x4(%rax),%eax
  800421678c:	85 c0                	test   %eax,%eax
  800421678e:	74 0c                	je     800421679c <mpconfig+0x44>
  8004216790:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216794:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004216798:	84 c0                	test   %al,%al
  800421679a:	74 25                	je     80042167c1 <mpconfig+0x69>
  800421679c:	48 bf 18 b2 21 04 80 	movabs $0x800421b218,%rdi
  80042167a3:	00 00 00 
  80042167a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167ab:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042167b2:	00 00 00 
  80042167b5:	ff d2                	callq  *%rdx
  80042167b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167bc:	e9 ba 01 00 00       	jmpq   800421697b <mpconfig+0x223>
  80042167c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042167c5:	8b 40 04             	mov    0x4(%rax),%eax
  80042167c8:	89 c0                	mov    %eax,%eax
  80042167ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042167ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167d2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042167d6:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042167d9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042167dc:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042167e3:	00 00 00 
  80042167e6:	48 8b 00             	mov    (%rax),%rax
  80042167e9:	48 39 c2             	cmp    %rax,%rdx
  80042167ec:	72 32                	jb     8004216820 <mpconfig+0xc8>
  80042167ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167f2:	48 89 c1             	mov    %rax,%rcx
  80042167f5:	48 ba d8 b1 21 04 80 	movabs $0x800421b1d8,%rdx
  80042167fc:	00 00 00 
  80042167ff:	be ad 00 00 00       	mov    $0xad,%esi
  8004216804:	48 bf fb b1 21 04 80 	movabs $0x800421b1fb,%rdi
  800421680b:	00 00 00 
  800421680e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216813:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421681a:	00 00 00 
  800421681d:	41 ff d0             	callq  *%r8
  8004216820:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216827:	00 00 00 
  800421682a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421682e:	48 01 d0             	add    %rdx,%rax
  8004216831:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216835:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216839:	ba 04 00 00 00       	mov    $0x4,%edx
  800421683e:	48 be 45 b2 21 04 80 	movabs $0x800421b245,%rsi
  8004216845:	00 00 00 
  8004216848:	48 89 c7             	mov    %rax,%rdi
  800421684b:	48 b8 a6 01 21 04 80 	movabs $0x80042101a6,%rax
  8004216852:	00 00 00 
  8004216855:	ff d0                	callq  *%rax
  8004216857:	85 c0                	test   %eax,%eax
  8004216859:	74 25                	je     8004216880 <mpconfig+0x128>
  800421685b:	48 bf 50 b2 21 04 80 	movabs $0x800421b250,%rdi
  8004216862:	00 00 00 
  8004216865:	b8 00 00 00 00       	mov    $0x0,%eax
  800421686a:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216871:	00 00 00 
  8004216874:	ff d2                	callq  *%rdx
  8004216876:	b8 00 00 00 00       	mov    $0x0,%eax
  800421687b:	e9 fb 00 00 00       	jmpq   800421697b <mpconfig+0x223>
  8004216880:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216884:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004216888:	0f b7 d0             	movzwl %ax,%edx
  800421688b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421688f:	89 d6                	mov    %edx,%esi
  8004216891:	48 89 c7             	mov    %rax,%rdi
  8004216894:	48 b8 a7 64 21 04 80 	movabs $0x80042164a7,%rax
  800421689b:	00 00 00 
  800421689e:	ff d0                	callq  *%rax
  80042168a0:	84 c0                	test   %al,%al
  80042168a2:	74 25                	je     80042168c9 <mpconfig+0x171>
  80042168a4:	48 bf 88 b2 21 04 80 	movabs $0x800421b288,%rdi
  80042168ab:	00 00 00 
  80042168ae:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168b3:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042168ba:	00 00 00 
  80042168bd:	ff d2                	callq  *%rdx
  80042168bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168c4:	e9 b2 00 00 00       	jmpq   800421697b <mpconfig+0x223>
  80042168c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168cd:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042168d1:	3c 01                	cmp    $0x1,%al
  80042168d3:	74 3b                	je     8004216910 <mpconfig+0x1b8>
  80042168d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168d9:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042168dd:	3c 04                	cmp    $0x4,%al
  80042168df:	74 2f                	je     8004216910 <mpconfig+0x1b8>
  80042168e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168e5:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042168e9:	0f b6 c0             	movzbl %al,%eax
  80042168ec:	89 c6                	mov    %eax,%esi
  80042168ee:	48 bf b0 b2 21 04 80 	movabs $0x800421b2b0,%rdi
  80042168f5:	00 00 00 
  80042168f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168fd:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216904:	00 00 00 
  8004216907:	ff d2                	callq  *%rdx
  8004216909:	b8 00 00 00 00       	mov    $0x0,%eax
  800421690e:	eb 6b                	jmp    800421697b <mpconfig+0x223>
  8004216910:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216914:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004216918:	0f b7 c0             	movzwl %ax,%eax
  800421691b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421691f:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004216923:	0f b7 ca             	movzwl %dx,%ecx
  8004216926:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421692a:	48 01 ca             	add    %rcx,%rdx
  800421692d:	89 c6                	mov    %eax,%esi
  800421692f:	48 89 d7             	mov    %rdx,%rdi
  8004216932:	48 b8 a7 64 21 04 80 	movabs $0x80042164a7,%rax
  8004216939:	00 00 00 
  800421693c:	ff d0                	callq  *%rax
  800421693e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216942:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004216946:	38 d0                	cmp    %dl,%al
  8004216948:	74 22                	je     800421696c <mpconfig+0x214>
  800421694a:	48 bf d0 b2 21 04 80 	movabs $0x800421b2d0,%rdi
  8004216951:	00 00 00 
  8004216954:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216959:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216960:	00 00 00 
  8004216963:	ff d2                	callq  *%rdx
  8004216965:	b8 00 00 00 00       	mov    $0x0,%eax
  800421696a:	eb 0f                	jmp    800421697b <mpconfig+0x223>
  800421696c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216970:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216974:	48 89 10             	mov    %rdx,(%rax)
  8004216977:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421697b:	c9                   	leaveq 
  800421697c:	c3                   	retq   

000000800421697d <mp_init>:
  800421697d:	55                   	push   %rbp
  800421697e:	48 89 e5             	mov    %rsp,%rbp
  8004216981:	53                   	push   %rbx
  8004216982:	48 83 ec 58          	sub    $0x58,%rsp
  8004216986:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  800421698d:	00 00 00 
  8004216990:	48 bb 20 d0 69 04 80 	movabs $0x800469d020,%rbx
  8004216997:	00 00 00 
  800421699a:	48 89 18             	mov    %rbx,(%rax)
  800421699d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  80042169a1:	48 89 c7             	mov    %rax,%rdi
  80042169a4:	48 b8 58 67 21 04 80 	movabs $0x8004216758,%rax
  80042169ab:	00 00 00 
  80042169ae:	ff d0                	callq  *%rax
  80042169b0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042169b4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042169b9:	75 05                	jne    80042169c0 <mp_init+0x43>
  80042169bb:	e9 d2 03 00 00       	jmpq   8004216d92 <mp_init+0x415>
  80042169c0:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  80042169c7:	00 00 00 
  80042169ca:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  80042169d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169d4:	8b 40 24             	mov    0x24(%rax),%eax
  80042169d7:	89 c2                	mov    %eax,%edx
  80042169d9:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  80042169e0:	00 00 00 
  80042169e3:	48 89 10             	mov    %rdx,(%rax)
  80042169e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169ea:	48 83 c0 2c          	add    $0x2c,%rax
  80042169ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042169f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042169f9:	e9 17 02 00 00       	jmpq   8004216c15 <mp_init+0x298>
  80042169fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a02:	0f b6 00             	movzbl (%rax),%eax
  8004216a05:	0f b6 c0             	movzbl %al,%eax
  8004216a08:	85 c0                	test   %eax,%eax
  8004216a0a:	74 16                	je     8004216a22 <mp_init+0xa5>
  8004216a0c:	85 c0                	test   %eax,%eax
  8004216a0e:	0f 88 b8 01 00 00    	js     8004216bcc <mp_init+0x24f>
  8004216a14:	83 f8 04             	cmp    $0x4,%eax
  8004216a17:	0f 8f af 01 00 00    	jg     8004216bcc <mp_init+0x24f>
  8004216a1d:	e9 a3 01 00 00       	jmpq   8004216bc5 <mp_init+0x248>
  8004216a22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a26:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216a2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a2e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216a32:	0f b6 c0             	movzbl %al,%eax
  8004216a35:	83 e0 02             	and    $0x2,%eax
  8004216a38:	85 c0                	test   %eax,%eax
  8004216a3a:	74 51                	je     8004216a8d <mp_init+0x110>
  8004216a3c:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216a43:	00 00 00 
  8004216a46:	8b 00                	mov    (%rax),%eax
  8004216a48:	48 98                	cltq   
  8004216a4a:	48 c1 e0 03          	shl    $0x3,%rax
  8004216a4e:	48 89 c2             	mov    %rax,%rdx
  8004216a51:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216a55:	48 01 d0             	add    %rdx,%rax
  8004216a58:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216a5f:	00 00 00 
  8004216a62:	48 01 c2             	add    %rax,%rdx
  8004216a65:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216a6c:	00 00 00 
  8004216a6f:	48 89 10             	mov    %rdx,(%rax)
  8004216a72:	48 bf fd b2 21 04 80 	movabs $0x800421b2fd,%rdi
  8004216a79:	00 00 00 
  8004216a7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a81:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216a88:	00 00 00 
  8004216a8b:	ff d2                	callq  *%rdx
  8004216a8d:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216a94:	00 00 00 
  8004216a97:	8b 00                	mov    (%rax),%eax
  8004216a99:	83 f8 03             	cmp    $0x3,%eax
  8004216a9c:	0f 8f f4 00 00 00    	jg     8004216b96 <mp_init+0x219>
  8004216aa2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216aa6:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004216aaa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216aae:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216ab2:	0f b6 f0             	movzbl %al,%esi
  8004216ab5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ab9:	8b 78 08             	mov    0x8(%rax),%edi
  8004216abc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ac0:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004216ac4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ac8:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004216acc:	0f b6 c8             	movzbl %al,%ecx
  8004216acf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ad3:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216ad7:	0f b6 d0             	movzbl %al,%edx
  8004216ada:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ade:	0f b6 00             	movzbl (%rax),%eax
  8004216ae1:	0f b6 c0             	movzbl %al,%eax
  8004216ae4:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004216ae9:	89 34 24             	mov    %esi,(%rsp)
  8004216aec:	41 89 f9             	mov    %edi,%r9d
  8004216aef:	4d 89 d0             	mov    %r10,%r8
  8004216af2:	89 c6                	mov    %eax,%esi
  8004216af4:	48 bf 10 b3 21 04 80 	movabs $0x800421b310,%rdi
  8004216afb:	00 00 00 
  8004216afe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b03:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  8004216b0a:	00 00 00 
  8004216b0d:	41 ff d2             	callq  *%r10
  8004216b10:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b14:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216b18:	0f b6 c0             	movzbl %al,%eax
  8004216b1b:	83 e0 01             	and    $0x1,%eax
  8004216b1e:	85 c0                	test   %eax,%eax
  8004216b20:	74 57                	je     8004216b79 <mp_init+0x1fc>
  8004216b22:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b29:	00 00 00 
  8004216b2c:	8b 30                	mov    (%rax),%esi
  8004216b2e:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b35:	00 00 00 
  8004216b38:	8b 00                	mov    (%rax),%eax
  8004216b3a:	89 c2                	mov    %eax,%edx
  8004216b3c:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  8004216b43:	00 00 00 
  8004216b46:	48 63 c6             	movslq %esi,%rax
  8004216b49:	48 c1 e0 03          	shl    $0x3,%rax
  8004216b4d:	48 89 c6             	mov    %rax,%rsi
  8004216b50:	48 c1 e6 04          	shl    $0x4,%rsi
  8004216b54:	48 01 f0             	add    %rsi,%rax
  8004216b57:	48 01 c8             	add    %rcx,%rax
  8004216b5a:	88 10                	mov    %dl,(%rax)
  8004216b5c:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b63:	00 00 00 
  8004216b66:	8b 00                	mov    (%rax),%eax
  8004216b68:	8d 50 01             	lea    0x1(%rax),%edx
  8004216b6b:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b72:	00 00 00 
  8004216b75:	89 10                	mov    %edx,(%rax)
  8004216b77:	eb 45                	jmp    8004216bbe <mp_init+0x241>
  8004216b79:	48 bf 60 b3 21 04 80 	movabs $0x800421b360,%rdi
  8004216b80:	00 00 00 
  8004216b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b88:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216b8f:	00 00 00 
  8004216b92:	ff d2                	callq  *%rdx
  8004216b94:	eb 28                	jmp    8004216bbe <mp_init+0x241>
  8004216b96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b9a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216b9e:	0f b6 c0             	movzbl %al,%eax
  8004216ba1:	89 c6                	mov    %eax,%esi
  8004216ba3:	48 bf 90 b3 21 04 80 	movabs $0x800421b390,%rdi
  8004216baa:	00 00 00 
  8004216bad:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216bb2:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216bb9:	00 00 00 
  8004216bbc:	ff d2                	callq  *%rdx
  8004216bbe:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004216bc3:	eb 4c                	jmp    8004216c11 <mp_init+0x294>
  8004216bc5:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004216bca:	eb 45                	jmp    8004216c11 <mp_init+0x294>
  8004216bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216bd0:	0f b6 00             	movzbl (%rax),%eax
  8004216bd3:	0f b6 c0             	movzbl %al,%eax
  8004216bd6:	89 c6                	mov    %eax,%esi
  8004216bd8:	48 bf b8 b3 21 04 80 	movabs $0x800421b3b8,%rdi
  8004216bdf:	00 00 00 
  8004216be2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216be7:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216bee:	00 00 00 
  8004216bf1:	ff d2                	callq  *%rdx
  8004216bf3:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216bfa:	00 00 00 
  8004216bfd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004216c03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c07:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216c0b:	0f b7 c0             	movzwl %ax,%eax
  8004216c0e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216c11:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216c15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c19:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216c1d:	0f b7 c0             	movzwl %ax,%eax
  8004216c20:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216c23:	0f 87 d5 fd ff ff    	ja     80042169fe <mp_init+0x81>
  8004216c29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216c30:	eb 53                	jmp    8004216c85 <mp_init+0x308>
  8004216c32:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216c39:	00 00 00 
  8004216c3c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216c3f:	48 c1 e0 03          	shl    $0x3,%rax
  8004216c43:	48 89 c1             	mov    %rax,%rcx
  8004216c46:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216c4a:	48 01 c8             	add    %rcx,%rax
  8004216c4d:	48 01 d0             	add    %rdx,%rax
  8004216c50:	48 83 c0 70          	add    $0x70,%rax
  8004216c54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004216c58:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216c5f:	00 00 00 
  8004216c62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216c65:	48 c1 e0 03          	shl    $0x3,%rax
  8004216c69:	48 89 c1             	mov    %rax,%rcx
  8004216c6c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216c70:	48 01 c8             	add    %rcx,%rax
  8004216c73:	48 01 d0             	add    %rdx,%rax
  8004216c76:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004216c7a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216c81:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216c85:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004216c89:	76 a7                	jbe    8004216c32 <mp_init+0x2b5>
  8004216c8b:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216c92:	00 00 00 
  8004216c95:	48 8b 00             	mov    (%rax),%rax
  8004216c98:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004216c9f:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216ca6:	00 00 00 
  8004216ca9:	8b 00                	mov    (%rax),%eax
  8004216cab:	85 c0                	test   %eax,%eax
  8004216cad:	75 41                	jne    8004216cf0 <mp_init+0x373>
  8004216caf:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216cb6:	00 00 00 
  8004216cb9:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216cbf:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216cc6:	00 00 00 
  8004216cc9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216cd0:	48 bf d8 b3 21 04 80 	movabs $0x800421b3d8,%rdi
  8004216cd7:	00 00 00 
  8004216cda:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216cdf:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216ce6:	00 00 00 
  8004216ce9:	ff d2                	callq  *%rdx
  8004216ceb:	e9 a2 00 00 00       	jmpq   8004216d92 <mp_init+0x415>
  8004216cf0:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216cf7:	00 00 00 
  8004216cfa:	8b 10                	mov    (%rax),%edx
  8004216cfc:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216d03:	00 00 00 
  8004216d06:	48 8b 00             	mov    (%rax),%rax
  8004216d09:	0f b6 00             	movzbl (%rax),%eax
  8004216d0c:	0f b6 c0             	movzbl %al,%eax
  8004216d0f:	89 c6                	mov    %eax,%esi
  8004216d11:	48 bf 04 b4 21 04 80 	movabs $0x800421b404,%rdi
  8004216d18:	00 00 00 
  8004216d1b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d20:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  8004216d27:	00 00 00 
  8004216d2a:	ff d1                	callq  *%rcx
  8004216d2c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216d30:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004216d34:	84 c0                	test   %al,%al
  8004216d36:	74 5a                	je     8004216d92 <mp_init+0x415>
  8004216d38:	48 bf 28 b4 21 04 80 	movabs $0x800421b428,%rdi
  8004216d3f:	00 00 00 
  8004216d42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d47:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004216d4e:	00 00 00 
  8004216d51:	ff d2                	callq  *%rdx
  8004216d53:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004216d5a:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216d5e:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004216d62:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216d65:	ee                   	out    %al,(%dx)
  8004216d66:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216d6d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216d70:	89 c2                	mov    %eax,%edx
  8004216d72:	ec                   	in     (%dx),%al
  8004216d73:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004216d76:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004216d7a:	83 c8 01             	or     $0x1,%eax
  8004216d7d:	0f b6 c0             	movzbl %al,%eax
  8004216d80:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004216d87:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216d8a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004216d8e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004216d91:	ee                   	out    %al,(%dx)
  8004216d92:	48 83 c4 58          	add    $0x58,%rsp
  8004216d96:	5b                   	pop    %rbx
  8004216d97:	5d                   	pop    %rbp
  8004216d98:	c3                   	retq   

0000008004216d99 <lapicw>:
  8004216d99:	55                   	push   %rbp
  8004216d9a:	48 89 e5             	mov    %rsp,%rbp
  8004216d9d:	48 83 ec 08          	sub    $0x8,%rsp
  8004216da1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004216da4:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004216da7:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216dae:	00 00 00 
  8004216db1:	48 8b 00             	mov    (%rax),%rax
  8004216db4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216db7:	48 63 d2             	movslq %edx,%rdx
  8004216dba:	48 c1 e2 02          	shl    $0x2,%rdx
  8004216dbe:	48 01 c2             	add    %rax,%rdx
  8004216dc1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216dc4:	89 02                	mov    %eax,(%rdx)
  8004216dc6:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216dcd:	00 00 00 
  8004216dd0:	48 8b 00             	mov    (%rax),%rax
  8004216dd3:	48 83 c0 20          	add    $0x20,%rax
  8004216dd7:	8b 00                	mov    (%rax),%eax
  8004216dd9:	c9                   	leaveq 
  8004216dda:	c3                   	retq   

0000008004216ddb <lapic_init>:
  8004216ddb:	55                   	push   %rbp
  8004216ddc:	48 89 e5             	mov    %rsp,%rbp
  8004216ddf:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216de6:	00 00 00 
  8004216de9:	48 8b 00             	mov    (%rax),%rax
  8004216dec:	48 85 c0             	test   %rax,%rax
  8004216def:	75 05                	jne    8004216df6 <lapic_init+0x1b>
  8004216df1:	e9 da 01 00 00       	jmpq   8004216fd0 <lapic_init+0x1f5>
  8004216df6:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216dfd:	00 00 00 
  8004216e00:	48 8b 00             	mov    (%rax),%rax
  8004216e03:	be 00 10 00 00       	mov    $0x1000,%esi
  8004216e08:	48 89 c7             	mov    %rax,%rdi
  8004216e0b:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004216e12:	00 00 00 
  8004216e15:	ff d0                	callq  *%rax
  8004216e17:	48 ba 08 e0 6d 04 80 	movabs $0x80046de008,%rdx
  8004216e1e:	00 00 00 
  8004216e21:	48 89 02             	mov    %rax,(%rdx)
  8004216e24:	be 27 01 00 00       	mov    $0x127,%esi
  8004216e29:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004216e2e:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216e35:	00 00 00 
  8004216e38:	ff d0                	callq  *%rax
  8004216e3a:	be 0b 00 00 00       	mov    $0xb,%esi
  8004216e3f:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004216e44:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216e4b:	00 00 00 
  8004216e4e:	ff d0                	callq  *%rax
  8004216e50:	be 20 00 02 00       	mov    $0x20020,%esi
  8004216e55:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004216e5a:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216e61:	00 00 00 
  8004216e64:	ff d0                	callq  *%rax
  8004216e66:	be 80 96 98 00       	mov    $0x989680,%esi
  8004216e6b:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004216e70:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216e77:	00 00 00 
  8004216e7a:	ff d0                	callq  *%rax
  8004216e7c:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004216e83:	00 00 00 
  8004216e86:	ff d0                	callq  *%rax
  8004216e88:	48 98                	cltq   
  8004216e8a:	48 c1 e0 03          	shl    $0x3,%rax
  8004216e8e:	48 89 c2             	mov    %rax,%rdx
  8004216e91:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216e95:	48 01 d0             	add    %rdx,%rax
  8004216e98:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216e9f:	00 00 00 
  8004216ea2:	48 01 c2             	add    %rax,%rdx
  8004216ea5:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216eac:	00 00 00 
  8004216eaf:	48 8b 00             	mov    (%rax),%rax
  8004216eb2:	48 39 c2             	cmp    %rax,%rdx
  8004216eb5:	74 16                	je     8004216ecd <lapic_init+0xf2>
  8004216eb7:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216ebc:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004216ec1:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216ec8:	00 00 00 
  8004216ecb:	ff d0                	callq  *%rax
  8004216ecd:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216ed2:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004216ed7:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216ede:	00 00 00 
  8004216ee1:	ff d0                	callq  *%rax
  8004216ee3:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216eea:	00 00 00 
  8004216eed:	48 8b 00             	mov    (%rax),%rax
  8004216ef0:	48 83 c0 30          	add    $0x30,%rax
  8004216ef4:	8b 00                	mov    (%rax),%eax
  8004216ef6:	c1 e8 10             	shr    $0x10,%eax
  8004216ef9:	0f b6 c0             	movzbl %al,%eax
  8004216efc:	83 f8 03             	cmp    $0x3,%eax
  8004216eff:	76 16                	jbe    8004216f17 <lapic_init+0x13c>
  8004216f01:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f06:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004216f0b:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f12:	00 00 00 
  8004216f15:	ff d0                	callq  *%rax
  8004216f17:	be 33 00 00 00       	mov    $0x33,%esi
  8004216f1c:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004216f21:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f28:	00 00 00 
  8004216f2b:	ff d0                	callq  *%rax
  8004216f2d:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f32:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216f37:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f3e:	00 00 00 
  8004216f41:	ff d0                	callq  *%rax
  8004216f43:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f48:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216f4d:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f54:	00 00 00 
  8004216f57:	ff d0                	callq  *%rax
  8004216f59:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f5e:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004216f63:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f6a:	00 00 00 
  8004216f6d:	ff d0                	callq  *%rax
  8004216f6f:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f74:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004216f79:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f80:	00 00 00 
  8004216f83:	ff d0                	callq  *%rax
  8004216f85:	be 00 85 08 00       	mov    $0x88500,%esi
  8004216f8a:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004216f8f:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216f96:	00 00 00 
  8004216f99:	ff d0                	callq  *%rax
  8004216f9b:	90                   	nop
  8004216f9c:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216fa3:	00 00 00 
  8004216fa6:	48 8b 00             	mov    (%rax),%rax
  8004216fa9:	48 05 00 03 00 00    	add    $0x300,%rax
  8004216faf:	8b 00                	mov    (%rax),%eax
  8004216fb1:	25 00 10 00 00       	and    $0x1000,%eax
  8004216fb6:	85 c0                	test   %eax,%eax
  8004216fb8:	75 e2                	jne    8004216f9c <lapic_init+0x1c1>
  8004216fba:	be 00 00 00 00       	mov    $0x0,%esi
  8004216fbf:	bf 20 00 00 00       	mov    $0x20,%edi
  8004216fc4:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004216fcb:	00 00 00 
  8004216fce:	ff d0                	callq  *%rax
  8004216fd0:	5d                   	pop    %rbp
  8004216fd1:	c3                   	retq   

0000008004216fd2 <cpunum>:
  8004216fd2:	55                   	push   %rbp
  8004216fd3:	48 89 e5             	mov    %rsp,%rbp
  8004216fd6:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216fdd:	00 00 00 
  8004216fe0:	48 8b 00             	mov    (%rax),%rax
  8004216fe3:	48 85 c0             	test   %rax,%rax
  8004216fe6:	74 18                	je     8004217000 <cpunum+0x2e>
  8004216fe8:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216fef:	00 00 00 
  8004216ff2:	48 8b 00             	mov    (%rax),%rax
  8004216ff5:	48 83 c0 20          	add    $0x20,%rax
  8004216ff9:	8b 00                	mov    (%rax),%eax
  8004216ffb:	c1 e8 18             	shr    $0x18,%eax
  8004216ffe:	eb 05                	jmp    8004217005 <cpunum+0x33>
  8004217000:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217005:	5d                   	pop    %rbp
  8004217006:	c3                   	retq   

0000008004217007 <lapic_eoi>:
  8004217007:	55                   	push   %rbp
  8004217008:	48 89 e5             	mov    %rsp,%rbp
  800421700b:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004217012:	00 00 00 
  8004217015:	48 8b 00             	mov    (%rax),%rax
  8004217018:	48 85 c0             	test   %rax,%rax
  800421701b:	74 16                	je     8004217033 <lapic_eoi+0x2c>
  800421701d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217022:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217027:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  800421702e:	00 00 00 
  8004217031:	ff d0                	callq  *%rax
  8004217033:	5d                   	pop    %rbp
  8004217034:	c3                   	retq   

0000008004217035 <microdelay>:
  8004217035:	55                   	push   %rbp
  8004217036:	48 89 e5             	mov    %rsp,%rbp
  8004217039:	48 83 ec 04          	sub    $0x4,%rsp
  800421703d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217040:	c9                   	leaveq 
  8004217041:	c3                   	retq   

0000008004217042 <lapic_startap>:
  8004217042:	55                   	push   %rbp
  8004217043:	48 89 e5             	mov    %rsp,%rbp
  8004217046:	48 83 ec 40          	sub    $0x40,%rsp
  800421704a:	89 f8                	mov    %edi,%eax
  800421704c:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800421704f:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217052:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217059:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  800421705d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217061:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217064:	ee                   	out    %al,(%dx)
  8004217065:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  800421706c:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217070:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217074:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217077:	ee                   	out    %al,(%dx)
  8004217078:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  800421707f:	00 
  8004217080:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217084:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217088:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421708b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421708e:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004217095:	00 00 00 
  8004217098:	48 8b 00             	mov    (%rax),%rax
  800421709b:	48 39 c2             	cmp    %rax,%rdx
  800421709e:	72 32                	jb     80042170d2 <lapic_startap+0x90>
  80042170a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170a4:	48 89 c1             	mov    %rax,%rcx
  80042170a7:	48 ba 70 b4 21 04 80 	movabs $0x800421b470,%rdx
  80042170ae:	00 00 00 
  80042170b1:	be 99 00 00 00       	mov    $0x99,%esi
  80042170b6:	48 bf 93 b4 21 04 80 	movabs $0x800421b493,%rdi
  80042170bd:	00 00 00 
  80042170c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170c5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042170cc:	00 00 00 
  80042170cf:	41 ff d0             	callq  *%r8
  80042170d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042170d9:	00 00 00 
  80042170dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170e0:	48 01 d0             	add    %rdx,%rax
  80042170e3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042170e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042170eb:	66 c7 00 00 00       	movw   $0x0,(%rax)
  80042170f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042170f4:	48 8d 50 02          	lea    0x2(%rax),%rdx
  80042170f8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  80042170fb:	c1 e8 04             	shr    $0x4,%eax
  80042170fe:	66 89 02             	mov    %ax,(%rdx)
  8004217101:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217105:	c1 e0 18             	shl    $0x18,%eax
  8004217108:	89 c6                	mov    %eax,%esi
  800421710a:	bf c4 00 00 00       	mov    $0xc4,%edi
  800421710f:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004217116:	00 00 00 
  8004217119:	ff d0                	callq  *%rax
  800421711b:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217120:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217125:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  800421712c:	00 00 00 
  800421712f:	ff d0                	callq  *%rax
  8004217131:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217136:	48 b8 35 70 21 04 80 	movabs $0x8004217035,%rax
  800421713d:	00 00 00 
  8004217140:	ff d0                	callq  *%rax
  8004217142:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217147:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421714c:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004217153:	00 00 00 
  8004217156:	ff d0                	callq  *%rax
  8004217158:	bf 64 00 00 00       	mov    $0x64,%edi
  800421715d:	48 b8 35 70 21 04 80 	movabs $0x8004217035,%rax
  8004217164:	00 00 00 
  8004217167:	ff d0                	callq  *%rax
  8004217169:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217170:	eb 4b                	jmp    80042171bd <lapic_startap+0x17b>
  8004217172:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217176:	c1 e0 18             	shl    $0x18,%eax
  8004217179:	89 c6                	mov    %eax,%esi
  800421717b:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217180:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  8004217187:	00 00 00 
  800421718a:	ff d0                	callq  *%rax
  800421718c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421718f:	c1 e8 0c             	shr    $0xc,%eax
  8004217192:	80 cc 06             	or     $0x6,%ah
  8004217195:	89 c6                	mov    %eax,%esi
  8004217197:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421719c:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  80042171a3:	00 00 00 
  80042171a6:	ff d0                	callq  *%rax
  80042171a8:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042171ad:	48 b8 35 70 21 04 80 	movabs $0x8004217035,%rax
  80042171b4:	00 00 00 
  80042171b7:	ff d0                	callq  *%rax
  80042171b9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042171bd:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  80042171c1:	7e af                	jle    8004217172 <lapic_startap+0x130>
  80042171c3:	c9                   	leaveq 
  80042171c4:	c3                   	retq   

00000080042171c5 <lapic_ipi>:
  80042171c5:	55                   	push   %rbp
  80042171c6:	48 89 e5             	mov    %rsp,%rbp
  80042171c9:	48 83 ec 08          	sub    $0x8,%rsp
  80042171cd:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042171d0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042171d3:	0d 00 00 0c 00       	or     $0xc0000,%eax
  80042171d8:	89 c6                	mov    %eax,%esi
  80042171da:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042171df:	48 b8 99 6d 21 04 80 	movabs $0x8004216d99,%rax
  80042171e6:	00 00 00 
  80042171e9:	ff d0                	callq  *%rax
  80042171eb:	90                   	nop
  80042171ec:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  80042171f3:	00 00 00 
  80042171f6:	48 8b 00             	mov    (%rax),%rax
  80042171f9:	48 05 00 03 00 00    	add    $0x300,%rax
  80042171ff:	8b 00                	mov    (%rax),%eax
  8004217201:	25 00 10 00 00       	and    $0x1000,%eax
  8004217206:	85 c0                	test   %eax,%eax
  8004217208:	75 e2                	jne    80042171ec <lapic_ipi+0x27>
  800421720a:	c9                   	leaveq 
  800421720b:	c3                   	retq   

000000800421720c <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800421720c:	55                   	push   %rbp
  800421720d:	48 89 e5             	mov    %rsp,%rbp
  8004217210:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217214:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217218:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800421721b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421721f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217222:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217226:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217229:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800421722c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800421722f:	c9                   	leaveq 
  8004217230:	c3                   	retq   

0000008004217231 <get_caller_pcs>:
  8004217231:	55                   	push   %rbp
  8004217232:	48 89 e5             	mov    %rsp,%rbp
  8004217235:	48 83 ec 28          	sub    $0x28,%rsp
  8004217239:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  800421723d:	48 89 e8             	mov    %rbp,%rax
  8004217240:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217244:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217248:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421724c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217253:	eb 45                	jmp    800421729a <get_caller_pcs+0x69>
  8004217255:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421725a:	74 44                	je     80042172a0 <get_caller_pcs+0x6f>
  800421725c:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217263:	00 00 00 
  8004217266:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421726a:	76 34                	jbe    80042172a0 <get_caller_pcs+0x6f>
  800421726c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421726f:	48 98                	cltq   
  8004217271:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217278:	00 
  8004217279:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421727d:	48 01 c2             	add    %rax,%rdx
  8004217280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217284:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217288:	48 89 02             	mov    %rax,(%rdx)
  800421728b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421728f:	48 8b 00             	mov    (%rax),%rax
  8004217292:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217296:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421729a:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  800421729e:	7e b5                	jle    8004217255 <get_caller_pcs+0x24>
  80042172a0:	eb 1f                	jmp    80042172c1 <get_caller_pcs+0x90>
  80042172a2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042172a5:	48 98                	cltq   
  80042172a7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042172ae:	00 
  80042172af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172b3:	48 01 d0             	add    %rdx,%rax
  80042172b6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042172bd:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042172c1:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042172c5:	7e db                	jle    80042172a2 <get_caller_pcs+0x71>
  80042172c7:	c9                   	leaveq 
  80042172c8:	c3                   	retq   

00000080042172c9 <holding>:
  80042172c9:	55                   	push   %rbp
  80042172ca:	48 89 e5             	mov    %rsp,%rbp
  80042172cd:	53                   	push   %rbx
  80042172ce:	48 83 ec 18          	sub    $0x18,%rsp
  80042172d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042172d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042172da:	8b 00                	mov    (%rax),%eax
  80042172dc:	85 c0                	test   %eax,%eax
  80042172de:	74 3d                	je     800421731d <holding+0x54>
  80042172e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042172e4:	48 8b 58 10          	mov    0x10(%rax),%rbx
  80042172e8:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042172ef:	00 00 00 
  80042172f2:	ff d0                	callq  *%rax
  80042172f4:	48 98                	cltq   
  80042172f6:	48 c1 e0 03          	shl    $0x3,%rax
  80042172fa:	48 89 c2             	mov    %rax,%rdx
  80042172fd:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217301:	48 01 d0             	add    %rdx,%rax
  8004217304:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800421730b:	00 00 00 
  800421730e:	48 01 d0             	add    %rdx,%rax
  8004217311:	48 39 c3             	cmp    %rax,%rbx
  8004217314:	75 07                	jne    800421731d <holding+0x54>
  8004217316:	b8 01 00 00 00       	mov    $0x1,%eax
  800421731b:	eb 05                	jmp    8004217322 <holding+0x59>
  800421731d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217322:	48 83 c4 18          	add    $0x18,%rsp
  8004217326:	5b                   	pop    %rbx
  8004217327:	5d                   	pop    %rbp
  8004217328:	c3                   	retq   

0000008004217329 <__spin_initlock>:
  8004217329:	55                   	push   %rbp
  800421732a:	48 89 e5             	mov    %rsp,%rbp
  800421732d:	48 83 ec 10          	sub    $0x10,%rsp
  8004217331:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217335:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217339:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421733d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217347:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421734b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421734f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217353:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421735a:	00 
  800421735b:	c9                   	leaveq 
  800421735c:	c3                   	retq   

000000800421735d <spin_lock>:
  800421735d:	55                   	push   %rbp
  800421735e:	48 89 e5             	mov    %rsp,%rbp
  8004217361:	53                   	push   %rbx
  8004217362:	48 83 ec 18          	sub    $0x18,%rsp
  8004217366:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421736a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421736e:	48 89 c7             	mov    %rax,%rdi
  8004217371:	48 b8 c9 72 21 04 80 	movabs $0x80042172c9,%rax
  8004217378:	00 00 00 
  800421737b:	ff d0                	callq  *%rax
  800421737d:	85 c0                	test   %eax,%eax
  800421737f:	74 44                	je     80042173c5 <spin_lock+0x68>
  8004217381:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217385:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217389:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  8004217390:	00 00 00 
  8004217393:	ff d0                	callq  *%rax
  8004217395:	49 89 d8             	mov    %rbx,%r8
  8004217398:	89 c1                	mov    %eax,%ecx
  800421739a:	48 ba b8 b4 21 04 80 	movabs $0x800421b4b8,%rdx
  80042173a1:	00 00 00 
  80042173a4:	be 42 00 00 00       	mov    $0x42,%esi
  80042173a9:	48 bf e2 b4 21 04 80 	movabs $0x800421b4e2,%rdi
  80042173b0:	00 00 00 
  80042173b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173b8:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  80042173bf:	00 00 00 
  80042173c2:	41 ff d1             	callq  *%r9
  80042173c5:	eb 02                	jmp    80042173c9 <spin_lock+0x6c>
  80042173c7:	f3 90                	pause  
  80042173c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173cd:	be 01 00 00 00       	mov    $0x1,%esi
  80042173d2:	48 89 c7             	mov    %rax,%rdi
  80042173d5:	48 b8 0c 72 21 04 80 	movabs $0x800421720c,%rax
  80042173dc:	00 00 00 
  80042173df:	ff d0                	callq  *%rax
  80042173e1:	85 c0                	test   %eax,%eax
  80042173e3:	75 e2                	jne    80042173c7 <spin_lock+0x6a>
  80042173e5:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042173ec:	00 00 00 
  80042173ef:	ff d0                	callq  *%rax
  80042173f1:	48 98                	cltq   
  80042173f3:	48 c1 e0 03          	shl    $0x3,%rax
  80042173f7:	48 89 c2             	mov    %rax,%rdx
  80042173fa:	48 c1 e2 04          	shl    $0x4,%rdx
  80042173fe:	48 01 d0             	add    %rdx,%rax
  8004217401:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004217408:	00 00 00 
  800421740b:	48 01 c2             	add    %rax,%rdx
  800421740e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217412:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217416:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421741a:	48 83 c0 18          	add    $0x18,%rax
  800421741e:	48 89 c7             	mov    %rax,%rdi
  8004217421:	48 b8 31 72 21 04 80 	movabs $0x8004217231,%rax
  8004217428:	00 00 00 
  800421742b:	ff d0                	callq  *%rax
  800421742d:	48 83 c4 18          	add    $0x18,%rsp
  8004217431:	5b                   	pop    %rbx
  8004217432:	5d                   	pop    %rbp
  8004217433:	c3                   	retq   

0000008004217434 <spin_unlock>:
  8004217434:	55                   	push   %rbp
  8004217435:	48 89 e5             	mov    %rsp,%rbp
  8004217438:	41 54                	push   %r12
  800421743a:	53                   	push   %rbx
  800421743b:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217442:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217449:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217450:	48 89 c7             	mov    %rax,%rdi
  8004217453:	48 b8 c9 72 21 04 80 	movabs $0x80042172c9,%rax
  800421745a:	00 00 00 
  800421745d:	ff d0                	callq  *%rax
  800421745f:	85 c0                	test   %eax,%eax
  8004217461:	0f 85 d2 01 00 00    	jne    8004217639 <spin_unlock+0x205>
  8004217467:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421746e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217472:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217479:	ba 28 00 00 00       	mov    $0x28,%edx
  800421747e:	48 89 ce             	mov    %rcx,%rsi
  8004217481:	48 89 c7             	mov    %rax,%rdi
  8004217484:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  800421748b:	00 00 00 
  800421748e:	ff d0                	callq  *%rax
  8004217490:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217497:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421749b:	48 85 c0             	test   %rax,%rax
  800421749e:	75 39                	jne    80042174d9 <spin_unlock+0xa5>
  80042174a0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174a7:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042174ab:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042174b2:	00 00 00 
  80042174b5:	ff d0                	callq  *%rax
  80042174b7:	48 89 da             	mov    %rbx,%rdx
  80042174ba:	89 c6                	mov    %eax,%esi
  80042174bc:	48 bf f8 b4 21 04 80 	movabs $0x800421b4f8,%rdi
  80042174c3:	00 00 00 
  80042174c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174cb:	48 b9 82 95 20 04 80 	movabs $0x8004209582,%rcx
  80042174d2:	00 00 00 
  80042174d5:	ff d1                	callq  *%rcx
  80042174d7:	eb 4d                	jmp    8004217526 <spin_unlock+0xf2>
  80042174d9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174e0:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042174e4:	0f b6 00             	movzbl (%rax),%eax
  80042174e7:	44 0f b6 e0          	movzbl %al,%r12d
  80042174eb:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174f2:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042174f6:	48 b8 d2 6f 21 04 80 	movabs $0x8004216fd2,%rax
  80042174fd:	00 00 00 
  8004217500:	ff d0                	callq  *%rax
  8004217502:	44 89 e1             	mov    %r12d,%ecx
  8004217505:	48 89 da             	mov    %rbx,%rdx
  8004217508:	89 c6                	mov    %eax,%esi
  800421750a:	48 bf 38 b5 21 04 80 	movabs $0x800421b538,%rdi
  8004217511:	00 00 00 
  8004217514:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217519:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  8004217520:	00 00 00 
  8004217523:	41 ff d0             	callq  *%r8
  8004217526:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800421752d:	e9 c3 00 00 00       	jmpq   80042175f5 <spin_unlock+0x1c1>
  8004217532:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217535:	48 98                	cltq   
  8004217537:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421753e:	89 c0                	mov    %eax,%eax
  8004217540:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  8004217547:	48 89 d6             	mov    %rdx,%rsi
  800421754a:	48 89 c7             	mov    %rax,%rdi
  800421754d:	48 b8 3c ec 20 04 80 	movabs $0x800420ec3c,%rax
  8004217554:	00 00 00 
  8004217557:	ff d0                	callq  *%rax
  8004217559:	85 c0                	test   %eax,%eax
  800421755b:	78 6b                	js     80042175c8 <spin_unlock+0x194>
  800421755d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217560:	48 98                	cltq   
  8004217562:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217569:	89 c2                	mov    %eax,%edx
  800421756b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217572:	48 29 c2             	sub    %rax,%rdx
  8004217575:	49 89 d0             	mov    %rdx,%r8
  8004217578:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  800421757f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217585:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  800421758b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217592:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217595:	48 98                	cltq   
  8004217597:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421759e:	4c 89 04 24          	mov    %r8,(%rsp)
  80042175a2:	49 89 f9             	mov    %rdi,%r9
  80042175a5:	41 89 f0             	mov    %esi,%r8d
  80042175a8:	89 c6                	mov    %eax,%esi
  80042175aa:	48 bf 6e b5 21 04 80 	movabs $0x800421b56e,%rdi
  80042175b1:	00 00 00 
  80042175b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175b9:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  80042175c0:	00 00 00 
  80042175c3:	41 ff d2             	callq  *%r10
  80042175c6:	eb 29                	jmp    80042175f1 <spin_unlock+0x1bd>
  80042175c8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042175cb:	48 98                	cltq   
  80042175cd:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042175d4:	89 c6                	mov    %eax,%esi
  80042175d6:	48 bf 85 b5 21 04 80 	movabs $0x800421b585,%rdi
  80042175dd:	00 00 00 
  80042175e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175e5:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  80042175ec:	00 00 00 
  80042175ef:	ff d2                	callq  *%rdx
  80042175f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042175f5:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042175f9:	7f 14                	jg     800421760f <spin_unlock+0x1db>
  80042175fb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042175fe:	48 98                	cltq   
  8004217600:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217607:	85 c0                	test   %eax,%eax
  8004217609:	0f 85 23 ff ff ff    	jne    8004217532 <spin_unlock+0xfe>
  800421760f:	48 ba 8d b5 21 04 80 	movabs $0x800421b58d,%rdx
  8004217616:	00 00 00 
  8004217619:	be 6c 00 00 00       	mov    $0x6c,%esi
  800421761e:	48 bf e2 b4 21 04 80 	movabs $0x800421b4e2,%rdi
  8004217625:	00 00 00 
  8004217628:	b8 00 00 00 00       	mov    $0x0,%eax
  800421762d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004217634:	00 00 00 
  8004217637:	ff d1                	callq  *%rcx
  8004217639:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217640:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8004217647:	00 
  8004217648:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421764f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217656:	00 
  8004217657:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421765e:	be 00 00 00 00       	mov    $0x0,%esi
  8004217663:	48 89 c7             	mov    %rax,%rdi
  8004217666:	48 b8 0c 72 21 04 80 	movabs $0x800421720c,%rax
  800421766d:	00 00 00 
  8004217670:	ff d0                	callq  *%rax
  8004217672:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004217679:	5b                   	pop    %rbx
  800421767a:	41 5c                	pop    %r12
  800421767c:	5d                   	pop    %rbp
  800421767d:	c3                   	retq   

000000800421767e <e1000_attach>:
  800421767e:	55                   	push   %rbp
  800421767f:	48 89 e5             	mov    %rsp,%rbp
  8004217682:	48 83 ec 40          	sub    $0x40,%rsp
  8004217686:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421768a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421768e:	48 89 c7             	mov    %rax,%rdi
  8004217691:	48 b8 3b 85 21 04 80 	movabs $0x800421853b,%rax
  8004217698:	00 00 00 
  800421769b:	ff d0                	callq  *%rax
  800421769d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042176a1:	8b 40 30             	mov    0x30(%rax),%eax
  80042176a4:	89 c2                	mov    %eax,%edx
  80042176a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042176aa:	8b 40 18             	mov    0x18(%rax),%eax
  80042176ad:	89 c0                	mov    %eax,%eax
  80042176af:	48 89 d6             	mov    %rdx,%rsi
  80042176b2:	48 89 c7             	mov    %rax,%rdi
  80042176b5:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  80042176bc:	00 00 00 
  80042176bf:	ff d0                	callq  *%rax
  80042176c1:	48 ba 20 d7 49 04 80 	movabs $0x800449d720,%rdx
  80042176c8:	00 00 00 
  80042176cb:	48 89 02             	mov    %rax,(%rdx)
  80042176ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042176d5:	e9 a9 00 00 00       	jmpq   8004217783 <e1000_attach+0x105>
  80042176da:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042176dd:	48 98                	cltq   
  80042176df:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042176e6:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  80042176ed:	00 00 00 
  80042176f0:	48 01 d0             	add    %rdx,%rax
  80042176f3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042176f7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042176fe:	00 00 00 
  8004217701:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004217705:	77 32                	ja     8004217739 <e1000_attach+0xbb>
  8004217707:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421770b:	48 89 c1             	mov    %rax,%rcx
  800421770e:	48 ba a0 b5 21 04 80 	movabs $0x800421b5a0,%rdx
  8004217715:	00 00 00 
  8004217718:	be 97 00 00 00       	mov    $0x97,%esi
  800421771d:	48 bf c4 b5 21 04 80 	movabs $0x800421b5c4,%rdi
  8004217724:	00 00 00 
  8004217727:	b8 00 00 00 00       	mov    $0x0,%eax
  800421772c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217733:	00 00 00 
  8004217736:	41 ff d0             	callq  *%r8
  8004217739:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217740:	ff ff ff 
  8004217743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217747:	48 01 c2             	add    %rax,%rdx
  800421774a:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217751:	00 00 00 
  8004217754:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217757:	48 63 c9             	movslq %ecx,%rcx
  800421775a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421775e:	48 01 c8             	add    %rcx,%rax
  8004217761:	48 89 10             	mov    %rdx,(%rax)
  8004217764:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  800421776b:	00 00 00 
  800421776e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217771:	48 63 d2             	movslq %edx,%rdx
  8004217774:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217778:	48 01 d0             	add    %rdx,%rax
  800421777b:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  800421777f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217783:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004217787:	0f 8e 4d ff ff ff    	jle    80042176da <e1000_attach+0x5c>
  800421778d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217794:	00 00 00 
  8004217797:	48 8b 00             	mov    (%rax),%rax
  800421779a:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  80042177a1:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042177a8:	00 00 00 
  80042177ab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042177af:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042177b6:	00 00 00 
  80042177b9:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042177bd:	77 32                	ja     80042177f1 <e1000_attach+0x173>
  80042177bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177c3:	48 89 c1             	mov    %rax,%rcx
  80042177c6:	48 ba a0 b5 21 04 80 	movabs $0x800421b5a0,%rdx
  80042177cd:	00 00 00 
  80042177d0:	be 9a 00 00 00       	mov    $0x9a,%esi
  80042177d5:	48 bf c4 b5 21 04 80 	movabs $0x800421b5c4,%rdi
  80042177dc:	00 00 00 
  80042177df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177e4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042177eb:	00 00 00 
  80042177ee:	41 ff d0             	callq  *%r8
  80042177f1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042177f8:	ff ff ff 
  80042177fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177ff:	48 01 c8             	add    %rcx,%rax
  8004217802:	89 02                	mov    %eax,(%rdx)
  8004217804:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421780b:	00 00 00 
  800421780e:	48 8b 00             	mov    (%rax),%rax
  8004217811:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004217817:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  800421781d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217824:	00 00 00 
  8004217827:	48 8b 00             	mov    (%rax),%rax
  800421782a:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004217831:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217838:	00 00 00 
  800421783b:	48 8b 00             	mov    (%rax),%rax
  800421783e:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217845:	b8 00 00 00 00       	mov    $0x0,%eax
  800421784a:	89 01                	mov    %eax,(%rcx)
  800421784c:	89 02                	mov    %eax,(%rdx)
  800421784e:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217855:	00 00 00 
  8004217858:	48 8b 00             	mov    (%rax),%rax
  800421785b:	48 05 00 04 00 00    	add    $0x400,%rax
  8004217861:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004217867:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421786e:	00 00 00 
  8004217871:	48 8b 00             	mov    (%rax),%rax
  8004217874:	48 05 10 04 00 00    	add    $0x410,%rax
  800421787a:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004217880:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217887:	e9 8e 00 00 00       	jmpq   800421791a <e1000_attach+0x29c>
  800421788c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421788f:	48 98                	cltq   
  8004217891:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217895:	48 89 c2             	mov    %rax,%rdx
  8004217898:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  800421789f:	00 00 00 
  80042178a2:	48 01 d0             	add    %rdx,%rax
  80042178a5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042178a9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042178b0:	00 00 00 
  80042178b3:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042178b7:	77 32                	ja     80042178eb <e1000_attach+0x26d>
  80042178b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042178bd:	48 89 c1             	mov    %rax,%rcx
  80042178c0:	48 ba a0 b5 21 04 80 	movabs $0x800421b5a0,%rdx
  80042178c7:	00 00 00 
  80042178ca:	be b8 00 00 00       	mov    $0xb8,%esi
  80042178cf:	48 bf c4 b5 21 04 80 	movabs $0x800421b5c4,%rdi
  80042178d6:	00 00 00 
  80042178d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042178e5:	00 00 00 
  80042178e8:	41 ff d0             	callq  *%r8
  80042178eb:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042178f2:	ff ff ff 
  80042178f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042178f9:	48 01 c2             	add    %rax,%rdx
  80042178fc:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217903:	00 00 00 
  8004217906:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217909:	48 63 c9             	movslq %ecx,%rcx
  800421790c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217910:	48 01 c8             	add    %rcx,%rax
  8004217913:	48 89 10             	mov    %rdx,(%rax)
  8004217916:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421791a:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004217921:	0f 8e 65 ff ff ff    	jle    800421788c <e1000_attach+0x20e>
  8004217927:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421792e:	00 00 00 
  8004217931:	48 8b 00             	mov    (%rax),%rax
  8004217934:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  800421793b:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217942:	00 00 00 
  8004217945:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217949:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217950:	00 00 00 
  8004217953:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004217957:	77 32                	ja     800421798b <e1000_attach+0x30d>
  8004217959:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421795d:	48 89 c1             	mov    %rax,%rcx
  8004217960:	48 ba a0 b5 21 04 80 	movabs $0x800421b5a0,%rdx
  8004217967:	00 00 00 
  800421796a:	be ba 00 00 00       	mov    $0xba,%esi
  800421796f:	48 bf c4 b5 21 04 80 	movabs $0x800421b5c4,%rdi
  8004217976:	00 00 00 
  8004217979:	b8 00 00 00 00       	mov    $0x0,%eax
  800421797e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217985:	00 00 00 
  8004217988:	41 ff d0             	callq  *%r8
  800421798b:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217992:	ff ff ff 
  8004217995:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217999:	48 01 c8             	add    %rcx,%rax
  800421799c:	89 02                	mov    %eax,(%rdx)
  800421799e:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179a5:	00 00 00 
  80042179a8:	48 8b 00             	mov    (%rax),%rax
  80042179ab:	48 05 08 28 00 00    	add    $0x2808,%rax
  80042179b1:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  80042179b7:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179be:	00 00 00 
  80042179c1:	48 8b 00             	mov    (%rax),%rax
  80042179c4:	48 05 10 28 00 00    	add    $0x2810,%rax
  80042179ca:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042179d0:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179d7:	00 00 00 
  80042179da:	48 8b 00             	mov    (%rax),%rax
  80042179dd:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042179e3:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  80042179e9:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179f0:	00 00 00 
  80042179f3:	48 8b 00             	mov    (%rax),%rax
  80042179f6:	48 05 00 01 00 00    	add    $0x100,%rax
  80042179fc:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004217a02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a07:	c9                   	leaveq 
  8004217a08:	c3                   	retq   

0000008004217a09 <e1000_transmit>:
  8004217a09:	55                   	push   %rbp
  8004217a0a:	48 89 e5             	mov    %rsp,%rbp
  8004217a0d:	48 83 ec 20          	sub    $0x20,%rsp
  8004217a11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217a15:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217a18:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a1f:	00 00 00 
  8004217a22:	48 8b 00             	mov    (%rax),%rax
  8004217a25:	48 85 c0             	test   %rax,%rax
  8004217a28:	74 09                	je     8004217a33 <e1000_transmit+0x2a>
  8004217a2a:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004217a31:	76 0a                	jbe    8004217a3d <e1000_transmit+0x34>
  8004217a33:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004217a38:	e9 39 01 00 00       	jmpq   8004217b76 <e1000_transmit+0x16d>
  8004217a3d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a44:	00 00 00 
  8004217a47:	48 8b 00             	mov    (%rax),%rax
  8004217a4a:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004217a50:	8b 00                	mov    (%rax),%eax
  8004217a52:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217a55:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217a5c:	00 00 00 
  8004217a5f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217a62:	48 63 d2             	movslq %edx,%rdx
  8004217a65:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217a69:	48 01 d0             	add    %rdx,%rax
  8004217a6c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217a70:	0f b6 c0             	movzbl %al,%eax
  8004217a73:	83 e0 01             	and    $0x1,%eax
  8004217a76:	85 c0                	test   %eax,%eax
  8004217a78:	75 25                	jne    8004217a9f <e1000_transmit+0x96>
  8004217a7a:	48 bf d4 b5 21 04 80 	movabs $0x800421b5d4,%rdi
  8004217a81:	00 00 00 
  8004217a84:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a89:	48 ba 82 95 20 04 80 	movabs $0x8004209582,%rdx
  8004217a90:	00 00 00 
  8004217a93:	ff d2                	callq  *%rdx
  8004217a95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a9a:	e9 d7 00 00 00       	jmpq   8004217b76 <e1000_transmit+0x16d>
  8004217a9f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217aa2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217aa5:	48 98                	cltq   
  8004217aa7:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004217aae:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  8004217ab5:	00 00 00 
  8004217ab8:	48 01 c1             	add    %rax,%rcx
  8004217abb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217abf:	48 89 c6             	mov    %rax,%rsi
  8004217ac2:	48 89 cf             	mov    %rcx,%rdi
  8004217ac5:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  8004217acc:	00 00 00 
  8004217acf:	ff d0                	callq  *%rax
  8004217ad1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217ad4:	48 ba 30 d7 49 04 80 	movabs $0x800449d730,%rdx
  8004217adb:	00 00 00 
  8004217ade:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217ae1:	48 63 c9             	movslq %ecx,%rcx
  8004217ae4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217ae8:	48 01 ca             	add    %rcx,%rdx
  8004217aeb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004217aef:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217af6:	00 00 00 
  8004217af9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217afc:	48 63 d2             	movslq %edx,%rdx
  8004217aff:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b03:	48 01 d0             	add    %rdx,%rax
  8004217b06:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217b0a:	83 e0 fe             	and    $0xfffffffe,%eax
  8004217b0d:	89 c2                	mov    %eax,%edx
  8004217b0f:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217b16:	00 00 00 
  8004217b19:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217b1c:	48 63 c9             	movslq %ecx,%rcx
  8004217b1f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217b23:	48 01 c8             	add    %rcx,%rax
  8004217b26:	88 50 0c             	mov    %dl,0xc(%rax)
  8004217b29:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217b30:	00 00 00 
  8004217b33:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b36:	48 63 d2             	movslq %edx,%rdx
  8004217b39:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b3d:	48 01 d0             	add    %rdx,%rax
  8004217b40:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004217b44:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217b4b:	00 00 00 
  8004217b4e:	48 8b 00             	mov    (%rax),%rax
  8004217b51:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217b58:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217b5b:	8d 50 01             	lea    0x1(%rax),%edx
  8004217b5e:	89 d0                	mov    %edx,%eax
  8004217b60:	c1 f8 1f             	sar    $0x1f,%eax
  8004217b63:	c1 e8 1c             	shr    $0x1c,%eax
  8004217b66:	01 c2                	add    %eax,%edx
  8004217b68:	83 e2 0f             	and    $0xf,%edx
  8004217b6b:	29 c2                	sub    %eax,%edx
  8004217b6d:	89 d0                	mov    %edx,%eax
  8004217b6f:	89 01                	mov    %eax,(%rcx)
  8004217b71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b76:	c9                   	leaveq 
  8004217b77:	c3                   	retq   

0000008004217b78 <e1000_receive>:
  8004217b78:	55                   	push   %rbp
  8004217b79:	48 89 e5             	mov    %rsp,%rbp
  8004217b7c:	48 83 ec 20          	sub    $0x20,%rsp
  8004217b80:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217b84:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217b87:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217b8e:	00 00 00 
  8004217b91:	48 8b 00             	mov    (%rax),%rax
  8004217b94:	48 85 c0             	test   %rax,%rax
  8004217b97:	75 0a                	jne    8004217ba3 <e1000_receive+0x2b>
  8004217b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b9e:	e9 59 01 00 00       	jmpq   8004217cfc <e1000_receive+0x184>
  8004217ba3:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217baa:	00 00 00 
  8004217bad:	48 8b 00             	mov    (%rax),%rax
  8004217bb0:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217bb6:	8b 00                	mov    (%rax),%eax
  8004217bb8:	8d 48 01             	lea    0x1(%rax),%ecx
  8004217bbb:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004217bc0:	89 c8                	mov    %ecx,%eax
  8004217bc2:	f7 e2                	mul    %edx
  8004217bc4:	89 d0                	mov    %edx,%eax
  8004217bc6:	c1 e8 06             	shr    $0x6,%eax
  8004217bc9:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004217bcf:	29 c1                	sub    %eax,%ecx
  8004217bd1:	89 c8                	mov    %ecx,%eax
  8004217bd3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217bd6:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217bdd:	00 00 00 
  8004217be0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217be3:	48 63 d2             	movslq %edx,%rdx
  8004217be6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217bea:	48 01 d0             	add    %rdx,%rax
  8004217bed:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217bf1:	0f b6 c0             	movzbl %al,%eax
  8004217bf4:	83 e0 01             	and    $0x1,%eax
  8004217bf7:	85 c0                	test   %eax,%eax
  8004217bf9:	75 0a                	jne    8004217c05 <e1000_receive+0x8d>
  8004217bfb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c00:	e9 f7 00 00 00       	jmpq   8004217cfc <e1000_receive+0x184>
  8004217c05:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c0c:	00 00 00 
  8004217c0f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c12:	48 63 d2             	movslq %edx,%rdx
  8004217c15:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c19:	48 01 d0             	add    %rdx,%rax
  8004217c1c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217c20:	0f b6 c0             	movzbl %al,%eax
  8004217c23:	83 e0 02             	and    $0x2,%eax
  8004217c26:	85 c0                	test   %eax,%eax
  8004217c28:	75 35                	jne    8004217c5f <e1000_receive+0xe7>
  8004217c2a:	48 b9 e8 b5 21 04 80 	movabs $0x800421b5e8,%rcx
  8004217c31:	00 00 00 
  8004217c34:	48 ba 12 b6 21 04 80 	movabs $0x800421b612,%rdx
  8004217c3b:	00 00 00 
  8004217c3e:	be ef 00 00 00       	mov    $0xef,%esi
  8004217c43:	48 bf c4 b5 21 04 80 	movabs $0x800421b5c4,%rdi
  8004217c4a:	00 00 00 
  8004217c4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c52:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217c59:	00 00 00 
  8004217c5c:	41 ff d0             	callq  *%r8
  8004217c5f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217c62:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217c65:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c6c:	00 00 00 
  8004217c6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c72:	48 63 d2             	movslq %edx,%rdx
  8004217c75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c79:	48 01 d0             	add    %rdx,%rax
  8004217c7c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004217c80:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004217c84:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004217c88:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217c8b:	39 c2                	cmp    %eax,%edx
  8004217c8d:	0f 46 c2             	cmovbe %edx,%eax
  8004217c90:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217c93:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217c96:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217c99:	48 98                	cltq   
  8004217c9b:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217c9f:	48 89 c1             	mov    %rax,%rcx
  8004217ca2:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  8004217ca9:	00 00 00 
  8004217cac:	48 01 c1             	add    %rax,%rcx
  8004217caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217cb3:	48 89 ce             	mov    %rcx,%rsi
  8004217cb6:	48 89 c7             	mov    %rax,%rdi
  8004217cb9:	48 b8 5b 00 21 04 80 	movabs $0x800421005b,%rax
  8004217cc0:	00 00 00 
  8004217cc3:	ff d0                	callq  *%rax
  8004217cc5:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217ccc:	00 00 00 
  8004217ccf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217cd2:	48 63 d2             	movslq %edx,%rdx
  8004217cd5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217cd9:	48 01 d0             	add    %rdx,%rax
  8004217cdc:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004217ce0:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217ce7:	00 00 00 
  8004217cea:	48 8b 00             	mov    (%rax),%rax
  8004217ced:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004217cf4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217cf7:	89 02                	mov    %eax,(%rdx)
  8004217cf9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217cfc:	c9                   	leaveq 
  8004217cfd:	c3                   	retq   

0000008004217cfe <pci_conf1_set_addr>:
  8004217cfe:	55                   	push   %rbp
  8004217cff:	48 89 e5             	mov    %rsp,%rbp
  8004217d02:	48 83 ec 20          	sub    $0x20,%rsp
  8004217d06:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217d09:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217d0c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004217d0f:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004217d12:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004217d19:	76 35                	jbe    8004217d50 <pci_conf1_set_addr+0x52>
  8004217d1b:	48 b9 28 b6 21 04 80 	movabs $0x800421b628,%rcx
  8004217d22:	00 00 00 
  8004217d25:	48 ba 32 b6 21 04 80 	movabs $0x800421b632,%rdx
  8004217d2c:	00 00 00 
  8004217d2f:	be 31 00 00 00       	mov    $0x31,%esi
  8004217d34:	48 bf 47 b6 21 04 80 	movabs $0x800421b647,%rdi
  8004217d3b:	00 00 00 
  8004217d3e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d43:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d4a:	00 00 00 
  8004217d4d:	41 ff d0             	callq  *%r8
  8004217d50:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004217d54:	76 35                	jbe    8004217d8b <pci_conf1_set_addr+0x8d>
  8004217d56:	48 b9 55 b6 21 04 80 	movabs $0x800421b655,%rcx
  8004217d5d:	00 00 00 
  8004217d60:	48 ba 32 b6 21 04 80 	movabs $0x800421b632,%rdx
  8004217d67:	00 00 00 
  8004217d6a:	be 32 00 00 00       	mov    $0x32,%esi
  8004217d6f:	48 bf 47 b6 21 04 80 	movabs $0x800421b647,%rdi
  8004217d76:	00 00 00 
  8004217d79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d7e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d85:	00 00 00 
  8004217d88:	41 ff d0             	callq  *%r8
  8004217d8b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004217d8f:	76 35                	jbe    8004217dc6 <pci_conf1_set_addr+0xc8>
  8004217d91:	48 b9 5e b6 21 04 80 	movabs $0x800421b65e,%rcx
  8004217d98:	00 00 00 
  8004217d9b:	48 ba 32 b6 21 04 80 	movabs $0x800421b632,%rdx
  8004217da2:	00 00 00 
  8004217da5:	be 33 00 00 00       	mov    $0x33,%esi
  8004217daa:	48 bf 47 b6 21 04 80 	movabs $0x800421b647,%rdi
  8004217db1:	00 00 00 
  8004217db4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217db9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217dc0:	00 00 00 
  8004217dc3:	41 ff d0             	callq  *%r8
  8004217dc6:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004217dcd:	76 35                	jbe    8004217e04 <pci_conf1_set_addr+0x106>
  8004217dcf:	48 b9 67 b6 21 04 80 	movabs $0x800421b667,%rcx
  8004217dd6:	00 00 00 
  8004217dd9:	48 ba 32 b6 21 04 80 	movabs $0x800421b632,%rdx
  8004217de0:	00 00 00 
  8004217de3:	be 34 00 00 00       	mov    $0x34,%esi
  8004217de8:	48 bf 47 b6 21 04 80 	movabs $0x800421b647,%rdi
  8004217def:	00 00 00 
  8004217df2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217df7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217dfe:	00 00 00 
  8004217e01:	41 ff d0             	callq  *%r8
  8004217e04:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217e07:	83 e0 03             	and    $0x3,%eax
  8004217e0a:	85 c0                	test   %eax,%eax
  8004217e0c:	74 35                	je     8004217e43 <pci_conf1_set_addr+0x145>
  8004217e0e:	48 b9 74 b6 21 04 80 	movabs $0x800421b674,%rcx
  8004217e15:	00 00 00 
  8004217e18:	48 ba 32 b6 21 04 80 	movabs $0x800421b632,%rdx
  8004217e1f:	00 00 00 
  8004217e22:	be 35 00 00 00       	mov    $0x35,%esi
  8004217e27:	48 bf 47 b6 21 04 80 	movabs $0x800421b647,%rdi
  8004217e2e:	00 00 00 
  8004217e31:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e36:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217e3d:	00 00 00 
  8004217e40:	41 ff d0             	callq  *%r8
  8004217e43:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217e46:	c1 e0 10             	shl    $0x10,%eax
  8004217e49:	89 c2                	mov    %eax,%edx
  8004217e4b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004217e4e:	c1 e0 0b             	shl    $0xb,%eax
  8004217e51:	09 c2                	or     %eax,%edx
  8004217e53:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217e56:	c1 e0 08             	shl    $0x8,%eax
  8004217e59:	09 d0                	or     %edx,%eax
  8004217e5b:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004217e5e:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004217e63:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217e66:	48 b8 e4 c7 22 04 80 	movabs $0x800422c7e4,%rax
  8004217e6d:	00 00 00 
  8004217e70:	8b 00                	mov    (%rax),%eax
  8004217e72:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217e75:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217e78:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217e7b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e7e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004217e81:	ef                   	out    %eax,(%dx)
  8004217e82:	c9                   	leaveq 
  8004217e83:	c3                   	retq   

0000008004217e84 <pci_conf_read>:
  8004217e84:	55                   	push   %rbp
  8004217e85:	48 89 e5             	mov    %rsp,%rbp
  8004217e88:	48 83 ec 20          	sub    $0x20,%rsp
  8004217e8c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217e90:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e97:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e9e:	8b 70 08             	mov    0x8(%rax),%esi
  8004217ea1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ea5:	48 8b 00             	mov    (%rax),%rax
  8004217ea8:	8b 40 08             	mov    0x8(%rax),%eax
  8004217eab:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217eae:	89 c7                	mov    %eax,%edi
  8004217eb0:	48 b8 fe 7c 21 04 80 	movabs $0x8004217cfe,%rax
  8004217eb7:	00 00 00 
  8004217eba:	ff d0                	callq  *%rax
  8004217ebc:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217ec3:	00 00 00 
  8004217ec6:	8b 00                	mov    (%rax),%eax
  8004217ec8:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004217ecb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217ece:	89 c2                	mov    %eax,%edx
  8004217ed0:	ed                   	in     (%dx),%eax
  8004217ed1:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004217ed4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217ed7:	c9                   	leaveq 
  8004217ed8:	c3                   	retq   

0000008004217ed9 <pci_conf_write>:
  8004217ed9:	55                   	push   %rbp
  8004217eda:	48 89 e5             	mov    %rsp,%rbp
  8004217edd:	48 83 ec 20          	sub    $0x20,%rsp
  8004217ee1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217ee5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217ee8:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004217eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217eef:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217ef2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ef6:	8b 70 08             	mov    0x8(%rax),%esi
  8004217ef9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217efd:	48 8b 00             	mov    (%rax),%rax
  8004217f00:	8b 40 08             	mov    0x8(%rax),%eax
  8004217f03:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217f06:	89 c7                	mov    %eax,%edi
  8004217f08:	48 b8 fe 7c 21 04 80 	movabs $0x8004217cfe,%rax
  8004217f0f:	00 00 00 
  8004217f12:	ff d0                	callq  *%rax
  8004217f14:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217f1b:	00 00 00 
  8004217f1e:	8b 00                	mov    (%rax),%eax
  8004217f20:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217f23:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217f26:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217f29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217f2c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217f2f:	ef                   	out    %eax,(%dx)
  8004217f30:	c9                   	leaveq 
  8004217f31:	c3                   	retq   

0000008004217f32 <pci_attach_match>:
  8004217f32:	55                   	push   %rbp
  8004217f33:	48 89 e5             	mov    %rsp,%rbp
  8004217f36:	48 83 ec 30          	sub    $0x30,%rsp
  8004217f3a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217f3d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217f40:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004217f44:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004217f48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217f4f:	e9 aa 00 00 00       	jmpq   8004217ffe <pci_attach_match+0xcc>
  8004217f54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f57:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f5b:	48 89 c2             	mov    %rax,%rdx
  8004217f5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f62:	48 01 d0             	add    %rdx,%rax
  8004217f65:	8b 00                	mov    (%rax),%eax
  8004217f67:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004217f6a:	0f 85 8a 00 00 00    	jne    8004217ffa <pci_attach_match+0xc8>
  8004217f70:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f73:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f77:	48 89 c2             	mov    %rax,%rdx
  8004217f7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f7e:	48 01 d0             	add    %rdx,%rax
  8004217f81:	8b 40 04             	mov    0x4(%rax),%eax
  8004217f84:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004217f87:	75 71                	jne    8004217ffa <pci_attach_match+0xc8>
  8004217f89:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f8c:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f90:	48 89 c2             	mov    %rax,%rdx
  8004217f93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f97:	48 01 d0             	add    %rdx,%rax
  8004217f9a:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217f9e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004217fa2:	48 89 d7             	mov    %rdx,%rdi
  8004217fa5:	ff d0                	callq  *%rax
  8004217fa7:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217faa:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004217fae:	7e 05                	jle    8004217fb5 <pci_attach_match+0x83>
  8004217fb0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217fb3:	eb 6c                	jmp    8004218021 <pci_attach_match+0xef>
  8004217fb5:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004217fb9:	79 3f                	jns    8004217ffa <pci_attach_match+0xc8>
  8004217fbb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fbe:	48 c1 e0 04          	shl    $0x4,%rax
  8004217fc2:	48 89 c2             	mov    %rax,%rdx
  8004217fc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217fc9:	48 01 d0             	add    %rdx,%rax
  8004217fcc:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004217fd0:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004217fd3:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004217fd6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217fd9:	41 89 f0             	mov    %esi,%r8d
  8004217fdc:	89 c6                	mov    %eax,%esi
  8004217fde:	48 bf 88 b6 21 04 80 	movabs $0x800421b688,%rdi
  8004217fe5:	00 00 00 
  8004217fe8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fed:	49 b9 82 95 20 04 80 	movabs $0x8004209582,%r9
  8004217ff4:	00 00 00 
  8004217ff7:	41 ff d1             	callq  *%r9
  8004217ffa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217ffe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218001:	48 c1 e0 04          	shl    $0x4,%rax
  8004218005:	48 89 c2             	mov    %rax,%rdx
  8004218008:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421800c:	48 01 d0             	add    %rdx,%rax
  800421800f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218013:	48 85 c0             	test   %rax,%rax
  8004218016:	0f 85 38 ff ff ff    	jne    8004217f54 <pci_attach_match+0x22>
  800421801c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218021:	c9                   	leaveq 
  8004218022:	c3                   	retq   

0000008004218023 <pci_attach>:
  8004218023:	55                   	push   %rbp
  8004218024:	48 89 e5             	mov    %rsp,%rbp
  8004218027:	48 83 ec 10          	sub    $0x10,%rsp
  800421802b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421802f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218033:	8b 40 14             	mov    0x14(%rax),%eax
  8004218036:	c1 e8 10             	shr    $0x10,%eax
  8004218039:	0f b6 c0             	movzbl %al,%eax
  800421803c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218040:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218043:	89 d7                	mov    %edx,%edi
  8004218045:	c1 ef 18             	shr    $0x18,%edi
  8004218048:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421804c:	48 89 d1             	mov    %rdx,%rcx
  800421804f:	48 ba 00 c8 22 04 80 	movabs $0x800422c800,%rdx
  8004218056:	00 00 00 
  8004218059:	89 c6                	mov    %eax,%esi
  800421805b:	48 b8 32 7f 21 04 80 	movabs $0x8004217f32,%rax
  8004218062:	00 00 00 
  8004218065:	ff d0                	callq  *%rax
  8004218067:	85 c0                	test   %eax,%eax
  8004218069:	75 39                	jne    80042180a4 <pci_attach+0x81>
  800421806b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421806f:	8b 40 10             	mov    0x10(%rax),%eax
  8004218072:	c1 e8 10             	shr    $0x10,%eax
  8004218075:	89 c6                	mov    %eax,%esi
  8004218077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421807b:	8b 40 10             	mov    0x10(%rax),%eax
  800421807e:	0f b7 c0             	movzwl %ax,%eax
  8004218081:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218085:	48 89 d1             	mov    %rdx,%rcx
  8004218088:	48 ba 20 c8 22 04 80 	movabs $0x800422c820,%rdx
  800421808f:	00 00 00 
  8004218092:	89 c7                	mov    %eax,%edi
  8004218094:	48 b8 32 7f 21 04 80 	movabs $0x8004217f32,%rax
  800421809b:	00 00 00 
  800421809e:	ff d0                	callq  *%rax
  80042180a0:	85 c0                	test   %eax,%eax
  80042180a2:	74 07                	je     80042180ab <pci_attach+0x88>
  80042180a4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042180a9:	eb 05                	jmp    80042180b0 <pci_attach+0x8d>
  80042180ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180b0:	c9                   	leaveq 
  80042180b1:	c3                   	retq   

00000080042180b2 <pci_print_func>:
  80042180b2:	55                   	push   %rbp
  80042180b3:	48 89 e5             	mov    %rsp,%rbp
  80042180b6:	48 83 ec 40          	sub    $0x40,%rsp
  80042180ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042180be:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  80042180c5:	00 00 00 
  80042180c8:	48 8b 00             	mov    (%rax),%rax
  80042180cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042180cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180d3:	8b 40 14             	mov    0x14(%rax),%eax
  80042180d6:	c1 e8 18             	shr    $0x18,%eax
  80042180d9:	83 f8 06             	cmp    $0x6,%eax
  80042180dc:	77 20                	ja     80042180fe <pci_print_func+0x4c>
  80042180de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180e2:	8b 40 14             	mov    0x14(%rax),%eax
  80042180e5:	c1 e8 18             	shr    $0x18,%eax
  80042180e8:	89 c2                	mov    %eax,%edx
  80042180ea:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  80042180f1:	00 00 00 
  80042180f4:	89 d2                	mov    %edx,%edx
  80042180f6:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042180fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042180fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218102:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218106:	0f b6 f8             	movzbl %al,%edi
  8004218109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421810d:	8b 40 14             	mov    0x14(%rax),%eax
  8004218110:	c1 e8 10             	shr    $0x10,%eax
  8004218113:	0f b6 f0             	movzbl %al,%esi
  8004218116:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421811a:	8b 40 14             	mov    0x14(%rax),%eax
  800421811d:	c1 e8 18             	shr    $0x18,%eax
  8004218120:	41 89 c1             	mov    %eax,%r9d
  8004218123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218127:	8b 40 10             	mov    0x10(%rax),%eax
  800421812a:	c1 e8 10             	shr    $0x10,%eax
  800421812d:	41 89 c2             	mov    %eax,%r10d
  8004218130:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218134:	8b 40 10             	mov    0x10(%rax),%eax
  8004218137:	44 0f b7 c0          	movzwl %ax,%r8d
  800421813b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421813f:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218146:	8b 50 08             	mov    0x8(%rax),%edx
  8004218149:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421814d:	48 8b 00             	mov    (%rax),%rax
  8004218150:	8b 40 08             	mov    0x8(%rax),%eax
  8004218153:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218157:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  800421815b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218160:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218164:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218168:	45 89 d1             	mov    %r10d,%r9d
  800421816b:	89 c6                	mov    %eax,%esi
  800421816d:	48 bf 28 b7 21 04 80 	movabs $0x800421b728,%rdi
  8004218174:	00 00 00 
  8004218177:	b8 00 00 00 00       	mov    $0x0,%eax
  800421817c:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  8004218183:	00 00 00 
  8004218186:	41 ff d2             	callq  *%r10
  8004218189:	c9                   	leaveq 
  800421818a:	c3                   	retq   

000000800421818b <pci_scan_bus>:
  800421818b:	55                   	push   %rbp
  800421818c:	48 89 e5             	mov    %rsp,%rbp
  800421818f:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218196:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421819d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042181a4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042181a8:	ba 50 00 00 00       	mov    $0x50,%edx
  80042181ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042181b2:	48 89 c7             	mov    %rax,%rdi
  80042181b5:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042181bc:	00 00 00 
  80042181bf:	ff d0                	callq  *%rax
  80042181c1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  80042181c8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042181cc:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  80042181d3:	e9 22 02 00 00       	jmpq   80042183fa <pci_scan_bus+0x26f>
  80042181d8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042181dc:	be 0c 00 00 00       	mov    $0xc,%esi
  80042181e1:	48 89 c7             	mov    %rax,%rdi
  80042181e4:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  80042181eb:	00 00 00 
  80042181ee:	ff d0                	callq  *%rax
  80042181f0:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042181f3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042181f6:	c1 e8 10             	shr    $0x10,%eax
  80042181f9:	83 e0 7f             	and    $0x7f,%eax
  80042181fc:	83 f8 01             	cmp    $0x1,%eax
  80042181ff:	0f 87 ec 01 00 00    	ja     80042183f1 <pci_scan_bus+0x266>
  8004218205:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218209:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421820d:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218214:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218218:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  800421821f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218223:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800421822a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421822e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218235:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218239:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218240:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218244:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421824b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421824f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218256:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421825a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218261:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218265:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421826c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218270:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218277:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  800421827e:	00 00 00 
  8004218281:	e9 45 01 00 00       	jmpq   80042183cb <pci_scan_bus+0x240>
  8004218286:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421828d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218294:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421829b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  80042182a2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042182a9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  80042182b0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042182b7:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042182be:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042182c5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042182cc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042182d3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042182da:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  80042182e1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042182e5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042182ec:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042182f0:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042182f7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042182fb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218302:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218306:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421830d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218312:	48 89 c7             	mov    %rax,%rdi
  8004218315:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  800421831c:	00 00 00 
  800421831f:	ff d0                	callq  *%rax
  8004218321:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218327:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  800421832d:	0f b7 c0             	movzwl %ax,%eax
  8004218330:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218335:	0f 84 81 00 00 00    	je     80042183bc <pci_scan_bus+0x231>
  800421833b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218342:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218347:	48 89 c7             	mov    %rax,%rdi
  800421834a:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  8004218351:	00 00 00 
  8004218354:	ff d0                	callq  *%rax
  8004218356:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218359:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421835c:	88 45 98             	mov    %al,-0x68(%rbp)
  800421835f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218366:	be 08 00 00 00       	mov    $0x8,%esi
  800421836b:	48 89 c7             	mov    %rax,%rdi
  800421836e:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  8004218375:	00 00 00 
  8004218378:	ff d0                	callq  *%rax
  800421837a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218380:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218387:	00 00 00 
  800421838a:	8b 00                	mov    (%rax),%eax
  800421838c:	85 c0                	test   %eax,%eax
  800421838e:	74 16                	je     80042183a6 <pci_scan_bus+0x21b>
  8004218390:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218397:	48 89 c7             	mov    %rax,%rdi
  800421839a:	48 b8 b2 80 21 04 80 	movabs $0x80042180b2,%rax
  80042183a1:	00 00 00 
  80042183a4:	ff d0                	callq  *%rax
  80042183a6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042183ad:	48 89 c7             	mov    %rax,%rdi
  80042183b0:	48 b8 23 80 21 04 80 	movabs $0x8004218023,%rax
  80042183b7:	00 00 00 
  80042183ba:	ff d0                	callq  *%rax
  80042183bc:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  80042183c2:	83 c0 01             	add    $0x1,%eax
  80042183c5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042183cb:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042183d1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042183d4:	25 00 00 80 00       	and    $0x800000,%eax
  80042183d9:	85 c0                	test   %eax,%eax
  80042183db:	74 07                	je     80042183e4 <pci_scan_bus+0x259>
  80042183dd:	b8 08 00 00 00       	mov    $0x8,%eax
  80042183e2:	eb 05                	jmp    80042183e9 <pci_scan_bus+0x25e>
  80042183e4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042183e9:	39 c2                	cmp    %eax,%edx
  80042183eb:	0f 82 95 fe ff ff    	jb     8004218286 <pci_scan_bus+0xfb>
  80042183f1:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042183f4:	83 c0 01             	add    $0x1,%eax
  80042183f7:	89 45 a8             	mov    %eax,-0x58(%rbp)
  80042183fa:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042183fd:	83 f8 1f             	cmp    $0x1f,%eax
  8004218400:	0f 86 d2 fd ff ff    	jbe    80042181d8 <pci_scan_bus+0x4d>
  8004218406:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218409:	c9                   	leaveq 
  800421840a:	c3                   	retq   

000000800421840b <pci_bridge_attach>:
  800421840b:	55                   	push   %rbp
  800421840c:	48 89 e5             	mov    %rsp,%rbp
  800421840f:	48 83 ec 30          	sub    $0x30,%rsp
  8004218413:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218417:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421841b:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218420:	48 89 c7             	mov    %rax,%rdi
  8004218423:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  800421842a:	00 00 00 
  800421842d:	ff d0                	callq  *%rax
  800421842f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218432:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218436:	be 18 00 00 00       	mov    $0x18,%esi
  800421843b:	48 89 c7             	mov    %rax,%rdi
  800421843e:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  8004218445:	00 00 00 
  8004218448:	ff d0                	callq  *%rax
  800421844a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421844d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218450:	83 e0 0f             	and    $0xf,%eax
  8004218453:	83 f8 01             	cmp    $0x1,%eax
  8004218456:	75 40                	jne    8004218498 <pci_bridge_attach+0x8d>
  8004218458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421845c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421845f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218463:	8b 50 08             	mov    0x8(%rax),%edx
  8004218466:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421846a:	48 8b 00             	mov    (%rax),%rax
  800421846d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218470:	89 c6                	mov    %eax,%esi
  8004218472:	48 bf 68 b7 21 04 80 	movabs $0x800421b768,%rdi
  8004218479:	00 00 00 
  800421847c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218481:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  8004218488:	00 00 00 
  800421848b:	41 ff d0             	callq  *%r8
  800421848e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218493:	e9 a1 00 00 00       	jmpq   8004218539 <pci_bridge_attach+0x12e>
  8004218498:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421849c:	ba 10 00 00 00       	mov    $0x10,%edx
  80042184a1:	be 00 00 00 00       	mov    $0x0,%esi
  80042184a6:	48 89 c7             	mov    %rax,%rdi
  80042184a9:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042184b0:	00 00 00 
  80042184b3:	ff d0                	callq  *%rax
  80042184b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184b9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042184bd:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042184c0:	c1 e8 08             	shr    $0x8,%eax
  80042184c3:	0f b6 c0             	movzbl %al,%eax
  80042184c6:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042184c9:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  80042184d0:	00 00 00 
  80042184d3:	8b 00                	mov    (%rax),%eax
  80042184d5:	85 c0                	test   %eax,%eax
  80042184d7:	74 48                	je     8004218521 <pci_bridge_attach+0x116>
  80042184d9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042184dc:	c1 e8 10             	shr    $0x10,%eax
  80042184df:	0f b6 f8             	movzbl %al,%edi
  80042184e2:	8b 75 e8             	mov    -0x18(%rbp),%esi
  80042184e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184e9:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042184ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184f0:	8b 50 08             	mov    0x8(%rax),%edx
  80042184f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184f7:	48 8b 00             	mov    (%rax),%rax
  80042184fa:	8b 40 08             	mov    0x8(%rax),%eax
  80042184fd:	41 89 f9             	mov    %edi,%r9d
  8004218500:	41 89 f0             	mov    %esi,%r8d
  8004218503:	89 c6                	mov    %eax,%esi
  8004218505:	48 bf a0 b7 21 04 80 	movabs $0x800421b7a0,%rdi
  800421850c:	00 00 00 
  800421850f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218514:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  800421851b:	00 00 00 
  800421851e:	41 ff d2             	callq  *%r10
  8004218521:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218525:	48 89 c7             	mov    %rax,%rdi
  8004218528:	48 b8 8b 81 21 04 80 	movabs $0x800421818b,%rax
  800421852f:	00 00 00 
  8004218532:	ff d0                	callq  *%rax
  8004218534:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218539:	c9                   	leaveq 
  800421853a:	c3                   	retq   

000000800421853b <pci_func_enable>:
  800421853b:	55                   	push   %rbp
  800421853c:	48 89 e5             	mov    %rsp,%rbp
  800421853f:	48 83 ec 40          	sub    $0x40,%rsp
  8004218543:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218547:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421854b:	ba 07 00 00 00       	mov    $0x7,%edx
  8004218550:	be 04 00 00 00       	mov    $0x4,%esi
  8004218555:	48 89 c7             	mov    %rax,%rdi
  8004218558:	48 b8 d9 7e 21 04 80 	movabs $0x8004217ed9,%rax
  800421855f:	00 00 00 
  8004218562:	ff d0                	callq  *%rax
  8004218564:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  800421856b:	e9 ee 01 00 00       	jmpq   800421875e <pci_func_enable+0x223>
  8004218570:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218573:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218577:	89 d6                	mov    %edx,%esi
  8004218579:	48 89 c7             	mov    %rax,%rdi
  800421857c:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  8004218583:	00 00 00 
  8004218586:	ff d0                	callq  *%rax
  8004218588:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421858b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004218592:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218595:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218599:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800421859e:	89 ce                	mov    %ecx,%esi
  80042185a0:	48 89 c7             	mov    %rax,%rdi
  80042185a3:	48 b8 d9 7e 21 04 80 	movabs $0x8004217ed9,%rax
  80042185aa:	00 00 00 
  80042185ad:	ff d0                	callq  *%rax
  80042185af:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042185b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185b6:	89 d6                	mov    %edx,%esi
  80042185b8:	48 89 c7             	mov    %rax,%rdi
  80042185bb:	48 b8 84 7e 21 04 80 	movabs $0x8004217e84,%rax
  80042185c2:	00 00 00 
  80042185c5:	ff d0                	callq  *%rax
  80042185c7:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042185ca:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  80042185ce:	75 05                	jne    80042185d5 <pci_func_enable+0x9a>
  80042185d0:	e9 83 01 00 00       	jmpq   8004218758 <pci_func_enable+0x21d>
  80042185d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042185d8:	83 e8 10             	sub    $0x10,%eax
  80042185db:	c1 e8 02             	shr    $0x2,%eax
  80042185de:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042185e1:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042185e4:	83 e0 01             	and    $0x1,%eax
  80042185e7:	85 c0                	test   %eax,%eax
  80042185e9:	75 65                	jne    8004218650 <pci_func_enable+0x115>
  80042185eb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042185ee:	83 e0 06             	and    $0x6,%eax
  80042185f1:	83 f8 04             	cmp    $0x4,%eax
  80042185f4:	75 07                	jne    80042185fd <pci_func_enable+0xc2>
  80042185f6:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042185fd:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218600:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218603:	f7 d8                	neg    %eax
  8004218605:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218608:	83 e0 f0             	and    $0xfffffff0,%eax
  800421860b:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421860e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218611:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218614:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218617:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  800421861e:	00 00 00 
  8004218621:	8b 00                	mov    (%rax),%eax
  8004218623:	85 c0                	test   %eax,%eax
  8004218625:	74 7a                	je     80042186a1 <pci_func_enable+0x166>
  8004218627:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421862a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421862d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218630:	89 c6                	mov    %eax,%esi
  8004218632:	48 bf d0 b7 21 04 80 	movabs $0x800421b7d0,%rdi
  8004218639:	00 00 00 
  800421863c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218641:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  8004218648:	00 00 00 
  800421864b:	41 ff d0             	callq  *%r8
  800421864e:	eb 51                	jmp    80042186a1 <pci_func_enable+0x166>
  8004218650:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218653:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218656:	f7 d8                	neg    %eax
  8004218658:	23 45 e8             	and    -0x18(%rbp),%eax
  800421865b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421865e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218661:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218664:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218667:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421866a:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  8004218671:	00 00 00 
  8004218674:	8b 00                	mov    (%rax),%eax
  8004218676:	85 c0                	test   %eax,%eax
  8004218678:	74 27                	je     80042186a1 <pci_func_enable+0x166>
  800421867a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421867d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218680:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218683:	89 c6                	mov    %eax,%esi
  8004218685:	48 bf f8 b7 21 04 80 	movabs $0x800421b7f8,%rdi
  800421868c:	00 00 00 
  800421868f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218694:	49 b8 82 95 20 04 80 	movabs $0x8004209582,%r8
  800421869b:	00 00 00 
  800421869e:	41 ff d0             	callq  *%r8
  80042186a1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042186a4:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042186a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186ab:	89 ce                	mov    %ecx,%esi
  80042186ad:	48 89 c7             	mov    %rax,%rdi
  80042186b0:	48 b8 d9 7e 21 04 80 	movabs $0x8004217ed9,%rax
  80042186b7:	00 00 00 
  80042186ba:	ff d0                	callq  *%rax
  80042186bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186c0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042186c3:	48 63 d2             	movslq %edx,%rdx
  80042186c6:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  80042186ca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042186cd:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  80042186d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186d5:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042186d8:	48 63 d2             	movslq %edx,%rdx
  80042186db:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  80042186df:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042186e2:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042186e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042186e9:	74 6d                	je     8004218758 <pci_func_enable+0x21d>
  80042186eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042186ef:	75 67                	jne    8004218758 <pci_func_enable+0x21d>
  80042186f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186f5:	8b 40 10             	mov    0x10(%rax),%eax
  80042186f8:	c1 e8 10             	shr    $0x10,%eax
  80042186fb:	41 89 c0             	mov    %eax,%r8d
  80042186fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218702:	8b 40 10             	mov    0x10(%rax),%eax
  8004218705:	0f b7 f8             	movzwl %ax,%edi
  8004218708:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421870c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421870f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218713:	8b 50 08             	mov    0x8(%rax),%edx
  8004218716:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421871a:	48 8b 00             	mov    (%rax),%rax
  800421871d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218720:	8b 75 f0             	mov    -0x10(%rbp),%esi
  8004218723:	89 74 24 10          	mov    %esi,0x10(%rsp)
  8004218727:	8b 75 f4             	mov    -0xc(%rbp),%esi
  800421872a:	89 74 24 08          	mov    %esi,0x8(%rsp)
  800421872e:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004218731:	89 34 24             	mov    %esi,(%rsp)
  8004218734:	45 89 c1             	mov    %r8d,%r9d
  8004218737:	41 89 f8             	mov    %edi,%r8d
  800421873a:	89 c6                	mov    %eax,%esi
  800421873c:	48 bf 20 b8 21 04 80 	movabs $0x800421b820,%rdi
  8004218743:	00 00 00 
  8004218746:	b8 00 00 00 00       	mov    $0x0,%eax
  800421874b:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  8004218752:	00 00 00 
  8004218755:	41 ff d2             	callq  *%r10
  8004218758:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421875b:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421875e:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  8004218762:	0f 86 08 fe ff ff    	jbe    8004218570 <pci_func_enable+0x35>
  8004218768:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421876c:	8b 40 10             	mov    0x10(%rax),%eax
  800421876f:	c1 e8 10             	shr    $0x10,%eax
  8004218772:	89 c7                	mov    %eax,%edi
  8004218774:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218778:	8b 40 10             	mov    0x10(%rax),%eax
  800421877b:	0f b7 f0             	movzwl %ax,%esi
  800421877e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218782:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218785:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218789:	8b 50 08             	mov    0x8(%rax),%edx
  800421878c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218790:	48 8b 00             	mov    (%rax),%rax
  8004218793:	8b 40 08             	mov    0x8(%rax),%eax
  8004218796:	41 89 f9             	mov    %edi,%r9d
  8004218799:	41 89 f0             	mov    %esi,%r8d
  800421879c:	89 c6                	mov    %eax,%esi
  800421879e:	48 bf 80 b8 21 04 80 	movabs $0x800421b880,%rdi
  80042187a5:	00 00 00 
  80042187a8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187ad:	49 ba 82 95 20 04 80 	movabs $0x8004209582,%r10
  80042187b4:	00 00 00 
  80042187b7:	41 ff d2             	callq  *%r10
  80042187ba:	c9                   	leaveq 
  80042187bb:	c3                   	retq   

00000080042187bc <pci_init>:
  80042187bc:	55                   	push   %rbp
  80042187bd:	48 89 e5             	mov    %rsp,%rbp
  80042187c0:	ba 10 00 00 00       	mov    $0x10,%edx
  80042187c5:	be 00 00 00 00       	mov    $0x0,%esi
  80042187ca:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  80042187d1:	00 00 00 
  80042187d4:	48 b8 d0 ff 20 04 80 	movabs $0x800420ffd0,%rax
  80042187db:	00 00 00 
  80042187de:	ff d0                	callq  *%rax
  80042187e0:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  80042187e7:	00 00 00 
  80042187ea:	48 b8 8b 81 21 04 80 	movabs $0x800421818b,%rax
  80042187f1:	00 00 00 
  80042187f4:	ff d0                	callq  *%rax
  80042187f6:	5d                   	pop    %rbp
  80042187f7:	c3                   	retq   

00000080042187f8 <time_init>:
  80042187f8:	55                   	push   %rbp
  80042187f9:	48 89 e5             	mov    %rsp,%rbp
  80042187fc:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218803:	00 00 00 
  8004218806:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421880c:	5d                   	pop    %rbp
  800421880d:	c3                   	retq   

000000800421880e <time_tick>:
  800421880e:	55                   	push   %rbp
  800421880f:	48 89 e5             	mov    %rsp,%rbp
  8004218812:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218819:	00 00 00 
  800421881c:	8b 00                	mov    (%rax),%eax
  800421881e:	8d 50 01             	lea    0x1(%rax),%edx
  8004218821:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218828:	00 00 00 
  800421882b:	89 10                	mov    %edx,(%rax)
  800421882d:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218834:	00 00 00 
  8004218837:	8b 10                	mov    (%rax),%edx
  8004218839:	89 d0                	mov    %edx,%eax
  800421883b:	c1 e0 02             	shl    $0x2,%eax
  800421883e:	01 d0                	add    %edx,%eax
  8004218840:	01 c0                	add    %eax,%eax
  8004218842:	89 c2                	mov    %eax,%edx
  8004218844:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  800421884b:	00 00 00 
  800421884e:	8b 00                	mov    (%rax),%eax
  8004218850:	39 c2                	cmp    %eax,%edx
  8004218852:	73 2a                	jae    800421887e <time_tick+0x70>
  8004218854:	48 ba af b8 21 04 80 	movabs $0x800421b8af,%rdx
  800421885b:	00 00 00 
  800421885e:	be 14 00 00 00       	mov    $0x14,%esi
  8004218863:	48 bf ca b8 21 04 80 	movabs $0x800421b8ca,%rdi
  800421886a:	00 00 00 
  800421886d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218872:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004218879:	00 00 00 
  800421887c:	ff d1                	callq  *%rcx
  800421887e:	5d                   	pop    %rbp
  800421887f:	c3                   	retq   

0000008004218880 <time_msec>:
  8004218880:	55                   	push   %rbp
  8004218881:	48 89 e5             	mov    %rsp,%rbp
  8004218884:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  800421888b:	00 00 00 
  800421888e:	8b 10                	mov    (%rax),%edx
  8004218890:	89 d0                	mov    %edx,%eax
  8004218892:	c1 e0 02             	shl    $0x2,%eax
  8004218895:	01 d0                	add    %edx,%eax
  8004218897:	01 c0                	add    %eax,%eax
  8004218899:	5d                   	pop    %rbp
  800421889a:	c3                   	retq   
