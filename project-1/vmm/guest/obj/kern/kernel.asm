
vmm/guest/obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
_head64:

# Save multiboot_info addr passed by bootloader
#ifdef VMM_GUEST
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
  100000:	b8 01 00 00 00       	mov    $0x1,%eax
    vmcall
  100005:	0f 01 c1             	vmcall 
#endif
	
    movl $multiboot_info, %eax
  100008:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  10000d:	89 18                	mov    %ebx,(%rax)
#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  10000f:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100014:	e8 cc 00 00 00       	callq  1000e5 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
  100019:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif
    movl %eax,%cr4
  10001e:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100021:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100026:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100028:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002d:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  10002f:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100034:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  100039:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  10003f:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100041:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100046:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  100049:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004c:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  10004f:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100054:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  100059:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  10005f:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100061:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100066:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006b:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006e:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100071:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100073:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100078:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007d:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100082:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100088:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008d:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  10008f:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100091:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100094:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100097:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009c:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  10009f:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a2:	75 e9                	jne    10008d <_head64+0x8d>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a4:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000a9:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b1:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b3:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b7:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000b9:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bc:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000bf:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c4:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000c9:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000ce:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d1:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d4:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000d9:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dc:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000de:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e3:	50                   	push   %rax

00000000001000e4 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e4:	cb                   	lret   

00000000001000e5 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e5:	9c                   	pushfq 
    popl %eax
  1000e6:	58                   	pop    %rax
    movl %eax,%ecx
  1000e7:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000e9:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ee:	50                   	push   %rax
    popfl
  1000ef:	9d                   	popfq  
    pushfl
  1000f0:	9c                   	pushfq 
    popl %eax
  1000f1:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f2:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f4:	74 1c                	je     100112 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f6:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fb:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fd:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100100:	72 10                	jb     100112 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100102:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100107:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  100109:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  10010f:	74 01                	je     100112 <verify_cpu_no_longmode>

    ret
  100111:	c3                   	retq   

0000000000100112 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100112:	eb fe                	jmp    100112 <verify_cpu_no_longmode>
  100114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 
  10011e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100125:	00 00 00 
  100128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10012f:	00 00 00 
  100132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100139:	00 00 00 
  10013c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100143:	00 00 00 
  100146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014d:	00 00 00 
  100150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100157:	00 00 00 
  10015a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100161:	00 00 00 
  100164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016b:	00 00 00 
  10016e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100175:	00 00 00 
  100178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10017f:	00 00 00 
  100182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100189:	00 00 00 
  10018c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100193:	00 00 00 
  100196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019d:	00 00 00 
  1001a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a7:	00 00 00 
  1001aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b1:	00 00 00 
  1001b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bb:	00 00 00 
  1001be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c5:	00 00 00 
  1001c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001cf:	00 00 00 
  1001d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d9:	00 00 00 
  1001dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e3:	00 00 00 
  1001e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ed:	00 00 00 
  1001f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f7:	00 00 00 
  1001fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100201:	00 00 00 
  100204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020b:	00 00 00 
  10020e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100215:	00 00 00 
  100218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10021f:	00 00 00 
  100222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100229:	00 00 00 
  10022c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100233:	00 00 00 
  100236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023d:	00 00 00 
  100240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100247:	00 00 00 
  10024a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100251:	00 00 00 
  100254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025b:	00 00 00 
  10025e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100265:	00 00 00 
  100268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10026f:	00 00 00 
  100272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100279:	00 00 00 
  10027c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100283:	00 00 00 
  100286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028d:	00 00 00 
  100290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100297:	00 00 00 
  10029a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a1:	00 00 00 
  1002a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ab:	00 00 00 
  1002ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b5:	00 00 00 
  1002b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002bf:	00 00 00 
  1002c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c9:	00 00 00 
  1002cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d3:	00 00 00 
  1002d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002dd:	00 00 00 
  1002e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e7:	00 00 00 
  1002ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f1:	00 00 00 
  1002f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fb:	00 00 00 
  1002fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100305:	00 00 00 
  100308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10030f:	00 00 00 
  100312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100319:	00 00 00 
  10031c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100323:	00 00 00 
  100326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032d:	00 00 00 
  100330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100337:	00 00 00 
  10033a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100341:	00 00 00 
  100344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034b:	00 00 00 
  10034e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100355:	00 00 00 
  100358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10035f:	00 00 00 
  100362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100369:	00 00 00 
  10036c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100373:	00 00 00 
  100376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037d:	00 00 00 
  100380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100387:	00 00 00 
  10038a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100391:	00 00 00 
  100394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039b:	00 00 00 
  10039e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a5:	00 00 00 
  1003a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003af:	00 00 00 
  1003b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b9:	00 00 00 
  1003bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c3:	00 00 00 
  1003c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003cd:	00 00 00 
  1003d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d7:	00 00 00 
  1003da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e1:	00 00 00 
  1003e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003eb:	00 00 00 
  1003ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f5:	00 00 00 
  1003f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ff:	00 00 00 
  100402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100409:	00 00 00 
  10040c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100413:	00 00 00 
  100416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041d:	00 00 00 
  100420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100427:	00 00 00 
  10042a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100431:	00 00 00 
  100434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043b:	00 00 00 
  10043e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100445:	00 00 00 
  100448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10044f:	00 00 00 
  100452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100459:	00 00 00 
  10045c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100463:	00 00 00 
  100466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046d:	00 00 00 
  100470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100477:	00 00 00 
  10047a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100481:	00 00 00 
  100484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048b:	00 00 00 
  10048e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100495:	00 00 00 
  100498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10049f:	00 00 00 
  1004a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a9:	00 00 00 
  1004ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b3:	00 00 00 
  1004b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004bd:	00 00 00 
  1004c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c7:	00 00 00 
  1004ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d1:	00 00 00 
  1004d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004db:	00 00 00 
  1004de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e5:	00 00 00 
  1004e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004ef:	00 00 00 
  1004f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f9:	00 00 00 
  1004fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100503:	00 00 00 
  100506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050d:	00 00 00 
  100510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100517:	00 00 00 
  10051a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100521:	00 00 00 
  100524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052b:	00 00 00 
  10052e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100535:	00 00 00 
  100538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10053f:	00 00 00 
  100542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100549:	00 00 00 
  10054c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100553:	00 00 00 
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055d:	00 00 00 
  100560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100567:	00 00 00 
  10056a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100571:	00 00 00 
  100574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057b:	00 00 00 
  10057e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100585:	00 00 00 
  100588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10058f:	00 00 00 
  100592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100599:	00 00 00 
  10059c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a3:	00 00 00 
  1005a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ad:	00 00 00 
  1005b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b7:	00 00 00 
  1005ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c1:	00 00 00 
  1005c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cb:	00 00 00 
  1005ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d5:	00 00 00 
  1005d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005df:	00 00 00 
  1005e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e9:	00 00 00 
  1005ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f3:	00 00 00 
  1005f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fd:	00 00 00 
  100600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100607:	00 00 00 
  10060a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100611:	00 00 00 
  100614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061b:	00 00 00 
  10061e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100625:	00 00 00 
  100628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10062f:	00 00 00 
  100632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100639:	00 00 00 
  10063c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100643:	00 00 00 
  100646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064d:	00 00 00 
  100650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100657:	00 00 00 
  10065a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100661:	00 00 00 
  100664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066b:	00 00 00 
  10066e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100675:	00 00 00 
  100678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10067f:	00 00 00 
  100682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100689:	00 00 00 
  10068c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100693:	00 00 00 
  100696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069d:	00 00 00 
  1006a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a7:	00 00 00 
  1006aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b1:	00 00 00 
  1006b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bb:	00 00 00 
  1006be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c5:	00 00 00 
  1006c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006cf:	00 00 00 
  1006d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d9:	00 00 00 
  1006dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e3:	00 00 00 
  1006e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ed:	00 00 00 
  1006f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f7:	00 00 00 
  1006fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100701:	00 00 00 
  100704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070b:	00 00 00 
  10070e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100715:	00 00 00 
  100718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10071f:	00 00 00 
  100722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100729:	00 00 00 
  10072c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100733:	00 00 00 
  100736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073d:	00 00 00 
  100740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100747:	00 00 00 
  10074a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100751:	00 00 00 
  100754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075b:	00 00 00 
  10075e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100765:	00 00 00 
  100768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10076f:	00 00 00 
  100772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100779:	00 00 00 
  10077c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100783:	00 00 00 
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078d:	00 00 00 
  100790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100797:	00 00 00 
  10079a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a1:	00 00 00 
  1007a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ab:	00 00 00 
  1007ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b5:	00 00 00 
  1007b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007bf:	00 00 00 
  1007c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c9:	00 00 00 
  1007cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d3:	00 00 00 
  1007d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007dd:	00 00 00 
  1007e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e7:	00 00 00 
  1007ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f1:	00 00 00 
  1007f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fb:	00 00 00 
  1007fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100805:	00 00 00 
  100808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10080f:	00 00 00 
  100812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100819:	00 00 00 
  10081c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100823:	00 00 00 
  100826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082d:	00 00 00 
  100830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100837:	00 00 00 
  10083a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100841:	00 00 00 
  100844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084b:	00 00 00 
  10084e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100855:	00 00 00 
  100858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10085f:	00 00 00 
  100862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100869:	00 00 00 
  10086c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100873:	00 00 00 
  100876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087d:	00 00 00 
  100880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100887:	00 00 00 
  10088a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100891:	00 00 00 
  100894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089b:	00 00 00 
  10089e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a5:	00 00 00 
  1008a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008af:	00 00 00 
  1008b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b9:	00 00 00 
  1008bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c3:	00 00 00 
  1008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008cd:	00 00 00 
  1008d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d7:	00 00 00 
  1008da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e1:	00 00 00 
  1008e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008eb:	00 00 00 
  1008ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f5:	00 00 00 
  1008f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ff:	00 00 00 
  100902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100909:	00 00 00 
  10090c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100913:	00 00 00 
  100916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091d:	00 00 00 
  100920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100927:	00 00 00 
  10092a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100931:	00 00 00 
  100934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093b:	00 00 00 
  10093e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100945:	00 00 00 
  100948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10094f:	00 00 00 
  100952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100959:	00 00 00 
  10095c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100963:	00 00 00 
  100966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096d:	00 00 00 
  100970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100977:	00 00 00 
  10097a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100981:	00 00 00 
  100984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098b:	00 00 00 
  10098e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100995:	00 00 00 
  100998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10099f:	00 00 00 
  1009a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a9:	00 00 00 
  1009ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b3:	00 00 00 
  1009b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009bd:	00 00 00 
  1009c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c7:	00 00 00 
  1009ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d1:	00 00 00 
  1009d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009db:	00 00 00 
  1009de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e5:	00 00 00 
  1009e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009ef:	00 00 00 
  1009f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f9:	00 00 00 
  1009fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a03:	00 00 00 
  100a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0d:	00 00 00 
  100a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a17:	00 00 00 
  100a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a21:	00 00 00 
  100a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2b:	00 00 00 
  100a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a35:	00 00 00 
  100a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a3f:	00 00 00 
  100a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a49:	00 00 00 
  100a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a53:	00 00 00 
  100a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5d:	00 00 00 
  100a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a67:	00 00 00 
  100a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a71:	00 00 00 
  100a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7b:	00 00 00 
  100a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a85:	00 00 00 
  100a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a8f:	00 00 00 
  100a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a99:	00 00 00 
  100a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa3:	00 00 00 
  100aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aad:	00 00 00 
  100ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab7:	00 00 00 
  100aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac1:	00 00 00 
  100ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acb:	00 00 00 
  100ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad5:	00 00 00 
  100ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100adf:	00 00 00 
  100ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae9:	00 00 00 
  100aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af3:	00 00 00 
  100af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afd:	00 00 00 
  100b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b07:	00 00 00 
  100b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b11:	00 00 00 
  100b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1b:	00 00 00 
  100b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b25:	00 00 00 
  100b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b2f:	00 00 00 
  100b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b39:	00 00 00 
  100b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b43:	00 00 00 
  100b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4d:	00 00 00 
  100b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b57:	00 00 00 
  100b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b61:	00 00 00 
  100b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6b:	00 00 00 
  100b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b75:	00 00 00 
  100b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b7f:	00 00 00 
  100b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b89:	00 00 00 
  100b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b93:	00 00 00 
  100b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9d:	00 00 00 
  100ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba7:	00 00 00 
  100baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb1:	00 00 00 
  100bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbb:	00 00 00 
  100bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc5:	00 00 00 
  100bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bcf:	00 00 00 
  100bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd9:	00 00 00 
  100bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be3:	00 00 00 
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bed:	00 00 00 
  100bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf7:	00 00 00 
  100bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c01:	00 00 00 
  100c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0b:	00 00 00 
  100c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c15:	00 00 00 
  100c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c1f:	00 00 00 
  100c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c29:	00 00 00 
  100c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c33:	00 00 00 
  100c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3d:	00 00 00 
  100c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c47:	00 00 00 
  100c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c51:	00 00 00 
  100c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5b:	00 00 00 
  100c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c65:	00 00 00 
  100c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6f:	00 00 00 
  100c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c79:	00 00 00 
  100c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c83:	00 00 00 
  100c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8d:	00 00 00 
  100c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c97:	00 00 00 
  100c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca1:	00 00 00 
  100ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cab:	00 00 00 
  100cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb5:	00 00 00 
  100cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cbf:	00 00 00 
  100cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc9:	00 00 00 
  100ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd3:	00 00 00 
  100cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cdd:	00 00 00 
  100ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce7:	00 00 00 
  100cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf1:	00 00 00 
  100cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfb:	00 00 00 
  100cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d05:	00 00 00 
  100d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d0f:	00 00 00 
  100d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d19:	00 00 00 
  100d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d23:	00 00 00 
  100d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2d:	00 00 00 
  100d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d37:	00 00 00 
  100d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d41:	00 00 00 
  100d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4b:	00 00 00 
  100d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d55:	00 00 00 
  100d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d5f:	00 00 00 
  100d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d69:	00 00 00 
  100d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d73:	00 00 00 
  100d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7d:	00 00 00 
  100d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d87:	00 00 00 
  100d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d91:	00 00 00 
  100d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9b:	00 00 00 
  100d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da5:	00 00 00 
  100da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100daf:	00 00 00 
  100db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db9:	00 00 00 
  100dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc3:	00 00 00 
  100dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dcd:	00 00 00 
  100dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd7:	00 00 00 
  100dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de1:	00 00 00 
  100de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100deb:	00 00 00 
  100dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df5:	00 00 00 
  100df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dff:	00 00 00 
  100e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e09:	00 00 00 
  100e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e13:	00 00 00 
  100e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1d:	00 00 00 
  100e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e27:	00 00 00 
  100e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e31:	00 00 00 
  100e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3b:	00 00 00 
  100e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e45:	00 00 00 
  100e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e4f:	00 00 00 
  100e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e59:	00 00 00 
  100e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e63:	00 00 00 
  100e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6d:	00 00 00 
  100e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e77:	00 00 00 
  100e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e81:	00 00 00 
  100e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8b:	00 00 00 
  100e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e95:	00 00 00 
  100e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e9f:	00 00 00 
  100ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea9:	00 00 00 
  100eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb3:	00 00 00 
  100eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebd:	00 00 00 
  100ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec7:	00 00 00 
  100eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed1:	00 00 00 
  100ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edb:	00 00 00 
  100ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee5:	00 00 00 
  100ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eef:	00 00 00 
  100ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef9:	00 00 00 
  100efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f03:	00 00 00 
  100f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0d:	00 00 00 
  100f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f17:	00 00 00 
  100f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f21:	00 00 00 
  100f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2b:	00 00 00 
  100f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f35:	00 00 00 
  100f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f3f:	00 00 00 
  100f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f49:	00 00 00 
  100f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f53:	00 00 00 
  100f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5d:	00 00 00 
  100f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f67:	00 00 00 
  100f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f71:	00 00 00 
  100f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7b:	00 00 00 
  100f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f85:	00 00 00 
  100f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f8f:	00 00 00 
  100f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f99:	00 00 00 
  100f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa3:	00 00 00 
  100fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fad:	00 00 00 
  100fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb7:	00 00 00 
  100fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc1:	00 00 00 
  100fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcb:	00 00 00 
  100fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd5:	00 00 00 
  100fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fdf:	00 00 00 
  100fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe9:	00 00 00 
  100fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff3:	00 00 00 
  100ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ffd:	00 00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 c0 22 04 80 	movabs $0x800422c038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 c0 22 04 80 	movabs $0x800422c000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 9e 01 20 04 80 	movabs $0x800420019e,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	53                   	push   %rbx
  800420005d:	48 83 ec 38          	sub    $0x38,%rsp
  8004200061:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004200064:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004200068:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420006c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200070:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004200074:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200077:	0f a2                	cpuid  
  8004200079:	89 de                	mov    %ebx,%esi
  800420007b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420007e:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004200081:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004200084:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004200087:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420008c:	74 09                	je     8004200097 <cpuid+0x3f>
		*eaxp = eax;
  800420008e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200092:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200095:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004200097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420009c:	74 09                	je     80042000a7 <cpuid+0x4f>
		*ebxp = ebx;
  800420009e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042000a2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042000a5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042000a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042000ac:	74 09                	je     80042000b7 <cpuid+0x5f>
		*ecxp = ecx;
  80042000ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042000b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042000b5:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042000b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042000bc:	74 09                	je     80042000c7 <cpuid+0x6f>
		*edxp = edx;
  80042000be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042000c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042000c5:	89 10                	mov    %edx,(%rax)
}
  80042000c7:	48 83 c4 38          	add    $0x38,%rsp
  80042000cb:	5b                   	pop    %rbx
  80042000cc:	5d                   	pop    %rbp
  80042000cd:	c3                   	retq   

00000080042000ce <xchg>:

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042000ce:	55                   	push   %rbp
  80042000cf:	48 89 e5             	mov    %rsp,%rbp
  80042000d2:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042000d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042000da:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042000dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042000e1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042000e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042000e8:	f0 87 02             	lock xchg %eax,(%rdx)
  80042000eb:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042000ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042000f1:	c9                   	leaveq 
  80042000f2:	c3                   	retq   

00000080042000f3 <lock_kernel>:
  80042000f3:	55                   	push   %rbp
  80042000f4:	48 89 e5             	mov    %rsp,%rbp
  80042000f7:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042000fe:	00 00 00 
  8004200101:	48 b8 fd 72 21 04 80 	movabs $0x80042172fd,%rax
  8004200108:	00 00 00 
  800420010b:	ff d0                	callq  *%rax
  800420010d:	5d                   	pop    %rbp
  800420010e:	c3                   	retq   

000000800420010f <vmcall>:
  800420010f:	55                   	push   %rbp
  8004200110:	48 89 e5             	mov    %rsp,%rbp
  8004200113:	53                   	push   %rbx
  8004200114:	48 83 ec 48          	sub    $0x48,%rsp
  8004200118:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420011b:	89 75 d8             	mov    %esi,-0x28(%rbp)
  800420011e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004200122:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200126:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  800420012a:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  800420012e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200131:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004200135:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004200139:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  800420013d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004200141:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004200145:	4c 89 c3             	mov    %r8,%rbx
  8004200148:	0f 01 c1             	vmcall 
  800420014b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420014f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004200153:	74 3e                	je     8004200193 <vmcall+0x84>
  8004200155:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420015a:	7e 37                	jle    8004200193 <vmcall+0x84>
  800420015c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004200160:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200163:	49 89 d0             	mov    %rdx,%r8
  8004200166:	89 c1                	mov    %eax,%ecx
  8004200168:	48 ba 40 88 21 04 80 	movabs $0x8004218840,%rdx
  800420016f:	00 00 00 
  8004200172:	be 35 00 00 00       	mov    $0x35,%esi
  8004200177:	48 bf 5c 88 21 04 80 	movabs $0x800421885c,%rdi
  800420017e:	00 00 00 
  8004200181:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200186:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800420018d:	00 00 00 
  8004200190:	41 ff d1             	callq  *%r9
  8004200193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200197:	48 83 c4 48          	add    $0x48,%rsp
  800420019b:	5b                   	pop    %rbx
  800420019c:	5d                   	pop    %rbp
  800420019d:	c3                   	retq   

000000800420019e <i386_init>:
  800420019e:	55                   	push   %rbp
  800420019f:	48 89 e5             	mov    %rsp,%rbp
  80042001a2:	48 83 ec 10          	sub    $0x10,%rsp
  80042001a6:	48 ba 10 e0 6d 04 80 	movabs $0x80046de010,%rdx
  80042001ad:	00 00 00 
  80042001b0:	48 b8 48 bf 49 04 80 	movabs $0x800449bf48,%rax
  80042001b7:	00 00 00 
  80042001ba:	48 29 c2             	sub    %rax,%rdx
  80042001bd:	48 89 d0             	mov    %rdx,%rax
  80042001c0:	48 89 c2             	mov    %rax,%rdx
  80042001c3:	be 00 00 00 00       	mov    $0x0,%esi
  80042001c8:	48 bf 48 bf 49 04 80 	movabs $0x800449bf48,%rdi
  80042001cf:	00 00 00 
  80042001d2:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042001d9:	00 00 00 
  80042001dc:	ff d0                	callq  *%rax
  80042001de:	48 b8 e1 12 20 04 80 	movabs $0x80042012e1,%rax
  80042001e5:	00 00 00 
  80042001e8:	ff d0                	callq  *%rax
  80042001ea:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042001ef:	48 bf 6b 88 21 04 80 	movabs $0x800421886b,%rdi
  80042001f6:	00 00 00 
  80042001f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042001fe:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004200205:	00 00 00 
  8004200208:	ff d2                	callq  *%rdx
  800420020a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200211:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004200215:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420021b:	48 89 c1             	mov    %rax,%rcx
  800420021e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004200223:	be 00 00 00 00       	mov    $0x0,%esi
  8004200228:	bf 01 00 00 00       	mov    $0x1,%edi
  800420022d:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200234:	00 00 00 
  8004200237:	ff d0                	callq  *%rax
  8004200239:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420023c:	83 e0 20             	and    $0x20,%eax
  800420023f:	85 c0                	test   %eax,%eax
  8004200241:	74 2a                	je     800420026d <i386_init+0xcf>
  8004200243:	48 ba 88 88 21 04 80 	movabs $0x8004218888,%rdx
  800420024a:	00 00 00 
  800420024d:	be 68 00 00 00       	mov    $0x68,%esi
  8004200252:	48 bf 5c 88 21 04 80 	movabs $0x800421885c,%rdi
  8004200259:	00 00 00 
  800420025c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200261:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004200268:	00 00 00 
  800420026b:	ff d1                	callq  *%rcx
  800420026d:	48 bf b0 88 21 04 80 	movabs $0x80042188b0,%rdi
  8004200274:	00 00 00 
  8004200277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420027c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004200283:	00 00 00 
  8004200286:	ff d2                	callq  *%rdx
  8004200288:	b8 00 00 00 00       	mov    $0x0,%eax
  800420028d:	48 ba 76 27 20 04 80 	movabs $0x8004202776,%rdx
  8004200294:	00 00 00 
  8004200297:	ff d2                	callq  *%rdx
  8004200299:	48 b8 5a 80 20 04 80 	movabs $0x800420805a,%rax
  80042002a0:	00 00 00 
  80042002a3:	ff d0                	callq  *%rax
  80042002a5:	48 b8 97 96 20 04 80 	movabs $0x8004209697,%rax
  80042002ac:	00 00 00 
  80042002af:	ff d0                	callq  *%rax
  80042002b1:	48 b8 1f 92 20 04 80 	movabs $0x800420921f,%rax
  80042002b8:	00 00 00 
  80042002bb:	ff d0                	callq  *%rax
  80042002bd:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042002c4:	00 00 00 
  80042002c7:	ff d0                	callq  *%rax
  80042002c9:	be 01 00 00 00       	mov    $0x1,%esi
  80042002ce:	48 bf 60 59 2b 04 80 	movabs $0x80042b5960,%rdi
  80042002d5:	00 00 00 
  80042002d8:	48 b8 ea 88 20 04 80 	movabs $0x80042088ea,%rax
  80042002df:	00 00 00 
  80042002e2:	ff d0                	callq  *%rax
  80042002e4:	be 00 00 00 00       	mov    $0x0,%esi
  80042002e9:	48 bf 80 d8 29 04 80 	movabs $0x800429d880,%rdi
  80042002f0:	00 00 00 
  80042002f3:	48 b8 ea 88 20 04 80 	movabs $0x80042088ea,%rax
  80042002fa:	00 00 00 
  80042002fd:	ff d0                	callq  *%rax
  80042002ff:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004200306:	00 00 00 
  8004200309:	ff d0                	callq  *%rax
  800420030b:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  8004200312:	00 00 00 
  8004200315:	ff d0                	callq  *%rax

0000008004200317 <boot_aps>:
  8004200317:	55                   	push   %rbp
  8004200318:	48 89 e5             	mov    %rsp,%rbp
  800420031b:	48 83 ec 30          	sub    $0x30,%rsp
  800420031f:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200326:	00 
  8004200327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420032b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420032f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200332:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200335:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420033c:	00 00 00 
  800420033f:	48 8b 00             	mov    (%rax),%rax
  8004200342:	48 39 c2             	cmp    %rax,%rdx
  8004200345:	72 32                	jb     8004200379 <boot_aps+0x62>
  8004200347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420034b:	48 89 c1             	mov    %rax,%rcx
  800420034e:	48 ba d8 88 21 04 80 	movabs $0x80042188d8,%rdx
  8004200355:	00 00 00 
  8004200358:	be 01 01 00 00       	mov    $0x101,%esi
  800420035d:	48 bf 5c 88 21 04 80 	movabs $0x800421885c,%rdi
  8004200364:	00 00 00 
  8004200367:	b8 00 00 00 00       	mov    $0x0,%eax
  800420036c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004200373:	00 00 00 
  8004200376:	41 ff d0             	callq  *%r8
  8004200379:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200380:	00 00 00 
  8004200383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200387:	48 01 d0             	add    %rdx,%rax
  800420038a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420038e:	48 ba 46 64 21 04 80 	movabs $0x8004216446,%rdx
  8004200395:	00 00 00 
  8004200398:	48 b8 60 63 21 04 80 	movabs $0x8004216360,%rax
  800420039f:	00 00 00 
  80042003a2:	48 29 c2             	sub    %rax,%rdx
  80042003a5:	48 89 d0             	mov    %rdx,%rax
  80042003a8:	48 89 c2             	mov    %rax,%rdx
  80042003ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042003af:	48 be 60 63 21 04 80 	movabs $0x8004216360,%rsi
  80042003b6:	00 00 00 
  80042003b9:	48 89 c7             	mov    %rax,%rdi
  80042003bc:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  80042003c3:	00 00 00 
  80042003c6:	ff d0                	callq  *%rax
  80042003c8:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003cf:	00 00 00 
  80042003d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042003d6:	e9 0e 01 00 00       	jmpq   80042004e9 <boot_aps+0x1d2>
  80042003db:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  80042003e2:	00 00 00 
  80042003e5:	ff d0                	callq  *%rax
  80042003e7:	48 98                	cltq   
  80042003e9:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ed:	48 89 c2             	mov    %rax,%rdx
  80042003f0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f4:	48 01 c2             	add    %rax,%rdx
  80042003f7:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003fe:	00 00 00 
  8004200401:	48 01 d0             	add    %rdx,%rax
  8004200404:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200408:	75 05                	jne    800420040f <boot_aps+0xf8>
  800420040a:	e9 d2 00 00 00       	jmpq   80042004e1 <boot_aps+0x1ca>
  800420040f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200413:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420041a:	00 00 00 
  800420041d:	48 29 c2             	sub    %rax,%rdx
  8004200420:	48 89 d0             	mov    %rdx,%rax
  8004200423:	48 c1 f8 03          	sar    $0x3,%rax
  8004200427:	48 89 c2             	mov    %rax,%rdx
  800420042a:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200431:	f0 f0 f0 
  8004200434:	48 0f af c2          	imul   %rdx,%rax
  8004200438:	48 83 c0 01          	add    $0x1,%rax
  800420043c:	48 c1 e0 10          	shl    $0x10,%rax
  8004200440:	48 89 c2             	mov    %rax,%rdx
  8004200443:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  800420044a:	00 00 00 
  800420044d:	48 01 c2             	add    %rax,%rdx
  8004200450:	48 b8 d8 b5 69 04 80 	movabs $0x800469b5d8,%rax
  8004200457:	00 00 00 
  800420045a:	48 89 10             	mov    %rdx,(%rax)
  800420045d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200461:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200465:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420046c:	00 00 00 
  800420046f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200473:	77 32                	ja     80042004a7 <boot_aps+0x190>
  8004200475:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200479:	48 89 c1             	mov    %rax,%rcx
  800420047c:	48 ba 00 89 21 04 80 	movabs $0x8004218900,%rdx
  8004200483:	00 00 00 
  8004200486:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420048b:	48 bf 5c 88 21 04 80 	movabs $0x800421885c,%rdi
  8004200492:	00 00 00 
  8004200495:	b8 00 00 00 00       	mov    $0x0,%eax
  800420049a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042004a1:	00 00 00 
  80042004a4:	41 ff d0             	callq  *%r8
  80042004a7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042004ae:	ff ff ff 
  80042004b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042004b5:	48 01 d0             	add    %rdx,%rax
  80042004b8:	89 c2                	mov    %eax,%edx
  80042004ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004be:	0f b6 00             	movzbl (%rax),%eax
  80042004c1:	0f b6 c0             	movzbl %al,%eax
  80042004c4:	89 d6                	mov    %edx,%esi
  80042004c6:	89 c7                	mov    %eax,%edi
  80042004c8:	48 b8 e2 6f 21 04 80 	movabs $0x8004216fe2,%rax
  80042004cf:	00 00 00 
  80042004d2:	ff d0                	callq  *%rax
  80042004d4:	90                   	nop
  80042004d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004d9:	8b 40 04             	mov    0x4(%rax),%eax
  80042004dc:	83 f8 01             	cmp    $0x1,%eax
  80042004df:	75 f4                	jne    80042004d5 <boot_aps+0x1be>
  80042004e1:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042004e8:	00 
  80042004e9:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  80042004f0:	00 00 00 
  80042004f3:	8b 00                	mov    (%rax),%eax
  80042004f5:	48 98                	cltq   
  80042004f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042004fb:	48 89 c2             	mov    %rax,%rdx
  80042004fe:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200502:	48 01 c2             	add    %rax,%rdx
  8004200505:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420050c:	00 00 00 
  800420050f:	48 01 d0             	add    %rdx,%rax
  8004200512:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200516:	0f 87 bf fe ff ff    	ja     80042003db <boot_aps+0xc4>
  800420051c:	c9                   	leaveq 
  800420051d:	c3                   	retq   

000000800420051e <mp_main>:
  800420051e:	55                   	push   %rbp
  800420051f:	48 89 e5             	mov    %rsp,%rbp
  8004200522:	48 83 ec 10          	sub    $0x10,%rsp
  8004200526:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420052d:	00 00 00 
  8004200530:	48 8b 00             	mov    (%rax),%rax
  8004200533:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420053b:	0f 22 d8             	mov    %rax,%cr3
  800420053e:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004200545:	00 00 00 
  8004200548:	ff d0                	callq  *%rax
  800420054a:	89 c6                	mov    %eax,%esi
  800420054c:	48 bf 24 89 21 04 80 	movabs $0x8004218924,%rdi
  8004200553:	00 00 00 
  8004200556:	b8 00 00 00 00       	mov    $0x0,%eax
  800420055b:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004200562:	00 00 00 
  8004200565:	ff d2                	callq  *%rdx
  8004200567:	48 b8 7b 6d 21 04 80 	movabs $0x8004216d7b,%rax
  800420056e:	00 00 00 
  8004200571:	ff d0                	callq  *%rax
  8004200573:	48 b8 27 81 20 04 80 	movabs $0x8004208127,%rax
  800420057a:	00 00 00 
  800420057d:	ff d0                	callq  *%rax
  800420057f:	48 b8 9a bd 20 04 80 	movabs $0x800420bd9a,%rax
  8004200586:	00 00 00 
  8004200589:	ff d0                	callq  *%rax
  800420058b:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004200592:	00 00 00 
  8004200595:	ff d0                	callq  *%rax
  8004200597:	48 98                	cltq   
  8004200599:	48 c1 e0 03          	shl    $0x3,%rax
  800420059d:	48 89 c2             	mov    %rax,%rdx
  80042005a0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042005a4:	48 01 d0             	add    %rdx,%rax
  80042005a7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042005ae:	00 00 00 
  80042005b1:	48 01 d0             	add    %rdx,%rax
  80042005b4:	48 83 c0 04          	add    $0x4,%rax
  80042005b8:	be 01 00 00 00       	mov    $0x1,%esi
  80042005bd:	48 89 c7             	mov    %rax,%rdi
  80042005c0:	48 b8 ce 00 20 04 80 	movabs $0x80042000ce,%rax
  80042005c7:	00 00 00 
  80042005ca:	ff d0                	callq  *%rax
  80042005cc:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042005d3:	00 00 00 
  80042005d6:	ff d0                	callq  *%rax
  80042005d8:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  80042005df:	00 00 00 
  80042005e2:	ff d0                	callq  *%rax

00000080042005e4 <_panic>:
  80042005e4:	55                   	push   %rbp
  80042005e5:	48 89 e5             	mov    %rsp,%rbp
  80042005e8:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042005ef:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042005f6:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042005fc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004200603:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420060a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200611:	84 c0                	test   %al,%al
  8004200613:	74 20                	je     8004200635 <_panic+0x51>
  8004200615:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200619:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420061d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200621:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200625:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200629:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420062d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200631:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200635:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420063c:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  8004200643:	00 00 00 
  8004200646:	48 8b 00             	mov    (%rax),%rax
  8004200649:	48 85 c0             	test   %rax,%rax
  800420064c:	74 05                	je     8004200653 <_panic+0x6f>
  800420064e:	e9 b5 00 00 00       	jmpq   8004200708 <_panic+0x124>
  8004200653:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420065a:	00 00 00 
  800420065d:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200664:	48 89 10             	mov    %rdx,(%rax)
  8004200667:	fa                   	cli    
  8004200668:	fc                   	cld    
  8004200669:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200670:	00 00 00 
  8004200673:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420067a:	00 00 00 
  800420067d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200681:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200688:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200696:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420069d:	00 00 00 
  80042006a0:	ff d0                	callq  *%rax
  80042006a2:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  80042006a8:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042006af:	89 c6                	mov    %eax,%esi
  80042006b1:	48 bf 40 89 21 04 80 	movabs $0x8004218940,%rdi
  80042006b8:	00 00 00 
  80042006bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006c0:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  80042006c7:	00 00 00 
  80042006ca:	41 ff d0             	callq  *%r8
  80042006cd:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006d4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006db:	48 89 d6             	mov    %rdx,%rsi
  80042006de:	48 89 c7             	mov    %rax,%rdi
  80042006e1:	48 b8 c0 94 20 04 80 	movabs $0x80042094c0,%rax
  80042006e8:	00 00 00 
  80042006eb:	ff d0                	callq  *%rax
  80042006ed:	48 bf 62 89 21 04 80 	movabs $0x8004218962,%rdi
  80042006f4:	00 00 00 
  80042006f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006fc:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004200703:	00 00 00 
  8004200706:	ff d2                	callq  *%rdx
  8004200708:	bf 00 00 00 00       	mov    $0x0,%edi
  800420070d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  8004200714:	00 00 00 
  8004200717:	ff d0                	callq  *%rax
  8004200719:	eb ed                	jmp    8004200708 <_panic+0x124>

000000800420071b <_warn>:
  800420071b:	55                   	push   %rbp
  800420071c:	48 89 e5             	mov    %rsp,%rbp
  800420071f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200726:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420072d:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200733:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420073a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200741:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200748:	84 c0                	test   %al,%al
  800420074a:	74 20                	je     800420076c <_warn+0x51>
  800420074c:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200750:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200754:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200758:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420075c:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200760:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200764:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200768:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420076c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200773:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420077a:	00 00 00 
  800420077d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200784:	00 00 00 
  8004200787:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420078b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200792:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200799:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042007a0:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042007a6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042007ad:	48 89 c6             	mov    %rax,%rsi
  80042007b0:	48 bf 64 89 21 04 80 	movabs $0x8004218964,%rdi
  80042007b7:	00 00 00 
  80042007ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007bf:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  80042007c6:	00 00 00 
  80042007c9:	ff d1                	callq  *%rcx
  80042007cb:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042007d2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042007d9:	48 89 d6             	mov    %rdx,%rsi
  80042007dc:	48 89 c7             	mov    %rax,%rdi
  80042007df:	48 b8 c0 94 20 04 80 	movabs $0x80042094c0,%rax
  80042007e6:	00 00 00 
  80042007e9:	ff d0                	callq  *%rax
  80042007eb:	48 bf 62 89 21 04 80 	movabs $0x8004218962,%rdi
  80042007f2:	00 00 00 
  80042007f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007fa:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004200801:	00 00 00 
  8004200804:	ff d2                	callq  *%rdx
  8004200806:	c9                   	leaveq 
  8004200807:	c3                   	retq   

0000008004200808 <delay>:
  8004200808:	55                   	push   %rbp
  8004200809:	48 89 e5             	mov    %rsp,%rbp
  800420080c:	48 83 ec 20          	sub    $0x20,%rsp
  8004200810:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200817:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420081a:	89 c2                	mov    %eax,%edx
  800420081c:	ec                   	in     (%dx),%al
  800420081d:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200820:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200827:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420082a:	89 c2                	mov    %eax,%edx
  800420082c:	ec                   	in     (%dx),%al
  800420082d:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200830:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200837:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420083a:	89 c2                	mov    %eax,%edx
  800420083c:	ec                   	in     (%dx),%al
  800420083d:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200840:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200847:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420084a:	89 c2                	mov    %eax,%edx
  800420084c:	ec                   	in     (%dx),%al
  800420084d:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200850:	c9                   	leaveq 
  8004200851:	c3                   	retq   

0000008004200852 <serial_proc_data>:
  8004200852:	55                   	push   %rbp
  8004200853:	48 89 e5             	mov    %rsp,%rbp
  8004200856:	48 83 ec 10          	sub    $0x10,%rsp
  800420085a:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200861:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200864:	89 c2                	mov    %eax,%edx
  8004200866:	ec                   	in     (%dx),%al
  8004200867:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420086a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420086e:	0f b6 c0             	movzbl %al,%eax
  8004200871:	83 e0 01             	and    $0x1,%eax
  8004200874:	85 c0                	test   %eax,%eax
  8004200876:	75 07                	jne    800420087f <serial_proc_data+0x2d>
  8004200878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420087d:	eb 17                	jmp    8004200896 <serial_proc_data+0x44>
  800420087f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200886:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200889:	89 c2                	mov    %eax,%edx
  800420088b:	ec                   	in     (%dx),%al
  800420088c:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420088f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200893:	0f b6 c0             	movzbl %al,%eax
  8004200896:	c9                   	leaveq 
  8004200897:	c3                   	retq   

0000008004200898 <serial_intr>:
  8004200898:	55                   	push   %rbp
  8004200899:	48 89 e5             	mov    %rsp,%rbp
  800420089c:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042008a3:	00 00 00 
  80042008a6:	0f b6 00             	movzbl (%rax),%eax
  80042008a9:	84 c0                	test   %al,%al
  80042008ab:	74 16                	je     80042008c3 <serial_intr+0x2b>
  80042008ad:	48 bf 52 08 20 04 80 	movabs $0x8004200852,%rdi
  80042008b4:	00 00 00 
  80042008b7:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  80042008be:	00 00 00 
  80042008c1:	ff d0                	callq  *%rax
  80042008c3:	5d                   	pop    %rbp
  80042008c4:	c3                   	retq   

00000080042008c5 <serial_putc>:
  80042008c5:	55                   	push   %rbp
  80042008c6:	48 89 e5             	mov    %rsp,%rbp
  80042008c9:	48 83 ec 28          	sub    $0x28,%rsp
  80042008cd:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042008d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042008d7:	eb 10                	jmp    80042008e9 <serial_putc+0x24>
  80042008d9:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  80042008e0:	00 00 00 
  80042008e3:	ff d0                	callq  *%rax
  80042008e5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042008e9:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008f0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042008f3:	89 c2                	mov    %eax,%edx
  80042008f5:	ec                   	in     (%dx),%al
  80042008f6:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042008f9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042008fd:	0f b6 c0             	movzbl %al,%eax
  8004200900:	83 e0 20             	and    $0x20,%eax
  8004200903:	85 c0                	test   %eax,%eax
  8004200905:	75 09                	jne    8004200910 <serial_putc+0x4b>
  8004200907:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420090e:	7e c9                	jle    80042008d9 <serial_putc+0x14>
  8004200910:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200913:	0f b6 c0             	movzbl %al,%eax
  8004200916:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420091d:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200920:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200924:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200927:	ee                   	out    %al,(%dx)
  8004200928:	c9                   	leaveq 
  8004200929:	c3                   	retq   

000000800420092a <serial_init>:
  800420092a:	55                   	push   %rbp
  800420092b:	48 89 e5             	mov    %rsp,%rbp
  800420092e:	48 83 ec 50          	sub    $0x50,%rsp
  8004200932:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  8004200939:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420093d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200941:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200944:	ee                   	out    %al,(%dx)
  8004200945:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420094c:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200950:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200954:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200957:	ee                   	out    %al,(%dx)
  8004200958:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  800420095f:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200963:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200967:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420096a:	ee                   	out    %al,(%dx)
  800420096b:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200972:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200976:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420097a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420097d:	ee                   	out    %al,(%dx)
  800420097e:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200985:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  8004200989:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420098d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200990:	ee                   	out    %al,(%dx)
  8004200991:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200998:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420099c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042009a0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042009a3:	ee                   	out    %al,(%dx)
  80042009a4:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  80042009ab:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042009af:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042009b3:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042009b6:	ee                   	out    %al,(%dx)
  80042009b7:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009be:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042009c1:	89 c2                	mov    %eax,%edx
  80042009c3:	ec                   	in     (%dx),%al
  80042009c4:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042009c7:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042009cb:	3c ff                	cmp    $0xff,%al
  80042009cd:	0f 95 c2             	setne  %dl
  80042009d0:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042009d7:	00 00 00 
  80042009da:	88 10                	mov    %dl,(%rax)
  80042009dc:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009e3:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042009e6:	89 c2                	mov    %eax,%edx
  80042009e8:	ec                   	in     (%dx),%al
  80042009e9:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042009ec:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042009f3:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042009f6:	89 c2                	mov    %eax,%edx
  80042009f8:	ec                   	in     (%dx),%al
  80042009f9:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042009fc:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004200a03:	00 00 00 
  8004200a06:	0f b6 00             	movzbl (%rax),%eax
  8004200a09:	84 c0                	test   %al,%al
  8004200a0b:	74 23                	je     8004200a30 <serial_init+0x106>
  8004200a0d:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004200a14:	00 00 00 
  8004200a17:	0f b7 00             	movzwl (%rax),%eax
  8004200a1a:	0f b7 c0             	movzwl %ax,%eax
  8004200a1d:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200a22:	89 c7                	mov    %eax,%edi
  8004200a24:	48 b8 71 93 20 04 80 	movabs $0x8004209371,%rax
  8004200a2b:	00 00 00 
  8004200a2e:	ff d0                	callq  *%rax
  8004200a30:	c9                   	leaveq 
  8004200a31:	c3                   	retq   

0000008004200a32 <lpt_putc>:
  8004200a32:	55                   	push   %rbp
  8004200a33:	48 89 e5             	mov    %rsp,%rbp
  8004200a36:	48 83 ec 38          	sub    $0x38,%rsp
  8004200a3a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200a3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200a44:	eb 10                	jmp    8004200a56 <lpt_putc+0x24>
  8004200a46:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  8004200a4d:	00 00 00 
  8004200a50:	ff d0                	callq  *%rax
  8004200a52:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200a56:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200a5d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200a60:	89 c2                	mov    %eax,%edx
  8004200a62:	ec                   	in     (%dx),%al
  8004200a63:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200a66:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200a6a:	84 c0                	test   %al,%al
  8004200a6c:	78 09                	js     8004200a77 <lpt_putc+0x45>
  8004200a6e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200a75:	7e cf                	jle    8004200a46 <lpt_putc+0x14>
  8004200a77:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200a7a:	0f b6 c0             	movzbl %al,%eax
  8004200a7d:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200a84:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a87:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200a8b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200a8e:	ee                   	out    %al,(%dx)
  8004200a8f:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200a96:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  8004200a9a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200a9e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200aa1:	ee                   	out    %al,(%dx)
  8004200aa2:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  8004200aa9:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200aad:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200ab1:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200ab4:	ee                   	out    %al,(%dx)
  8004200ab5:	c9                   	leaveq 
  8004200ab6:	c3                   	retq   

0000008004200ab7 <cga_init>:
  8004200ab7:	55                   	push   %rbp
  8004200ab8:	48 89 e5             	mov    %rsp,%rbp
  8004200abb:	48 83 ec 30          	sub    $0x30,%rsp
  8004200abf:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  8004200ac6:	00 00 00 
  8004200ac9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ad1:	0f b7 00             	movzwl (%rax),%eax
  8004200ad4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004200ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200adc:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  8004200ae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ae5:	0f b7 00             	movzwl (%rax),%eax
  8004200ae8:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200aec:	74 20                	je     8004200b0e <cga_init+0x57>
  8004200aee:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200af5:	00 00 00 
  8004200af8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200afc:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b03:	00 00 00 
  8004200b06:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200b0c:	eb 1b                	jmp    8004200b29 <cga_init+0x72>
  8004200b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200b12:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200b16:	66 89 10             	mov    %dx,(%rax)
  8004200b19:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b20:	00 00 00 
  8004200b23:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200b29:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b30:	00 00 00 
  8004200b33:	8b 00                	mov    (%rax),%eax
  8004200b35:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200b38:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200b3c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200b40:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200b43:	ee                   	out    %al,(%dx)
  8004200b44:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b4b:	00 00 00 
  8004200b4e:	8b 00                	mov    (%rax),%eax
  8004200b50:	83 c0 01             	add    $0x1,%eax
  8004200b53:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b56:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200b59:	89 c2                	mov    %eax,%edx
  8004200b5b:	ec                   	in     (%dx),%al
  8004200b5c:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200b5f:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200b63:	0f b6 c0             	movzbl %al,%eax
  8004200b66:	c1 e0 08             	shl    $0x8,%eax
  8004200b69:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200b6c:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b73:	00 00 00 
  8004200b76:	8b 00                	mov    (%rax),%eax
  8004200b78:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200b7b:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200b7f:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200b83:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200b86:	ee                   	out    %al,(%dx)
  8004200b87:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b8e:	00 00 00 
  8004200b91:	8b 00                	mov    (%rax),%eax
  8004200b93:	83 c0 01             	add    $0x1,%eax
  8004200b96:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b99:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200b9c:	89 c2                	mov    %eax,%edx
  8004200b9e:	ec                   	in     (%dx),%al
  8004200b9f:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200ba2:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200ba6:	0f b6 c0             	movzbl %al,%eax
  8004200ba9:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200bac:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200bb3:	00 00 00 
  8004200bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200bba:	48 89 10             	mov    %rdx,(%rax)
  8004200bbd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200bc0:	89 c2                	mov    %eax,%edx
  8004200bc2:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200bc9:	00 00 00 
  8004200bcc:	66 89 10             	mov    %dx,(%rax)
  8004200bcf:	c9                   	leaveq 
  8004200bd0:	c3                   	retq   

0000008004200bd1 <cga_putc>:
  8004200bd1:	55                   	push   %rbp
  8004200bd2:	48 89 e5             	mov    %rsp,%rbp
  8004200bd5:	48 83 ec 40          	sub    $0x40,%rsp
  8004200bd9:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200bdc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bdf:	b0 00                	mov    $0x0,%al
  8004200be1:	85 c0                	test   %eax,%eax
  8004200be3:	75 07                	jne    8004200bec <cga_putc+0x1b>
  8004200be5:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200bec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bef:	0f b6 c0             	movzbl %al,%eax
  8004200bf2:	83 f8 09             	cmp    $0x9,%eax
  8004200bf5:	0f 84 f6 00 00 00    	je     8004200cf1 <cga_putc+0x120>
  8004200bfb:	83 f8 09             	cmp    $0x9,%eax
  8004200bfe:	7f 0a                	jg     8004200c0a <cga_putc+0x39>
  8004200c00:	83 f8 08             	cmp    $0x8,%eax
  8004200c03:	74 18                	je     8004200c1d <cga_putc+0x4c>
  8004200c05:	e9 3e 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c0a:	83 f8 0a             	cmp    $0xa,%eax
  8004200c0d:	74 75                	je     8004200c84 <cga_putc+0xb3>
  8004200c0f:	83 f8 0d             	cmp    $0xd,%eax
  8004200c12:	0f 84 89 00 00 00    	je     8004200ca1 <cga_putc+0xd0>
  8004200c18:	e9 2b 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c1d:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c24:	00 00 00 
  8004200c27:	0f b7 00             	movzwl (%rax),%eax
  8004200c2a:	66 85 c0             	test   %ax,%ax
  8004200c2d:	74 50                	je     8004200c7f <cga_putc+0xae>
  8004200c2f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c36:	00 00 00 
  8004200c39:	0f b7 00             	movzwl (%rax),%eax
  8004200c3c:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200c3f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c46:	00 00 00 
  8004200c49:	66 89 10             	mov    %dx,(%rax)
  8004200c4c:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200c53:	00 00 00 
  8004200c56:	48 8b 10             	mov    (%rax),%rdx
  8004200c59:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c60:	00 00 00 
  8004200c63:	0f b7 00             	movzwl (%rax),%eax
  8004200c66:	0f b7 c0             	movzwl %ax,%eax
  8004200c69:	48 01 c0             	add    %rax,%rax
  8004200c6c:	48 01 c2             	add    %rax,%rdx
  8004200c6f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c72:	b0 00                	mov    $0x0,%al
  8004200c74:	83 c8 20             	or     $0x20,%eax
  8004200c77:	66 89 02             	mov    %ax,(%rdx)
  8004200c7a:	e9 04 01 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c7f:	e9 ff 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c84:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c8b:	00 00 00 
  8004200c8e:	0f b7 00             	movzwl (%rax),%eax
  8004200c91:	8d 50 50             	lea    0x50(%rax),%edx
  8004200c94:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c9b:	00 00 00 
  8004200c9e:	66 89 10             	mov    %dx,(%rax)
  8004200ca1:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ca8:	00 00 00 
  8004200cab:	0f b7 30             	movzwl (%rax),%esi
  8004200cae:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200cb5:	00 00 00 
  8004200cb8:	0f b7 08             	movzwl (%rax),%ecx
  8004200cbb:	0f b7 c1             	movzwl %cx,%eax
  8004200cbe:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200cc4:	c1 e8 10             	shr    $0x10,%eax
  8004200cc7:	89 c2                	mov    %eax,%edx
  8004200cc9:	66 c1 ea 06          	shr    $0x6,%dx
  8004200ccd:	89 d0                	mov    %edx,%eax
  8004200ccf:	c1 e0 02             	shl    $0x2,%eax
  8004200cd2:	01 d0                	add    %edx,%eax
  8004200cd4:	c1 e0 04             	shl    $0x4,%eax
  8004200cd7:	29 c1                	sub    %eax,%ecx
  8004200cd9:	89 ca                	mov    %ecx,%edx
  8004200cdb:	29 d6                	sub    %edx,%esi
  8004200cdd:	89 f2                	mov    %esi,%edx
  8004200cdf:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ce6:	00 00 00 
  8004200ce9:	66 89 10             	mov    %dx,(%rax)
  8004200cec:	e9 92 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200cf1:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200cf6:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200cfd:	00 00 00 
  8004200d00:	ff d0                	callq  *%rax
  8004200d02:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d07:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d0e:	00 00 00 
  8004200d11:	ff d0                	callq  *%rax
  8004200d13:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d18:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d1f:	00 00 00 
  8004200d22:	ff d0                	callq  *%rax
  8004200d24:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d29:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d30:	00 00 00 
  8004200d33:	ff d0                	callq  *%rax
  8004200d35:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d3a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d41:	00 00 00 
  8004200d44:	ff d0                	callq  *%rax
  8004200d46:	eb 3b                	jmp    8004200d83 <cga_putc+0x1b2>
  8004200d48:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200d4f:	00 00 00 
  8004200d52:	48 8b 30             	mov    (%rax),%rsi
  8004200d55:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d5c:	00 00 00 
  8004200d5f:	0f b7 00             	movzwl (%rax),%eax
  8004200d62:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d65:	48 ba 10 c0 49 04 80 	movabs $0x800449c010,%rdx
  8004200d6c:	00 00 00 
  8004200d6f:	66 89 0a             	mov    %cx,(%rdx)
  8004200d72:	0f b7 c0             	movzwl %ax,%eax
  8004200d75:	48 01 c0             	add    %rax,%rax
  8004200d78:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200d7c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200d7f:	66 89 02             	mov    %ax,(%rdx)
  8004200d82:	90                   	nop
  8004200d83:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d8a:	00 00 00 
  8004200d8d:	0f b7 00             	movzwl (%rax),%eax
  8004200d90:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200d94:	0f 86 89 00 00 00    	jbe    8004200e23 <cga_putc+0x252>
  8004200d9a:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200da1:	00 00 00 
  8004200da4:	48 8b 00             	mov    (%rax),%rax
  8004200da7:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200dae:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200db5:	00 00 00 
  8004200db8:	48 8b 00             	mov    (%rax),%rax
  8004200dbb:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200dc0:	48 89 ce             	mov    %rcx,%rsi
  8004200dc3:	48 89 c7             	mov    %rax,%rdi
  8004200dc6:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  8004200dcd:	00 00 00 
  8004200dd0:	ff d0                	callq  *%rax
  8004200dd2:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200dd9:	eb 22                	jmp    8004200dfd <cga_putc+0x22c>
  8004200ddb:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200de2:	00 00 00 
  8004200de5:	48 8b 00             	mov    (%rax),%rax
  8004200de8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200deb:	48 63 d2             	movslq %edx,%rdx
  8004200dee:	48 01 d2             	add    %rdx,%rdx
  8004200df1:	48 01 d0             	add    %rdx,%rax
  8004200df4:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200df9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200dfd:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200e04:	7e d5                	jle    8004200ddb <cga_putc+0x20a>
  8004200e06:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e0d:	00 00 00 
  8004200e10:	0f b7 00             	movzwl (%rax),%eax
  8004200e13:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200e16:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e1d:	00 00 00 
  8004200e20:	66 89 10             	mov    %dx,(%rax)
  8004200e23:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e2a:	00 00 00 
  8004200e2d:	8b 00                	mov    (%rax),%eax
  8004200e2f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200e32:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200e36:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200e3a:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200e3d:	ee                   	out    %al,(%dx)
  8004200e3e:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e45:	00 00 00 
  8004200e48:	0f b7 00             	movzwl (%rax),%eax
  8004200e4b:	66 c1 e8 08          	shr    $0x8,%ax
  8004200e4f:	0f b6 c0             	movzbl %al,%eax
  8004200e52:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200e59:	00 00 00 
  8004200e5c:	8b 12                	mov    (%rdx),%edx
  8004200e5e:	83 c2 01             	add    $0x1,%edx
  8004200e61:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200e64:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200e67:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200e6b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200e6e:	ee                   	out    %al,(%dx)
  8004200e6f:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e76:	00 00 00 
  8004200e79:	8b 00                	mov    (%rax),%eax
  8004200e7b:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200e7e:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200e82:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200e86:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200e89:	ee                   	out    %al,(%dx)
  8004200e8a:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e91:	00 00 00 
  8004200e94:	0f b7 00             	movzwl (%rax),%eax
  8004200e97:	0f b6 c0             	movzbl %al,%eax
  8004200e9a:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200ea1:	00 00 00 
  8004200ea4:	8b 12                	mov    (%rdx),%edx
  8004200ea6:	83 c2 01             	add    $0x1,%edx
  8004200ea9:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200eac:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200eaf:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200eb3:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200eb6:	ee                   	out    %al,(%dx)
  8004200eb7:	c9                   	leaveq 
  8004200eb8:	c3                   	retq   

0000008004200eb9 <kbd_proc_data>:
  8004200eb9:	55                   	push   %rbp
  8004200eba:	48 89 e5             	mov    %rsp,%rbp
  8004200ebd:	48 83 ec 30          	sub    $0x30,%rsp
  8004200ec1:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ec8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ecb:	89 c2                	mov    %eax,%edx
  8004200ecd:	ec                   	in     (%dx),%al
  8004200ece:	88 45 ef             	mov    %al,-0x11(%rbp)
	return data;
  8004200ed1:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200ed5:	0f b6 c0             	movzbl %al,%eax
  8004200ed8:	83 e0 01             	and    $0x1,%eax
  8004200edb:	85 c0                	test   %eax,%eax
  8004200edd:	75 0a                	jne    8004200ee9 <kbd_proc_data+0x30>
  8004200edf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200ee4:	e9 28 02 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200ee9:	c7 45 e8 60 00 00 00 	movl   $0x60,-0x18(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ef0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200ef3:	89 c2                	mov    %eax,%edx
  8004200ef5:	ec                   	in     (%dx),%al
  8004200ef6:	88 45 e7             	mov    %al,-0x19(%rbp)
	return data;
  8004200ef9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200efd:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f00:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200f04:	75 27                	jne    8004200f2d <kbd_proc_data+0x74>
  8004200f06:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f0d:	00 00 00 
  8004200f10:	8b 00                	mov    (%rax),%eax
  8004200f12:	83 c8 40             	or     $0x40,%eax
  8004200f15:	89 c2                	mov    %eax,%edx
  8004200f17:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f1e:	00 00 00 
  8004200f21:	89 10                	mov    %edx,(%rax)
  8004200f23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f28:	e9 e4 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f31:	84 c0                	test   %al,%al
  8004200f33:	79 65                	jns    8004200f9a <kbd_proc_data+0xe1>
  8004200f35:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f3c:	00 00 00 
  8004200f3f:	8b 00                	mov    (%rax),%eax
  8004200f41:	83 e0 40             	and    $0x40,%eax
  8004200f44:	85 c0                	test   %eax,%eax
  8004200f46:	75 09                	jne    8004200f51 <kbd_proc_data+0x98>
  8004200f48:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f4c:	83 e0 7f             	and    $0x7f,%eax
  8004200f4f:	eb 04                	jmp    8004200f55 <kbd_proc_data+0x9c>
  8004200f51:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f55:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f58:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f5c:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200f63:	00 00 00 
  8004200f66:	48 98                	cltq   
  8004200f68:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f6c:	83 c8 40             	or     $0x40,%eax
  8004200f6f:	0f b6 c0             	movzbl %al,%eax
  8004200f72:	f7 d0                	not    %eax
  8004200f74:	89 c2                	mov    %eax,%edx
  8004200f76:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f7d:	00 00 00 
  8004200f80:	8b 00                	mov    (%rax),%eax
  8004200f82:	21 c2                	and    %eax,%edx
  8004200f84:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f8b:	00 00 00 
  8004200f8e:	89 10                	mov    %edx,(%rax)
  8004200f90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f95:	e9 77 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f9a:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fa1:	00 00 00 
  8004200fa4:	8b 00                	mov    (%rax),%eax
  8004200fa6:	83 e0 40             	and    $0x40,%eax
  8004200fa9:	85 c0                	test   %eax,%eax
  8004200fab:	74 21                	je     8004200fce <kbd_proc_data+0x115>
  8004200fad:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200fb1:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fb8:	00 00 00 
  8004200fbb:	8b 00                	mov    (%rax),%eax
  8004200fbd:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200fc0:	89 c2                	mov    %eax,%edx
  8004200fc2:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fc9:	00 00 00 
  8004200fcc:	89 10                	mov    %edx,(%rax)
  8004200fce:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200fd2:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200fd9:	00 00 00 
  8004200fdc:	48 98                	cltq   
  8004200fde:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200fe2:	0f b6 d0             	movzbl %al,%edx
  8004200fe5:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fec:	00 00 00 
  8004200fef:	8b 00                	mov    (%rax),%eax
  8004200ff1:	09 c2                	or     %eax,%edx
  8004200ff3:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200ffa:	00 00 00 
  8004200ffd:	89 10                	mov    %edx,(%rax)
  8004200fff:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201003:	48 ba 60 c1 22 04 80 	movabs $0x800422c160,%rdx
  800420100a:	00 00 00 
  800420100d:	48 98                	cltq   
  800420100f:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201013:	0f b6 d0             	movzbl %al,%edx
  8004201016:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420101d:	00 00 00 
  8004201020:	8b 00                	mov    (%rax),%eax
  8004201022:	31 c2                	xor    %eax,%edx
  8004201024:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420102b:	00 00 00 
  800420102e:	89 10                	mov    %edx,(%rax)
  8004201030:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201037:	00 00 00 
  800420103a:	8b 00                	mov    (%rax),%eax
  800420103c:	83 e0 03             	and    $0x3,%eax
  800420103f:	89 c2                	mov    %eax,%edx
  8004201041:	48 b8 60 c5 22 04 80 	movabs $0x800422c560,%rax
  8004201048:	00 00 00 
  800420104b:	89 d2                	mov    %edx,%edx
  800420104d:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004201051:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201055:	48 01 d0             	add    %rdx,%rax
  8004201058:	0f b6 00             	movzbl (%rax),%eax
  800420105b:	0f b6 c0             	movzbl %al,%eax
  800420105e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201061:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201068:	00 00 00 
  800420106b:	8b 00                	mov    (%rax),%eax
  800420106d:	83 e0 08             	and    $0x8,%eax
  8004201070:	85 c0                	test   %eax,%eax
  8004201072:	74 22                	je     8004201096 <kbd_proc_data+0x1dd>
  8004201074:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004201078:	7e 0c                	jle    8004201086 <kbd_proc_data+0x1cd>
  800420107a:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  800420107e:	7f 06                	jg     8004201086 <kbd_proc_data+0x1cd>
  8004201080:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004201084:	eb 10                	jmp    8004201096 <kbd_proc_data+0x1dd>
  8004201086:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  800420108a:	7e 0a                	jle    8004201096 <kbd_proc_data+0x1dd>
  800420108c:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004201090:	7f 04                	jg     8004201096 <kbd_proc_data+0x1dd>
  8004201092:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004201096:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420109d:	00 00 00 
  80042010a0:	8b 00                	mov    (%rax),%eax
  80042010a2:	f7 d0                	not    %eax
  80042010a4:	83 e0 06             	and    $0x6,%eax
  80042010a7:	85 c0                	test   %eax,%eax
  80042010a9:	75 37                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010ab:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  80042010b2:	75 2e                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010b4:	48 bf 7e 89 21 04 80 	movabs $0x800421897e,%rdi
  80042010bb:	00 00 00 
  80042010be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010c3:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  80042010ca:	00 00 00 
  80042010cd:	ff d2                	callq  *%rdx
  80042010cf:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%rbp)
  80042010d6:	c6 45 df 03          	movb   $0x3,-0x21(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042010da:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042010de:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042010e1:	ee                   	out    %al,(%dx)
  80042010e2:	83 7d fc 1b          	cmpl   $0x1b,-0x4(%rbp)
  80042010e6:	75 26                	jne    800420110e <kbd_proc_data+0x255>
  80042010e8:	48 bf 8a 89 21 04 80 	movabs $0x800421898a,%rdi
  80042010ef:	00 00 00 
  80042010f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010f7:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  80042010fe:	00 00 00 
  8004201101:	ff d2                	callq  *%rdx
  8004201103:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201108:	0f 01 c1             	vmcall 
  800420110b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420110e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201111:	c9                   	leaveq 
  8004201112:	c3                   	retq   

0000008004201113 <kbd_intr>:
  8004201113:	55                   	push   %rbp
  8004201114:	48 89 e5             	mov    %rsp,%rbp
  8004201117:	48 bf b9 0e 20 04 80 	movabs $0x8004200eb9,%rdi
  800420111e:	00 00 00 
  8004201121:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  8004201128:	00 00 00 
  800420112b:	ff d0                	callq  *%rax
  800420112d:	5d                   	pop    %rbp
  800420112e:	c3                   	retq   

000000800420112f <kbd_init>:
  800420112f:	55                   	push   %rbp
  8004201130:	48 89 e5             	mov    %rsp,%rbp
  8004201133:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420113a:	00 00 00 
  800420113d:	ff d0                	callq  *%rax
  800420113f:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004201146:	00 00 00 
  8004201149:	0f b7 00             	movzwl (%rax),%eax
  800420114c:	0f b7 c0             	movzwl %ax,%eax
  800420114f:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201154:	89 c7                	mov    %eax,%edi
  8004201156:	48 b8 71 93 20 04 80 	movabs $0x8004209371,%rax
  800420115d:	00 00 00 
  8004201160:	ff d0                	callq  *%rax
  8004201162:	5d                   	pop    %rbp
  8004201163:	c3                   	retq   

0000008004201164 <cons_intr>:
  8004201164:	55                   	push   %rbp
  8004201165:	48 89 e5             	mov    %rsp,%rbp
  8004201168:	48 83 ec 20          	sub    $0x20,%rsp
  800420116c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201170:	eb 6a                	jmp    80042011dc <cons_intr+0x78>
  8004201172:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201176:	75 02                	jne    800420117a <cons_intr+0x16>
  8004201178:	eb 62                	jmp    80042011dc <cons_intr+0x78>
  800420117a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201181:	00 00 00 
  8004201184:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420118a:	8d 48 01             	lea    0x1(%rax),%ecx
  800420118d:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  8004201194:	00 00 00 
  8004201197:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  800420119d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042011a0:	89 d1                	mov    %edx,%ecx
  80042011a2:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  80042011a9:	00 00 00 
  80042011ac:	89 c0                	mov    %eax,%eax
  80042011ae:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042011b1:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011b8:	00 00 00 
  80042011bb:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011c1:	3d 00 02 00 00       	cmp    $0x200,%eax
  80042011c6:	75 14                	jne    80042011dc <cons_intr+0x78>
  80042011c8:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011cf:	00 00 00 
  80042011d2:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  80042011d9:	00 00 00 
  80042011dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042011e0:	ff d0                	callq  *%rax
  80042011e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042011e5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042011e9:	75 87                	jne    8004201172 <cons_intr+0xe>
  80042011eb:	c9                   	leaveq 
  80042011ec:	c3                   	retq   

00000080042011ed <cons_getc>:
  80042011ed:	55                   	push   %rbp
  80042011ee:	48 89 e5             	mov    %rsp,%rbp
  80042011f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042011f5:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  80042011fc:	00 00 00 
  80042011ff:	ff d0                	callq  *%rax
  8004201201:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004201208:	00 00 00 
  800420120b:	ff d0                	callq  *%rax
  800420120d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201214:	00 00 00 
  8004201217:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  800420121d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201224:	00 00 00 
  8004201227:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420122d:	39 c2                	cmp    %eax,%edx
  800420122f:	74 69                	je     800420129a <cons_getc+0xad>
  8004201231:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201238:	00 00 00 
  800420123b:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201241:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201244:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420124b:	00 00 00 
  800420124e:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201254:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420125b:	00 00 00 
  800420125e:	89 c0                	mov    %eax,%eax
  8004201260:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201264:	0f b6 c0             	movzbl %al,%eax
  8004201267:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420126a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201271:	00 00 00 
  8004201274:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420127a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420127f:	75 14                	jne    8004201295 <cons_getc+0xa8>
  8004201281:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201288:	00 00 00 
  800420128b:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201292:	00 00 00 
  8004201295:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201298:	eb 05                	jmp    800420129f <cons_getc+0xb2>
  800420129a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420129f:	c9                   	leaveq 
  80042012a0:	c3                   	retq   

00000080042012a1 <cons_putc>:
  80042012a1:	55                   	push   %rbp
  80042012a2:	48 89 e5             	mov    %rsp,%rbp
  80042012a5:	48 83 ec 10          	sub    $0x10,%rsp
  80042012a9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042012ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012af:	89 c7                	mov    %eax,%edi
  80042012b1:	48 b8 c5 08 20 04 80 	movabs $0x80042008c5,%rax
  80042012b8:	00 00 00 
  80042012bb:	ff d0                	callq  *%rax
  80042012bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012c0:	89 c7                	mov    %eax,%edi
  80042012c2:	48 b8 32 0a 20 04 80 	movabs $0x8004200a32,%rax
  80042012c9:	00 00 00 
  80042012cc:	ff d0                	callq  *%rax
  80042012ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d1:	89 c7                	mov    %eax,%edi
  80042012d3:	48 b8 d1 0b 20 04 80 	movabs $0x8004200bd1,%rax
  80042012da:	00 00 00 
  80042012dd:	ff d0                	callq  *%rax
  80042012df:	c9                   	leaveq 
  80042012e0:	c3                   	retq   

00000080042012e1 <cons_init>:
  80042012e1:	55                   	push   %rbp
  80042012e2:	48 89 e5             	mov    %rsp,%rbp
  80042012e5:	48 b8 b7 0a 20 04 80 	movabs $0x8004200ab7,%rax
  80042012ec:	00 00 00 
  80042012ef:	ff d0                	callq  *%rax
  80042012f1:	48 b8 2f 11 20 04 80 	movabs $0x800420112f,%rax
  80042012f8:	00 00 00 
  80042012fb:	ff d0                	callq  *%rax
  80042012fd:	48 b8 2a 09 20 04 80 	movabs $0x800420092a,%rax
  8004201304:	00 00 00 
  8004201307:	ff d0                	callq  *%rax
  8004201309:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004201310:	00 00 00 
  8004201313:	0f b6 00             	movzbl (%rax),%eax
  8004201316:	83 f0 01             	xor    $0x1,%eax
  8004201319:	84 c0                	test   %al,%al
  800420131b:	74 1b                	je     8004201338 <cons_init+0x57>
  800420131d:	48 bf 97 89 21 04 80 	movabs $0x8004218997,%rdi
  8004201324:	00 00 00 
  8004201327:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201333:	00 00 00 
  8004201336:	ff d2                	callq  *%rdx
  8004201338:	5d                   	pop    %rbp
  8004201339:	c3                   	retq   

000000800420133a <cputchar>:
  800420133a:	55                   	push   %rbp
  800420133b:	48 89 e5             	mov    %rsp,%rbp
  800420133e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201342:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201345:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201348:	89 c7                	mov    %eax,%edi
  800420134a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004201351:	00 00 00 
  8004201354:	ff d0                	callq  *%rax
  8004201356:	c9                   	leaveq 
  8004201357:	c3                   	retq   

0000008004201358 <getchar>:
  8004201358:	55                   	push   %rbp
  8004201359:	48 89 e5             	mov    %rsp,%rbp
  800420135c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201360:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  8004201367:	00 00 00 
  800420136a:	ff d0                	callq  *%rax
  800420136c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420136f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201373:	74 eb                	je     8004201360 <getchar+0x8>
  8004201375:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201378:	c9                   	leaveq 
  8004201379:	c3                   	retq   

000000800420137a <iscons>:
  800420137a:	55                   	push   %rbp
  800420137b:	48 89 e5             	mov    %rsp,%rbp
  800420137e:	48 83 ec 04          	sub    $0x4,%rsp
  8004201382:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201385:	b8 01 00 00 00       	mov    $0x1,%eax
  800420138a:	c9                   	leaveq 
  800420138b:	c3                   	retq   

000000800420138c <mon_help>:
  800420138c:	55                   	push   %rbp
  800420138d:	48 89 e5             	mov    %rsp,%rbp
  8004201390:	48 83 ec 30          	sub    $0x30,%rsp
  8004201394:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201397:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420139b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420139f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042013a6:	eb 6c                	jmp    8004201414 <mon_help+0x88>
  80042013a8:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  80042013af:	00 00 00 
  80042013b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013b5:	48 63 d0             	movslq %eax,%rdx
  80042013b8:	48 89 d0             	mov    %rdx,%rax
  80042013bb:	48 01 c0             	add    %rax,%rax
  80042013be:	48 01 d0             	add    %rdx,%rax
  80042013c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042013c5:	48 01 c8             	add    %rcx,%rax
  80042013c8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042013cc:	48 be 80 c5 22 04 80 	movabs $0x800422c580,%rsi
  80042013d3:	00 00 00 
  80042013d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013d9:	48 63 d0             	movslq %eax,%rdx
  80042013dc:	48 89 d0             	mov    %rdx,%rax
  80042013df:	48 01 c0             	add    %rax,%rax
  80042013e2:	48 01 d0             	add    %rdx,%rax
  80042013e5:	48 c1 e0 03          	shl    $0x3,%rax
  80042013e9:	48 01 f0             	add    %rsi,%rax
  80042013ec:	48 8b 00             	mov    (%rax),%rax
  80042013ef:	48 89 ca             	mov    %rcx,%rdx
  80042013f2:	48 89 c6             	mov    %rax,%rsi
  80042013f5:	48 bf 45 8a 21 04 80 	movabs $0x8004218a45,%rdi
  80042013fc:	00 00 00 
  80042013ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201404:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420140b:	00 00 00 
  800420140e:	ff d1                	callq  *%rcx
  8004201410:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201414:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201417:	83 f8 03             	cmp    $0x3,%eax
  800420141a:	76 8c                	jbe    80042013a8 <mon_help+0x1c>
  800420141c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201421:	c9                   	leaveq 
  8004201422:	c3                   	retq   

0000008004201423 <mon_kerninfo>:
  8004201423:	55                   	push   %rbp
  8004201424:	48 89 e5             	mov    %rsp,%rbp
  8004201427:	48 83 ec 30          	sub    $0x30,%rsp
  800420142b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420142e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201432:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201436:	48 bf 4e 8a 21 04 80 	movabs $0x8004218a4e,%rdi
  800420143d:	00 00 00 
  8004201440:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201445:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420144c:	00 00 00 
  800420144f:	ff d2                	callq  *%rdx
  8004201451:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201458:	00 00 00 
  800420145b:	48 bf 68 8a 21 04 80 	movabs $0x8004218a68,%rdi
  8004201462:	00 00 00 
  8004201465:	b8 00 00 00 00       	mov    $0x0,%eax
  800420146a:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201471:	00 00 00 
  8004201474:	ff d2                	callq  *%rdx
  8004201476:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  800420147d:	00 00 00 
  8004201480:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201487:	00 00 00 
  800420148a:	48 bf 90 8a 21 04 80 	movabs $0x8004218a90,%rdi
  8004201491:	00 00 00 
  8004201494:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201499:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  80042014a0:	00 00 00 
  80042014a3:	ff d1                	callq  *%rcx
  80042014a5:	48 ba 3b 88 21 00 00 	movabs $0x21883b,%rdx
  80042014ac:	00 00 00 
  80042014af:	48 be 3b 88 21 04 80 	movabs $0x800421883b,%rsi
  80042014b6:	00 00 00 
  80042014b9:	48 bf b8 8a 21 04 80 	movabs $0x8004218ab8,%rdi
  80042014c0:	00 00 00 
  80042014c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014c8:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  80042014cf:	00 00 00 
  80042014d2:	ff d1                	callq  *%rcx
  80042014d4:	48 ba 48 bf 49 00 00 	movabs $0x49bf48,%rdx
  80042014db:	00 00 00 
  80042014de:	48 be 48 bf 49 04 80 	movabs $0x800449bf48,%rsi
  80042014e5:	00 00 00 
  80042014e8:	48 bf e0 8a 21 04 80 	movabs $0x8004218ae0,%rdi
  80042014ef:	00 00 00 
  80042014f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f7:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  80042014fe:	00 00 00 
  8004201501:	ff d1                	callq  *%rcx
  8004201503:	48 ba 10 e0 6d 00 00 	movabs $0x6de010,%rdx
  800420150a:	00 00 00 
  800420150d:	48 be 10 e0 6d 04 80 	movabs $0x80046de010,%rsi
  8004201514:	00 00 00 
  8004201517:	48 bf 08 8b 21 04 80 	movabs $0x8004218b08,%rdi
  800420151e:	00 00 00 
  8004201521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201526:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420152d:	00 00 00 
  8004201530:	ff d1                	callq  *%rcx
  8004201532:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004201539:	00 
  800420153a:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201541:	00 00 00 
  8004201544:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201548:	48 29 c2             	sub    %rax,%rdx
  800420154b:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  8004201552:	00 00 00 
  8004201555:	48 83 e8 01          	sub    $0x1,%rax
  8004201559:	48 01 d0             	add    %rdx,%rax
  800420155c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201564:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201569:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420156d:	48 89 d0             	mov    %rdx,%rax
  8004201570:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201574:	48 29 c2             	sub    %rax,%rdx
  8004201577:	48 89 d0             	mov    %rdx,%rax
  800420157a:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201581:	48 85 c0             	test   %rax,%rax
  8004201584:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201588:	48 c1 f8 0a          	sar    $0xa,%rax
  800420158c:	48 89 c6             	mov    %rax,%rsi
  800420158f:	48 bf 30 8b 21 04 80 	movabs $0x8004218b30,%rdi
  8004201596:	00 00 00 
  8004201599:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159e:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  80042015a5:	00 00 00 
  80042015a8:	ff d2                	callq  *%rdx
  80042015aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015af:	c9                   	leaveq 
  80042015b0:	c3                   	retq   

00000080042015b1 <mon_backtrace>:
  80042015b1:	55                   	push   %rbp
  80042015b2:	48 89 e5             	mov    %rsp,%rbp
  80042015b5:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  80042015bc:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  80042015c2:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  80042015c9:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042015d0:	48 89 e8             	mov    %rbp,%rax
  80042015d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  80042015d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042015db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042015df:	48 89 e0             	mov    %rsp,%rax
  80042015e2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042015e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042015ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042015ee:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042015f5:	00 
  80042015f6:	74 21                	je     8004201619 <mon_backtrace+0x68>
  80042015f8:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042015ff:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004201603:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201607:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  800420160e:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004201615:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201619:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8004201620 <mon_backtrace+0x6f>
  8004201620:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201624:	48 bf 5a 8b 21 04 80 	movabs $0x8004218b5a,%rdi
  800420162b:	00 00 00 
  800420162e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201633:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420163a:	00 00 00 
  800420163d:	ff d2                	callq  *%rdx
  800420163f:	e9 17 03 00 00       	jmpq   800420195b <mon_backtrace+0x3aa>
  8004201644:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201648:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420164c:	48 89 c6             	mov    %rax,%rsi
  800420164f:	48 bf 6c 8b 21 04 80 	movabs $0x8004218b6c,%rdi
  8004201656:	00 00 00 
  8004201659:	b8 00 00 00 00       	mov    $0x0,%eax
  800420165e:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  8004201665:	00 00 00 
  8004201668:	ff d1                	callq  *%rcx
  800420166a:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201675:	48 89 d6             	mov    %rdx,%rsi
  8004201678:	48 89 c7             	mov    %rax,%rdi
  800420167b:	48 b8 dc eb 20 04 80 	movabs $0x800420ebdc,%rax
  8004201682:	00 00 00 
  8004201685:	ff d0                	callq  *%rax
  8004201687:	85 c0                	test   %eax,%eax
  8004201689:	0f 88 9a 02 00 00    	js     8004201929 <mon_backtrace+0x378>
  800420168f:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  8004201696:	48 05 a8 00 00 00    	add    $0xa8,%rax
  800420169c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042016a0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  80042016a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042016ab:	48 89 d7             	mov    %rdx,%rdi
  80042016ae:	48 29 c7             	sub    %rax,%rdi
  80042016b1:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  80042016b8:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  80042016be:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  80042016c4:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  80042016cb:	49 89 f9             	mov    %rdi,%r9
  80042016ce:	49 89 f0             	mov    %rsi,%r8
  80042016d1:	48 89 c6             	mov    %rax,%rsi
  80042016d4:	48 bf 88 8b 21 04 80 	movabs $0x8004218b88,%rdi
  80042016db:	00 00 00 
  80042016de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042016e3:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  80042016ea:	00 00 00 
  80042016ed:	41 ff d2             	callq  *%r10
  80042016f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042016f4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042016f8:	66 83 f8 06          	cmp    $0x6,%ax
  80042016fc:	75 15                	jne    8004201713 <mon_backtrace+0x162>
  80042016fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201702:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420170a:	48 01 d0             	add    %rdx,%rax
  800420170d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201711:	eb 28                	jmp    800420173b <mon_backtrace+0x18a>
  8004201713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201717:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420171b:	66 83 f8 07          	cmp    $0x7,%ax
  800420171f:	75 15                	jne    8004201736 <mon_backtrace+0x185>
  8004201721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201725:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420172d:	48 01 d0             	add    %rdx,%rax
  8004201730:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201734:	eb 05                	jmp    800420173b <mon_backtrace+0x18a>
  8004201736:	e9 ee 01 00 00       	jmpq   8004201929 <mon_backtrace+0x378>
  800420173b:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201741:	89 c6                	mov    %eax,%esi
  8004201743:	48 bf a3 8b 21 04 80 	movabs $0x8004218ba3,%rdi
  800420174a:	00 00 00 
  800420174d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201752:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201759:	00 00 00 
  800420175c:	ff d2                	callq  *%rdx
  800420175e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201765:	e9 f2 00 00 00       	jmpq   800420185c <mon_backtrace+0x2ab>
  800420176a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420176d:	48 98                	cltq   
  800420176f:	48 83 c0 0a          	add    $0xa,%rax
  8004201773:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420177a:	ff 
  800420177b:	48 85 c0             	test   %rax,%rax
  800420177e:	75 35                	jne    80042017b5 <mon_backtrace+0x204>
  8004201780:	48 b9 ae 8b 21 04 80 	movabs $0x8004218bae,%rcx
  8004201787:	00 00 00 
  800420178a:	48 ba c4 8b 21 04 80 	movabs $0x8004218bc4,%rdx
  8004201791:	00 00 00 
  8004201794:	be 78 00 00 00       	mov    $0x78,%esi
  8004201799:	48 bf d9 8b 21 04 80 	movabs $0x8004218bd9,%rdi
  80042017a0:	00 00 00 
  80042017a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017a8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042017af:	00 00 00 
  80042017b2:	41 ff d0             	callq  *%r8
  80042017b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017b8:	48 98                	cltq   
  80042017ba:	48 83 c0 0a          	add    $0xa,%rax
  80042017be:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  80042017c5:	ff 
  80042017c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ca:	48 01 d0             	add    %rdx,%rax
  80042017cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042017d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017d4:	48 98                	cltq   
  80042017d6:	48 83 c0 08          	add    $0x8,%rax
  80042017da:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042017e1:	83 f8 02             	cmp    $0x2,%eax
  80042017e4:	74 31                	je     8004201817 <mon_backtrace+0x266>
  80042017e6:	83 f8 02             	cmp    $0x2,%eax
  80042017e9:	7f 07                	jg     80042017f2 <mon_backtrace+0x241>
  80042017eb:	83 f8 01             	cmp    $0x1,%eax
  80042017ee:	74 37                	je     8004201827 <mon_backtrace+0x276>
  80042017f0:	eb 44                	jmp    8004201836 <mon_backtrace+0x285>
  80042017f2:	83 f8 04             	cmp    $0x4,%eax
  80042017f5:	74 12                	je     8004201809 <mon_backtrace+0x258>
  80042017f7:	83 f8 08             	cmp    $0x8,%eax
  80042017fa:	75 3a                	jne    8004201836 <mon_backtrace+0x285>
  80042017fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201800:	48 8b 00             	mov    (%rax),%rax
  8004201803:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201807:	eb 2d                	jmp    8004201836 <mon_backtrace+0x285>
  8004201809:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420180d:	8b 00                	mov    (%rax),%eax
  800420180f:	89 c0                	mov    %eax,%eax
  8004201811:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201815:	eb 1f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201817:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420181b:	0f b7 00             	movzwl (%rax),%eax
  800420181e:	0f b7 c0             	movzwl %ax,%eax
  8004201821:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201825:	eb 0f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201827:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420182b:	0f b6 00             	movzbl (%rax),%eax
  800420182e:	0f b6 c0             	movzbl %al,%eax
  8004201831:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201835:	90                   	nop
  8004201836:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420183a:	48 89 c6             	mov    %rax,%rsi
  800420183d:	48 bf eb 8b 21 04 80 	movabs $0x8004218beb,%rdi
  8004201844:	00 00 00 
  8004201847:	b8 00 00 00 00       	mov    $0x0,%eax
  800420184c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201853:	00 00 00 
  8004201856:	ff d2                	callq  *%rdx
  8004201858:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420185c:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201862:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004201865:	0f 8f ff fe ff ff    	jg     800420176a <mon_backtrace+0x1b9>
  800420186b:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201872:	0f b7 c0             	movzwl %ax,%eax
  8004201875:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420187a:	74 48                	je     80042018c4 <mon_backtrace+0x313>
  800420187c:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201881:	75 17                	jne    800420189a <mon_backtrace+0x2e9>
  8004201883:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420188a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420188e:	48 01 d0             	add    %rdx,%rax
  8004201891:	48 8b 00             	mov    (%rax),%rax
  8004201894:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201898:	eb 2b                	jmp    80042018c5 <mon_backtrace+0x314>
  800420189a:	48 ba f2 8b 21 04 80 	movabs $0x8004218bf2,%rdx
  80042018a1:	00 00 00 
  80042018a4:	be 92 00 00 00       	mov    $0x92,%esi
  80042018a9:	48 bf d9 8b 21 04 80 	movabs $0x8004218bd9,%rdi
  80042018b0:	00 00 00 
  80042018b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042018b8:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042018bf:	00 00 00 
  80042018c2:	ff d1                	callq  *%rcx
  80042018c4:	90                   	nop
  80042018c5:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  80042018cc:	0f b7 c0             	movzwl %ax,%eax
  80042018cf:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  80042018d4:	74 48                	je     800420191e <mon_backtrace+0x36d>
  80042018d6:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018db:	75 17                	jne    80042018f4 <mon_backtrace+0x343>
  80042018dd:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042018e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042018e8:	48 01 d0             	add    %rdx,%rax
  80042018eb:	48 8b 00             	mov    (%rax),%rax
  80042018ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042018f2:	eb 2b                	jmp    800420191f <mon_backtrace+0x36e>
  80042018f4:	48 ba f2 8b 21 04 80 	movabs $0x8004218bf2,%rdx
  80042018fb:	00 00 00 
  80042018fe:	be 9d 00 00 00       	mov    $0x9d,%esi
  8004201903:	48 bf d9 8b 21 04 80 	movabs $0x8004218bd9,%rdi
  800420190a:	00 00 00 
  800420190d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201912:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201919:	00 00 00 
  800420191c:	ff d1                	callq  *%rcx
  800420191e:	90                   	nop
  800420191f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201923:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201927:	eb 17                	jmp    8004201940 <mon_backtrace+0x38f>
  8004201929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420192d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004201931:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201935:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201939:	48 8b 00             	mov    (%rax),%rax
  800420193c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201940:	48 bf 03 8c 21 04 80 	movabs $0x8004218c03,%rdi
  8004201947:	00 00 00 
  800420194a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420194f:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201956:	00 00 00 
  8004201959:	ff d2                	callq  *%rdx
  800420195b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201960:	0f 85 de fc ff ff    	jne    8004201644 <mon_backtrace+0x93>
  8004201966:	b8 00 00 00 00       	mov    $0x0,%eax
  800420196b:	c9                   	leaveq 
  800420196c:	c3                   	retq   

000000800420196d <mon_exit>:
  800420196d:	55                   	push   %rbp
  800420196e:	48 89 e5             	mov    %rsp,%rbp
  8004201971:	48 83 ec 18          	sub    $0x18,%rsp
  8004201975:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420197c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201980:	f4                   	hlt    
  8004201981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004201986:	c9                   	leaveq 
  8004201987:	c3                   	retq   

0000008004201988 <runcmd>:
  8004201988:	55                   	push   %rbp
  8004201989:	48 89 e5             	mov    %rsp,%rbp
  800420198c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201993:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420199a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042019a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042019a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042019ab:	48 98                	cltq   
  80042019ad:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042019b4:	ff 00 00 00 00 
  80042019b9:	eb 15                	jmp    80042019d0 <runcmd+0x48>
  80042019bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019c2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042019c6:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042019cd:	c6 00 00             	movb   $0x0,(%rax)
  80042019d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019d7:	0f b6 00             	movzbl (%rax),%eax
  80042019da:	84 c0                	test   %al,%al
  80042019dc:	74 2a                	je     8004201a08 <runcmd+0x80>
  80042019de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019e5:	0f b6 00             	movzbl (%rax),%eax
  80042019e8:	0f be c0             	movsbl %al,%eax
  80042019eb:	89 c6                	mov    %eax,%esi
  80042019ed:	48 bf 05 8c 21 04 80 	movabs $0x8004218c05,%rdi
  80042019f4:	00 00 00 
  80042019f7:	48 b8 fd fe 20 04 80 	movabs $0x800420fefd,%rax
  80042019fe:	00 00 00 
  8004201a01:	ff d0                	callq  *%rax
  8004201a03:	48 85 c0             	test   %rax,%rax
  8004201a06:	75 b3                	jne    80042019bb <runcmd+0x33>
  8004201a08:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a0f:	0f b6 00             	movzbl (%rax),%eax
  8004201a12:	84 c0                	test   %al,%al
  8004201a14:	75 21                	jne    8004201a37 <runcmd+0xaf>
  8004201a16:	90                   	nop
  8004201a17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a1a:	48 98                	cltq   
  8004201a1c:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201a23:	ff 00 00 00 00 
  8004201a28:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201a2c:	0f 85 a1 00 00 00    	jne    8004201ad3 <runcmd+0x14b>
  8004201a32:	e9 92 00 00 00       	jmpq   8004201ac9 <runcmd+0x141>
  8004201a37:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004201a3b:	75 2a                	jne    8004201a67 <runcmd+0xdf>
  8004201a3d:	be 10 00 00 00       	mov    $0x10,%esi
  8004201a42:	48 bf 0a 8c 21 04 80 	movabs $0x8004218c0a,%rdi
  8004201a49:	00 00 00 
  8004201a4c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a51:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201a58:	00 00 00 
  8004201a5b:	ff d2                	callq  *%rdx
  8004201a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a62:	e9 30 01 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201a67:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a6a:	8d 50 01             	lea    0x1(%rax),%edx
  8004201a6d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201a70:	48 98                	cltq   
  8004201a72:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201a79:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201a80:	ff 
  8004201a81:	eb 08                	jmp    8004201a8b <runcmd+0x103>
  8004201a83:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201a8a:	01 
  8004201a8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a92:	0f b6 00             	movzbl (%rax),%eax
  8004201a95:	84 c0                	test   %al,%al
  8004201a97:	74 2a                	je     8004201ac3 <runcmd+0x13b>
  8004201a99:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201aa0:	0f b6 00             	movzbl (%rax),%eax
  8004201aa3:	0f be c0             	movsbl %al,%eax
  8004201aa6:	89 c6                	mov    %eax,%esi
  8004201aa8:	48 bf 05 8c 21 04 80 	movabs $0x8004218c05,%rdi
  8004201aaf:	00 00 00 
  8004201ab2:	48 b8 fd fe 20 04 80 	movabs $0x800420fefd,%rax
  8004201ab9:	00 00 00 
  8004201abc:	ff d0                	callq  *%rax
  8004201abe:	48 85 c0             	test   %rax,%rax
  8004201ac1:	74 c0                	je     8004201a83 <runcmd+0xfb>
  8004201ac3:	90                   	nop
  8004201ac4:	e9 07 ff ff ff       	jmpq   80042019d0 <runcmd+0x48>
  8004201ac9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ace:	e9 c4 00 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201ad3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201ada:	e9 82 00 00 00       	jmpq   8004201b61 <runcmd+0x1d9>
  8004201adf:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201ae6:	00 00 00 
  8004201ae9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201aec:	48 63 d0             	movslq %eax,%rdx
  8004201aef:	48 89 d0             	mov    %rdx,%rax
  8004201af2:	48 01 c0             	add    %rax,%rax
  8004201af5:	48 01 d0             	add    %rdx,%rax
  8004201af8:	48 c1 e0 03          	shl    $0x3,%rax
  8004201afc:	48 01 c8             	add    %rcx,%rax
  8004201aff:	48 8b 10             	mov    (%rax),%rdx
  8004201b02:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b09:	48 89 d6             	mov    %rdx,%rsi
  8004201b0c:	48 89 c7             	mov    %rax,%rdi
  8004201b0f:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004201b16:	00 00 00 
  8004201b19:	ff d0                	callq  *%rax
  8004201b1b:	85 c0                	test   %eax,%eax
  8004201b1d:	75 3e                	jne    8004201b5d <runcmd+0x1d5>
  8004201b1f:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b26:	00 00 00 
  8004201b29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b2c:	48 63 d0             	movslq %eax,%rdx
  8004201b2f:	48 89 d0             	mov    %rdx,%rax
  8004201b32:	48 01 c0             	add    %rax,%rax
  8004201b35:	48 01 d0             	add    %rdx,%rax
  8004201b38:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b3c:	48 01 c8             	add    %rcx,%rax
  8004201b3f:	48 83 c0 10          	add    $0x10,%rax
  8004201b43:	48 8b 00             	mov    (%rax),%rax
  8004201b46:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201b4d:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201b54:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201b57:	89 cf                	mov    %ecx,%edi
  8004201b59:	ff d0                	callq  *%rax
  8004201b5b:	eb 3a                	jmp    8004201b97 <runcmd+0x20f>
  8004201b5d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201b61:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b64:	83 f8 03             	cmp    $0x3,%eax
  8004201b67:	0f 86 72 ff ff ff    	jbe    8004201adf <runcmd+0x157>
  8004201b6d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b74:	48 89 c6             	mov    %rax,%rsi
  8004201b77:	48 bf 27 8c 21 04 80 	movabs $0x8004218c27,%rdi
  8004201b7e:	00 00 00 
  8004201b81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b86:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201b8d:	00 00 00 
  8004201b90:	ff d2                	callq  *%rdx
  8004201b92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b97:	c9                   	leaveq 
  8004201b98:	c3                   	retq   

0000008004201b99 <monitor>:
  8004201b99:	55                   	push   %rbp
  8004201b9a:	48 89 e5             	mov    %rsp,%rbp
  8004201b9d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201ba1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201ba5:	48 bf 40 8c 21 04 80 	movabs $0x8004218c40,%rdi
  8004201bac:	00 00 00 
  8004201baf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bb4:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201bbb:	00 00 00 
  8004201bbe:	ff d2                	callq  *%rdx
  8004201bc0:	48 bf 68 8c 21 04 80 	movabs $0x8004218c68,%rdi
  8004201bc7:	00 00 00 
  8004201bca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bcf:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201bd6:	00 00 00 
  8004201bd9:	ff d2                	callq  *%rdx
  8004201bdb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201be0:	74 13                	je     8004201bf5 <monitor+0x5c>
  8004201be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201be6:	48 89 c7             	mov    %rax,%rdi
  8004201be9:	48 b8 16 c2 20 04 80 	movabs $0x800420c216,%rax
  8004201bf0:	00 00 00 
  8004201bf3:	ff d0                	callq  *%rax
  8004201bf5:	48 bf 8d 8c 21 04 80 	movabs $0x8004218c8d,%rdi
  8004201bfc:	00 00 00 
  8004201bff:	48 b8 16 fb 20 04 80 	movabs $0x800420fb16,%rax
  8004201c06:	00 00 00 
  8004201c09:	ff d0                	callq  *%rax
  8004201c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201c14:	74 20                	je     8004201c36 <monitor+0x9d>
  8004201c16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c1e:	48 89 d6             	mov    %rdx,%rsi
  8004201c21:	48 89 c7             	mov    %rax,%rdi
  8004201c24:	48 b8 88 19 20 04 80 	movabs $0x8004201988,%rax
  8004201c2b:	00 00 00 
  8004201c2e:	ff d0                	callq  *%rax
  8004201c30:	85 c0                	test   %eax,%eax
  8004201c32:	79 02                	jns    8004201c36 <monitor+0x9d>
  8004201c34:	eb 02                	jmp    8004201c38 <monitor+0x9f>
  8004201c36:	eb bd                	jmp    8004201bf5 <monitor+0x5c>
  8004201c38:	c9                   	leaveq 
  8004201c39:	c3                   	retq   

0000008004201c3a <page2ppn>:
  8004201c3a:	55                   	push   %rbp
  8004201c3b:	48 89 e5             	mov    %rsp,%rbp
  8004201c3e:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201c4a:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201c51:	00 00 00 
  8004201c54:	48 8b 00             	mov    (%rax),%rax
  8004201c57:	48 29 c2             	sub    %rax,%rdx
  8004201c5a:	48 89 d0             	mov    %rdx,%rax
  8004201c5d:	48 c1 f8 04          	sar    $0x4,%rax
  8004201c61:	c9                   	leaveq 
  8004201c62:	c3                   	retq   

0000008004201c63 <page2pa>:
  8004201c63:	55                   	push   %rbp
  8004201c64:	48 89 e5             	mov    %rsp,%rbp
  8004201c67:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c73:	48 89 c7             	mov    %rax,%rdi
  8004201c76:	48 b8 3a 1c 20 04 80 	movabs $0x8004201c3a,%rax
  8004201c7d:	00 00 00 
  8004201c80:	ff d0                	callq  *%rax
  8004201c82:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201c86:	c9                   	leaveq 
  8004201c87:	c3                   	retq   

0000008004201c88 <pa2page>:
  8004201c88:	55                   	push   %rbp
  8004201c89:	48 89 e5             	mov    %rsp,%rbp
  8004201c8c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201c90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c98:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201c9c:	48 89 c2             	mov    %rax,%rdx
  8004201c9f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201ca6:	00 00 00 
  8004201ca9:	48 8b 00             	mov    (%rax),%rax
  8004201cac:	48 39 c2             	cmp    %rax,%rdx
  8004201caf:	72 2a                	jb     8004201cdb <pa2page+0x53>
  8004201cb1:	48 ba 98 8c 21 04 80 	movabs $0x8004218c98,%rdx
  8004201cb8:	00 00 00 
  8004201cbb:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201cc0:	48 bf b7 8c 21 04 80 	movabs $0x8004218cb7,%rdi
  8004201cc7:	00 00 00 
  8004201cca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ccf:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201cd6:	00 00 00 
  8004201cd9:	ff d1                	callq  *%rcx
  8004201cdb:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201ce2:	00 00 00 
  8004201ce5:	48 8b 00             	mov    (%rax),%rax
  8004201ce8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201cec:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201cf0:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201cf4:	48 01 d0             	add    %rdx,%rax
  8004201cf7:	c9                   	leaveq 
  8004201cf8:	c3                   	retq   

0000008004201cf9 <page2kva>:
  8004201cf9:	55                   	push   %rbp
  8004201cfa:	48 89 e5             	mov    %rsp,%rbp
  8004201cfd:	48 83 ec 20          	sub    $0x20,%rsp
  8004201d01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201d09:	48 89 c7             	mov    %rax,%rdi
  8004201d0c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004201d13:	00 00 00 
  8004201d16:	ff d0                	callq  *%rax
  8004201d18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d20:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201d24:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201d27:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201d2a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201d31:	00 00 00 
  8004201d34:	48 8b 00             	mov    (%rax),%rax
  8004201d37:	48 39 c2             	cmp    %rax,%rdx
  8004201d3a:	72 32                	jb     8004201d6e <page2kva+0x75>
  8004201d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d40:	48 89 c1             	mov    %rax,%rcx
  8004201d43:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004201d4a:	00 00 00 
  8004201d4d:	be 62 00 00 00       	mov    $0x62,%esi
  8004201d52:	48 bf b7 8c 21 04 80 	movabs $0x8004218cb7,%rdi
  8004201d59:	00 00 00 
  8004201d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d61:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004201d68:	00 00 00 
  8004201d6b:	41 ff d0             	callq  *%r8
  8004201d6e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201d75:	00 00 00 
  8004201d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d7c:	48 01 d0             	add    %rdx,%rax
  8004201d7f:	c9                   	leaveq 
  8004201d80:	c3                   	retq   

0000008004201d81 <restrictive_type>:
  8004201d81:	55                   	push   %rbp
  8004201d82:	48 89 e5             	mov    %rsp,%rbp
  8004201d85:	48 83 ec 08          	sub    $0x8,%rsp
  8004201d89:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201d8c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201d8f:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201d93:	74 06                	je     8004201d9b <restrictive_type+0x1a>
  8004201d95:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201d99:	75 07                	jne    8004201da2 <restrictive_type+0x21>
  8004201d9b:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201da0:	eb 3e                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201da2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201da6:	74 06                	je     8004201dae <restrictive_type+0x2d>
  8004201da8:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201dac:	75 07                	jne    8004201db5 <restrictive_type+0x34>
  8004201dae:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201db3:	eb 2b                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201db5:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201db9:	74 06                	je     8004201dc1 <restrictive_type+0x40>
  8004201dbb:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201dbf:	75 07                	jne    8004201dc8 <restrictive_type+0x47>
  8004201dc1:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201dc6:	eb 18                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201dc8:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201dcc:	74 06                	je     8004201dd4 <restrictive_type+0x53>
  8004201dce:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201dd2:	75 07                	jne    8004201ddb <restrictive_type+0x5a>
  8004201dd4:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201dd9:	eb 05                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201ddb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201de0:	c9                   	leaveq 
  8004201de1:	c3                   	retq   

0000008004201de2 <nvram_read>:
  8004201de2:	55                   	push   %rbp
  8004201de3:	48 89 e5             	mov    %rsp,%rbp
  8004201de6:	53                   	push   %rbx
  8004201de7:	48 83 ec 18          	sub    $0x18,%rsp
  8004201deb:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201dee:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201df1:	89 c7                	mov    %eax,%edi
  8004201df3:	48 b8 a3 91 20 04 80 	movabs $0x80042091a3,%rax
  8004201dfa:	00 00 00 
  8004201dfd:	ff d0                	callq  *%rax
  8004201dff:	89 c3                	mov    %eax,%ebx
  8004201e01:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e04:	83 c0 01             	add    $0x1,%eax
  8004201e07:	89 c7                	mov    %eax,%edi
  8004201e09:	48 b8 a3 91 20 04 80 	movabs $0x80042091a3,%rax
  8004201e10:	00 00 00 
  8004201e13:	ff d0                	callq  *%rax
  8004201e15:	c1 e0 08             	shl    $0x8,%eax
  8004201e18:	09 d8                	or     %ebx,%eax
  8004201e1a:	48 83 c4 18          	add    $0x18,%rsp
  8004201e1e:	5b                   	pop    %rbx
  8004201e1f:	5d                   	pop    %rbp
  8004201e20:	c3                   	retq   

0000008004201e21 <multiboot_read>:
  8004201e21:	55                   	push   %rbp
  8004201e22:	48 89 e5             	mov    %rsp,%rbp
  8004201e25:	41 54                	push   %r12
  8004201e27:	53                   	push   %rbx
  8004201e28:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201e2f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201e36:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201e3d:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201e44:	48 89 e0             	mov    %rsp,%rax
  8004201e47:	49 89 c4             	mov    %rax,%r12
  8004201e4a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e51:	8b 40 30             	mov    0x30(%rax),%eax
  8004201e54:	89 c0                	mov    %eax,%eax
  8004201e56:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201e5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e61:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201e64:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201e69:	f7 e2                	mul    %edx
  8004201e6b:	89 d0                	mov    %edx,%eax
  8004201e6d:	c1 e8 04             	shr    $0x4,%eax
  8004201e70:	89 c0                	mov    %eax,%eax
  8004201e72:	48 89 c2             	mov    %rax,%rdx
  8004201e75:	48 83 ea 01          	sub    $0x1,%rdx
  8004201e79:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201e7d:	49 89 c0             	mov    %rax,%r8
  8004201e80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201e86:	48 89 c1             	mov    %rax,%rcx
  8004201e89:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201e8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004201e92:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201e96:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201e9b:	48 83 e8 01          	sub    $0x1,%rax
  8004201e9f:	48 01 d0             	add    %rdx,%rax
  8004201ea2:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201ea7:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201eac:	48 f7 f3             	div    %rbx
  8004201eaf:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201eb3:	48 29 c4             	sub    %rax,%rsp
  8004201eb6:	48 89 e0             	mov    %rsp,%rax
  8004201eb9:	48 83 c0 07          	add    $0x7,%rax
  8004201ebd:	48 c1 e8 03          	shr    $0x3,%rax
  8004201ec1:	48 c1 e0 03          	shl    $0x3,%rax
  8004201ec5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201ec9:	48 bf eb 8c 21 04 80 	movabs $0x8004218ceb,%rdi
  8004201ed0:	00 00 00 
  8004201ed3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ed8:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004201edf:	00 00 00 
  8004201ee2:	ff d2                	callq  *%rdx
  8004201ee4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201eeb:	e9 6c 01 00 00       	jmpq   800420205c <multiboot_read+0x23b>
  8004201ef0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ef3:	48 63 d0             	movslq %eax,%rdx
  8004201ef6:	48 89 d0             	mov    %rdx,%rax
  8004201ef9:	48 01 c0             	add    %rax,%rax
  8004201efc:	48 01 d0             	add    %rdx,%rax
  8004201eff:	48 c1 e0 03          	shl    $0x3,%rax
  8004201f03:	48 89 c2             	mov    %rax,%rdx
  8004201f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201f0a:	48 01 d0             	add    %rdx,%rax
  8004201f0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201f11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f15:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f18:	89 c0                	mov    %eax,%eax
  8004201f1a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f1e:	48 89 c2             	mov    %rax,%rdx
  8004201f21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f25:	8b 40 04             	mov    0x4(%rax),%eax
  8004201f28:	89 c0                	mov    %eax,%eax
  8004201f2a:	48 01 d0             	add    %rdx,%rax
  8004201f2d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201f31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f35:	8b 40 10             	mov    0x10(%rax),%eax
  8004201f38:	89 c0                	mov    %eax,%eax
  8004201f3a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f3e:	48 89 c2             	mov    %rax,%rdx
  8004201f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f45:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201f48:	89 c0                	mov    %eax,%eax
  8004201f4a:	48 01 d0             	add    %rdx,%rax
  8004201f4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201f51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f55:	8b 70 14             	mov    0x14(%rax),%esi
  8004201f58:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f5c:	8b 00                	mov    (%rax),%eax
  8004201f5e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201f62:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201f66:	41 89 f0             	mov    %esi,%r8d
  8004201f69:	89 c6                	mov    %eax,%esi
  8004201f6b:	48 bf 00 8d 21 04 80 	movabs $0x8004218d00,%rdi
  8004201f72:	00 00 00 
  8004201f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f7a:	49 b9 1f 95 20 04 80 	movabs $0x800420951f,%r9
  8004201f81:	00 00 00 
  8004201f84:	41 ff d1             	callq  *%r9
  8004201f87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f8b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f8e:	83 f8 05             	cmp    $0x5,%eax
  8004201f91:	77 0b                	ja     8004201f9e <multiboot_read+0x17d>
  8004201f93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f97:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f9a:	85 c0                	test   %eax,%eax
  8004201f9c:	75 0b                	jne    8004201fa9 <multiboot_read+0x188>
  8004201f9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fa2:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201fa9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201fb0:	e9 85 00 00 00       	jmpq   800420203a <multiboot_read+0x219>
  8004201fb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201fb9:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201fbc:	48 63 d2             	movslq %edx,%rdx
  8004201fbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201fc3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201fc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fcb:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fce:	89 c0                	mov    %eax,%eax
  8004201fd0:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd4:	48 89 c2             	mov    %rax,%rdx
  8004201fd7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fdb:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fde:	89 c0                	mov    %eax,%eax
  8004201fe0:	48 01 d0             	add    %rdx,%rax
  8004201fe3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201fe7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201feb:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201fef:	76 45                	jbe    8004202036 <multiboot_read+0x215>
  8004201ff1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ff4:	83 c0 01             	add    $0x1,%eax
  8004201ff7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ffa:	eb 30                	jmp    800420202c <multiboot_read+0x20b>
  8004201ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202000:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202003:	48 63 d2             	movslq %edx,%rdx
  8004202006:	48 c1 e2 03          	shl    $0x3,%rdx
  800420200a:	48 01 c2             	add    %rax,%rdx
  800420200d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202011:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004202014:	48 63 c9             	movslq %ecx,%rcx
  8004202017:	48 c1 e1 03          	shl    $0x3,%rcx
  800420201b:	48 83 e9 08          	sub    $0x8,%rcx
  800420201f:	48 01 c8             	add    %rcx,%rax
  8004202022:	48 8b 00             	mov    (%rax),%rax
  8004202025:	48 89 02             	mov    %rax,(%rdx)
  8004202028:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  800420202c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420202f:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004202032:	75 c8                	jne    8004201ffc <multiboot_read+0x1db>
  8004202034:	eb 10                	jmp    8004202046 <multiboot_read+0x225>
  8004202036:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420203a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420203d:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004202040:	0f 8c 6f ff ff ff    	jl     8004201fb5 <multiboot_read+0x194>
  8004202046:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420204a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420204d:	48 63 d2             	movslq %edx,%rdx
  8004202050:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202054:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004202058:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420205c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420205f:	48 63 c8             	movslq %eax,%rcx
  8004202062:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202069:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420206c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202071:	f7 e2                	mul    %edx
  8004202073:	89 d0                	mov    %edx,%eax
  8004202075:	c1 e8 04             	shr    $0x4,%eax
  8004202078:	89 c0                	mov    %eax,%eax
  800420207a:	48 39 c1             	cmp    %rax,%rcx
  800420207d:	0f 82 6d fe ff ff    	jb     8004201ef0 <multiboot_read+0xcf>
  8004202083:	48 bf 37 8d 21 04 80 	movabs $0x8004218d37,%rdi
  800420208a:	00 00 00 
  800420208d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202092:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004202099:	00 00 00 
  800420209c:	ff d2                	callq  *%rdx
  800420209e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042020a5:	e9 93 01 00 00       	jmpq   800420223d <multiboot_read+0x41c>
  80042020aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020ad:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042020b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020b4:	48 63 d2             	movslq %edx,%rdx
  80042020b7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042020bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042020c6:	48 63 d2             	movslq %edx,%rdx
  80042020c9:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020cd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042020d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020d5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020d8:	89 c0                	mov    %eax,%eax
  80042020da:	48 c1 e0 20          	shl    $0x20,%rax
  80042020de:	48 89 c2             	mov    %rax,%rdx
  80042020e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e5:	8b 40 04             	mov    0x4(%rax),%eax
  80042020e8:	89 c0                	mov    %eax,%eax
  80042020ea:	48 01 d0             	add    %rdx,%rax
  80042020ed:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042020f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020f5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020f8:	89 c0                	mov    %eax,%eax
  80042020fa:	48 c1 e0 20          	shl    $0x20,%rax
  80042020fe:	48 89 c2             	mov    %rax,%rdx
  8004202101:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202105:	8b 40 04             	mov    0x4(%rax),%eax
  8004202108:	89 c0                	mov    %eax,%eax
  800420210a:	48 01 d0             	add    %rdx,%rax
  800420210d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004202111:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202115:	8b 40 10             	mov    0x10(%rax),%eax
  8004202118:	89 c0                	mov    %eax,%eax
  800420211a:	48 c1 e0 20          	shl    $0x20,%rax
  800420211e:	48 89 c2             	mov    %rax,%rdx
  8004202121:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202125:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202128:	89 c0                	mov    %eax,%eax
  800420212a:	48 01 d0             	add    %rdx,%rax
  800420212d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004202134:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202138:	8b 40 10             	mov    0x10(%rax),%eax
  800420213b:	89 c0                	mov    %eax,%eax
  800420213d:	48 c1 e0 20          	shl    $0x20,%rax
  8004202141:	48 89 c2             	mov    %rax,%rdx
  8004202144:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202148:	8b 40 0c             	mov    0xc(%rax),%eax
  800420214b:	89 c0                	mov    %eax,%eax
  800420214d:	48 01 d0             	add    %rdx,%rax
  8004202150:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004202157:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420215e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202162:	48 01 d0             	add    %rdx,%rax
  8004202165:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202169:	75 7c                	jne    80042021e7 <multiboot_read+0x3c6>
  800420216b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420216f:	8b 50 14             	mov    0x14(%rax),%edx
  8004202172:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202176:	8b 40 14             	mov    0x14(%rax),%eax
  8004202179:	39 c2                	cmp    %eax,%edx
  800420217b:	75 6a                	jne    80042021e7 <multiboot_read+0x3c6>
  800420217d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202184:	89 c2                	mov    %eax,%edx
  8004202186:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420218d:	01 c2                	add    %eax,%edx
  800420218f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202193:	89 50 0c             	mov    %edx,0xc(%rax)
  8004202196:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420219d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042021a4:	48 01 d0             	add    %rdx,%rax
  80042021a7:	48 c1 e8 20          	shr    $0x20,%rax
  80042021ab:	89 c2                	mov    %eax,%edx
  80042021ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021b1:	89 50 10             	mov    %edx,0x10(%rax)
  80042021b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021b8:	8b 50 04             	mov    0x4(%rax),%edx
  80042021bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021bf:	89 50 04             	mov    %edx,0x4(%rax)
  80042021c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021c6:	8b 50 08             	mov    0x8(%rax),%edx
  80042021c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021cd:	89 50 08             	mov    %edx,0x8(%rax)
  80042021d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042021d3:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042021d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042021da:	48 63 d2             	movslq %edx,%rdx
  80042021dd:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042021e4:	00 
  80042021e5:	eb 52                	jmp    8004202239 <multiboot_read+0x418>
  80042021e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042021ee:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042021f2:	48 01 d0             	add    %rdx,%rax
  80042021f5:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042021f9:	76 3e                	jbe    8004202239 <multiboot_read+0x418>
  80042021fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021ff:	8b 50 14             	mov    0x14(%rax),%edx
  8004202202:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202206:	8b 40 14             	mov    0x14(%rax),%eax
  8004202209:	89 d6                	mov    %edx,%esi
  800420220b:	89 c7                	mov    %eax,%edi
  800420220d:	48 b8 81 1d 20 04 80 	movabs $0x8004201d81,%rax
  8004202214:	00 00 00 
  8004202217:	ff d0                	callq  *%rax
  8004202219:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  800420221f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202223:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202229:	89 50 14             	mov    %edx,0x14(%rax)
  800420222c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202230:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202236:	89 50 14             	mov    %edx,0x14(%rax)
  8004202239:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420223d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202240:	48 63 c8             	movslq %eax,%rcx
  8004202243:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420224a:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420224d:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202252:	f7 e2                	mul    %edx
  8004202254:	89 d0                	mov    %edx,%eax
  8004202256:	c1 e8 04             	shr    $0x4,%eax
  8004202259:	89 c0                	mov    %eax,%eax
  800420225b:	48 39 c1             	cmp    %rax,%rcx
  800420225e:	0f 82 46 fe ff ff    	jb     80042020aa <multiboot_read+0x289>
  8004202264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420226b:	e9 dc 00 00 00       	jmpq   800420234c <multiboot_read+0x52b>
  8004202270:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202274:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004202277:	48 63 d2             	movslq %edx,%rdx
  800420227a:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420227e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202285:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800420228c:	00 
  800420228d:	0f 84 b5 00 00 00    	je     8004202348 <multiboot_read+0x527>
  8004202293:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420229a:	8b 40 14             	mov    0x14(%rax),%eax
  800420229d:	83 f8 01             	cmp    $0x1,%eax
  80042022a0:	74 13                	je     80042022b5 <multiboot_read+0x494>
  80042022a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022a9:	8b 40 14             	mov    0x14(%rax),%eax
  80042022ac:	83 f8 03             	cmp    $0x3,%eax
  80042022af:	0f 85 93 00 00 00    	jne    8004202348 <multiboot_read+0x527>
  80042022b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022bc:	8b 40 04             	mov    0x4(%rax),%eax
  80042022bf:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042022c4:	77 49                	ja     800420230f <multiboot_read+0x4ee>
  80042022c6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022cd:	8b 40 08             	mov    0x8(%rax),%eax
  80042022d0:	85 c0                	test   %eax,%eax
  80042022d2:	75 3b                	jne    800420230f <multiboot_read+0x4ee>
  80042022d4:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042022db:	48 8b 10             	mov    (%rax),%rdx
  80042022de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022e5:	8b 40 10             	mov    0x10(%rax),%eax
  80042022e8:	89 c0                	mov    %eax,%eax
  80042022ea:	48 c1 e0 20          	shl    $0x20,%rax
  80042022ee:	48 89 c1             	mov    %rax,%rcx
  80042022f1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022f8:	8b 40 0c             	mov    0xc(%rax),%eax
  80042022fb:	89 c0                	mov    %eax,%eax
  80042022fd:	48 01 c8             	add    %rcx,%rax
  8004202300:	48 01 c2             	add    %rax,%rdx
  8004202303:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420230a:	48 89 10             	mov    %rdx,(%rax)
  800420230d:	eb 39                	jmp    8004202348 <multiboot_read+0x527>
  800420230f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202316:	48 8b 10             	mov    (%rax),%rdx
  8004202319:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202320:	8b 40 10             	mov    0x10(%rax),%eax
  8004202323:	89 c0                	mov    %eax,%eax
  8004202325:	48 c1 e0 20          	shl    $0x20,%rax
  8004202329:	48 89 c1             	mov    %rax,%rcx
  800420232c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202333:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202336:	89 c0                	mov    %eax,%eax
  8004202338:	48 01 c8             	add    %rcx,%rax
  800420233b:	48 01 c2             	add    %rax,%rdx
  800420233e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202345:	48 89 10             	mov    %rdx,(%rax)
  8004202348:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420234c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420234f:	48 63 c8             	movslq %eax,%rcx
  8004202352:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202359:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420235c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202361:	f7 e2                	mul    %edx
  8004202363:	89 d0                	mov    %edx,%eax
  8004202365:	c1 e8 04             	shr    $0x4,%eax
  8004202368:	89 c0                	mov    %eax,%eax
  800420236a:	48 39 c1             	cmp    %rax,%rcx
  800420236d:	0f 82 fd fe ff ff    	jb     8004202270 <multiboot_read+0x44f>
  8004202373:	4c 89 e4             	mov    %r12,%rsp
  8004202376:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420237a:	5b                   	pop    %rbx
  800420237b:	41 5c                	pop    %r12
  800420237d:	5d                   	pop    %rbp
  800420237e:	c3                   	retq   

000000800420237f <i386_detect_memory>:
  800420237f:	55                   	push   %rbp
  8004202380:	48 89 e5             	mov    %rsp,%rbp
  8004202383:	48 83 ec 50          	sub    $0x50,%rsp
  8004202387:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420238e:	00 
  800420238f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004202396:	00 
  8004202397:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  800420239e:	00 00 00 
  80042023a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042023a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042023a9:	48 8b 00             	mov    (%rax),%rax
  80042023ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042023b0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042023b5:	74 2d                	je     80042023e4 <i386_detect_memory+0x65>
  80042023b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023bb:	8b 00                	mov    (%rax),%eax
  80042023bd:	83 e0 40             	and    $0x40,%eax
  80042023c0:	85 c0                	test   %eax,%eax
  80042023c2:	74 20                	je     80042023e4 <i386_detect_memory+0x65>
  80042023c4:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  80042023c8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  80042023cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023d0:	48 89 ce             	mov    %rcx,%rsi
  80042023d3:	48 89 c7             	mov    %rax,%rdi
  80042023d6:	48 b8 21 1e 20 04 80 	movabs $0x8004201e21,%rax
  80042023dd:	00 00 00 
  80042023e0:	ff d0                	callq  *%rax
  80042023e2:	eb 34                	jmp    8004202418 <i386_detect_memory+0x99>
  80042023e4:	bf 15 00 00 00       	mov    $0x15,%edi
  80042023e9:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  80042023f0:	00 00 00 
  80042023f3:	ff d0                	callq  *%rax
  80042023f5:	c1 e0 0a             	shl    $0xa,%eax
  80042023f8:	48 98                	cltq   
  80042023fa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042023fe:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202403:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420240a:	00 00 00 
  800420240d:	ff d0                	callq  *%rax
  800420240f:	c1 e0 0a             	shl    $0xa,%eax
  8004202412:	48 98                	cltq   
  8004202414:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202418:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420241c:	48 85 c0             	test   %rax,%rax
  800420241f:	75 35                	jne    8004202456 <i386_detect_memory+0xd7>
  8004202421:	48 b9 39 8d 21 04 80 	movabs $0x8004218d39,%rcx
  8004202428:	00 00 00 
  800420242b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004202432:	00 00 00 
  8004202435:	be 8b 00 00 00       	mov    $0x8b,%esi
  800420243a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202441:	00 00 00 
  8004202444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202449:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202450:	00 00 00 
  8004202453:	41 ff d0             	callq  *%r8
  8004202456:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420245a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420245e:	48 89 c2             	mov    %rax,%rdx
  8004202461:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202468:	00 00 00 
  800420246b:	48 89 10             	mov    %rdx,(%rax)
  800420246e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202472:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202476:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420247a:	bf 17 00 00 00       	mov    $0x17,%edi
  800420247f:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  8004202486:	00 00 00 
  8004202489:	ff d0                	callq  *%rax
  800420248b:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202490:	75 2c                	jne    80042024be <i386_detect_memory+0x13f>
  8004202492:	bf 34 00 00 00       	mov    $0x34,%edi
  8004202497:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420249e:	00 00 00 
  80042024a1:	ff d0                	callq  *%rax
  80042024a3:	c1 e0 10             	shl    $0x10,%eax
  80042024a6:	48 98                	cltq   
  80042024a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042024ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042024b0:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  80042024b6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042024be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042024c3:	74 1a                	je     80042024df <i386_detect_memory+0x160>
  80042024c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042024c9:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  80042024d0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024d7:	00 00 00 
  80042024da:	48 89 10             	mov    %rdx,(%rax)
  80042024dd:	eb 1a                	jmp    80042024f9 <i386_detect_memory+0x17a>
  80042024df:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  80042024e6:	00 00 00 
  80042024e9:	48 8b 10             	mov    (%rax),%rdx
  80042024ec:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024f3:	00 00 00 
  80042024f6:	48 89 10             	mov    %rdx,(%rax)
  80042024f9:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202500:	00 00 00 
  8004202503:	48 8b 30             	mov    (%rax),%rsi
  8004202506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420250a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420250e:	48 c1 e8 0a          	shr    $0xa,%rax
  8004202512:	48 89 c1             	mov    %rax,%rcx
  8004202515:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  800420251c:	00 00 00 
  800420251f:	48 8b 00             	mov    (%rax),%rax
  8004202522:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202526:	48 c1 e8 0a          	shr    $0xa,%rax
  800420252a:	48 89 c2             	mov    %rax,%rdx
  800420252d:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202534:	00 00 00 
  8004202537:	48 8b 00             	mov    (%rax),%rax
  800420253a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420253e:	48 c1 e8 14          	shr    $0x14,%rax
  8004202542:	49 89 f0             	mov    %rsi,%r8
  8004202545:	48 89 c6             	mov    %rax,%rsi
  8004202548:	48 bf 68 8d 21 04 80 	movabs $0x8004218d68,%rdi
  800420254f:	00 00 00 
  8004202552:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202557:	49 b9 1f 95 20 04 80 	movabs $0x800420951f,%r9
  800420255e:	00 00 00 
  8004202561:	41 ff d1             	callq  *%r9
  8004202564:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420256b:	00 
  800420256c:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202573:	07 
  8004202574:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202578:	48 c1 e0 0c          	shl    $0xc,%rax
  800420257c:	48 c1 e8 14          	shr    $0x14,%rax
  8004202580:	48 89 c1             	mov    %rax,%rcx
  8004202583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202587:	48 c1 e0 0c          	shl    $0xc,%rax
  800420258b:	48 c1 e8 14          	shr    $0x14,%rax
  800420258f:	48 89 c6             	mov    %rax,%rsi
  8004202592:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202596:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420259a:	49 89 c8             	mov    %rcx,%r8
  800420259d:	48 89 d1             	mov    %rdx,%rcx
  80042025a0:	48 89 f2             	mov    %rsi,%rdx
  80042025a3:	48 89 c6             	mov    %rax,%rsi
  80042025a6:	48 bf b8 8d 21 04 80 	movabs $0x8004218db8,%rdi
  80042025ad:	00 00 00 
  80042025b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b5:	49 b9 1f 95 20 04 80 	movabs $0x800420951f,%r9
  80042025bc:	00 00 00 
  80042025bf:	41 ff d1             	callq  *%r9
  80042025c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025c6:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042025ca:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  80042025cf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042025d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025da:	00 00 00 
  80042025dd:	48 8b 00             	mov    (%rax),%rax
  80042025e0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042025e4:	76 3a                	jbe    8004202620 <i386_detect_memory+0x2a1>
  80042025e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042025ea:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042025f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025f8:	00 00 00 
  80042025fb:	48 89 10             	mov    %rdx,(%rax)
  80042025fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202602:	48 89 c6             	mov    %rax,%rsi
  8004202605:	48 bf 20 8e 21 04 80 	movabs $0x8004218e20,%rdi
  800420260c:	00 00 00 
  800420260f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202614:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420261b:	00 00 00 
  800420261e:	ff d2                	callq  *%rdx
  8004202620:	c9                   	leaveq 
  8004202621:	c3                   	retq   

0000008004202622 <boot_alloc>:
  8004202622:	55                   	push   %rbp
  8004202623:	48 89 e5             	mov    %rsp,%rbp
  8004202626:	48 83 ec 40          	sub    $0x40,%rsp
  800420262a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420262d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202634:	00 00 00 
  8004202637:	48 8b 00             	mov    (%rax),%rax
  800420263a:	48 85 c0             	test   %rax,%rax
  800420263d:	75 4b                	jne    800420268a <boot_alloc+0x68>
  800420263f:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004202646:	00 
  8004202647:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  800420264e:	00 00 00 
  8004202651:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004202655:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202659:	48 01 d0             	add    %rdx,%rax
  800420265c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202664:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202669:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420266d:	48 89 d0             	mov    %rdx,%rax
  8004202670:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004202674:	48 29 c2             	sub    %rax,%rdx
  8004202677:	48 89 d0             	mov    %rdx,%rax
  800420267a:	48 89 c2             	mov    %rax,%rdx
  800420267d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202684:	00 00 00 
  8004202687:	48 89 10             	mov    %rdx,(%rax)
  800420268a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420268d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202694:	00 00 00 
  8004202697:	48 8b 00             	mov    (%rax),%rax
  800420269a:	48 01 c2             	add    %rax,%rdx
  800420269d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026a4:	00 00 00 
  80042026a7:	48 8b 00             	mov    (%rax),%rax
  80042026aa:	48 39 c2             	cmp    %rax,%rdx
  80042026ad:	72 2f                	jb     80042026de <boot_alloc+0xbc>
  80042026af:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026b6:	00 00 00 
  80042026b9:	48 8b 10             	mov    (%rax),%rdx
  80042026bc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042026bf:	48 01 c2             	add    %rax,%rdx
  80042026c2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042026c9:	00 00 00 
  80042026cc:	48 8b 00             	mov    (%rax),%rax
  80042026cf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  80042026d5:	48 c1 e0 0c          	shl    $0xc,%rax
  80042026d9:	48 39 c2             	cmp    %rax,%rdx
  80042026dc:	76 2a                	jbe    8004202708 <boot_alloc+0xe6>
  80042026de:	48 ba 50 8e 21 04 80 	movabs $0x8004218e50,%rdx
  80042026e5:	00 00 00 
  80042026e8:	be f3 00 00 00       	mov    $0xf3,%esi
  80042026ed:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042026f4:	00 00 00 
  80042026f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026fc:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004202703:	00 00 00 
  8004202706:	ff d1                	callq  *%rcx
  8004202708:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420270f:	00 00 00 
  8004202712:	48 8b 00             	mov    (%rax),%rax
  8004202715:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202719:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004202720:	00 
  8004202721:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202728:	00 00 00 
  800420272b:	48 8b 10             	mov    (%rax),%rdx
  800420272e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202731:	48 01 d0             	add    %rdx,%rax
  8004202734:	48 89 c2             	mov    %rax,%rdx
  8004202737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420273b:	48 01 d0             	add    %rdx,%rax
  800420273e:	48 83 e8 01          	sub    $0x1,%rax
  8004202742:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420274a:	ba 00 00 00 00       	mov    $0x0,%edx
  800420274f:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004202753:	48 89 d0             	mov    %rdx,%rax
  8004202756:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420275a:	48 29 c2             	sub    %rax,%rdx
  800420275d:	48 89 d0             	mov    %rdx,%rax
  8004202760:	48 89 c2             	mov    %rax,%rdx
  8004202763:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420276a:	00 00 00 
  800420276d:	48 89 10             	mov    %rdx,(%rax)
  8004202770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202774:	c9                   	leaveq 
  8004202775:	c3                   	retq   

0000008004202776 <x64_vm_init>:
  8004202776:	55                   	push   %rbp
  8004202777:	48 89 e5             	mov    %rsp,%rbp
  800420277a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420277e:	48 b8 7f 23 20 04 80 	movabs $0x800420237f,%rax
  8004202785:	00 00 00 
  8004202788:	ff d0                	callq  *%rax
  800420278a:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420278f:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202796:	00 00 00 
  8004202799:	ff d0                	callq  *%rax
  800420279b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420279f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027a3:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042027a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042027ad:	48 89 c7             	mov    %rax,%rdi
  80042027b0:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042027b7:	00 00 00 
  80042027ba:	ff d0                	callq  *%rax
  80042027bc:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042027c3:	00 00 00 
  80042027c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042027ca:	48 89 10             	mov    %rdx,(%rax)
  80042027cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042027d5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027dc:	00 00 00 
  80042027df:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042027e3:	77 32                	ja     8004202817 <x64_vm_init+0xa1>
  80042027e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027e9:	48 89 c1             	mov    %rax,%rcx
  80042027ec:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  80042027f3:	00 00 00 
  80042027f6:	be 18 01 00 00       	mov    $0x118,%esi
  80042027fb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202802:	00 00 00 
  8004202805:	b8 00 00 00 00       	mov    $0x0,%eax
  800420280a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202811:	00 00 00 
  8004202814:	41 ff d0             	callq  *%r8
  8004202817:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420281e:	ff ff ff 
  8004202821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202825:	48 01 c2             	add    %rax,%rdx
  8004202828:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420282f:	00 00 00 
  8004202832:	48 89 10             	mov    %rdx,(%rax)
  8004202835:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420283c:	00 00 00 
  800420283f:	48 8b 00             	mov    (%rax),%rax
  8004202842:	48 c1 e0 04          	shl    $0x4,%rax
  8004202846:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420284a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420284e:	89 c7                	mov    %eax,%edi
  8004202850:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202857:	00 00 00 
  800420285a:	ff d0                	callq  *%rax
  800420285c:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  8004202863:	00 00 00 
  8004202866:	48 89 02             	mov    %rax,(%rdx)
  8004202869:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202870:	00 00 00 
  8004202873:	48 8b 00             	mov    (%rax),%rax
  8004202876:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420287a:	be 00 00 00 00       	mov    $0x0,%esi
  800420287f:	48 89 c7             	mov    %rax,%rdi
  8004202882:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  8004202889:	00 00 00 
  800420288c:	ff d0                	callq  *%rax
  800420288e:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  8004202893:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  800420289a:	00 00 00 
  800420289d:	ff d0                	callq  *%rax
  800420289f:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  80042028a6:	00 00 00 
  80042028a9:	48 89 02             	mov    %rax,(%rdx)
  80042028ac:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042028b3:	00 00 00 
  80042028b6:	48 8b 00             	mov    (%rax),%rax
  80042028b9:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  80042028be:	be 00 00 00 00       	mov    $0x0,%esi
  80042028c3:	48 89 c7             	mov    %rax,%rdi
  80042028c6:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042028cd:	00 00 00 
  80042028d0:	ff d0                	callq  *%rax
  80042028d2:	48 b8 30 2d 20 04 80 	movabs $0x8004202d30,%rax
  80042028d9:	00 00 00 
  80042028dc:	ff d0                	callq  *%rax
  80042028de:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042028e5:	00 00 00 
  80042028e8:	48 8b 00             	mov    (%rax),%rax
  80042028eb:	48 c1 e0 04          	shl    $0x4,%rax
  80042028ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042028f3:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042028fa:	00 00 00 
  80042028fd:	48 8b 00             	mov    (%rax),%rax
  8004202900:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202904:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420290b:	00 00 00 
  800420290e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004202912:	77 32                	ja     8004202946 <x64_vm_init+0x1d0>
  8004202914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202918:	48 89 c1             	mov    %rax,%rcx
  800420291b:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004202922:	00 00 00 
  8004202925:	be 43 01 00 00       	mov    $0x143,%esi
  800420292a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202931:	00 00 00 
  8004202934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202939:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202940:	00 00 00 
  8004202943:	41 ff d0             	callq  *%r8
  8004202946:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420294d:	ff ff ff 
  8004202950:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202954:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202958:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420295f:	00 00 00 
  8004202962:	48 8b 00             	mov    (%rax),%rax
  8004202965:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202969:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420296f:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202976:	00 00 00 
  8004202979:	48 89 c7             	mov    %rax,%rdi
  800420297c:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202983:	00 00 00 
  8004202986:	ff d0                	callq  *%rax
  8004202988:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420298f:	00 
  8004202990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202994:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420299a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420299e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029a2:	ba 00 00 00 00       	mov    $0x0,%edx
  80042029a7:	48 f7 75 d8          	divq   -0x28(%rbp)
  80042029ab:	48 89 d0             	mov    %rdx,%rax
  80042029ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042029b2:	48 29 c2             	sub    %rax,%rdx
  80042029b5:	48 89 d0             	mov    %rdx,%rax
  80042029b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029bc:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042029c3:	00 00 00 
  80042029c6:	48 8b 00             	mov    (%rax),%rax
  80042029c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042029cd:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042029d4:	00 00 00 
  80042029d7:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042029db:	77 32                	ja     8004202a0f <x64_vm_init+0x299>
  80042029dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042029e1:	48 89 c1             	mov    %rax,%rcx
  80042029e4:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  80042029eb:	00 00 00 
  80042029ee:	be 51 01 00 00       	mov    $0x151,%esi
  80042029f3:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042029fa:	00 00 00 
  80042029fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a02:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a09:	00 00 00 
  8004202a0c:	41 ff d0             	callq  *%r8
  8004202a0f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202a16:	ff ff ff 
  8004202a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a1d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202a21:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202a32:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  8004202a38:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202a3f:	00 00 00 
  8004202a42:	48 89 c7             	mov    %rax,%rdi
  8004202a45:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202a4c:	00 00 00 
  8004202a4f:	ff d0                	callq  *%rax
  8004202a51:	48 b8 00 c0 21 04 80 	movabs $0x800421c000,%rax
  8004202a58:	00 00 00 
  8004202a5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202a5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202a66:	00 00 00 
  8004202a69:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202a6d:	77 32                	ja     8004202aa1 <x64_vm_init+0x32b>
  8004202a6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a73:	48 89 c1             	mov    %rax,%rcx
  8004202a76:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004202a7d:	00 00 00 
  8004202a80:	be 62 01 00 00       	mov    $0x162,%esi
  8004202a85:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202a8c:	00 00 00 
  8004202a8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a94:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a9b:	00 00 00 
  8004202a9e:	41 ff d0             	callq  *%r8
  8004202aa1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202aa8:	ff ff ff 
  8004202aab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202aaf:	48 01 c2             	add    %rax,%rdx
  8004202ab2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202ab9:	00 00 00 
  8004202abc:	48 8b 00             	mov    (%rax),%rax
  8004202abf:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202ac5:	48 89 d1             	mov    %rdx,%rcx
  8004202ac8:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202acd:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202ad4:	00 00 00 
  8004202ad7:	48 89 c7             	mov    %rax,%rdi
  8004202ada:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202ae1:	00 00 00 
  8004202ae4:	ff d0                	callq  *%rax
  8004202ae6:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202af7:	48 89 c2             	mov    %rax,%rdx
  8004202afa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202b01:	00 00 00 
  8004202b04:	48 8b 00             	mov    (%rax),%rax
  8004202b07:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202b0d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004202b12:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  8004202b19:	00 00 00 
  8004202b1c:	48 89 c7             	mov    %rax,%rdi
  8004202b1f:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202b26:	00 00 00 
  8004202b29:	ff d0                	callq  *%rax
  8004202b2b:	48 b8 45 2c 20 04 80 	movabs $0x8004202c45,%rax
  8004202b32:	00 00 00 
  8004202b35:	ff d0                	callq  *%rax
  8004202b37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b3b:	48 83 c0 08          	add    $0x8,%rax
  8004202b3f:	48 8b 00             	mov    (%rax),%rax
  8004202b42:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b48:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202b4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b54:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202b57:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202b5a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202b61:	00 00 00 
  8004202b64:	48 8b 00             	mov    (%rax),%rax
  8004202b67:	48 39 c2             	cmp    %rax,%rdx
  8004202b6a:	72 32                	jb     8004202b9e <x64_vm_init+0x428>
  8004202b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b70:	48 89 c1             	mov    %rax,%rcx
  8004202b73:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004202b7a:	00 00 00 
  8004202b7d:	be 82 01 00 00       	mov    $0x182,%esi
  8004202b82:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202b89:	00 00 00 
  8004202b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b91:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202b98:	00 00 00 
  8004202b9b:	41 ff d0             	callq  *%r8
  8004202b9e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ba5:	00 00 00 
  8004202ba8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202bac:	48 01 d0             	add    %rdx,%rax
  8004202baf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202bb3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202bb7:	48 8b 00             	mov    (%rax),%rax
  8004202bba:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202bc0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bc8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bcc:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202bcf:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202bd2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202bd9:	00 00 00 
  8004202bdc:	48 8b 00             	mov    (%rax),%rax
  8004202bdf:	48 39 c2             	cmp    %rax,%rdx
  8004202be2:	72 32                	jb     8004202c16 <x64_vm_init+0x4a0>
  8004202be4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202be8:	48 89 c1             	mov    %rax,%rcx
  8004202beb:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004202bf2:	00 00 00 
  8004202bf5:	be 83 01 00 00       	mov    $0x183,%esi
  8004202bfa:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202c01:	00 00 00 
  8004202c04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202c10:	00 00 00 
  8004202c13:	41 ff d0             	callq  *%r8
  8004202c16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c1d:	00 00 00 
  8004202c20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202c24:	48 01 d0             	add    %rdx,%rax
  8004202c27:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202c2b:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202c3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202c40:	0f 22 d8             	mov    %rax,%cr3
  8004202c43:	c9                   	leaveq 
  8004202c44:	c3                   	retq   

0000008004202c45 <mem_init_mp>:
  8004202c45:	55                   	push   %rbp
  8004202c46:	48 89 e5             	mov    %rsp,%rbp
  8004202c49:	48 83 ec 20          	sub    $0x20,%rsp
  8004202c4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202c54:	e9 cb 00 00 00       	jmpq   8004202d24 <mem_init_mp+0xdf>
  8004202c59:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202c5c:	89 d0                	mov    %edx,%eax
  8004202c5e:	01 c0                	add    %eax,%eax
  8004202c60:	01 d0                	add    %edx,%eax
  8004202c62:	c1 e0 0f             	shl    $0xf,%eax
  8004202c65:	48 98                	cltq   
  8004202c67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c6e:	00 00 00 
  8004202c71:	48 29 c2             	sub    %rax,%rdx
  8004202c74:	48 89 d0             	mov    %rdx,%rax
  8004202c77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c7e:	48 98                	cltq   
  8004202c80:	48 c1 e0 10          	shl    $0x10,%rax
  8004202c84:	48 89 c2             	mov    %rax,%rdx
  8004202c87:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  8004202c8e:	00 00 00 
  8004202c91:	48 01 d0             	add    %rdx,%rax
  8004202c94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202c98:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c9f:	00 00 00 
  8004202ca2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202ca6:	77 32                	ja     8004202cda <mem_init_mp+0x95>
  8004202ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cac:	48 89 c1             	mov    %rax,%rcx
  8004202caf:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004202cb6:	00 00 00 
  8004202cb9:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202cbe:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202cc5:	00 00 00 
  8004202cc8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ccd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202cd4:	00 00 00 
  8004202cd7:	41 ff d0             	callq  *%r8
  8004202cda:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ce1:	ff ff ff 
  8004202ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ce8:	48 01 c2             	add    %rax,%rdx
  8004202ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202cef:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202cf6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202cfd:	00 00 00 
  8004202d00:	48 8b 00             	mov    (%rax),%rax
  8004202d03:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202d09:	48 89 d1             	mov    %rdx,%rcx
  8004202d0c:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202d11:	48 89 c7             	mov    %rax,%rdi
  8004202d14:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202d1b:	00 00 00 
  8004202d1e:	ff d0                	callq  *%rax
  8004202d20:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202d24:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202d28:	0f 8e 2b ff ff ff    	jle    8004202c59 <mem_init_mp+0x14>
  8004202d2e:	c9                   	leaveq 
  8004202d2f:	c3                   	retq   

0000008004202d30 <page_init>:
  8004202d30:	55                   	push   %rbp
  8004202d31:	48 89 e5             	mov    %rsp,%rbp
  8004202d34:	48 83 ec 50          	sub    $0x50,%rsp
  8004202d38:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202d3d:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202d44:	00 00 00 
  8004202d47:	ff d0                	callq  *%rax
  8004202d49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202d4d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202d54:	00 
  8004202d55:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202d5c:	00 
  8004202d5d:	e9 65 02 00 00       	jmpq   8004202fc7 <page_init+0x297>
  8004202d62:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d6e:	74 1a                	je     8004202d8a <page_init+0x5a>
  8004202d70:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202d77:	00 00 00 
  8004202d7a:	48 8b 00             	mov    (%rax),%rax
  8004202d7d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202d81:	73 07                	jae    8004202d8a <page_init+0x5a>
  8004202d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202d8a:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202d8f:	75 07                	jne    8004202d98 <page_init+0x68>
  8004202d91:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202da0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202da7:	00 00 00 
  8004202daa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202dae:	77 32                	ja     8004202de2 <page_init+0xb2>
  8004202db0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202db4:	48 89 c1             	mov    %rax,%rcx
  8004202db7:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004202dbe:	00 00 00 
  8004202dc1:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202dc6:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202dcd:	00 00 00 
  8004202dd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202dd5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ddc:	00 00 00 
  8004202ddf:	41 ff d0             	callq  *%r8
  8004202de2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202de9:	ff ff ff 
  8004202dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202df0:	48 01 d0             	add    %rdx,%rax
  8004202df3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202df7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202dfb:	77 07                	ja     8004202e04 <page_init+0xd4>
  8004202dfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e08:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202e0e:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202e12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202e16:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e1d:	00 00 00 
  8004202e20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e28:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e2c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202e2f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202e32:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202e39:	00 00 00 
  8004202e3c:	48 8b 00             	mov    (%rax),%rax
  8004202e3f:	48 39 c2             	cmp    %rax,%rdx
  8004202e42:	72 32                	jb     8004202e76 <page_init+0x146>
  8004202e44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e48:	48 89 c1             	mov    %rax,%rcx
  8004202e4b:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004202e52:	00 00 00 
  8004202e55:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202e5a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202e61:	00 00 00 
  8004202e64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202e69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202e70:	00 00 00 
  8004202e73:	41 ff d0             	callq  *%r8
  8004202e76:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202e7d:	00 00 00 
  8004202e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e84:	48 01 d0             	add    %rdx,%rax
  8004202e87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202e8b:	0f 87 84 00 00 00    	ja     8004202f15 <page_init+0x1e5>
  8004202e91:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e98:	00 00 00 
  8004202e9b:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202ea1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202ea5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ea9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ead:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202eb0:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202eb3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202eba:	00 00 00 
  8004202ebd:	48 8b 00             	mov    (%rax),%rax
  8004202ec0:	48 39 c2             	cmp    %rax,%rdx
  8004202ec3:	72 32                	jb     8004202ef7 <page_init+0x1c7>
  8004202ec5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ec9:	48 89 c1             	mov    %rax,%rcx
  8004202ecc:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004202ed3:	00 00 00 
  8004202ed6:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202edb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004202ee2:	00 00 00 
  8004202ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202eea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ef1:	00 00 00 
  8004202ef4:	41 ff d0             	callq  *%r8
  8004202ef7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202efe:	00 00 00 
  8004202f01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202f05:	48 01 d0             	add    %rdx,%rax
  8004202f08:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202f0c:	76 07                	jbe    8004202f15 <page_init+0x1e5>
  8004202f0e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202f15:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f1c:	00 00 00 
  8004202f1f:	48 8b 00             	mov    (%rax),%rax
  8004202f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f26:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f2a:	48 01 c2             	add    %rax,%rdx
  8004202f2d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202f30:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202f34:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f3b:	00 00 00 
  8004202f3e:	48 8b 00             	mov    (%rax),%rax
  8004202f41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f45:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f49:	48 01 d0             	add    %rdx,%rax
  8004202f4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202f53:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202f57:	75 69                	jne    8004202fc2 <page_init+0x292>
  8004202f59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202f5e:	74 21                	je     8004202f81 <page_init+0x251>
  8004202f60:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f67:	00 00 00 
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f71:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f75:	48 01 c2             	add    %rax,%rdx
  8004202f78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202f7c:	48 89 10             	mov    %rdx,(%rax)
  8004202f7f:	eb 25                	jmp    8004202fa6 <page_init+0x276>
  8004202f81:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f88:	00 00 00 
  8004202f8b:	48 8b 00             	mov    (%rax),%rax
  8004202f8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f92:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f96:	48 01 c2             	add    %rax,%rdx
  8004202f99:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202fa0:	00 00 00 
  8004202fa3:	48 89 10             	mov    %rdx,(%rax)
  8004202fa6:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202fad:	00 00 00 
  8004202fb0:	48 8b 00             	mov    (%rax),%rax
  8004202fb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fb7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202fbb:	48 01 d0             	add    %rdx,%rax
  8004202fbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202fc2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202fc7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202fce:	00 00 00 
  8004202fd1:	48 8b 00             	mov    (%rax),%rax
  8004202fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202fd8:	0f 82 84 fd ff ff    	jb     8004202d62 <page_init+0x32>
  8004202fde:	c9                   	leaveq 
  8004202fdf:	c3                   	retq   

0000008004202fe0 <page_alloc>:
  8004202fe0:	55                   	push   %rbp
  8004202fe1:	48 89 e5             	mov    %rsp,%rbp
  8004202fe4:	48 83 ec 20          	sub    $0x20,%rsp
  8004202fe8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202feb:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202ff2:	00 00 00 
  8004202ff5:	48 8b 00             	mov    (%rax),%rax
  8004202ff8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ffc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203001:	74 5e                	je     8004203061 <page_alloc+0x81>
  8004203003:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420300a:	00 00 00 
  800420300d:	48 8b 00             	mov    (%rax),%rax
  8004203010:	48 8b 10             	mov    (%rax),%rdx
  8004203013:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420301a:	00 00 00 
  800420301d:	48 89 10             	mov    %rdx,(%rax)
  8004203020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203024:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420302b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420302e:	83 e0 01             	and    $0x1,%eax
  8004203031:	85 c0                	test   %eax,%eax
  8004203033:	74 2c                	je     8004203061 <page_alloc+0x81>
  8004203035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203039:	48 89 c7             	mov    %rax,%rdi
  800420303c:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004203043:	00 00 00 
  8004203046:	ff d0                	callq  *%rax
  8004203048:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420304d:	be 00 00 00 00       	mov    $0x0,%esi
  8004203052:	48 89 c7             	mov    %rax,%rdi
  8004203055:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800420305c:	00 00 00 
  800420305f:	ff d0                	callq  *%rax
  8004203061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203065:	c9                   	leaveq 
  8004203066:	c3                   	retq   

0000008004203067 <page_initpp>:
  8004203067:	55                   	push   %rbp
  8004203068:	48 89 e5             	mov    %rsp,%rbp
  800420306b:	48 83 ec 10          	sub    $0x10,%rsp
  800420306f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203077:	ba 10 00 00 00       	mov    $0x10,%edx
  800420307c:	be 00 00 00 00       	mov    $0x0,%esi
  8004203081:	48 89 c7             	mov    %rax,%rdi
  8004203084:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800420308b:	00 00 00 
  800420308e:	ff d0                	callq  *%rax
  8004203090:	c9                   	leaveq 
  8004203091:	c3                   	retq   

0000008004203092 <page_free>:
  8004203092:	55                   	push   %rbp
  8004203093:	48 89 e5             	mov    %rsp,%rbp
  8004203096:	48 83 ec 10          	sub    $0x10,%rsp
  800420309a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420309e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a6:	66 85 c0             	test   %ax,%ax
  80042030a9:	75 0c                	jne    80042030b7 <page_free+0x25>
  80042030ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030af:	48 8b 00             	mov    (%rax),%rax
  80042030b2:	48 85 c0             	test   %rax,%rax
  80042030b5:	74 2c                	je     80042030e3 <page_free+0x51>
  80042030b7:	48 ba a0 8e 21 04 80 	movabs $0x8004218ea0,%rdx
  80042030be:	00 00 00 
  80042030c1:	be 3d 02 00 00       	mov    $0x23d,%esi
  80042030c6:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042030cd:	00 00 00 
  80042030d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042030d5:	48 b9 1b 07 20 04 80 	movabs $0x800420071b,%rcx
  80042030dc:	00 00 00 
  80042030df:	ff d1                	callq  *%rcx
  80042030e1:	eb 2f                	jmp    8004203112 <page_free+0x80>
  80042030e3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030ea:	00 00 00 
  80042030ed:	48 8b 10             	mov    (%rax),%rdx
  80042030f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030f4:	48 89 10             	mov    %rdx,(%rax)
  80042030f7:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030fe:	00 00 00 
  8004203101:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203105:	48 89 10             	mov    %rdx,(%rax)
  8004203108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420310c:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004203112:	c9                   	leaveq 
  8004203113:	c3                   	retq   

0000008004203114 <page_decref>:
  8004203114:	55                   	push   %rbp
  8004203115:	48 89 e5             	mov    %rsp,%rbp
  8004203118:	48 83 ec 10          	sub    $0x10,%rsp
  800420311c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203124:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203128:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420312b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420312f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203137:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420313b:	66 85 c0             	test   %ax,%ax
  800420313e:	75 13                	jne    8004203153 <page_decref+0x3f>
  8004203140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203144:	48 89 c7             	mov    %rax,%rdi
  8004203147:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420314e:	00 00 00 
  8004203151:	ff d0                	callq  *%rax
  8004203153:	c9                   	leaveq 
  8004203154:	c3                   	retq   

0000008004203155 <pml4e_walk>:
  8004203155:	55                   	push   %rbp
  8004203156:	48 89 e5             	mov    %rsp,%rbp
  8004203159:	53                   	push   %rbx
  800420315a:	48 83 ec 68          	sub    $0x68,%rsp
  800420315e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203162:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203166:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203169:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800420316e:	0f 84 4e 02 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203174:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203178:	48 c1 e8 27          	shr    $0x27,%rax
  800420317c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203181:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203188:	00 
  8004203189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420318d:	48 01 d0             	add    %rdx,%rax
  8004203190:	48 8b 00             	mov    (%rax),%rax
  8004203193:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420319b:	83 e0 01             	and    $0x1,%eax
  800420319e:	48 85 c0             	test   %rax,%rax
  80042031a1:	0f 85 7f 01 00 00    	jne    8004203326 <pml4e_walk+0x1d1>
  80042031a7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042031ab:	0f 84 75 01 00 00    	je     8004203326 <pml4e_walk+0x1d1>
  80042031b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042031b8:	00 
  80042031b9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042031be:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042031c5:	00 00 00 
  80042031c8:	ff d0                	callq  *%rax
  80042031ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042031ce:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042031d3:	0f 84 43 01 00 00    	je     800420331c <pml4e_walk+0x1c7>
  80042031d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031dd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042031e1:	8d 50 01             	lea    0x1(%rax),%edx
  80042031e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031e8:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042031ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031f0:	48 c1 e8 27          	shr    $0x27,%rax
  80042031f4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203200:	00 
  8004203201:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203205:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420320d:	48 89 c7             	mov    %rax,%rdi
  8004203210:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203217:	00 00 00 
  800420321a:	ff d0                	callq  *%rax
  800420321c:	48 83 c8 07          	or     $0x7,%rax
  8004203220:	48 89 03             	mov    %rax,(%rbx)
  8004203223:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203227:	48 c1 e8 27          	shr    $0x27,%rax
  800420322b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203230:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203237:	00 
  8004203238:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420323c:	48 01 d0             	add    %rdx,%rax
  800420323f:	48 8b 00             	mov    (%rax),%rax
  8004203242:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203248:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420324c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203250:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203254:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203257:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420325a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203261:	00 00 00 
  8004203264:	48 8b 00             	mov    (%rax),%rax
  8004203267:	48 39 c2             	cmp    %rax,%rdx
  800420326a:	72 32                	jb     800420329e <pml4e_walk+0x149>
  800420326c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203270:	48 89 c1             	mov    %rax,%rcx
  8004203273:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420327a:	00 00 00 
  800420327d:	be 79 02 00 00       	mov    $0x279,%esi
  8004203282:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203289:	00 00 00 
  800420328c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203291:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203298:	00 00 00 
  800420329b:	41 ff d0             	callq  *%r8
  800420329e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042032a5:	00 00 00 
  80042032a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042032ac:	48 01 d0             	add    %rdx,%rax
  80042032af:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042032b2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042032b6:	48 89 ce             	mov    %rcx,%rsi
  80042032b9:	48 89 c7             	mov    %rax,%rdi
  80042032bc:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042032c3:	00 00 00 
  80042032c6:	ff d0                	callq  *%rax
  80042032c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042032cc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042032d1:	74 09                	je     80042032dc <pml4e_walk+0x187>
  80042032d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042032d7:	e9 eb 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  80042032dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032e0:	48 c1 e8 27          	shr    $0x27,%rax
  80042032e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032f0:	00 
  80042032f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032f5:	48 01 d0             	add    %rdx,%rax
  80042032f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042032ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203303:	48 89 c7             	mov    %rax,%rdi
  8004203306:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420330d:	00 00 00 
  8004203310:	ff d0                	callq  *%rax
  8004203312:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203317:	e9 ab 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  800420331c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203321:	e9 a1 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  8004203326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420332a:	83 e0 01             	and    $0x1,%eax
  800420332d:	48 85 c0             	test   %rax,%rax
  8004203330:	0f 84 8c 00 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420333a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203344:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203348:	48 c1 e8 0c          	shr    $0xc,%rax
  800420334c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420334f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203352:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203359:	00 00 00 
  800420335c:	48 8b 00             	mov    (%rax),%rax
  800420335f:	48 39 c2             	cmp    %rax,%rdx
  8004203362:	72 32                	jb     8004203396 <pml4e_walk+0x241>
  8004203364:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203368:	48 89 c1             	mov    %rax,%rcx
  800420336b:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004203372:	00 00 00 
  8004203375:	be 83 02 00 00       	mov    $0x283,%esi
  800420337a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203381:	00 00 00 
  8004203384:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203389:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203390:	00 00 00 
  8004203393:	41 ff d0             	callq  *%r8
  8004203396:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420339d:	00 00 00 
  80042033a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042033a4:	48 01 d0             	add    %rdx,%rax
  80042033a7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ae:	48 89 ce             	mov    %rcx,%rsi
  80042033b1:	48 89 c7             	mov    %rax,%rdi
  80042033b4:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042033bb:	00 00 00 
  80042033be:	ff d0                	callq  *%rax
  80042033c0:	eb 05                	jmp    80042033c7 <pml4e_walk+0x272>
  80042033c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c7:	48 83 c4 68          	add    $0x68,%rsp
  80042033cb:	5b                   	pop    %rbx
  80042033cc:	5d                   	pop    %rbp
  80042033cd:	c3                   	retq   

00000080042033ce <pdpe_walk>:
  80042033ce:	55                   	push   %rbp
  80042033cf:	48 89 e5             	mov    %rsp,%rbp
  80042033d2:	53                   	push   %rbx
  80042033d3:	48 83 ec 68          	sub    $0x68,%rsp
  80042033d7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042033db:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042033df:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042033e2:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042033e7:	0f 84 4e 02 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042033ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042033f1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042033f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042033fa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203401:	00 
  8004203402:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203406:	48 01 d0             	add    %rdx,%rax
  8004203409:	48 8b 00             	mov    (%rax),%rax
  800420340c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203414:	83 e0 01             	and    $0x1,%eax
  8004203417:	48 85 c0             	test   %rax,%rax
  800420341a:	0f 85 7f 01 00 00    	jne    800420359f <pdpe_walk+0x1d1>
  8004203420:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203424:	0f 84 75 01 00 00    	je     800420359f <pdpe_walk+0x1d1>
  800420342a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203431:	00 
  8004203432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203437:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420343e:	00 00 00 
  8004203441:	ff d0                	callq  *%rax
  8004203443:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203447:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420344c:	0f 84 43 01 00 00    	je     8004203595 <pdpe_walk+0x1c7>
  8004203452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203456:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420345a:	8d 50 01             	lea    0x1(%rax),%edx
  800420345d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203461:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203465:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203469:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420346d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203472:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203479:	00 
  800420347a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420347e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203482:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203486:	48 89 c7             	mov    %rax,%rdi
  8004203489:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203490:	00 00 00 
  8004203493:	ff d0                	callq  *%rax
  8004203495:	48 83 c8 07          	or     $0x7,%rax
  8004203499:	48 89 03             	mov    %rax,(%rbx)
  800420349c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042034a0:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042034a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042034a9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042034b0:	00 
  80042034b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042034b5:	48 01 d0             	add    %rdx,%rax
  80042034b8:	48 8b 00             	mov    (%rax),%rax
  80042034bb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042034c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042034c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042034cd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  80042034d0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042034d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042034da:	00 00 00 
  80042034dd:	48 8b 00             	mov    (%rax),%rax
  80042034e0:	48 39 c2             	cmp    %rax,%rdx
  80042034e3:	72 32                	jb     8004203517 <pdpe_walk+0x149>
  80042034e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034e9:	48 89 c1             	mov    %rax,%rcx
  80042034ec:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042034f3:	00 00 00 
  80042034f6:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042034fb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203502:	00 00 00 
  8004203505:	b8 00 00 00 00       	mov    $0x0,%eax
  800420350a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203511:	00 00 00 
  8004203514:	41 ff d0             	callq  *%r8
  8004203517:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420351e:	00 00 00 
  8004203521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203525:	48 01 d0             	add    %rdx,%rax
  8004203528:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420352b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420352f:	48 89 ce             	mov    %rcx,%rsi
  8004203532:	48 89 c7             	mov    %rax,%rdi
  8004203535:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  800420353c:	00 00 00 
  800420353f:	ff d0                	callq  *%rax
  8004203541:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203545:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420354a:	74 09                	je     8004203555 <pdpe_walk+0x187>
  800420354c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203550:	e9 eb 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203555:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203559:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420355d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203562:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203569:	00 
  800420356a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420356e:	48 01 d0             	add    %rdx,%rax
  8004203571:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420357c:	48 89 c7             	mov    %rax,%rdi
  800420357f:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203586:	00 00 00 
  8004203589:	ff d0                	callq  *%rax
  800420358b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203590:	e9 ab 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203595:	b8 00 00 00 00       	mov    $0x0,%eax
  800420359a:	e9 a1 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  800420359f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035a3:	83 e0 01             	and    $0x1,%eax
  80042035a6:	48 85 c0             	test   %rax,%rax
  80042035a9:	0f 84 8c 00 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042035af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035b3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042035b9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042035bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035c1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035c5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042035c8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042035cb:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042035d2:	00 00 00 
  80042035d5:	48 8b 00             	mov    (%rax),%rax
  80042035d8:	48 39 c2             	cmp    %rax,%rdx
  80042035db:	72 32                	jb     800420360f <pdpe_walk+0x241>
  80042035dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035e1:	48 89 c1             	mov    %rax,%rcx
  80042035e4:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042035eb:	00 00 00 
  80042035ee:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042035f3:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042035fa:	00 00 00 
  80042035fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203602:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203609:	00 00 00 
  800420360c:	41 ff d0             	callq  *%r8
  800420360f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203616:	00 00 00 
  8004203619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420361d:	48 01 d0             	add    %rdx,%rax
  8004203620:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203623:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203627:	48 89 ce             	mov    %rcx,%rsi
  800420362a:	48 89 c7             	mov    %rax,%rdi
  800420362d:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  8004203634:	00 00 00 
  8004203637:	ff d0                	callq  *%rax
  8004203639:	eb 05                	jmp    8004203640 <pdpe_walk+0x272>
  800420363b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203640:	48 83 c4 68          	add    $0x68,%rsp
  8004203644:	5b                   	pop    %rbx
  8004203645:	5d                   	pop    %rbp
  8004203646:	c3                   	retq   

0000008004203647 <pgdir_walk>:
  8004203647:	55                   	push   %rbp
  8004203648:	48 89 e5             	mov    %rsp,%rbp
  800420364b:	53                   	push   %rbx
  800420364c:	48 83 ec 58          	sub    $0x58,%rsp
  8004203650:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203654:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203658:	89 55 ac             	mov    %edx,-0x54(%rbp)
  800420365b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203660:	0f 84 fd 01 00 00    	je     8004203863 <pgdir_walk+0x21c>
  8004203666:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420366a:	48 c1 e8 15          	shr    $0x15,%rax
  800420366e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203673:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420367a:	00 
  800420367b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420367f:	48 01 d0             	add    %rdx,%rax
  8004203682:	48 8b 00             	mov    (%rax),%rax
  8004203685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420368d:	83 e0 01             	and    $0x1,%eax
  8004203690:	48 85 c0             	test   %rax,%rax
  8004203693:	0f 85 2f 01 00 00    	jne    80042037c8 <pgdir_walk+0x181>
  8004203699:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420369d:	0f 84 25 01 00 00    	je     80042037c8 <pgdir_walk+0x181>
  80042036a3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042036aa:	00 
  80042036ab:	bf 01 00 00 00       	mov    $0x1,%edi
  80042036b0:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042036b7:	00 00 00 
  80042036ba:	ff d0                	callq  *%rax
  80042036bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042036c0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042036c5:	0f 84 f3 00 00 00    	je     80042037be <pgdir_walk+0x177>
  80042036cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036cf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042036d3:	8d 50 01             	lea    0x1(%rax),%edx
  80042036d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036da:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042036de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036e2:	48 c1 e8 15          	shr    $0x15,%rax
  80042036e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036f2:	00 
  80042036f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042036f7:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042036fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036ff:	48 89 c7             	mov    %rax,%rdi
  8004203702:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203709:	00 00 00 
  800420370c:	ff d0                	callq  *%rax
  800420370e:	48 83 c8 07          	or     $0x7,%rax
  8004203712:	48 89 03             	mov    %rax,(%rbx)
  8004203715:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203719:	48 c1 e8 0c          	shr    $0xc,%rax
  800420371d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203722:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203729:	00 
  800420372a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420372e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203732:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203737:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  800420373e:	00 
  800420373f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203743:	48 01 c8             	add    %rcx,%rax
  8004203746:	48 8b 00             	mov    (%rax),%rax
  8004203749:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420374f:	48 01 d0             	add    %rdx,%rax
  8004203752:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420375a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420375e:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203761:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203764:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420376b:	00 00 00 
  800420376e:	48 8b 00             	mov    (%rax),%rax
  8004203771:	48 39 c2             	cmp    %rax,%rdx
  8004203774:	72 32                	jb     80042037a8 <pgdir_walk+0x161>
  8004203776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420377a:	48 89 c1             	mov    %rax,%rcx
  800420377d:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004203784:	00 00 00 
  8004203787:	be be 02 00 00       	mov    $0x2be,%esi
  800420378c:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203793:	00 00 00 
  8004203796:	b8 00 00 00 00       	mov    $0x0,%eax
  800420379b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042037a2:	00 00 00 
  80042037a5:	41 ff d0             	callq  *%r8
  80042037a8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042037af:	00 00 00 
  80042037b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042037b6:	48 01 d0             	add    %rdx,%rax
  80042037b9:	e9 aa 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037c3:	e9 a0 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037cc:	83 e0 01             	and    $0x1,%eax
  80042037cf:	48 85 c0             	test   %rax,%rax
  80042037d2:	0f 84 8b 00 00 00    	je     8004203863 <pgdir_walk+0x21c>
  80042037d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042037dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042037e0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037e5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037ec:	00 
  80042037ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037f1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037f7:	48 01 d0             	add    %rdx,%rax
  80042037fa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042037fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203802:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203806:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203809:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420380c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203813:	00 00 00 
  8004203816:	48 8b 00             	mov    (%rax),%rax
  8004203819:	48 39 c2             	cmp    %rax,%rdx
  800420381c:	72 32                	jb     8004203850 <pgdir_walk+0x209>
  800420381e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203822:	48 89 c1             	mov    %rax,%rcx
  8004203825:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420382c:	00 00 00 
  800420382f:	be c3 02 00 00       	mov    $0x2c3,%esi
  8004203834:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420383b:	00 00 00 
  800420383e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203843:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420384a:	00 00 00 
  800420384d:	41 ff d0             	callq  *%r8
  8004203850:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203857:	00 00 00 
  800420385a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420385e:	48 01 d0             	add    %rdx,%rax
  8004203861:	eb 05                	jmp    8004203868 <pgdir_walk+0x221>
  8004203863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203868:	48 83 c4 58          	add    $0x58,%rsp
  800420386c:	5b                   	pop    %rbx
  800420386d:	5d                   	pop    %rbp
  800420386e:	c3                   	retq   

000000800420386f <boot_map_region>:
  800420386f:	55                   	push   %rbp
  8004203870:	48 89 e5             	mov    %rsp,%rbp
  8004203873:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203877:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420387b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420387f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004203883:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203887:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  800420388b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203892:	00 
  8004203893:	e9 aa 02 00 00       	jmpq   8004203b42 <boot_map_region+0x2d3>
  8004203898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420389c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038a0:	48 01 d0             	add    %rdx,%rax
  80042038a3:	48 89 c1             	mov    %rax,%rcx
  80042038a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042038aa:	ba 01 00 00 00       	mov    $0x1,%edx
  80042038af:	48 89 ce             	mov    %rcx,%rsi
  80042038b2:	48 89 c7             	mov    %rax,%rdi
  80042038b5:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042038bc:	00 00 00 
  80042038bf:	ff d0                	callq  *%rax
  80042038c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042038c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038c9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042038cd:	48 01 d0             	add    %rdx,%rax
  80042038d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042038d4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042038d9:	74 23                	je     80042038fe <boot_map_region+0x8f>
  80042038db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042038e5:	48 89 c2             	mov    %rax,%rdx
  80042038e8:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042038eb:	48 98                	cltq   
  80042038ed:	48 09 d0             	or     %rdx,%rax
  80042038f0:	48 83 c8 01          	or     $0x1,%rax
  80042038f4:	48 89 c2             	mov    %rax,%rdx
  80042038f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042038fb:	48 89 10             	mov    %rdx,(%rax)
  80042038fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203902:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203906:	48 01 d0             	add    %rdx,%rax
  8004203909:	48 c1 e8 27          	shr    $0x27,%rax
  800420390d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203919:	00 
  800420391a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420391e:	48 01 d0             	add    %rdx,%rax
  8004203921:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203925:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203929:	48 01 ca             	add    %rcx,%rdx
  800420392c:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203930:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203936:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  800420393d:	00 
  800420393e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203942:	48 01 ca             	add    %rcx,%rdx
  8004203945:	48 8b 0a             	mov    (%rdx),%rcx
  8004203948:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420394b:	48 63 d2             	movslq %edx,%rdx
  800420394e:	48 09 ca             	or     %rcx,%rdx
  8004203951:	48 83 ca 01          	or     $0x1,%rdx
  8004203955:	48 89 10             	mov    %rdx,(%rax)
  8004203958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420395c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203960:	48 01 d0             	add    %rdx,%rax
  8004203963:	48 c1 e8 27          	shr    $0x27,%rax
  8004203967:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420396c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203973:	00 
  8004203974:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203978:	48 01 d0             	add    %rdx,%rax
  800420397b:	48 8b 00             	mov    (%rax),%rax
  800420397e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203984:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420398c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203990:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004203993:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203996:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420399d:	00 00 00 
  80042039a0:	48 8b 00             	mov    (%rax),%rax
  80042039a3:	48 39 c2             	cmp    %rax,%rdx
  80042039a6:	72 32                	jb     80042039da <boot_map_region+0x16b>
  80042039a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039ac:	48 89 c1             	mov    %rax,%rcx
  80042039af:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042039b6:	00 00 00 
  80042039b9:	be e6 02 00 00       	mov    $0x2e6,%esi
  80042039be:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042039c5:	00 00 00 
  80042039c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039cd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042039d4:	00 00 00 
  80042039d7:	41 ff d0             	callq  *%r8
  80042039da:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042039e1:	00 00 00 
  80042039e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039e8:	48 01 d0             	add    %rdx,%rax
  80042039eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042039ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039f3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039f7:	48 01 d0             	add    %rdx,%rax
  80042039fa:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042039fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a03:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a0a:	00 
  8004203a0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a0f:	48 01 d0             	add    %rdx,%rax
  8004203a12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203a16:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203a1a:	48 01 ca             	add    %rcx,%rdx
  8004203a1d:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203a21:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a27:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a2e:	00 
  8004203a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203a33:	48 01 ca             	add    %rcx,%rdx
  8004203a36:	48 8b 0a             	mov    (%rdx),%rcx
  8004203a39:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203a3c:	48 63 d2             	movslq %edx,%rdx
  8004203a3f:	48 09 ca             	or     %rcx,%rdx
  8004203a42:	48 83 ca 01          	or     $0x1,%rdx
  8004203a46:	48 89 10             	mov    %rdx,(%rax)
  8004203a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a4d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a51:	48 01 d0             	add    %rdx,%rax
  8004203a54:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a58:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a64:	00 
  8004203a65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a69:	48 01 d0             	add    %rdx,%rax
  8004203a6c:	48 8b 00             	mov    (%rax),%rax
  8004203a6f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203a75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203a79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a7d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203a81:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203a84:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203a87:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203a8e:	00 00 00 
  8004203a91:	48 8b 00             	mov    (%rax),%rax
  8004203a94:	48 39 c2             	cmp    %rax,%rdx
  8004203a97:	72 32                	jb     8004203acb <boot_map_region+0x25c>
  8004203a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a9d:	48 89 c1             	mov    %rax,%rcx
  8004203aa0:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004203aa7:	00 00 00 
  8004203aaa:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203aaf:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203ab6:	00 00 00 
  8004203ab9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203abe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203ac5:	00 00 00 
  8004203ac8:	41 ff d0             	callq  *%r8
  8004203acb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203ad2:	00 00 00 
  8004203ad5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203ad9:	48 01 d0             	add    %rdx,%rax
  8004203adc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004203ae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ae4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203ae8:	48 01 d0             	add    %rdx,%rax
  8004203aeb:	48 c1 e8 15          	shr    $0x15,%rax
  8004203aef:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203af4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203afb:	00 
  8004203afc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b00:	48 01 d0             	add    %rdx,%rax
  8004203b03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203b07:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203b0b:	48 01 ca             	add    %rcx,%rdx
  8004203b0e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203b12:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b18:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b1f:	00 
  8004203b20:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203b24:	48 01 ca             	add    %rcx,%rdx
  8004203b27:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b2a:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203b2d:	48 63 d2             	movslq %edx,%rdx
  8004203b30:	48 09 ca             	or     %rcx,%rdx
  8004203b33:	48 83 ca 01          	or     $0x1,%rdx
  8004203b37:	48 89 10             	mov    %rdx,(%rax)
  8004203b3a:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203b41:	00 
  8004203b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b46:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203b4a:	0f 82 48 fd ff ff    	jb     8004203898 <boot_map_region+0x29>
  8004203b50:	c9                   	leaveq 
  8004203b51:	c3                   	retq   

0000008004203b52 <page_insert>:
  8004203b52:	55                   	push   %rbp
  8004203b53:	48 89 e5             	mov    %rsp,%rbp
  8004203b56:	48 83 ec 60          	sub    $0x60,%rsp
  8004203b5a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203b5e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203b62:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203b66:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203b69:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203b6e:	0f 84 47 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b74:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203b79:	0f 84 3c 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b7f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b87:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203b8c:	48 89 ce             	mov    %rcx,%rsi
  8004203b8f:	48 89 c7             	mov    %rax,%rdi
  8004203b92:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203b99:	00 00 00 
  8004203b9c:	ff d0                	callq  *%rax
  8004203b9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203ba2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203ba7:	0f 84 07 03 00 00    	je     8004203eb4 <page_insert+0x362>
  8004203bad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bb1:	48 c1 e8 27          	shr    $0x27,%rax
  8004203bb5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203bba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bc1:	00 
  8004203bc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bc6:	48 01 d0             	add    %rdx,%rax
  8004203bc9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203bcd:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203bd1:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203bd7:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203bde:	00 
  8004203bdf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203be3:	48 01 ca             	add    %rcx,%rdx
  8004203be6:	48 8b 0a             	mov    (%rdx),%rcx
  8004203be9:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203bec:	80 e6 f1             	and    $0xf1,%dh
  8004203bef:	48 63 d2             	movslq %edx,%rdx
  8004203bf2:	48 09 ca             	or     %rcx,%rdx
  8004203bf5:	48 89 10             	mov    %rdx,(%rax)
  8004203bf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bfc:	48 c1 e8 27          	shr    $0x27,%rax
  8004203c00:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c0c:	00 
  8004203c0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203c11:	48 01 d0             	add    %rdx,%rax
  8004203c14:	48 8b 00             	mov    (%rax),%rax
  8004203c17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c25:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203c29:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203c2c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203c2f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203c36:	00 00 00 
  8004203c39:	48 8b 00             	mov    (%rax),%rax
  8004203c3c:	48 39 c2             	cmp    %rax,%rdx
  8004203c3f:	72 32                	jb     8004203c73 <page_insert+0x121>
  8004203c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c45:	48 89 c1             	mov    %rax,%rcx
  8004203c48:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004203c4f:	00 00 00 
  8004203c52:	be 13 03 00 00       	mov    $0x313,%esi
  8004203c57:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203c5e:	00 00 00 
  8004203c61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c66:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203c6d:	00 00 00 
  8004203c70:	41 ff d0             	callq  *%r8
  8004203c73:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c7a:	00 00 00 
  8004203c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c81:	48 01 d0             	add    %rdx,%rax
  8004203c84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203c88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c8c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203c90:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c9c:	00 
  8004203c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ca1:	48 01 d0             	add    %rdx,%rax
  8004203ca4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ca8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203cac:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203cb2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203cb9:	00 
  8004203cba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203cbe:	48 01 ca             	add    %rcx,%rdx
  8004203cc1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203cc4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203cc7:	80 e6 f1             	and    $0xf1,%dh
  8004203cca:	48 63 d2             	movslq %edx,%rdx
  8004203ccd:	48 09 ca             	or     %rcx,%rdx
  8004203cd0:	48 89 10             	mov    %rdx,(%rax)
  8004203cd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cd7:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cdb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ce0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ce7:	00 
  8004203ce8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203cec:	48 01 d0             	add    %rdx,%rax
  8004203cef:	48 8b 00             	mov    (%rax),%rax
  8004203cf2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cf8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203cfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d00:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203d04:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203d07:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203d0a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203d11:	00 00 00 
  8004203d14:	48 8b 00             	mov    (%rax),%rax
  8004203d17:	48 39 c2             	cmp    %rax,%rdx
  8004203d1a:	72 32                	jb     8004203d4e <page_insert+0x1fc>
  8004203d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d20:	48 89 c1             	mov    %rax,%rcx
  8004203d23:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004203d2a:	00 00 00 
  8004203d2d:	be 15 03 00 00       	mov    $0x315,%esi
  8004203d32:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203d39:	00 00 00 
  8004203d3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d41:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203d48:	00 00 00 
  8004203d4b:	41 ff d0             	callq  *%r8
  8004203d4e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203d55:	00 00 00 
  8004203d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d5c:	48 01 d0             	add    %rdx,%rax
  8004203d5f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203d63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203d67:	48 c1 e8 15          	shr    $0x15,%rax
  8004203d6b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d70:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d77:	00 
  8004203d78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203d7c:	48 01 d0             	add    %rdx,%rax
  8004203d7f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d83:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203d87:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203d8d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203d94:	00 
  8004203d95:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203d99:	48 01 ca             	add    %rcx,%rdx
  8004203d9c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203d9f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203da2:	80 e6 f1             	and    $0xf1,%dh
  8004203da5:	48 63 d2             	movslq %edx,%rdx
  8004203da8:	48 09 ca             	or     %rcx,%rdx
  8004203dab:	48 89 10             	mov    %rdx,(%rax)
  8004203dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203db2:	48 8b 00             	mov    (%rax),%rax
  8004203db5:	83 e0 01             	and    $0x1,%eax
  8004203db8:	48 85 c0             	test   %rax,%rax
  8004203dbb:	74 70                	je     8004203e2d <page_insert+0x2db>
  8004203dbd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203dc1:	48 89 c7             	mov    %rax,%rdi
  8004203dc4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203dcb:	00 00 00 
  8004203dce:	ff d0                	callq  *%rax
  8004203dd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dd4:	48 8b 12             	mov    (%rdx),%rdx
  8004203dd7:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203dde:	48 39 d0             	cmp    %rdx,%rax
  8004203de1:	75 4a                	jne    8004203e2d <page_insert+0x2db>
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c2             	mov    %rax,%rdx
  8004203df3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203df6:	48 98                	cltq   
  8004203df8:	48 09 d0             	or     %rdx,%rax
  8004203dfb:	48 83 c8 01          	or     $0x1,%rax
  8004203dff:	48 89 c2             	mov    %rax,%rdx
  8004203e02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e06:	48 89 10             	mov    %rdx,(%rax)
  8004203e09:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e11:	48 89 d6             	mov    %rdx,%rsi
  8004203e14:	48 89 c7             	mov    %rax,%rdi
  8004203e17:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203e1e:	00 00 00 
  8004203e21:	ff d0                	callq  *%rax
  8004203e23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e28:	e9 93 00 00 00       	jmpq   8004203ec0 <page_insert+0x36e>
  8004203e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e31:	48 8b 00             	mov    (%rax),%rax
  8004203e34:	83 e0 01             	and    $0x1,%eax
  8004203e37:	48 85 c0             	test   %rax,%rax
  8004203e3a:	74 1a                	je     8004203e56 <page_insert+0x304>
  8004203e3c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e44:	48 89 d6             	mov    %rdx,%rsi
  8004203e47:	48 89 c7             	mov    %rax,%rdi
  8004203e4a:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004203e51:	00 00 00 
  8004203e54:	ff d0                	callq  *%rax
  8004203e56:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e5a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203e5e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203e61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e65:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203e69:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e6d:	48 89 c7             	mov    %rax,%rdi
  8004203e70:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203e77:	00 00 00 
  8004203e7a:	ff d0                	callq  *%rax
  8004203e7c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203e7f:	48 63 d2             	movslq %edx,%rdx
  8004203e82:	48 09 d0             	or     %rdx,%rax
  8004203e85:	48 83 c8 01          	or     $0x1,%rax
  8004203e89:	48 89 c2             	mov    %rax,%rdx
  8004203e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e90:	48 89 10             	mov    %rdx,(%rax)
  8004203e93:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e9b:	48 89 d6             	mov    %rdx,%rsi
  8004203e9e:	48 89 c7             	mov    %rax,%rdi
  8004203ea1:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203ea8:	00 00 00 
  8004203eab:	ff d0                	callq  *%rax
  8004203ead:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eb2:	eb 0c                	jmp    8004203ec0 <page_insert+0x36e>
  8004203eb4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203eb9:	eb 05                	jmp    8004203ec0 <page_insert+0x36e>
  8004203ebb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ec0:	c9                   	leaveq 
  8004203ec1:	c3                   	retq   

0000008004203ec2 <page_lookup>:
  8004203ec2:	55                   	push   %rbp
  8004203ec3:	48 89 e5             	mov    %rsp,%rbp
  8004203ec6:	48 83 ec 30          	sub    $0x30,%rsp
  8004203eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203ed6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203edb:	74 69                	je     8004203f46 <page_lookup+0x84>
  8004203edd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ee5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203eea:	48 89 ce             	mov    %rcx,%rsi
  8004203eed:	48 89 c7             	mov    %rax,%rdi
  8004203ef0:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203ef7:	00 00 00 
  8004203efa:	ff d0                	callq  *%rax
  8004203efc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f05:	74 3f                	je     8004203f46 <page_lookup+0x84>
  8004203f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f0b:	48 8b 00             	mov    (%rax),%rax
  8004203f0e:	83 e0 01             	and    $0x1,%eax
  8004203f11:	48 85 c0             	test   %rax,%rax
  8004203f14:	74 30                	je     8004203f46 <page_lookup+0x84>
  8004203f16:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203f1b:	74 0b                	je     8004203f28 <page_lookup+0x66>
  8004203f1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203f25:	48 89 10             	mov    %rdx,(%rax)
  8004203f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f2c:	48 8b 00             	mov    (%rax),%rax
  8004203f2f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203f35:	48 89 c7             	mov    %rax,%rdi
  8004203f38:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  8004203f3f:	00 00 00 
  8004203f42:	ff d0                	callq  *%rax
  8004203f44:	eb 05                	jmp    8004203f4b <page_lookup+0x89>
  8004203f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203f4b:	c9                   	leaveq 
  8004203f4c:	c3                   	retq   

0000008004203f4d <page_remove>:
  8004203f4d:	55                   	push   %rbp
  8004203f4e:	48 89 e5             	mov    %rsp,%rbp
  8004203f51:	48 83 ec 20          	sub    $0x20,%rsp
  8004203f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203f59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203f5d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203f61:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f69:	48 89 ce             	mov    %rcx,%rsi
  8004203f6c:	48 89 c7             	mov    %rax,%rdi
  8004203f6f:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  8004203f76:	00 00 00 
  8004203f79:	ff d0                	callq  *%rax
  8004203f7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f84:	74 38                	je     8004203fbe <page_remove+0x71>
  8004203f86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8e:	48 89 d6             	mov    %rdx,%rsi
  8004203f91:	48 89 c7             	mov    %rax,%rdi
  8004203f94:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203f9b:	00 00 00 
  8004203f9e:	ff d0                	callq  *%rax
  8004203fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203fa4:	48 89 c7             	mov    %rax,%rdi
  8004203fa7:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203fae:	00 00 00 
  8004203fb1:	ff d0                	callq  *%rax
  8004203fb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203fb7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203fbe:	c9                   	leaveq 
  8004203fbf:	c3                   	retq   

0000008004203fc0 <tlb_invalidate>:
  8004203fc0:	55                   	push   %rbp
  8004203fc1:	48 89 e5             	mov    %rsp,%rbp
  8004203fc4:	48 83 ec 20          	sub    $0x20,%rsp
  8004203fc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203fcc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203fd0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203fd5:	75 35                	jne    800420400c <tlb_invalidate+0x4c>
  8004203fd7:	48 b9 c7 8e 21 04 80 	movabs $0x8004218ec7,%rcx
  8004203fde:	00 00 00 
  8004203fe1:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be 72 03 00 00       	mov    $0x372,%esi
  8004203ff0:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204006:	00 00 00 
  8004204009:	41 ff d0             	callq  *%r8
  800420400c:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004204013:	00 00 00 
  8004204016:	ff d0                	callq  *%rax
  8004204018:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420401f:	00 00 00 
  8004204022:	48 98                	cltq   
  8004204024:	48 c1 e0 03          	shl    $0x3,%rax
  8004204028:	48 89 c1             	mov    %rax,%rcx
  800420402b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420402f:	48 01 c8             	add    %rcx,%rax
  8004204032:	48 01 d0             	add    %rdx,%rax
  8004204035:	48 83 c0 08          	add    $0x8,%rax
  8004204039:	48 8b 00             	mov    (%rax),%rax
  800420403c:	48 85 c0             	test   %rax,%rax
  800420403f:	74 3d                	je     800420407e <tlb_invalidate+0xbe>
  8004204041:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004204048:	00 00 00 
  800420404b:	ff d0                	callq  *%rax
  800420404d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004204054:	00 00 00 
  8004204057:	48 98                	cltq   
  8004204059:	48 c1 e0 03          	shl    $0x3,%rax
  800420405d:	48 89 c1             	mov    %rax,%rcx
  8004204060:	48 c1 e1 04          	shl    $0x4,%rcx
  8004204064:	48 01 c8             	add    %rcx,%rax
  8004204067:	48 01 d0             	add    %rdx,%rax
  800420406a:	48 83 c0 08          	add    $0x8,%rax
  800420406e:	48 8b 00             	mov    (%rax),%rax
  8004204071:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004204078:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420407c:	75 0f                	jne    800420408d <tlb_invalidate+0xcd>
  800420407e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004204086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420408a:	0f 01 38             	invlpg (%rax)
  800420408d:	c9                   	leaveq 
  800420408e:	c3                   	retq   

000000800420408f <mmio_map_region>:
  800420408f:	55                   	push   %rbp
  8004204090:	48 89 e5             	mov    %rsp,%rbp
  8004204093:	48 83 ec 30          	sub    $0x30,%rsp
  8004204097:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420409b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420409f:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040a6:	00 00 00 
  80042040a9:	48 8b 00             	mov    (%rax),%rax
  80042040ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042040b0:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  80042040b7:	00 
  80042040b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040c0:	48 01 d0             	add    %rdx,%rax
  80042040c3:	48 83 e8 01          	sub    $0x1,%rax
  80042040c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042040cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042040cf:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040d4:	48 f7 75 f0          	divq   -0x10(%rbp)
  80042040d8:	48 89 d0             	mov    %rdx,%rax
  80042040db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042040df:	48 29 c2             	sub    %rax,%rdx
  80042040e2:	48 89 d0             	mov    %rdx,%rax
  80042040e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042040e9:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040f0:	00 00 00 
  80042040f3:	48 8b 10             	mov    (%rax),%rdx
  80042040f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042040fa:	48 01 c2             	add    %rax,%rdx
  80042040fd:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204104:	00 00 00 
  8004204107:	48 89 10             	mov    %rdx,(%rax)
  800420410a:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204111:	00 00 00 
  8004204114:	48 8b 10             	mov    (%rax),%rdx
  8004204117:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420411e:	00 00 00 
  8004204121:	48 39 c2             	cmp    %rax,%rdx
  8004204124:	76 2a                	jbe    8004204150 <mmio_map_region+0xc1>
  8004204126:	48 ba d8 8e 21 04 80 	movabs $0x8004218ed8,%rdx
  800420412d:	00 00 00 
  8004204130:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004204135:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420413c:	00 00 00 
  800420413f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204144:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420414b:	00 00 00 
  800420414e:	ff d1                	callq  *%rcx
  8004204150:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004204157:	00 00 00 
  800420415a:	48 8b 00             	mov    (%rax),%rax
  800420415d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204161:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204165:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204169:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420416f:	48 89 c7             	mov    %rax,%rdi
  8004204172:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004204179:	00 00 00 
  800420417c:	ff d0                	callq  *%rax
  800420417e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204182:	c9                   	leaveq 
  8004204183:	c3                   	retq   

0000008004204184 <user_mem_check>:
  8004204184:	55                   	push   %rbp
  8004204185:	48 89 e5             	mov    %rsp,%rbp
  8004204188:	48 83 ec 40          	sub    $0x40,%rsp
  800420418c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204190:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004204194:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204198:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800420419b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420419f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042041a3:	48 01 d0             	add    %rdx,%rax
  80042041a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042041aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042041ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042041b5:	00 00 00 
  80042041b8:	48 39 c2             	cmp    %rax,%rdx
  80042041bb:	77 0a                	ja     80042041c7 <user_mem_check+0x43>
  80042041bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042041c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042041c5:	76 1b                	jbe    80042041e2 <user_mem_check+0x5e>
  80042041c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041cb:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042041d2:	00 00 00 
  80042041d5:	48 89 10             	mov    %rdx,(%rax)
  80042041d8:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042041dd:	e9 c0 00 00 00       	jmpq   80042042a2 <user_mem_check+0x11e>
  80042041e2:	e9 a8 00 00 00       	jmpq   800420428f <user_mem_check+0x10b>
  80042041e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042041eb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042041f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042041f6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042041fb:	48 89 ce             	mov    %rcx,%rsi
  80042041fe:	48 89 c7             	mov    %rax,%rdi
  8004204201:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004204208:	00 00 00 
  800420420b:	ff d0                	callq  *%rax
  800420420d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004204211:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004204216:	74 1f                	je     8004204237 <user_mem_check+0xb3>
  8004204218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420421c:	48 8b 10             	mov    (%rax),%rdx
  800420421f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204222:	83 c8 01             	or     $0x1,%eax
  8004204225:	48 98                	cltq   
  8004204227:	48 21 c2             	and    %rax,%rdx
  800420422a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420422d:	83 c8 01             	or     $0x1,%eax
  8004204230:	48 98                	cltq   
  8004204232:	48 39 c2             	cmp    %rax,%rdx
  8004204235:	74 18                	je     800420424f <user_mem_check+0xcb>
  8004204237:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420423b:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  8004204242:	00 00 00 
  8004204245:	48 89 10             	mov    %rdx,(%rax)
  8004204248:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  800420424d:	eb 53                	jmp    80042042a2 <user_mem_check+0x11e>
  800420424f:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204256:	00 
  8004204257:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420425b:	48 83 c0 01          	add    $0x1,%rax
  800420425f:	48 89 c2             	mov    %rax,%rdx
  8004204262:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204266:	48 01 d0             	add    %rdx,%rax
  8004204269:	48 83 e8 01          	sub    $0x1,%rax
  800420426d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204275:	ba 00 00 00 00       	mov    $0x0,%edx
  800420427a:	48 f7 75 e8          	divq   -0x18(%rbp)
  800420427e:	48 89 d0             	mov    %rdx,%rax
  8004204281:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204285:	48 29 c2             	sub    %rax,%rdx
  8004204288:	48 89 d0             	mov    %rdx,%rax
  800420428b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420428f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204293:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204297:	0f 82 4a ff ff ff    	jb     80042041e7 <user_mem_check+0x63>
  800420429d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042a2:	c9                   	leaveq 
  80042042a3:	c3                   	retq   

00000080042042a4 <user_mem_assert>:
  80042042a4:	55                   	push   %rbp
  80042042a5:	48 89 e5             	mov    %rsp,%rbp
  80042042a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042042ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042042b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042042b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042042b8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042042bb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042be:	83 c8 04             	or     $0x4,%eax
  80042042c1:	89 c1                	mov    %eax,%ecx
  80042042c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042042c7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042042cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042cf:	48 89 c7             	mov    %rax,%rdi
  80042042d2:	48 b8 84 41 20 04 80 	movabs $0x8004204184,%rax
  80042042d9:	00 00 00 
  80042042dc:	ff d0                	callq  *%rax
  80042042de:	85 c0                	test   %eax,%eax
  80042042e0:	79 47                	jns    8004204329 <user_mem_assert+0x85>
  80042042e2:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042042e9:	00 00 00 
  80042042ec:	48 8b 10             	mov    (%rax),%rdx
  80042042ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042f3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042042f9:	89 c6                	mov    %eax,%esi
  80042042fb:	48 bf f8 8e 21 04 80 	movabs $0x8004218ef8,%rdi
  8004204302:	00 00 00 
  8004204305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420430a:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  8004204311:	00 00 00 
  8004204314:	ff d1                	callq  *%rcx
  8004204316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431a:	48 89 c7             	mov    %rax,%rdi
  800420431d:	48 b8 1e 8e 20 04 80 	movabs $0x8004208e1e,%rax
  8004204324:	00 00 00 
  8004204327:	ff d0                	callq  *%rax
  8004204329:	c9                   	leaveq 
  800420432a:	c3                   	retq   

000000800420432b <check_page_free_list>:
  800420432b:	55                   	push   %rbp
  800420432c:	48 89 e5             	mov    %rsp,%rbp
  800420432f:	48 83 ec 60          	sub    $0x60,%rsp
  8004204333:	89 f8                	mov    %edi,%eax
  8004204335:	88 45 ac             	mov    %al,-0x54(%rbp)
  8004204338:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420433c:	74 07                	je     8004204345 <check_page_free_list+0x1a>
  800420433e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004204343:	eb 05                	jmp    800420434a <check_page_free_list+0x1f>
  8004204345:	b8 00 02 00 00       	mov    $0x200,%eax
  800420434a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420434d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004204354:	00 
  8004204355:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420435c:	00 
  800420435d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204364:	00 00 00 
  8004204367:	48 8b 00             	mov    (%rax),%rax
  800420436a:	48 85 c0             	test   %rax,%rax
  800420436d:	75 2a                	jne    8004204399 <check_page_free_list+0x6e>
  800420436f:	48 ba 30 8f 21 04 80 	movabs $0x8004218f30,%rdx
  8004204376:	00 00 00 
  8004204379:	be fd 03 00 00       	mov    $0x3fd,%esi
  800420437e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204385:	00 00 00 
  8004204388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420438d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004204394:	00 00 00 
  8004204397:	ff d1                	callq  *%rcx
  8004204399:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420439d:	0f 84 a9 00 00 00    	je     800420444c <check_page_free_list+0x121>
  80042043a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042043a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042043ab:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  80042043af:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042043b3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042043ba:	00 00 00 
  80042043bd:	48 8b 00             	mov    (%rax),%rax
  80042043c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043c4:	eb 58                	jmp    800420441e <check_page_free_list+0xf3>
  80042043c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042043ca:	48 89 c7             	mov    %rax,%rdi
  80042043cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042043d4:	00 00 00 
  80042043d7:	ff d0                	callq  *%rax
  80042043d9:	48 c1 e8 15          	shr    $0x15,%rax
  80042043dd:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042043e2:	48 89 c2             	mov    %rax,%rdx
  80042043e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042043e8:	48 39 c2             	cmp    %rax,%rdx
  80042043eb:	0f 93 c0             	setae  %al
  80042043ee:	0f b6 c0             	movzbl %al,%eax
  80042043f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042043f4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042043f7:	48 98                	cltq   
  80042043f9:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042043fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204402:	48 89 10             	mov    %rdx,(%rax)
  8004204405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204409:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420440c:	48 98                	cltq   
  800420440e:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  8004204413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204417:	48 8b 00             	mov    (%rax),%rax
  800420441a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420441e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204423:	75 a1                	jne    80042043c6 <check_page_free_list+0x9b>
  8004204425:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204429:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204430:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204434:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004204438:	48 89 10             	mov    %rdx,(%rax)
  800420443b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420443f:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204446:	00 00 00 
  8004204449:	48 89 10             	mov    %rdx,(%rax)
  800420444c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204453:	00 00 00 
  8004204456:	48 8b 00             	mov    (%rax),%rax
  8004204459:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420445d:	eb 5e                	jmp    80042044bd <check_page_free_list+0x192>
  800420445f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204463:	48 89 c7             	mov    %rax,%rdi
  8004204466:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420446d:	00 00 00 
  8004204470:	ff d0                	callq  *%rax
  8004204472:	48 c1 e8 15          	shr    $0x15,%rax
  8004204476:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420447b:	48 89 c2             	mov    %rax,%rdx
  800420447e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204481:	48 39 c2             	cmp    %rax,%rdx
  8004204484:	73 2c                	jae    80042044b2 <check_page_free_list+0x187>
  8004204486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420448a:	48 89 c7             	mov    %rax,%rdi
  800420448d:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204494:	00 00 00 
  8004204497:	ff d0                	callq  *%rax
  8004204499:	ba 80 00 00 00       	mov    $0x80,%edx
  800420449e:	be 97 00 00 00       	mov    $0x97,%esi
  80042044a3:	48 89 c7             	mov    %rax,%rdi
  80042044a6:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042044ad:	00 00 00 
  80042044b0:	ff d0                	callq  *%rax
  80042044b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b6:	48 8b 00             	mov    (%rax),%rax
  80042044b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042044c2:	75 9b                	jne    800420445f <check_page_free_list+0x134>
  80042044c4:	bf 00 00 00 00       	mov    $0x0,%edi
  80042044c9:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  80042044d0:	00 00 00 
  80042044d3:	ff d0                	callq  *%rax
  80042044d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042044d9:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042044e0:	00 00 00 
  80042044e3:	48 8b 00             	mov    (%rax),%rax
  80042044e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044ea:	e9 20 03 00 00       	jmpq   800420480f <check_page_free_list+0x4e4>
  80042044ef:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042044f6:	00 00 00 
  80042044f9:	48 8b 00             	mov    (%rax),%rax
  80042044fc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004204500:	73 35                	jae    8004204537 <check_page_free_list+0x20c>
  8004204502:	48 b9 54 8f 21 04 80 	movabs $0x8004218f54,%rcx
  8004204509:	00 00 00 
  800420450c:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204513:	00 00 00 
  8004204516:	be 17 04 00 00       	mov    $0x417,%esi
  800420451b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204522:	00 00 00 
  8004204525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420452a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204531:	00 00 00 
  8004204534:	41 ff d0             	callq  *%r8
  8004204537:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420453e:	00 00 00 
  8004204541:	48 8b 10             	mov    (%rax),%rdx
  8004204544:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420454b:	00 00 00 
  800420454e:	48 8b 00             	mov    (%rax),%rax
  8004204551:	48 c1 e0 04          	shl    $0x4,%rax
  8004204555:	48 01 d0             	add    %rdx,%rax
  8004204558:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420455c:	77 35                	ja     8004204593 <check_page_free_list+0x268>
  800420455e:	48 b9 60 8f 21 04 80 	movabs $0x8004218f60,%rcx
  8004204565:	00 00 00 
  8004204568:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420456f:	00 00 00 
  8004204572:	be 18 04 00 00       	mov    $0x418,%esi
  8004204577:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420457e:	00 00 00 
  8004204581:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204586:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420458d:	00 00 00 
  8004204590:	41 ff d0             	callq  *%r8
  8004204593:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204597:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420459e:	00 00 00 
  80042045a1:	48 8b 00             	mov    (%rax),%rax
  80042045a4:	48 29 c2             	sub    %rax,%rdx
  80042045a7:	48 89 d0             	mov    %rdx,%rax
  80042045aa:	83 e0 0f             	and    $0xf,%eax
  80042045ad:	48 85 c0             	test   %rax,%rax
  80042045b0:	74 35                	je     80042045e7 <check_page_free_list+0x2bc>
  80042045b2:	48 b9 78 8f 21 04 80 	movabs $0x8004218f78,%rcx
  80042045b9:	00 00 00 
  80042045bc:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042045c3:	00 00 00 
  80042045c6:	be 19 04 00 00       	mov    $0x419,%esi
  80042045cb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042045d2:	00 00 00 
  80042045d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045da:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042045e1:	00 00 00 
  80042045e4:	41 ff d0             	callq  *%r8
  80042045e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045eb:	48 89 c7             	mov    %rax,%rdi
  80042045ee:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042045f5:	00 00 00 
  80042045f8:	ff d0                	callq  *%rax
  80042045fa:	48 85 c0             	test   %rax,%rax
  80042045fd:	75 35                	jne    8004204634 <check_page_free_list+0x309>
  80042045ff:	48 b9 aa 8f 21 04 80 	movabs $0x8004218faa,%rcx
  8004204606:	00 00 00 
  8004204609:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204610:	00 00 00 
  8004204613:	be 1c 04 00 00       	mov    $0x41c,%esi
  8004204618:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420461f:	00 00 00 
  8004204622:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204627:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420462e:	00 00 00 
  8004204631:	41 ff d0             	callq  *%r8
  8004204634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204638:	48 89 c7             	mov    %rax,%rdi
  800420463b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204642:	00 00 00 
  8004204645:	ff d0                	callq  *%rax
  8004204647:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420464d:	75 35                	jne    8004204684 <check_page_free_list+0x359>
  800420464f:	48 b9 bb 8f 21 04 80 	movabs $0x8004218fbb,%rcx
  8004204656:	00 00 00 
  8004204659:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204660:	00 00 00 
  8004204663:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204668:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420466f:	00 00 00 
  8004204672:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204677:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420467e:	00 00 00 
  8004204681:	41 ff d0             	callq  *%r8
  8004204684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204688:	48 89 c7             	mov    %rax,%rdi
  800420468b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204692:	00 00 00 
  8004204695:	ff d0                	callq  *%rax
  8004204697:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  800420469d:	75 35                	jne    80042046d4 <check_page_free_list+0x3a9>
  800420469f:	48 b9 d8 8f 21 04 80 	movabs $0x8004218fd8,%rcx
  80042046a6:	00 00 00 
  80042046a9:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042046b0:	00 00 00 
  80042046b3:	be 1e 04 00 00       	mov    $0x41e,%esi
  80042046b8:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042046bf:	00 00 00 
  80042046c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042046c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042046ce:	00 00 00 
  80042046d1:	41 ff d0             	callq  *%r8
  80042046d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046d8:	48 89 c7             	mov    %rax,%rdi
  80042046db:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042046e2:	00 00 00 
  80042046e5:	ff d0                	callq  *%rax
  80042046e7:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042046ed:	75 35                	jne    8004204724 <check_page_free_list+0x3f9>
  80042046ef:	48 b9 fb 8f 21 04 80 	movabs $0x8004218ffb,%rcx
  80042046f6:	00 00 00 
  80042046f9:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204700:	00 00 00 
  8004204703:	be 1f 04 00 00       	mov    $0x41f,%esi
  8004204708:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420470f:	00 00 00 
  8004204712:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204717:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420471e:	00 00 00 
  8004204721:	41 ff d0             	callq  *%r8
  8004204724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204728:	48 89 c7             	mov    %rax,%rdi
  800420472b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204732:	00 00 00 
  8004204735:	ff d0                	callq  *%rax
  8004204737:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  800420473d:	76 4e                	jbe    800420478d <check_page_free_list+0x462>
  800420473f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204743:	48 89 c7             	mov    %rax,%rdi
  8004204746:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420474d:	00 00 00 
  8004204750:	ff d0                	callq  *%rax
  8004204752:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204756:	73 35                	jae    800420478d <check_page_free_list+0x462>
  8004204758:	48 b9 18 90 21 04 80 	movabs $0x8004219018,%rcx
  800420475f:	00 00 00 
  8004204762:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204769:	00 00 00 
  800420476c:	be 20 04 00 00       	mov    $0x420,%esi
  8004204771:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204778:	00 00 00 
  800420477b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204780:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204787:	00 00 00 
  800420478a:	41 ff d0             	callq  *%r8
  800420478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204791:	48 89 c7             	mov    %rax,%rdi
  8004204794:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420479b:	00 00 00 
  800420479e:	ff d0                	callq  *%rax
  80042047a0:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  80042047a6:	75 35                	jne    80042047dd <check_page_free_list+0x4b2>
  80042047a8:	48 b9 5d 90 21 04 80 	movabs $0x800421905d,%rcx
  80042047af:	00 00 00 
  80042047b2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042047b9:	00 00 00 
  80042047bc:	be 23 04 00 00       	mov    $0x423,%esi
  80042047c1:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042047c8:	00 00 00 
  80042047cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042047d7:	00 00 00 
  80042047da:	41 ff d0             	callq  *%r8
  80042047dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047e1:	48 89 c7             	mov    %rax,%rdi
  80042047e4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042047eb:	00 00 00 
  80042047ee:	ff d0                	callq  *%rax
  80042047f0:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042047f6:	77 07                	ja     80042047ff <check_page_free_list+0x4d4>
  80042047f8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042047fd:	eb 05                	jmp    8004204804 <check_page_free_list+0x4d9>
  80042047ff:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204808:	48 8b 00             	mov    (%rax),%rax
  800420480b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420480f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204814:	0f 85 d5 fc ff ff    	jne    80042044ef <check_page_free_list+0x1c4>
  800420481a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420481f:	75 35                	jne    8004204856 <check_page_free_list+0x52b>
  8004204821:	48 b9 7a 90 21 04 80 	movabs $0x800421907a,%rcx
  8004204828:	00 00 00 
  800420482b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204832:	00 00 00 
  8004204835:	be 2c 04 00 00       	mov    $0x42c,%esi
  800420483a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204841:	00 00 00 
  8004204844:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204849:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204850:	00 00 00 
  8004204853:	41 ff d0             	callq  *%r8
  8004204856:	c9                   	leaveq 
  8004204857:	c3                   	retq   

0000008004204858 <check_page_alloc>:
  8004204858:	55                   	push   %rbp
  8004204859:	48 89 e5             	mov    %rsp,%rbp
  800420485c:	48 83 ec 40          	sub    $0x40,%rsp
  8004204860:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204867:	00 00 00 
  800420486a:	48 8b 00             	mov    (%rax),%rax
  800420486d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204871:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204878:	eb 37                	jmp    80042048b1 <check_page_alloc+0x59>
  800420487a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420487e:	48 89 c7             	mov    %rax,%rdi
  8004204881:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204888:	00 00 00 
  800420488b:	ff d0                	callq  *%rax
  800420488d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204892:	be 97 00 00 00       	mov    $0x97,%esi
  8004204897:	48 89 c7             	mov    %rax,%rdi
  800420489a:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042048a1:	00 00 00 
  80042048a4:	ff d0                	callq  *%rax
  80042048a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048aa:	48 8b 00             	mov    (%rax),%rax
  80042048ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042048b6:	75 c2                	jne    800420487a <check_page_alloc+0x22>
  80042048b8:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042048bf:	00 00 00 
  80042048c2:	48 8b 00             	mov    (%rax),%rax
  80042048c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  80042048d0:	e9 ec 01 00 00       	jmpq   8004204ac1 <check_page_alloc+0x269>
  80042048d5:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042048dc:	00 00 00 
  80042048df:	48 8b 00             	mov    (%rax),%rax
  80042048e2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042048e6:	73 35                	jae    800420491d <check_page_alloc+0xc5>
  80042048e8:	48 b9 8b 90 21 04 80 	movabs $0x800421908b,%rcx
  80042048ef:	00 00 00 
  80042048f2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042048f9:	00 00 00 
  80042048fc:	be 46 04 00 00       	mov    $0x446,%esi
  8004204901:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204908:	00 00 00 
  800420490b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204910:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204917:	00 00 00 
  800420491a:	41 ff d0             	callq  *%r8
  800420491d:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004204924:	00 00 00 
  8004204927:	48 8b 10             	mov    (%rax),%rdx
  800420492a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004204931:	00 00 00 
  8004204934:	48 8b 00             	mov    (%rax),%rax
  8004204937:	48 c1 e0 04          	shl    $0x4,%rax
  800420493b:	48 01 d0             	add    %rdx,%rax
  800420493e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204942:	77 35                	ja     8004204979 <check_page_alloc+0x121>
  8004204944:	48 b9 98 90 21 04 80 	movabs $0x8004219098,%rcx
  800420494b:	00 00 00 
  800420494e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204955:	00 00 00 
  8004204958:	be 47 04 00 00       	mov    $0x447,%esi
  800420495d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204964:	00 00 00 
  8004204967:	b8 00 00 00 00       	mov    $0x0,%eax
  800420496c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204973:	00 00 00 
  8004204976:	41 ff d0             	callq  *%r8
  8004204979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420497d:	48 89 c7             	mov    %rax,%rdi
  8004204980:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204987:	00 00 00 
  800420498a:	ff d0                	callq  *%rax
  800420498c:	48 85 c0             	test   %rax,%rax
  800420498f:	75 35                	jne    80042049c6 <check_page_alloc+0x16e>
  8004204991:	48 b9 ad 90 21 04 80 	movabs $0x80042190ad,%rcx
  8004204998:	00 00 00 
  800420499b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042049a2:	00 00 00 
  80042049a5:	be 4a 04 00 00       	mov    $0x44a,%esi
  80042049aa:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042049b1:	00 00 00 
  80042049b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042049c0:	00 00 00 
  80042049c3:	41 ff d0             	callq  *%r8
  80042049c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042049ca:	48 89 c7             	mov    %rax,%rdi
  80042049cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042049d4:	00 00 00 
  80042049d7:	ff d0                	callq  *%rax
  80042049d9:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042049df:	75 35                	jne    8004204a16 <check_page_alloc+0x1be>
  80042049e1:	48 b9 bf 90 21 04 80 	movabs $0x80042190bf,%rcx
  80042049e8:	00 00 00 
  80042049eb:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042049f2:	00 00 00 
  80042049f5:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042049fa:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204a01:	00 00 00 
  8004204a04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a10:	00 00 00 
  8004204a13:	41 ff d0             	callq  *%r8
  8004204a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a1a:	48 89 c7             	mov    %rax,%rdi
  8004204a1d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a24:	00 00 00 
  8004204a27:	ff d0                	callq  *%rax
  8004204a29:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204a2f:	75 35                	jne    8004204a66 <check_page_alloc+0x20e>
  8004204a31:	48 b9 e0 90 21 04 80 	movabs $0x80042190e0,%rcx
  8004204a38:	00 00 00 
  8004204a3b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204a42:	00 00 00 
  8004204a45:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204a4a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204a51:	00 00 00 
  8004204a54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a59:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a60:	00 00 00 
  8004204a63:	41 ff d0             	callq  *%r8
  8004204a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a6a:	48 89 c7             	mov    %rax,%rdi
  8004204a6d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a74:	00 00 00 
  8004204a77:	ff d0                	callq  *%rax
  8004204a79:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204a7f:	75 35                	jne    8004204ab6 <check_page_alloc+0x25e>
  8004204a81:	48 b9 04 91 21 04 80 	movabs $0x8004219104,%rcx
  8004204a88:	00 00 00 
  8004204a8b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204a92:	00 00 00 
  8004204a95:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204a9a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204aa1:	00 00 00 
  8004204aa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204aa9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ab0:	00 00 00 
  8004204ab3:	41 ff d0             	callq  *%r8
  8004204ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204aba:	48 8b 00             	mov    (%rax),%rax
  8004204abd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ac1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ac6:	0f 85 09 fe ff ff    	jne    80042048d5 <check_page_alloc+0x7d>
  8004204acc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204ad3:	00 
  8004204ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ad8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ae4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ae9:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204af0:	00 00 00 
  8004204af3:	ff d0                	callq  *%rax
  8004204af5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204af9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204afe:	75 35                	jne    8004204b35 <check_page_alloc+0x2dd>
  8004204b00:	48 b9 1f 91 21 04 80 	movabs $0x800421911f,%rcx
  8004204b07:	00 00 00 
  8004204b0a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204b11:	00 00 00 
  8004204b14:	be 51 04 00 00       	mov    $0x451,%esi
  8004204b19:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204b20:	00 00 00 
  8004204b23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b2f:	00 00 00 
  8004204b32:	41 ff d0             	callq  *%r8
  8004204b35:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b3a:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b41:	00 00 00 
  8004204b44:	ff d0                	callq  *%rax
  8004204b46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204b4a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204b4f:	75 35                	jne    8004204b86 <check_page_alloc+0x32e>
  8004204b51:	48 b9 35 91 21 04 80 	movabs $0x8004219135,%rcx
  8004204b58:	00 00 00 
  8004204b5b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204b62:	00 00 00 
  8004204b65:	be 52 04 00 00       	mov    $0x452,%esi
  8004204b6a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204b71:	00 00 00 
  8004204b74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b79:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b80:	00 00 00 
  8004204b83:	41 ff d0             	callq  *%r8
  8004204b86:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b8b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b92:	00 00 00 
  8004204b95:	ff d0                	callq  *%rax
  8004204b97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204b9b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ba0:	75 35                	jne    8004204bd7 <check_page_alloc+0x37f>
  8004204ba2:	48 b9 4b 91 21 04 80 	movabs $0x800421914b,%rcx
  8004204ba9:	00 00 00 
  8004204bac:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204bb3:	00 00 00 
  8004204bb6:	be 53 04 00 00       	mov    $0x453,%esi
  8004204bbb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204bc2:	00 00 00 
  8004204bc5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204bd1:	00 00 00 
  8004204bd4:	41 ff d0             	callq  *%r8
  8004204bd7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204bdc:	75 35                	jne    8004204c13 <check_page_alloc+0x3bb>
  8004204bde:	48 b9 61 91 21 04 80 	movabs $0x8004219161,%rcx
  8004204be5:	00 00 00 
  8004204be8:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204bef:	00 00 00 
  8004204bf2:	be 54 04 00 00       	mov    $0x454,%esi
  8004204bf7:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204bfe:	00 00 00 
  8004204c01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c0d:	00 00 00 
  8004204c10:	41 ff d0             	callq  *%r8
  8004204c13:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204c18:	74 0a                	je     8004204c24 <check_page_alloc+0x3cc>
  8004204c1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c1e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c22:	75 35                	jne    8004204c59 <check_page_alloc+0x401>
  8004204c24:	48 b9 65 91 21 04 80 	movabs $0x8004219165,%rcx
  8004204c2b:	00 00 00 
  8004204c2e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204c35:	00 00 00 
  8004204c38:	be 55 04 00 00       	mov    $0x455,%esi
  8004204c3d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204c44:	00 00 00 
  8004204c47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c4c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c53:	00 00 00 
  8004204c56:	41 ff d0             	callq  *%r8
  8004204c59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204c5e:	74 14                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c64:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204c68:	74 0a                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c6e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c72:	75 35                	jne    8004204ca9 <check_page_alloc+0x451>
  8004204c74:	48 b9 78 91 21 04 80 	movabs $0x8004219178,%rcx
  8004204c7b:	00 00 00 
  8004204c7e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204c85:	00 00 00 
  8004204c88:	be 56 04 00 00       	mov    $0x456,%esi
  8004204c8d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204c94:	00 00 00 
  8004204c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c9c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ca3:	00 00 00 
  8004204ca6:	41 ff d0             	callq  *%r8
  8004204ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cad:	48 89 c7             	mov    %rax,%rdi
  8004204cb0:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204cb7:	00 00 00 
  8004204cba:	ff d0                	callq  *%rax
  8004204cbc:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204cc3:	00 00 00 
  8004204cc6:	48 8b 12             	mov    (%rdx),%rdx
  8004204cc9:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204ccd:	48 39 d0             	cmp    %rdx,%rax
  8004204cd0:	72 35                	jb     8004204d07 <check_page_alloc+0x4af>
  8004204cd2:	48 b9 98 91 21 04 80 	movabs $0x8004219198,%rcx
  8004204cd9:	00 00 00 
  8004204cdc:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204ce3:	00 00 00 
  8004204ce6:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ceb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204cf2:	00 00 00 
  8004204cf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cfa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d01:	00 00 00 
  8004204d04:	41 ff d0             	callq  *%r8
  8004204d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0b:	48 89 c7             	mov    %rax,%rdi
  8004204d0e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d15:	00 00 00 
  8004204d18:	ff d0                	callq  *%rax
  8004204d1a:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d21:	00 00 00 
  8004204d24:	48 8b 12             	mov    (%rdx),%rdx
  8004204d27:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d2b:	48 39 d0             	cmp    %rdx,%rax
  8004204d2e:	72 35                	jb     8004204d65 <check_page_alloc+0x50d>
  8004204d30:	48 b9 b5 91 21 04 80 	movabs $0x80042191b5,%rcx
  8004204d37:	00 00 00 
  8004204d3a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204d41:	00 00 00 
  8004204d44:	be 58 04 00 00       	mov    $0x458,%esi
  8004204d49:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204d50:	00 00 00 
  8004204d53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d58:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d5f:	00 00 00 
  8004204d62:	41 ff d0             	callq  *%r8
  8004204d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d69:	48 89 c7             	mov    %rax,%rdi
  8004204d6c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d73:	00 00 00 
  8004204d76:	ff d0                	callq  *%rax
  8004204d78:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d7f:	00 00 00 
  8004204d82:	48 8b 12             	mov    (%rdx),%rdx
  8004204d85:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d89:	48 39 d0             	cmp    %rdx,%rax
  8004204d8c:	72 35                	jb     8004204dc3 <check_page_alloc+0x56b>
  8004204d8e:	48 b9 d2 91 21 04 80 	movabs $0x80042191d2,%rcx
  8004204d95:	00 00 00 
  8004204d98:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204d9f:	00 00 00 
  8004204da2:	be 59 04 00 00       	mov    $0x459,%esi
  8004204da7:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204dae:	00 00 00 
  8004204db1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204db6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204dbd:	00 00 00 
  8004204dc0:	41 ff d0             	callq  *%r8
  8004204dc3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204dca:	00 00 00 
  8004204dcd:	48 8b 00             	mov    (%rax),%rax
  8004204dd0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204dd4:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204ddb:	00 00 00 
  8004204dde:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204de5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204dea:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204df1:	00 00 00 
  8004204df4:	ff d0                	callq  *%rax
  8004204df6:	48 85 c0             	test   %rax,%rax
  8004204df9:	74 35                	je     8004204e30 <check_page_alloc+0x5d8>
  8004204dfb:	48 b9 ef 91 21 04 80 	movabs $0x80042191ef,%rcx
  8004204e02:	00 00 00 
  8004204e05:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204e0c:	00 00 00 
  8004204e0f:	be 60 04 00 00       	mov    $0x460,%esi
  8004204e14:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204e1b:	00 00 00 
  8004204e1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e23:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204e2a:	00 00 00 
  8004204e2d:	41 ff d0             	callq  *%r8
  8004204e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204e34:	48 89 c7             	mov    %rax,%rdi
  8004204e37:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e3e:	00 00 00 
  8004204e41:	ff d0                	callq  *%rax
  8004204e43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e47:	48 89 c7             	mov    %rax,%rdi
  8004204e4a:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e51:	00 00 00 
  8004204e54:	ff d0                	callq  *%rax
  8004204e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e5a:	48 89 c7             	mov    %rax,%rdi
  8004204e5d:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e64:	00 00 00 
  8004204e67:	ff d0                	callq  *%rax
  8004204e69:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204e70:	00 
  8004204e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e81:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204e86:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204e8d:	00 00 00 
  8004204e90:	ff d0                	callq  *%rax
  8004204e92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e96:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e9b:	75 35                	jne    8004204ed2 <check_page_alloc+0x67a>
  8004204e9d:	48 b9 1f 91 21 04 80 	movabs $0x800421911f,%rcx
  8004204ea4:	00 00 00 
  8004204ea7:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204eae:	00 00 00 
  8004204eb1:	be 67 04 00 00       	mov    $0x467,%esi
  8004204eb6:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204ebd:	00 00 00 
  8004204ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ec5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ecc:	00 00 00 
  8004204ecf:	41 ff d0             	callq  *%r8
  8004204ed2:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ed7:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204ede:	00 00 00 
  8004204ee1:	ff d0                	callq  *%rax
  8004204ee3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204ee7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204eec:	75 35                	jne    8004204f23 <check_page_alloc+0x6cb>
  8004204eee:	48 b9 35 91 21 04 80 	movabs $0x8004219135,%rcx
  8004204ef5:	00 00 00 
  8004204ef8:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204eff:	00 00 00 
  8004204f02:	be 68 04 00 00       	mov    $0x468,%esi
  8004204f07:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204f0e:	00 00 00 
  8004204f11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f16:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f1d:	00 00 00 
  8004204f20:	41 ff d0             	callq  *%r8
  8004204f23:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f28:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204f2f:	00 00 00 
  8004204f32:	ff d0                	callq  *%rax
  8004204f34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204f38:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204f3d:	75 35                	jne    8004204f74 <check_page_alloc+0x71c>
  8004204f3f:	48 b9 4b 91 21 04 80 	movabs $0x800421914b,%rcx
  8004204f46:	00 00 00 
  8004204f49:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204f50:	00 00 00 
  8004204f53:	be 69 04 00 00       	mov    $0x469,%esi
  8004204f58:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204f5f:	00 00 00 
  8004204f62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f67:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f6e:	00 00 00 
  8004204f71:	41 ff d0             	callq  *%r8
  8004204f74:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204f79:	75 35                	jne    8004204fb0 <check_page_alloc+0x758>
  8004204f7b:	48 b9 61 91 21 04 80 	movabs $0x8004219161,%rcx
  8004204f82:	00 00 00 
  8004204f85:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204f8c:	00 00 00 
  8004204f8f:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204f94:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204f9b:	00 00 00 
  8004204f9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fa3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204faa:	00 00 00 
  8004204fad:	41 ff d0             	callq  *%r8
  8004204fb0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204fb5:	74 0a                	je     8004204fc1 <check_page_alloc+0x769>
  8004204fb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204fbb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204fbf:	75 35                	jne    8004204ff6 <check_page_alloc+0x79e>
  8004204fc1:	48 b9 65 91 21 04 80 	movabs $0x8004219165,%rcx
  8004204fc8:	00 00 00 
  8004204fcb:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004204fd2:	00 00 00 
  8004204fd5:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204fda:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004204fe1:	00 00 00 
  8004204fe4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fe9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ff0:	00 00 00 
  8004204ff3:	41 ff d0             	callq  *%r8
  8004204ff6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ffb:	74 14                	je     8004205011 <check_page_alloc+0x7b9>
  8004204ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205001:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004205005:	74 0a                	je     8004205011 <check_page_alloc+0x7b9>
  8004205007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420500b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420500f:	75 35                	jne    8004205046 <check_page_alloc+0x7ee>
  8004205011:	48 b9 78 91 21 04 80 	movabs $0x8004219178,%rcx
  8004205018:	00 00 00 
  800420501b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205022:	00 00 00 
  8004205025:	be 6c 04 00 00       	mov    $0x46c,%esi
  800420502a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205031:	00 00 00 
  8004205034:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205039:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205040:	00 00 00 
  8004205043:	41 ff d0             	callq  *%r8
  8004205046:	bf 00 00 00 00       	mov    $0x0,%edi
  800420504b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205052:	00 00 00 
  8004205055:	ff d0                	callq  *%rax
  8004205057:	48 85 c0             	test   %rax,%rax
  800420505a:	74 35                	je     8004205091 <check_page_alloc+0x839>
  800420505c:	48 b9 ef 91 21 04 80 	movabs $0x80042191ef,%rcx
  8004205063:	00 00 00 
  8004205066:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420506d:	00 00 00 
  8004205070:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004205075:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420507c:	00 00 00 
  800420507f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205084:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420508b:	00 00 00 
  800420508e:	41 ff d0             	callq  *%r8
  8004205091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205095:	48 89 c7             	mov    %rax,%rdi
  8004205098:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420509f:	00 00 00 
  80042050a2:	ff d0                	callq  *%rax
  80042050a4:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042050ae:	48 89 c7             	mov    %rax,%rdi
  80042050b1:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042050b8:	00 00 00 
  80042050bb:	ff d0                	callq  *%rax
  80042050bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050c1:	48 89 c7             	mov    %rax,%rdi
  80042050c4:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042050cb:	00 00 00 
  80042050ce:	ff d0                	callq  *%rax
  80042050d0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042050d5:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042050dc:	00 00 00 
  80042050df:	ff d0                	callq  *%rax
  80042050e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042050e5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042050ea:	75 35                	jne    8004205121 <check_page_alloc+0x8c9>
  80042050ec:	48 b9 fe 91 21 04 80 	movabs $0x80042191fe,%rcx
  80042050f3:	00 00 00 
  80042050f6:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042050fd:	00 00 00 
  8004205100:	be 72 04 00 00       	mov    $0x472,%esi
  8004205105:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420510c:	00 00 00 
  800420510f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205114:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420511b:	00 00 00 
  800420511e:	41 ff d0             	callq  *%r8
  8004205121:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205126:	74 0a                	je     8004205132 <check_page_alloc+0x8da>
  8004205128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420512c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205130:	74 35                	je     8004205167 <check_page_alloc+0x90f>
  8004205132:	48 b9 1c 92 21 04 80 	movabs $0x800421921c,%rcx
  8004205139:	00 00 00 
  800420513c:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205143:	00 00 00 
  8004205146:	be 73 04 00 00       	mov    $0x473,%esi
  800420514b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205152:	00 00 00 
  8004205155:	b8 00 00 00 00       	mov    $0x0,%eax
  800420515a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205161:	00 00 00 
  8004205164:	41 ff d0             	callq  *%r8
  8004205167:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420516b:	48 89 c7             	mov    %rax,%rdi
  800420516e:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004205175:	00 00 00 
  8004205178:	ff d0                	callq  *%rax
  800420517a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420517e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205185:	eb 4d                	jmp    80042051d4 <check_page_alloc+0x97c>
  8004205187:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420518a:	48 63 d0             	movslq %eax,%rdx
  800420518d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205191:	48 01 d0             	add    %rdx,%rax
  8004205194:	0f b6 00             	movzbl (%rax),%eax
  8004205197:	84 c0                	test   %al,%al
  8004205199:	74 35                	je     80042051d0 <check_page_alloc+0x978>
  800420519b:	48 b9 2c 92 21 04 80 	movabs $0x800421922c,%rcx
  80042051a2:	00 00 00 
  80042051a5:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042051ac:	00 00 00 
  80042051af:	be 76 04 00 00       	mov    $0x476,%esi
  80042051b4:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042051bb:	00 00 00 
  80042051be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042051ca:	00 00 00 
  80042051cd:	41 ff d0             	callq  *%r8
  80042051d0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042051d4:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042051db:	7e aa                	jle    8004205187 <check_page_alloc+0x92f>
  80042051dd:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042051e4:	00 00 00 
  80042051e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042051eb:	48 89 10             	mov    %rdx,(%rax)
  80042051ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042051f2:	48 89 c7             	mov    %rax,%rdi
  80042051f5:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042051fc:	00 00 00 
  80042051ff:	ff d0                	callq  *%rax
  8004205201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205205:	48 89 c7             	mov    %rax,%rdi
  8004205208:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420520f:	00 00 00 
  8004205212:	ff d0                	callq  *%rax
  8004205214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205218:	48 89 c7             	mov    %rax,%rdi
  800420521b:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004205222:	00 00 00 
  8004205225:	ff d0                	callq  *%rax
  8004205227:	48 bf 38 92 21 04 80 	movabs $0x8004219238,%rdi
  800420522e:	00 00 00 
  8004205231:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205236:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420523d:	00 00 00 
  8004205240:	ff d2                	callq  *%rdx
  8004205242:	c9                   	leaveq 
  8004205243:	c3                   	retq   

0000008004205244 <check_boot_pml4e>:
  8004205244:	55                   	push   %rbp
  8004205245:	48 89 e5             	mov    %rsp,%rbp
  8004205248:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420524f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205256:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420525d:	00 00 00 
  8004205260:	48 8b 00             	mov    (%rax),%rax
  8004205263:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205267:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  800420526e:	00 
  800420526f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205276:	00 00 00 
  8004205279:	48 8b 00             	mov    (%rax),%rax
  800420527c:	48 c1 e0 04          	shl    $0x4,%rax
  8004205280:	48 89 c2             	mov    %rax,%rdx
  8004205283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205287:	48 01 d0             	add    %rdx,%rax
  800420528a:	48 83 e8 01          	sub    $0x1,%rax
  800420528e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205296:	ba 00 00 00 00       	mov    $0x0,%edx
  800420529b:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420529f:	48 89 d0             	mov    %rdx,%rax
  80042052a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042052a6:	48 29 c2             	sub    %rax,%rdx
  80042052a9:	48 89 d0             	mov    %rdx,%rax
  80042052ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042052b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052b7:	00 
  80042052b8:	e9 d4 00 00 00       	jmpq   8004205391 <check_boot_pml4e+0x14d>
  80042052bd:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  80042052c4:	00 00 00 
  80042052c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052cb:	48 01 c2             	add    %rax,%rdx
  80042052ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052d2:	48 89 d6             	mov    %rdx,%rsi
  80042052d5:	48 89 c7             	mov    %rax,%rdi
  80042052d8:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042052df:	00 00 00 
  80042052e2:	ff d0                	callq  *%rax
  80042052e4:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  80042052eb:	00 00 00 
  80042052ee:	48 8b 12             	mov    (%rdx),%rdx
  80042052f1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042052f5:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052fc:	00 00 00 
  80042052ff:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  8004205303:	77 32                	ja     8004205337 <check_boot_pml4e+0xf3>
  8004205305:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205309:	48 89 c1             	mov    %rax,%rcx
  800420530c:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004205313:	00 00 00 
  8004205316:	be 96 04 00 00       	mov    $0x496,%esi
  800420531b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205322:	00 00 00 
  8004205325:	b8 00 00 00 00       	mov    $0x0,%eax
  800420532a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205331:	00 00 00 
  8004205334:	41 ff d0             	callq  *%r8
  8004205337:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420533e:	ff ff ff 
  8004205341:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205345:	48 01 d1             	add    %rdx,%rcx
  8004205348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420534c:	48 01 ca             	add    %rcx,%rdx
  800420534f:	48 39 d0             	cmp    %rdx,%rax
  8004205352:	74 35                	je     8004205389 <check_boot_pml4e+0x145>
  8004205354:	48 b9 58 92 21 04 80 	movabs $0x8004219258,%rcx
  800420535b:	00 00 00 
  800420535e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205365:	00 00 00 
  8004205368:	be 96 04 00 00       	mov    $0x496,%esi
  800420536d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205374:	00 00 00 
  8004205377:	b8 00 00 00 00       	mov    $0x0,%eax
  800420537c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205383:	00 00 00 
  8004205386:	41 ff d0             	callq  *%r8
  8004205389:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205390:	00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205399:	0f 82 1e ff ff ff    	jb     80042052bd <check_boot_pml4e+0x79>
  800420539f:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  80042053a6:	00 
  80042053a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053ab:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042053b1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042053b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042053b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042053be:	48 f7 75 c8          	divq   -0x38(%rbp)
  80042053c2:	48 89 d0             	mov    %rdx,%rax
  80042053c5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042053c9:	48 29 c2             	sub    %rax,%rdx
  80042053cc:	48 89 d0             	mov    %rdx,%rax
  80042053cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042053d3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042053da:	00 
  80042053db:	e9 d4 00 00 00       	jmpq   80042054b4 <check_boot_pml4e+0x270>
  80042053e0:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042053e7:	00 00 00 
  80042053ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053ee:	48 01 c2             	add    %rax,%rdx
  80042053f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053f5:	48 89 d6             	mov    %rdx,%rsi
  80042053f8:	48 89 c7             	mov    %rax,%rdi
  80042053fb:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004205402:	00 00 00 
  8004205405:	ff d0                	callq  *%rax
  8004205407:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  800420540e:	00 00 00 
  8004205411:	48 8b 12             	mov    (%rdx),%rdx
  8004205414:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004205418:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420541f:	00 00 00 
  8004205422:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  8004205426:	77 32                	ja     800420545a <check_boot_pml4e+0x216>
  8004205428:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420542c:	48 89 c1             	mov    %rax,%rcx
  800420542f:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  8004205436:	00 00 00 
  8004205439:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420543e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205445:	00 00 00 
  8004205448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420544d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205454:	00 00 00 
  8004205457:	41 ff d0             	callq  *%r8
  800420545a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205461:	ff ff ff 
  8004205464:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205468:	48 01 d1             	add    %rdx,%rcx
  800420546b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420546f:	48 01 ca             	add    %rcx,%rdx
  8004205472:	48 39 d0             	cmp    %rdx,%rax
  8004205475:	74 35                	je     80042054ac <check_boot_pml4e+0x268>
  8004205477:	48 b9 90 92 21 04 80 	movabs $0x8004219290,%rcx
  800420547e:	00 00 00 
  8004205481:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205488:	00 00 00 
  800420548b:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205490:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205497:	00 00 00 
  800420549a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420549f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042054a6:	00 00 00 
  80042054a9:	41 ff d0             	callq  *%r8
  80042054ac:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042054b3:	00 
  80042054b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054b8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042054bc:	0f 82 1e ff ff ff    	jb     80042053e0 <check_boot_pml4e+0x19c>
  80042054c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042054c9:	00 
  80042054ca:	eb 6a                	jmp    8004205536 <check_boot_pml4e+0x2f2>
  80042054cc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054d3:	00 00 00 
  80042054d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054da:	48 01 c2             	add    %rax,%rdx
  80042054dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042054e1:	48 89 d6             	mov    %rdx,%rsi
  80042054e4:	48 89 c7             	mov    %rax,%rdi
  80042054e7:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042054ee:	00 00 00 
  80042054f1:	ff d0                	callq  *%rax
  80042054f3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042054f7:	74 35                	je     800420552e <check_boot_pml4e+0x2ea>
  80042054f9:	48 b9 c8 92 21 04 80 	movabs $0x80042192c8,%rcx
  8004205500:	00 00 00 
  8004205503:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420550a:	00 00 00 
  800420550d:	be a2 04 00 00       	mov    $0x4a2,%esi
  8004205512:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205519:	00 00 00 
  800420551c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205521:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205528:	00 00 00 
  800420552b:	41 ff d0             	callq  *%r8
  800420552e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205535:	00 
  8004205536:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420553d:	00 00 00 
  8004205540:	48 8b 00             	mov    (%rax),%rax
  8004205543:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205547:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420554b:	0f 87 7b ff ff ff    	ja     80042054cc <check_boot_pml4e+0x288>
  8004205551:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205558:	00 
  8004205559:	e9 a1 01 00 00       	jmpq   80042056ff <check_boot_pml4e+0x4bb>
  800420555e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205562:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205566:	48 89 d0             	mov    %rdx,%rax
  8004205569:	48 01 c0             	add    %rax,%rax
  800420556c:	48 01 d0             	add    %rdx,%rax
  800420556f:	48 c1 e0 0f          	shl    $0xf,%rax
  8004205573:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420557a:	00 00 00 
  800420557d:	48 29 c2             	sub    %rax,%rdx
  8004205580:	48 89 d0             	mov    %rdx,%rax
  8004205583:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205587:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420558e:	00 
  800420558f:	e9 e0 00 00 00       	jmpq   8004205674 <check_boot_pml4e+0x430>
  8004205594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205598:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420559c:	48 01 d0             	add    %rdx,%rax
  800420559f:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  80042055a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042055aa:	48 89 d6             	mov    %rdx,%rsi
  80042055ad:	48 89 c7             	mov    %rax,%rdi
  80042055b0:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042055b7:	00 00 00 
  80042055ba:	ff d0                	callq  *%rax
  80042055bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042055c0:	48 89 d1             	mov    %rdx,%rcx
  80042055c3:	48 c1 e1 10          	shl    $0x10,%rcx
  80042055c7:	48 ba 00 e0 69 04 80 	movabs $0x800469e000,%rdx
  80042055ce:	00 00 00 
  80042055d1:	48 01 ca             	add    %rcx,%rdx
  80042055d4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042055d8:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042055df:	00 00 00 
  80042055e2:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042055e6:	77 32                	ja     800420561a <check_boot_pml4e+0x3d6>
  80042055e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042055ec:	48 89 c1             	mov    %rax,%rcx
  80042055ef:	48 ba 78 8e 21 04 80 	movabs $0x8004218e78,%rdx
  80042055f6:	00 00 00 
  80042055f9:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042055fe:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205605:	00 00 00 
  8004205608:	b8 00 00 00 00       	mov    $0x0,%eax
  800420560d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205614:	00 00 00 
  8004205617:	41 ff d0             	callq  *%r8
  800420561a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205621:	ff ff ff 
  8004205624:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004205628:	48 01 d1             	add    %rdx,%rcx
  800420562b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420562f:	48 01 ca             	add    %rcx,%rdx
  8004205632:	48 39 d0             	cmp    %rdx,%rax
  8004205635:	74 35                	je     800420566c <check_boot_pml4e+0x428>
  8004205637:	48 b9 f0 92 21 04 80 	movabs $0x80042192f0,%rcx
  800420563e:	00 00 00 
  8004205641:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205648:	00 00 00 
  800420564b:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205650:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205657:	00 00 00 
  800420565a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420565f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205666:	00 00 00 
  8004205669:	41 ff d0             	callq  *%r8
  800420566c:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205673:	00 
  8004205674:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  800420567b:	00 
  800420567c:	0f 86 12 ff ff ff    	jbe    8004205594 <check_boot_pml4e+0x350>
  8004205682:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205689:	00 
  800420568a:	eb 64                	jmp    80042056f0 <check_boot_pml4e+0x4ac>
  800420568c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205690:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205694:	48 01 c2             	add    %rax,%rdx
  8004205697:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420569b:	48 89 d6             	mov    %rdx,%rsi
  800420569e:	48 89 c7             	mov    %rax,%rdi
  80042056a1:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042056a8:	00 00 00 
  80042056ab:	ff d0                	callq  *%rax
  80042056ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042056b1:	74 35                	je     80042056e8 <check_boot_pml4e+0x4a4>
  80042056b3:	48 b9 38 93 21 04 80 	movabs $0x8004219338,%rcx
  80042056ba:	00 00 00 
  80042056bd:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042056c4:	00 00 00 
  80042056c7:	be ad 04 00 00       	mov    $0x4ad,%esi
  80042056cc:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042056d3:	00 00 00 
  80042056d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056db:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042056e2:	00 00 00 
  80042056e5:	41 ff d0             	callq  *%r8
  80042056e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042056ef:	00 
  80042056f0:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042056f7:	00 
  80042056f8:	76 92                	jbe    800420568c <check_boot_pml4e+0x448>
  80042056fa:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042056ff:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  8004205704:	0f 86 54 fe ff ff    	jbe    800420555e <check_boot_pml4e+0x31a>
  800420570a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004205711:	00 00 00 
  8004205714:	48 8b 00             	mov    (%rax),%rax
  8004205717:	48 83 c0 08          	add    $0x8,%rax
  800420571b:	48 8b 00             	mov    (%rax),%rax
  800420571e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205724:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004205728:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420572c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205730:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004205733:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004205736:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420573d:	00 00 00 
  8004205740:	48 8b 00             	mov    (%rax),%rax
  8004205743:	48 39 c2             	cmp    %rax,%rdx
  8004205746:	72 32                	jb     800420577a <check_boot_pml4e+0x536>
  8004205748:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420574c:	48 89 c1             	mov    %rax,%rcx
  800420574f:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004205756:	00 00 00 
  8004205759:	be b7 04 00 00       	mov    $0x4b7,%esi
  800420575e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205765:	00 00 00 
  8004205768:	b8 00 00 00 00       	mov    $0x0,%eax
  800420576d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205774:	00 00 00 
  8004205777:	41 ff d0             	callq  *%r8
  800420577a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205781:	00 00 00 
  8004205784:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205788:	48 01 d0             	add    %rdx,%rax
  800420578b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420578f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205793:	48 8b 00             	mov    (%rax),%rax
  8004205796:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420579c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042057a0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057a4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042057a8:	89 45 84             	mov    %eax,-0x7c(%rbp)
  80042057ab:	8b 55 84             	mov    -0x7c(%rbp),%edx
  80042057ae:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042057b5:	00 00 00 
  80042057b8:	48 8b 00             	mov    (%rax),%rax
  80042057bb:	48 39 c2             	cmp    %rax,%rdx
  80042057be:	72 32                	jb     80042057f2 <check_boot_pml4e+0x5ae>
  80042057c0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057c4:	48 89 c1             	mov    %rax,%rcx
  80042057c7:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042057ce:	00 00 00 
  80042057d1:	be b8 04 00 00       	mov    $0x4b8,%esi
  80042057d6:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042057dd:	00 00 00 
  80042057e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057e5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042057ec:	00 00 00 
  80042057ef:	41 ff d0             	callq  *%r8
  80042057f2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042057f9:	00 00 00 
  80042057fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004205800:	48 01 d0             	add    %rdx,%rax
  8004205803:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800420580a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205811:	00 
  8004205812:	e9 50 01 00 00       	jmpq   8004205967 <check_boot_pml4e+0x723>
  8004205817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420581b:	48 83 f8 04          	cmp    $0x4,%rax
  800420581f:	72 67                	jb     8004205888 <check_boot_pml4e+0x644>
  8004205821:	48 83 f8 05          	cmp    $0x5,%rax
  8004205825:	76 06                	jbe    800420582d <check_boot_pml4e+0x5e9>
  8004205827:	48 83 f8 1f          	cmp    $0x1f,%rax
  800420582b:	75 5b                	jne    8004205888 <check_boot_pml4e+0x644>
  800420582d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205831:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205838:	00 
  8004205839:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205840:	48 01 d0             	add    %rdx,%rax
  8004205843:	48 8b 00             	mov    (%rax),%rax
  8004205846:	83 e0 01             	and    $0x1,%eax
  8004205849:	48 85 c0             	test   %rax,%rax
  800420584c:	75 35                	jne    8004205883 <check_boot_pml4e+0x63f>
  800420584e:	48 b9 5b 93 21 04 80 	movabs $0x800421935b,%rcx
  8004205855:	00 00 00 
  8004205858:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420585f:	00 00 00 
  8004205862:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205867:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420586e:	00 00 00 
  8004205871:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205876:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420587d:	00 00 00 
  8004205880:	41 ff d0             	callq  *%r8
  8004205883:	e9 da 00 00 00       	jmpq   8004205962 <check_boot_pml4e+0x71e>
  8004205888:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  800420588d:	0f 86 ce 00 00 00    	jbe    8004205961 <check_boot_pml4e+0x71d>
  8004205893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205897:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420589e:	00 
  800420589f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058a6:	48 01 d0             	add    %rdx,%rax
  80042058a9:	48 8b 00             	mov    (%rax),%rax
  80042058ac:	83 e0 01             	and    $0x1,%eax
  80042058af:	48 85 c0             	test   %rax,%rax
  80042058b2:	74 5a                	je     800420590e <check_boot_pml4e+0x6ca>
  80042058b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058bf:	00 
  80042058c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058c7:	48 01 d0             	add    %rdx,%rax
  80042058ca:	48 8b 00             	mov    (%rax),%rax
  80042058cd:	83 e0 02             	and    $0x2,%eax
  80042058d0:	48 85 c0             	test   %rax,%rax
  80042058d3:	0f 85 88 00 00 00    	jne    8004205961 <check_boot_pml4e+0x71d>
  80042058d9:	48 b9 6c 93 21 04 80 	movabs $0x800421936c,%rcx
  80042058e0:	00 00 00 
  80042058e3:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042058ea:	00 00 00 
  80042058ed:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042058f2:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042058f9:	00 00 00 
  80042058fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205901:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205908:	00 00 00 
  800420590b:	41 ff d0             	callq  *%r8
  800420590e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205921:	48 01 d0             	add    %rdx,%rax
  8004205924:	48 8b 00             	mov    (%rax),%rax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	74 35                	je     8004205961 <check_boot_pml4e+0x71d>
  800420592c:	48 b9 7d 93 21 04 80 	movabs $0x800421937d,%rcx
  8004205933:	00 00 00 
  8004205936:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420593d:	00 00 00 
  8004205940:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205945:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420594c:	00 00 00 
  800420594f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205954:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420595b:	00 00 00 
  800420595e:	41 ff d0             	callq  *%r8
  8004205961:	90                   	nop
  8004205962:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205967:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  800420596e:	00 
  800420596f:	0f 86 a2 fe ff ff    	jbe    8004205817 <check_boot_pml4e+0x5d3>
  8004205975:	48 bf 90 93 21 04 80 	movabs $0x8004219390,%rdi
  800420597c:	00 00 00 
  800420597f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205984:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420598b:	00 00 00 
  800420598e:	ff d2                	callq  *%rdx
  8004205990:	c9                   	leaveq 
  8004205991:	c3                   	retq   

0000008004205992 <check_va2pa>:
  8004205992:	55                   	push   %rbp
  8004205993:	48 89 e5             	mov    %rsp,%rbp
  8004205996:	48 83 ec 60          	sub    $0x60,%rsp
  800420599a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420599e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042059a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059a6:	48 c1 e8 27          	shr    $0x27,%rax
  80042059aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059af:	48 c1 e0 03          	shl    $0x3,%rax
  80042059b3:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  80042059b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059bb:	48 8b 00             	mov    (%rax),%rax
  80042059be:	83 e0 01             	and    $0x1,%eax
  80042059c1:	48 85 c0             	test   %rax,%rax
  80042059c4:	75 0c                	jne    80042059d2 <check_va2pa+0x40>
  80042059c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059cd:	e9 38 02 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  80042059d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059d6:	48 8b 00             	mov    (%rax),%rax
  80042059d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042059df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042059e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042059e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042059eb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042059ee:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042059f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042059f8:	00 00 00 
  80042059fb:	48 8b 00             	mov    (%rax),%rax
  80042059fe:	48 39 c2             	cmp    %rax,%rdx
  8004205a01:	72 32                	jb     8004205a35 <check_va2pa+0xa3>
  8004205a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a07:	48 89 c1             	mov    %rax,%rcx
  8004205a0a:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004205a11:	00 00 00 
  8004205a14:	be e1 04 00 00       	mov    $0x4e1,%esi
  8004205a19:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205a20:	00 00 00 
  8004205a23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205a2f:	00 00 00 
  8004205a32:	41 ff d0             	callq  *%r8
  8004205a35:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a3c:	00 00 00 
  8004205a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a43:	48 01 d0             	add    %rdx,%rax
  8004205a46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205a4a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a4e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a52:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a5e:	00 
  8004205a5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a63:	48 01 d0             	add    %rdx,%rax
  8004205a66:	48 8b 00             	mov    (%rax),%rax
  8004205a69:	83 e0 01             	and    $0x1,%eax
  8004205a6c:	48 85 c0             	test   %rax,%rax
  8004205a6f:	75 0c                	jne    8004205a7d <check_va2pa+0xeb>
  8004205a71:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a78:	e9 8d 01 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205a7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a81:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a85:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a8a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a91:	00 
  8004205a92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a96:	48 01 d0             	add    %rdx,%rax
  8004205a99:	48 8b 00             	mov    (%rax),%rax
  8004205a9c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205aa2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aaa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aae:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205ab1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004205ab4:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205abb:	00 00 00 
  8004205abe:	48 8b 00             	mov    (%rax),%rax
  8004205ac1:	48 39 c2             	cmp    %rax,%rdx
  8004205ac4:	72 32                	jb     8004205af8 <check_va2pa+0x166>
  8004205ac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aca:	48 89 c1             	mov    %rax,%rcx
  8004205acd:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004205ad4:	00 00 00 
  8004205ad7:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205adc:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205ae3:	00 00 00 
  8004205ae6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205aeb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205af2:	00 00 00 
  8004205af5:	41 ff d0             	callq  *%r8
  8004205af8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205aff:	00 00 00 
  8004205b02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205b06:	48 01 d0             	add    %rdx,%rax
  8004205b09:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205b0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205b11:	48 c1 e8 15          	shr    $0x15,%rax
  8004205b15:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205b1a:	48 c1 e0 03          	shl    $0x3,%rax
  8004205b1e:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  8004205b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b26:	48 8b 00             	mov    (%rax),%rax
  8004205b29:	83 e0 01             	and    $0x1,%eax
  8004205b2c:	48 85 c0             	test   %rax,%rax
  8004205b2f:	75 0c                	jne    8004205b3d <check_va2pa+0x1ab>
  8004205b31:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205b38:	e9 cd 00 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b41:	48 8b 00             	mov    (%rax),%rax
  8004205b44:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205b4a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b52:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205b56:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205b59:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205b5c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205b63:	00 00 00 
  8004205b66:	48 8b 00             	mov    (%rax),%rax
  8004205b69:	48 39 c2             	cmp    %rax,%rdx
  8004205b6c:	72 32                	jb     8004205ba0 <check_va2pa+0x20e>
  8004205b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b72:	48 89 c1             	mov    %rax,%rcx
  8004205b75:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004205b7c:	00 00 00 
  8004205b7f:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205b84:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205b8b:	00 00 00 
  8004205b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b93:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205b9a:	00 00 00 
  8004205b9d:	41 ff d0             	callq  *%r8
  8004205ba0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205ba7:	00 00 00 
  8004205baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205bae:	48 01 d0             	add    %rdx,%rax
  8004205bb1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205bb5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205bb9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bbd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bc2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bc9:	00 
  8004205bca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bce:	48 01 d0             	add    %rdx,%rax
  8004205bd1:	48 8b 00             	mov    (%rax),%rax
  8004205bd4:	83 e0 01             	and    $0x1,%eax
  8004205bd7:	48 85 c0             	test   %rax,%rax
  8004205bda:	75 09                	jne    8004205be5 <check_va2pa+0x253>
  8004205bdc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205be3:	eb 25                	jmp    8004205c0a <check_va2pa+0x278>
  8004205be5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205be9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bed:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bf2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bf9:	00 
  8004205bfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bfe:	48 01 d0             	add    %rdx,%rax
  8004205c01:	48 8b 00             	mov    (%rax),%rax
  8004205c04:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205c0a:	c9                   	leaveq 
  8004205c0b:	c3                   	retq   

0000008004205c0c <page_check>:
  8004205c0c:	55                   	push   %rbp
  8004205c0d:	48 89 e5             	mov    %rsp,%rbp
  8004205c10:	53                   	push   %rbx
  8004205c11:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205c18:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205c1f:	00 
  8004205c20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205c24:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205c2c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205c34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205c3c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205c40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205c44:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4d:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205c54:	00 00 00 
  8004205c57:	ff d0                	callq  *%rax
  8004205c59:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c5d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205c62:	75 35                	jne    8004205c99 <page_check+0x8d>
  8004205c64:	48 b9 af 93 21 04 80 	movabs $0x80042193af,%rcx
  8004205c6b:	00 00 00 
  8004205c6e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205c75:	00 00 00 
  8004205c78:	be 02 05 00 00       	mov    $0x502,%esi
  8004205c7d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205c84:	00 00 00 
  8004205c87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205c93:	00 00 00 
  8004205c96:	41 ff d0             	callq  *%r8
  8004205c99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9e:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205ca5:	00 00 00 
  8004205ca8:	ff d0                	callq  *%rax
  8004205caa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205cae:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205cb3:	75 35                	jne    8004205cea <page_check+0xde>
  8004205cb5:	48 b9 c3 93 21 04 80 	movabs $0x80042193c3,%rcx
  8004205cbc:	00 00 00 
  8004205cbf:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205cc6:	00 00 00 
  8004205cc9:	be 03 05 00 00       	mov    $0x503,%esi
  8004205cce:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205cd5:	00 00 00 
  8004205cd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205ce4:	00 00 00 
  8004205ce7:	41 ff d0             	callq  *%r8
  8004205cea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205cef:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205cf6:	00 00 00 
  8004205cf9:	ff d0                	callq  *%rax
  8004205cfb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205cff:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d04:	75 35                	jne    8004205d3b <page_check+0x12f>
  8004205d06:	48 b9 d7 93 21 04 80 	movabs $0x80042193d7,%rcx
  8004205d0d:	00 00 00 
  8004205d10:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205d17:	00 00 00 
  8004205d1a:	be 04 05 00 00       	mov    $0x504,%esi
  8004205d1f:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205d26:	00 00 00 
  8004205d29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d2e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d35:	00 00 00 
  8004205d38:	41 ff d0             	callq  *%r8
  8004205d3b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d40:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d47:	00 00 00 
  8004205d4a:	ff d0                	callq  *%rax
  8004205d4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205d55:	75 35                	jne    8004205d8c <page_check+0x180>
  8004205d57:	48 b9 eb 93 21 04 80 	movabs $0x80042193eb,%rcx
  8004205d5e:	00 00 00 
  8004205d61:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205d68:	00 00 00 
  8004205d6b:	be 05 05 00 00       	mov    $0x505,%esi
  8004205d70:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205d77:	00 00 00 
  8004205d7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d7f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d86:	00 00 00 
  8004205d89:	41 ff d0             	callq  *%r8
  8004205d8c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d91:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d98:	00 00 00 
  8004205d9b:	ff d0                	callq  *%rax
  8004205d9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205da1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205da6:	75 35                	jne    8004205ddd <page_check+0x1d1>
  8004205da8:	48 b9 ff 93 21 04 80 	movabs $0x80042193ff,%rcx
  8004205daf:	00 00 00 
  8004205db2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205db9:	00 00 00 
  8004205dbc:	be 06 05 00 00       	mov    $0x506,%esi
  8004205dc1:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205dc8:	00 00 00 
  8004205dcb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dd0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205dd7:	00 00 00 
  8004205dda:	41 ff d0             	callq  *%r8
  8004205ddd:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205de2:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205de9:	00 00 00 
  8004205dec:	ff d0                	callq  *%rax
  8004205dee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205df2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205df7:	75 35                	jne    8004205e2e <page_check+0x222>
  8004205df9:	48 b9 13 94 21 04 80 	movabs $0x8004219413,%rcx
  8004205e00:	00 00 00 
  8004205e03:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205e0a:	00 00 00 
  8004205e0d:	be 07 05 00 00       	mov    $0x507,%esi
  8004205e12:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205e19:	00 00 00 
  8004205e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e21:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e28:	00 00 00 
  8004205e2b:	41 ff d0             	callq  *%r8
  8004205e2e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205e33:	75 35                	jne    8004205e6a <page_check+0x25e>
  8004205e35:	48 b9 61 91 21 04 80 	movabs $0x8004219161,%rcx
  8004205e3c:	00 00 00 
  8004205e3f:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205e46:	00 00 00 
  8004205e49:	be 09 05 00 00       	mov    $0x509,%esi
  8004205e4e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205e55:	00 00 00 
  8004205e58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e64:	00 00 00 
  8004205e67:	41 ff d0             	callq  *%r8
  8004205e6a:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205e6f:	74 0a                	je     8004205e7b <page_check+0x26f>
  8004205e71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205e75:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e79:	75 35                	jne    8004205eb0 <page_check+0x2a4>
  8004205e7b:	48 b9 65 91 21 04 80 	movabs $0x8004219165,%rcx
  8004205e82:	00 00 00 
  8004205e85:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205e8c:	00 00 00 
  8004205e8f:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205e94:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205e9b:	00 00 00 
  8004205e9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ea3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205eaa:	00 00 00 
  8004205ead:	41 ff d0             	callq  *%r8
  8004205eb0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205eb5:	74 14                	je     8004205ecb <page_check+0x2bf>
  8004205eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ebb:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ebf:	74 0a                	je     8004205ecb <page_check+0x2bf>
  8004205ec1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ec5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ec9:	75 35                	jne    8004205f00 <page_check+0x2f4>
  8004205ecb:	48 b9 78 91 21 04 80 	movabs $0x8004219178,%rcx
  8004205ed2:	00 00 00 
  8004205ed5:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205edc:	00 00 00 
  8004205edf:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205ee4:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205eeb:	00 00 00 
  8004205eee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ef3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205efa:	00 00 00 
  8004205efd:	41 ff d0             	callq  *%r8
  8004205f00:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205f05:	74 1e                	je     8004205f25 <page_check+0x319>
  8004205f07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f0b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f0f:	74 14                	je     8004205f25 <page_check+0x319>
  8004205f11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f15:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f19:	74 0a                	je     8004205f25 <page_check+0x319>
  8004205f1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f1f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f23:	75 35                	jne    8004205f5a <page_check+0x34e>
  8004205f25:	48 b9 28 94 21 04 80 	movabs $0x8004219428,%rcx
  8004205f2c:	00 00 00 
  8004205f2f:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205f36:	00 00 00 
  8004205f39:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205f3e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205f45:	00 00 00 
  8004205f48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f4d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205f54:	00 00 00 
  8004205f57:	41 ff d0             	callq  *%r8
  8004205f5a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205f5f:	74 28                	je     8004205f89 <page_check+0x37d>
  8004205f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f65:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205f69:	74 1e                	je     8004205f89 <page_check+0x37d>
  8004205f6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f6f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f73:	74 14                	je     8004205f89 <page_check+0x37d>
  8004205f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f79:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f7d:	74 0a                	je     8004205f89 <page_check+0x37d>
  8004205f7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f83:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f87:	75 35                	jne    8004205fbe <page_check+0x3b2>
  8004205f89:	48 b9 58 94 21 04 80 	movabs $0x8004219458,%rcx
  8004205f90:	00 00 00 
  8004205f93:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004205f9a:	00 00 00 
  8004205f9d:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205fa2:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004205fa9:	00 00 00 
  8004205fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205fb8:	00 00 00 
  8004205fbb:	41 ff d0             	callq  *%r8
  8004205fbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205fc3:	74 32                	je     8004205ff7 <page_check+0x3eb>
  8004205fc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fc9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205fcd:	74 28                	je     8004205ff7 <page_check+0x3eb>
  8004205fcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fd3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205fd7:	74 1e                	je     8004205ff7 <page_check+0x3eb>
  8004205fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fdd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205fe1:	74 14                	je     8004205ff7 <page_check+0x3eb>
  8004205fe3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fe7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205feb:	74 0a                	je     8004205ff7 <page_check+0x3eb>
  8004205fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ff1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ff5:	75 35                	jne    800420602c <page_check+0x420>
  8004205ff7:	48 b9 98 94 21 04 80 	movabs $0x8004219498,%rcx
  8004205ffe:	00 00 00 
  8004206001:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206008:	00 00 00 
  800420600b:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004206010:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206017:	00 00 00 
  800420601a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420601f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206026:	00 00 00 
  8004206029:	41 ff d0             	callq  *%r8
  800420602c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420603d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206044:	00 00 00 
  8004206047:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420604e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206053:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420605a:	00 00 00 
  800420605d:	ff d0                	callq  *%rax
  800420605f:	48 85 c0             	test   %rax,%rax
  8004206062:	74 35                	je     8004206099 <page_check+0x48d>
  8004206064:	48 b9 ef 91 21 04 80 	movabs $0x80042191ef,%rcx
  800420606b:	00 00 00 
  800420606e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206075:	00 00 00 
  8004206078:	be 15 05 00 00       	mov    $0x515,%esi
  800420607d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206084:	00 00 00 
  8004206087:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206093:	00 00 00 
  8004206096:	41 ff d0             	callq  *%r8
  8004206099:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042060a0:	00 00 00 
  80042060a3:	48 8b 00             	mov    (%rax),%rax
  80042060a6:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  80042060ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 85 c0             	test   %rax,%rax
  80042060c4:	74 35                	je     80042060fb <page_check+0x4ef>
  80042060c6:	48 b9 e8 94 21 04 80 	movabs $0x80042194e8,%rcx
  80042060cd:	00 00 00 
  80042060d0:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042060d7:	00 00 00 
  80042060da:	be 18 05 00 00       	mov    $0x518,%esi
  80042060df:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042060e6:	00 00 00 
  80042060e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060ee:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042060f5:	00 00 00 
  80042060f8:	41 ff d0             	callq  *%r8
  80042060fb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206102:	00 00 00 
  8004206105:	48 8b 00             	mov    (%rax),%rax
  8004206108:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420610c:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206111:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206116:	48 89 c7             	mov    %rax,%rdi
  8004206119:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206120:	00 00 00 
  8004206123:	ff d0                	callq  *%rax
  8004206125:	85 c0                	test   %eax,%eax
  8004206127:	78 35                	js     800420615e <page_check+0x552>
  8004206129:	48 b9 20 95 21 04 80 	movabs $0x8004219520,%rcx
  8004206130:	00 00 00 
  8004206133:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420613a:	00 00 00 
  800420613d:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004206142:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206149:	00 00 00 
  800420614c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206151:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206158:	00 00 00 
  800420615b:	41 ff d0             	callq  *%r8
  800420615e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206162:	48 89 c7             	mov    %rax,%rdi
  8004206165:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420616c:	00 00 00 
  800420616f:	ff d0                	callq  *%rax
  8004206171:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206178:	00 00 00 
  800420617b:	48 8b 00             	mov    (%rax),%rax
  800420617e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206182:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206187:	ba 00 00 00 00       	mov    $0x0,%edx
  800420618c:	48 89 c7             	mov    %rax,%rdi
  800420618f:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206196:	00 00 00 
  8004206199:	ff d0                	callq  *%rax
  800420619b:	85 c0                	test   %eax,%eax
  800420619d:	78 35                	js     80042061d4 <page_check+0x5c8>
  800420619f:	48 b9 20 95 21 04 80 	movabs $0x8004219520,%rcx
  80042061a6:	00 00 00 
  80042061a9:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042061b0:	00 00 00 
  80042061b3:	be 1f 05 00 00       	mov    $0x51f,%esi
  80042061b8:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042061bf:	00 00 00 
  80042061c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042061ce:	00 00 00 
  80042061d1:	41 ff d0             	callq  *%r8
  80042061d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042061d8:	48 89 c7             	mov    %rax,%rdi
  80042061db:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061e2:	00 00 00 
  80042061e5:	ff d0                	callq  *%rax
  80042061e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061eb:	48 89 c7             	mov    %rax,%rdi
  80042061ee:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061f5:	00 00 00 
  80042061f8:	ff d0                	callq  *%rax
  80042061fa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206201:	00 00 00 
  8004206204:	48 8b 00             	mov    (%rax),%rax
  8004206207:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420620b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206210:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206215:	48 89 c7             	mov    %rax,%rdi
  8004206218:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420621f:	00 00 00 
  8004206222:	ff d0                	callq  *%rax
  8004206224:	85 c0                	test   %eax,%eax
  8004206226:	74 35                	je     800420625d <page_check+0x651>
  8004206228:	48 b9 50 95 21 04 80 	movabs $0x8004219550,%rcx
  800420622f:	00 00 00 
  8004206232:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206239:	00 00 00 
  800420623c:	be 25 05 00 00       	mov    $0x525,%esi
  8004206241:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206248:	00 00 00 
  800420624b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206250:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206257:	00 00 00 
  800420625a:	41 ff d0             	callq  *%r8
  800420625d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206264:	00 00 00 
  8004206267:	48 8b 00             	mov    (%rax),%rax
  800420626a:	48 8b 00             	mov    (%rax),%rax
  800420626d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206273:	48 89 c3             	mov    %rax,%rbx
  8004206276:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420627a:	48 89 c7             	mov    %rax,%rdi
  800420627d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206284:	00 00 00 
  8004206287:	ff d0                	callq  *%rax
  8004206289:	48 39 c3             	cmp    %rax,%rbx
  800420628c:	0f 84 97 00 00 00    	je     8004206329 <page_check+0x71d>
  8004206292:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206299:	00 00 00 
  800420629c:	48 8b 00             	mov    (%rax),%rax
  800420629f:	48 8b 00             	mov    (%rax),%rax
  80042062a2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062a8:	48 89 c3             	mov    %rax,%rbx
  80042062ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062af:	48 89 c7             	mov    %rax,%rdi
  80042062b2:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062b9:	00 00 00 
  80042062bc:	ff d0                	callq  *%rax
  80042062be:	48 39 c3             	cmp    %rax,%rbx
  80042062c1:	74 66                	je     8004206329 <page_check+0x71d>
  80042062c3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042062ca:	00 00 00 
  80042062cd:	48 8b 00             	mov    (%rax),%rax
  80042062d0:	48 8b 00             	mov    (%rax),%rax
  80042062d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062d9:	48 89 c3             	mov    %rax,%rbx
  80042062dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042062e0:	48 89 c7             	mov    %rax,%rdi
  80042062e3:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062ea:	00 00 00 
  80042062ed:	ff d0                	callq  *%rax
  80042062ef:	48 39 c3             	cmp    %rax,%rbx
  80042062f2:	74 35                	je     8004206329 <page_check+0x71d>
  80042062f4:	48 b9 80 95 21 04 80 	movabs $0x8004219580,%rcx
  80042062fb:	00 00 00 
  80042062fe:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206305:	00 00 00 
  8004206308:	be 26 05 00 00       	mov    $0x526,%esi
  800420630d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206314:	00 00 00 
  8004206317:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206323:	00 00 00 
  8004206326:	41 ff d0             	callq  *%r8
  8004206329:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206330:	00 00 00 
  8004206333:	48 8b 00             	mov    (%rax),%rax
  8004206336:	be 00 00 00 00       	mov    $0x0,%esi
  800420633b:	48 89 c7             	mov    %rax,%rdi
  800420633e:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206345:	00 00 00 
  8004206348:	ff d0                	callq  *%rax
  800420634a:	48 89 c3             	mov    %rax,%rbx
  800420634d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206351:	48 89 c7             	mov    %rax,%rdi
  8004206354:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420635b:	00 00 00 
  800420635e:	ff d0                	callq  *%rax
  8004206360:	48 39 c3             	cmp    %rax,%rbx
  8004206363:	74 35                	je     800420639a <page_check+0x78e>
  8004206365:	48 b9 08 96 21 04 80 	movabs $0x8004219608,%rcx
  800420636c:	00 00 00 
  800420636f:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206376:	00 00 00 
  8004206379:	be 27 05 00 00       	mov    $0x527,%esi
  800420637e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206385:	00 00 00 
  8004206388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420638d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206394:	00 00 00 
  8004206397:	41 ff d0             	callq  *%r8
  800420639a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420639e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063a2:	66 83 f8 01          	cmp    $0x1,%ax
  80042063a6:	74 35                	je     80042063dd <page_check+0x7d1>
  80042063a8:	48 b9 35 96 21 04 80 	movabs $0x8004219635,%rcx
  80042063af:	00 00 00 
  80042063b2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042063b9:	00 00 00 
  80042063bc:	be 28 05 00 00       	mov    $0x528,%esi
  80042063c1:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042063c8:	00 00 00 
  80042063cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042063d7:	00 00 00 
  80042063da:	41 ff d0             	callq  *%r8
  80042063dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042063e1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063e5:	66 83 f8 01          	cmp    $0x1,%ax
  80042063e9:	74 35                	je     8004206420 <page_check+0x814>
  80042063eb:	48 b9 46 96 21 04 80 	movabs $0x8004219646,%rcx
  80042063f2:	00 00 00 
  80042063f5:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042063fc:	00 00 00 
  80042063ff:	be 29 05 00 00       	mov    $0x529,%esi
  8004206404:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420640b:	00 00 00 
  800420640e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206413:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420641a:	00 00 00 
  800420641d:	41 ff d0             	callq  *%r8
  8004206420:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206424:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206428:	66 83 f8 01          	cmp    $0x1,%ax
  800420642c:	74 35                	je     8004206463 <page_check+0x857>
  800420642e:	48 b9 57 96 21 04 80 	movabs $0x8004219657,%rcx
  8004206435:	00 00 00 
  8004206438:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420643f:	00 00 00 
  8004206442:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206447:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420644e:	00 00 00 
  8004206451:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206456:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420645d:	00 00 00 
  8004206460:	41 ff d0             	callq  *%r8
  8004206463:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420646a:	00 00 00 
  800420646d:	48 8b 00             	mov    (%rax),%rax
  8004206470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206474:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206479:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420647e:	48 89 c7             	mov    %rax,%rdi
  8004206481:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206488:	00 00 00 
  800420648b:	ff d0                	callq  *%rax
  800420648d:	85 c0                	test   %eax,%eax
  800420648f:	74 35                	je     80042064c6 <page_check+0x8ba>
  8004206491:	48 b9 68 96 21 04 80 	movabs $0x8004219668,%rcx
  8004206498:	00 00 00 
  800420649b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042064a2:	00 00 00 
  80042064a5:	be 2c 05 00 00       	mov    $0x52c,%esi
  80042064aa:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042064b1:	00 00 00 
  80042064b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042064c0:	00 00 00 
  80042064c3:	41 ff d0             	callq  *%r8
  80042064c6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042064cd:	00 00 00 
  80042064d0:	48 8b 00             	mov    (%rax),%rax
  80042064d3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064d8:	48 89 c7             	mov    %rax,%rdi
  80042064db:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042064e2:	00 00 00 
  80042064e5:	ff d0                	callq  *%rax
  80042064e7:	48 89 c3             	mov    %rax,%rbx
  80042064ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042064ee:	48 89 c7             	mov    %rax,%rdi
  80042064f1:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042064f8:	00 00 00 
  80042064fb:	ff d0                	callq  *%rax
  80042064fd:	48 39 c3             	cmp    %rax,%rbx
  8004206500:	74 35                	je     8004206537 <page_check+0x92b>
  8004206502:	48 b9 a0 96 21 04 80 	movabs $0x80042196a0,%rcx
  8004206509:	00 00 00 
  800420650c:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206513:	00 00 00 
  8004206516:	be 2d 05 00 00       	mov    $0x52d,%esi
  800420651b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206522:	00 00 00 
  8004206525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420652a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206531:	00 00 00 
  8004206534:	41 ff d0             	callq  *%r8
  8004206537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420653b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420653f:	66 83 f8 02          	cmp    $0x2,%ax
  8004206543:	74 35                	je     800420657a <page_check+0x96e>
  8004206545:	48 b9 d0 96 21 04 80 	movabs $0x80042196d0,%rcx
  800420654c:	00 00 00 
  800420654f:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206556:	00 00 00 
  8004206559:	be 2e 05 00 00       	mov    $0x52e,%esi
  800420655e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206565:	00 00 00 
  8004206568:	b8 00 00 00 00       	mov    $0x0,%eax
  800420656d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206574:	00 00 00 
  8004206577:	41 ff d0             	callq  *%r8
  800420657a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420657f:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004206586:	00 00 00 
  8004206589:	ff d0                	callq  *%rax
  800420658b:	48 85 c0             	test   %rax,%rax
  800420658e:	74 35                	je     80042065c5 <page_check+0x9b9>
  8004206590:	48 b9 ef 91 21 04 80 	movabs $0x80042191ef,%rcx
  8004206597:	00 00 00 
  800420659a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042065a1:	00 00 00 
  80042065a4:	be 31 05 00 00       	mov    $0x531,%esi
  80042065a9:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042065b0:	00 00 00 
  80042065b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042065bf:	00 00 00 
  80042065c2:	41 ff d0             	callq  *%r8
  80042065c5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042065cc:	00 00 00 
  80042065cf:	48 8b 00             	mov    (%rax),%rax
  80042065d2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042065d6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042065db:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042065e0:	48 89 c7             	mov    %rax,%rdi
  80042065e3:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042065ea:	00 00 00 
  80042065ed:	ff d0                	callq  *%rax
  80042065ef:	85 c0                	test   %eax,%eax
  80042065f1:	74 35                	je     8004206628 <page_check+0xa1c>
  80042065f3:	48 b9 68 96 21 04 80 	movabs $0x8004219668,%rcx
  80042065fa:	00 00 00 
  80042065fd:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206604:	00 00 00 
  8004206607:	be 34 05 00 00       	mov    $0x534,%esi
  800420660c:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206613:	00 00 00 
  8004206616:	b8 00 00 00 00       	mov    $0x0,%eax
  800420661b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206622:	00 00 00 
  8004206625:	41 ff d0             	callq  *%r8
  8004206628:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420662f:	00 00 00 
  8004206632:	48 8b 00             	mov    (%rax),%rax
  8004206635:	be 00 10 00 00       	mov    $0x1000,%esi
  800420663a:	48 89 c7             	mov    %rax,%rdi
  800420663d:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206644:	00 00 00 
  8004206647:	ff d0                	callq  *%rax
  8004206649:	48 89 c3             	mov    %rax,%rbx
  800420664c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206650:	48 89 c7             	mov    %rax,%rdi
  8004206653:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420665a:	00 00 00 
  800420665d:	ff d0                	callq  *%rax
  800420665f:	48 39 c3             	cmp    %rax,%rbx
  8004206662:	74 35                	je     8004206699 <page_check+0xa8d>
  8004206664:	48 b9 a0 96 21 04 80 	movabs $0x80042196a0,%rcx
  800420666b:	00 00 00 
  800420666e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206675:	00 00 00 
  8004206678:	be 35 05 00 00       	mov    $0x535,%esi
  800420667d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206684:	00 00 00 
  8004206687:	b8 00 00 00 00       	mov    $0x0,%eax
  800420668c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206693:	00 00 00 
  8004206696:	41 ff d0             	callq  *%r8
  8004206699:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420669d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042066a1:	66 83 f8 02          	cmp    $0x2,%ax
  80042066a5:	74 35                	je     80042066dc <page_check+0xad0>
  80042066a7:	48 b9 d0 96 21 04 80 	movabs $0x80042196d0,%rcx
  80042066ae:	00 00 00 
  80042066b1:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042066b8:	00 00 00 
  80042066bb:	be 36 05 00 00       	mov    $0x536,%esi
  80042066c0:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042066c7:	00 00 00 
  80042066ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066cf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042066d6:	00 00 00 
  80042066d9:	41 ff d0             	callq  *%r8
  80042066dc:	bf 00 00 00 00       	mov    $0x0,%edi
  80042066e1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042066e8:	00 00 00 
  80042066eb:	ff d0                	callq  *%rax
  80042066ed:	48 85 c0             	test   %rax,%rax
  80042066f0:	74 35                	je     8004206727 <page_check+0xb1b>
  80042066f2:	48 b9 ef 91 21 04 80 	movabs $0x80042191ef,%rcx
  80042066f9:	00 00 00 
  80042066fc:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206703:	00 00 00 
  8004206706:	be 3a 05 00 00       	mov    $0x53a,%esi
  800420670b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206712:	00 00 00 
  8004206715:	b8 00 00 00 00       	mov    $0x0,%eax
  800420671a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206721:	00 00 00 
  8004206724:	41 ff d0             	callq  *%r8
  8004206727:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420672e:	00 00 00 
  8004206731:	48 8b 00             	mov    (%rax),%rax
  8004206734:	48 8b 00             	mov    (%rax),%rax
  8004206737:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420673d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206741:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206745:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206749:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800420674c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420674f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206756:	00 00 00 
  8004206759:	48 8b 00             	mov    (%rax),%rax
  800420675c:	48 39 c2             	cmp    %rax,%rdx
  800420675f:	72 32                	jb     8004206793 <page_check+0xb87>
  8004206761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206765:	48 89 c1             	mov    %rax,%rcx
  8004206768:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420676f:	00 00 00 
  8004206772:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206777:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420677e:	00 00 00 
  8004206781:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206786:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420678d:	00 00 00 
  8004206790:	41 ff d0             	callq  *%r8
  8004206793:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420679a:	00 00 00 
  800420679d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042067a1:	48 01 d0             	add    %rdx,%rax
  80042067a4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042067a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042067ac:	48 8b 00             	mov    (%rax),%rax
  80042067af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042067b5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042067b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042067c1:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042067c4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042067c7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042067ce:	00 00 00 
  80042067d1:	48 8b 00             	mov    (%rax),%rax
  80042067d4:	48 39 c2             	cmp    %rax,%rdx
  80042067d7:	72 32                	jb     800420680b <page_check+0xbff>
  80042067d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067dd:	48 89 c1             	mov    %rax,%rcx
  80042067e0:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042067e7:	00 00 00 
  80042067ea:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042067ef:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042067f6:	00 00 00 
  80042067f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067fe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206805:	00 00 00 
  8004206808:	41 ff d0             	callq  *%r8
  800420680b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206812:	00 00 00 
  8004206815:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206819:	48 01 d0             	add    %rdx,%rax
  800420681c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004206820:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206824:	48 8b 00             	mov    (%rax),%rax
  8004206827:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420682d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004206834:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420683b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420683f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206845:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  800420684b:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206852:	00 00 00 
  8004206855:	48 8b 00             	mov    (%rax),%rax
  8004206858:	48 39 c2             	cmp    %rax,%rdx
  800420685b:	72 35                	jb     8004206892 <page_check+0xc86>
  800420685d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206864:	48 89 c1             	mov    %rax,%rcx
  8004206867:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420686e:	00 00 00 
  8004206871:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206876:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420687d:	00 00 00 
  8004206880:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206885:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420688c:	00 00 00 
  800420688f:	41 ff d0             	callq  *%r8
  8004206892:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206899:	00 00 00 
  800420689c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042068a3:	48 01 d0             	add    %rdx,%rax
  80042068a6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042068ad:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042068b4:	00 00 00 
  80042068b7:	48 8b 00             	mov    (%rax),%rax
  80042068ba:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068bf:	be 00 10 00 00       	mov    $0x1000,%esi
  80042068c4:	48 89 c7             	mov    %rax,%rdi
  80042068c7:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042068ce:	00 00 00 
  80042068d1:	ff d0                	callq  *%rax
  80042068d3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042068da:	48 83 c2 08          	add    $0x8,%rdx
  80042068de:	48 39 d0             	cmp    %rdx,%rax
  80042068e1:	74 35                	je     8004206918 <page_check+0xd0c>
  80042068e3:	48 b9 e8 96 21 04 80 	movabs $0x80042196e8,%rcx
  80042068ea:	00 00 00 
  80042068ed:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042068f4:	00 00 00 
  80042068f7:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042068fc:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206903:	00 00 00 
  8004206906:	b8 00 00 00 00       	mov    $0x0,%eax
  800420690b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206912:	00 00 00 
  8004206915:	41 ff d0             	callq  *%r8
  8004206918:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420691f:	00 00 00 
  8004206922:	48 8b 00             	mov    (%rax),%rax
  8004206925:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206929:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420692e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206933:	48 89 c7             	mov    %rax,%rdi
  8004206936:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420693d:	00 00 00 
  8004206940:	ff d0                	callq  *%rax
  8004206942:	85 c0                	test   %eax,%eax
  8004206944:	74 35                	je     800420697b <page_check+0xd6f>
  8004206946:	48 b9 28 97 21 04 80 	movabs $0x8004219728,%rcx
  800420694d:	00 00 00 
  8004206950:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206957:	00 00 00 
  800420695a:	be 42 05 00 00       	mov    $0x542,%esi
  800420695f:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206966:	00 00 00 
  8004206969:	b8 00 00 00 00       	mov    $0x0,%eax
  800420696e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206975:	00 00 00 
  8004206978:	41 ff d0             	callq  *%r8
  800420697b:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206982:	00 00 00 
  8004206985:	48 8b 00             	mov    (%rax),%rax
  8004206988:	be 00 10 00 00       	mov    $0x1000,%esi
  800420698d:	48 89 c7             	mov    %rax,%rdi
  8004206990:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206997:	00 00 00 
  800420699a:	ff d0                	callq  *%rax
  800420699c:	48 89 c3             	mov    %rax,%rbx
  800420699f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069a3:	48 89 c7             	mov    %rax,%rdi
  80042069a6:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042069ad:	00 00 00 
  80042069b0:	ff d0                	callq  *%rax
  80042069b2:	48 39 c3             	cmp    %rax,%rbx
  80042069b5:	74 35                	je     80042069ec <page_check+0xde0>
  80042069b7:	48 b9 a0 96 21 04 80 	movabs $0x80042196a0,%rcx
  80042069be:	00 00 00 
  80042069c1:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042069c8:	00 00 00 
  80042069cb:	be 43 05 00 00       	mov    $0x543,%esi
  80042069d0:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042069d7:	00 00 00 
  80042069da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069df:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042069e6:	00 00 00 
  80042069e9:	41 ff d0             	callq  *%r8
  80042069ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069f0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042069f4:	66 83 f8 02          	cmp    $0x2,%ax
  80042069f8:	74 35                	je     8004206a2f <page_check+0xe23>
  80042069fa:	48 b9 d0 96 21 04 80 	movabs $0x80042196d0,%rcx
  8004206a01:	00 00 00 
  8004206a04:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206a0b:	00 00 00 
  8004206a0e:	be 44 05 00 00       	mov    $0x544,%esi
  8004206a13:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206a1a:	00 00 00 
  8004206a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a22:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a29:	00 00 00 
  8004206a2c:	41 ff d0             	callq  *%r8
  8004206a2f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a36:	00 00 00 
  8004206a39:	48 8b 00             	mov    (%rax),%rax
  8004206a3c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a41:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a46:	48 89 c7             	mov    %rax,%rdi
  8004206a49:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206a50:	00 00 00 
  8004206a53:	ff d0                	callq  *%rax
  8004206a55:	48 8b 00             	mov    (%rax),%rax
  8004206a58:	83 e0 04             	and    $0x4,%eax
  8004206a5b:	48 85 c0             	test   %rax,%rax
  8004206a5e:	75 35                	jne    8004206a95 <page_check+0xe89>
  8004206a60:	48 b9 68 97 21 04 80 	movabs $0x8004219768,%rcx
  8004206a67:	00 00 00 
  8004206a6a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206a71:	00 00 00 
  8004206a74:	be 45 05 00 00       	mov    $0x545,%esi
  8004206a79:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206a80:	00 00 00 
  8004206a83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a88:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a8f:	00 00 00 
  8004206a92:	41 ff d0             	callq  *%r8
  8004206a95:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a9c:	00 00 00 
  8004206a9f:	48 8b 00             	mov    (%rax),%rax
  8004206aa2:	48 8b 00             	mov    (%rax),%rax
  8004206aa5:	83 e0 04             	and    $0x4,%eax
  8004206aa8:	48 85 c0             	test   %rax,%rax
  8004206aab:	75 35                	jne    8004206ae2 <page_check+0xed6>
  8004206aad:	48 b9 9b 97 21 04 80 	movabs $0x800421979b,%rcx
  8004206ab4:	00 00 00 
  8004206ab7:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206abe:	00 00 00 
  8004206ac1:	be 46 05 00 00       	mov    $0x546,%esi
  8004206ac6:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206acd:	00 00 00 
  8004206ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ad5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206adc:	00 00 00 
  8004206adf:	41 ff d0             	callq  *%r8
  8004206ae2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ae9:	00 00 00 
  8004206aec:	48 8b 00             	mov    (%rax),%rax
  8004206aef:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004206af3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206af8:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	85 c0                	test   %eax,%eax
  8004206b0e:	78 35                	js     8004206b45 <page_check+0xf39>
  8004206b10:	48 b9 b8 97 21 04 80 	movabs $0x80042197b8,%rcx
  8004206b17:	00 00 00 
  8004206b1a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206b21:	00 00 00 
  8004206b24:	be 4a 05 00 00       	mov    $0x54a,%esi
  8004206b29:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206b30:	00 00 00 
  8004206b33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b38:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206b3f:	00 00 00 
  8004206b42:	41 ff d0             	callq  *%r8
  8004206b45:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206b4c:	00 00 00 
  8004206b4f:	48 8b 00             	mov    (%rax),%rax
  8004206b52:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206b56:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b5b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206b60:	48 89 c7             	mov    %rax,%rdi
  8004206b63:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b6a:	00 00 00 
  8004206b6d:	ff d0                	callq  *%rax
  8004206b6f:	85 c0                	test   %eax,%eax
  8004206b71:	74 35                	je     8004206ba8 <page_check+0xf9c>
  8004206b73:	48 b9 f0 97 21 04 80 	movabs $0x80042197f0,%rcx
  8004206b7a:	00 00 00 
  8004206b7d:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206b84:	00 00 00 
  8004206b87:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206b8c:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206b93:	00 00 00 
  8004206b96:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ba2:	00 00 00 
  8004206ba5:	41 ff d0             	callq  *%r8
  8004206ba8:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206baf:	00 00 00 
  8004206bb2:	48 8b 00             	mov    (%rax),%rax
  8004206bb5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206bba:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206bbf:	48 89 c7             	mov    %rax,%rdi
  8004206bc2:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206bc9:	00 00 00 
  8004206bcc:	ff d0                	callq  *%rax
  8004206bce:	48 8b 00             	mov    (%rax),%rax
  8004206bd1:	83 e0 04             	and    $0x4,%eax
  8004206bd4:	48 85 c0             	test   %rax,%rax
  8004206bd7:	74 35                	je     8004206c0e <page_check+0x1002>
  8004206bd9:	48 b9 28 98 21 04 80 	movabs $0x8004219828,%rcx
  8004206be0:	00 00 00 
  8004206be3:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206bea:	00 00 00 
  8004206bed:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206bf2:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206bf9:	00 00 00 
  8004206bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c01:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c08:	00 00 00 
  8004206c0b:	41 ff d0             	callq  *%r8
  8004206c0e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c15:	00 00 00 
  8004206c18:	48 8b 00             	mov    (%rax),%rax
  8004206c1b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c20:	48 89 c7             	mov    %rax,%rdi
  8004206c23:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c2a:	00 00 00 
  8004206c2d:	ff d0                	callq  *%rax
  8004206c2f:	48 89 c3             	mov    %rax,%rbx
  8004206c32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206c36:	48 89 c7             	mov    %rax,%rdi
  8004206c39:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206c40:	00 00 00 
  8004206c43:	ff d0                	callq  *%rax
  8004206c45:	48 39 c3             	cmp    %rax,%rbx
  8004206c48:	74 35                	je     8004206c7f <page_check+0x1073>
  8004206c4a:	48 b9 60 98 21 04 80 	movabs $0x8004219860,%rcx
  8004206c51:	00 00 00 
  8004206c54:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206c5b:	00 00 00 
  8004206c5e:	be 51 05 00 00       	mov    $0x551,%esi
  8004206c63:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206c6a:	00 00 00 
  8004206c6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c79:	00 00 00 
  8004206c7c:	41 ff d0             	callq  *%r8
  8004206c7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c86:	00 00 00 
  8004206c89:	48 8b 00             	mov    (%rax),%rax
  8004206c8c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206c91:	48 89 c7             	mov    %rax,%rdi
  8004206c94:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c9b:	00 00 00 
  8004206c9e:	ff d0                	callq  *%rax
  8004206ca0:	48 89 c3             	mov    %rax,%rbx
  8004206ca3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ca7:	48 89 c7             	mov    %rax,%rdi
  8004206caa:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206cb1:	00 00 00 
  8004206cb4:	ff d0                	callq  *%rax
  8004206cb6:	48 39 c3             	cmp    %rax,%rbx
  8004206cb9:	74 35                	je     8004206cf0 <page_check+0x10e4>
  8004206cbb:	48 b9 90 98 21 04 80 	movabs $0x8004219890,%rcx
  8004206cc2:	00 00 00 
  8004206cc5:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206ccc:	00 00 00 
  8004206ccf:	be 52 05 00 00       	mov    $0x552,%esi
  8004206cd4:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206cdb:	00 00 00 
  8004206cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ce3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206cea:	00 00 00 
  8004206ced:	41 ff d0             	callq  *%r8
  8004206cf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cf4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206cf8:	66 83 f8 02          	cmp    $0x2,%ax
  8004206cfc:	74 35                	je     8004206d33 <page_check+0x1127>
  8004206cfe:	48 b9 c0 98 21 04 80 	movabs $0x80042198c0,%rcx
  8004206d05:	00 00 00 
  8004206d08:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206d0f:	00 00 00 
  8004206d12:	be 54 05 00 00       	mov    $0x554,%esi
  8004206d17:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206d1e:	00 00 00 
  8004206d21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d26:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d2d:	00 00 00 
  8004206d30:	41 ff d0             	callq  *%r8
  8004206d33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d37:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d3b:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d3f:	74 35                	je     8004206d76 <page_check+0x116a>
  8004206d41:	48 b9 d1 98 21 04 80 	movabs $0x80042198d1,%rcx
  8004206d48:	00 00 00 
  8004206d4b:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206d52:	00 00 00 
  8004206d55:	be 55 05 00 00       	mov    $0x555,%esi
  8004206d5a:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206d61:	00 00 00 
  8004206d64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d70:	00 00 00 
  8004206d73:	41 ff d0             	callq  *%r8
  8004206d76:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d7d:	00 00 00 
  8004206d80:	48 8b 00             	mov    (%rax),%rax
  8004206d83:	be 00 00 00 00       	mov    $0x0,%esi
  8004206d88:	48 89 c7             	mov    %rax,%rdi
  8004206d8b:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206d92:	00 00 00 
  8004206d95:	ff d0                	callq  *%rax
  8004206d97:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d9e:	00 00 00 
  8004206da1:	48 8b 00             	mov    (%rax),%rax
  8004206da4:	be 00 00 00 00       	mov    $0x0,%esi
  8004206da9:	48 89 c7             	mov    %rax,%rdi
  8004206dac:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206db3:	00 00 00 
  8004206db6:	ff d0                	callq  *%rax
  8004206db8:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206dbc:	74 35                	je     8004206df3 <page_check+0x11e7>
  8004206dbe:	48 b9 e8 98 21 04 80 	movabs $0x80042198e8,%rcx
  8004206dc5:	00 00 00 
  8004206dc8:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206dcf:	00 00 00 
  8004206dd2:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206dd7:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206dde:	00 00 00 
  8004206de1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206de6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ded:	00 00 00 
  8004206df0:	41 ff d0             	callq  *%r8
  8004206df3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206dfa:	00 00 00 
  8004206dfd:	48 8b 00             	mov    (%rax),%rax
  8004206e00:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e05:	48 89 c7             	mov    %rax,%rdi
  8004206e08:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206e0f:	00 00 00 
  8004206e12:	ff d0                	callq  *%rax
  8004206e14:	48 89 c3             	mov    %rax,%rbx
  8004206e17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e1b:	48 89 c7             	mov    %rax,%rdi
  8004206e1e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206e25:	00 00 00 
  8004206e28:	ff d0                	callq  *%rax
  8004206e2a:	48 39 c3             	cmp    %rax,%rbx
  8004206e2d:	74 35                	je     8004206e64 <page_check+0x1258>
  8004206e2f:	48 b9 90 98 21 04 80 	movabs $0x8004219890,%rcx
  8004206e36:	00 00 00 
  8004206e39:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206e40:	00 00 00 
  8004206e43:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206e48:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206e4f:	00 00 00 
  8004206e52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e57:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206e5e:	00 00 00 
  8004206e61:	41 ff d0             	callq  *%r8
  8004206e64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e6c:	66 83 f8 01          	cmp    $0x1,%ax
  8004206e70:	74 35                	je     8004206ea7 <page_check+0x129b>
  8004206e72:	48 b9 35 96 21 04 80 	movabs $0x8004219635,%rcx
  8004206e79:	00 00 00 
  8004206e7c:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206e83:	00 00 00 
  8004206e86:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206e8b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206e92:	00 00 00 
  8004206e95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e9a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ea1:	00 00 00 
  8004206ea4:	41 ff d0             	callq  *%r8
  8004206ea7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206eab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206eaf:	66 83 f8 01          	cmp    $0x1,%ax
  8004206eb3:	74 35                	je     8004206eea <page_check+0x12de>
  8004206eb5:	48 b9 d1 98 21 04 80 	movabs $0x80042198d1,%rcx
  8004206ebc:	00 00 00 
  8004206ebf:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206ec6:	00 00 00 
  8004206ec9:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206ece:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206ed5:	00 00 00 
  8004206ed8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206edd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ee4:	00 00 00 
  8004206ee7:	41 ff d0             	callq  *%r8
  8004206eea:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ef1:	00 00 00 
  8004206ef4:	48 8b 00             	mov    (%rax),%rax
  8004206ef7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206efb:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206f00:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206f05:	48 89 c7             	mov    %rax,%rdi
  8004206f08:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206f0f:	00 00 00 
  8004206f12:	ff d0                	callq  *%rax
  8004206f14:	85 c0                	test   %eax,%eax
  8004206f16:	74 35                	je     8004206f4d <page_check+0x1341>
  8004206f18:	48 b9 f0 97 21 04 80 	movabs $0x80042197f0,%rcx
  8004206f1f:	00 00 00 
  8004206f22:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206f29:	00 00 00 
  8004206f2c:	be 61 05 00 00       	mov    $0x561,%esi
  8004206f31:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206f38:	00 00 00 
  8004206f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f40:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f47:	00 00 00 
  8004206f4a:	41 ff d0             	callq  *%r8
  8004206f4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f51:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f55:	66 85 c0             	test   %ax,%ax
  8004206f58:	75 35                	jne    8004206f8f <page_check+0x1383>
  8004206f5a:	48 b9 0b 99 21 04 80 	movabs $0x800421990b,%rcx
  8004206f61:	00 00 00 
  8004206f64:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206f6b:	00 00 00 
  8004206f6e:	be 62 05 00 00       	mov    $0x562,%esi
  8004206f73:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206f7a:	00 00 00 
  8004206f7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f82:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f89:	00 00 00 
  8004206f8c:	41 ff d0             	callq  *%r8
  8004206f8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f93:	48 8b 00             	mov    (%rax),%rax
  8004206f96:	48 85 c0             	test   %rax,%rax
  8004206f99:	74 35                	je     8004206fd0 <page_check+0x13c4>
  8004206f9b:	48 b9 17 99 21 04 80 	movabs $0x8004219917,%rcx
  8004206fa2:	00 00 00 
  8004206fa5:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004206fac:	00 00 00 
  8004206faf:	be 63 05 00 00       	mov    $0x563,%esi
  8004206fb4:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004206fbb:	00 00 00 
  8004206fbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fc3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206fca:	00 00 00 
  8004206fcd:	41 ff d0             	callq  *%r8
  8004206fd0:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206fd7:	00 00 00 
  8004206fda:	48 8b 00             	mov    (%rax),%rax
  8004206fdd:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206fe2:	48 89 c7             	mov    %rax,%rdi
  8004206fe5:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206fec:	00 00 00 
  8004206fef:	ff d0                	callq  *%rax
  8004206ff1:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ff8:	00 00 00 
  8004206ffb:	48 8b 00             	mov    (%rax),%rax
  8004206ffe:	be 00 00 00 00       	mov    $0x0,%esi
  8004207003:	48 89 c7             	mov    %rax,%rdi
  8004207006:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  800420700d:	00 00 00 
  8004207010:	ff d0                	callq  *%rax
  8004207012:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207016:	74 35                	je     800420704d <page_check+0x1441>
  8004207018:	48 b9 e8 98 21 04 80 	movabs $0x80042198e8,%rcx
  800420701f:	00 00 00 
  8004207022:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207029:	00 00 00 
  800420702c:	be 67 05 00 00       	mov    $0x567,%esi
  8004207031:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207038:	00 00 00 
  800420703b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207040:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207047:	00 00 00 
  800420704a:	41 ff d0             	callq  *%r8
  800420704d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207054:	00 00 00 
  8004207057:	48 8b 00             	mov    (%rax),%rax
  800420705a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420705f:	48 89 c7             	mov    %rax,%rdi
  8004207062:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207069:	00 00 00 
  800420706c:	ff d0                	callq  *%rax
  800420706e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207072:	74 35                	je     80042070a9 <page_check+0x149d>
  8004207074:	48 b9 30 99 21 04 80 	movabs $0x8004219930,%rcx
  800420707b:	00 00 00 
  800420707e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207085:	00 00 00 
  8004207088:	be 68 05 00 00       	mov    $0x568,%esi
  800420708d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207094:	00 00 00 
  8004207097:	b8 00 00 00 00       	mov    $0x0,%eax
  800420709c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070a3:	00 00 00 
  80042070a6:	41 ff d0             	callq  *%r8
  80042070a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042070ad:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070b1:	66 85 c0             	test   %ax,%ax
  80042070b4:	74 35                	je     80042070eb <page_check+0x14df>
  80042070b6:	48 b9 56 99 21 04 80 	movabs $0x8004219956,%rcx
  80042070bd:	00 00 00 
  80042070c0:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042070c7:	00 00 00 
  80042070ca:	be 69 05 00 00       	mov    $0x569,%esi
  80042070cf:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042070d6:	00 00 00 
  80042070d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042070de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070e5:	00 00 00 
  80042070e8:	41 ff d0             	callq  *%r8
  80042070eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042070ef:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070f3:	66 83 f8 01          	cmp    $0x1,%ax
  80042070f7:	74 35                	je     800420712e <page_check+0x1522>
  80042070f9:	48 b9 d1 98 21 04 80 	movabs $0x80042198d1,%rcx
  8004207100:	00 00 00 
  8004207103:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420710a:	00 00 00 
  800420710d:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004207112:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207119:	00 00 00 
  800420711c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207121:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207128:	00 00 00 
  800420712b:	41 ff d0             	callq  *%r8
  800420712e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207135:	00 00 00 
  8004207138:	48 8b 00             	mov    (%rax),%rax
  800420713b:	48 8b 00             	mov    (%rax),%rax
  800420713e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207144:	48 89 c7             	mov    %rax,%rdi
  8004207147:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  800420714e:	00 00 00 
  8004207151:	ff d0                	callq  *%rax
  8004207153:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800420715a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207161:	00 00 00 
  8004207164:	48 8b 00             	mov    (%rax),%rax
  8004207167:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420716e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207172:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207176:	66 83 f8 01          	cmp    $0x1,%ax
  800420717a:	74 35                	je     80042071b1 <page_check+0x15a5>
  800420717c:	48 b9 d1 98 21 04 80 	movabs $0x80042198d1,%rcx
  8004207183:	00 00 00 
  8004207186:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420718d:	00 00 00 
  8004207190:	be 80 05 00 00       	mov    $0x580,%esi
  8004207195:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420719c:	00 00 00 
  800420719f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042071ab:	00 00 00 
  80042071ae:	41 ff d0             	callq  *%r8
  80042071b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071b8:	48 89 c7             	mov    %rax,%rdi
  80042071bb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071c2:	00 00 00 
  80042071c5:	ff d0                	callq  *%rax
  80042071c7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042071d2:	74 13                	je     80042071e7 <page_check+0x15db>
  80042071d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042071d8:	48 89 c7             	mov    %rax,%rdi
  80042071db:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071e2:	00 00 00 
  80042071e5:	ff d0                	callq  *%rax
  80042071e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ee:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042071f2:	74 13                	je     8004207207 <page_check+0x15fb>
  80042071f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042071f8:	48 89 c7             	mov    %rax,%rdi
  80042071fb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207202:	00 00 00 
  8004207205:	ff d0                	callq  *%rax
  8004207207:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420720e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004207212:	74 13                	je     8004207227 <page_check+0x161b>
  8004207214:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207218:	48 89 c7             	mov    %rax,%rdi
  800420721b:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207222:	00 00 00 
  8004207225:	ff d0                	callq  *%rax
  8004207227:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  800420722e:	00 40 06 00 
  8004207232:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207239:	00 00 00 
  800420723c:	48 8b 00             	mov    (%rax),%rax
  800420723f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207246:	ba 01 00 00 00       	mov    $0x1,%edx
  800420724b:	48 89 ce             	mov    %rcx,%rsi
  800420724e:	48 89 c7             	mov    %rax,%rdi
  8004207251:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207258:	00 00 00 
  800420725b:	ff d0                	callq  *%rax
  800420725d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207264:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420726b:	00 00 00 
  800420726e:	48 8b 00             	mov    (%rax),%rax
  8004207271:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207278:	48 c1 ea 27          	shr    $0x27,%rdx
  800420727c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207282:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207286:	48 01 d0             	add    %rdx,%rax
  8004207289:	48 8b 00             	mov    (%rax),%rax
  800420728c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207292:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207299:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072a0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  80042072aa:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  80042072b0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042072b7:	00 00 00 
  80042072ba:	48 8b 00             	mov    (%rax),%rax
  80042072bd:	48 39 c2             	cmp    %rax,%rdx
  80042072c0:	72 35                	jb     80042072f7 <page_check+0x16eb>
  80042072c2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072c9:	48 89 c1             	mov    %rax,%rcx
  80042072cc:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042072d3:	00 00 00 
  80042072d6:	be 88 05 00 00       	mov    $0x588,%esi
  80042072db:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042072e2:	00 00 00 
  80042072e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042072f1:	00 00 00 
  80042072f4:	41 ff d0             	callq  *%r8
  80042072f7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042072fe:	00 00 00 
  8004207301:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207308:	48 01 d0             	add    %rdx,%rax
  800420730b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420730f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207316:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420731a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420731f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207326:	00 
  8004207327:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420732b:	48 01 d0             	add    %rdx,%rax
  800420732e:	48 8b 00             	mov    (%rax),%rax
  8004207331:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207337:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420733e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207345:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207349:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420734f:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207355:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420735c:	00 00 00 
  800420735f:	48 8b 00             	mov    (%rax),%rax
  8004207362:	48 39 c2             	cmp    %rax,%rdx
  8004207365:	72 35                	jb     800420739c <page_check+0x1790>
  8004207367:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420736e:	48 89 c1             	mov    %rax,%rcx
  8004207371:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004207378:	00 00 00 
  800420737b:	be 89 05 00 00       	mov    $0x589,%esi
  8004207380:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207387:	00 00 00 
  800420738a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420738f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207396:	00 00 00 
  8004207399:	41 ff d0             	callq  *%r8
  800420739c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042073a3:	00 00 00 
  80042073a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042073ad:	48 01 d0             	add    %rdx,%rax
  80042073b0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042073b4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042073bb:	48 c1 e8 15          	shr    $0x15,%rax
  80042073bf:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042073c4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042073cb:	00 
  80042073cc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042073d0:	48 01 d0             	add    %rdx,%rax
  80042073d3:	48 8b 00             	mov    (%rax),%rax
  80042073d6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073dc:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042073e3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042073ea:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042073f4:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042073fa:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207401:	00 00 00 
  8004207404:	48 8b 00             	mov    (%rax),%rax
  8004207407:	48 39 c2             	cmp    %rax,%rdx
  800420740a:	72 35                	jb     8004207441 <page_check+0x1835>
  800420740c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207413:	48 89 c1             	mov    %rax,%rcx
  8004207416:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420741d:	00 00 00 
  8004207420:	be 8a 05 00 00       	mov    $0x58a,%esi
  8004207425:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420742c:	00 00 00 
  800420742f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207434:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420743b:	00 00 00 
  800420743e:	41 ff d0             	callq  *%r8
  8004207441:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207448:	00 00 00 
  800420744b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207452:	48 01 d0             	add    %rdx,%rax
  8004207455:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800420745c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207463:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207467:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420746c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207473:	00 
  8004207474:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420747b:	48 01 c2             	add    %rax,%rdx
  800420747e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207485:	48 39 c2             	cmp    %rax,%rdx
  8004207488:	74 35                	je     80042074bf <page_check+0x18b3>
  800420748a:	48 b9 67 99 21 04 80 	movabs $0x8004219967,%rcx
  8004207491:	00 00 00 
  8004207494:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420749b:	00 00 00 
  800420749e:	be 8b 05 00 00       	mov    $0x58b,%esi
  80042074a3:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042074aa:	00 00 00 
  80042074ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074b2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042074b9:	00 00 00 
  80042074bc:	41 ff d0             	callq  *%r8
  80042074bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042074c3:	48 89 c7             	mov    %rax,%rdi
  80042074c6:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  80042074cd:	00 00 00 
  80042074d0:	ff d0                	callq  *%rax
  80042074d2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042074d7:	be ff 00 00 00       	mov    $0xff,%esi
  80042074dc:	48 89 c7             	mov    %rax,%rdi
  80042074df:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042074e6:	00 00 00 
  80042074e9:	ff d0                	callq  *%rax
  80042074eb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042074f2:	00 00 00 
  80042074f5:	48 8b 00             	mov    (%rax),%rax
  80042074f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042074fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004207502:	48 89 c7             	mov    %rax,%rdi
  8004207505:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  800420750c:	00 00 00 
  800420750f:	ff d0                	callq  *%rax
  8004207511:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207518:	00 00 00 
  800420751b:	48 8b 00             	mov    (%rax),%rax
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207527:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  800420752e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207535:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207539:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800420753f:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207545:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420754c:	00 00 00 
  800420754f:	48 8b 00             	mov    (%rax),%rax
  8004207552:	48 39 c2             	cmp    %rax,%rdx
  8004207555:	72 35                	jb     800420758c <page_check+0x1980>
  8004207557:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420755e:	48 89 c1             	mov    %rax,%rcx
  8004207561:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  8004207568:	00 00 00 
  800420756b:	be 90 05 00 00       	mov    $0x590,%esi
  8004207570:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207577:	00 00 00 
  800420757a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420757f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207586:	00 00 00 
  8004207589:	41 ff d0             	callq  *%r8
  800420758c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207593:	00 00 00 
  8004207596:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420759d:	48 01 d0             	add    %rdx,%rax
  80042075a0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042075a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042075a8:	48 8b 00             	mov    (%rax),%rax
  80042075ab:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042075b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042075b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075bf:	48 c1 e8 0c          	shr    $0xc,%rax
  80042075c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042075c9:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042075cf:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042075d6:	00 00 00 
  80042075d9:	48 8b 00             	mov    (%rax),%rax
  80042075dc:	48 39 c2             	cmp    %rax,%rdx
  80042075df:	72 35                	jb     8004207616 <page_check+0x1a0a>
  80042075e1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075e8:	48 89 c1             	mov    %rax,%rcx
  80042075eb:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  80042075f2:	00 00 00 
  80042075f5:	be 91 05 00 00       	mov    $0x591,%esi
  80042075fa:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207601:	00 00 00 
  8004207604:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207609:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207610:	00 00 00 
  8004207613:	41 ff d0             	callq  *%r8
  8004207616:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420761d:	00 00 00 
  8004207620:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207627:	48 01 d0             	add    %rdx,%rax
  800420762a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420762e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207632:	48 8b 00             	mov    (%rax),%rax
  8004207635:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420763b:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207642:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207649:	48 c1 e8 0c          	shr    $0xc,%rax
  800420764d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004207653:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207659:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207660:	00 00 00 
  8004207663:	48 8b 00             	mov    (%rax),%rax
  8004207666:	48 39 c2             	cmp    %rax,%rdx
  8004207669:	72 35                	jb     80042076a0 <page_check+0x1a94>
  800420766b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207672:	48 89 c1             	mov    %rax,%rcx
  8004207675:	48 ba c8 8c 21 04 80 	movabs $0x8004218cc8,%rdx
  800420767c:	00 00 00 
  800420767f:	be 92 05 00 00       	mov    $0x592,%esi
  8004207684:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  800420768b:	00 00 00 
  800420768e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207693:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420769a:	00 00 00 
  800420769d:	41 ff d0             	callq  *%r8
  80042076a0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042076a7:	00 00 00 
  80042076aa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076b1:	48 01 d0             	add    %rdx,%rax
  80042076b4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042076bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042076c2:	eb 58                	jmp    800420771c <page_check+0x1b10>
  80042076c4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042076cb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042076ce:	48 63 d2             	movslq %edx,%rdx
  80042076d1:	48 c1 e2 03          	shl    $0x3,%rdx
  80042076d5:	48 01 d0             	add    %rdx,%rax
  80042076d8:	48 8b 00             	mov    (%rax),%rax
  80042076db:	83 e0 01             	and    $0x1,%eax
  80042076de:	48 85 c0             	test   %rax,%rax
  80042076e1:	74 35                	je     8004207718 <page_check+0x1b0c>
  80042076e3:	48 b9 7f 99 21 04 80 	movabs $0x800421997f,%rcx
  80042076ea:	00 00 00 
  80042076ed:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042076f4:	00 00 00 
  80042076f7:	be 94 05 00 00       	mov    $0x594,%esi
  80042076fc:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207703:	00 00 00 
  8004207706:	b8 00 00 00 00       	mov    $0x0,%eax
  800420770b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207712:	00 00 00 
  8004207715:	41 ff d0             	callq  *%r8
  8004207718:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420771c:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004207723:	7e 9f                	jle    80042076c4 <page_check+0x1ab8>
  8004207725:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420772c:	00 00 00 
  800420772f:	48 8b 00             	mov    (%rax),%rax
  8004207732:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207739:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004207740:	00 00 00 
  8004207743:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207747:	48 89 10             	mov    %rdx,(%rax)
  800420774a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420774e:	48 89 c7             	mov    %rax,%rdi
  8004207751:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207758:	00 00 00 
  800420775b:	ff d0                	callq  *%rax
  800420775d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207761:	48 89 c7             	mov    %rax,%rdi
  8004207764:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420776b:	00 00 00 
  800420776e:	ff d0                	callq  *%rax
  8004207770:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207774:	48 89 c7             	mov    %rax,%rdi
  8004207777:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420777e:	00 00 00 
  8004207781:	ff d0                	callq  *%rax
  8004207783:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207787:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420778b:	66 85 c0             	test   %ax,%ax
  800420778e:	74 35                	je     80042077c5 <page_check+0x1bb9>
  8004207790:	48 b9 96 99 21 04 80 	movabs $0x8004219996,%rcx
  8004207797:	00 00 00 
  800420779a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042077a1:	00 00 00 
  80042077a4:	be a0 05 00 00       	mov    $0x5a0,%esi
  80042077a9:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042077b0:	00 00 00 
  80042077b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042077bf:	00 00 00 
  80042077c2:	41 ff d0             	callq  *%r8
  80042077c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042077c9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077cd:	66 85 c0             	test   %ax,%ax
  80042077d0:	74 35                	je     8004207807 <page_check+0x1bfb>
  80042077d2:	48 b9 56 99 21 04 80 	movabs $0x8004219956,%rcx
  80042077d9:	00 00 00 
  80042077dc:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042077e3:	00 00 00 
  80042077e6:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042077eb:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042077f2:	00 00 00 
  80042077f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077fa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207801:	00 00 00 
  8004207804:	41 ff d0             	callq  *%r8
  8004207807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420780b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420780f:	66 85 c0             	test   %ax,%ax
  8004207812:	74 35                	je     8004207849 <page_check+0x1c3d>
  8004207814:	48 b9 a7 99 21 04 80 	movabs $0x80042199a7,%rcx
  800420781b:	00 00 00 
  800420781e:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207825:	00 00 00 
  8004207828:	be a2 05 00 00       	mov    $0x5a2,%esi
  800420782d:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207834:	00 00 00 
  8004207837:	b8 00 00 00 00       	mov    $0x0,%eax
  800420783c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207843:	00 00 00 
  8004207846:	41 ff d0             	callq  *%r8
  8004207849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420784d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207851:	66 85 c0             	test   %ax,%ax
  8004207854:	74 35                	je     800420788b <page_check+0x1c7f>
  8004207856:	48 b9 b8 99 21 04 80 	movabs $0x80042199b8,%rcx
  800420785d:	00 00 00 
  8004207860:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207867:	00 00 00 
  800420786a:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420786f:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207876:	00 00 00 
  8004207879:	b8 00 00 00 00       	mov    $0x0,%eax
  800420787e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207885:	00 00 00 
  8004207888:	41 ff d0             	callq  *%r8
  800420788b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420788f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207893:	66 85 c0             	test   %ax,%ax
  8004207896:	74 35                	je     80042078cd <page_check+0x1cc1>
  8004207898:	48 b9 c9 99 21 04 80 	movabs $0x80042199c9,%rcx
  800420789f:	00 00 00 
  80042078a2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042078a9:	00 00 00 
  80042078ac:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042078b1:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042078b8:	00 00 00 
  80042078bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042078c7:	00 00 00 
  80042078ca:	41 ff d0             	callq  *%r8
  80042078cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042078d1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042078d5:	66 85 c0             	test   %ax,%ax
  80042078d8:	74 35                	je     800420790f <page_check+0x1d03>
  80042078da:	48 b9 da 99 21 04 80 	movabs $0x80042199da,%rcx
  80042078e1:	00 00 00 
  80042078e4:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042078eb:	00 00 00 
  80042078ee:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042078f3:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042078fa:	00 00 00 
  80042078fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207902:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207909:	00 00 00 
  800420790c:	41 ff d0             	callq  *%r8
  800420790f:	be 01 10 00 00       	mov    $0x1001,%esi
  8004207914:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207919:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004207920:	00 00 00 
  8004207923:	ff d0                	callq  *%rax
  8004207925:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  800420792c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207931:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207936:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800420793d:	00 00 00 
  8004207940:	ff d0                	callq  *%rax
  8004207942:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207949:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207950:	00 00 00 
  8004207953:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  800420795a:	76 1d                	jbe    8004207979 <page_check+0x1d6d>
  800420795c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207963:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420796a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207971:	00 00 00 
  8004207974:	48 39 c2             	cmp    %rax,%rdx
  8004207977:	76 35                	jbe    80042079ae <page_check+0x1da2>
  8004207979:	48 b9 f0 99 21 04 80 	movabs $0x80042199f0,%rcx
  8004207980:	00 00 00 
  8004207983:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  800420798a:	00 00 00 
  800420798d:	be ac 05 00 00       	mov    $0x5ac,%esi
  8004207992:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207999:	00 00 00 
  800420799c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079a1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042079a8:	00 00 00 
  80042079ab:	41 ff d0             	callq  *%r8
  80042079ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042079b5:	00 00 00 
  80042079b8:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  80042079bf:	76 1d                	jbe    80042079de <page_check+0x1dd2>
  80042079c1:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042079c8:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  80042079cf:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  80042079d6:	00 00 00 
  80042079d9:	48 39 c2             	cmp    %rax,%rdx
  80042079dc:	76 35                	jbe    8004207a13 <page_check+0x1e07>
  80042079de:	48 b9 18 9a 21 04 80 	movabs $0x8004219a18,%rcx
  80042079e5:	00 00 00 
  80042079e8:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  80042079ef:	00 00 00 
  80042079f2:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042079f7:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  80042079fe:	00 00 00 
  8004207a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a0d:	00 00 00 
  8004207a10:	41 ff d0             	callq  *%r8
  8004207a13:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a1a:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a1f:	48 85 c0             	test   %rax,%rax
  8004207a22:	75 11                	jne    8004207a35 <page_check+0x1e29>
  8004207a24:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207a2b:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a30:	48 85 c0             	test   %rax,%rax
  8004207a33:	74 35                	je     8004207a6a <page_check+0x1e5e>
  8004207a35:	48 b9 40 9a 21 04 80 	movabs $0x8004219a40,%rcx
  8004207a3c:	00 00 00 
  8004207a3f:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207a46:	00 00 00 
  8004207a49:	be af 05 00 00       	mov    $0x5af,%esi
  8004207a4e:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207a55:	00 00 00 
  8004207a58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a64:	00 00 00 
  8004207a67:	41 ff d0             	callq  *%r8
  8004207a6a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a71:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207a77:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207a7e:	76 35                	jbe    8004207ab5 <page_check+0x1ea9>
  8004207a80:	48 b9 67 9a 21 04 80 	movabs $0x8004219a67,%rcx
  8004207a87:	00 00 00 
  8004207a8a:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207a91:	00 00 00 
  8004207a94:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207a99:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207aa0:	00 00 00 
  8004207aa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207aa8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207aaf:	00 00 00 
  8004207ab2:	41 ff d0             	callq  *%r8
  8004207ab5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207abc:	00 00 00 
  8004207abf:	48 8b 00             	mov    (%rax),%rax
  8004207ac2:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207ac9:	48 89 d6             	mov    %rdx,%rsi
  8004207acc:	48 89 c7             	mov    %rax,%rdi
  8004207acf:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ad6:	00 00 00 
  8004207ad9:	ff d0                	callq  *%rax
  8004207adb:	48 85 c0             	test   %rax,%rax
  8004207ade:	74 35                	je     8004207b15 <page_check+0x1f09>
  8004207ae0:	48 b9 80 9a 21 04 80 	movabs $0x8004219a80,%rcx
  8004207ae7:	00 00 00 
  8004207aea:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207af1:	00 00 00 
  8004207af4:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207af9:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207b00:	00 00 00 
  8004207b03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b0f:	00 00 00 
  8004207b12:	41 ff d0             	callq  *%r8
  8004207b15:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207b1c:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207b23:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b2a:	00 00 00 
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	48 89 d6             	mov    %rdx,%rsi
  8004207b33:	48 89 c7             	mov    %rax,%rdi
  8004207b36:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207b3d:	00 00 00 
  8004207b40:	ff d0                	callq  *%rax
  8004207b42:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207b48:	74 35                	je     8004207b7f <page_check+0x1f73>
  8004207b4a:	48 b9 a8 9a 21 04 80 	movabs $0x8004219aa8,%rcx
  8004207b51:	00 00 00 
  8004207b54:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207b5b:	00 00 00 
  8004207b5e:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207b63:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207b6a:	00 00 00 
  8004207b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b79:	00 00 00 
  8004207b7c:	41 ff d0             	callq  *%r8
  8004207b7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b86:	00 00 00 
  8004207b89:	48 8b 00             	mov    (%rax),%rax
  8004207b8c:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207b93:	48 89 d6             	mov    %rdx,%rsi
  8004207b96:	48 89 c7             	mov    %rax,%rdi
  8004207b99:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ba0:	00 00 00 
  8004207ba3:	ff d0                	callq  *%rax
  8004207ba5:	48 85 c0             	test   %rax,%rax
  8004207ba8:	74 35                	je     8004207bdf <page_check+0x1fd3>
  8004207baa:	48 b9 d8 9a 21 04 80 	movabs $0x8004219ad8,%rcx
  8004207bb1:	00 00 00 
  8004207bb4:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207bbb:	00 00 00 
  8004207bbe:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207bc3:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207bca:	00 00 00 
  8004207bcd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207bd9:	00 00 00 
  8004207bdc:	41 ff d0             	callq  *%r8
  8004207bdf:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207be6:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207bed:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207bf4:	00 00 00 
  8004207bf7:	48 8b 00             	mov    (%rax),%rax
  8004207bfa:	48 89 d6             	mov    %rdx,%rsi
  8004207bfd:	48 89 c7             	mov    %rax,%rdi
  8004207c00:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207c07:	00 00 00 
  8004207c0a:	ff d0                	callq  *%rax
  8004207c0c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207c10:	74 35                	je     8004207c47 <page_check+0x203b>
  8004207c12:	48 b9 00 9b 21 04 80 	movabs $0x8004219b00,%rcx
  8004207c19:	00 00 00 
  8004207c1c:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207c23:	00 00 00 
  8004207c26:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207c2b:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207c32:	00 00 00 
  8004207c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c3a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207c41:	00 00 00 
  8004207c44:	41 ff d0             	callq  *%r8
  8004207c47:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207c4e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207c55:	00 00 00 
  8004207c58:	48 8b 00             	mov    (%rax),%rax
  8004207c5b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c60:	48 89 ce             	mov    %rcx,%rsi
  8004207c63:	48 89 c7             	mov    %rax,%rdi
  8004207c66:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207c6d:	00 00 00 
  8004207c70:	ff d0                	callq  *%rax
  8004207c72:	48 8b 00             	mov    (%rax),%rax
  8004207c75:	83 e0 1a             	and    $0x1a,%eax
  8004207c78:	48 85 c0             	test   %rax,%rax
  8004207c7b:	75 35                	jne    8004207cb2 <page_check+0x20a6>
  8004207c7d:	48 b9 30 9b 21 04 80 	movabs $0x8004219b30,%rcx
  8004207c84:	00 00 00 
  8004207c87:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207c8e:	00 00 00 
  8004207c91:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207c96:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207c9d:	00 00 00 
  8004207ca0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ca5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207cac:	00 00 00 
  8004207caf:	41 ff d0             	callq  *%r8
  8004207cb2:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207cb9:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207cc0:	00 00 00 
  8004207cc3:	48 8b 00             	mov    (%rax),%rax
  8004207cc6:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207ccb:	48 89 ce             	mov    %rcx,%rsi
  8004207cce:	48 89 c7             	mov    %rax,%rdi
  8004207cd1:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207cd8:	00 00 00 
  8004207cdb:	ff d0                	callq  *%rax
  8004207cdd:	48 8b 00             	mov    (%rax),%rax
  8004207ce0:	83 e0 04             	and    $0x4,%eax
  8004207ce3:	48 85 c0             	test   %rax,%rax
  8004207ce6:	74 35                	je     8004207d1d <page_check+0x2111>
  8004207ce8:	48 b9 78 9b 21 04 80 	movabs $0x8004219b78,%rcx
  8004207cef:	00 00 00 
  8004207cf2:	48 ba 41 8d 21 04 80 	movabs $0x8004218d41,%rdx
  8004207cf9:	00 00 00 
  8004207cfc:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207d01:	48 bf 56 8d 21 04 80 	movabs $0x8004218d56,%rdi
  8004207d08:	00 00 00 
  8004207d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d10:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207d17:	00 00 00 
  8004207d1a:	41 ff d0             	callq  *%r8
  8004207d1d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207d24:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d2b:	00 00 00 
  8004207d2e:	48 8b 00             	mov    (%rax),%rax
  8004207d31:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d36:	48 89 ce             	mov    %rcx,%rsi
  8004207d39:	48 89 c7             	mov    %rax,%rdi
  8004207d3c:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d43:	00 00 00 
  8004207d46:	ff d0                	callq  *%rax
  8004207d48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d4f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207d56:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207d5c:	48 89 c1             	mov    %rax,%rcx
  8004207d5f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d66:	00 00 00 
  8004207d69:	48 8b 00             	mov    (%rax),%rax
  8004207d6c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d71:	48 89 ce             	mov    %rcx,%rsi
  8004207d74:	48 89 c7             	mov    %rax,%rdi
  8004207d77:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d7e:	00 00 00 
  8004207d81:	ff d0                	callq  *%rax
  8004207d83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d8a:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207d91:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d98:	00 00 00 
  8004207d9b:	48 8b 00             	mov    (%rax),%rax
  8004207d9e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207da3:	48 89 ce             	mov    %rcx,%rsi
  8004207da6:	48 89 c7             	mov    %rax,%rdi
  8004207da9:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207db0:	00 00 00 
  8004207db3:	ff d0                	callq  *%rax
  8004207db5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207dbc:	48 bf ab 9b 21 04 80 	movabs $0x8004219bab,%rdi
  8004207dc3:	00 00 00 
  8004207dc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcb:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004207dd2:	00 00 00 
  8004207dd5:	ff d2                	callq  *%rdx
  8004207dd7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207dde:	5b                   	pop    %rbx
  8004207ddf:	5d                   	pop    %rbp
  8004207de0:	c3                   	retq   

0000008004207de1 <page2ppn>:
  8004207de1:	55                   	push   %rbp
  8004207de2:	48 89 e5             	mov    %rsp,%rbp
  8004207de5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207de9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ded:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207df1:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207df8:	00 00 00 
  8004207dfb:	48 8b 00             	mov    (%rax),%rax
  8004207dfe:	48 29 c2             	sub    %rax,%rdx
  8004207e01:	48 89 d0             	mov    %rdx,%rax
  8004207e04:	48 c1 f8 04          	sar    $0x4,%rax
  8004207e08:	c9                   	leaveq 
  8004207e09:	c3                   	retq   

0000008004207e0a <page2pa>:
  8004207e0a:	55                   	push   %rbp
  8004207e0b:	48 89 e5             	mov    %rsp,%rbp
  8004207e0e:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e1a:	48 89 c7             	mov    %rax,%rdi
  8004207e1d:	48 b8 e1 7d 20 04 80 	movabs $0x8004207de1,%rax
  8004207e24:	00 00 00 
  8004207e27:	ff d0                	callq  *%rax
  8004207e29:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207e2d:	c9                   	leaveq 
  8004207e2e:	c3                   	retq   

0000008004207e2f <pa2page>:
  8004207e2f:	55                   	push   %rbp
  8004207e30:	48 89 e5             	mov    %rsp,%rbp
  8004207e33:	48 83 ec 10          	sub    $0x10,%rsp
  8004207e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e3f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207e43:	48 89 c2             	mov    %rax,%rdx
  8004207e46:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207e4d:	00 00 00 
  8004207e50:	48 8b 00             	mov    (%rax),%rax
  8004207e53:	48 39 c2             	cmp    %rax,%rdx
  8004207e56:	72 2a                	jb     8004207e82 <pa2page+0x53>
  8004207e58:	48 ba c8 9b 21 04 80 	movabs $0x8004219bc8,%rdx
  8004207e5f:	00 00 00 
  8004207e62:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207e67:	48 bf e7 9b 21 04 80 	movabs $0x8004219be7,%rdi
  8004207e6e:	00 00 00 
  8004207e71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e76:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004207e7d:	00 00 00 
  8004207e80:	ff d1                	callq  *%rcx
  8004207e82:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207e89:	00 00 00 
  8004207e8c:	48 8b 00             	mov    (%rax),%rax
  8004207e8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207e93:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207e97:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207e9b:	48 01 d0             	add    %rdx,%rax
  8004207e9e:	c9                   	leaveq 
  8004207e9f:	c3                   	retq   

0000008004207ea0 <page2kva>:
  8004207ea0:	55                   	push   %rbp
  8004207ea1:	48 89 e5             	mov    %rsp,%rbp
  8004207ea4:	48 83 ec 20          	sub    $0x20,%rsp
  8004207ea8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207eb0:	48 89 c7             	mov    %rax,%rdi
  8004207eb3:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004207eba:	00 00 00 
  8004207ebd:	ff d0                	callq  *%rax
  8004207ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ec7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207ecb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207ece:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207ed1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207ed8:	00 00 00 
  8004207edb:	48 8b 00             	mov    (%rax),%rax
  8004207ede:	48 39 c2             	cmp    %rax,%rdx
  8004207ee1:	72 32                	jb     8004207f15 <page2kva+0x75>
  8004207ee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ee7:	48 89 c1             	mov    %rax,%rcx
  8004207eea:	48 ba f8 9b 21 04 80 	movabs $0x8004219bf8,%rdx
  8004207ef1:	00 00 00 
  8004207ef4:	be 62 00 00 00       	mov    $0x62,%esi
  8004207ef9:	48 bf e7 9b 21 04 80 	movabs $0x8004219be7,%rdi
  8004207f00:	00 00 00 
  8004207f03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207f0f:	00 00 00 
  8004207f12:	41 ff d0             	callq  *%r8
  8004207f15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207f1c:	00 00 00 
  8004207f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f23:	48 01 d0             	add    %rdx,%rax
  8004207f26:	c9                   	leaveq 
  8004207f27:	c3                   	retq   

0000008004207f28 <unlock_kernel>:
  8004207f28:	55                   	push   %rbp
  8004207f29:	48 89 e5             	mov    %rsp,%rbp
  8004207f2c:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004207f33:	00 00 00 
  8004207f36:	48 b8 d4 73 21 04 80 	movabs $0x80042173d4,%rax
  8004207f3d:	00 00 00 
  8004207f40:	ff d0                	callq  *%rax
  8004207f42:	f3 90                	pause  
  8004207f44:	5d                   	pop    %rbp
  8004207f45:	c3                   	retq   

0000008004207f46 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207f46:	55                   	push   %rbp
  8004207f47:	48 89 e5             	mov    %rsp,%rbp
  8004207f4a:	53                   	push   %rbx
  8004207f4b:	48 83 ec 28          	sub    $0x28,%rsp
  8004207f4f:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207f52:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207f56:	89 d0                	mov    %edx,%eax
  8004207f58:	88 45 d8             	mov    %al,-0x28(%rbp)
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	e = &envs[envid];
  8004207f5b:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004207f62:	00 00 00 
  8004207f65:	48 8b 10             	mov    (%rax),%rdx
  8004207f68:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207f6b:	48 98                	cltq   
  8004207f6d:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f74:	48 01 d0             	add    %rdx,%rax
  8004207f77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207f7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207f7f:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207f85:	85 c0                	test   %eax,%eax
  8004207f87:	74 0f                	je     8004207f98 <envid2env+0x52>
  8004207f89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207f8d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f93:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207f96:	74 15                	je     8004207fad <envid2env+0x67>
		*env_store = 0;
  8004207f98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f9c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207fa3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207fa8:	e9 a6 00 00 00       	jmpq   8004208053 <envid2env+0x10d>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207fad:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207fb1:	0f 84 8f 00 00 00    	je     8004208046 <envid2env+0x100>
  8004207fb7:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004207fbe:	00 00 00 
  8004207fc1:	ff d0                	callq  *%rax
  8004207fc3:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004207fca:	00 00 00 
  8004207fcd:	48 98                	cltq   
  8004207fcf:	48 c1 e0 03          	shl    $0x3,%rax
  8004207fd3:	48 89 c1             	mov    %rax,%rcx
  8004207fd6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207fda:	48 01 c8             	add    %rcx,%rax
  8004207fdd:	48 01 d0             	add    %rdx,%rax
  8004207fe0:	48 83 c0 08          	add    $0x8,%rax
  8004207fe4:	48 8b 10             	mov    (%rax),%rdx
  8004207fe7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207feb:	48 39 c2             	cmp    %rax,%rdx
  8004207fee:	74 56                	je     8004208046 <envid2env+0x100>
  8004207ff0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ff4:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207ffa:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208001:	00 00 00 
  8004208004:	ff d0                	callq  *%rax
  8004208006:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420800d:	00 00 00 
  8004208010:	48 98                	cltq   
  8004208012:	48 c1 e0 03          	shl    $0x3,%rax
  8004208016:	48 89 c1             	mov    %rax,%rcx
  8004208019:	48 c1 e1 04          	shl    $0x4,%rcx
  800420801d:	48 01 c8             	add    %rcx,%rax
  8004208020:	48 01 d0             	add    %rdx,%rax
  8004208023:	48 83 c0 08          	add    $0x8,%rax
  8004208027:	48 8b 00             	mov    (%rax),%rax
  800420802a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208030:	39 c3                	cmp    %eax,%ebx
  8004208032:	74 12                	je     8004208046 <envid2env+0x100>
		*env_store = 0;
  8004208034:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208038:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  800420803f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004208044:	eb 0d                	jmp    8004208053 <envid2env+0x10d>
	}

	// should be *env_store = e;, this might literaly work tho
	env_store = &e;
  8004208046:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420804a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return 0;
  800420804e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208053:	48 83 c4 28          	add    $0x28,%rsp
  8004208057:	5b                   	pop    %rbx
  8004208058:	5d                   	pop    %rbp
  8004208059:	c3                   	retq   

000000800420805a <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  800420805a:	55                   	push   %rbp
  800420805b:	48 89 e5             	mov    %rsp,%rbp
  800420805e:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004208062:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004208069:	eb 6d                	jmp    80042080d8 <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  800420806b:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208072:	00 00 00 
  8004208075:	48 8b 10             	mov    (%rax),%rdx
  8004208078:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420807b:	48 98                	cltq   
  800420807d:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208084:	48 01 d0             	add    %rdx,%rax
  8004208087:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  800420808e:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004208091:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208098:	00 00 00 
  800420809b:	48 8b 10             	mov    (%rax),%rdx
  800420809e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080a1:	48 98                	cltq   
  80042080a3:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080aa:	48 01 c2             	add    %rax,%rdx
  80042080ad:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042080b4:	00 00 00 
  80042080b7:	48 8b 08             	mov    (%rax),%rcx
  80042080ba:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080bd:	48 98                	cltq   
  80042080bf:	48 83 c0 01          	add    $0x1,%rax
  80042080c3:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080ca:	48 01 c8             	add    %rcx,%rax
  80042080cd:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  80042080d4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042080d8:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  80042080df:	7e 8a                	jle    800420806b <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  80042080e1:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042080e8:	00 00 00 
  80042080eb:	48 8b 00             	mov    (%rax),%rax
  80042080ee:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  80042080f4:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  80042080fb:	00 00 00 00 
	env_free_list = &envs[0];
  80042080ff:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208106:	00 00 00 
  8004208109:	48 8b 10             	mov    (%rax),%rdx
  800420810c:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208113:	00 00 00 
  8004208116:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208119:	48 b8 27 81 20 04 80 	movabs $0x8004208127,%rax
  8004208120:	00 00 00 
  8004208123:	ff d0                	callq  *%rax
}
  8004208125:	c9                   	leaveq 
  8004208126:	c3                   	retq   

0000008004208127 <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  8004208127:	55                   	push   %rbp
  8004208128:	48 89 e5             	mov    %rsp,%rbp
  800420812b:	53                   	push   %rbx
  800420812c:	48 83 ec 10          	sub    $0x10,%rsp
  8004208130:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  8004208137:	00 00 00 
  800420813a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  800420813e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208142:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  8004208145:	b8 23 00 00 00       	mov    $0x23,%eax
  800420814a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  800420814c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208151:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  8004208153:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208158:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  800420815a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420815f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208161:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208166:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  8004208168:	b8 08 00 00 00       	mov    $0x8,%eax
  800420816d:	89 c3                	mov    %eax,%ebx
  800420816f:	53                   	push   %rbx
  8004208170:	48 b8 7d 81 20 04 80 	movabs $0x800420817d,%rax
  8004208177:	00 00 00 
  800420817a:	50                   	push   %rax
  800420817b:	48 cb                	lretq  
  800420817d:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004208183:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  8004208187:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  800420818a:	48 83 c4 10          	add    $0x10,%rsp
  800420818e:	5b                   	pop    %rbx
  800420818f:	5d                   	pop    %rbp
  8004208190:	c3                   	retq   

0000008004208191 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208191:	55                   	push   %rbp
  8004208192:	48 89 e5             	mov    %rsp,%rbp
  8004208195:	48 83 ec 20          	sub    $0x20,%rsp
  8004208199:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  800420819d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042081a4:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081a5:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081aa:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042081b1:	00 00 00 
  80042081b4:	ff d0                	callq  *%rax
  80042081b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042081ba:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042081bf:	75 0a                	jne    80042081cb <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042081c1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042081c6:	e9 bc 00 00 00       	jmpq   8004208287 <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042081cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042081cf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042081d3:	8d 50 01             	lea    0x1(%rax),%edx
  80042081d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042081da:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042081de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042081e2:	48 89 c7             	mov    %rax,%rdi
  80042081e5:	48 b8 a0 7e 20 04 80 	movabs $0x8004207ea0,%rax
  80042081ec:	00 00 00 
  80042081ef:	ff d0                	callq  *%rax
  80042081f1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042081f5:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  80042081fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208200:	48 89 c7             	mov    %rax,%rdi
  8004208203:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  800420820a:	00 00 00 
  800420820d:	ff d0                	callq  *%rax
  800420820f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208213:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  800420821a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420821e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208225:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420822a:	be 00 00 00 00       	mov    $0x0,%esi
  800420822f:	48 89 c7             	mov    %rax,%rdi
  8004208232:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  8004208239:	00 00 00 
  800420823c:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  800420823e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208242:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208249:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420824d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004208254:	00 00 00 
  8004208257:	48 8b 00             	mov    (%rax),%rax
  800420825a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420825e:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208265:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420826c:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208270:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208274:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420827b:	48 83 c8 05          	or     $0x5,%rax
  800420827f:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208282:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208287:	c9                   	leaveq 
  8004208288:	c3                   	retq   

0000008004208289 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208289:	55                   	push   %rbp
  800420828a:	48 89 e5             	mov    %rsp,%rbp
  800420828d:	48 83 ec 30          	sub    $0x30,%rsp
  8004208291:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208295:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208298:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  800420829f:	00 00 00 
  80042082a2:	48 8b 00             	mov    (%rax),%rax
  80042082a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042082a9:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042082ae:	75 0a                	jne    80042082ba <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042082b0:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042082b5:	e9 5b 01 00 00       	jmpq   8004208415 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  80042082ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042082be:	48 89 c7             	mov    %rax,%rdi
  80042082c1:	48 b8 91 81 20 04 80 	movabs $0x8004208191,%rax
  80042082c8:	00 00 00 
  80042082cb:	ff d0                	callq  *%rax
  80042082cd:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042082d0:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042082d4:	79 08                	jns    80042082de <env_alloc+0x55>
		return r;
  80042082d6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042082d9:	e9 37 01 00 00       	jmpq   8004208415 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042082de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042082e2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042082e8:	05 00 10 00 00       	add    $0x1000,%eax
  80042082ed:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042082f2:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042082f5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042082f9:	7f 07                	jg     8004208302 <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042082fb:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  8004208302:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208306:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420830d:	00 00 00 
  8004208310:	48 8b 00             	mov    (%rax),%rax
  8004208313:	48 29 c2             	sub    %rax,%rdx
  8004208316:	48 89 d0             	mov    %rdx,%rax
  8004208319:	48 c1 f8 03          	sar    $0x3,%rax
  800420831d:	48 89 c2             	mov    %rax,%rdx
  8004208320:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  8004208327:	fa a4 4f 
  800420832a:	48 0f af c2          	imul   %rdx,%rax
  800420832e:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208331:	89 c2                	mov    %eax,%edx
  8004208333:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208337:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  800420833d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208341:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208344:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  800420834a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420834e:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208355:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420835c:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208363:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420836a:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420836f:	be 00 00 00 00       	mov    $0x0,%esi
  8004208374:	48 89 c7             	mov    %rax,%rdi
  8004208377:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800420837e:	00 00 00 
  8004208381:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208387:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  800420838e:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208394:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  800420839a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420839e:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  80042083a5:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  80042083a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083ab:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  80042083b0:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  80042083b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083bb:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  80042083c2:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  80042083c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083c8:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  80042083cf:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  80042083d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083d7:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042083de:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  80042083e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083e6:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042083ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083f1:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042083f8:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  80042083ff:	00 00 00 
  8004208402:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208405:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208409:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420840d:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208410:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208415:	c9                   	leaveq 
  8004208416:	c3                   	retq   

0000008004208417 <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208417:	55                   	push   %rbp
  8004208418:	48 89 e5             	mov    %rsp,%rbp
  800420841b:	48 83 ec 40          	sub    $0x40,%rsp
  800420841f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208423:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208427:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  800420842b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420842f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208433:	48 01 d0             	add    %rdx,%rax
  8004208436:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  800420843a:	e9 c8 00 00 00       	jmpq   8004208507 <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  800420843f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208444:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420844b:	00 00 00 
  800420844e:	ff d0                	callq  *%rax
  8004208450:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208454:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208459:	75 30                	jne    800420848b <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  800420845b:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208460:	48 ba 20 9c 21 04 80 	movabs $0x8004219c20,%rdx
  8004208467:	00 00 00 
  800420846a:	be ad 01 00 00       	mov    $0x1ad,%esi
  800420846f:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208476:	00 00 00 
  8004208479:	b8 00 00 00 00       	mov    $0x0,%eax
  800420847e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208485:	00 00 00 
  8004208488:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  800420848b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420848f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208496:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420849a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420849e:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042084a3:	48 89 c7             	mov    %rax,%rdi
  80042084a6:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042084ad:	00 00 00 
  80042084b0:	ff d0                	callq  *%rax
  80042084b2:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042084b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042084b9:	79 30                	jns    80042084eb <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  80042084bb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042084be:	89 c1                	mov    %eax,%ecx
  80042084c0:	48 ba 58 9c 21 04 80 	movabs $0x8004219c58,%rdx
  80042084c7:	00 00 00 
  80042084ca:	be b1 01 00 00       	mov    $0x1b1,%esi
  80042084cf:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  80042084d6:	00 00 00 
  80042084d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042084de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042084e5:	00 00 00 
  80042084e8:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  80042084eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042084ef:	48 05 00 10 00 00    	add    $0x1000,%rax
  80042084f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042084f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042084fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208503:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420850b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420850f:	0f 82 2a ff ff ff    	jb     800420843f <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208515:	c9                   	leaveq 
  8004208516:	c3                   	retq   

0000008004208517 <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208517:	55                   	push   %rbp
  8004208518:	48 89 e5             	mov    %rsp,%rbp
  800420851b:	53                   	push   %rbx
  800420851c:	48 83 ec 78          	sub    $0x78,%rsp
  8004208520:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208524:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208528:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420852c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208530:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208535:	0f 84 6f 03 00 00    	je     80042088aa <load_icode+0x393>
  800420853b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420853f:	8b 00                	mov    (%rax),%eax
  8004208541:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208546:	0f 85 5e 03 00 00    	jne    80042088aa <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  800420854c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208550:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208557:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420855b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208562:	00 00 00 
  8004208565:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208569:	77 32                	ja     800420859d <load_icode+0x86>
  800420856b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420856f:	48 89 c1             	mov    %rax,%rcx
  8004208572:	48 ba 80 9c 21 04 80 	movabs $0x8004219c80,%rdx
  8004208579:	00 00 00 
  800420857c:	be d3 01 00 00       	mov    $0x1d3,%esi
  8004208581:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208588:	00 00 00 
  800420858b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208590:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208597:	00 00 00 
  800420859a:	41 ff d0             	callq  *%r8
  800420859d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042085a4:	ff ff ff 
  80042085a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085ab:	48 01 d0             	add    %rdx,%rax
  80042085ae:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  80042085b2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042085b6:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  80042085b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042085bd:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042085c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042085c5:	48 01 d0             	add    %rdx,%rax
  80042085c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  80042085cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042085d0:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  80042085d4:	0f b7 c0             	movzwl %ax,%eax
  80042085d7:	48 c1 e0 03          	shl    $0x3,%rax
  80042085db:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042085e2:	00 
  80042085e3:	48 29 c2             	sub    %rax,%rdx
  80042085e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042085ea:	48 01 d0             	add    %rdx,%rax
  80042085ed:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  80042085f1:	e9 bd 00 00 00       	jmpq   80042086b3 <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  80042085f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042085fa:	8b 00                	mov    (%rax),%eax
  80042085fc:	83 f8 01             	cmp    $0x1,%eax
  80042085ff:	0f 85 a9 00 00 00    	jne    80042086ae <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208605:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208609:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420860d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208611:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208615:	48 89 c1             	mov    %rax,%rcx
  8004208618:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420861c:	48 89 ce             	mov    %rcx,%rsi
  800420861f:	48 89 c7             	mov    %rax,%rdi
  8004208622:	48 b8 17 84 20 04 80 	movabs $0x8004208417,%rax
  8004208629:	00 00 00 
  800420862c:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  800420862e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208632:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420863a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800420863e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208642:	48 01 c1             	add    %rax,%rcx
  8004208645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208649:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420864d:	48 89 ce             	mov    %rcx,%rsi
  8004208650:	48 89 c7             	mov    %rax,%rdi
  8004208653:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420865a:	00 00 00 
  800420865d:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  800420865f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208663:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420866b:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420866f:	48 39 c2             	cmp    %rax,%rdx
  8004208672:	73 3a                	jae    80042086ae <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208674:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208678:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420867c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208680:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208684:	48 29 c2             	sub    %rax,%rdx
  8004208687:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420868b:	48 8b 48 10          	mov    0x10(%rax),%rcx
  800420868f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208693:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208697:	48 01 c8             	add    %rcx,%rax
  800420869a:	be 00 00 00 00       	mov    $0x0,%esi
  800420869f:	48 89 c7             	mov    %rax,%rdi
  80042086a2:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042086a9:	00 00 00 
  80042086ac:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  80042086ae:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  80042086b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086b7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  80042086bb:	0f 82 35 ff ff ff    	jb     80042085f6 <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  80042086c1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042086c5:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042086ca:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  80042086cf:	48 89 c7             	mov    %rax,%rdi
  80042086d2:	48 b8 17 84 20 04 80 	movabs $0x8004208417,%rax
  80042086d9:	00 00 00 
  80042086dc:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  80042086de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042086e2:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042086e6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042086ea:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  80042086f1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042086f5:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  80042086fa:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208701:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208708:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208709:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420870d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208711:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208715:	48 01 d0             	add    %rdx,%rax
  8004208718:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  800420871c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208720:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208724:	0f b7 c0             	movzwl %ax,%eax
  8004208727:	48 c1 e0 06          	shl    $0x6,%rax
  800420872b:	48 89 c2             	mov    %rax,%rdx
  800420872e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208732:	48 01 d0             	add    %rdx,%rax
  8004208735:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208739:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420873d:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208741:	0f b7 c0             	movzwl %ax,%eax
  8004208744:	48 c1 e0 06          	shl    $0x6,%rax
  8004208748:	48 89 c2             	mov    %rax,%rdx
  800420874b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420874f:	48 01 d0             	add    %rdx,%rax
  8004208752:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208756:	e9 27 01 00 00       	jmpq   8004208882 <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  800420875b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420875f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208763:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208767:	8b 00                	mov    (%rax),%eax
  8004208769:	89 c0                	mov    %eax,%eax
  800420876b:	48 01 c2             	add    %rax,%rdx
  800420876e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208772:	48 01 d0             	add    %rdx,%rax
  8004208775:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208779:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420877d:	48 be a4 9c 21 04 80 	movabs $0x8004219ca4,%rsi
  8004208784:	00 00 00 
  8004208787:	48 89 c7             	mov    %rax,%rdi
  800420878a:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004208791:	00 00 00 
  8004208794:	ff d0                	callq  *%rax
  8004208796:	85 c0                	test   %eax,%eax
  8004208798:	0f 84 84 00 00 00    	je     8004208822 <load_icode+0x30b>
  800420879e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087a2:	48 be b0 9c 21 04 80 	movabs $0x8004219cb0,%rsi
  80042087a9:	00 00 00 
  80042087ac:	48 89 c7             	mov    %rax,%rdi
  80042087af:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  80042087b6:	00 00 00 
  80042087b9:	ff d0                	callq  *%rax
  80042087bb:	85 c0                	test   %eax,%eax
  80042087bd:	74 63                	je     8004208822 <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  80042087bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087c3:	48 be be 9c 21 04 80 	movabs $0x8004219cbe,%rsi
  80042087ca:	00 00 00 
  80042087cd:	48 89 c7             	mov    %rax,%rdi
  80042087d0:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  80042087d7:	00 00 00 
  80042087da:	ff d0                	callq  *%rax
  80042087dc:	85 c0                	test   %eax,%eax
  80042087de:	74 42                	je     8004208822 <load_icode+0x30b>
  80042087e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087e4:	48 be ca 9c 21 04 80 	movabs $0x8004219cca,%rsi
  80042087eb:	00 00 00 
  80042087ee:	48 89 c7             	mov    %rax,%rdi
  80042087f1:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  80042087f8:	00 00 00 
  80042087fb:	ff d0                	callq  *%rax
  80042087fd:	85 c0                	test   %eax,%eax
  80042087ff:	74 21                	je     8004208822 <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208801:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208805:	48 be d4 9c 21 04 80 	movabs $0x8004219cd4,%rsi
  800420880c:	00 00 00 
  800420880f:	48 89 c7             	mov    %rax,%rdi
  8004208812:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004208819:	00 00 00 
  800420881c:	ff d0                	callq  *%rax
  800420881e:	85 c0                	test   %eax,%eax
  8004208820:	75 5b                	jne    800420887d <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208822:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208826:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800420882a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420882e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208832:	48 89 ce             	mov    %rcx,%rsi
  8004208835:	48 89 c7             	mov    %rax,%rdi
  8004208838:	48 b8 17 84 20 04 80 	movabs $0x8004208417,%rax
  800420883f:	00 00 00 
  8004208842:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208844:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208848:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800420884c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208850:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208854:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208858:	48 01 c1             	add    %rax,%rcx
  800420885b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420885f:	48 89 ce             	mov    %rcx,%rsi
  8004208862:	48 89 c7             	mov    %rax,%rdi
  8004208865:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420886c:	00 00 00 
  800420886f:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208871:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208875:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208879:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  800420887d:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208882:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208886:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420888a:	0f 82 cb fe ff ff    	jb     800420875b <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208890:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004208897:	00 00 00 
  800420889a:	48 8b 00             	mov    (%rax),%rax
  800420889d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042088a1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042088a5:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  80042088a8:	eb 2a                	jmp    80042088d4 <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  80042088aa:	48 ba df 9c 21 04 80 	movabs $0x8004219cdf,%rdx
  80042088b1:	00 00 00 
  80042088b4:	be f4 01 00 00       	mov    $0x1f4,%esi
  80042088b9:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  80042088c0:	00 00 00 
  80042088c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042088c8:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042088cf:	00 00 00 
  80042088d2:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  80042088d4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042088d8:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042088dc:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  80042088e3:	48 83 c4 78          	add    $0x78,%rsp
  80042088e7:	5b                   	pop    %rbx
  80042088e8:	5d                   	pop    %rbp
  80042088e9:	c3                   	retq   

00000080042088ea <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  80042088ea:	55                   	push   %rbp
  80042088eb:	48 89 e5             	mov    %rsp,%rbp
  80042088ee:	48 83 ec 20          	sub    $0x20,%rsp
  80042088f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042088f6:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  80042088f9:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  80042088fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004208902:	48 89 c7             	mov    %rax,%rdi
  8004208905:	48 b8 89 82 20 04 80 	movabs $0x8004208289,%rax
  800420890c:	00 00 00 
  800420890f:	ff d0                	callq  *%rax
  8004208911:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208914:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208918:	79 30                	jns    800420894a <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  800420891a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420891d:	89 c1                	mov    %eax,%ecx
  800420891f:	48 ba f0 9c 21 04 80 	movabs $0x8004219cf0,%rdx
  8004208926:	00 00 00 
  8004208929:	be 08 02 00 00       	mov    $0x208,%esi
  800420892e:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208935:	00 00 00 
  8004208938:	b8 00 00 00 00       	mov    $0x0,%eax
  800420893d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208944:	00 00 00 
  8004208947:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  800420894a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420894e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208952:	48 89 d6             	mov    %rdx,%rsi
  8004208955:	48 89 c7             	mov    %rax,%rdi
  8004208958:	48 b8 17 85 20 04 80 	movabs $0x8004208517,%rax
  800420895f:	00 00 00 
  8004208962:	ff d0                	callq  *%rax
	e->env_type = type;
  8004208964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208968:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420896b:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004208971:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004208975:	75 19                	jne    8004208990 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  8004208977:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420897b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420897f:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  8004208986:	80 ce 30             	or     $0x30,%dh
  8004208989:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004208990:	c9                   	leaveq 
  8004208991:	c3                   	retq   

0000008004208992 <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  8004208992:	55                   	push   %rbp
  8004208993:	48 89 e5             	mov    %rsp,%rbp
  8004208996:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  800420899d:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  80042089a4:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  80042089ab:	00 00 00 
  80042089ae:	ff d0                	callq  *%rax
  80042089b0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042089b7:	00 00 00 
  80042089ba:	48 98                	cltq   
  80042089bc:	48 c1 e0 03          	shl    $0x3,%rax
  80042089c0:	48 89 c1             	mov    %rax,%rcx
  80042089c3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042089c7:	48 01 c8             	add    %rcx,%rax
  80042089ca:	48 01 d0             	add    %rdx,%rax
  80042089cd:	48 83 c0 08          	add    $0x8,%rax
  80042089d1:	48 8b 00             	mov    (%rax),%rax
  80042089d4:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042089db:	75 18                	jne    80042089f5 <env_free+0x63>
		lcr3(boot_cr3);
  80042089dd:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  80042089e4:	00 00 00 
  80042089e7:	48 8b 00             	mov    (%rax),%rax
  80042089ea:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042089ee:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042089f2:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042089f5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042089fc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208a03:	48 8b 00             	mov    (%rax),%rax
  8004208a06:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208a0c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208a10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a14:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208a18:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004208a1b:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004208a1e:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208a25:	00 00 00 
  8004208a28:	48 8b 00             	mov    (%rax),%rax
  8004208a2b:	48 39 c2             	cmp    %rax,%rdx
  8004208a2e:	72 32                	jb     8004208a62 <env_free+0xd0>
  8004208a30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a34:	48 89 c1             	mov    %rax,%rcx
  8004208a37:	48 ba f8 9b 21 04 80 	movabs $0x8004219bf8,%rdx
  8004208a3e:	00 00 00 
  8004208a41:	be 2d 02 00 00       	mov    $0x22d,%esi
  8004208a46:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208a4d:	00 00 00 
  8004208a50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208a55:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208a5c:	00 00 00 
  8004208a5f:	41 ff d0             	callq  *%r8
  8004208a62:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208a69:	00 00 00 
  8004208a6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a70:	48 01 d0             	add    %rdx,%rax
  8004208a73:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208a77:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004208a7e:	00 
  8004208a7f:	e9 ab 02 00 00       	jmpq   8004208d2f <env_free+0x39d>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004208a84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208a88:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208a8f:	00 
  8004208a90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208a94:	48 01 d0             	add    %rdx,%rax
  8004208a97:	48 8b 00             	mov    (%rax),%rax
  8004208a9a:	83 e0 01             	and    $0x1,%eax
  8004208a9d:	48 85 c0             	test   %rax,%rax
  8004208aa0:	75 05                	jne    8004208aa7 <env_free+0x115>
			continue;
  8004208aa2:	e9 83 02 00 00       	jmpq   8004208d2a <env_free+0x398>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  8004208aa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208aab:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ab2:	00 
  8004208ab3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ab7:	48 01 d0             	add    %rdx,%rax
  8004208aba:	48 8b 00             	mov    (%rax),%rax
  8004208abd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208ac3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208ac7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208acb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208acf:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004208ad2:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004208ad5:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208adc:	00 00 00 
  8004208adf:	48 8b 00             	mov    (%rax),%rax
  8004208ae2:	48 39 c2             	cmp    %rax,%rdx
  8004208ae5:	72 32                	jb     8004208b19 <env_free+0x187>
  8004208ae7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208aeb:	48 89 c1             	mov    %rax,%rcx
  8004208aee:	48 ba f8 9b 21 04 80 	movabs $0x8004219bf8,%rdx
  8004208af5:	00 00 00 
  8004208af8:	be 35 02 00 00       	mov    $0x235,%esi
  8004208afd:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208b04:	00 00 00 
  8004208b07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b0c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208b13:	00 00 00 
  8004208b16:	41 ff d0             	callq  *%r8
  8004208b19:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208b20:	00 00 00 
  8004208b23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b27:	48 01 d0             	add    %rdx,%rax
  8004208b2a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004208b2e:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208b33:	75 07                	jne    8004208b3c <env_free+0x1aa>
  8004208b35:	b8 04 00 00 00       	mov    $0x4,%eax
  8004208b3a:	eb 05                	jmp    8004208b41 <env_free+0x1af>
  8004208b3c:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004208b41:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208b44:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208b4b:	00 
  8004208b4c:	e9 6e 01 00 00       	jmpq   8004208cbf <env_free+0x32d>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004208b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208b55:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b5c:	00 
  8004208b5d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208b61:	48 01 d0             	add    %rdx,%rax
  8004208b64:	48 8b 00             	mov    (%rax),%rax
  8004208b67:	83 e0 01             	and    $0x1,%eax
  8004208b6a:	48 85 c0             	test   %rax,%rax
  8004208b6d:	75 05                	jne    8004208b74 <env_free+0x1e2>
				continue;
  8004208b6f:	e9 46 01 00 00       	jmpq   8004208cba <env_free+0x328>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004208b74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208b78:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b7f:	00 
  8004208b80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208b84:	48 01 d0             	add    %rdx,%rax
  8004208b87:	48 8b 00             	mov    (%rax),%rax
  8004208b8a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b90:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004208b94:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208b98:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004208b9c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208ba0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208ba4:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004208ba7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004208baa:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208bb1:	00 00 00 
  8004208bb4:	48 8b 00             	mov    (%rax),%rax
  8004208bb7:	48 39 c2             	cmp    %rax,%rdx
  8004208bba:	72 32                	jb     8004208bee <env_free+0x25c>
  8004208bbc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208bc0:	48 89 c1             	mov    %rax,%rcx
  8004208bc3:	48 ba f8 9b 21 04 80 	movabs $0x8004219bf8,%rdx
  8004208bca:	00 00 00 
  8004208bcd:	be 3f 02 00 00       	mov    $0x23f,%esi
  8004208bd2:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208bd9:	00 00 00 
  8004208bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208be1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208be8:	00 00 00 
  8004208beb:	41 ff d0             	callq  *%r8
  8004208bee:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208bf5:	00 00 00 
  8004208bf8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208bfc:	48 01 d0             	add    %rdx,%rax
  8004208bff:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208c03:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004208c0a:	00 
  8004208c0b:	eb 67                	jmp    8004208c74 <env_free+0x2e2>
				if (pt[pteno] & PTE_P){
  8004208c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c11:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c18:	00 
  8004208c19:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004208c1d:	48 01 d0             	add    %rdx,%rax
  8004208c20:	48 8b 00             	mov    (%rax),%rax
  8004208c23:	83 e0 01             	and    $0x1,%eax
  8004208c26:	48 85 c0             	test   %rax,%rax
  8004208c29:	74 44                	je     8004208c6f <env_free+0x2dd>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004208c2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c2f:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004208c33:	48 89 c2             	mov    %rax,%rdx
  8004208c36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c3a:	48 c1 e0 15          	shl    $0x15,%rax
  8004208c3e:	48 09 c2             	or     %rax,%rdx
  8004208c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c45:	48 c1 e0 0c          	shl    $0xc,%rax
  8004208c49:	48 09 d0             	or     %rdx,%rax
  8004208c4c:	48 89 c2             	mov    %rax,%rdx
  8004208c4f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208c56:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c5d:	48 89 d6             	mov    %rdx,%rsi
  8004208c60:	48 89 c7             	mov    %rax,%rdi
  8004208c63:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004208c6a:	00 00 00 
  8004208c6d:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208c6f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004208c74:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004208c7b:	00 
  8004208c7c:	76 8f                	jbe    8004208c0d <env_free+0x27b>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004208c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c82:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c89:	00 
  8004208c8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208c8e:	48 01 d0             	add    %rdx,%rax
  8004208c91:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004208c98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208c9c:	48 89 c7             	mov    %rax,%rdi
  8004208c9f:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208ca6:	00 00 00 
  8004208ca9:	ff d0                	callq  *%rax
  8004208cab:	48 89 c7             	mov    %rax,%rdi
  8004208cae:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208cb5:	00 00 00 
  8004208cb8:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208cba:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004208cbf:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004208cc2:	48 98                	cltq   
  8004208cc4:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208cc8:	0f 87 83 fe ff ff    	ja     8004208b51 <env_free+0x1bf>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  8004208cce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cd9:	00 
  8004208cda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208cde:	48 01 d0             	add    %rdx,%rax
  8004208ce1:	48 8b 00             	mov    (%rax),%rax
  8004208ce4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208cea:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  8004208cee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cf2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cf9:	00 
  8004208cfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208cfe:	48 01 d0             	add    %rdx,%rax
  8004208d01:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004208d08:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d0c:	48 89 c7             	mov    %rax,%rdi
  8004208d0f:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d16:	00 00 00 
  8004208d19:	ff d0                	callq  *%rax
  8004208d1b:	48 89 c7             	mov    %rax,%rdi
  8004208d1e:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d25:	00 00 00 
  8004208d28:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208d2a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004208d2f:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208d34:	0f 86 4a fd ff ff    	jbe    8004208a84 <env_free+0xf2>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  8004208d3a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d41:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208d48:	48 8b 00             	mov    (%rax),%rax
  8004208d4b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d51:	48 89 c7             	mov    %rax,%rdi
  8004208d54:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d5b:	00 00 00 
  8004208d5e:	ff d0                	callq  *%rax
  8004208d60:	48 89 c7             	mov    %rax,%rdi
  8004208d63:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d6a:	00 00 00 
  8004208d6d:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004208d6f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d76:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208d7d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004208d84:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d8b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208d92:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004208d96:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d9d:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208da4:	00 00 00 00 
	e->env_cr3 = 0;
  8004208da8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208daf:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208db6:	00 00 00 00 
	page_decref(pa2page(pa));
  8004208dba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208dbe:	48 89 c7             	mov    %rax,%rdi
  8004208dc1:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208dc8:	00 00 00 
  8004208dcb:	ff d0                	callq  *%rax
  8004208dcd:	48 89 c7             	mov    %rax,%rdi
  8004208dd0:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208dd7:	00 00 00 
  8004208dda:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208ddc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208de3:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208dea:	00 00 00 
	e->env_link = env_free_list;
  8004208ded:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208df4:	00 00 00 
  8004208df7:	48 8b 10             	mov    (%rax),%rdx
  8004208dfa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e01:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004208e08:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208e0f:	00 00 00 
  8004208e12:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004208e19:	48 89 10             	mov    %rdx,(%rax)
}
  8004208e1c:	c9                   	leaveq 
  8004208e1d:	c3                   	retq   

0000008004208e1e <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004208e1e:	55                   	push   %rbp
  8004208e1f:	48 89 e5             	mov    %rsp,%rbp
  8004208e22:	48 83 ec 10          	sub    $0x10,%rsp
  8004208e26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  8004208e2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208e2e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208e34:	83 f8 03             	cmp    $0x3,%eax
  8004208e37:	75 49                	jne    8004208e82 <env_destroy+0x64>
  8004208e39:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208e40:	00 00 00 
  8004208e43:	ff d0                	callq  *%rax
  8004208e45:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208e4c:	00 00 00 
  8004208e4f:	48 98                	cltq   
  8004208e51:	48 c1 e0 03          	shl    $0x3,%rax
  8004208e55:	48 89 c1             	mov    %rax,%rcx
  8004208e58:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208e5c:	48 01 c8             	add    %rcx,%rax
  8004208e5f:	48 01 d0             	add    %rdx,%rax
  8004208e62:	48 83 c0 08          	add    $0x8,%rax
  8004208e66:	48 8b 00             	mov    (%rax),%rax
  8004208e69:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208e6d:	74 13                	je     8004208e82 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004208e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208e73:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004208e7a:	00 00 00 
		return;
  8004208e7d:	e9 89 00 00 00       	jmpq   8004208f0b <env_destroy+0xed>
	}

	env_free(e);
  8004208e82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208e86:	48 89 c7             	mov    %rax,%rdi
  8004208e89:	48 b8 92 89 20 04 80 	movabs $0x8004208992,%rax
  8004208e90:	00 00 00 
  8004208e93:	ff d0                	callq  *%rax
	if (curenv == e) {
  8004208e95:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208e9c:	00 00 00 
  8004208e9f:	ff d0                	callq  *%rax
  8004208ea1:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208ea8:	00 00 00 
  8004208eab:	48 98                	cltq   
  8004208ead:	48 c1 e0 03          	shl    $0x3,%rax
  8004208eb1:	48 89 c1             	mov    %rax,%rcx
  8004208eb4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208eb8:	48 01 c8             	add    %rcx,%rax
  8004208ebb:	48 01 d0             	add    %rdx,%rax
  8004208ebe:	48 83 c0 08          	add    $0x8,%rax
  8004208ec2:	48 8b 00             	mov    (%rax),%rax
  8004208ec5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208ec9:	75 40                	jne    8004208f0b <env_destroy+0xed>
		curenv = NULL;
  8004208ecb:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208ed2:	00 00 00 
  8004208ed5:	ff d0                	callq  *%rax
  8004208ed7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208ede:	00 00 00 
  8004208ee1:	48 98                	cltq   
  8004208ee3:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ee7:	48 89 c1             	mov    %rax,%rcx
  8004208eea:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208eee:	48 01 c8             	add    %rcx,%rax
  8004208ef1:	48 01 d0             	add    %rdx,%rax
  8004208ef4:	48 83 c0 08          	add    $0x8,%rax
  8004208ef8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004208eff:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  8004208f06:	00 00 00 
  8004208f09:	ff d0                	callq  *%rax
	}
}
  8004208f0b:	c9                   	leaveq 
  8004208f0c:	c3                   	retq   

0000008004208f0d <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004208f0d:	55                   	push   %rbp
  8004208f0e:	48 89 e5             	mov    %rsp,%rbp
  8004208f11:	53                   	push   %rbx
  8004208f12:	48 83 ec 18          	sub    $0x18,%rsp
  8004208f16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  8004208f1a:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208f21:	00 00 00 
  8004208f24:	ff d0                	callq  *%rax
  8004208f26:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208f2d:	00 00 00 
  8004208f30:	48 98                	cltq   
  8004208f32:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f36:	48 89 c1             	mov    %rax,%rcx
  8004208f39:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f3d:	48 01 c8             	add    %rcx,%rax
  8004208f40:	48 01 d0             	add    %rdx,%rax
  8004208f43:	48 83 c0 08          	add    $0x8,%rax
  8004208f47:	48 8b 18             	mov    (%rax),%rbx
  8004208f4a:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208f51:	00 00 00 
  8004208f54:	ff d0                	callq  *%rax
  8004208f56:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004208f5c:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004208f60:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004208f64:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004208f69:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004208f6e:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004208f73:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004208f78:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004208f7d:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004208f82:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004208f87:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004208f8c:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004208f91:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004208f96:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004208f9b:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004208fa0:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  8004208fa5:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004208faa:	48 83 c4 78          	add    $0x78,%rsp
  8004208fae:	8e 04 24             	mov    (%rsp),%es
  8004208fb1:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  8004208fb5:	48 83 c4 10          	add    $0x10,%rsp
  8004208fb9:	48 83 c4 10          	add    $0x10,%rsp
  8004208fbd:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  8004208fbf:	48 ba 18 9d 21 04 80 	movabs $0x8004219d18,%rdx
  8004208fc6:	00 00 00 
  8004208fc9:	be 8b 02 00 00       	mov    $0x28b,%esi
  8004208fce:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  8004208fd5:	00 00 00 
  8004208fd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208fdd:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004208fe4:	00 00 00 
  8004208fe7:	ff d1                	callq  *%rcx

0000008004208fe9 <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  8004208fe9:	55                   	push   %rbp
  8004208fea:	48 89 e5             	mov    %rsp,%rbp
  8004208fed:	48 83 ec 20          	sub    $0x20,%rsp
  8004208ff1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  8004208ff5:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004208ffc:	00 00 00 
  8004208fff:	ff d0                	callq  *%rax
  8004209001:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209008:	00 00 00 
  800420900b:	48 98                	cltq   
  800420900d:	48 c1 e0 03          	shl    $0x3,%rax
  8004209011:	48 89 c1             	mov    %rax,%rcx
  8004209014:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209018:	48 01 c8             	add    %rcx,%rax
  800420901b:	48 01 d0             	add    %rdx,%rax
  800420901e:	48 83 c0 08          	add    $0x8,%rax
  8004209022:	48 8b 00             	mov    (%rax),%rax
  8004209025:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004209029:	0f 84 11 01 00 00    	je     8004209140 <env_run+0x157>
		if (curenv && curenv->env_status == ENV_RUNNING)
  800420902f:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004209036:	00 00 00 
  8004209039:	ff d0                	callq  *%rax
  800420903b:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209042:	00 00 00 
  8004209045:	48 98                	cltq   
  8004209047:	48 c1 e0 03          	shl    $0x3,%rax
  800420904b:	48 89 c1             	mov    %rax,%rcx
  800420904e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209052:	48 01 c8             	add    %rcx,%rax
  8004209055:	48 01 d0             	add    %rdx,%rax
  8004209058:	48 83 c0 08          	add    $0x8,%rax
  800420905c:	48 8b 00             	mov    (%rax),%rax
  800420905f:	48 85 c0             	test   %rax,%rax
  8004209062:	74 75                	je     80042090d9 <env_run+0xf0>
  8004209064:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420906b:	00 00 00 
  800420906e:	ff d0                	callq  *%rax
  8004209070:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209077:	00 00 00 
  800420907a:	48 98                	cltq   
  800420907c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209080:	48 89 c1             	mov    %rax,%rcx
  8004209083:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209087:	48 01 c8             	add    %rcx,%rax
  800420908a:	48 01 d0             	add    %rdx,%rax
  800420908d:	48 83 c0 08          	add    $0x8,%rax
  8004209091:	48 8b 00             	mov    (%rax),%rax
  8004209094:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420909a:	83 f8 03             	cmp    $0x3,%eax
  800420909d:	75 3a                	jne    80042090d9 <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  800420909f:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  80042090a6:	00 00 00 
  80042090a9:	ff d0                	callq  *%rax
  80042090ab:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042090b2:	00 00 00 
  80042090b5:	48 98                	cltq   
  80042090b7:	48 c1 e0 03          	shl    $0x3,%rax
  80042090bb:	48 89 c1             	mov    %rax,%rcx
  80042090be:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090c2:	48 01 c8             	add    %rcx,%rax
  80042090c5:	48 01 d0             	add    %rdx,%rax
  80042090c8:	48 83 c0 08          	add    $0x8,%rax
  80042090cc:	48 8b 00             	mov    (%rax),%rax
  80042090cf:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042090d6:	00 00 00 
		//cprintf("cpu %d switch from env %d to env %d\n",
		//	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042090d9:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  80042090e0:	00 00 00 
  80042090e3:	ff d0                	callq  *%rax
  80042090e5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042090ec:	00 00 00 
  80042090ef:	48 98                	cltq   
  80042090f1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090f5:	48 89 c1             	mov    %rax,%rcx
  80042090f8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090fc:	48 01 c8             	add    %rcx,%rax
  80042090ff:	48 01 d0             	add    %rdx,%rax
  8004209102:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209106:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420910a:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  800420910d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209111:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209118:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  800420911b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420911f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209125:	83 f8 03             	cmp    $0x3,%eax
  8004209128:	74 16                	je     8004209140 <env_run+0x157>
			lcr3(e->env_cr3);
  800420912a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420912e:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209135:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420913d:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  8004209140:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209144:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420914a:	83 f8 03             	cmp    $0x3,%eax
  800420914d:	74 35                	je     8004209184 <env_run+0x19b>
  800420914f:	48 b9 24 9d 21 04 80 	movabs $0x8004219d24,%rcx
  8004209156:	00 00 00 
  8004209159:	48 ba 41 9d 21 04 80 	movabs $0x8004219d41,%rdx
  8004209160:	00 00 00 
  8004209163:	be ac 02 00 00       	mov    $0x2ac,%esi
  8004209168:	48 bf 47 9c 21 04 80 	movabs $0x8004219c47,%rdi
  800420916f:	00 00 00 
  8004209172:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209177:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420917e:	00 00 00 
  8004209181:	41 ff d0             	callq  *%r8
	else {
		unlock_kernel();
		env_pop_tf(&e->env_tf);
	}
#else	/* VMM_GUEST */
	unlock_kernel();
  8004209184:	48 b8 28 7f 20 04 80 	movabs $0x8004207f28,%rax
  800420918b:	00 00 00 
  800420918e:	ff d0                	callq  *%rax
	env_pop_tf(&e->env_tf);
  8004209190:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209194:	48 89 c7             	mov    %rax,%rdi
  8004209197:	48 b8 0d 8f 20 04 80 	movabs $0x8004208f0d,%rax
  800420919e:	00 00 00 
  80042091a1:	ff d0                	callq  *%rax

00000080042091a3 <mc146818_read>:
  80042091a3:	55                   	push   %rbp
  80042091a4:	48 89 e5             	mov    %rsp,%rbp
  80042091a7:	48 83 ec 14          	sub    $0x14,%rsp
  80042091ab:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042091ae:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042091b1:	0f b6 c0             	movzbl %al,%eax
  80042091b4:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042091bb:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042091be:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042091c2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042091c5:	ee                   	out    %al,(%dx)
  80042091c6:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042091cd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042091d0:	89 c2                	mov    %eax,%edx
  80042091d2:	ec                   	in     (%dx),%al
  80042091d3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  80042091d6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042091da:	0f b6 c0             	movzbl %al,%eax
  80042091dd:	c9                   	leaveq 
  80042091de:	c3                   	retq   

00000080042091df <mc146818_write>:
  80042091df:	55                   	push   %rbp
  80042091e0:	48 89 e5             	mov    %rsp,%rbp
  80042091e3:	48 83 ec 18          	sub    $0x18,%rsp
  80042091e7:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042091ea:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042091ed:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042091f0:	0f b6 c0             	movzbl %al,%eax
  80042091f3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042091fa:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042091fd:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209201:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209204:	ee                   	out    %al,(%dx)
  8004209205:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209208:	0f b6 c0             	movzbl %al,%eax
  800420920b:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209212:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209215:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209219:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420921c:	ee                   	out    %al,(%dx)
  800420921d:	c9                   	leaveq 
  800420921e:	c3                   	retq   

000000800420921f <pic_init>:
  800420921f:	55                   	push   %rbp
  8004209220:	48 89 e5             	mov    %rsp,%rbp
  8004209223:	48 83 ec 70          	sub    $0x70,%rsp
  8004209227:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  800420922e:	00 00 00 
  8004209231:	c6 00 01             	movb   $0x1,(%rax)
  8004209234:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  800420923b:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  800420923f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209243:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209246:	ee                   	out    %al,(%dx)
  8004209247:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  800420924e:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  8004209252:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209256:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209259:	ee                   	out    %al,(%dx)
  800420925a:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  8004209261:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  8004209265:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004209269:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420926c:	ee                   	out    %al,(%dx)
  800420926d:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  8004209274:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  8004209278:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420927c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420927f:	ee                   	out    %al,(%dx)
  8004209280:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  8004209287:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  800420928b:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420928f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209292:	ee                   	out    %al,(%dx)
  8004209293:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  800420929a:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  800420929e:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042092a2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042092a5:	ee                   	out    %al,(%dx)
  80042092a6:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  80042092ad:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  80042092b1:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042092b5:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042092b8:	ee                   	out    %al,(%dx)
  80042092b9:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  80042092c0:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  80042092c4:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042092c8:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042092cb:	ee                   	out    %al,(%dx)
  80042092cc:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  80042092d3:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  80042092d7:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  80042092db:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042092de:	ee                   	out    %al,(%dx)
  80042092df:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  80042092e6:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  80042092ea:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  80042092ee:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  80042092f1:	ee                   	out    %al,(%dx)
  80042092f2:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  80042092f9:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  80042092fd:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209301:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209304:	ee                   	out    %al,(%dx)
  8004209305:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  800420930c:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209310:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209314:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209317:	ee                   	out    %al,(%dx)
  8004209318:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  800420931f:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209323:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209327:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420932a:	ee                   	out    %al,(%dx)
  800420932b:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209332:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209336:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  800420933a:	8b 55 94             	mov    -0x6c(%rbp),%edx
  800420933d:	ee                   	out    %al,(%dx)
  800420933e:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004209345:	00 00 00 
  8004209348:	0f b7 00             	movzwl (%rax),%eax
  800420934b:	66 83 f8 ff          	cmp    $0xffff,%ax
  800420934f:	74 1e                	je     800420936f <pic_init+0x150>
  8004209351:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004209358:	00 00 00 
  800420935b:	0f b7 00             	movzwl (%rax),%eax
  800420935e:	0f b7 c0             	movzwl %ax,%eax
  8004209361:	89 c7                	mov    %eax,%edi
  8004209363:	48 b8 71 93 20 04 80 	movabs $0x8004209371,%rax
  800420936a:	00 00 00 
  800420936d:	ff d0                	callq  *%rax
  800420936f:	c9                   	leaveq 
  8004209370:	c3                   	retq   

0000008004209371 <irq_setmask_8259A>:
  8004209371:	55                   	push   %rbp
  8004209372:	48 89 e5             	mov    %rsp,%rbp
  8004209375:	48 83 ec 30          	sub    $0x30,%rsp
  8004209379:	89 f8                	mov    %edi,%eax
  800420937b:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  800420937f:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004209386:	00 00 00 
  8004209389:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  800420938d:	66 89 10             	mov    %dx,(%rax)
  8004209390:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  8004209397:	00 00 00 
  800420939a:	0f b6 00             	movzbl (%rax),%eax
  800420939d:	83 f0 01             	xor    $0x1,%eax
  80042093a0:	84 c0                	test   %al,%al
  80042093a2:	74 05                	je     80042093a9 <irq_setmask_8259A+0x38>
  80042093a4:	e9 b7 00 00 00       	jmpq   8004209460 <irq_setmask_8259A+0xef>
  80042093a9:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  80042093ad:	0f b6 c0             	movzbl %al,%eax
  80042093b0:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  80042093b7:	88 45 f7             	mov    %al,-0x9(%rbp)
  80042093ba:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042093be:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042093c1:	ee                   	out    %al,(%dx)
  80042093c2:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  80042093c6:	66 c1 e8 08          	shr    $0x8,%ax
  80042093ca:	0f b6 c0             	movzbl %al,%eax
  80042093cd:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  80042093d4:	88 45 ef             	mov    %al,-0x11(%rbp)
  80042093d7:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042093db:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042093de:	ee                   	out    %al,(%dx)
  80042093df:	48 bf 56 9d 21 04 80 	movabs $0x8004219d56,%rdi
  80042093e6:	00 00 00 
  80042093e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042093ee:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  80042093f5:	00 00 00 
  80042093f8:	ff d2                	callq  *%rdx
  80042093fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209401:	eb 3c                	jmp    800420943f <irq_setmask_8259A+0xce>
  8004209403:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209407:	f7 d0                	not    %eax
  8004209409:	89 c2                	mov    %eax,%edx
  800420940b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420940e:	89 c1                	mov    %eax,%ecx
  8004209410:	d3 fa                	sar    %cl,%edx
  8004209412:	89 d0                	mov    %edx,%eax
  8004209414:	83 e0 01             	and    $0x1,%eax
  8004209417:	85 c0                	test   %eax,%eax
  8004209419:	74 20                	je     800420943b <irq_setmask_8259A+0xca>
  800420941b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420941e:	89 c6                	mov    %eax,%esi
  8004209420:	48 bf 6a 9d 21 04 80 	movabs $0x8004219d6a,%rdi
  8004209427:	00 00 00 
  800420942a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420942f:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004209436:	00 00 00 
  8004209439:	ff d2                	callq  *%rdx
  800420943b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420943f:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209443:	7e be                	jle    8004209403 <irq_setmask_8259A+0x92>
  8004209445:	48 bf 6e 9d 21 04 80 	movabs $0x8004219d6e,%rdi
  800420944c:	00 00 00 
  800420944f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209454:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420945b:	00 00 00 
  800420945e:	ff d2                	callq  *%rdx
  8004209460:	c9                   	leaveq 
  8004209461:	c3                   	retq   

0000008004209462 <irq_eoi>:
  8004209462:	55                   	push   %rbp
  8004209463:	48 89 e5             	mov    %rsp,%rbp
  8004209466:	48 83 ec 10          	sub    $0x10,%rsp
  800420946a:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209471:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209475:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209479:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420947c:	ee                   	out    %al,(%dx)
  800420947d:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209484:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209488:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420948c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420948f:	ee                   	out    %al,(%dx)
  8004209490:	c9                   	leaveq 
  8004209491:	c3                   	retq   

0000008004209492 <putch>:
  8004209492:	55                   	push   %rbp
  8004209493:	48 89 e5             	mov    %rsp,%rbp
  8004209496:	48 83 ec 10          	sub    $0x10,%rsp
  800420949a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420949d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042094a1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042094a4:	89 c7                	mov    %eax,%edi
  80042094a6:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  80042094ad:	00 00 00 
  80042094b0:	ff d0                	callq  *%rax
  80042094b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042094b6:	48 83 c0 04          	add    $0x4,%rax
  80042094ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042094be:	c9                   	leaveq 
  80042094bf:	c3                   	retq   

00000080042094c0 <vcprintf>:
  80042094c0:	55                   	push   %rbp
  80042094c1:	48 89 e5             	mov    %rsp,%rbp
  80042094c4:	48 83 ec 30          	sub    $0x30,%rsp
  80042094c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042094cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042094d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042094d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042094db:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042094df:	48 8b 0a             	mov    (%rdx),%rcx
  80042094e2:	48 89 08             	mov    %rcx,(%rax)
  80042094e5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042094e9:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042094ed:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042094f1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042094f5:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  80042094f9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042094fd:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209501:	48 89 c6             	mov    %rax,%rsi
  8004209504:	48 bf 92 94 20 04 80 	movabs $0x8004209492,%rdi
  800420950b:	00 00 00 
  800420950e:	48 b8 80 f3 20 04 80 	movabs $0x800420f380,%rax
  8004209515:	00 00 00 
  8004209518:	ff d0                	callq  *%rax
  800420951a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420951d:	c9                   	leaveq 
  800420951e:	c3                   	retq   

000000800420951f <cprintf>:
  800420951f:	55                   	push   %rbp
  8004209520:	48 89 e5             	mov    %rsp,%rbp
  8004209523:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  800420952a:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209531:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209538:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420953f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209546:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420954d:	84 c0                	test   %al,%al
  800420954f:	74 20                	je     8004209571 <cprintf+0x52>
  8004209551:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209555:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209559:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420955d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209561:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209565:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209569:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420956d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209571:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209578:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  800420957f:	00 00 00 
  8004209582:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209589:	00 00 00 
  800420958c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209590:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209597:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420959e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042095a5:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  80042095ac:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  80042095b3:	48 8b 0a             	mov    (%rdx),%rcx
  80042095b6:	48 89 08             	mov    %rcx,(%rax)
  80042095b9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042095bd:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042095c1:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042095c5:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042095c9:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  80042095d0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042095d7:	48 89 d6             	mov    %rdx,%rsi
  80042095da:	48 89 c7             	mov    %rax,%rdi
  80042095dd:	48 b8 c0 94 20 04 80 	movabs $0x80042094c0,%rax
  80042095e4:	00 00 00 
  80042095e7:	ff d0                	callq  *%rax
  80042095e9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  80042095ef:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  80042095f5:	c9                   	leaveq 
  80042095f6:	c3                   	retq   

00000080042095f7 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042095f7:	55                   	push   %rbp
  80042095f8:	48 89 e5             	mov    %rsp,%rbp
  80042095fb:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042095ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209603:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209606:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420960a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420960d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209611:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209614:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209617:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420961a:	c9                   	leaveq 
  800420961b:	c3                   	retq   

000000800420961c <lock_kernel>:
  800420961c:	55                   	push   %rbp
  800420961d:	48 89 e5             	mov    %rsp,%rbp
  8004209620:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004209627:	00 00 00 
  800420962a:	48 b8 fd 72 21 04 80 	movabs $0x80042172fd,%rax
  8004209631:	00 00 00 
  8004209634:	ff d0                	callq  *%rax
  8004209636:	5d                   	pop    %rbp
  8004209637:	c3                   	retq   

0000008004209638 <trapname>:
  8004209638:	55                   	push   %rbp
  8004209639:	48 89 e5             	mov    %rsp,%rbp
  800420963c:	48 83 ec 04          	sub    $0x4,%rsp
  8004209640:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209643:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209646:	83 f8 13             	cmp    $0x13,%eax
  8004209649:	77 16                	ja     8004209661 <trapname+0x29>
  800420964b:	48 b8 80 a1 21 04 80 	movabs $0x800421a180,%rax
  8004209652:	00 00 00 
  8004209655:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209658:	48 63 d2             	movslq %edx,%rdx
  800420965b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420965f:	eb 34                	jmp    8004209695 <trapname+0x5d>
  8004209661:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209665:	75 0c                	jne    8004209673 <trapname+0x3b>
  8004209667:	48 b8 80 9d 21 04 80 	movabs $0x8004219d80,%rax
  800420966e:	00 00 00 
  8004209671:	eb 22                	jmp    8004209695 <trapname+0x5d>
  8004209673:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209677:	7e 12                	jle    800420968b <trapname+0x53>
  8004209679:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  800420967d:	7f 0c                	jg     800420968b <trapname+0x53>
  800420967f:	48 b8 8c 9d 21 04 80 	movabs $0x8004219d8c,%rax
  8004209686:	00 00 00 
  8004209689:	eb 0a                	jmp    8004209695 <trapname+0x5d>
  800420968b:	48 b8 9f 9d 21 04 80 	movabs $0x8004219d9f,%rax
  8004209692:	00 00 00 
  8004209695:	c9                   	leaveq 
  8004209696:	c3                   	retq   

0000008004209697 <trap_init>:
  8004209697:	55                   	push   %rbp
  8004209698:	48 89 e5             	mov    %rsp,%rbp
  800420969b:	48 83 ec 10          	sub    $0x10,%rsp
  800420969f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042096a6:	e9 7d 01 00 00       	jmpq   8004209828 <trap_init+0x191>
  80042096ab:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  80042096b2:	00 00 00 
  80042096b5:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  80042096bc:	00 00 00 
  80042096bf:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042096c2:	48 63 c9             	movslq %ecx,%rcx
  80042096c5:	48 c1 e1 04          	shl    $0x4,%rcx
  80042096c9:	48 01 ca             	add    %rcx,%rdx
  80042096cc:	66 89 02             	mov    %ax,(%rdx)
  80042096cf:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042096d6:	00 00 00 
  80042096d9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042096dc:	48 63 d2             	movslq %edx,%rdx
  80042096df:	48 c1 e2 04          	shl    $0x4,%rdx
  80042096e3:	48 01 d0             	add    %rdx,%rax
  80042096e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  80042096ec:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042096f3:	00 00 00 
  80042096f6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042096f9:	48 63 d2             	movslq %edx,%rdx
  80042096fc:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209700:	48 01 d0             	add    %rdx,%rax
  8004209703:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209707:	83 e2 f8             	and    $0xfffffff8,%edx
  800420970a:	88 50 04             	mov    %dl,0x4(%rax)
  800420970d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209714:	00 00 00 
  8004209717:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420971a:	48 63 d2             	movslq %edx,%rdx
  800420971d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209721:	48 01 d0             	add    %rdx,%rax
  8004209724:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209728:	83 e2 07             	and    $0x7,%edx
  800420972b:	88 50 04             	mov    %dl,0x4(%rax)
  800420972e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209735:	00 00 00 
  8004209738:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420973b:	48 63 d2             	movslq %edx,%rdx
  800420973e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209742:	48 01 d0             	add    %rdx,%rax
  8004209745:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209749:	83 e2 f0             	and    $0xfffffff0,%edx
  800420974c:	83 ca 0e             	or     $0xe,%edx
  800420974f:	88 50 05             	mov    %dl,0x5(%rax)
  8004209752:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209759:	00 00 00 
  800420975c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420975f:	48 63 d2             	movslq %edx,%rdx
  8004209762:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209766:	48 01 d0             	add    %rdx,%rax
  8004209769:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420976d:	83 e2 ef             	and    $0xffffffef,%edx
  8004209770:	88 50 05             	mov    %dl,0x5(%rax)
  8004209773:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420977a:	00 00 00 
  800420977d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209780:	48 63 d2             	movslq %edx,%rdx
  8004209783:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209787:	48 01 d0             	add    %rdx,%rax
  800420978a:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420978e:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209791:	88 50 05             	mov    %dl,0x5(%rax)
  8004209794:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420979b:	00 00 00 
  800420979e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097a1:	48 63 d2             	movslq %edx,%rdx
  80042097a4:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097a8:	48 01 d0             	add    %rdx,%rax
  80042097ab:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097af:	83 ca 80             	or     $0xffffff80,%edx
  80042097b2:	88 50 05             	mov    %dl,0x5(%rax)
  80042097b5:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  80042097bc:	00 00 00 
  80042097bf:	48 c1 e8 10          	shr    $0x10,%rax
  80042097c3:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  80042097ca:	00 00 00 
  80042097cd:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042097d0:	48 63 c9             	movslq %ecx,%rcx
  80042097d3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097d7:	48 01 ca             	add    %rcx,%rdx
  80042097da:	66 89 42 06          	mov    %ax,0x6(%rdx)
  80042097de:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  80042097e5:	00 00 00 
  80042097e8:	48 c1 e8 20          	shr    $0x20,%rax
  80042097ec:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  80042097f3:	00 00 00 
  80042097f6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042097f9:	48 63 c9             	movslq %ecx,%rcx
  80042097fc:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209800:	48 01 ca             	add    %rcx,%rdx
  8004209803:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209806:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420980d:	00 00 00 
  8004209810:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209813:	48 63 d2             	movslq %edx,%rdx
  8004209816:	48 c1 e2 04          	shl    $0x4,%rdx
  800420981a:	48 01 d0             	add    %rdx,%rax
  800420981d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209824:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209828:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420982b:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209830:	0f 86 75 fe ff ff    	jbe    80042096ab <trap_init+0x14>
  8004209836:	48 b8 60 d0 20 04 80 	movabs $0x800420d060,%rax
  800420983d:	00 00 00 
  8004209840:	89 c2                	mov    %eax,%edx
  8004209842:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209849:	00 00 00 
  800420984c:	66 89 10             	mov    %dx,(%rax)
  800420984f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209856:	00 00 00 
  8004209859:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  800420985f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209866:	00 00 00 
  8004209869:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  800420986d:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209870:	88 50 04             	mov    %dl,0x4(%rax)
  8004209873:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420987a:	00 00 00 
  800420987d:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209881:	83 e2 07             	and    $0x7,%edx
  8004209884:	88 50 04             	mov    %dl,0x4(%rax)
  8004209887:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420988e:	00 00 00 
  8004209891:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209895:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209898:	83 ca 0e             	or     $0xe,%edx
  800420989b:	88 50 05             	mov    %dl,0x5(%rax)
  800420989e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098a5:	00 00 00 
  80042098a8:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042098ac:	83 e2 ef             	and    $0xffffffef,%edx
  80042098af:	88 50 05             	mov    %dl,0x5(%rax)
  80042098b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098b9:	00 00 00 
  80042098bc:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042098c0:	83 e2 9f             	and    $0xffffff9f,%edx
  80042098c3:	88 50 05             	mov    %dl,0x5(%rax)
  80042098c6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098cd:	00 00 00 
  80042098d0:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042098d4:	83 ca 80             	or     $0xffffff80,%edx
  80042098d7:	88 50 05             	mov    %dl,0x5(%rax)
  80042098da:	48 b8 60 d0 20 04 80 	movabs $0x800420d060,%rax
  80042098e1:	00 00 00 
  80042098e4:	48 c1 e8 10          	shr    $0x10,%rax
  80042098e8:	89 c2                	mov    %eax,%edx
  80042098ea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098f1:	00 00 00 
  80042098f4:	66 89 50 06          	mov    %dx,0x6(%rax)
  80042098f8:	48 b8 60 d0 20 04 80 	movabs $0x800420d060,%rax
  80042098ff:	00 00 00 
  8004209902:	48 c1 e8 20          	shr    $0x20,%rax
  8004209906:	89 c2                	mov    %eax,%edx
  8004209908:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420990f:	00 00 00 
  8004209912:	89 50 08             	mov    %edx,0x8(%rax)
  8004209915:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420991c:	00 00 00 
  800420991f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209926:	48 b8 6a d0 20 04 80 	movabs $0x800420d06a,%rax
  800420992d:	00 00 00 
  8004209930:	89 c2                	mov    %eax,%edx
  8004209932:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209939:	00 00 00 
  800420993c:	66 89 50 10          	mov    %dx,0x10(%rax)
  8004209940:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209947:	00 00 00 
  800420994a:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  8004209950:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209957:	00 00 00 
  800420995a:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420995e:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209961:	88 50 14             	mov    %dl,0x14(%rax)
  8004209964:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420996b:	00 00 00 
  800420996e:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004209972:	83 e2 07             	and    $0x7,%edx
  8004209975:	88 50 14             	mov    %dl,0x14(%rax)
  8004209978:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420997f:	00 00 00 
  8004209982:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209986:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209989:	83 ca 0e             	or     $0xe,%edx
  800420998c:	88 50 15             	mov    %dl,0x15(%rax)
  800420998f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209996:	00 00 00 
  8004209999:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420999d:	83 e2 ef             	and    $0xffffffef,%edx
  80042099a0:	88 50 15             	mov    %dl,0x15(%rax)
  80042099a3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099aa:	00 00 00 
  80042099ad:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  80042099b1:	83 e2 9f             	and    $0xffffff9f,%edx
  80042099b4:	88 50 15             	mov    %dl,0x15(%rax)
  80042099b7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099be:	00 00 00 
  80042099c1:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  80042099c5:	83 ca 80             	or     $0xffffff80,%edx
  80042099c8:	88 50 15             	mov    %dl,0x15(%rax)
  80042099cb:	48 b8 6a d0 20 04 80 	movabs $0x800420d06a,%rax
  80042099d2:	00 00 00 
  80042099d5:	48 c1 e8 10          	shr    $0x10,%rax
  80042099d9:	89 c2                	mov    %eax,%edx
  80042099db:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099e2:	00 00 00 
  80042099e5:	66 89 50 16          	mov    %dx,0x16(%rax)
  80042099e9:	48 b8 6a d0 20 04 80 	movabs $0x800420d06a,%rax
  80042099f0:	00 00 00 
  80042099f3:	48 c1 e8 20          	shr    $0x20,%rax
  80042099f7:	89 c2                	mov    %eax,%edx
  80042099f9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a00:	00 00 00 
  8004209a03:	89 50 18             	mov    %edx,0x18(%rax)
  8004209a06:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a0d:	00 00 00 
  8004209a10:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  8004209a17:	48 b8 74 d0 20 04 80 	movabs $0x800420d074,%rax
  8004209a1e:	00 00 00 
  8004209a21:	89 c2                	mov    %eax,%edx
  8004209a23:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a2a:	00 00 00 
  8004209a2d:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004209a31:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a38:	00 00 00 
  8004209a3b:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004209a41:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a48:	00 00 00 
  8004209a4b:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209a4f:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209a52:	88 50 24             	mov    %dl,0x24(%rax)
  8004209a55:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a5c:	00 00 00 
  8004209a5f:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209a63:	83 e2 07             	and    $0x7,%edx
  8004209a66:	88 50 24             	mov    %dl,0x24(%rax)
  8004209a69:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a70:	00 00 00 
  8004209a73:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209a77:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209a7a:	83 ca 0e             	or     $0xe,%edx
  8004209a7d:	88 50 25             	mov    %dl,0x25(%rax)
  8004209a80:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a87:	00 00 00 
  8004209a8a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209a8e:	83 e2 ef             	and    $0xffffffef,%edx
  8004209a91:	88 50 25             	mov    %dl,0x25(%rax)
  8004209a94:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a9b:	00 00 00 
  8004209a9e:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209aa2:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209aa5:	88 50 25             	mov    %dl,0x25(%rax)
  8004209aa8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209aaf:	00 00 00 
  8004209ab2:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209ab6:	83 ca 80             	or     $0xffffff80,%edx
  8004209ab9:	88 50 25             	mov    %dl,0x25(%rax)
  8004209abc:	48 b8 74 d0 20 04 80 	movabs $0x800420d074,%rax
  8004209ac3:	00 00 00 
  8004209ac6:	48 c1 e8 10          	shr    $0x10,%rax
  8004209aca:	89 c2                	mov    %eax,%edx
  8004209acc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ad3:	00 00 00 
  8004209ad6:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004209ada:	48 b8 74 d0 20 04 80 	movabs $0x800420d074,%rax
  8004209ae1:	00 00 00 
  8004209ae4:	48 c1 e8 20          	shr    $0x20,%rax
  8004209ae8:	89 c2                	mov    %eax,%edx
  8004209aea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209af1:	00 00 00 
  8004209af4:	89 50 28             	mov    %edx,0x28(%rax)
  8004209af7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209afe:	00 00 00 
  8004209b01:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  8004209b08:	48 b8 7e d0 20 04 80 	movabs $0x800420d07e,%rax
  8004209b0f:	00 00 00 
  8004209b12:	89 c2                	mov    %eax,%edx
  8004209b14:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b1b:	00 00 00 
  8004209b1e:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004209b22:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b29:	00 00 00 
  8004209b2c:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004209b32:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b39:	00 00 00 
  8004209b3c:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209b40:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209b43:	88 50 34             	mov    %dl,0x34(%rax)
  8004209b46:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b4d:	00 00 00 
  8004209b50:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209b54:	83 e2 07             	and    $0x7,%edx
  8004209b57:	88 50 34             	mov    %dl,0x34(%rax)
  8004209b5a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b61:	00 00 00 
  8004209b64:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209b68:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209b6b:	83 ca 0e             	or     $0xe,%edx
  8004209b6e:	88 50 35             	mov    %dl,0x35(%rax)
  8004209b71:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b78:	00 00 00 
  8004209b7b:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209b7f:	83 e2 ef             	and    $0xffffffef,%edx
  8004209b82:	88 50 35             	mov    %dl,0x35(%rax)
  8004209b85:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b8c:	00 00 00 
  8004209b8f:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209b93:	83 ca 60             	or     $0x60,%edx
  8004209b96:	88 50 35             	mov    %dl,0x35(%rax)
  8004209b99:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ba0:	00 00 00 
  8004209ba3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209ba7:	83 ca 80             	or     $0xffffff80,%edx
  8004209baa:	88 50 35             	mov    %dl,0x35(%rax)
  8004209bad:	48 b8 7e d0 20 04 80 	movabs $0x800420d07e,%rax
  8004209bb4:	00 00 00 
  8004209bb7:	48 c1 e8 10          	shr    $0x10,%rax
  8004209bbb:	89 c2                	mov    %eax,%edx
  8004209bbd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bc4:	00 00 00 
  8004209bc7:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004209bcb:	48 b8 7e d0 20 04 80 	movabs $0x800420d07e,%rax
  8004209bd2:	00 00 00 
  8004209bd5:	48 c1 e8 20          	shr    $0x20,%rax
  8004209bd9:	89 c2                	mov    %eax,%edx
  8004209bdb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209be2:	00 00 00 
  8004209be5:	89 50 38             	mov    %edx,0x38(%rax)
  8004209be8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bef:	00 00 00 
  8004209bf2:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  8004209bf9:	48 b8 88 d0 20 04 80 	movabs $0x800420d088,%rax
  8004209c00:	00 00 00 
  8004209c03:	89 c2                	mov    %eax,%edx
  8004209c05:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c0c:	00 00 00 
  8004209c0f:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004209c13:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c1a:	00 00 00 
  8004209c1d:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004209c23:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c2a:	00 00 00 
  8004209c2d:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209c31:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209c34:	88 50 44             	mov    %dl,0x44(%rax)
  8004209c37:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c3e:	00 00 00 
  8004209c41:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209c45:	83 e2 07             	and    $0x7,%edx
  8004209c48:	88 50 44             	mov    %dl,0x44(%rax)
  8004209c4b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c52:	00 00 00 
  8004209c55:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209c59:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209c5c:	83 ca 0e             	or     $0xe,%edx
  8004209c5f:	88 50 45             	mov    %dl,0x45(%rax)
  8004209c62:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c69:	00 00 00 
  8004209c6c:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209c70:	83 e2 ef             	and    $0xffffffef,%edx
  8004209c73:	88 50 45             	mov    %dl,0x45(%rax)
  8004209c76:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c7d:	00 00 00 
  8004209c80:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209c84:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209c87:	88 50 45             	mov    %dl,0x45(%rax)
  8004209c8a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c91:	00 00 00 
  8004209c94:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209c98:	83 ca 80             	or     $0xffffff80,%edx
  8004209c9b:	88 50 45             	mov    %dl,0x45(%rax)
  8004209c9e:	48 b8 88 d0 20 04 80 	movabs $0x800420d088,%rax
  8004209ca5:	00 00 00 
  8004209ca8:	48 c1 e8 10          	shr    $0x10,%rax
  8004209cac:	89 c2                	mov    %eax,%edx
  8004209cae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cb5:	00 00 00 
  8004209cb8:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004209cbc:	48 b8 88 d0 20 04 80 	movabs $0x800420d088,%rax
  8004209cc3:	00 00 00 
  8004209cc6:	48 c1 e8 20          	shr    $0x20,%rax
  8004209cca:	89 c2                	mov    %eax,%edx
  8004209ccc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cd3:	00 00 00 
  8004209cd6:	89 50 48             	mov    %edx,0x48(%rax)
  8004209cd9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ce0:	00 00 00 
  8004209ce3:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  8004209cea:	48 b8 92 d0 20 04 80 	movabs $0x800420d092,%rax
  8004209cf1:	00 00 00 
  8004209cf4:	89 c2                	mov    %eax,%edx
  8004209cf6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cfd:	00 00 00 
  8004209d00:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004209d04:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d0b:	00 00 00 
  8004209d0e:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004209d14:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d1b:	00 00 00 
  8004209d1e:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209d22:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209d25:	88 50 54             	mov    %dl,0x54(%rax)
  8004209d28:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d2f:	00 00 00 
  8004209d32:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209d36:	83 e2 07             	and    $0x7,%edx
  8004209d39:	88 50 54             	mov    %dl,0x54(%rax)
  8004209d3c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d43:	00 00 00 
  8004209d46:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209d4a:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209d4d:	83 ca 0e             	or     $0xe,%edx
  8004209d50:	88 50 55             	mov    %dl,0x55(%rax)
  8004209d53:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d5a:	00 00 00 
  8004209d5d:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209d61:	83 e2 ef             	and    $0xffffffef,%edx
  8004209d64:	88 50 55             	mov    %dl,0x55(%rax)
  8004209d67:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d6e:	00 00 00 
  8004209d71:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209d75:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209d78:	88 50 55             	mov    %dl,0x55(%rax)
  8004209d7b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d82:	00 00 00 
  8004209d85:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209d89:	83 ca 80             	or     $0xffffff80,%edx
  8004209d8c:	88 50 55             	mov    %dl,0x55(%rax)
  8004209d8f:	48 b8 92 d0 20 04 80 	movabs $0x800420d092,%rax
  8004209d96:	00 00 00 
  8004209d99:	48 c1 e8 10          	shr    $0x10,%rax
  8004209d9d:	89 c2                	mov    %eax,%edx
  8004209d9f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209da6:	00 00 00 
  8004209da9:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004209dad:	48 b8 92 d0 20 04 80 	movabs $0x800420d092,%rax
  8004209db4:	00 00 00 
  8004209db7:	48 c1 e8 20          	shr    $0x20,%rax
  8004209dbb:	89 c2                	mov    %eax,%edx
  8004209dbd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dc4:	00 00 00 
  8004209dc7:	89 50 58             	mov    %edx,0x58(%rax)
  8004209dca:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dd1:	00 00 00 
  8004209dd4:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  8004209ddb:	48 b8 9c d0 20 04 80 	movabs $0x800420d09c,%rax
  8004209de2:	00 00 00 
  8004209de5:	89 c2                	mov    %eax,%edx
  8004209de7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dee:	00 00 00 
  8004209df1:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004209df5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dfc:	00 00 00 
  8004209dff:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004209e05:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e0c:	00 00 00 
  8004209e0f:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e13:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e16:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e19:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e20:	00 00 00 
  8004209e23:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e27:	83 e2 07             	and    $0x7,%edx
  8004209e2a:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e2d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e34:	00 00 00 
  8004209e37:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209e3b:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209e3e:	83 ca 0e             	or     $0xe,%edx
  8004209e41:	88 50 65             	mov    %dl,0x65(%rax)
  8004209e44:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e4b:	00 00 00 
  8004209e4e:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209e52:	83 e2 ef             	and    $0xffffffef,%edx
  8004209e55:	88 50 65             	mov    %dl,0x65(%rax)
  8004209e58:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e5f:	00 00 00 
  8004209e62:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209e66:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209e69:	88 50 65             	mov    %dl,0x65(%rax)
  8004209e6c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e73:	00 00 00 
  8004209e76:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209e7a:	83 ca 80             	or     $0xffffff80,%edx
  8004209e7d:	88 50 65             	mov    %dl,0x65(%rax)
  8004209e80:	48 b8 9c d0 20 04 80 	movabs $0x800420d09c,%rax
  8004209e87:	00 00 00 
  8004209e8a:	48 c1 e8 10          	shr    $0x10,%rax
  8004209e8e:	89 c2                	mov    %eax,%edx
  8004209e90:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e97:	00 00 00 
  8004209e9a:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004209e9e:	48 b8 9c d0 20 04 80 	movabs $0x800420d09c,%rax
  8004209ea5:	00 00 00 
  8004209ea8:	48 c1 e8 20          	shr    $0x20,%rax
  8004209eac:	89 c2                	mov    %eax,%edx
  8004209eae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209eb5:	00 00 00 
  8004209eb8:	89 50 68             	mov    %edx,0x68(%rax)
  8004209ebb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ec2:	00 00 00 
  8004209ec5:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  8004209ecc:	48 b8 a6 d0 20 04 80 	movabs $0x800420d0a6,%rax
  8004209ed3:	00 00 00 
  8004209ed6:	89 c2                	mov    %eax,%edx
  8004209ed8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209edf:	00 00 00 
  8004209ee2:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004209ee6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209eed:	00 00 00 
  8004209ef0:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004209ef6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209efd:	00 00 00 
  8004209f00:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f04:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209f07:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f0a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f11:	00 00 00 
  8004209f14:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f18:	83 e2 07             	and    $0x7,%edx
  8004209f1b:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f1e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f25:	00 00 00 
  8004209f28:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f2c:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209f2f:	83 ca 0e             	or     $0xe,%edx
  8004209f32:	88 50 75             	mov    %dl,0x75(%rax)
  8004209f35:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f3c:	00 00 00 
  8004209f3f:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f43:	83 e2 ef             	and    $0xffffffef,%edx
  8004209f46:	88 50 75             	mov    %dl,0x75(%rax)
  8004209f49:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f50:	00 00 00 
  8004209f53:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f57:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209f5a:	88 50 75             	mov    %dl,0x75(%rax)
  8004209f5d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f64:	00 00 00 
  8004209f67:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f6b:	83 ca 80             	or     $0xffffff80,%edx
  8004209f6e:	88 50 75             	mov    %dl,0x75(%rax)
  8004209f71:	48 b8 a6 d0 20 04 80 	movabs $0x800420d0a6,%rax
  8004209f78:	00 00 00 
  8004209f7b:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f7f:	89 c2                	mov    %eax,%edx
  8004209f81:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f88:	00 00 00 
  8004209f8b:	66 89 50 76          	mov    %dx,0x76(%rax)
  8004209f8f:	48 b8 a6 d0 20 04 80 	movabs $0x800420d0a6,%rax
  8004209f96:	00 00 00 
  8004209f99:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f9d:	89 c2                	mov    %eax,%edx
  8004209f9f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fa6:	00 00 00 
  8004209fa9:	89 50 78             	mov    %edx,0x78(%rax)
  8004209fac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fb3:	00 00 00 
  8004209fb6:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  8004209fbd:	48 b8 b0 d0 20 04 80 	movabs $0x800420d0b0,%rax
  8004209fc4:	00 00 00 
  8004209fc7:	89 c2                	mov    %eax,%edx
  8004209fc9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fd0:	00 00 00 
  8004209fd3:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  8004209fda:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fe1:	00 00 00 
  8004209fe4:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  8004209feb:	08 00 
  8004209fed:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ff4:	00 00 00 
  8004209ff7:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  8004209ffe:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a001:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a007:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a00e:	00 00 00 
  800420a011:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a018:	83 e2 07             	and    $0x7,%edx
  800420a01b:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a021:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a028:	00 00 00 
  800420a02b:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a032:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a035:	83 ca 0e             	or     $0xe,%edx
  800420a038:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a03e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a045:	00 00 00 
  800420a048:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a04f:	83 e2 ef             	and    $0xffffffef,%edx
  800420a052:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a058:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a05f:	00 00 00 
  800420a062:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a069:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a06c:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a072:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a079:	00 00 00 
  800420a07c:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a083:	83 ca 80             	or     $0xffffff80,%edx
  800420a086:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a08c:	48 b8 b0 d0 20 04 80 	movabs $0x800420d0b0,%rax
  800420a093:	00 00 00 
  800420a096:	48 c1 e8 10          	shr    $0x10,%rax
  800420a09a:	89 c2                	mov    %eax,%edx
  800420a09c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0a3:	00 00 00 
  800420a0a6:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a0ad:	48 b8 b0 d0 20 04 80 	movabs $0x800420d0b0,%rax
  800420a0b4:	00 00 00 
  800420a0b7:	48 c1 e8 20          	shr    $0x20,%rax
  800420a0bb:	89 c2                	mov    %eax,%edx
  800420a0bd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0c4:	00 00 00 
  800420a0c7:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a0cd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0d4:	00 00 00 
  800420a0d7:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a0de:	00 00 00 
  800420a0e1:	48 b8 b8 d0 20 04 80 	movabs $0x800420d0b8,%rax
  800420a0e8:	00 00 00 
  800420a0eb:	89 c2                	mov    %eax,%edx
  800420a0ed:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0f4:	00 00 00 
  800420a0f7:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a0fe:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a105:	00 00 00 
  800420a108:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a10f:	08 00 
  800420a111:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a118:	00 00 00 
  800420a11b:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a122:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a125:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a12b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a132:	00 00 00 
  800420a135:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a13c:	83 e2 07             	and    $0x7,%edx
  800420a13f:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a145:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a14c:	00 00 00 
  800420a14f:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a156:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a159:	83 ca 0e             	or     $0xe,%edx
  800420a15c:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a162:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a169:	00 00 00 
  800420a16c:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a173:	83 e2 ef             	and    $0xffffffef,%edx
  800420a176:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a17c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a183:	00 00 00 
  800420a186:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a18d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a190:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a196:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a19d:	00 00 00 
  800420a1a0:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1a7:	83 ca 80             	or     $0xffffff80,%edx
  800420a1aa:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1b0:	48 b8 b8 d0 20 04 80 	movabs $0x800420d0b8,%rax
  800420a1b7:	00 00 00 
  800420a1ba:	48 c1 e8 10          	shr    $0x10,%rax
  800420a1be:	89 c2                	mov    %eax,%edx
  800420a1c0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1c7:	00 00 00 
  800420a1ca:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a1d1:	48 b8 b8 d0 20 04 80 	movabs $0x800420d0b8,%rax
  800420a1d8:	00 00 00 
  800420a1db:	48 c1 e8 20          	shr    $0x20,%rax
  800420a1df:	89 c2                	mov    %eax,%edx
  800420a1e1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1e8:	00 00 00 
  800420a1eb:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a1f1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1f8:	00 00 00 
  800420a1fb:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a202:	00 00 00 
  800420a205:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  800420a20c:	00 00 00 
  800420a20f:	89 c2                	mov    %eax,%edx
  800420a211:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a218:	00 00 00 
  800420a21b:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a222:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a229:	00 00 00 
  800420a22c:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a233:	08 00 
  800420a235:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a23c:	00 00 00 
  800420a23f:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a246:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a249:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a24f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a256:	00 00 00 
  800420a259:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a260:	83 e2 07             	and    $0x7,%edx
  800420a263:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a269:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a270:	00 00 00 
  800420a273:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a27a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a27d:	83 ca 0e             	or     $0xe,%edx
  800420a280:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a286:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a28d:	00 00 00 
  800420a290:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a297:	83 e2 ef             	and    $0xffffffef,%edx
  800420a29a:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a2a0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2a7:	00 00 00 
  800420a2aa:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a2b1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a2b4:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a2ba:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2c1:	00 00 00 
  800420a2c4:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a2cb:	83 ca 80             	or     $0xffffff80,%edx
  800420a2ce:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a2d4:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  800420a2db:	00 00 00 
  800420a2de:	48 c1 e8 10          	shr    $0x10,%rax
  800420a2e2:	89 c2                	mov    %eax,%edx
  800420a2e4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2eb:	00 00 00 
  800420a2ee:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a2f5:	48 b8 c0 d0 20 04 80 	movabs $0x800420d0c0,%rax
  800420a2fc:	00 00 00 
  800420a2ff:	48 c1 e8 20          	shr    $0x20,%rax
  800420a303:	89 c2                	mov    %eax,%edx
  800420a305:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a30c:	00 00 00 
  800420a30f:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420a315:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a31c:	00 00 00 
  800420a31f:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420a326:	00 00 00 
  800420a329:	48 b8 c8 d0 20 04 80 	movabs $0x800420d0c8,%rax
  800420a330:	00 00 00 
  800420a333:	89 c2                	mov    %eax,%edx
  800420a335:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a33c:	00 00 00 
  800420a33f:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420a346:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a34d:	00 00 00 
  800420a350:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420a357:	08 00 
  800420a359:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a360:	00 00 00 
  800420a363:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a36a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a36d:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a373:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a37a:	00 00 00 
  800420a37d:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a384:	83 e2 07             	and    $0x7,%edx
  800420a387:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a38d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a394:	00 00 00 
  800420a397:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a39e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3a1:	83 ca 0e             	or     $0xe,%edx
  800420a3a4:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a3aa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3b1:	00 00 00 
  800420a3b4:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a3bb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3be:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a3c4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3cb:	00 00 00 
  800420a3ce:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a3d5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3d8:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a3de:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3e5:	00 00 00 
  800420a3e8:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a3ef:	83 ca 80             	or     $0xffffff80,%edx
  800420a3f2:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a3f8:	48 b8 c8 d0 20 04 80 	movabs $0x800420d0c8,%rax
  800420a3ff:	00 00 00 
  800420a402:	48 c1 e8 10          	shr    $0x10,%rax
  800420a406:	89 c2                	mov    %eax,%edx
  800420a408:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a40f:	00 00 00 
  800420a412:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420a419:	48 b8 c8 d0 20 04 80 	movabs $0x800420d0c8,%rax
  800420a420:	00 00 00 
  800420a423:	48 c1 e8 20          	shr    $0x20,%rax
  800420a427:	89 c2                	mov    %eax,%edx
  800420a429:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a430:	00 00 00 
  800420a433:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420a439:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a440:	00 00 00 
  800420a443:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420a44a:	00 00 00 
  800420a44d:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  800420a454:	00 00 00 
  800420a457:	89 c2                	mov    %eax,%edx
  800420a459:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a460:	00 00 00 
  800420a463:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420a46a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a471:	00 00 00 
  800420a474:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420a47b:	08 00 
  800420a47d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a484:	00 00 00 
  800420a487:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a48e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a491:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a497:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a49e:	00 00 00 
  800420a4a1:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a4a8:	83 e2 07             	and    $0x7,%edx
  800420a4ab:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a4b1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4b8:	00 00 00 
  800420a4bb:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a4c2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4c5:	83 ca 0e             	or     $0xe,%edx
  800420a4c8:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a4ce:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4d5:	00 00 00 
  800420a4d8:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a4df:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4e2:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a4e8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4ef:	00 00 00 
  800420a4f2:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a4f9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4fc:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a502:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a509:	00 00 00 
  800420a50c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a513:	83 ca 80             	or     $0xffffff80,%edx
  800420a516:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a51c:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  800420a523:	00 00 00 
  800420a526:	48 c1 e8 10          	shr    $0x10,%rax
  800420a52a:	89 c2                	mov    %eax,%edx
  800420a52c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a533:	00 00 00 
  800420a536:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420a53d:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  800420a544:	00 00 00 
  800420a547:	48 c1 e8 20          	shr    $0x20,%rax
  800420a54b:	89 c2                	mov    %eax,%edx
  800420a54d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a554:	00 00 00 
  800420a557:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420a55d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a564:	00 00 00 
  800420a567:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420a56e:	00 00 00 
  800420a571:	48 b8 d8 d0 20 04 80 	movabs $0x800420d0d8,%rax
  800420a578:	00 00 00 
  800420a57b:	89 c2                	mov    %eax,%edx
  800420a57d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a584:	00 00 00 
  800420a587:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420a58e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a595:	00 00 00 
  800420a598:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420a59f:	08 00 
  800420a5a1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5a8:	00 00 00 
  800420a5ab:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a5b2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a5b5:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a5bb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5c2:	00 00 00 
  800420a5c5:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a5cc:	83 e2 07             	and    $0x7,%edx
  800420a5cf:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a5d5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5dc:	00 00 00 
  800420a5df:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a5e6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a5e9:	83 ca 0e             	or     $0xe,%edx
  800420a5ec:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a5f2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5f9:	00 00 00 
  800420a5fc:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a603:	83 e2 ef             	and    $0xffffffef,%edx
  800420a606:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a60c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a613:	00 00 00 
  800420a616:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a61d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a620:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a626:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a62d:	00 00 00 
  800420a630:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a637:	83 ca 80             	or     $0xffffff80,%edx
  800420a63a:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a640:	48 b8 d8 d0 20 04 80 	movabs $0x800420d0d8,%rax
  800420a647:	00 00 00 
  800420a64a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a64e:	89 c2                	mov    %eax,%edx
  800420a650:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a657:	00 00 00 
  800420a65a:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420a661:	48 b8 d8 d0 20 04 80 	movabs $0x800420d0d8,%rax
  800420a668:	00 00 00 
  800420a66b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a66f:	89 c2                	mov    %eax,%edx
  800420a671:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a678:	00 00 00 
  800420a67b:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420a681:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a688:	00 00 00 
  800420a68b:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420a692:	00 00 00 
  800420a695:	48 b8 e0 d0 20 04 80 	movabs $0x800420d0e0,%rax
  800420a69c:	00 00 00 
  800420a69f:	89 c2                	mov    %eax,%edx
  800420a6a1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420a6b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6b9:	00 00 00 
  800420a6bc:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420a6c3:	08 00 
  800420a6c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6cc:	00 00 00 
  800420a6cf:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a6d6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a6d9:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a6df:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6e6:	00 00 00 
  800420a6e9:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a6f0:	83 e2 07             	and    $0x7,%edx
  800420a6f3:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a6f9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a700:	00 00 00 
  800420a703:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a70a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a70d:	83 ca 0e             	or     $0xe,%edx
  800420a710:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a716:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a71d:	00 00 00 
  800420a720:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a727:	83 e2 ef             	and    $0xffffffef,%edx
  800420a72a:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a730:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a737:	00 00 00 
  800420a73a:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a741:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a744:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a74a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a751:	00 00 00 
  800420a754:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a75b:	83 ca 80             	or     $0xffffff80,%edx
  800420a75e:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a764:	48 b8 e0 d0 20 04 80 	movabs $0x800420d0e0,%rax
  800420a76b:	00 00 00 
  800420a76e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a772:	89 c2                	mov    %eax,%edx
  800420a774:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a77b:	00 00 00 
  800420a77e:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420a785:	48 b8 e0 d0 20 04 80 	movabs $0x800420d0e0,%rax
  800420a78c:	00 00 00 
  800420a78f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a793:	89 c2                	mov    %eax,%edx
  800420a795:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a79c:	00 00 00 
  800420a79f:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420a7a5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7ac:	00 00 00 
  800420a7af:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420a7b6:	00 00 00 
  800420a7b9:	48 b8 e6 d0 20 04 80 	movabs $0x800420d0e6,%rax
  800420a7c0:	00 00 00 
  800420a7c3:	89 c2                	mov    %eax,%edx
  800420a7c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7cc:	00 00 00 
  800420a7cf:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420a7d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7dd:	00 00 00 
  800420a7e0:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420a7e7:	08 00 
  800420a7e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7f0:	00 00 00 
  800420a7f3:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a7fa:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a7fd:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a803:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a80a:	00 00 00 
  800420a80d:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a814:	83 e2 07             	and    $0x7,%edx
  800420a817:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a81d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a824:	00 00 00 
  800420a827:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a82e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a831:	83 ca 0e             	or     $0xe,%edx
  800420a834:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a83a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a841:	00 00 00 
  800420a844:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a84b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a84e:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a854:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a85b:	00 00 00 
  800420a85e:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a865:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a868:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a86e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a875:	00 00 00 
  800420a878:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a87f:	83 ca 80             	or     $0xffffff80,%edx
  800420a882:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a888:	48 b8 e6 d0 20 04 80 	movabs $0x800420d0e6,%rax
  800420a88f:	00 00 00 
  800420a892:	48 c1 e8 10          	shr    $0x10,%rax
  800420a896:	89 c2                	mov    %eax,%edx
  800420a898:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a89f:	00 00 00 
  800420a8a2:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420a8a9:	48 b8 e6 d0 20 04 80 	movabs $0x800420d0e6,%rax
  800420a8b0:	00 00 00 
  800420a8b3:	48 c1 e8 20          	shr    $0x20,%rax
  800420a8b7:	89 c2                	mov    %eax,%edx
  800420a8b9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8c0:	00 00 00 
  800420a8c3:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420a8c9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8d0:	00 00 00 
  800420a8d3:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420a8da:	00 00 00 
  800420a8dd:	48 b8 ea d0 20 04 80 	movabs $0x800420d0ea,%rax
  800420a8e4:	00 00 00 
  800420a8e7:	89 c2                	mov    %eax,%edx
  800420a8e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8f0:	00 00 00 
  800420a8f3:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420a8fa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a901:	00 00 00 
  800420a904:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420a90b:	08 00 
  800420a90d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a914:	00 00 00 
  800420a917:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a91e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a921:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a927:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a92e:	00 00 00 
  800420a931:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a938:	83 e2 07             	and    $0x7,%edx
  800420a93b:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a941:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a948:	00 00 00 
  800420a94b:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a952:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a955:	83 ca 0e             	or     $0xe,%edx
  800420a958:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a95e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a965:	00 00 00 
  800420a968:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a96f:	83 e2 ef             	and    $0xffffffef,%edx
  800420a972:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a978:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a97f:	00 00 00 
  800420a982:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a989:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a98c:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a992:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a999:	00 00 00 
  800420a99c:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9a3:	83 ca 80             	or     $0xffffff80,%edx
  800420a9a6:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9ac:	48 b8 ea d0 20 04 80 	movabs $0x800420d0ea,%rax
  800420a9b3:	00 00 00 
  800420a9b6:	48 c1 e8 10          	shr    $0x10,%rax
  800420a9ba:	89 c2                	mov    %eax,%edx
  800420a9bc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9c3:	00 00 00 
  800420a9c6:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420a9cd:	48 b8 ea d0 20 04 80 	movabs $0x800420d0ea,%rax
  800420a9d4:	00 00 00 
  800420a9d7:	48 c1 e8 20          	shr    $0x20,%rax
  800420a9db:	89 c2                	mov    %eax,%edx
  800420a9dd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9e4:	00 00 00 
  800420a9e7:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420a9ed:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9f4:	00 00 00 
  800420a9f7:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420a9fe:	00 00 00 
  800420aa01:	48 b8 f0 d0 20 04 80 	movabs $0x800420d0f0,%rax
  800420aa08:	00 00 00 
  800420aa0b:	89 c2                	mov    %eax,%edx
  800420aa0d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa14:	00 00 00 
  800420aa17:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420aa1e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa25:	00 00 00 
  800420aa28:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420aa2f:	08 00 
  800420aa31:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa38:	00 00 00 
  800420aa3b:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aa42:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aa45:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aa4b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa52:	00 00 00 
  800420aa55:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aa5c:	83 e2 07             	and    $0x7,%edx
  800420aa5f:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aa65:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa6c:	00 00 00 
  800420aa6f:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aa76:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aa79:	83 ca 0e             	or     $0xe,%edx
  800420aa7c:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aa82:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa89:	00 00 00 
  800420aa8c:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aa93:	83 e2 ef             	and    $0xffffffef,%edx
  800420aa96:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aa9c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aaa3:	00 00 00 
  800420aaa6:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aaad:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aab0:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aab6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aabd:	00 00 00 
  800420aac0:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aac7:	83 ca 80             	or     $0xffffff80,%edx
  800420aaca:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aad0:	48 b8 f0 d0 20 04 80 	movabs $0x800420d0f0,%rax
  800420aad7:	00 00 00 
  800420aada:	48 c1 e8 10          	shr    $0x10,%rax
  800420aade:	89 c2                	mov    %eax,%edx
  800420aae0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aae7:	00 00 00 
  800420aaea:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420aaf1:	48 b8 f0 d0 20 04 80 	movabs $0x800420d0f0,%rax
  800420aaf8:	00 00 00 
  800420aafb:	48 c1 e8 20          	shr    $0x20,%rax
  800420aaff:	89 c2                	mov    %eax,%edx
  800420ab01:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab08:	00 00 00 
  800420ab0b:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420ab11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab18:	00 00 00 
  800420ab1b:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420ab22:	00 00 00 
  800420ab25:	48 b8 f6 d0 20 04 80 	movabs $0x800420d0f6,%rax
  800420ab2c:	00 00 00 
  800420ab2f:	89 c2                	mov    %eax,%edx
  800420ab31:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab38:	00 00 00 
  800420ab3b:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420ab42:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab49:	00 00 00 
  800420ab4c:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420ab53:	08 00 
  800420ab55:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab5c:	00 00 00 
  800420ab5f:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ab66:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ab69:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ab6f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab76:	00 00 00 
  800420ab79:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ab80:	83 e2 07             	and    $0x7,%edx
  800420ab83:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ab89:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab90:	00 00 00 
  800420ab93:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ab9a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab9d:	83 ca 0e             	or     $0xe,%edx
  800420aba0:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420aba6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abad:	00 00 00 
  800420abb0:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420abb7:	83 e2 ef             	and    $0xffffffef,%edx
  800420abba:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420abc0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abc7:	00 00 00 
  800420abca:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420abd1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420abd4:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420abda:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abe1:	00 00 00 
  800420abe4:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420abeb:	83 ca 80             	or     $0xffffff80,%edx
  800420abee:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420abf4:	48 b8 f6 d0 20 04 80 	movabs $0x800420d0f6,%rax
  800420abfb:	00 00 00 
  800420abfe:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac02:	89 c2                	mov    %eax,%edx
  800420ac04:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac0b:	00 00 00 
  800420ac0e:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420ac15:	48 b8 f6 d0 20 04 80 	movabs $0x800420d0f6,%rax
  800420ac1c:	00 00 00 
  800420ac1f:	48 c1 e8 20          	shr    $0x20,%rax
  800420ac23:	89 c2                	mov    %eax,%edx
  800420ac25:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac2c:	00 00 00 
  800420ac2f:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420ac35:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac3c:	00 00 00 
  800420ac3f:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420ac46:	00 00 00 
  800420ac49:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  800420ac50:	00 00 00 
  800420ac53:	89 c2                	mov    %eax,%edx
  800420ac55:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac5c:	00 00 00 
  800420ac5f:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420ac66:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac6d:	00 00 00 
  800420ac70:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420ac77:	08 00 
  800420ac79:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac80:	00 00 00 
  800420ac83:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ac8a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ac8d:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ac93:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac9a:	00 00 00 
  800420ac9d:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420aca4:	83 e2 07             	and    $0x7,%edx
  800420aca7:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420acad:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acb4:	00 00 00 
  800420acb7:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420acbe:	83 e2 f0             	and    $0xfffffff0,%edx
  800420acc1:	83 ca 0e             	or     $0xe,%edx
  800420acc4:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420acca:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acd1:	00 00 00 
  800420acd4:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420acdb:	83 e2 ef             	and    $0xffffffef,%edx
  800420acde:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ace4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aceb:	00 00 00 
  800420acee:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420acf5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420acf8:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420acfe:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad05:	00 00 00 
  800420ad08:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad0f:	83 ca 80             	or     $0xffffff80,%edx
  800420ad12:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad18:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  800420ad1f:	00 00 00 
  800420ad22:	48 c1 e8 10          	shr    $0x10,%rax
  800420ad26:	89 c2                	mov    %eax,%edx
  800420ad28:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad2f:	00 00 00 
  800420ad32:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420ad39:	48 b8 fc d0 20 04 80 	movabs $0x800420d0fc,%rax
  800420ad40:	00 00 00 
  800420ad43:	48 c1 e8 20          	shr    $0x20,%rax
  800420ad47:	89 c2                	mov    %eax,%edx
  800420ad49:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad50:	00 00 00 
  800420ad53:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420ad59:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad60:	00 00 00 
  800420ad63:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420ad6a:	00 00 00 
  800420ad6d:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  800420ad74:	00 00 00 
  800420ad77:	89 c2                	mov    %eax,%edx
  800420ad79:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad80:	00 00 00 
  800420ad83:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420ad8a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad91:	00 00 00 
  800420ad94:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420ad9b:	08 00 
  800420ad9d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ada4:	00 00 00 
  800420ada7:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420adae:	83 e2 f8             	and    $0xfffffff8,%edx
  800420adb1:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420adb7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adbe:	00 00 00 
  800420adc1:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420adc8:	83 e2 07             	and    $0x7,%edx
  800420adcb:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420add1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420add8:	00 00 00 
  800420addb:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ade2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ade5:	83 ca 0e             	or     $0xe,%edx
  800420ade8:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420adee:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adf5:	00 00 00 
  800420adf8:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420adff:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae02:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae08:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae0f:	00 00 00 
  800420ae12:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae19:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae1c:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae22:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae29:	00 00 00 
  800420ae2c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae33:	83 ca 80             	or     $0xffffff80,%edx
  800420ae36:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae3c:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  800420ae43:	00 00 00 
  800420ae46:	48 c1 e8 10          	shr    $0x10,%rax
  800420ae4a:	89 c2                	mov    %eax,%edx
  800420ae4c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae53:	00 00 00 
  800420ae56:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420ae5d:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  800420ae64:	00 00 00 
  800420ae67:	48 c1 e8 20          	shr    $0x20,%rax
  800420ae6b:	89 c2                	mov    %eax,%edx
  800420ae6d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae74:	00 00 00 
  800420ae77:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420ae7d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae84:	00 00 00 
  800420ae87:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420ae8e:	00 00 00 
  800420ae91:	48 b8 08 d1 20 04 80 	movabs $0x800420d108,%rax
  800420ae98:	00 00 00 
  800420ae9b:	89 c2                	mov    %eax,%edx
  800420ae9d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aea4:	00 00 00 
  800420aea7:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420aeae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aeb5:	00 00 00 
  800420aeb8:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420aebf:	08 00 
  800420aec1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aec8:	00 00 00 
  800420aecb:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420aed2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aed5:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420aedb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aee2:	00 00 00 
  800420aee5:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420aeec:	83 e2 07             	and    $0x7,%edx
  800420aeef:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420aef5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aefc:	00 00 00 
  800420aeff:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af06:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af09:	83 ca 0e             	or     $0xe,%edx
  800420af0c:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af12:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af19:	00 00 00 
  800420af1c:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af23:	83 e2 ef             	and    $0xffffffef,%edx
  800420af26:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af2c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af33:	00 00 00 
  800420af36:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af3d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420af40:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af46:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af4d:	00 00 00 
  800420af50:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af57:	83 ca 80             	or     $0xffffff80,%edx
  800420af5a:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af60:	48 b8 08 d1 20 04 80 	movabs $0x800420d108,%rax
  800420af67:	00 00 00 
  800420af6a:	48 c1 e8 10          	shr    $0x10,%rax
  800420af6e:	89 c2                	mov    %eax,%edx
  800420af70:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af77:	00 00 00 
  800420af7a:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420af81:	48 b8 08 d1 20 04 80 	movabs $0x800420d108,%rax
  800420af88:	00 00 00 
  800420af8b:	48 c1 e8 20          	shr    $0x20,%rax
  800420af8f:	89 c2                	mov    %eax,%edx
  800420af91:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af98:	00 00 00 
  800420af9b:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420afa1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afa8:	00 00 00 
  800420afab:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420afb2:	00 00 00 
  800420afb5:	48 b8 0e d1 20 04 80 	movabs $0x800420d10e,%rax
  800420afbc:	00 00 00 
  800420afbf:	89 c2                	mov    %eax,%edx
  800420afc1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afc8:	00 00 00 
  800420afcb:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420afd2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afd9:	00 00 00 
  800420afdc:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420afe3:	08 00 
  800420afe5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afec:	00 00 00 
  800420afef:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420aff6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aff9:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420afff:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b006:	00 00 00 
  800420b009:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b010:	83 e2 07             	and    $0x7,%edx
  800420b013:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b019:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b020:	00 00 00 
  800420b023:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b02a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b02d:	83 ca 0e             	or     $0xe,%edx
  800420b030:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b036:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b03d:	00 00 00 
  800420b040:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b047:	83 e2 ef             	and    $0xffffffef,%edx
  800420b04a:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b050:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b057:	00 00 00 
  800420b05a:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b061:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b064:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b06a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b071:	00 00 00 
  800420b074:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b07b:	83 ca 80             	or     $0xffffff80,%edx
  800420b07e:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b084:	48 b8 0e d1 20 04 80 	movabs $0x800420d10e,%rax
  800420b08b:	00 00 00 
  800420b08e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b092:	89 c2                	mov    %eax,%edx
  800420b094:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b09b:	00 00 00 
  800420b09e:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b0a5:	48 b8 0e d1 20 04 80 	movabs $0x800420d10e,%rax
  800420b0ac:	00 00 00 
  800420b0af:	48 c1 e8 20          	shr    $0x20,%rax
  800420b0b3:	89 c2                	mov    %eax,%edx
  800420b0b5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0bc:	00 00 00 
  800420b0bf:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b0c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0cc:	00 00 00 
  800420b0cf:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b0d6:	00 00 00 
  800420b0d9:	48 b8 14 d1 20 04 80 	movabs $0x800420d114,%rax
  800420b0e0:	00 00 00 
  800420b0e3:	89 c2                	mov    %eax,%edx
  800420b0e5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0ec:	00 00 00 
  800420b0ef:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b0f6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0fd:	00 00 00 
  800420b100:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b107:	08 00 
  800420b109:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b110:	00 00 00 
  800420b113:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b11a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b11d:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b123:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b12a:	00 00 00 
  800420b12d:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b134:	83 e2 07             	and    $0x7,%edx
  800420b137:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b13d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b144:	00 00 00 
  800420b147:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b14e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b151:	83 ca 0e             	or     $0xe,%edx
  800420b154:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b15a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b161:	00 00 00 
  800420b164:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b16b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b16e:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b174:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b17b:	00 00 00 
  800420b17e:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b185:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b188:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b18e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b195:	00 00 00 
  800420b198:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b19f:	83 ca 80             	or     $0xffffff80,%edx
  800420b1a2:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1a8:	48 b8 14 d1 20 04 80 	movabs $0x800420d114,%rax
  800420b1af:	00 00 00 
  800420b1b2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b1b6:	89 c2                	mov    %eax,%edx
  800420b1b8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1bf:	00 00 00 
  800420b1c2:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b1c9:	48 b8 14 d1 20 04 80 	movabs $0x800420d114,%rax
  800420b1d0:	00 00 00 
  800420b1d3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b1d7:	89 c2                	mov    %eax,%edx
  800420b1d9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1e0:	00 00 00 
  800420b1e3:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b1e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1f0:	00 00 00 
  800420b1f3:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b1fa:	00 00 00 
  800420b1fd:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  800420b204:	00 00 00 
  800420b207:	89 c2                	mov    %eax,%edx
  800420b209:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b210:	00 00 00 
  800420b213:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b21a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b221:	00 00 00 
  800420b224:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b22b:	08 00 
  800420b22d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b234:	00 00 00 
  800420b237:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b23e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b241:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b247:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b24e:	00 00 00 
  800420b251:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b258:	83 e2 07             	and    $0x7,%edx
  800420b25b:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b261:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b268:	00 00 00 
  800420b26b:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b272:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b275:	83 ca 0e             	or     $0xe,%edx
  800420b278:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b27e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b285:	00 00 00 
  800420b288:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b28f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b292:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b298:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b29f:	00 00 00 
  800420b2a2:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b2a9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b2ac:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b2b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2b9:	00 00 00 
  800420b2bc:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b2c3:	83 ca 80             	or     $0xffffff80,%edx
  800420b2c6:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b2cc:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  800420b2d3:	00 00 00 
  800420b2d6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b2da:	89 c2                	mov    %eax,%edx
  800420b2dc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2e3:	00 00 00 
  800420b2e6:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b2ed:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  800420b2f4:	00 00 00 
  800420b2f7:	48 c1 e8 20          	shr    $0x20,%rax
  800420b2fb:	89 c2                	mov    %eax,%edx
  800420b2fd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b304:	00 00 00 
  800420b307:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420b30d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b314:	00 00 00 
  800420b317:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420b31e:	00 00 00 
  800420b321:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420b328:	00 00 00 
  800420b32b:	89 c2                	mov    %eax,%edx
  800420b32d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b334:	00 00 00 
  800420b337:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420b33e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b345:	00 00 00 
  800420b348:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420b34f:	08 00 
  800420b351:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b358:	00 00 00 
  800420b35b:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b362:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b365:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b36b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b372:	00 00 00 
  800420b375:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b37c:	83 e2 07             	and    $0x7,%edx
  800420b37f:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b385:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b38c:	00 00 00 
  800420b38f:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b396:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b399:	83 ca 0e             	or     $0xe,%edx
  800420b39c:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b3a2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3a9:	00 00 00 
  800420b3ac:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b3b3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b3b6:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b3bc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3c3:	00 00 00 
  800420b3c6:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b3cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b3d0:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b3d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3dd:	00 00 00 
  800420b3e0:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b3e7:	83 ca 80             	or     $0xffffff80,%edx
  800420b3ea:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b3f0:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420b3f7:	00 00 00 
  800420b3fa:	48 c1 e8 10          	shr    $0x10,%rax
  800420b3fe:	89 c2                	mov    %eax,%edx
  800420b400:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b407:	00 00 00 
  800420b40a:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420b411:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420b418:	00 00 00 
  800420b41b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b41f:	89 c2                	mov    %eax,%edx
  800420b421:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b428:	00 00 00 
  800420b42b:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420b431:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b438:	00 00 00 
  800420b43b:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420b442:	00 00 00 
  800420b445:	48 b8 26 d1 20 04 80 	movabs $0x800420d126,%rax
  800420b44c:	00 00 00 
  800420b44f:	89 c2                	mov    %eax,%edx
  800420b451:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b458:	00 00 00 
  800420b45b:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420b462:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b469:	00 00 00 
  800420b46c:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420b473:	08 00 
  800420b475:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b47c:	00 00 00 
  800420b47f:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b486:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b489:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b48f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b496:	00 00 00 
  800420b499:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b4a0:	83 e2 07             	and    $0x7,%edx
  800420b4a3:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b4a9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4b0:	00 00 00 
  800420b4b3:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b4ba:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b4bd:	83 ca 0e             	or     $0xe,%edx
  800420b4c0:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b4c6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4cd:	00 00 00 
  800420b4d0:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b4d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b4da:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b4e0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4e7:	00 00 00 
  800420b4ea:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b4f1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b4f4:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b4fa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b501:	00 00 00 
  800420b504:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b50b:	83 ca 80             	or     $0xffffff80,%edx
  800420b50e:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b514:	48 b8 26 d1 20 04 80 	movabs $0x800420d126,%rax
  800420b51b:	00 00 00 
  800420b51e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b522:	89 c2                	mov    %eax,%edx
  800420b524:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b52b:	00 00 00 
  800420b52e:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420b535:	48 b8 26 d1 20 04 80 	movabs $0x800420d126,%rax
  800420b53c:	00 00 00 
  800420b53f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b543:	89 c2                	mov    %eax,%edx
  800420b545:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b54c:	00 00 00 
  800420b54f:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420b555:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b55c:	00 00 00 
  800420b55f:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420b566:	00 00 00 
  800420b569:	48 b8 2c d1 20 04 80 	movabs $0x800420d12c,%rax
  800420b570:	00 00 00 
  800420b573:	89 c2                	mov    %eax,%edx
  800420b575:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b57c:	00 00 00 
  800420b57f:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420b586:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b58d:	00 00 00 
  800420b590:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420b597:	08 00 
  800420b599:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5a0:	00 00 00 
  800420b5a3:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b5aa:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b5ad:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b5b3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5ba:	00 00 00 
  800420b5bd:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b5c4:	83 e2 07             	and    $0x7,%edx
  800420b5c7:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b5cd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5d4:	00 00 00 
  800420b5d7:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b5de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b5e1:	83 ca 0e             	or     $0xe,%edx
  800420b5e4:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b5ea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5f1:	00 00 00 
  800420b5f4:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b5fb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b5fe:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b604:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b60b:	00 00 00 
  800420b60e:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b615:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b618:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b61e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b625:	00 00 00 
  800420b628:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b62f:	83 ca 80             	or     $0xffffff80,%edx
  800420b632:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b638:	48 b8 2c d1 20 04 80 	movabs $0x800420d12c,%rax
  800420b63f:	00 00 00 
  800420b642:	48 c1 e8 10          	shr    $0x10,%rax
  800420b646:	89 c2                	mov    %eax,%edx
  800420b648:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b64f:	00 00 00 
  800420b652:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420b659:	48 b8 2c d1 20 04 80 	movabs $0x800420d12c,%rax
  800420b660:	00 00 00 
  800420b663:	48 c1 e8 20          	shr    $0x20,%rax
  800420b667:	89 c2                	mov    %eax,%edx
  800420b669:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b670:	00 00 00 
  800420b673:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420b679:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b680:	00 00 00 
  800420b683:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420b68a:	00 00 00 
  800420b68d:	48 b8 32 d1 20 04 80 	movabs $0x800420d132,%rax
  800420b694:	00 00 00 
  800420b697:	89 c2                	mov    %eax,%edx
  800420b699:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6a0:	00 00 00 
  800420b6a3:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420b6aa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6b1:	00 00 00 
  800420b6b4:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420b6bb:	08 00 
  800420b6bd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6c4:	00 00 00 
  800420b6c7:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b6ce:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b6d1:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b6d7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6de:	00 00 00 
  800420b6e1:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b6e8:	83 e2 07             	and    $0x7,%edx
  800420b6eb:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b6f1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6f8:	00 00 00 
  800420b6fb:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b702:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b705:	83 ca 0e             	or     $0xe,%edx
  800420b708:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b70e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b715:	00 00 00 
  800420b718:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b71f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b722:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b728:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b72f:	00 00 00 
  800420b732:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b739:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b73c:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b742:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b749:	00 00 00 
  800420b74c:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b753:	83 ca 80             	or     $0xffffff80,%edx
  800420b756:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b75c:	48 b8 32 d1 20 04 80 	movabs $0x800420d132,%rax
  800420b763:	00 00 00 
  800420b766:	48 c1 e8 10          	shr    $0x10,%rax
  800420b76a:	89 c2                	mov    %eax,%edx
  800420b76c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b773:	00 00 00 
  800420b776:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420b77d:	48 b8 32 d1 20 04 80 	movabs $0x800420d132,%rax
  800420b784:	00 00 00 
  800420b787:	48 c1 e8 20          	shr    $0x20,%rax
  800420b78b:	89 c2                	mov    %eax,%edx
  800420b78d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b794:	00 00 00 
  800420b797:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420b79d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7a4:	00 00 00 
  800420b7a7:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420b7ae:	00 00 00 
  800420b7b1:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420b7b8:	00 00 00 
  800420b7bb:	89 c2                	mov    %eax,%edx
  800420b7bd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7c4:	00 00 00 
  800420b7c7:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420b7ce:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7d5:	00 00 00 
  800420b7d8:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420b7df:	08 00 
  800420b7e1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7e8:	00 00 00 
  800420b7eb:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b7f2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b7f5:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b7fb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b802:	00 00 00 
  800420b805:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b80c:	83 e2 07             	and    $0x7,%edx
  800420b80f:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b815:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b81c:	00 00 00 
  800420b81f:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b826:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b829:	83 ca 0e             	or     $0xe,%edx
  800420b82c:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b832:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b839:	00 00 00 
  800420b83c:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b843:	83 e2 ef             	and    $0xffffffef,%edx
  800420b846:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b84c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b853:	00 00 00 
  800420b856:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b85d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b860:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b866:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b86d:	00 00 00 
  800420b870:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b877:	83 ca 80             	or     $0xffffff80,%edx
  800420b87a:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b880:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420b887:	00 00 00 
  800420b88a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b88e:	89 c2                	mov    %eax,%edx
  800420b890:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b897:	00 00 00 
  800420b89a:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420b8a1:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420b8a8:	00 00 00 
  800420b8ab:	48 c1 e8 20          	shr    $0x20,%rax
  800420b8af:	89 c2                	mov    %eax,%edx
  800420b8b1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8b8:	00 00 00 
  800420b8bb:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420b8c1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8c8:	00 00 00 
  800420b8cb:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420b8d2:	00 00 00 
  800420b8d5:	48 b8 3e d1 20 04 80 	movabs $0x800420d13e,%rax
  800420b8dc:	00 00 00 
  800420b8df:	89 c2                	mov    %eax,%edx
  800420b8e1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8e8:	00 00 00 
  800420b8eb:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420b8f2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8f9:	00 00 00 
  800420b8fc:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420b903:	08 00 
  800420b905:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b90c:	00 00 00 
  800420b90f:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b916:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b919:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b91f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b926:	00 00 00 
  800420b929:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b930:	83 e2 07             	and    $0x7,%edx
  800420b933:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b939:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b940:	00 00 00 
  800420b943:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b94a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b94d:	83 ca 0e             	or     $0xe,%edx
  800420b950:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b956:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b95d:	00 00 00 
  800420b960:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b967:	83 e2 ef             	and    $0xffffffef,%edx
  800420b96a:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b970:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b977:	00 00 00 
  800420b97a:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b981:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b984:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b98a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b991:	00 00 00 
  800420b994:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b99b:	83 ca 80             	or     $0xffffff80,%edx
  800420b99e:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9a4:	48 b8 3e d1 20 04 80 	movabs $0x800420d13e,%rax
  800420b9ab:	00 00 00 
  800420b9ae:	48 c1 e8 10          	shr    $0x10,%rax
  800420b9b2:	89 c2                	mov    %eax,%edx
  800420b9b4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9bb:	00 00 00 
  800420b9be:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420b9c5:	48 b8 3e d1 20 04 80 	movabs $0x800420d13e,%rax
  800420b9cc:	00 00 00 
  800420b9cf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b9d3:	89 c2                	mov    %eax,%edx
  800420b9d5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9dc:	00 00 00 
  800420b9df:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420b9e5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9ec:	00 00 00 
  800420b9ef:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420b9f6:	00 00 00 
  800420b9f9:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  800420ba00:	00 00 00 
  800420ba03:	89 c2                	mov    %eax,%edx
  800420ba05:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba0c:	00 00 00 
  800420ba0f:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420ba16:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba1d:	00 00 00 
  800420ba20:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420ba27:	08 00 
  800420ba29:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba30:	00 00 00 
  800420ba33:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420ba3a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ba3d:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420ba43:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba4a:	00 00 00 
  800420ba4d:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420ba54:	83 e2 07             	and    $0x7,%edx
  800420ba57:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420ba5d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba64:	00 00 00 
  800420ba67:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420ba6e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ba71:	83 ca 0e             	or     $0xe,%edx
  800420ba74:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420ba7a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba81:	00 00 00 
  800420ba84:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420ba8b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ba8e:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420ba94:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba9b:	00 00 00 
  800420ba9e:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420baa5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420baa8:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420baae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bab5:	00 00 00 
  800420bab8:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420babf:	83 ca 80             	or     $0xffffff80,%edx
  800420bac2:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bac8:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  800420bacf:	00 00 00 
  800420bad2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bad6:	89 c2                	mov    %eax,%edx
  800420bad8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420badf:	00 00 00 
  800420bae2:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420bae9:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  800420baf0:	00 00 00 
  800420baf3:	48 c1 e8 20          	shr    $0x20,%rax
  800420baf7:	89 c2                	mov    %eax,%edx
  800420baf9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb00:	00 00 00 
  800420bb03:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420bb09:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb10:	00 00 00 
  800420bb13:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420bb1a:	00 00 00 
  800420bb1d:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420bb24:	00 00 00 
  800420bb27:	89 c2                	mov    %eax,%edx
  800420bb29:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb30:	00 00 00 
  800420bb33:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420bb3a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb41:	00 00 00 
  800420bb44:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420bb4b:	08 00 
  800420bb4d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb54:	00 00 00 
  800420bb57:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bb5e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bb61:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bb67:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb6e:	00 00 00 
  800420bb71:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bb78:	83 e2 07             	and    $0x7,%edx
  800420bb7b:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bb81:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb88:	00 00 00 
  800420bb8b:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bb92:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bb95:	83 ca 0e             	or     $0xe,%edx
  800420bb98:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bb9e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bba5:	00 00 00 
  800420bba8:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bbaf:	83 e2 ef             	and    $0xffffffef,%edx
  800420bbb2:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bbb8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbbf:	00 00 00 
  800420bbc2:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bbc9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bbcc:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bbd2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbd9:	00 00 00 
  800420bbdc:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bbe3:	83 ca 80             	or     $0xffffff80,%edx
  800420bbe6:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bbec:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420bbf3:	00 00 00 
  800420bbf6:	48 c1 e8 10          	shr    $0x10,%rax
  800420bbfa:	89 c2                	mov    %eax,%edx
  800420bbfc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc03:	00 00 00 
  800420bc06:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420bc0d:	48 b8 4a d1 20 04 80 	movabs $0x800420d14a,%rax
  800420bc14:	00 00 00 
  800420bc17:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc1b:	89 c2                	mov    %eax,%edx
  800420bc1d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc24:	00 00 00 
  800420bc27:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420bc2d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc34:	00 00 00 
  800420bc37:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420bc3e:	00 00 00 
  800420bc41:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420bc48:	00 00 00 
  800420bc4b:	89 c2                	mov    %eax,%edx
  800420bc4d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc54:	00 00 00 
  800420bc57:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420bc5e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc65:	00 00 00 
  800420bc68:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420bc6f:	08 00 
  800420bc71:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc78:	00 00 00 
  800420bc7b:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bc82:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bc85:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bc8b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc92:	00 00 00 
  800420bc95:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bc9c:	83 e2 07             	and    $0x7,%edx
  800420bc9f:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bca5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcac:	00 00 00 
  800420bcaf:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bcb6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bcb9:	83 ca 0e             	or     $0xe,%edx
  800420bcbc:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bcc2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcc9:	00 00 00 
  800420bccc:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bcd3:	83 e2 ef             	and    $0xffffffef,%edx
  800420bcd6:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bcdc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bce3:	00 00 00 
  800420bce6:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bced:	83 ca 60             	or     $0x60,%edx
  800420bcf0:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bcf6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcfd:	00 00 00 
  800420bd00:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd07:	83 ca 80             	or     $0xffffff80,%edx
  800420bd0a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd10:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420bd17:	00 00 00 
  800420bd1a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd1e:	89 c2                	mov    %eax,%edx
  800420bd20:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd27:	00 00 00 
  800420bd2a:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420bd31:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420bd38:	00 00 00 
  800420bd3b:	48 c1 e8 20          	shr    $0x20,%rax
  800420bd3f:	89 c2                	mov    %eax,%edx
  800420bd41:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd48:	00 00 00 
  800420bd4b:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420bd51:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd58:	00 00 00 
  800420bd5b:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420bd62:	00 00 00 
  800420bd65:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420bd6c:	00 00 00 
  800420bd6f:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420bd74:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420bd7b:	00 00 00 
  800420bd7e:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420bd85:	00 00 00 
  800420bd88:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420bd8c:	48 b8 9a bd 20 04 80 	movabs $0x800420bd9a,%rax
  800420bd93:	00 00 00 
  800420bd96:	ff d0                	callq  *%rax
  800420bd98:	c9                   	leaveq 
  800420bd99:	c3                   	retq   

000000800420bd9a <trap_init_percpu>:
  800420bd9a:	55                   	push   %rbp
  800420bd9b:	48 89 e5             	mov    %rsp,%rbp
  800420bd9e:	53                   	push   %rbx
  800420bd9f:	48 83 ec 18          	sub    $0x18,%rsp
  800420bda3:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bdaa:	00 00 00 
  800420bdad:	ff d0                	callq  *%rax
  800420bdaf:	01 c0                	add    %eax,%eax
  800420bdb1:	83 c0 05             	add    $0x5,%eax
  800420bdb4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420bdb7:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bdbe:	00 00 00 
  800420bdc1:	ff d0                	callq  *%rax
  800420bdc3:	89 c3                	mov    %eax,%ebx
  800420bdc5:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bdcc:	00 00 00 
  800420bdcf:	ff d0                	callq  *%rax
  800420bdd1:	89 c2                	mov    %eax,%edx
  800420bdd3:	89 d0                	mov    %edx,%eax
  800420bdd5:	01 c0                	add    %eax,%eax
  800420bdd7:	01 d0                	add    %edx,%eax
  800420bdd9:	c1 e0 0f             	shl    $0xf,%eax
  800420bddc:	48 98                	cltq   
  800420bdde:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420bde5:	00 00 00 
  800420bde8:	48 29 c2             	sub    %rax,%rdx
  800420bdeb:	48 89 d0             	mov    %rdx,%rax
  800420bdee:	48 89 c2             	mov    %rax,%rdx
  800420bdf1:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  800420bdf8:	00 00 00 
  800420bdfb:	48 63 c3             	movslq %ebx,%rax
  800420bdfe:	48 c1 e0 03          	shl    $0x3,%rax
  800420be02:	48 89 c6             	mov    %rax,%rsi
  800420be05:	48 c1 e6 04          	shl    $0x4,%rsi
  800420be09:	48 01 f0             	add    %rsi,%rax
  800420be0c:	48 01 c8             	add    %rcx,%rax
  800420be0f:	48 83 c0 10          	add    $0x10,%rax
  800420be13:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420be17:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420be1e:	00 00 00 
  800420be21:	48 8b 00             	mov    (%rax),%rax
  800420be24:	48 c1 f8 10          	sar    $0x10,%rax
  800420be28:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420be2c:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420be33:	00 00 00 
  800420be36:	ff d0                	callq  *%rax
  800420be38:	c1 e0 04             	shl    $0x4,%eax
  800420be3b:	48 98                	cltq   
  800420be3d:	48 01 d8             	add    %rbx,%rax
  800420be40:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420be45:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420be4c:	00 00 00 
  800420be4f:	48 8b 00             	mov    (%rax),%rax
  800420be52:	48 c1 f8 10          	sar    $0x10,%rax
  800420be56:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420be5a:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420be61:	00 00 00 
  800420be64:	ff d0                	callq  *%rax
  800420be66:	c1 e0 04             	shl    $0x4,%eax
  800420be69:	48 98                	cltq   
  800420be6b:	48 01 d8             	add    %rbx,%rax
  800420be6e:	48 89 c3             	mov    %rax,%rbx
  800420be71:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420be78:	00 00 00 
  800420be7b:	ff d0                	callq  *%rax
  800420be7d:	48 98                	cltq   
  800420be7f:	48 c1 e0 03          	shl    $0x3,%rax
  800420be83:	48 89 c2             	mov    %rax,%rdx
  800420be86:	48 c1 e2 04          	shl    $0x4,%rdx
  800420be8a:	48 01 d0             	add    %rdx,%rax
  800420be8d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420be91:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420be98:	00 00 00 
  800420be9b:	48 01 d0             	add    %rdx,%rax
  800420be9e:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420bea2:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bea9:	00 00 00 
  800420beac:	48 8b 00             	mov    (%rax),%rax
  800420beaf:	48 c1 f8 10          	sar    $0x10,%rax
  800420beb3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420beb7:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bebe:	00 00 00 
  800420bec1:	ff d0                	callq  *%rax
  800420bec3:	c1 e0 04             	shl    $0x4,%eax
  800420bec6:	48 98                	cltq   
  800420bec8:	48 01 d8             	add    %rbx,%rax
  800420becb:	48 89 c3             	mov    %rax,%rbx
  800420bece:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bed5:	00 00 00 
  800420bed8:	ff d0                	callq  *%rax
  800420beda:	48 98                	cltq   
  800420bedc:	48 c1 e0 03          	shl    $0x3,%rax
  800420bee0:	48 89 c2             	mov    %rax,%rdx
  800420bee3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bee7:	48 01 d0             	add    %rdx,%rax
  800420beea:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420beee:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420bef5:	00 00 00 
  800420bef8:	48 01 d0             	add    %rdx,%rax
  800420befb:	48 c1 e8 10          	shr    $0x10,%rax
  800420beff:	88 43 04             	mov    %al,0x4(%rbx)
  800420bf02:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf09:	00 00 00 
  800420bf0c:	48 8b 00             	mov    (%rax),%rax
  800420bf0f:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf13:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf17:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bf1e:	00 00 00 
  800420bf21:	ff d0                	callq  *%rax
  800420bf23:	c1 e0 04             	shl    $0x4,%eax
  800420bf26:	48 98                	cltq   
  800420bf28:	48 01 d8             	add    %rbx,%rax
  800420bf2b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bf2f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf32:	83 ca 09             	or     $0x9,%edx
  800420bf35:	88 50 05             	mov    %dl,0x5(%rax)
  800420bf38:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf3f:	00 00 00 
  800420bf42:	48 8b 00             	mov    (%rax),%rax
  800420bf45:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf49:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf4d:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bf54:	00 00 00 
  800420bf57:	ff d0                	callq  *%rax
  800420bf59:	c1 e0 04             	shl    $0x4,%eax
  800420bf5c:	48 98                	cltq   
  800420bf5e:	48 01 d8             	add    %rbx,%rax
  800420bf61:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bf65:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf68:	88 50 05             	mov    %dl,0x5(%rax)
  800420bf6b:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf72:	00 00 00 
  800420bf75:	48 8b 00             	mov    (%rax),%rax
  800420bf78:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf7c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf80:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bf87:	00 00 00 
  800420bf8a:	ff d0                	callq  *%rax
  800420bf8c:	c1 e0 04             	shl    $0x4,%eax
  800420bf8f:	48 98                	cltq   
  800420bf91:	48 01 d8             	add    %rbx,%rax
  800420bf94:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bf98:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bf9b:	88 50 05             	mov    %dl,0x5(%rax)
  800420bf9e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfa5:	00 00 00 
  800420bfa8:	48 8b 00             	mov    (%rax),%rax
  800420bfab:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfaf:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfb3:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bfba:	00 00 00 
  800420bfbd:	ff d0                	callq  *%rax
  800420bfbf:	c1 e0 04             	shl    $0x4,%eax
  800420bfc2:	48 98                	cltq   
  800420bfc4:	48 01 d8             	add    %rbx,%rax
  800420bfc7:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bfcb:	83 ca 80             	or     $0xffffff80,%edx
  800420bfce:	88 50 05             	mov    %dl,0x5(%rax)
  800420bfd1:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfd8:	00 00 00 
  800420bfdb:	48 8b 00             	mov    (%rax),%rax
  800420bfde:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfe2:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfe6:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420bfed:	00 00 00 
  800420bff0:	ff d0                	callq  *%rax
  800420bff2:	c1 e0 04             	shl    $0x4,%eax
  800420bff5:	48 98                	cltq   
  800420bff7:	48 01 d8             	add    %rbx,%rax
  800420bffa:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420bffe:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c001:	88 50 06             	mov    %dl,0x6(%rax)
  800420c004:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c00b:	00 00 00 
  800420c00e:	48 8b 00             	mov    (%rax),%rax
  800420c011:	48 c1 f8 10          	sar    $0x10,%rax
  800420c015:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c019:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c020:	00 00 00 
  800420c023:	ff d0                	callq  *%rax
  800420c025:	c1 e0 04             	shl    $0x4,%eax
  800420c028:	48 98                	cltq   
  800420c02a:	48 01 d8             	add    %rbx,%rax
  800420c02d:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c031:	83 e2 ef             	and    $0xffffffef,%edx
  800420c034:	88 50 06             	mov    %dl,0x6(%rax)
  800420c037:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c03e:	00 00 00 
  800420c041:	48 8b 00             	mov    (%rax),%rax
  800420c044:	48 c1 f8 10          	sar    $0x10,%rax
  800420c048:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c04c:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c053:	00 00 00 
  800420c056:	ff d0                	callq  *%rax
  800420c058:	c1 e0 04             	shl    $0x4,%eax
  800420c05b:	48 98                	cltq   
  800420c05d:	48 01 d8             	add    %rbx,%rax
  800420c060:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c064:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c067:	88 50 06             	mov    %dl,0x6(%rax)
  800420c06a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c071:	00 00 00 
  800420c074:	48 8b 00             	mov    (%rax),%rax
  800420c077:	48 c1 f8 10          	sar    $0x10,%rax
  800420c07b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c07f:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c086:	00 00 00 
  800420c089:	ff d0                	callq  *%rax
  800420c08b:	c1 e0 04             	shl    $0x4,%eax
  800420c08e:	48 98                	cltq   
  800420c090:	48 01 d8             	add    %rbx,%rax
  800420c093:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c097:	83 e2 7f             	and    $0x7f,%edx
  800420c09a:	88 50 06             	mov    %dl,0x6(%rax)
  800420c09d:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0a4:	00 00 00 
  800420c0a7:	48 8b 00             	mov    (%rax),%rax
  800420c0aa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0ae:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0b2:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c0b9:	00 00 00 
  800420c0bc:	ff d0                	callq  *%rax
  800420c0be:	c1 e0 04             	shl    $0x4,%eax
  800420c0c1:	48 98                	cltq   
  800420c0c3:	48 01 d8             	add    %rbx,%rax
  800420c0c6:	48 89 c3             	mov    %rax,%rbx
  800420c0c9:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c0d0:	00 00 00 
  800420c0d3:	ff d0                	callq  *%rax
  800420c0d5:	48 98                	cltq   
  800420c0d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c0db:	48 89 c2             	mov    %rax,%rdx
  800420c0de:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c0e2:	48 01 d0             	add    %rdx,%rax
  800420c0e5:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c0e9:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c0f0:	00 00 00 
  800420c0f3:	48 01 d0             	add    %rdx,%rax
  800420c0f6:	48 c1 e8 18          	shr    $0x18,%rax
  800420c0fa:	88 43 07             	mov    %al,0x7(%rbx)
  800420c0fd:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c104:	00 00 00 
  800420c107:	48 8b 00             	mov    (%rax),%rax
  800420c10a:	48 c1 f8 10          	sar    $0x10,%rax
  800420c10e:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c112:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c119:	00 00 00 
  800420c11c:	ff d0                	callq  *%rax
  800420c11e:	c1 e0 04             	shl    $0x4,%eax
  800420c121:	48 98                	cltq   
  800420c123:	48 01 d8             	add    %rbx,%rax
  800420c126:	48 89 c3             	mov    %rax,%rbx
  800420c129:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c130:	00 00 00 
  800420c133:	ff d0                	callq  *%rax
  800420c135:	48 98                	cltq   
  800420c137:	48 c1 e0 03          	shl    $0x3,%rax
  800420c13b:	48 89 c2             	mov    %rax,%rdx
  800420c13e:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c142:	48 01 d0             	add    %rdx,%rax
  800420c145:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c149:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c150:	00 00 00 
  800420c153:	48 01 d0             	add    %rdx,%rax
  800420c156:	48 c1 e8 20          	shr    $0x20,%rax
  800420c15a:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c15d:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c164:	00 00 00 
  800420c167:	48 8b 00             	mov    (%rax),%rax
  800420c16a:	48 c1 f8 10          	sar    $0x10,%rax
  800420c16e:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c172:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c179:	00 00 00 
  800420c17c:	ff d0                	callq  *%rax
  800420c17e:	c1 e0 04             	shl    $0x4,%eax
  800420c181:	48 98                	cltq   
  800420c183:	48 01 d8             	add    %rbx,%rax
  800420c186:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c18a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c191:	00 00 00 
  800420c194:	48 8b 00             	mov    (%rax),%rax
  800420c197:	48 c1 f8 10          	sar    $0x10,%rax
  800420c19b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c19f:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c1a6:	00 00 00 
  800420c1a9:	ff d0                	callq  *%rax
  800420c1ab:	c1 e0 04             	shl    $0x4,%eax
  800420c1ae:	48 98                	cltq   
  800420c1b0:	48 01 d8             	add    %rbx,%rax
  800420c1b3:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c1b7:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1be:	00 00 00 
  800420c1c1:	48 8b 00             	mov    (%rax),%rax
  800420c1c4:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1c8:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c1cc:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c1d3:	00 00 00 
  800420c1d6:	ff d0                	callq  *%rax
  800420c1d8:	c1 e0 04             	shl    $0x4,%eax
  800420c1db:	48 98                	cltq   
  800420c1dd:	48 01 d8             	add    %rbx,%rax
  800420c1e0:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c1e6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c1e9:	c1 e0 03             	shl    $0x3,%eax
  800420c1ec:	0f b7 c0             	movzwl %ax,%eax
  800420c1ef:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c1f3:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c1f7:	0f 00 d8             	ltr    %ax
  800420c1fa:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420c201:	00 00 00 
  800420c204:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c208:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c20c:	0f 01 18             	lidt   (%rax)
  800420c20f:	48 83 c4 18          	add    $0x18,%rsp
  800420c213:	5b                   	pop    %rbx
  800420c214:	5d                   	pop    %rbp
  800420c215:	c3                   	retq   

000000800420c216 <print_trapframe>:
  800420c216:	55                   	push   %rbp
  800420c217:	48 89 e5             	mov    %rsp,%rbp
  800420c21a:	48 83 ec 20          	sub    $0x20,%rsp
  800420c21e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c222:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c229:	00 00 00 
  800420c22c:	ff d0                	callq  *%rax
  800420c22e:	89 c2                	mov    %eax,%edx
  800420c230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c234:	48 89 c6             	mov    %rax,%rsi
  800420c237:	48 bf ae 9d 21 04 80 	movabs $0x8004219dae,%rdi
  800420c23e:	00 00 00 
  800420c241:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c246:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420c24d:	00 00 00 
  800420c250:	ff d1                	callq  *%rcx
  800420c252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c256:	48 89 c7             	mov    %rax,%rdi
  800420c259:	48 b8 27 c5 20 04 80 	movabs $0x800420c527,%rax
  800420c260:	00 00 00 
  800420c263:	ff d0                	callq  *%rax
  800420c265:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c269:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c26d:	0f b7 c0             	movzwl %ax,%eax
  800420c270:	89 c6                	mov    %eax,%esi
  800420c272:	48 bf cc 9d 21 04 80 	movabs $0x8004219dcc,%rdi
  800420c279:	00 00 00 
  800420c27c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c281:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c288:	00 00 00 
  800420c28b:	ff d2                	callq  *%rdx
  800420c28d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c291:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c298:	0f b7 c0             	movzwl %ax,%eax
  800420c29b:	89 c6                	mov    %eax,%esi
  800420c29d:	48 bf df 9d 21 04 80 	movabs $0x8004219ddf,%rdi
  800420c2a4:	00 00 00 
  800420c2a7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2ac:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c2b3:	00 00 00 
  800420c2b6:	ff d2                	callq  *%rdx
  800420c2b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2bc:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c2c3:	89 c7                	mov    %eax,%edi
  800420c2c5:	48 b8 38 96 20 04 80 	movabs $0x8004209638,%rax
  800420c2cc:	00 00 00 
  800420c2cf:	ff d0                	callq  *%rax
  800420c2d1:	48 89 c2             	mov    %rax,%rdx
  800420c2d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2d8:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c2df:	48 89 c6             	mov    %rax,%rsi
  800420c2e2:	48 bf f2 9d 21 04 80 	movabs $0x8004219df2,%rdi
  800420c2e9:	00 00 00 
  800420c2ec:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2f1:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420c2f8:	00 00 00 
  800420c2fb:	ff d1                	callq  *%rcx
  800420c2fd:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420c304:	00 00 00 
  800420c307:	48 8b 00             	mov    (%rax),%rax
  800420c30a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420c30e:	75 3a                	jne    800420c34a <print_trapframe+0x134>
  800420c310:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c314:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c31b:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c31f:	75 29                	jne    800420c34a <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420c321:	0f 20 d0             	mov    %cr2,%rax
  800420c324:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420c328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c32c:	48 89 c6             	mov    %rax,%rsi
  800420c32f:	48 bf 04 9e 21 04 80 	movabs $0x8004219e04,%rdi
  800420c336:	00 00 00 
  800420c339:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c33e:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c345:	00 00 00 
  800420c348:	ff d2                	callq  *%rdx
  800420c34a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c34e:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c355:	48 89 c6             	mov    %rax,%rsi
  800420c358:	48 bf 13 9e 21 04 80 	movabs $0x8004219e13,%rdi
  800420c35f:	00 00 00 
  800420c362:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c367:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c36e:	00 00 00 
  800420c371:	ff d2                	callq  *%rdx
  800420c373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c377:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c37e:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c382:	0f 85 9c 00 00 00    	jne    800420c424 <print_trapframe+0x20e>
  800420c388:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c38c:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c393:	83 e0 01             	and    $0x1,%eax
  800420c396:	48 85 c0             	test   %rax,%rax
  800420c399:	74 0c                	je     800420c3a7 <print_trapframe+0x191>
  800420c39b:	48 b9 21 9e 21 04 80 	movabs $0x8004219e21,%rcx
  800420c3a2:	00 00 00 
  800420c3a5:	eb 0a                	jmp    800420c3b1 <print_trapframe+0x19b>
  800420c3a7:	48 b9 2c 9e 21 04 80 	movabs $0x8004219e2c,%rcx
  800420c3ae:	00 00 00 
  800420c3b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3b5:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3bc:	83 e0 02             	and    $0x2,%eax
  800420c3bf:	48 85 c0             	test   %rax,%rax
  800420c3c2:	74 0c                	je     800420c3d0 <print_trapframe+0x1ba>
  800420c3c4:	48 ba 38 9e 21 04 80 	movabs $0x8004219e38,%rdx
  800420c3cb:	00 00 00 
  800420c3ce:	eb 0a                	jmp    800420c3da <print_trapframe+0x1c4>
  800420c3d0:	48 ba 3e 9e 21 04 80 	movabs $0x8004219e3e,%rdx
  800420c3d7:	00 00 00 
  800420c3da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3de:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3e5:	83 e0 04             	and    $0x4,%eax
  800420c3e8:	48 85 c0             	test   %rax,%rax
  800420c3eb:	74 0c                	je     800420c3f9 <print_trapframe+0x1e3>
  800420c3ed:	48 b8 43 9e 21 04 80 	movabs $0x8004219e43,%rax
  800420c3f4:	00 00 00 
  800420c3f7:	eb 0a                	jmp    800420c403 <print_trapframe+0x1ed>
  800420c3f9:	48 b8 48 9e 21 04 80 	movabs $0x8004219e48,%rax
  800420c400:	00 00 00 
  800420c403:	48 89 c6             	mov    %rax,%rsi
  800420c406:	48 bf 4f 9e 21 04 80 	movabs $0x8004219e4f,%rdi
  800420c40d:	00 00 00 
  800420c410:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c415:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  800420c41c:	00 00 00 
  800420c41f:	41 ff d0             	callq  *%r8
  800420c422:	eb 1b                	jmp    800420c43f <print_trapframe+0x229>
  800420c424:	48 bf 5e 9e 21 04 80 	movabs $0x8004219e5e,%rdi
  800420c42b:	00 00 00 
  800420c42e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c433:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c43a:	00 00 00 
  800420c43d:	ff d2                	callq  *%rdx
  800420c43f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c443:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420c44a:	48 89 c6             	mov    %rax,%rsi
  800420c44d:	48 bf 60 9e 21 04 80 	movabs $0x8004219e60,%rdi
  800420c454:	00 00 00 
  800420c457:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c45c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c463:	00 00 00 
  800420c466:	ff d2                	callq  *%rdx
  800420c468:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c46c:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c473:	0f b7 c0             	movzwl %ax,%eax
  800420c476:	89 c6                	mov    %eax,%esi
  800420c478:	48 bf 6f 9e 21 04 80 	movabs $0x8004219e6f,%rdi
  800420c47f:	00 00 00 
  800420c482:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c487:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c48e:	00 00 00 
  800420c491:	ff d2                	callq  *%rdx
  800420c493:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c497:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420c49e:	48 89 c6             	mov    %rax,%rsi
  800420c4a1:	48 bf 82 9e 21 04 80 	movabs $0x8004219e82,%rdi
  800420c4a8:	00 00 00 
  800420c4ab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4b0:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c4b7:	00 00 00 
  800420c4ba:	ff d2                	callq  *%rdx
  800420c4bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4c0:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c4c7:	0f b7 c0             	movzwl %ax,%eax
  800420c4ca:	83 e0 03             	and    $0x3,%eax
  800420c4cd:	85 c0                	test   %eax,%eax
  800420c4cf:	74 54                	je     800420c525 <print_trapframe+0x30f>
  800420c4d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4d5:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420c4dc:	48 89 c6             	mov    %rax,%rsi
  800420c4df:	48 bf 91 9e 21 04 80 	movabs $0x8004219e91,%rdi
  800420c4e6:	00 00 00 
  800420c4e9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4ee:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c4f5:	00 00 00 
  800420c4f8:	ff d2                	callq  *%rdx
  800420c4fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4fe:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420c505:	0f b7 c0             	movzwl %ax,%eax
  800420c508:	89 c6                	mov    %eax,%esi
  800420c50a:	48 bf a0 9e 21 04 80 	movabs $0x8004219ea0,%rdi
  800420c511:	00 00 00 
  800420c514:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c519:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c520:	00 00 00 
  800420c523:	ff d2                	callq  *%rdx
  800420c525:	c9                   	leaveq 
  800420c526:	c3                   	retq   

000000800420c527 <print_regs>:
  800420c527:	55                   	push   %rbp
  800420c528:	48 89 e5             	mov    %rsp,%rbp
  800420c52b:	48 83 ec 10          	sub    $0x10,%rsp
  800420c52f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c537:	48 8b 00             	mov    (%rax),%rax
  800420c53a:	48 89 c6             	mov    %rax,%rsi
  800420c53d:	48 bf b3 9e 21 04 80 	movabs $0x8004219eb3,%rdi
  800420c544:	00 00 00 
  800420c547:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c54c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c553:	00 00 00 
  800420c556:	ff d2                	callq  *%rdx
  800420c558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c55c:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c560:	48 89 c6             	mov    %rax,%rsi
  800420c563:	48 bf c2 9e 21 04 80 	movabs $0x8004219ec2,%rdi
  800420c56a:	00 00 00 
  800420c56d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c572:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c579:	00 00 00 
  800420c57c:	ff d2                	callq  *%rdx
  800420c57e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c582:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c586:	48 89 c6             	mov    %rax,%rsi
  800420c589:	48 bf d1 9e 21 04 80 	movabs $0x8004219ed1,%rdi
  800420c590:	00 00 00 
  800420c593:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c598:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c59f:	00 00 00 
  800420c5a2:	ff d2                	callq  *%rdx
  800420c5a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5a8:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c5ac:	48 89 c6             	mov    %rax,%rsi
  800420c5af:	48 bf e0 9e 21 04 80 	movabs $0x8004219ee0,%rdi
  800420c5b6:	00 00 00 
  800420c5b9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5be:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c5c5:	00 00 00 
  800420c5c8:	ff d2                	callq  *%rdx
  800420c5ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5ce:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420c5d2:	48 89 c6             	mov    %rax,%rsi
  800420c5d5:	48 bf ef 9e 21 04 80 	movabs $0x8004219eef,%rdi
  800420c5dc:	00 00 00 
  800420c5df:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5e4:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c5eb:	00 00 00 
  800420c5ee:	ff d2                	callq  *%rdx
  800420c5f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5f4:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c5f8:	48 89 c6             	mov    %rax,%rsi
  800420c5fb:	48 bf fe 9e 21 04 80 	movabs $0x8004219efe,%rdi
  800420c602:	00 00 00 
  800420c605:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c60a:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c611:	00 00 00 
  800420c614:	ff d2                	callq  *%rdx
  800420c616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c61a:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420c61e:	48 89 c6             	mov    %rax,%rsi
  800420c621:	48 bf 0d 9f 21 04 80 	movabs $0x8004219f0d,%rdi
  800420c628:	00 00 00 
  800420c62b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c630:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c637:	00 00 00 
  800420c63a:	ff d2                	callq  *%rdx
  800420c63c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c640:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420c644:	48 89 c6             	mov    %rax,%rsi
  800420c647:	48 bf 1b 9f 21 04 80 	movabs $0x8004219f1b,%rdi
  800420c64e:	00 00 00 
  800420c651:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c656:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c65d:	00 00 00 
  800420c660:	ff d2                	callq  *%rdx
  800420c662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c666:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420c66a:	48 89 c6             	mov    %rax,%rsi
  800420c66d:	48 bf 29 9f 21 04 80 	movabs $0x8004219f29,%rdi
  800420c674:	00 00 00 
  800420c677:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c67c:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c683:	00 00 00 
  800420c686:	ff d2                	callq  *%rdx
  800420c688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c68c:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420c690:	48 89 c6             	mov    %rax,%rsi
  800420c693:	48 bf 38 9f 21 04 80 	movabs $0x8004219f38,%rdi
  800420c69a:	00 00 00 
  800420c69d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6a2:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c6a9:	00 00 00 
  800420c6ac:	ff d2                	callq  *%rdx
  800420c6ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6b2:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420c6b6:	48 89 c6             	mov    %rax,%rsi
  800420c6b9:	48 bf 47 9f 21 04 80 	movabs $0x8004219f47,%rdi
  800420c6c0:	00 00 00 
  800420c6c3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6c8:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c6cf:	00 00 00 
  800420c6d2:	ff d2                	callq  *%rdx
  800420c6d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6d8:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420c6dc:	48 89 c6             	mov    %rax,%rsi
  800420c6df:	48 bf 56 9f 21 04 80 	movabs $0x8004219f56,%rdi
  800420c6e6:	00 00 00 
  800420c6e9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6ee:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c6f5:	00 00 00 
  800420c6f8:	ff d2                	callq  *%rdx
  800420c6fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6fe:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420c702:	48 89 c6             	mov    %rax,%rsi
  800420c705:	48 bf 65 9f 21 04 80 	movabs $0x8004219f65,%rdi
  800420c70c:	00 00 00 
  800420c70f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c714:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c71b:	00 00 00 
  800420c71e:	ff d2                	callq  *%rdx
  800420c720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c724:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420c728:	48 89 c6             	mov    %rax,%rsi
  800420c72b:	48 bf 74 9f 21 04 80 	movabs $0x8004219f74,%rdi
  800420c732:	00 00 00 
  800420c735:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c73a:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c741:	00 00 00 
  800420c744:	ff d2                	callq  *%rdx
  800420c746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c74a:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c74e:	48 89 c6             	mov    %rax,%rsi
  800420c751:	48 bf 83 9f 21 04 80 	movabs $0x8004219f83,%rdi
  800420c758:	00 00 00 
  800420c75b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c760:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c767:	00 00 00 
  800420c76a:	ff d2                	callq  *%rdx
  800420c76c:	c9                   	leaveq 
  800420c76d:	c3                   	retq   

000000800420c76e <trap_dispatch>:
  800420c76e:	55                   	push   %rbp
  800420c76f:	48 89 e5             	mov    %rsp,%rbp
  800420c772:	48 83 ec 20          	sub    $0x20,%rsp
  800420c776:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c77a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c77e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c785:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c789:	75 18                	jne    800420c7a3 <trap_dispatch+0x35>
  800420c78b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c78f:	48 89 c7             	mov    %rax,%rdi
  800420c792:	48 b8 eb cc 20 04 80 	movabs $0x800420cceb,%rax
  800420c799:	00 00 00 
  800420c79c:	ff d0                	callq  *%rax
  800420c79e:	e9 e9 01 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c7a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7a7:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c7ae:	48 83 f8 30          	cmp    $0x30,%rax
  800420c7b2:	75 55                	jne    800420c809 <trap_dispatch+0x9b>
  800420c7b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7b8:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420c7bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7c0:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420c7c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7c8:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420c7cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7d0:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420c7d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7d8:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420c7dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c7e0:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c7e4:	4d 89 c1             	mov    %r8,%r9
  800420c7e7:	49 89 f8             	mov    %rdi,%r8
  800420c7ea:	48 89 c7             	mov    %rax,%rdi
  800420c7ed:	48 b8 35 e2 20 04 80 	movabs $0x800420e235,%rax
  800420c7f4:	00 00 00 
  800420c7f7:	ff d0                	callq  *%rax
  800420c7f9:	48 89 c2             	mov    %rax,%rdx
  800420c7fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c800:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420c804:	e9 83 01 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c809:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c80d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c814:	48 83 f8 03          	cmp    $0x3,%rax
  800420c818:	75 18                	jne    800420c832 <trap_dispatch+0xc4>
  800420c81a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c81e:	48 89 c7             	mov    %rax,%rdi
  800420c821:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420c828:	00 00 00 
  800420c82b:	ff d0                	callq  *%rax
  800420c82d:	e9 5a 01 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c832:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c836:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c83d:	48 83 f8 27          	cmp    $0x27,%rax
  800420c841:	75 33                	jne    800420c876 <trap_dispatch+0x108>
  800420c843:	48 bf 92 9f 21 04 80 	movabs $0x8004219f92,%rdi
  800420c84a:	00 00 00 
  800420c84d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c852:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420c859:	00 00 00 
  800420c85c:	ff d2                	callq  *%rdx
  800420c85e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c862:	48 89 c7             	mov    %rax,%rdi
  800420c865:	48 b8 16 c2 20 04 80 	movabs $0x800420c216,%rax
  800420c86c:	00 00 00 
  800420c86f:	ff d0                	callq  *%rax
  800420c871:	e9 16 01 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c876:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c87a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c881:	48 83 f8 20          	cmp    $0x20,%rax
  800420c885:	75 33                	jne    800420c8ba <trap_dispatch+0x14c>
  800420c887:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c88e:	00 00 00 
  800420c891:	ff d0                	callq  *%rax
  800420c893:	85 c0                	test   %eax,%eax
  800420c895:	75 0c                	jne    800420c8a3 <trap_dispatch+0x135>
  800420c897:	48 b8 ae 87 21 04 80 	movabs $0x80042187ae,%rax
  800420c89e:	00 00 00 
  800420c8a1:	ff d0                	callq  *%rax
  800420c8a3:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c8a8:	0f 01 c1             	vmcall 
  800420c8ab:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420c8ae:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  800420c8b5:	00 00 00 
  800420c8b8:	ff d0                	callq  *%rax
  800420c8ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8be:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8c5:	48 83 f8 21          	cmp    $0x21,%rax
  800420c8c9:	75 11                	jne    800420c8dc <trap_dispatch+0x16e>
  800420c8cb:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420c8d2:	00 00 00 
  800420c8d5:	ff d0                	callq  *%rax
  800420c8d7:	e9 b0 00 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c8dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8e0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8e7:	48 83 f8 24          	cmp    $0x24,%rax
  800420c8eb:	75 11                	jne    800420c8fe <trap_dispatch+0x190>
  800420c8ed:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  800420c8f4:	00 00 00 
  800420c8f7:	ff d0                	callq  *%rax
  800420c8f9:	e9 8e 00 00 00       	jmpq   800420c98c <trap_dispatch+0x21e>
  800420c8fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c902:	48 89 c7             	mov    %rax,%rdi
  800420c905:	48 b8 16 c2 20 04 80 	movabs $0x800420c216,%rax
  800420c90c:	00 00 00 
  800420c90f:	ff d0                	callq  *%rax
  800420c911:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c915:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c91c:	66 83 f8 08          	cmp    $0x8,%ax
  800420c920:	75 2a                	jne    800420c94c <trap_dispatch+0x1de>
  800420c922:	48 ba af 9f 21 04 80 	movabs $0x8004219faf,%rdx
  800420c929:	00 00 00 
  800420c92c:	be 77 01 00 00       	mov    $0x177,%esi
  800420c931:	48 bf c8 9f 21 04 80 	movabs $0x8004219fc8,%rdi
  800420c938:	00 00 00 
  800420c93b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c940:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420c947:	00 00 00 
  800420c94a:	ff d1                	callq  *%rcx
  800420c94c:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c953:	00 00 00 
  800420c956:	ff d0                	callq  *%rax
  800420c958:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420c95f:	00 00 00 
  800420c962:	48 98                	cltq   
  800420c964:	48 c1 e0 03          	shl    $0x3,%rax
  800420c968:	48 89 c1             	mov    %rax,%rcx
  800420c96b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420c96f:	48 01 c8             	add    %rcx,%rax
  800420c972:	48 01 d0             	add    %rdx,%rax
  800420c975:	48 83 c0 08          	add    $0x8,%rax
  800420c979:	48 8b 00             	mov    (%rax),%rax
  800420c97c:	48 89 c7             	mov    %rax,%rdi
  800420c97f:	48 b8 1e 8e 20 04 80 	movabs $0x8004208e1e,%rax
  800420c986:	00 00 00 
  800420c989:	ff d0                	callq  *%rax
  800420c98b:	90                   	nop
  800420c98c:	c9                   	leaveq 
  800420c98d:	c3                   	retq   

000000800420c98e <trap>:
  800420c98e:	55                   	push   %rbp
  800420c98f:	48 89 e5             	mov    %rsp,%rbp
  800420c992:	48 83 ec 20          	sub    $0x20,%rsp
  800420c996:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c99a:	fc                   	cld    
  800420c99b:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420c9a2:	00 00 00 
  800420c9a5:	48 8b 00             	mov    (%rax),%rax
  800420c9a8:	48 85 c0             	test   %rax,%rax
  800420c9ab:	74 01                	je     800420c9ae <trap+0x20>
  800420c9ad:	f4                   	hlt    
  800420c9ae:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420c9b5:	00 00 00 
  800420c9b8:	ff d0                	callq  *%rax
  800420c9ba:	48 98                	cltq   
  800420c9bc:	48 c1 e0 03          	shl    $0x3,%rax
  800420c9c0:	48 89 c2             	mov    %rax,%rdx
  800420c9c3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c9c7:	48 01 d0             	add    %rdx,%rax
  800420c9ca:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420c9d1:	00 00 00 
  800420c9d4:	48 01 d0             	add    %rdx,%rax
  800420c9d7:	48 83 c0 04          	add    $0x4,%rax
  800420c9db:	be 01 00 00 00       	mov    $0x1,%esi
  800420c9e0:	48 89 c7             	mov    %rax,%rdi
  800420c9e3:	48 b8 f7 95 20 04 80 	movabs $0x80042095f7,%rax
  800420c9ea:	00 00 00 
  800420c9ed:	ff d0                	callq  *%rax
  800420c9ef:	83 f8 02             	cmp    $0x2,%eax
  800420c9f2:	75 0c                	jne    800420ca00 <trap+0x72>
  800420c9f4:	48 b8 1c 96 20 04 80 	movabs $0x800420961c,%rax
  800420c9fb:	00 00 00 
  800420c9fe:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420ca00:	9c                   	pushfq 
  800420ca01:	58                   	pop    %rax
  800420ca02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420ca06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca0a:	25 00 02 00 00       	and    $0x200,%eax
  800420ca0f:	48 85 c0             	test   %rax,%rax
  800420ca12:	74 35                	je     800420ca49 <trap+0xbb>
  800420ca14:	48 b9 d7 9f 21 04 80 	movabs $0x8004219fd7,%rcx
  800420ca1b:	00 00 00 
  800420ca1e:	48 ba f0 9f 21 04 80 	movabs $0x8004219ff0,%rdx
  800420ca25:	00 00 00 
  800420ca28:	be 94 01 00 00       	mov    $0x194,%esi
  800420ca2d:	48 bf c8 9f 21 04 80 	movabs $0x8004219fc8,%rdi
  800420ca34:	00 00 00 
  800420ca37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca3c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420ca43:	00 00 00 
  800420ca46:	41 ff d0             	callq  *%r8
  800420ca49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca4d:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420ca54:	0f b7 c0             	movzwl %ax,%eax
  800420ca57:	83 e0 03             	and    $0x3,%eax
  800420ca5a:	83 f8 03             	cmp    $0x3,%eax
  800420ca5d:	0f 85 a9 01 00 00    	jne    800420cc0c <trap+0x27e>
  800420ca63:	48 b8 1c 96 20 04 80 	movabs $0x800420961c,%rax
  800420ca6a:	00 00 00 
  800420ca6d:	ff d0                	callq  *%rax
  800420ca6f:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ca76:	00 00 00 
  800420ca79:	ff d0                	callq  *%rax
  800420ca7b:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ca82:	00 00 00 
  800420ca85:	48 98                	cltq   
  800420ca87:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca8b:	48 89 c1             	mov    %rax,%rcx
  800420ca8e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ca92:	48 01 c8             	add    %rcx,%rax
  800420ca95:	48 01 d0             	add    %rdx,%rax
  800420ca98:	48 83 c0 08          	add    $0x8,%rax
  800420ca9c:	48 8b 00             	mov    (%rax),%rax
  800420ca9f:	48 85 c0             	test   %rax,%rax
  800420caa2:	75 35                	jne    800420cad9 <trap+0x14b>
  800420caa4:	48 b9 05 a0 21 04 80 	movabs $0x800421a005,%rcx
  800420caab:	00 00 00 
  800420caae:	48 ba f0 9f 21 04 80 	movabs $0x8004219ff0,%rdx
  800420cab5:	00 00 00 
  800420cab8:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420cabd:	48 bf c8 9f 21 04 80 	movabs $0x8004219fc8,%rdi
  800420cac4:	00 00 00 
  800420cac7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cacc:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cad3:	00 00 00 
  800420cad6:	41 ff d0             	callq  *%r8
  800420cad9:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cae0:	00 00 00 
  800420cae3:	ff d0                	callq  *%rax
  800420cae5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420caec:	00 00 00 
  800420caef:	48 98                	cltq   
  800420caf1:	48 c1 e0 03          	shl    $0x3,%rax
  800420caf5:	48 89 c1             	mov    %rax,%rcx
  800420caf8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cafc:	48 01 c8             	add    %rcx,%rax
  800420caff:	48 01 d0             	add    %rdx,%rax
  800420cb02:	48 83 c0 08          	add    $0x8,%rax
  800420cb06:	48 8b 00             	mov    (%rax),%rax
  800420cb09:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cb0f:	83 f8 01             	cmp    $0x1,%eax
  800420cb12:	75 7f                	jne    800420cb93 <trap+0x205>
  800420cb14:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cb1b:	00 00 00 
  800420cb1e:	ff d0                	callq  *%rax
  800420cb20:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb27:	00 00 00 
  800420cb2a:	48 98                	cltq   
  800420cb2c:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb30:	48 89 c1             	mov    %rax,%rcx
  800420cb33:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb37:	48 01 c8             	add    %rcx,%rax
  800420cb3a:	48 01 d0             	add    %rdx,%rax
  800420cb3d:	48 83 c0 08          	add    $0x8,%rax
  800420cb41:	48 8b 00             	mov    (%rax),%rax
  800420cb44:	48 89 c7             	mov    %rax,%rdi
  800420cb47:	48 b8 92 89 20 04 80 	movabs $0x8004208992,%rax
  800420cb4e:	00 00 00 
  800420cb51:	ff d0                	callq  *%rax
  800420cb53:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cb5a:	00 00 00 
  800420cb5d:	ff d0                	callq  *%rax
  800420cb5f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb66:	00 00 00 
  800420cb69:	48 98                	cltq   
  800420cb6b:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb6f:	48 89 c1             	mov    %rax,%rcx
  800420cb72:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb76:	48 01 c8             	add    %rcx,%rax
  800420cb79:	48 01 d0             	add    %rdx,%rax
  800420cb7c:	48 83 c0 08          	add    $0x8,%rax
  800420cb80:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420cb87:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  800420cb8e:	00 00 00 
  800420cb91:	ff d0                	callq  *%rax
  800420cb93:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cb9a:	00 00 00 
  800420cb9d:	ff d0                	callq  *%rax
  800420cb9f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cba6:	00 00 00 
  800420cba9:	48 98                	cltq   
  800420cbab:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbaf:	48 89 c1             	mov    %rax,%rcx
  800420cbb2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbb6:	48 01 c8             	add    %rcx,%rax
  800420cbb9:	48 01 d0             	add    %rdx,%rax
  800420cbbc:	48 83 c0 08          	add    $0x8,%rax
  800420cbc0:	48 8b 10             	mov    (%rax),%rdx
  800420cbc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbc7:	48 89 c6             	mov    %rax,%rsi
  800420cbca:	b8 18 00 00 00       	mov    $0x18,%eax
  800420cbcf:	48 89 d7             	mov    %rdx,%rdi
  800420cbd2:	48 89 c1             	mov    %rax,%rcx
  800420cbd5:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420cbd8:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cbdf:	00 00 00 
  800420cbe2:	ff d0                	callq  *%rax
  800420cbe4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cbeb:	00 00 00 
  800420cbee:	48 98                	cltq   
  800420cbf0:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbf4:	48 89 c1             	mov    %rax,%rcx
  800420cbf7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbfb:	48 01 c8             	add    %rcx,%rax
  800420cbfe:	48 01 d0             	add    %rdx,%rax
  800420cc01:	48 83 c0 08          	add    $0x8,%rax
  800420cc05:	48 8b 00             	mov    (%rax),%rax
  800420cc08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cc0c:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420cc13:	00 00 00 
  800420cc16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420cc1a:	48 89 10             	mov    %rdx,(%rax)
  800420cc1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc21:	48 89 c7             	mov    %rax,%rdi
  800420cc24:	48 b8 6e c7 20 04 80 	movabs $0x800420c76e,%rax
  800420cc2b:	00 00 00 
  800420cc2e:	ff d0                	callq  *%rax
  800420cc30:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cc37:	00 00 00 
  800420cc3a:	ff d0                	callq  *%rax
  800420cc3c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc43:	00 00 00 
  800420cc46:	48 98                	cltq   
  800420cc48:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc4c:	48 89 c1             	mov    %rax,%rcx
  800420cc4f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc53:	48 01 c8             	add    %rcx,%rax
  800420cc56:	48 01 d0             	add    %rdx,%rax
  800420cc59:	48 83 c0 08          	add    $0x8,%rax
  800420cc5d:	48 8b 00             	mov    (%rax),%rax
  800420cc60:	48 85 c0             	test   %rax,%rax
  800420cc63:	74 7a                	je     800420ccdf <trap+0x351>
  800420cc65:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cc6c:	00 00 00 
  800420cc6f:	ff d0                	callq  *%rax
  800420cc71:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc78:	00 00 00 
  800420cc7b:	48 98                	cltq   
  800420cc7d:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc81:	48 89 c1             	mov    %rax,%rcx
  800420cc84:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc88:	48 01 c8             	add    %rcx,%rax
  800420cc8b:	48 01 d0             	add    %rdx,%rax
  800420cc8e:	48 83 c0 08          	add    $0x8,%rax
  800420cc92:	48 8b 00             	mov    (%rax),%rax
  800420cc95:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cc9b:	83 f8 03             	cmp    $0x3,%eax
  800420cc9e:	75 3f                	jne    800420ccdf <trap+0x351>
  800420cca0:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cca7:	00 00 00 
  800420ccaa:	ff d0                	callq  *%rax
  800420ccac:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ccb3:	00 00 00 
  800420ccb6:	48 98                	cltq   
  800420ccb8:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccbc:	48 89 c1             	mov    %rax,%rcx
  800420ccbf:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccc3:	48 01 c8             	add    %rcx,%rax
  800420ccc6:	48 01 d0             	add    %rdx,%rax
  800420ccc9:	48 83 c0 08          	add    $0x8,%rax
  800420cccd:	48 8b 00             	mov    (%rax),%rax
  800420ccd0:	48 89 c7             	mov    %rax,%rdi
  800420ccd3:	48 b8 e9 8f 20 04 80 	movabs $0x8004208fe9,%rax
  800420ccda:	00 00 00 
  800420ccdd:	ff d0                	callq  *%rax
  800420ccdf:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  800420cce6:	00 00 00 
  800420cce9:	ff d0                	callq  *%rax

000000800420cceb <page_fault_handler>:
  800420cceb:	55                   	push   %rbp
  800420ccec:	48 89 e5             	mov    %rsp,%rbp
  800420ccef:	53                   	push   %rbx
  800420ccf0:	48 83 ec 38          	sub    $0x38,%rsp
  800420ccf4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ccf8:	0f 20 d0             	mov    %cr2,%rax
  800420ccfb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420ccff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420cd03:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420cd07:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd0b:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cd12:	0f b7 c0             	movzwl %ax,%eax
  800420cd15:	83 e0 03             	and    $0x3,%eax
  800420cd18:	85 c0                	test   %eax,%eax
  800420cd1a:	75 3d                	jne    800420cd59 <page_fault_handler+0x6e>
  800420cd1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd20:	48 89 c7             	mov    %rax,%rdi
  800420cd23:	48 b8 16 c2 20 04 80 	movabs $0x800420c216,%rax
  800420cd2a:	00 00 00 
  800420cd2d:	ff d0                	callq  *%rax
  800420cd2f:	48 ba 0c a0 21 04 80 	movabs $0x800421a00c,%rdx
  800420cd36:	00 00 00 
  800420cd39:	be de 01 00 00       	mov    $0x1de,%esi
  800420cd3e:	48 bf c8 9f 21 04 80 	movabs $0x8004219fc8,%rdi
  800420cd45:	00 00 00 
  800420cd48:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd4d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420cd54:	00 00 00 
  800420cd57:	ff d1                	callq  *%rcx
  800420cd59:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cd60:	00 00 00 
  800420cd63:	ff d0                	callq  *%rax
  800420cd65:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cd6c:	00 00 00 
  800420cd6f:	48 98                	cltq   
  800420cd71:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd75:	48 89 c1             	mov    %rax,%rcx
  800420cd78:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd7c:	48 01 c8             	add    %rcx,%rax
  800420cd7f:	48 01 d0             	add    %rdx,%rax
  800420cd82:	48 83 c0 08          	add    $0x8,%rax
  800420cd86:	48 8b 00             	mov    (%rax),%rax
  800420cd89:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420cd90:	48 85 c0             	test   %rax,%rax
  800420cd93:	0f 85 b8 00 00 00    	jne    800420ce51 <page_fault_handler+0x166>
  800420cd99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd9d:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420cda4:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cdab:	00 00 00 
  800420cdae:	ff d0                	callq  *%rax
  800420cdb0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cdb7:	00 00 00 
  800420cdba:	48 98                	cltq   
  800420cdbc:	48 c1 e0 03          	shl    $0x3,%rax
  800420cdc0:	48 89 c1             	mov    %rax,%rcx
  800420cdc3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cdc7:	48 01 c8             	add    %rcx,%rax
  800420cdca:	48 01 d0             	add    %rdx,%rax
  800420cdcd:	48 83 c0 08          	add    $0x8,%rax
  800420cdd1:	48 8b 00             	mov    (%rax),%rax
  800420cdd4:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420cdda:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cdde:	48 89 d9             	mov    %rbx,%rcx
  800420cde1:	89 c6                	mov    %eax,%esi
  800420cde3:	48 bf 18 a0 21 04 80 	movabs $0x800421a018,%rdi
  800420cdea:	00 00 00 
  800420cded:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdf2:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  800420cdf9:	00 00 00 
  800420cdfc:	41 ff d0             	callq  *%r8
  800420cdff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce03:	48 89 c7             	mov    %rax,%rdi
  800420ce06:	48 b8 16 c2 20 04 80 	movabs $0x800420c216,%rax
  800420ce0d:	00 00 00 
  800420ce10:	ff d0                	callq  *%rax
  800420ce12:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ce19:	00 00 00 
  800420ce1c:	ff d0                	callq  *%rax
  800420ce1e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ce25:	00 00 00 
  800420ce28:	48 98                	cltq   
  800420ce2a:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce2e:	48 89 c1             	mov    %rax,%rcx
  800420ce31:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce35:	48 01 c8             	add    %rcx,%rax
  800420ce38:	48 01 d0             	add    %rdx,%rax
  800420ce3b:	48 83 c0 08          	add    $0x8,%rax
  800420ce3f:	48 8b 00             	mov    (%rax),%rax
  800420ce42:	48 89 c7             	mov    %rax,%rdi
  800420ce45:	48 b8 1e 8e 20 04 80 	movabs $0x8004208e1e,%rax
  800420ce4c:	00 00 00 
  800420ce4f:	ff d0                	callq  *%rax
  800420ce51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce55:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420ce5c:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420ce61:	48 39 c2             	cmp    %rax,%rdx
  800420ce64:	76 2c                	jbe    800420ce92 <page_fault_handler+0x1a7>
  800420ce66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce6a:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420ce71:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420ce76:	48 39 c2             	cmp    %rax,%rdx
  800420ce79:	77 17                	ja     800420ce92 <page_fault_handler+0x1a7>
  800420ce7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce7f:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420ce86:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420ce8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ce90:	eb 09                	jmp    800420ce9b <page_fault_handler+0x1b0>
  800420ce92:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420ce97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ce9b:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cea2:	00 00 00 
  800420cea5:	ff d0                	callq  *%rax
  800420cea7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ceae:	00 00 00 
  800420ceb1:	48 98                	cltq   
  800420ceb3:	48 c1 e0 03          	shl    $0x3,%rax
  800420ceb7:	48 89 c1             	mov    %rax,%rcx
  800420ceba:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cebe:	48 01 c8             	add    %rcx,%rax
  800420cec1:	48 01 d0             	add    %rdx,%rax
  800420cec4:	48 83 c0 08          	add    $0x8,%rax
  800420cec8:	48 8b 00             	mov    (%rax),%rax
  800420cecb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420cecf:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420ced4:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420ced9:	48 89 c7             	mov    %rax,%rdi
  800420cedc:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420cee3:	00 00 00 
  800420cee6:	ff d0                	callq  *%rax
  800420cee8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ceec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cef0:	48 89 10             	mov    %rdx,(%rax)
  800420cef3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cef7:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420cefe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf02:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cf06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf0a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cf0e:	48 8b 0a             	mov    (%rdx),%rcx
  800420cf11:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420cf15:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420cf19:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420cf1d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420cf21:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420cf25:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420cf29:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420cf2d:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420cf31:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420cf35:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420cf39:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420cf3d:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420cf41:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420cf45:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420cf49:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420cf4d:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420cf51:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420cf55:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420cf59:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420cf5d:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420cf61:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420cf65:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420cf69:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420cf6d:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420cf71:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420cf75:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420cf79:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420cf7d:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420cf81:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420cf88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf8c:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420cf93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf97:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420cf9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cfa2:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420cfa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfad:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420cfb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cfb8:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cfbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfc3:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420cfca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420cfce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cfd2:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420cfd9:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420cfe0:	00 00 00 
  800420cfe3:	ff d0                	callq  *%rax
  800420cfe5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cfec:	00 00 00 
  800420cfef:	48 98                	cltq   
  800420cff1:	48 c1 e0 03          	shl    $0x3,%rax
  800420cff5:	48 89 c1             	mov    %rax,%rcx
  800420cff8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cffc:	48 01 c8             	add    %rcx,%rax
  800420cfff:	48 01 d0             	add    %rdx,%rax
  800420d002:	48 83 c0 08          	add    $0x8,%rax
  800420d006:	48 8b 00             	mov    (%rax),%rax
  800420d009:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d010:	48 89 c2             	mov    %rax,%rdx
  800420d013:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d017:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d01e:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d025:	00 00 00 
  800420d028:	ff d0                	callq  *%rax
  800420d02a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d031:	00 00 00 
  800420d034:	48 98                	cltq   
  800420d036:	48 c1 e0 03          	shl    $0x3,%rax
  800420d03a:	48 89 c1             	mov    %rax,%rcx
  800420d03d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d041:	48 01 c8             	add    %rcx,%rax
  800420d044:	48 01 d0             	add    %rdx,%rax
  800420d047:	48 83 c0 08          	add    $0x8,%rax
  800420d04b:	48 8b 00             	mov    (%rax),%rax
  800420d04e:	48 89 c7             	mov    %rax,%rdi
  800420d051:	48 b8 e9 8f 20 04 80 	movabs $0x8004208fe9,%rax
  800420d058:	00 00 00 
  800420d05b:	ff d0                	callq  *%rax
  800420d05d:	0f 1f 00             	nopl   (%rax)

000000800420d060 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d060:	6a 00                	pushq  $0x0
  800420d062:	6a 00                	pushq  $0x0
  800420d064:	e9 f7 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d069:	90                   	nop

000000800420d06a <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d06a:	6a 00                	pushq  $0x0
  800420d06c:	6a 01                	pushq  $0x1
  800420d06e:	e9 ed 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d073:	90                   	nop

000000800420d074 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d074:	6a 00                	pushq  $0x0
  800420d076:	6a 02                	pushq  $0x2
  800420d078:	e9 e3 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d07d:	90                   	nop

000000800420d07e <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d07e:	6a 00                	pushq  $0x0
  800420d080:	6a 03                	pushq  $0x3
  800420d082:	e9 d9 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d087:	90                   	nop

000000800420d088 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d088:	6a 00                	pushq  $0x0
  800420d08a:	6a 04                	pushq  $0x4
  800420d08c:	e9 cf 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d091:	90                   	nop

000000800420d092 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d092:	6a 00                	pushq  $0x0
  800420d094:	6a 05                	pushq  $0x5
  800420d096:	e9 c5 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d09b:	90                   	nop

000000800420d09c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d09c:	6a 00                	pushq  $0x0
  800420d09e:	6a 06                	pushq  $0x6
  800420d0a0:	e9 bb 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0a5:	90                   	nop

000000800420d0a6 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d0a6:	6a 00                	pushq  $0x0
  800420d0a8:	6a 07                	pushq  $0x7
  800420d0aa:	e9 b1 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0af:	90                   	nop

000000800420d0b0 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d0b0:	6a 08                	pushq  $0x8
  800420d0b2:	e9 a9 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0b7:	90                   	nop

000000800420d0b8 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d0b8:	6a 0a                	pushq  $0xa
  800420d0ba:	e9 a1 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0bf:	90                   	nop

000000800420d0c0 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d0c0:	6a 0b                	pushq  $0xb
  800420d0c2:	e9 99 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0c7:	90                   	nop

000000800420d0c8 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d0c8:	6a 0c                	pushq  $0xc
  800420d0ca:	e9 91 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0cf:	90                   	nop

000000800420d0d0 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d0d0:	6a 0d                	pushq  $0xd
  800420d0d2:	e9 89 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0d7:	90                   	nop

000000800420d0d8 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d0d8:	6a 0e                	pushq  $0xe
  800420d0da:	e9 81 00 00 00       	jmpq   800420d160 <_alltraps>
  800420d0df:	90                   	nop

000000800420d0e0 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d0e0:	6a 00                	pushq  $0x0
  800420d0e2:	6a 10                	pushq  $0x10
  800420d0e4:	eb 7a                	jmp    800420d160 <_alltraps>

000000800420d0e6 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d0e6:	6a 11                	pushq  $0x11
  800420d0e8:	eb 76                	jmp    800420d160 <_alltraps>

000000800420d0ea <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d0ea:	6a 00                	pushq  $0x0
  800420d0ec:	6a 12                	pushq  $0x12
  800420d0ee:	eb 70                	jmp    800420d160 <_alltraps>

000000800420d0f0 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d0f0:	6a 00                	pushq  $0x0
  800420d0f2:	6a 20                	pushq  $0x20
  800420d0f4:	eb 6a                	jmp    800420d160 <_alltraps>

000000800420d0f6 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d0f6:	6a 00                	pushq  $0x0
  800420d0f8:	6a 21                	pushq  $0x21
  800420d0fa:	eb 64                	jmp    800420d160 <_alltraps>

000000800420d0fc <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d0fc:	6a 00                	pushq  $0x0
  800420d0fe:	6a 22                	pushq  $0x22
  800420d100:	eb 5e                	jmp    800420d160 <_alltraps>

000000800420d102 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d102:	6a 00                	pushq  $0x0
  800420d104:	6a 23                	pushq  $0x23
  800420d106:	eb 58                	jmp    800420d160 <_alltraps>

000000800420d108 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d108:	6a 00                	pushq  $0x0
  800420d10a:	6a 24                	pushq  $0x24
  800420d10c:	eb 52                	jmp    800420d160 <_alltraps>

000000800420d10e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d10e:	6a 00                	pushq  $0x0
  800420d110:	6a 25                	pushq  $0x25
  800420d112:	eb 4c                	jmp    800420d160 <_alltraps>

000000800420d114 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d114:	6a 00                	pushq  $0x0
  800420d116:	6a 26                	pushq  $0x26
  800420d118:	eb 46                	jmp    800420d160 <_alltraps>

000000800420d11a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d11a:	6a 00                	pushq  $0x0
  800420d11c:	6a 27                	pushq  $0x27
  800420d11e:	eb 40                	jmp    800420d160 <_alltraps>

000000800420d120 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d120:	6a 00                	pushq  $0x0
  800420d122:	6a 28                	pushq  $0x28
  800420d124:	eb 3a                	jmp    800420d160 <_alltraps>

000000800420d126 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d126:	6a 00                	pushq  $0x0
  800420d128:	6a 29                	pushq  $0x29
  800420d12a:	eb 34                	jmp    800420d160 <_alltraps>

000000800420d12c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d12c:	6a 00                	pushq  $0x0
  800420d12e:	6a 2a                	pushq  $0x2a
  800420d130:	eb 2e                	jmp    800420d160 <_alltraps>

000000800420d132 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d132:	6a 00                	pushq  $0x0
  800420d134:	6a 2b                	pushq  $0x2b
  800420d136:	eb 28                	jmp    800420d160 <_alltraps>

000000800420d138 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d138:	6a 00                	pushq  $0x0
  800420d13a:	6a 2c                	pushq  $0x2c
  800420d13c:	eb 22                	jmp    800420d160 <_alltraps>

000000800420d13e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d13e:	6a 00                	pushq  $0x0
  800420d140:	6a 2d                	pushq  $0x2d
  800420d142:	eb 1c                	jmp    800420d160 <_alltraps>

000000800420d144 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d144:	6a 00                	pushq  $0x0
  800420d146:	6a 2e                	pushq  $0x2e
  800420d148:	eb 16                	jmp    800420d160 <_alltraps>

000000800420d14a <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d14a:	6a 00                	pushq  $0x0
  800420d14c:	6a 2f                	pushq  $0x2f
  800420d14e:	eb 10                	jmp    800420d160 <_alltraps>

000000800420d150 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d150:	6a 00                	pushq  $0x0
  800420d152:	6a 30                	pushq  $0x30
  800420d154:	eb 0a                	jmp    800420d160 <_alltraps>

000000800420d156 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d156:	68 f4 01 00 00       	pushq  $0x1f4
  800420d15b:	eb 03                	jmp    800420d160 <_alltraps>
  800420d15d:	0f 1f 00             	nopl   (%rax)

000000800420d160 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d160:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d164:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d168:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d16b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d16f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d174:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d179:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d17e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d183:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d188:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d18d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d192:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d197:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d19c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d1a1:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d1a6:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d1ab:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d1b0:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d1b5:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d1b9:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d1be:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d1c0:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d1c2:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d1c4:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d1c6:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d1c8:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d1cb:	e8 be f7 ff ff       	callq  800420c98e <trap>

000000800420d1d0 <spin>:
spin:	jmp spin
  800420d1d0:	eb fe                	jmp    800420d1d0 <spin>

000000800420d1d2 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d1d2:	55                   	push   %rbp
  800420d1d3:	48 89 e5             	mov    %rsp,%rbp
  800420d1d6:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d1da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d1de:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d1e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d1e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d1e8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d1ec:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d1ef:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d1f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d1f5:	c9                   	leaveq 
  800420d1f6:	c3                   	retq   

000000800420d1f7 <unlock_kernel>:
  800420d1f7:	55                   	push   %rbp
  800420d1f8:	48 89 e5             	mov    %rsp,%rbp
  800420d1fb:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420d202:	00 00 00 
  800420d205:	48 b8 d4 73 21 04 80 	movabs $0x80042173d4,%rax
  800420d20c:	00 00 00 
  800420d20f:	ff d0                	callq  *%rax
  800420d211:	f3 90                	pause  
  800420d213:	5d                   	pop    %rbp
  800420d214:	c3                   	retq   

000000800420d215 <sched_yield>:
  800420d215:	55                   	push   %rbp
  800420d216:	48 89 e5             	mov    %rsp,%rbp
  800420d219:	48 83 ec 10          	sub    $0x10,%rsp
  800420d21d:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d224:	00 00 00 
  800420d227:	ff d0                	callq  *%rax
  800420d229:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d230:	00 00 00 
  800420d233:	48 98                	cltq   
  800420d235:	48 c1 e0 03          	shl    $0x3,%rax
  800420d239:	48 89 c1             	mov    %rax,%rcx
  800420d23c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d240:	48 01 c8             	add    %rcx,%rax
  800420d243:	48 01 d0             	add    %rdx,%rax
  800420d246:	48 83 c0 08          	add    $0x8,%rax
  800420d24a:	48 8b 00             	mov    (%rax),%rax
  800420d24d:	48 85 c0             	test   %rax,%rax
  800420d250:	74 60                	je     800420d2b2 <sched_yield+0x9d>
  800420d252:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d259:	00 00 00 
  800420d25c:	ff d0                	callq  *%rax
  800420d25e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d265:	00 00 00 
  800420d268:	48 98                	cltq   
  800420d26a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d26e:	48 89 c1             	mov    %rax,%rcx
  800420d271:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d275:	48 01 c8             	add    %rcx,%rax
  800420d278:	48 01 d0             	add    %rdx,%rax
  800420d27b:	48 83 c0 08          	add    $0x8,%rax
  800420d27f:	48 8b 00             	mov    (%rax),%rax
  800420d282:	48 89 c2             	mov    %rax,%rdx
  800420d285:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d28c:	00 00 00 
  800420d28f:	48 8b 00             	mov    (%rax),%rax
  800420d292:	48 29 c2             	sub    %rax,%rdx
  800420d295:	48 89 d0             	mov    %rdx,%rax
  800420d298:	48 c1 f8 03          	sar    $0x3,%rax
  800420d29c:	48 89 c2             	mov    %rax,%rdx
  800420d29f:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420d2a6:	fa a4 4f 
  800420d2a9:	48 0f af c2          	imul   %rdx,%rax
  800420d2ad:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d2b0:	eb 07                	jmp    800420d2b9 <sched_yield+0xa4>
  800420d2b2:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420d2b9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420d2c0:	eb 75                	jmp    800420d337 <sched_yield+0x122>
  800420d2c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d2c5:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420d2c8:	01 c2                	add    %eax,%edx
  800420d2ca:	89 d0                	mov    %edx,%eax
  800420d2cc:	c1 f8 1f             	sar    $0x1f,%eax
  800420d2cf:	c1 e8 16             	shr    $0x16,%eax
  800420d2d2:	01 c2                	add    %eax,%edx
  800420d2d4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420d2da:	29 c2                	sub    %eax,%edx
  800420d2dc:	89 d0                	mov    %edx,%eax
  800420d2de:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420d2e1:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d2e8:	00 00 00 
  800420d2eb:	48 8b 10             	mov    (%rax),%rdx
  800420d2ee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d2f1:	48 98                	cltq   
  800420d2f3:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d2fa:	48 01 d0             	add    %rdx,%rax
  800420d2fd:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d303:	83 f8 02             	cmp    $0x2,%eax
  800420d306:	75 2b                	jne    800420d333 <sched_yield+0x11e>
  800420d308:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d30f:	00 00 00 
  800420d312:	48 8b 10             	mov    (%rax),%rdx
  800420d315:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d318:	48 98                	cltq   
  800420d31a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d321:	48 01 d0             	add    %rdx,%rax
  800420d324:	48 89 c7             	mov    %rax,%rdi
  800420d327:	48 b8 e9 8f 20 04 80 	movabs $0x8004208fe9,%rax
  800420d32e:	00 00 00 
  800420d331:	ff d0                	callq  *%rax
  800420d333:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d337:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420d33e:	7e 82                	jle    800420d2c2 <sched_yield+0xad>
  800420d340:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d347:	00 00 00 
  800420d34a:	ff d0                	callq  *%rax
  800420d34c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d353:	00 00 00 
  800420d356:	48 98                	cltq   
  800420d358:	48 c1 e0 03          	shl    $0x3,%rax
  800420d35c:	48 89 c1             	mov    %rax,%rcx
  800420d35f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d363:	48 01 c8             	add    %rcx,%rax
  800420d366:	48 01 d0             	add    %rdx,%rax
  800420d369:	48 83 c0 08          	add    $0x8,%rax
  800420d36d:	48 8b 00             	mov    (%rax),%rax
  800420d370:	48 85 c0             	test   %rax,%rax
  800420d373:	74 7a                	je     800420d3ef <sched_yield+0x1da>
  800420d375:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d37c:	00 00 00 
  800420d37f:	ff d0                	callq  *%rax
  800420d381:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d388:	00 00 00 
  800420d38b:	48 98                	cltq   
  800420d38d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d391:	48 89 c1             	mov    %rax,%rcx
  800420d394:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d398:	48 01 c8             	add    %rcx,%rax
  800420d39b:	48 01 d0             	add    %rdx,%rax
  800420d39e:	48 83 c0 08          	add    $0x8,%rax
  800420d3a2:	48 8b 00             	mov    (%rax),%rax
  800420d3a5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3ab:	83 f8 03             	cmp    $0x3,%eax
  800420d3ae:	75 3f                	jne    800420d3ef <sched_yield+0x1da>
  800420d3b0:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d3b7:	00 00 00 
  800420d3ba:	ff d0                	callq  *%rax
  800420d3bc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d3c3:	00 00 00 
  800420d3c6:	48 98                	cltq   
  800420d3c8:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3cc:	48 89 c1             	mov    %rax,%rcx
  800420d3cf:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3d3:	48 01 c8             	add    %rcx,%rax
  800420d3d6:	48 01 d0             	add    %rdx,%rax
  800420d3d9:	48 83 c0 08          	add    $0x8,%rax
  800420d3dd:	48 8b 00             	mov    (%rax),%rax
  800420d3e0:	48 89 c7             	mov    %rax,%rdi
  800420d3e3:	48 b8 e9 8f 20 04 80 	movabs $0x8004208fe9,%rax
  800420d3ea:	00 00 00 
  800420d3ed:	ff d0                	callq  *%rax
  800420d3ef:	48 b8 fd d3 20 04 80 	movabs $0x800420d3fd,%rax
  800420d3f6:	00 00 00 
  800420d3f9:	ff d0                	callq  *%rax
  800420d3fb:	c9                   	leaveq 
  800420d3fc:	c3                   	retq   

000000800420d3fd <sched_halt>:
  800420d3fd:	55                   	push   %rbp
  800420d3fe:	48 89 e5             	mov    %rsp,%rbp
  800420d401:	48 83 ec 20          	sub    $0x20,%rsp
  800420d405:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420d40c:	eb 79                	jmp    800420d487 <sched_halt+0x8a>
  800420d40e:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d415:	00 00 00 
  800420d418:	48 8b 10             	mov    (%rax),%rdx
  800420d41b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d41e:	48 98                	cltq   
  800420d420:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d427:	48 01 d0             	add    %rdx,%rax
  800420d42a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d430:	83 f8 02             	cmp    $0x2,%eax
  800420d433:	74 5f                	je     800420d494 <sched_halt+0x97>
  800420d435:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d43c:	00 00 00 
  800420d43f:	48 8b 10             	mov    (%rax),%rdx
  800420d442:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d445:	48 98                	cltq   
  800420d447:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d44e:	48 01 d0             	add    %rdx,%rax
  800420d451:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d457:	83 f8 03             	cmp    $0x3,%eax
  800420d45a:	74 38                	je     800420d494 <sched_halt+0x97>
  800420d45c:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d463:	00 00 00 
  800420d466:	48 8b 10             	mov    (%rax),%rdx
  800420d469:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d46c:	48 98                	cltq   
  800420d46e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d475:	48 01 d0             	add    %rdx,%rax
  800420d478:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d47e:	83 f8 01             	cmp    $0x1,%eax
  800420d481:	74 11                	je     800420d494 <sched_halt+0x97>
  800420d483:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420d487:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420d48e:	0f 8e 7a ff ff ff    	jle    800420d40e <sched_halt+0x11>
  800420d494:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420d49b:	75 2e                	jne    800420d4cb <sched_halt+0xce>
  800420d49d:	48 bf 20 a2 21 04 80 	movabs $0x800421a220,%rdi
  800420d4a4:	00 00 00 
  800420d4a7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4ac:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420d4b3:	00 00 00 
  800420d4b6:	ff d2                	callq  *%rdx
  800420d4b8:	bf 00 00 00 00       	mov    $0x0,%edi
  800420d4bd:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420d4c4:	00 00 00 
  800420d4c7:	ff d0                	callq  *%rax
  800420d4c9:	eb ed                	jmp    800420d4b8 <sched_halt+0xbb>
  800420d4cb:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d4d2:	00 00 00 
  800420d4d5:	ff d0                	callq  *%rax
  800420d4d7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d4de:	00 00 00 
  800420d4e1:	48 98                	cltq   
  800420d4e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4e7:	48 89 c1             	mov    %rax,%rcx
  800420d4ea:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4ee:	48 01 c8             	add    %rcx,%rax
  800420d4f1:	48 01 d0             	add    %rdx,%rax
  800420d4f4:	48 83 c0 08          	add    $0x8,%rax
  800420d4f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d4ff:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420d506:	00 00 00 
  800420d509:	48 8b 00             	mov    (%rax),%rax
  800420d50c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420d510:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420d517:	00 00 00 
  800420d51a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420d51e:	77 32                	ja     800420d552 <sched_halt+0x155>
  800420d520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d524:	48 89 c1             	mov    %rax,%rcx
  800420d527:	48 ba 50 a2 21 04 80 	movabs $0x800421a250,%rdx
  800420d52e:	00 00 00 
  800420d531:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420d536:	48 bf 74 a2 21 04 80 	movabs $0x800421a274,%rdi
  800420d53d:	00 00 00 
  800420d540:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d545:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420d54c:	00 00 00 
  800420d54f:	41 ff d0             	callq  *%r8
  800420d552:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420d559:	ff ff ff 
  800420d55c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d560:	48 01 d0             	add    %rdx,%rax
  800420d563:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420d567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d56b:	0f 22 d8             	mov    %rax,%cr3
  800420d56e:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d575:	00 00 00 
  800420d578:	ff d0                	callq  *%rax
  800420d57a:	48 98                	cltq   
  800420d57c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d580:	48 89 c2             	mov    %rax,%rdx
  800420d583:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d587:	48 01 d0             	add    %rdx,%rax
  800420d58a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d591:	00 00 00 
  800420d594:	48 01 d0             	add    %rdx,%rax
  800420d597:	48 83 c0 04          	add    $0x4,%rax
  800420d59b:	be 02 00 00 00       	mov    $0x2,%esi
  800420d5a0:	48 89 c7             	mov    %rax,%rdi
  800420d5a3:	48 b8 d2 d1 20 04 80 	movabs $0x800420d1d2,%rax
  800420d5aa:	00 00 00 
  800420d5ad:	ff d0                	callq  *%rax
  800420d5af:	48 b8 f7 d1 20 04 80 	movabs $0x800420d1f7,%rax
  800420d5b6:	00 00 00 
  800420d5b9:	ff d0                	callq  *%rax
  800420d5bb:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d5c2:	00 00 00 
  800420d5c5:	ff d0                	callq  *%rax
  800420d5c7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d5ce:	00 00 00 
  800420d5d1:	48 98                	cltq   
  800420d5d3:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5d7:	48 89 c1             	mov    %rax,%rcx
  800420d5da:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d5de:	48 01 c8             	add    %rcx,%rax
  800420d5e1:	48 01 d0             	add    %rdx,%rax
  800420d5e4:	48 83 c0 10          	add    $0x10,%rax
  800420d5e8:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420d5ec:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420d5f3:	48 89 c4             	mov    %rax,%rsp
  800420d5f6:	6a 00                	pushq  $0x0
  800420d5f8:	6a 00                	pushq  $0x0
  800420d5fa:	fb                   	sti    
  800420d5fb:	f4                   	hlt    
  800420d5fc:	c9                   	leaveq 
  800420d5fd:	c3                   	retq   

000000800420d5fe <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420d5fe:	55                   	push   %rbp
  800420d5ff:	48 89 e5             	mov    %rsp,%rbp
  800420d602:	48 83 ec 10          	sub    $0x10,%rsp
  800420d606:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d60a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420d60e:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d615:	00 00 00 
  800420d618:	ff d0                	callq  *%rax
  800420d61a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d621:	00 00 00 
  800420d624:	48 98                	cltq   
  800420d626:	48 c1 e0 03          	shl    $0x3,%rax
  800420d62a:	48 89 c1             	mov    %rax,%rcx
  800420d62d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d631:	48 01 c8             	add    %rcx,%rax
  800420d634:	48 01 d0             	add    %rdx,%rax
  800420d637:	48 83 c0 08          	add    $0x8,%rax
  800420d63b:	48 8b 00             	mov    (%rax),%rax
  800420d63e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d642:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d646:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d64b:	48 89 c7             	mov    %rax,%rdi
  800420d64e:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d655:	00 00 00 
  800420d658:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420d65a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d65e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d662:	48 89 c6             	mov    %rax,%rsi
  800420d665:	48 bf 88 a2 21 04 80 	movabs $0x800421a288,%rdi
  800420d66c:	00 00 00 
  800420d66f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d674:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420d67b:	00 00 00 
  800420d67e:	ff d1                	callq  *%rcx
}
  800420d680:	c9                   	leaveq 
  800420d681:	c3                   	retq   

000000800420d682 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420d682:	55                   	push   %rbp
  800420d683:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420d686:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  800420d68d:	00 00 00 
  800420d690:	ff d0                	callq  *%rax
}
  800420d692:	5d                   	pop    %rbp
  800420d693:	c3                   	retq   

000000800420d694 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420d694:	55                   	push   %rbp
  800420d695:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420d698:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d69f:	00 00 00 
  800420d6a2:	ff d0                	callq  *%rax
  800420d6a4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d6ab:	00 00 00 
  800420d6ae:	48 98                	cltq   
  800420d6b0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d6b4:	48 89 c1             	mov    %rax,%rcx
  800420d6b7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d6bb:	48 01 c8             	add    %rcx,%rax
  800420d6be:	48 01 d0             	add    %rdx,%rax
  800420d6c1:	48 83 c0 08          	add    $0x8,%rax
  800420d6c5:	48 8b 00             	mov    (%rax),%rax
  800420d6c8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d6ce:	5d                   	pop    %rbp
  800420d6cf:	c3                   	retq   

000000800420d6d0 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420d6d0:	55                   	push   %rbp
  800420d6d1:	48 89 e5             	mov    %rsp,%rbp
  800420d6d4:	48 83 ec 20          	sub    $0x20,%rsp
  800420d6d8:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d6db:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d6df:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d6e2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d6e7:	48 89 ce             	mov    %rcx,%rsi
  800420d6ea:	89 c7                	mov    %eax,%edi
  800420d6ec:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d6f3:	00 00 00 
  800420d6f6:	ff d0                	callq  *%rax
  800420d6f8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d6fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d6ff:	79 05                	jns    800420d706 <sys_env_destroy+0x36>
		return r;
  800420d701:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d704:	eb 18                	jmp    800420d71e <sys_env_destroy+0x4e>
	env_destroy(e);
  800420d706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d70a:	48 89 c7             	mov    %rax,%rdi
  800420d70d:	48 b8 1e 8e 20 04 80 	movabs $0x8004208e1e,%rax
  800420d714:	00 00 00 
  800420d717:	ff d0                	callq  *%rax
	return 0;
  800420d719:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d71e:	c9                   	leaveq 
  800420d71f:	c3                   	retq   

000000800420d720 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420d720:	55                   	push   %rbp
  800420d721:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420d724:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  800420d72b:	00 00 00 
  800420d72e:	ff d0                	callq  *%rax

000000800420d730 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420d730:	55                   	push   %rbp
  800420d731:	48 89 e5             	mov    %rsp,%rbp
  800420d734:	53                   	push   %rbx
  800420d735:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420d739:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d740:	00 00 00 
  800420d743:	ff d0                	callq  *%rax
  800420d745:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d74c:	00 00 00 
  800420d74f:	48 98                	cltq   
  800420d751:	48 c1 e0 03          	shl    $0x3,%rax
  800420d755:	48 89 c1             	mov    %rax,%rcx
  800420d758:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d75c:	48 01 c8             	add    %rcx,%rax
  800420d75f:	48 01 d0             	add    %rdx,%rax
  800420d762:	48 83 c0 08          	add    $0x8,%rax
  800420d766:	48 8b 00             	mov    (%rax),%rax
  800420d769:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420d76f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420d773:	89 d6                	mov    %edx,%esi
  800420d775:	48 89 c7             	mov    %rax,%rdi
  800420d778:	48 b8 89 82 20 04 80 	movabs $0x8004208289,%rax
  800420d77f:	00 00 00 
  800420d782:	ff d0                	callq  *%rax
  800420d784:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420d787:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420d78b:	79 05                	jns    800420d792 <sys_exofork+0x62>
		return r;
  800420d78d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d790:	eb 6c                	jmp    800420d7fe <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420d792:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d796:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420d79d:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420d7a0:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420d7a4:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d7ab:	00 00 00 
  800420d7ae:	ff d0                	callq  *%rax
  800420d7b0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d7b7:	00 00 00 
  800420d7ba:	48 98                	cltq   
  800420d7bc:	48 c1 e0 03          	shl    $0x3,%rax
  800420d7c0:	48 89 c1             	mov    %rax,%rcx
  800420d7c3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d7c7:	48 01 c8             	add    %rcx,%rax
  800420d7ca:	48 01 d0             	add    %rdx,%rax
  800420d7cd:	48 83 c0 08          	add    $0x8,%rax
  800420d7d1:	48 8b 00             	mov    (%rax),%rax
  800420d7d4:	48 89 da             	mov    %rbx,%rdx
  800420d7d7:	48 89 c6             	mov    %rax,%rsi
  800420d7da:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d7df:	48 89 d7             	mov    %rdx,%rdi
  800420d7e2:	48 89 c1             	mov    %rax,%rcx
  800420d7e5:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420d7e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d7ec:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420d7f3:	00 
	return e->env_id;
  800420d7f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d7f8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d7fe:	48 83 c4 18          	add    $0x18,%rsp
  800420d802:	5b                   	pop    %rbx
  800420d803:	5d                   	pop    %rbp
  800420d804:	c3                   	retq   

000000800420d805 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420d805:	55                   	push   %rbp
  800420d806:	48 89 e5             	mov    %rsp,%rbp
  800420d809:	48 83 ec 20          	sub    $0x20,%rsp
  800420d80d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d810:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d813:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d817:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d81a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d81f:	48 89 ce             	mov    %rcx,%rsi
  800420d822:	89 c7                	mov    %eax,%edi
  800420d824:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d82b:	00 00 00 
  800420d82e:	ff d0                	callq  *%rax
  800420d830:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d833:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d837:	79 05                	jns    800420d83e <sys_env_set_status+0x39>
		return r;
  800420d839:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d83c:	eb 25                	jmp    800420d863 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420d83e:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420d842:	74 0d                	je     800420d851 <sys_env_set_status+0x4c>
  800420d844:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420d848:	74 07                	je     800420d851 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420d84a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420d84f:	eb 12                	jmp    800420d863 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420d851:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d855:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420d858:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420d85e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d863:	c9                   	leaveq 
  800420d864:	c3                   	retq   

000000800420d865 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420d865:	55                   	push   %rbp
  800420d866:	48 89 e5             	mov    %rsp,%rbp
  800420d869:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420d870:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420d876:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420d87d:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420d884:	00 00 00 
  800420d887:	ff d0                	callq  *%rax
  800420d889:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d890:	00 00 00 
  800420d893:	48 98                	cltq   
  800420d895:	48 c1 e0 03          	shl    $0x3,%rax
  800420d899:	48 89 c1             	mov    %rax,%rcx
  800420d89c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d8a0:	48 01 c8             	add    %rcx,%rax
  800420d8a3:	48 01 d0             	add    %rdx,%rax
  800420d8a6:	48 83 c0 08          	add    $0x8,%rax
  800420d8aa:	48 8b 00             	mov    (%rax),%rax
  800420d8ad:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420d8b4:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d8b9:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420d8be:	48 89 c7             	mov    %rax,%rdi
  800420d8c1:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d8c8:	00 00 00 
  800420d8cb:	ff d0                	callq  *%rax
	ltf = *tf;
  800420d8cd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420d8d4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420d8db:	48 89 c6             	mov    %rax,%rsi
  800420d8de:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d8e3:	48 89 d7             	mov    %rdx,%rdi
  800420d8e6:	48 89 c1             	mov    %rax,%rcx
  800420d8e9:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420d8ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d8f0:	80 cc 02             	or     $0x2,%ah
  800420d8f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420d8f7:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420d8fb:	83 c8 03             	or     $0x3,%eax
  800420d8fe:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d902:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d906:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420d90c:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d911:	48 89 ce             	mov    %rcx,%rsi
  800420d914:	89 c7                	mov    %eax,%edi
  800420d916:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d91d:	00 00 00 
  800420d920:	ff d0                	callq  *%rax
  800420d922:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d925:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d929:	79 05                	jns    800420d930 <sys_env_set_trapframe+0xcb>
		return r;
  800420d92b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d92e:	eb 21                	jmp    800420d951 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420d930:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d934:	48 89 c2             	mov    %rax,%rdx
  800420d937:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420d93e:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d943:	48 89 d7             	mov    %rdx,%rdi
  800420d946:	48 89 c1             	mov    %rax,%rcx
  800420d949:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420d94c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d951:	c9                   	leaveq 
  800420d952:	c3                   	retq   

000000800420d953 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420d953:	55                   	push   %rbp
  800420d954:	48 89 e5             	mov    %rsp,%rbp
  800420d957:	48 83 ec 20          	sub    $0x20,%rsp
  800420d95b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d95e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d962:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d966:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d969:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d96e:	48 89 ce             	mov    %rcx,%rsi
  800420d971:	89 c7                	mov    %eax,%edi
  800420d973:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d97a:	00 00 00 
  800420d97d:	ff d0                	callq  *%rax
  800420d97f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d982:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d986:	79 05                	jns    800420d98d <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420d988:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d98b:	eb 14                	jmp    800420d9a1 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420d98d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d991:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d995:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420d99c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d9a1:	c9                   	leaveq 
  800420d9a2:	c3                   	retq   

000000800420d9a3 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420d9a3:	55                   	push   %rbp
  800420d9a4:	48 89 e5             	mov    %rsp,%rbp
  800420d9a7:	48 83 ec 30          	sub    $0x30,%rsp
  800420d9ab:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420d9ae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420d9b2:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d9b5:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420d9b9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420d9bc:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d9c1:	48 89 ce             	mov    %rcx,%rsi
  800420d9c4:	89 c7                	mov    %eax,%edi
  800420d9c6:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d9cd:	00 00 00 
  800420d9d0:	ff d0                	callq  *%rax
  800420d9d2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9d5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9d9:	79 08                	jns    800420d9e3 <sys_page_alloc+0x40>
		return r;
  800420d9db:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9de:	e9 a7 00 00 00       	jmpq   800420da8a <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420d9e3:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420d9e6:	f7 d0                	not    %eax
  800420d9e8:	83 e0 05             	and    $0x5,%eax
  800420d9eb:	85 c0                	test   %eax,%eax
  800420d9ed:	75 0c                	jne    800420d9fb <sys_page_alloc+0x58>
  800420d9ef:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420d9f2:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420d9f7:	85 c0                	test   %eax,%eax
  800420d9f9:	74 0a                	je     800420da05 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420d9fb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420da00:	e9 85 00 00 00       	jmpq   800420da8a <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420da05:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420da0c:	00 00 00 
  800420da0f:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420da13:	76 07                	jbe    800420da1c <sys_page_alloc+0x79>
		return -E_INVAL;
  800420da15:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420da1a:	eb 6e                	jmp    800420da8a <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420da1c:	bf 01 00 00 00       	mov    $0x1,%edi
  800420da21:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420da28:	00 00 00 
  800420da2b:	ff d0                	callq  *%rax
  800420da2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420da31:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420da36:	75 07                	jne    800420da3f <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420da38:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420da3d:	eb 4b                	jmp    800420da8a <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420da3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420da43:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420da4a:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420da4d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420da51:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420da55:	48 89 c7             	mov    %rax,%rdi
  800420da58:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420da5f:	00 00 00 
  800420da62:	ff d0                	callq  *%rax
  800420da64:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da67:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da6b:	79 18                	jns    800420da85 <sys_page_alloc+0xe2>
		page_free(pp);
  800420da6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da71:	48 89 c7             	mov    %rax,%rdi
  800420da74:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420da7b:	00 00 00 
  800420da7e:	ff d0                	callq  *%rax
		return r;
  800420da80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da83:	eb 05                	jmp    800420da8a <sys_page_alloc+0xe7>
	}
	return 0;
  800420da85:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420da8a:	c9                   	leaveq 
  800420da8b:	c3                   	retq   

000000800420da8c <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420da8c:	55                   	push   %rbp
  800420da8d:	48 89 e5             	mov    %rsp,%rbp
  800420da90:	48 83 ec 60          	sub    $0x60,%rsp
  800420da94:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420da97:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420da9b:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420da9e:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420daa2:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420daa6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420daad:	00 00 00 
  800420dab0:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420dab4:	77 10                	ja     800420dac6 <sys_page_map+0x3a>
  800420dab6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dabd:	00 00 00 
  800420dac0:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420dac4:	76 0a                	jbe    800420dad0 <sys_page_map+0x44>
		return -E_INVAL;
  800420dac6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dacb:	e9 3f 01 00 00       	jmpq   800420dc0f <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420dad0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420dad4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dad8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dadc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dae2:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420dae6:	75 18                	jne    800420db00 <sys_page_map+0x74>
  800420dae8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420daec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420daf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420daf4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dafa:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420dafe:	74 0a                	je     800420db0a <sys_page_map+0x7e>
		return -E_INVAL;
  800420db00:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db05:	e9 05 01 00 00       	jmpq   800420dc0f <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420db0a:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420db0e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420db11:	ba 01 00 00 00       	mov    $0x1,%edx
  800420db16:	48 89 ce             	mov    %rcx,%rsi
  800420db19:	89 c7                	mov    %eax,%edi
  800420db1b:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420db22:	00 00 00 
  800420db25:	ff d0                	callq  *%rax
  800420db27:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db2a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db2e:	78 26                	js     800420db56 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420db30:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420db34:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420db37:	ba 01 00 00 00       	mov    $0x1,%edx
  800420db3c:	48 89 ce             	mov    %rcx,%rsi
  800420db3f:	89 c7                	mov    %eax,%edi
  800420db41:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420db48:	00 00 00 
  800420db4b:	ff d0                	callq  *%rax
  800420db4d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db50:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db54:	79 08                	jns    800420db5e <sys_page_map+0xd2>
		return r;
  800420db56:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420db59:	e9 b1 00 00 00       	jmpq   800420dc0f <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420db5e:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420db61:	f7 d0                	not    %eax
  800420db63:	83 e0 05             	and    $0x5,%eax
  800420db66:	85 c0                	test   %eax,%eax
  800420db68:	75 0c                	jne    800420db76 <sys_page_map+0xea>
  800420db6a:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420db6d:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420db72:	85 c0                	test   %eax,%eax
  800420db74:	74 0a                	je     800420db80 <sys_page_map+0xf4>
		return -E_INVAL;
  800420db76:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db7b:	e9 8f 00 00 00       	jmpq   800420dc0f <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420db80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420db84:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420db8b:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420db8f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420db93:	48 89 ce             	mov    %rcx,%rsi
  800420db96:	48 89 c7             	mov    %rax,%rdi
  800420db99:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420dba0:	00 00 00 
  800420dba3:	ff d0                	callq  *%rax
  800420dba5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420dba9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420dbae:	75 07                	jne    800420dbb7 <sys_page_map+0x12b>
		return -E_INVAL;
  800420dbb0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbb5:	eb 58                	jmp    800420dc0f <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420dbb7:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dbba:	83 e0 02             	and    $0x2,%eax
  800420dbbd:	85 c0                	test   %eax,%eax
  800420dbbf:	74 16                	je     800420dbd7 <sys_page_map+0x14b>
  800420dbc1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dbc5:	48 8b 00             	mov    (%rax),%rax
  800420dbc8:	83 e0 02             	and    $0x2,%eax
  800420dbcb:	48 85 c0             	test   %rax,%rax
  800420dbce:	75 07                	jne    800420dbd7 <sys_page_map+0x14b>
		return -E_INVAL;
  800420dbd0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbd5:	eb 38                	jmp    800420dc0f <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420dbd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dbdb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dbe2:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420dbe5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420dbe9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dbed:	48 89 c7             	mov    %rax,%rdi
  800420dbf0:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dbf7:	00 00 00 
  800420dbfa:	ff d0                	callq  *%rax
  800420dbfc:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dbff:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc03:	79 05                	jns    800420dc0a <sys_page_map+0x17e>
		return r;
  800420dc05:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc08:	eb 05                	jmp    800420dc0f <sys_page_map+0x183>
	return 0;
  800420dc0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dc0f:	c9                   	leaveq 
  800420dc10:	c3                   	retq   

000000800420dc11 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420dc11:	55                   	push   %rbp
  800420dc12:	48 89 e5             	mov    %rsp,%rbp
  800420dc15:	48 83 ec 20          	sub    $0x20,%rsp
  800420dc19:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dc1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420dc20:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dc24:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dc27:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dc2c:	48 89 ce             	mov    %rcx,%rsi
  800420dc2f:	89 c7                	mov    %eax,%edi
  800420dc31:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dc38:	00 00 00 
  800420dc3b:	ff d0                	callq  *%rax
  800420dc3d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc40:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc44:	79 05                	jns    800420dc4b <sys_page_unmap+0x3a>
		return r;
  800420dc46:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc49:	eb 4b                	jmp    800420dc96 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420dc4b:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dc52:	00 00 00 
  800420dc55:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420dc59:	77 0e                	ja     800420dc69 <sys_page_unmap+0x58>
  800420dc5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dc5f:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420dc64:	48 85 c0             	test   %rax,%rax
  800420dc67:	74 07                	je     800420dc70 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420dc69:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc6e:	eb 26                	jmp    800420dc96 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420dc70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dc74:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc7b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420dc7f:	48 89 d6             	mov    %rdx,%rsi
  800420dc82:	48 89 c7             	mov    %rax,%rdi
  800420dc85:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  800420dc8c:	00 00 00 
  800420dc8f:	ff d0                	callq  *%rax
	return 0;
  800420dc91:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dc96:	c9                   	leaveq 
  800420dc97:	c3                   	retq   

000000800420dc98 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420dc98:	55                   	push   %rbp
  800420dc99:	48 89 e5             	mov    %rsp,%rbp
  800420dc9c:	53                   	push   %rbx
  800420dc9d:	48 83 ec 48          	sub    $0x48,%rsp
  800420dca1:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420dca4:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420dca7:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420dcab:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420dcae:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dcb2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420dcb5:	ba 00 00 00 00       	mov    $0x0,%edx
  800420dcba:	48 89 ce             	mov    %rcx,%rsi
  800420dcbd:	89 c7                	mov    %eax,%edi
  800420dcbf:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dcc6:	00 00 00 
  800420dcc9:	ff d0                	callq  *%rax
  800420dccb:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dcce:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420dcd2:	79 08                	jns    800420dcdc <sys_ipc_try_send+0x44>
        return r;
  800420dcd4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dcd7:	e9 25 03 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420dcdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dce0:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420dce7:	83 f0 01             	xor    $0x1,%eax
  800420dcea:	84 c0                	test   %al,%al
  800420dcec:	74 0a                	je     800420dcf8 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420dcee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420dcf3:	e9 09 03 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420dcf8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dcff:	00 00 00 
  800420dd02:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420dd06:	0f 87 70 02 00 00    	ja     800420df7c <sys_ipc_try_send+0x2e4>
  800420dd0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dd10:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420dd17:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd1e:	00 00 00 
  800420dd21:	48 39 c2             	cmp    %rax,%rdx
  800420dd24:	0f 87 52 02 00 00    	ja     800420df7c <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420dd2a:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dd2d:	f7 d0                	not    %eax
  800420dd2f:	83 e0 05             	and    $0x5,%eax
  800420dd32:	85 c0                	test   %eax,%eax
  800420dd34:	75 0c                	jne    800420dd42 <sys_ipc_try_send+0xaa>
  800420dd36:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dd39:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dd3e:	85 c0                	test   %eax,%eax
  800420dd40:	74 60                	je     800420dda2 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420dd42:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420dd49:	00 00 00 
  800420dd4c:	ff d0                	callq  *%rax
  800420dd4e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420dd55:	00 00 00 
  800420dd58:	48 98                	cltq   
  800420dd5a:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd5e:	48 89 c1             	mov    %rax,%rcx
  800420dd61:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd65:	48 01 c8             	add    %rcx,%rax
  800420dd68:	48 01 d0             	add    %rdx,%rax
  800420dd6b:	48 83 c0 08          	add    $0x8,%rax
  800420dd6f:	48 8b 00             	mov    (%rax),%rax
  800420dd72:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dd78:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420dd7b:	89 c6                	mov    %eax,%esi
  800420dd7d:	48 bf 90 a2 21 04 80 	movabs $0x800421a290,%rdi
  800420dd84:	00 00 00 
  800420dd87:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd8c:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420dd93:	00 00 00 
  800420dd96:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420dd98:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dd9d:	e9 5f 02 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420dda2:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420dda9:	00 00 00 
  800420ddac:	ff d0                	callq  *%rax
  800420ddae:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ddb5:	00 00 00 
  800420ddb8:	48 98                	cltq   
  800420ddba:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddbe:	48 89 c1             	mov    %rax,%rcx
  800420ddc1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ddc5:	48 01 c8             	add    %rcx,%rax
  800420ddc8:	48 01 d0             	add    %rdx,%rax
  800420ddcb:	48 83 c0 08          	add    $0x8,%rax
  800420ddcf:	48 8b 00             	mov    (%rax),%rax
  800420ddd2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ddd9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420dddd:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420dde1:	48 89 ce             	mov    %rcx,%rsi
  800420dde4:	48 89 c7             	mov    %rax,%rdi
  800420dde7:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420ddee:	00 00 00 
  800420ddf1:	ff d0                	callq  *%rax
  800420ddf3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420ddf7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420ddfc:	75 61                	jne    800420de5f <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420ddfe:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420de05:	00 00 00 
  800420de08:	ff d0                	callq  *%rax
  800420de0a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de11:	00 00 00 
  800420de14:	48 98                	cltq   
  800420de16:	48 c1 e0 03          	shl    $0x3,%rax
  800420de1a:	48 89 c1             	mov    %rax,%rcx
  800420de1d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de21:	48 01 c8             	add    %rcx,%rax
  800420de24:	48 01 d0             	add    %rdx,%rax
  800420de27:	48 83 c0 08          	add    $0x8,%rax
  800420de2b:	48 8b 00             	mov    (%rax),%rax
  800420de2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420de34:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420de38:	89 c6                	mov    %eax,%esi
  800420de3a:	48 bf b8 a2 21 04 80 	movabs $0x800421a2b8,%rdi
  800420de41:	00 00 00 
  800420de44:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de49:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  800420de50:	00 00 00 
  800420de53:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420de55:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420de5a:	e9 a2 01 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420de5f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420de62:	83 e0 02             	and    $0x2,%eax
  800420de65:	85 c0                	test   %eax,%eax
  800420de67:	74 6c                	je     800420ded5 <sys_ipc_try_send+0x23d>
  800420de69:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420de6d:	48 8b 00             	mov    (%rax),%rax
  800420de70:	83 e0 02             	and    $0x2,%eax
  800420de73:	48 85 c0             	test   %rax,%rax
  800420de76:	75 5d                	jne    800420ded5 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420de78:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420de7f:	00 00 00 
  800420de82:	ff d0                	callq  *%rax
  800420de84:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de8b:	00 00 00 
  800420de8e:	48 98                	cltq   
  800420de90:	48 c1 e0 03          	shl    $0x3,%rax
  800420de94:	48 89 c1             	mov    %rax,%rcx
  800420de97:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de9b:	48 01 c8             	add    %rcx,%rax
  800420de9e:	48 01 d0             	add    %rdx,%rax
  800420dea1:	48 83 c0 08          	add    $0x8,%rax
  800420dea5:	48 8b 00             	mov    (%rax),%rax
  800420dea8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420deae:	89 c6                	mov    %eax,%esi
  800420deb0:	48 bf f0 a2 21 04 80 	movabs $0x800421a2f0,%rdi
  800420deb7:	00 00 00 
  800420deba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420debf:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420dec6:	00 00 00 
  800420dec9:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420decb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ded0:	e9 2c 01 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420ded5:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420ded8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dedc:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420dee3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dee7:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420deee:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420def2:	48 89 c7             	mov    %rax,%rdi
  800420def5:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420defc:	00 00 00 
  800420deff:	ff d0                	callq  *%rax
  800420df01:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420df04:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420df08:	79 63                	jns    800420df6d <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420df0a:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420df11:	00 00 00 
  800420df14:	ff d0                	callq  *%rax
  800420df16:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420df1d:	00 00 00 
  800420df20:	48 98                	cltq   
  800420df22:	48 c1 e0 03          	shl    $0x3,%rax
  800420df26:	48 89 c1             	mov    %rax,%rcx
  800420df29:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df2d:	48 01 c8             	add    %rcx,%rax
  800420df30:	48 01 d0             	add    %rdx,%rax
  800420df33:	48 83 c0 08          	add    $0x8,%rax
  800420df37:	48 8b 00             	mov    (%rax),%rax
  800420df3a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420df40:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420df43:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420df47:	89 c6                	mov    %eax,%esi
  800420df49:	48 bf 38 a3 21 04 80 	movabs $0x800421a338,%rdi
  800420df50:	00 00 00 
  800420df53:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df58:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  800420df5f:	00 00 00 
  800420df62:	41 ff d0             	callq  *%r8
            return r;
  800420df65:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420df68:	e9 94 00 00 00       	jmpq   800420e001 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420df6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df71:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420df74:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420df7a:	eb 0e                	jmp    800420df8a <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420df7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df80:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420df87:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420df8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df8e:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420df95:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420df99:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420dfa0:	00 00 00 
  800420dfa3:	ff d0                	callq  *%rax
  800420dfa5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420dfac:	00 00 00 
  800420dfaf:	48 98                	cltq   
  800420dfb1:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfb5:	48 89 c1             	mov    %rax,%rcx
  800420dfb8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfbc:	48 01 c8             	add    %rcx,%rax
  800420dfbf:	48 01 d0             	add    %rdx,%rax
  800420dfc2:	48 83 c0 08          	add    $0x8,%rax
  800420dfc6:	48 8b 00             	mov    (%rax),%rax
  800420dfc9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dfcf:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420dfd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dfd9:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420dfdc:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420dfe2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dfe6:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420dfed:	00 
    e->env_status = ENV_RUNNABLE;
  800420dfee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dff2:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420dff9:	00 00 00 
    return 0;
  800420dffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e001:	48 83 c4 48          	add    $0x48,%rsp
  800420e005:	5b                   	pop    %rbx
  800420e006:	5d                   	pop    %rbp
  800420e007:	c3                   	retq   

000000800420e008 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e008:	55                   	push   %rbp
  800420e009:	48 89 e5             	mov    %rsp,%rbp
  800420e00c:	48 83 ec 10          	sub    $0x10,%rsp
  800420e010:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e014:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e01b:	00 00 00 
  800420e01e:	ff d0                	callq  *%rax
  800420e020:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e027:	00 00 00 
  800420e02a:	48 98                	cltq   
  800420e02c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e030:	48 89 c1             	mov    %rax,%rcx
  800420e033:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e037:	48 01 c8             	add    %rcx,%rax
  800420e03a:	48 01 d0             	add    %rdx,%rax
  800420e03d:	48 83 c0 08          	add    $0x8,%rax
  800420e041:	48 8b 00             	mov    (%rax),%rax
  800420e044:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e04b:	84 c0                	test   %al,%al
  800420e04d:	74 2a                	je     800420e079 <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e04f:	48 ba 71 a3 21 04 80 	movabs $0x800421a371,%rdx
  800420e056:	00 00 00 
  800420e059:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e05e:	48 bf 82 a3 21 04 80 	movabs $0x800421a382,%rdi
  800420e065:	00 00 00 
  800420e068:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e06d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420e074:	00 00 00 
  800420e077:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420e079:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e080:	00 00 00 
  800420e083:	ff d0                	callq  *%rax
  800420e085:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e08c:	00 00 00 
  800420e08f:	48 98                	cltq   
  800420e091:	48 c1 e0 03          	shl    $0x3,%rax
  800420e095:	48 89 c1             	mov    %rax,%rcx
  800420e098:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e09c:	48 01 c8             	add    %rcx,%rax
  800420e09f:	48 01 d0             	add    %rdx,%rax
  800420e0a2:	48 83 c0 08          	add    $0x8,%rax
  800420e0a6:	48 8b 00             	mov    (%rax),%rax
  800420e0a9:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420e0b0:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e0b7:	00 00 00 
  800420e0ba:	ff d0                	callq  *%rax
  800420e0bc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e0c3:	00 00 00 
  800420e0c6:	48 98                	cltq   
  800420e0c8:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0cc:	48 89 c1             	mov    %rax,%rcx
  800420e0cf:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0d3:	48 01 c8             	add    %rcx,%rax
  800420e0d6:	48 01 d0             	add    %rdx,%rax
  800420e0d9:	48 83 c0 08          	add    $0x8,%rax
  800420e0dd:	48 8b 00             	mov    (%rax),%rax
  800420e0e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e0e4:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420e0eb:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e0f2:	00 00 00 
  800420e0f5:	ff d0                	callq  *%rax
  800420e0f7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e0fe:	00 00 00 
  800420e101:	48 98                	cltq   
  800420e103:	48 c1 e0 03          	shl    $0x3,%rax
  800420e107:	48 89 c1             	mov    %rax,%rcx
  800420e10a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e10e:	48 01 c8             	add    %rcx,%rax
  800420e111:	48 01 d0             	add    %rdx,%rax
  800420e114:	48 83 c0 08          	add    $0x8,%rax
  800420e118:	48 8b 00             	mov    (%rax),%rax
  800420e11b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e122:	00 00 00 
	sched_yield();
  800420e125:	48 b8 15 d2 20 04 80 	movabs $0x800420d215,%rax
  800420e12c:	00 00 00 
  800420e12f:	ff d0                	callq  *%rax

000000800420e131 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420e131:	55                   	push   %rbp
  800420e132:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420e135:	48 b8 20 88 21 04 80 	movabs $0x8004218820,%rax
  800420e13c:	00 00 00 
  800420e13f:	ff d0                	callq  *%rax
}
  800420e141:	5d                   	pop    %rbp
  800420e142:	c3                   	retq   

000000800420e143 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420e143:	55                   	push   %rbp
  800420e144:	48 89 e5             	mov    %rsp,%rbp
  800420e147:	48 83 ec 10          	sub    $0x10,%rsp
  800420e14b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e14f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420e153:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e15a:	00 00 00 
  800420e15d:	ff d0                	callq  *%rax
  800420e15f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e166:	00 00 00 
  800420e169:	48 98                	cltq   
  800420e16b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e16f:	48 89 c1             	mov    %rax,%rcx
  800420e172:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e176:	48 01 c8             	add    %rcx,%rax
  800420e179:	48 01 d0             	add    %rdx,%rax
  800420e17c:	48 83 c0 08          	add    $0x8,%rax
  800420e180:	48 8b 00             	mov    (%rax),%rax
  800420e183:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e187:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e18b:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e190:	48 89 c7             	mov    %rax,%rdi
  800420e193:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e19a:	00 00 00 
  800420e19d:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420e19f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e1a3:	89 c2                	mov    %eax,%edx
  800420e1a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e1a9:	89 d6                	mov    %edx,%esi
  800420e1ab:	48 89 c7             	mov    %rax,%rdi
  800420e1ae:	48 b8 a9 79 21 04 80 	movabs $0x80042179a9,%rax
  800420e1b5:	00 00 00 
  800420e1b8:	ff d0                	callq  *%rax
}
  800420e1ba:	c9                   	leaveq 
  800420e1bb:	c3                   	retq   

000000800420e1bc <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420e1bc:	55                   	push   %rbp
  800420e1bd:	48 89 e5             	mov    %rsp,%rbp
  800420e1c0:	48 83 ec 10          	sub    $0x10,%rsp
  800420e1c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e1c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420e1cc:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420e1d3:	00 00 00 
  800420e1d6:	ff d0                	callq  *%rax
  800420e1d8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e1df:	00 00 00 
  800420e1e2:	48 98                	cltq   
  800420e1e4:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1e8:	48 89 c1             	mov    %rax,%rcx
  800420e1eb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1ef:	48 01 c8             	add    %rcx,%rax
  800420e1f2:	48 01 d0             	add    %rdx,%rax
  800420e1f5:	48 83 c0 08          	add    $0x8,%rax
  800420e1f9:	48 8b 00             	mov    (%rax),%rax
  800420e1fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e200:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e204:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e209:	48 89 c7             	mov    %rax,%rdi
  800420e20c:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e213:	00 00 00 
  800420e216:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420e218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e21c:	89 c2                	mov    %eax,%edx
  800420e21e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e222:	89 d6                	mov    %edx,%esi
  800420e224:	48 89 c7             	mov    %rax,%rdi
  800420e227:	48 b8 18 7b 21 04 80 	movabs $0x8004217b18,%rax
  800420e22e:	00 00 00 
  800420e231:	ff d0                	callq  *%rax
}
  800420e233:	c9                   	leaveq 
  800420e234:	c3                   	retq   

000000800420e235 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420e235:	55                   	push   %rbp
  800420e236:	48 89 e5             	mov    %rsp,%rbp
  800420e239:	48 83 ec 30          	sub    $0x30,%rsp
  800420e23d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e241:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e245:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420e249:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420e24d:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420e251:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420e255:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
  800420e25a:	0f 87 0d 02 00 00    	ja     800420e46d <syscall+0x238>
  800420e260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e264:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420e26b:	00 
  800420e26c:	48 b8 98 a3 21 04 80 	movabs $0x800421a398,%rax
  800420e273:	00 00 00 
  800420e276:	48 01 d0             	add    %rdx,%rax
  800420e279:	48 8b 00             	mov    (%rax),%rax
  800420e27c:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420e27e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e282:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e286:	48 89 d6             	mov    %rdx,%rsi
  800420e289:	48 89 c7             	mov    %rax,%rdi
  800420e28c:	48 b8 fe d5 20 04 80 	movabs $0x800420d5fe,%rax
  800420e293:	00 00 00 
  800420e296:	ff d0                	callq  *%rax
		return 0;
  800420e298:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e29d:	e9 d2 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_cgetc:
		return sys_cgetc();
  800420e2a2:	48 b8 82 d6 20 04 80 	movabs $0x800420d682,%rax
  800420e2a9:	00 00 00 
  800420e2ac:	ff d0                	callq  *%rax
  800420e2ae:	48 98                	cltq   
  800420e2b0:	e9 bf 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_getenvid:
		return sys_getenvid();
  800420e2b5:	48 b8 94 d6 20 04 80 	movabs $0x800420d694,%rax
  800420e2bc:	00 00 00 
  800420e2bf:	ff d0                	callq  *%rax
  800420e2c1:	48 98                	cltq   
  800420e2c3:	e9 ac 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420e2c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2cc:	89 c7                	mov    %eax,%edi
  800420e2ce:	48 b8 d0 d6 20 04 80 	movabs $0x800420d6d0,%rax
  800420e2d5:	00 00 00 
  800420e2d8:	ff d0                	callq  *%rax
  800420e2da:	48 98                	cltq   
  800420e2dc:	e9 93 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420e2e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e2e5:	89 c2                	mov    %eax,%edx
  800420e2e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420e2eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2ef:	48 89 ce             	mov    %rcx,%rsi
  800420e2f2:	89 c7                	mov    %eax,%edi
  800420e2f4:	48 b8 a3 d9 20 04 80 	movabs $0x800420d9a3,%rax
  800420e2fb:	00 00 00 
  800420e2fe:	ff d0                	callq  *%rax
  800420e300:	48 98                	cltq   
  800420e302:	e9 6d 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420e307:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e30b:	89 c7                	mov    %eax,%edi
  800420e30d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420e311:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e315:	89 c2                	mov    %eax,%edx
  800420e317:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420e31b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e31f:	41 89 f8             	mov    %edi,%r8d
  800420e322:	89 c7                	mov    %eax,%edi
  800420e324:	48 b8 8c da 20 04 80 	movabs $0x800420da8c,%rax
  800420e32b:	00 00 00 
  800420e32e:	ff d0                	callq  *%rax
  800420e330:	48 98                	cltq   
  800420e332:	e9 3d 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420e337:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e33b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e33f:	48 89 d6             	mov    %rdx,%rsi
  800420e342:	89 c7                	mov    %eax,%edi
  800420e344:	48 b8 11 dc 20 04 80 	movabs $0x800420dc11,%rax
  800420e34b:	00 00 00 
  800420e34e:	ff d0                	callq  *%rax
  800420e350:	48 98                	cltq   
  800420e352:	e9 1d 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_exofork:
		return sys_exofork();
  800420e357:	48 b8 30 d7 20 04 80 	movabs $0x800420d730,%rax
  800420e35e:	00 00 00 
  800420e361:	ff d0                	callq  *%rax
  800420e363:	48 98                	cltq   
  800420e365:	e9 0a 01 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420e36a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e36e:	89 c2                	mov    %eax,%edx
  800420e370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e374:	89 d6                	mov    %edx,%esi
  800420e376:	89 c7                	mov    %eax,%edi
  800420e378:	48 b8 05 d8 20 04 80 	movabs $0x800420d805,%rax
  800420e37f:	00 00 00 
  800420e382:	ff d0                	callq  *%rax
  800420e384:	48 98                	cltq   
  800420e386:	e9 e9 00 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420e38b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e38f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e393:	48 89 d6             	mov    %rdx,%rsi
  800420e396:	89 c7                	mov    %eax,%edi
  800420e398:	48 b8 65 d8 20 04 80 	movabs $0x800420d865,%rax
  800420e39f:	00 00 00 
  800420e3a2:	ff d0                	callq  *%rax
  800420e3a4:	48 98                	cltq   
  800420e3a6:	e9 c9 00 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420e3ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e3af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3b3:	48 89 d6             	mov    %rdx,%rsi
  800420e3b6:	89 c7                	mov    %eax,%edi
  800420e3b8:	48 b8 53 d9 20 04 80 	movabs $0x800420d953,%rax
  800420e3bf:	00 00 00 
  800420e3c2:	ff d0                	callq  *%rax
  800420e3c4:	48 98                	cltq   
  800420e3c6:	e9 a9 00 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_yield:
		sys_yield();
  800420e3cb:	48 b8 20 d7 20 04 80 	movabs $0x800420d720,%rax
  800420e3d2:	00 00 00 
  800420e3d5:	ff d0                	callq  *%rax
		return 0;
  800420e3d7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e3dc:	e9 93 00 00 00       	jmpq   800420e474 <syscall+0x23f>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420e3e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e3e5:	89 c1                	mov    %eax,%ecx
  800420e3e7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e3eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e3ef:	89 c6                	mov    %eax,%esi
  800420e3f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3f5:	89 c7                	mov    %eax,%edi
  800420e3f7:	48 b8 98 dc 20 04 80 	movabs $0x800420dc98,%rax
  800420e3fe:	00 00 00 
  800420e401:	ff d0                	callq  *%rax
  800420e403:	48 98                	cltq   
  800420e405:	eb 6d                	jmp    800420e474 <syscall+0x23f>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420e407:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e40b:	48 89 c7             	mov    %rax,%rdi
  800420e40e:	48 b8 08 e0 20 04 80 	movabs $0x800420e008,%rax
  800420e415:	00 00 00 
  800420e418:	ff d0                	callq  *%rax
		return 0;
  800420e41a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e41f:	eb 53                	jmp    800420e474 <syscall+0x23f>
	case SYS_time_msec:
		return sys_time_msec();
  800420e421:	48 b8 31 e1 20 04 80 	movabs $0x800420e131,%rax
  800420e428:	00 00 00 
  800420e42b:	ff d0                	callq  *%rax
  800420e42d:	48 98                	cltq   
  800420e42f:	eb 43                	jmp    800420e474 <syscall+0x23f>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420e431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e435:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e439:	48 89 d6             	mov    %rdx,%rsi
  800420e43c:	48 89 c7             	mov    %rax,%rdi
  800420e43f:	48 b8 43 e1 20 04 80 	movabs $0x800420e143,%rax
  800420e446:	00 00 00 
  800420e449:	ff d0                	callq  *%rax
  800420e44b:	48 98                	cltq   
  800420e44d:	eb 25                	jmp    800420e474 <syscall+0x23f>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420e44f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e453:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e457:	48 89 d6             	mov    %rdx,%rsi
  800420e45a:	48 89 c7             	mov    %rax,%rdi
  800420e45d:	48 b8 bc e1 20 04 80 	movabs $0x800420e1bc,%rax
  800420e464:	00 00 00 
  800420e467:	ff d0                	callq  *%rax
  800420e469:	48 98                	cltq   
  800420e46b:	eb 07                	jmp    800420e474 <syscall+0x23f>
		sys_vmx_incr_vmdisk_number();
		return 0;
#endif

	default:
		return -E_NO_SYS;
  800420e46d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420e474:	c9                   	leaveq 
  800420e475:	c3                   	retq   

000000800420e476 <list_func_die>:
  800420e476:	55                   	push   %rbp
  800420e477:	48 89 e5             	mov    %rsp,%rbp
  800420e47a:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420e481:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420e488:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420e48f:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420e496:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e49d:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420e4a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e4a8:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e4af:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e4b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e4ba:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420e4c1:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e4c8:	48 89 d1             	mov    %rdx,%rcx
  800420e4cb:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e4d0:	48 89 ce             	mov    %rcx,%rsi
  800420e4d3:	48 89 c7             	mov    %rax,%rdi
  800420e4d6:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420e4dd:	00 00 00 
  800420e4e0:	ff d0                	callq  *%rax
  800420e4e2:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420e4e9:	00 
  800420e4ea:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e4f1:	00 
  800420e4f2:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e4f9:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e4fd:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420e501:	74 0a                	je     800420e50d <list_func_die+0x97>
  800420e503:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e508:	e9 cd 06 00 00       	jmpq   800420ebda <list_func_die+0x764>
  800420e50d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420e514:	ba 38 00 00 00       	mov    $0x38,%edx
  800420e519:	be 00 00 00 00       	mov    $0x0,%esi
  800420e51e:	48 89 c7             	mov    %rax,%rdi
  800420e521:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800420e528:	00 00 00 
  800420e52b:	ff d0                	callq  *%rax
  800420e52d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e534:	be 11 00 00 00       	mov    $0x11,%esi
  800420e539:	48 89 c7             	mov    %rax,%rdi
  800420e53c:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e543:	00 00 00 
  800420e546:	ff d0                	callq  *%rax
  800420e548:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420e54c:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e553:	be 12 00 00 00       	mov    $0x12,%esi
  800420e558:	48 89 c7             	mov    %rax,%rdi
  800420e55b:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e562:	00 00 00 
  800420e565:	ff d0                	callq  *%rax
  800420e567:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420e56b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420e570:	0f 84 5f 06 00 00    	je     800420ebd5 <list_func_die+0x75f>
  800420e576:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e57a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e57e:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e585:	0f 83 4a 06 00 00    	jae    800420ebd5 <list_func_die+0x75f>
  800420e58b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e590:	0f 84 3f 06 00 00    	je     800420ebd5 <list_func_die+0x75f>
  800420e596:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e59a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e59e:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e5a5:	0f 86 2a 06 00 00    	jbe    800420ebd5 <list_func_die+0x75f>
  800420e5ab:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5b2:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e5b9:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e5c0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e5c7:	48 89 10             	mov    %rdx,(%rax)
  800420e5ca:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5d1:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e5d8:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e5df:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420e5e3:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5ea:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420e5f1:	48 89 c7             	mov    %rax,%rdi
  800420e5f4:	48 b8 6b fc 20 04 80 	movabs $0x800420fc6b,%rax
  800420e5fb:	00 00 00 
  800420e5fe:	ff d0                	callq  *%rax
  800420e600:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420e607:	89 42 18             	mov    %eax,0x18(%rdx)
  800420e60a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e60e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420e612:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e619:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420e61d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e624:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e62b:	48 85 c0             	test   %rax,%rax
  800420e62e:	75 35                	jne    800420e665 <list_func_die+0x1ef>
  800420e630:	48 b9 40 a7 21 04 80 	movabs $0x800421a740,%rcx
  800420e637:	00 00 00 
  800420e63a:	48 ba 4c a7 21 04 80 	movabs $0x800421a74c,%rdx
  800420e641:	00 00 00 
  800420e644:	be 95 00 00 00       	mov    $0x95,%esi
  800420e649:	48 bf 61 a7 21 04 80 	movabs $0x800421a761,%rdi
  800420e650:	00 00 00 
  800420e653:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e658:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420e65f:	00 00 00 
  800420e662:	41 ff d0             	callq  *%r8
  800420e665:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e66c:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e673:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420e67a:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420e681:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e686:	48 89 c7             	mov    %rax,%rdi
  800420e689:	48 b8 cc 54 21 04 80 	movabs $0x80042154cc,%rax
  800420e690:	00 00 00 
  800420e693:	ff d0                	callq  *%rax
  800420e695:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420e69c:	89 c2                	mov    %eax,%edx
  800420e69e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e6a5:	89 50 08             	mov    %edx,0x8(%rax)
  800420e6a8:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e6af:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420e6b6:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e6bd:	00 00 00 
  800420e6c0:	48 8b 00             	mov    (%rax),%rax
  800420e6c3:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e6ca:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e6d1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e6d5:	48 89 c7             	mov    %rax,%rdi
  800420e6d8:	48 b8 7c 21 21 04 80 	movabs $0x800421217c,%rax
  800420e6df:	00 00 00 
  800420e6e2:	ff d0                	callq  *%rax
  800420e6e4:	83 f8 04             	cmp    $0x4,%eax
  800420e6e7:	0f 84 e1 04 00 00    	je     800420ebce <list_func_die+0x758>
  800420e6ed:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e6f4:	48 83 f8 05          	cmp    $0x5,%rax
  800420e6f8:	74 05                	je     800420e6ff <list_func_die+0x289>
  800420e6fa:	e9 cf 04 00 00       	jmpq   800420ebce <list_func_die+0x758>
  800420e6ff:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e706:	be 49 00 00 00       	mov    $0x49,%esi
  800420e70b:	48 89 c7             	mov    %rax,%rdi
  800420e70e:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e715:	00 00 00 
  800420e718:	ff d0                	callq  *%rax
  800420e71a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e71e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e723:	0f 84 d7 00 00 00    	je     800420e800 <list_func_die+0x38a>
  800420e729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e72d:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e731:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e735:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e739:	48 01 d0             	add    %rdx,%rax
  800420e73c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420e740:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e747:	00 00 00 
  800420e74a:	48 8b 08             	mov    (%rax),%rcx
  800420e74d:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e754:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420e758:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e75c:	48 8b 38             	mov    (%rax),%rdi
  800420e75f:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420e763:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420e767:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420e76c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420e770:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420e775:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420e779:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420e77e:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420e782:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420e787:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420e78b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420e790:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420e794:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420e799:	48 89 cf             	mov    %rcx,%rdi
  800420e79c:	48 b8 a2 1d 21 04 80 	movabs $0x8004211da2,%rax
  800420e7a3:	00 00 00 
  800420e7a6:	ff d0                	callq  *%rax
  800420e7a8:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e7af:	be 0b 00 00 00       	mov    $0xb,%esi
  800420e7b4:	48 89 c7             	mov    %rax,%rdi
  800420e7b7:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e7be:	00 00 00 
  800420e7c1:	ff d0                	callq  *%rax
  800420e7c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e7c7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e7cc:	74 0e                	je     800420e7dc <list_func_die+0x366>
  800420e7ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e7d2:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e7d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420e7da:	eb 24                	jmp    800420e800 <list_func_die+0x38a>
  800420e7dc:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e7e3:	be 49 00 00 00       	mov    $0x49,%esi
  800420e7e8:	48 89 c7             	mov    %rax,%rdi
  800420e7eb:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e7f2:	00 00 00 
  800420e7f5:	ff d0                	callq  *%rax
  800420e7f7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e7fb:	e9 1e ff ff ff       	jmpq   800420e71e <list_func_die+0x2a8>
  800420e800:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e807:	00 
  800420e808:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e80f:	be 02 00 00 00       	mov    $0x2,%esi
  800420e814:	48 89 c7             	mov    %rax,%rdi
  800420e817:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e81e:	00 00 00 
  800420e821:	ff d0                	callq  *%rax
  800420e823:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e827:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e82c:	0f 84 a2 00 00 00    	je     800420e8d4 <list_func_die+0x45e>
  800420e832:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e836:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420e83a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420e83e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e842:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420e846:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e84a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e84e:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e852:	48 83 f8 03          	cmp    $0x3,%rax
  800420e856:	72 7c                	jb     800420e8d4 <list_func_die+0x45e>
  800420e858:	48 83 f8 04          	cmp    $0x4,%rax
  800420e85c:	76 06                	jbe    800420e864 <list_func_die+0x3ee>
  800420e85e:	48 83 f8 0a          	cmp    $0xa,%rax
  800420e862:	75 70                	jne    800420e8d4 <list_func_die+0x45e>
  800420e864:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420e86b:	00 
  800420e86c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e870:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420e874:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420e878:	0f b6 00             	movzbl (%rax),%eax
  800420e87b:	88 45 af             	mov    %al,-0x51(%rbp)
  800420e87e:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420e883:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420e887:	75 4a                	jne    800420e8d3 <list_func_die+0x45d>
  800420e889:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e88d:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420e894:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420e89b:	48 89 c7             	mov    %rax,%rdi
  800420e89e:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  800420e8a5:	00 00 00 
  800420e8a8:	ff d0                	callq  *%rax
  800420e8aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e8ae:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e8b5:	48 89 c2             	mov    %rax,%rdx
  800420e8b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e8bc:	48 29 c2             	sub    %rax,%rdx
  800420e8bf:	48 89 d0             	mov    %rdx,%rax
  800420e8c2:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420e8c6:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e8cd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e8d1:	eb 00                	jmp    800420e8d3 <list_func_die+0x45d>
  800420e8d3:	90                   	nop
  800420e8d4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e8db:	8b 48 28             	mov    0x28(%rax),%ecx
  800420e8de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e8e2:	89 c2                	mov    %eax,%edx
  800420e8e4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e8eb:	48 63 c9             	movslq %ecx,%rcx
  800420e8ee:	48 83 c1 08          	add    $0x8,%rcx
  800420e8f2:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420e8f6:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e8fd:	8b 50 28             	mov    0x28(%rax),%edx
  800420e900:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e907:	48 63 d2             	movslq %edx,%rdx
  800420e90a:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420e90e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e912:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420e917:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e91e:	8b 40 28             	mov    0x28(%rax),%eax
  800420e921:	8d 50 01             	lea    0x1(%rax),%edx
  800420e924:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e92b:	89 50 28             	mov    %edx,0x28(%rax)
  800420e92e:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e935:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e93c:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e941:	48 89 ce             	mov    %rcx,%rsi
  800420e944:	48 89 c7             	mov    %rax,%rdi
  800420e947:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420e94e:	00 00 00 
  800420e951:	ff d0                	callq  *%rax
  800420e953:	e9 40 02 00 00       	jmpq   800420eb98 <list_func_die+0x722>
  800420e958:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e95f:	48 83 f8 05          	cmp    $0x5,%rax
  800420e963:	74 05                	je     800420e96a <list_func_die+0x4f4>
  800420e965:	e9 64 02 00 00       	jmpq   800420ebce <list_func_die+0x758>
  800420e96a:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e971:	be 49 00 00 00       	mov    $0x49,%esi
  800420e976:	48 89 c7             	mov    %rax,%rdi
  800420e979:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420e980:	00 00 00 
  800420e983:	ff d0                	callq  *%rax
  800420e985:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e989:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e98e:	0f 84 b1 00 00 00    	je     800420ea45 <list_func_die+0x5cf>
  800420e994:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e998:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e99c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e9a0:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e9a4:	48 01 d0             	add    %rdx,%rax
  800420e9a7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420e9ab:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e9b2:	00 00 00 
  800420e9b5:	48 8b 08             	mov    (%rax),%rcx
  800420e9b8:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e9bf:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420e9c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e9c7:	48 8b 38             	mov    (%rax),%rdi
  800420e9ca:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420e9ce:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420e9d2:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420e9d7:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420e9db:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420e9e0:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420e9e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420e9e9:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420e9ed:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420e9f2:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420e9f6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420e9fb:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420e9ff:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420ea04:	48 89 cf             	mov    %rcx,%rdi
  800420ea07:	48 b8 a2 1d 21 04 80 	movabs $0x8004211da2,%rax
  800420ea0e:	00 00 00 
  800420ea11:	ff d0                	callq  *%rax
  800420ea13:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ea1a:	be 0b 00 00 00       	mov    $0xb,%esi
  800420ea1f:	48 89 c7             	mov    %rax,%rdi
  800420ea22:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420ea29:	00 00 00 
  800420ea2c:	ff d0                	callq  *%rax
  800420ea2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea32:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea37:	74 0c                	je     800420ea45 <list_func_die+0x5cf>
  800420ea39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea3d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ea41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ea45:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ea4c:	00 
  800420ea4d:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ea54:	be 02 00 00 00       	mov    $0x2,%esi
  800420ea59:	48 89 c7             	mov    %rax,%rdi
  800420ea5c:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  800420ea63:	00 00 00 
  800420ea66:	ff d0                	callq  *%rax
  800420ea68:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea6c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea71:	0f 84 a2 00 00 00    	je     800420eb19 <list_func_die+0x6a3>
  800420ea77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea7b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ea7f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420ea83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea87:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420ea8b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420ea8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea93:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ea97:	48 83 f8 03          	cmp    $0x3,%rax
  800420ea9b:	72 7c                	jb     800420eb19 <list_func_die+0x6a3>
  800420ea9d:	48 83 f8 04          	cmp    $0x4,%rax
  800420eaa1:	76 06                	jbe    800420eaa9 <list_func_die+0x633>
  800420eaa3:	48 83 f8 0a          	cmp    $0xa,%rax
  800420eaa7:	75 70                	jne    800420eb19 <list_func_die+0x6a3>
  800420eaa9:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eab0:	00 
  800420eab1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eab5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420eab9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420eabd:	0f b6 00             	movzbl (%rax),%eax
  800420eac0:	88 45 97             	mov    %al,-0x69(%rbp)
  800420eac3:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420eac8:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420eacc:	75 4a                	jne    800420eb18 <list_func_die+0x6a2>
  800420eace:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ead2:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420ead9:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420eae0:	48 89 c7             	mov    %rax,%rdi
  800420eae3:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  800420eaea:	00 00 00 
  800420eaed:	ff d0                	callq  *%rax
  800420eaef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420eaf3:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420eafa:	48 89 c2             	mov    %rax,%rdx
  800420eafd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb01:	48 29 c2             	sub    %rax,%rdx
  800420eb04:	48 89 d0             	mov    %rdx,%rax
  800420eb07:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420eb0b:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420eb12:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420eb16:	eb 00                	jmp    800420eb18 <list_func_die+0x6a2>
  800420eb18:	90                   	nop
  800420eb19:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb20:	8b 48 28             	mov    0x28(%rax),%ecx
  800420eb23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb27:	89 c2                	mov    %eax,%edx
  800420eb29:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb30:	48 63 c9             	movslq %ecx,%rcx
  800420eb33:	48 83 c1 08          	add    $0x8,%rcx
  800420eb37:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420eb3b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb42:	8b 50 28             	mov    0x28(%rax),%edx
  800420eb45:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb4c:	48 63 d2             	movslq %edx,%rdx
  800420eb4f:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420eb53:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eb57:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420eb5c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb63:	8b 40 28             	mov    0x28(%rax),%eax
  800420eb66:	8d 50 01             	lea    0x1(%rax),%edx
  800420eb69:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb70:	89 50 28             	mov    %edx,0x28(%rax)
  800420eb73:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420eb7a:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420eb81:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420eb86:	48 89 ce             	mov    %rcx,%rsi
  800420eb89:	48 89 c7             	mov    %rax,%rdi
  800420eb8c:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420eb93:	00 00 00 
  800420eb96:	ff d0                	callq  *%rax
  800420eb98:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eb9f:	00 00 00 
  800420eba2:	48 8b 00             	mov    (%rax),%rax
  800420eba5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420eba9:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420ebb0:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420ebb7:	48 89 c7             	mov    %rax,%rdi
  800420ebba:	48 b8 38 1f 21 04 80 	movabs $0x8004211f38,%rax
  800420ebc1:	00 00 00 
  800420ebc4:	ff d0                	callq  *%rax
  800420ebc6:	85 c0                	test   %eax,%eax
  800420ebc8:	0f 84 8a fd ff ff    	je     800420e958 <list_func_die+0x4e2>
  800420ebce:	b8 01 00 00 00       	mov    $0x1,%eax
  800420ebd3:	eb 05                	jmp    800420ebda <list_func_die+0x764>
  800420ebd5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ebda:	c9                   	leaveq 
  800420ebdb:	c3                   	retq   

000000800420ebdc <debuginfo_rip>:
  800420ebdc:	55                   	push   %rbp
  800420ebdd:	48 89 e5             	mov    %rsp,%rbp
  800420ebe0:	53                   	push   %rbx
  800420ebe1:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420ebe8:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420ebef:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420ebf6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420ebfd:	00 
  800420ebfe:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420ec05:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ec09:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec10:	48 bb 72 a7 21 04 80 	movabs $0x800421a772,%rbx
  800420ec17:	00 00 00 
  800420ec1a:	48 89 18             	mov    %rbx,(%rax)
  800420ec1d:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec24:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420ec2b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec32:	48 bb 72 a7 21 04 80 	movabs $0x800421a772,%rbx
  800420ec39:	00 00 00 
  800420ec3c:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420ec40:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec47:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420ec4e:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec55:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ec5c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420ec60:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ec67:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420ec6e:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420ec75:	00 00 00 
  800420ec78:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420ec7f:	76 13                	jbe    800420ec94 <debuginfo_rip+0xb8>
  800420ec81:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420ec88:	00 00 00 
  800420ec8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ec8f:	e9 04 01 00 00       	jmpq   800420ed98 <debuginfo_rip+0x1bc>
  800420ec94:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ec9b:	00 00 00 
  800420ec9e:	ff d0                	callq  *%rax
  800420eca0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420eca7:	00 00 00 
  800420ecaa:	48 98                	cltq   
  800420ecac:	48 c1 e0 03          	shl    $0x3,%rax
  800420ecb0:	48 89 c1             	mov    %rax,%rcx
  800420ecb3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ecb7:	48 01 c8             	add    %rcx,%rax
  800420ecba:	48 01 d0             	add    %rdx,%rax
  800420ecbd:	48 83 c0 08          	add    $0x8,%rax
  800420ecc1:	48 8b 10             	mov    (%rax),%rdx
  800420ecc4:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420eccb:	00 00 00 
  800420ecce:	48 8b 00             	mov    (%rax),%rax
  800420ecd1:	48 39 c2             	cmp    %rax,%rdx
  800420ecd4:	0f 84 83 00 00 00    	je     800420ed5d <debuginfo_rip+0x181>
  800420ecda:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ece1:	00 00 00 
  800420ece4:	ff d0                	callq  *%rax
  800420ece6:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420eced:	00 00 00 
  800420ecf0:	48 98                	cltq   
  800420ecf2:	48 c1 e0 03          	shl    $0x3,%rax
  800420ecf6:	48 89 c1             	mov    %rax,%rcx
  800420ecf9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ecfd:	48 01 c8             	add    %rcx,%rax
  800420ed00:	48 01 d0             	add    %rdx,%rax
  800420ed03:	48 83 c0 08          	add    $0x8,%rax
  800420ed07:	48 8b 00             	mov    (%rax),%rax
  800420ed0a:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ed11:	48 89 c7             	mov    %rax,%rdi
  800420ed14:	48 b8 c7 56 21 04 80 	movabs $0x80042156c7,%rax
  800420ed1b:	00 00 00 
  800420ed1e:	ff d0                	callq  *%rax
  800420ed20:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ed27:	00 00 00 
  800420ed2a:	ff d0                	callq  *%rax
  800420ed2c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed33:	00 00 00 
  800420ed36:	48 98                	cltq   
  800420ed38:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed3c:	48 89 c1             	mov    %rax,%rcx
  800420ed3f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed43:	48 01 c8             	add    %rcx,%rax
  800420ed46:	48 01 d0             	add    %rdx,%rax
  800420ed49:	48 83 c0 08          	add    $0x8,%rax
  800420ed4d:	48 8b 10             	mov    (%rax),%rdx
  800420ed50:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420ed57:	00 00 00 
  800420ed5a:	48 89 10             	mov    %rdx,(%rax)
  800420ed5d:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800420ed64:	00 00 00 
  800420ed67:	ff d0                	callq  *%rax
  800420ed69:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed70:	00 00 00 
  800420ed73:	48 98                	cltq   
  800420ed75:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed79:	48 89 c1             	mov    %rax,%rcx
  800420ed7c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed80:	48 01 c8             	add    %rcx,%rax
  800420ed83:	48 01 d0             	add    %rdx,%rax
  800420ed86:	48 83 c0 08          	add    $0x8,%rax
  800420ed8a:	48 8b 00             	mov    (%rax),%rax
  800420ed8d:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ed94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ed98:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ed9f:	00 00 00 
  800420eda2:	48 8b 00             	mov    (%rax),%rax
  800420eda5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eda9:	48 89 d6             	mov    %rdx,%rsi
  800420edac:	48 89 c7             	mov    %rax,%rdi
  800420edaf:	48 b8 b0 0d 21 04 80 	movabs $0x8004210db0,%rax
  800420edb6:	00 00 00 
  800420edb9:	ff d0                	callq  *%rax
  800420edbb:	48 bf 7c a7 21 04 80 	movabs $0x800421a77c,%rdi
  800420edc2:	00 00 00 
  800420edc5:	48 b8 47 56 21 04 80 	movabs $0x8004215647,%rax
  800420edcc:	00 00 00 
  800420edcf:	ff d0                	callq  *%rax
  800420edd1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420edd5:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eddc:	00 00 00 
  800420eddf:	48 8b 00             	mov    (%rax),%rax
  800420ede2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420ede6:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420edea:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420edee:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420edf5:	00 00 00 
  800420edf8:	48 8b 00             	mov    (%rax),%rax
  800420edfb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420edff:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420ee03:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420ee07:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee0e:	00 00 00 
  800420ee11:	48 8b 00             	mov    (%rax),%rax
  800420ee14:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ee18:	48 85 c0             	test   %rax,%rax
  800420ee1b:	75 35                	jne    800420ee52 <debuginfo_rip+0x276>
  800420ee1d:	48 b9 88 a7 21 04 80 	movabs $0x800421a788,%rcx
  800420ee24:	00 00 00 
  800420ee27:	48 ba 4c a7 21 04 80 	movabs $0x800421a74c,%rdx
  800420ee2e:	00 00 00 
  800420ee31:	be 40 01 00 00       	mov    $0x140,%esi
  800420ee36:	48 bf 61 a7 21 04 80 	movabs $0x800421a761,%rdi
  800420ee3d:	00 00 00 
  800420ee40:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee45:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420ee4c:	00 00 00 
  800420ee4f:	41 ff d0             	callq  *%r8
  800420ee52:	e9 6f 01 00 00       	jmpq   800420efc6 <debuginfo_rip+0x3ea>
  800420ee57:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee5e:	00 00 00 
  800420ee61:	48 8b 00             	mov    (%rax),%rax
  800420ee64:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420ee68:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420ee6f:	be 00 00 00 00       	mov    $0x0,%esi
  800420ee74:	48 89 c7             	mov    %rax,%rdi
  800420ee77:	48 b8 38 1f 21 04 80 	movabs $0x8004211f38,%rax
  800420ee7e:	00 00 00 
  800420ee81:	ff d0                	callq  *%rax
  800420ee83:	83 f8 04             	cmp    $0x4,%eax
  800420ee86:	75 05                	jne    800420ee8d <debuginfo_rip+0x2b1>
  800420ee88:	e9 39 01 00 00       	jmpq   800420efc6 <debuginfo_rip+0x3ea>
  800420ee8d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ee91:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420ee98:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420ee9f:	00 00 00 00 
  800420eea3:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eeaa:	00 00 00 
  800420eead:	48 8b 00             	mov    (%rax),%rax
  800420eeb0:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420eeb7:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420eebe:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420eec2:	48 89 c7             	mov    %rax,%rdi
  800420eec5:	48 b8 7c 21 21 04 80 	movabs $0x800421217c,%rax
  800420eecc:	00 00 00 
  800420eecf:	ff d0                	callq  *%rax
  800420eed1:	83 f8 04             	cmp    $0x4,%eax
  800420eed4:	75 05                	jne    800420eedb <debuginfo_rip+0x2ff>
  800420eed6:	e9 eb 00 00 00       	jmpq   800420efc6 <debuginfo_rip+0x3ea>
  800420eedb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420eedf:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420eee6:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420eeed:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420eef4:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420eefb:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420ef02:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ef09:	48 89 ce             	mov    %rcx,%rsi
  800420ef0c:	48 89 c7             	mov    %rax,%rdi
  800420ef0f:	48 b8 76 e4 20 04 80 	movabs $0x800420e476,%rax
  800420ef16:	00 00 00 
  800420ef19:	ff d0                	callq  *%rax
  800420ef1b:	85 c0                	test   %eax,%eax
  800420ef1d:	74 30                	je     800420ef4f <debuginfo_rip+0x373>
  800420ef1f:	90                   	nop
  800420ef20:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef27:	00 00 00 
  800420ef2a:	48 8b 00             	mov    (%rax),%rax
  800420ef2d:	be 00 00 00 00       	mov    $0x0,%esi
  800420ef32:	48 89 c7             	mov    %rax,%rdi
  800420ef35:	48 b8 54 48 21 04 80 	movabs $0x8004214854,%rax
  800420ef3c:	00 00 00 
  800420ef3f:	ff d0                	callq  *%rax
  800420ef41:	83 f8 01             	cmp    $0x1,%eax
  800420ef44:	0f 85 bb 00 00 00    	jne    800420f005 <debuginfo_rip+0x429>
  800420ef4a:	e9 ac 00 00 00       	jmpq   800420effb <debuginfo_rip+0x41f>
  800420ef4f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef56:	00 00 00 
  800420ef59:	48 8b 00             	mov    (%rax),%rax
  800420ef5c:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420ef60:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420ef67:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420ef6e:	48 89 c7             	mov    %rax,%rdi
  800420ef71:	48 b8 38 1f 21 04 80 	movabs $0x8004211f38,%rax
  800420ef78:	00 00 00 
  800420ef7b:	ff d0                	callq  *%rax
  800420ef7d:	85 c0                	test   %eax,%eax
  800420ef7f:	79 02                	jns    800420ef83 <debuginfo_rip+0x3a7>
  800420ef81:	eb 43                	jmp    800420efc6 <debuginfo_rip+0x3ea>
  800420ef83:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420ef8a:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420ef91:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ef96:	48 89 ce             	mov    %rcx,%rsi
  800420ef99:	48 89 c7             	mov    %rax,%rdi
  800420ef9c:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  800420efa3:	00 00 00 
  800420efa6:	ff d0                	callq  *%rax
  800420efa8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420efac:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420efb3:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420efba:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420efc1:	e9 2e ff ff ff       	jmpq   800420eef4 <debuginfo_rip+0x318>
  800420efc6:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420efcd:	00 00 00 
  800420efd0:	48 8b 00             	mov    (%rax),%rax
  800420efd3:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420efd7:	48 89 d6             	mov    %rdx,%rsi
  800420efda:	48 89 c7             	mov    %rax,%rdi
  800420efdd:	48 b8 92 0e 21 04 80 	movabs $0x8004210e92,%rax
  800420efe4:	00 00 00 
  800420efe7:	ff d0                	callq  *%rax
  800420efe9:	85 c0                	test   %eax,%eax
  800420efeb:	0f 84 66 fe ff ff    	je     800420ee57 <debuginfo_rip+0x27b>
  800420eff1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420eff6:	e9 a0 00 00 00       	jmpq   800420f09b <debuginfo_rip+0x4bf>
  800420effb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f000:	e9 96 00 00 00       	jmpq   800420f09b <debuginfo_rip+0x4bf>
  800420f005:	48 b8 80 c6 22 04 80 	movabs $0x800422c680,%rax
  800420f00c:	00 00 00 
  800420f00f:	48 8b 08             	mov    (%rax),%rcx
  800420f012:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f019:	00 00 00 
  800420f01c:	48 8b 10             	mov    (%rax),%rdx
  800420f01f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f026:	00 00 00 
  800420f029:	48 8b 00             	mov    (%rax),%rax
  800420f02c:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420f033:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f039:	48 89 c7             	mov    %rax,%rdi
  800420f03c:	48 b8 bd 23 21 04 80 	movabs $0x80042123bd,%rax
  800420f043:	00 00 00 
  800420f046:	ff d0                	callq  *%rax
  800420f048:	85 c0                	test   %eax,%eax
  800420f04a:	75 4a                	jne    800420f096 <debuginfo_rip+0x4ba>
  800420f04c:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f053:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420f05a:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f061:	00 00 00 
  800420f064:	48 8b 30             	mov    (%rax),%rsi
  800420f067:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f06e:	00 00 00 
  800420f071:	48 8b 00             	mov    (%rax),%rax
  800420f074:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f07b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f081:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f087:	48 89 c7             	mov    %rax,%rdi
  800420f08a:	48 b8 c9 36 21 04 80 	movabs $0x80042136c9,%rax
  800420f091:	00 00 00 
  800420f094:	ff d0                	callq  *%rax
  800420f096:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f09b:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420f0a2:	5b                   	pop    %rbx
  800420f0a3:	5d                   	pop    %rbp
  800420f0a4:	c3                   	retq   

000000800420f0a5 <printnum>:
  800420f0a5:	55                   	push   %rbp
  800420f0a6:	48 89 e5             	mov    %rsp,%rbp
  800420f0a9:	53                   	push   %rbx
  800420f0aa:	48 83 ec 38          	sub    $0x38,%rsp
  800420f0ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f0b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420f0b6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420f0ba:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420f0bd:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420f0c1:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420f0c5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420f0c8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420f0cc:	77 3b                	ja     800420f109 <printnum+0x64>
  800420f0ce:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420f0d1:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420f0d5:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420f0d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f0dc:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f0e1:	48 f7 f3             	div    %rbx
  800420f0e4:	48 89 c2             	mov    %rax,%rdx
  800420f0e7:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420f0ea:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f0ed:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f0f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f0f5:	41 89 f9             	mov    %edi,%r9d
  800420f0f8:	48 89 c7             	mov    %rax,%rdi
  800420f0fb:	48 b8 a5 f0 20 04 80 	movabs $0x800420f0a5,%rax
  800420f102:	00 00 00 
  800420f105:	ff d0                	callq  *%rax
  800420f107:	eb 1e                	jmp    800420f127 <printnum+0x82>
  800420f109:	eb 12                	jmp    800420f11d <printnum+0x78>
  800420f10b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f10f:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420f112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f116:	48 89 ce             	mov    %rcx,%rsi
  800420f119:	89 d7                	mov    %edx,%edi
  800420f11b:	ff d0                	callq  *%rax
  800420f11d:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420f121:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420f125:	7f e4                	jg     800420f10b <printnum+0x66>
  800420f127:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f12a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f12e:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f133:	48 f7 f1             	div    %rcx
  800420f136:	48 89 d0             	mov    %rdx,%rax
  800420f139:	48 ba 90 a9 21 04 80 	movabs $0x800421a990,%rdx
  800420f140:	00 00 00 
  800420f143:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420f147:	0f be d0             	movsbl %al,%edx
  800420f14a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f14e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f152:	48 89 ce             	mov    %rcx,%rsi
  800420f155:	89 d7                	mov    %edx,%edi
  800420f157:	ff d0                	callq  *%rax
  800420f159:	48 83 c4 38          	add    $0x38,%rsp
  800420f15d:	5b                   	pop    %rbx
  800420f15e:	5d                   	pop    %rbp
  800420f15f:	c3                   	retq   

000000800420f160 <getuint>:
  800420f160:	55                   	push   %rbp
  800420f161:	48 89 e5             	mov    %rsp,%rbp
  800420f164:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f168:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f16c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f16f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f173:	7e 52                	jle    800420f1c7 <getuint+0x67>
  800420f175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f179:	8b 00                	mov    (%rax),%eax
  800420f17b:	83 f8 30             	cmp    $0x30,%eax
  800420f17e:	73 24                	jae    800420f1a4 <getuint+0x44>
  800420f180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f184:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f188:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f18c:	8b 00                	mov    (%rax),%eax
  800420f18e:	89 c0                	mov    %eax,%eax
  800420f190:	48 01 d0             	add    %rdx,%rax
  800420f193:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f197:	8b 12                	mov    (%rdx),%edx
  800420f199:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f19c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1a0:	89 0a                	mov    %ecx,(%rdx)
  800420f1a2:	eb 17                	jmp    800420f1bb <getuint+0x5b>
  800420f1a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1a8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f1ac:	48 89 d0             	mov    %rdx,%rax
  800420f1af:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f1b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1b7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f1bb:	48 8b 00             	mov    (%rax),%rax
  800420f1be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f1c2:	e9 a3 00 00 00       	jmpq   800420f26a <getuint+0x10a>
  800420f1c7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f1cb:	74 4f                	je     800420f21c <getuint+0xbc>
  800420f1cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1d1:	8b 00                	mov    (%rax),%eax
  800420f1d3:	83 f8 30             	cmp    $0x30,%eax
  800420f1d6:	73 24                	jae    800420f1fc <getuint+0x9c>
  800420f1d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1dc:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1e4:	8b 00                	mov    (%rax),%eax
  800420f1e6:	89 c0                	mov    %eax,%eax
  800420f1e8:	48 01 d0             	add    %rdx,%rax
  800420f1eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1ef:	8b 12                	mov    (%rdx),%edx
  800420f1f1:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f1f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1f8:	89 0a                	mov    %ecx,(%rdx)
  800420f1fa:	eb 17                	jmp    800420f213 <getuint+0xb3>
  800420f1fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f200:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f204:	48 89 d0             	mov    %rdx,%rax
  800420f207:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f20b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f20f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f213:	48 8b 00             	mov    (%rax),%rax
  800420f216:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f21a:	eb 4e                	jmp    800420f26a <getuint+0x10a>
  800420f21c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f220:	8b 00                	mov    (%rax),%eax
  800420f222:	83 f8 30             	cmp    $0x30,%eax
  800420f225:	73 24                	jae    800420f24b <getuint+0xeb>
  800420f227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f22b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f22f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f233:	8b 00                	mov    (%rax),%eax
  800420f235:	89 c0                	mov    %eax,%eax
  800420f237:	48 01 d0             	add    %rdx,%rax
  800420f23a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f23e:	8b 12                	mov    (%rdx),%edx
  800420f240:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f243:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f247:	89 0a                	mov    %ecx,(%rdx)
  800420f249:	eb 17                	jmp    800420f262 <getuint+0x102>
  800420f24b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f24f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f253:	48 89 d0             	mov    %rdx,%rax
  800420f256:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f25a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f25e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f262:	8b 00                	mov    (%rax),%eax
  800420f264:	89 c0                	mov    %eax,%eax
  800420f266:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f26a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f26e:	c9                   	leaveq 
  800420f26f:	c3                   	retq   

000000800420f270 <getint>:
  800420f270:	55                   	push   %rbp
  800420f271:	48 89 e5             	mov    %rsp,%rbp
  800420f274:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f278:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f27c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f27f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f283:	7e 52                	jle    800420f2d7 <getint+0x67>
  800420f285:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f289:	8b 00                	mov    (%rax),%eax
  800420f28b:	83 f8 30             	cmp    $0x30,%eax
  800420f28e:	73 24                	jae    800420f2b4 <getint+0x44>
  800420f290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f294:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f298:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f29c:	8b 00                	mov    (%rax),%eax
  800420f29e:	89 c0                	mov    %eax,%eax
  800420f2a0:	48 01 d0             	add    %rdx,%rax
  800420f2a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2a7:	8b 12                	mov    (%rdx),%edx
  800420f2a9:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f2ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2b0:	89 0a                	mov    %ecx,(%rdx)
  800420f2b2:	eb 17                	jmp    800420f2cb <getint+0x5b>
  800420f2b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2b8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f2bc:	48 89 d0             	mov    %rdx,%rax
  800420f2bf:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f2c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2c7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f2cb:	48 8b 00             	mov    (%rax),%rax
  800420f2ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f2d2:	e9 a3 00 00 00       	jmpq   800420f37a <getint+0x10a>
  800420f2d7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f2db:	74 4f                	je     800420f32c <getint+0xbc>
  800420f2dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2e1:	8b 00                	mov    (%rax),%eax
  800420f2e3:	83 f8 30             	cmp    $0x30,%eax
  800420f2e6:	73 24                	jae    800420f30c <getint+0x9c>
  800420f2e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f2f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2f4:	8b 00                	mov    (%rax),%eax
  800420f2f6:	89 c0                	mov    %eax,%eax
  800420f2f8:	48 01 d0             	add    %rdx,%rax
  800420f2fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2ff:	8b 12                	mov    (%rdx),%edx
  800420f301:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f304:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f308:	89 0a                	mov    %ecx,(%rdx)
  800420f30a:	eb 17                	jmp    800420f323 <getint+0xb3>
  800420f30c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f310:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f314:	48 89 d0             	mov    %rdx,%rax
  800420f317:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f31b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f31f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f323:	48 8b 00             	mov    (%rax),%rax
  800420f326:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f32a:	eb 4e                	jmp    800420f37a <getint+0x10a>
  800420f32c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f330:	8b 00                	mov    (%rax),%eax
  800420f332:	83 f8 30             	cmp    $0x30,%eax
  800420f335:	73 24                	jae    800420f35b <getint+0xeb>
  800420f337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f33b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f33f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f343:	8b 00                	mov    (%rax),%eax
  800420f345:	89 c0                	mov    %eax,%eax
  800420f347:	48 01 d0             	add    %rdx,%rax
  800420f34a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f34e:	8b 12                	mov    (%rdx),%edx
  800420f350:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f353:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f357:	89 0a                	mov    %ecx,(%rdx)
  800420f359:	eb 17                	jmp    800420f372 <getint+0x102>
  800420f35b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f35f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f363:	48 89 d0             	mov    %rdx,%rax
  800420f366:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f36a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f36e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f372:	8b 00                	mov    (%rax),%eax
  800420f374:	48 98                	cltq   
  800420f376:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f37a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f37e:	c9                   	leaveq 
  800420f37f:	c3                   	retq   

000000800420f380 <vprintfmt>:
  800420f380:	55                   	push   %rbp
  800420f381:	48 89 e5             	mov    %rsp,%rbp
  800420f384:	41 54                	push   %r12
  800420f386:	53                   	push   %rbx
  800420f387:	48 83 ec 60          	sub    $0x60,%rsp
  800420f38b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420f38f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420f393:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f397:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420f39b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f39f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f3a3:	48 8b 0a             	mov    (%rdx),%rcx
  800420f3a6:	48 89 08             	mov    %rcx,(%rax)
  800420f3a9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f3ad:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f3b1:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f3b5:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f3b9:	eb 17                	jmp    800420f3d2 <vprintfmt+0x52>
  800420f3bb:	85 db                	test   %ebx,%ebx
  800420f3bd:	0f 84 cc 04 00 00    	je     800420f88f <vprintfmt+0x50f>
  800420f3c3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f3c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f3cb:	48 89 d6             	mov    %rdx,%rsi
  800420f3ce:	89 df                	mov    %ebx,%edi
  800420f3d0:	ff d0                	callq  *%rax
  800420f3d2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f3d6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f3da:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f3de:	0f b6 00             	movzbl (%rax),%eax
  800420f3e1:	0f b6 d8             	movzbl %al,%ebx
  800420f3e4:	83 fb 25             	cmp    $0x25,%ebx
  800420f3e7:	75 d2                	jne    800420f3bb <vprintfmt+0x3b>
  800420f3e9:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420f3ed:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420f3f4:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f3fb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f402:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420f409:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f40d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f411:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f415:	0f b6 00             	movzbl (%rax),%eax
  800420f418:	0f b6 d8             	movzbl %al,%ebx
  800420f41b:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420f41e:	83 f8 55             	cmp    $0x55,%eax
  800420f421:	0f 87 34 04 00 00    	ja     800420f85b <vprintfmt+0x4db>
  800420f427:	89 c0                	mov    %eax,%eax
  800420f429:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f430:	00 
  800420f431:	48 b8 b8 a9 21 04 80 	movabs $0x800421a9b8,%rax
  800420f438:	00 00 00 
  800420f43b:	48 01 d0             	add    %rdx,%rax
  800420f43e:	48 8b 00             	mov    (%rax),%rax
  800420f441:	ff e0                	jmpq   *%rax
  800420f443:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420f447:	eb c0                	jmp    800420f409 <vprintfmt+0x89>
  800420f449:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420f44d:	eb ba                	jmp    800420f409 <vprintfmt+0x89>
  800420f44f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420f456:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420f459:	89 d0                	mov    %edx,%eax
  800420f45b:	c1 e0 02             	shl    $0x2,%eax
  800420f45e:	01 d0                	add    %edx,%eax
  800420f460:	01 c0                	add    %eax,%eax
  800420f462:	01 d8                	add    %ebx,%eax
  800420f464:	83 e8 30             	sub    $0x30,%eax
  800420f467:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f46a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f46e:	0f b6 00             	movzbl (%rax),%eax
  800420f471:	0f be d8             	movsbl %al,%ebx
  800420f474:	83 fb 2f             	cmp    $0x2f,%ebx
  800420f477:	7e 0c                	jle    800420f485 <vprintfmt+0x105>
  800420f479:	83 fb 39             	cmp    $0x39,%ebx
  800420f47c:	7f 07                	jg     800420f485 <vprintfmt+0x105>
  800420f47e:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420f483:	eb d1                	jmp    800420f456 <vprintfmt+0xd6>
  800420f485:	eb 58                	jmp    800420f4df <vprintfmt+0x15f>
  800420f487:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f48a:	83 f8 30             	cmp    $0x30,%eax
  800420f48d:	73 17                	jae    800420f4a6 <vprintfmt+0x126>
  800420f48f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f493:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f496:	89 c0                	mov    %eax,%eax
  800420f498:	48 01 d0             	add    %rdx,%rax
  800420f49b:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f49e:	83 c2 08             	add    $0x8,%edx
  800420f4a1:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f4a4:	eb 0f                	jmp    800420f4b5 <vprintfmt+0x135>
  800420f4a6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f4aa:	48 89 d0             	mov    %rdx,%rax
  800420f4ad:	48 83 c2 08          	add    $0x8,%rdx
  800420f4b1:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f4b5:	8b 00                	mov    (%rax),%eax
  800420f4b7:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f4ba:	eb 23                	jmp    800420f4df <vprintfmt+0x15f>
  800420f4bc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f4c0:	79 0c                	jns    800420f4ce <vprintfmt+0x14e>
  800420f4c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420f4c9:	e9 3b ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f4ce:	e9 36 ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f4d3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420f4da:	e9 2a ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f4df:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f4e3:	79 12                	jns    800420f4f7 <vprintfmt+0x177>
  800420f4e5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f4e8:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420f4eb:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f4f2:	e9 12 ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f4f7:	e9 0d ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f4fc:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420f500:	e9 04 ff ff ff       	jmpq   800420f409 <vprintfmt+0x89>
  800420f505:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f508:	83 f8 30             	cmp    $0x30,%eax
  800420f50b:	73 17                	jae    800420f524 <vprintfmt+0x1a4>
  800420f50d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f511:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f514:	89 c0                	mov    %eax,%eax
  800420f516:	48 01 d0             	add    %rdx,%rax
  800420f519:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f51c:	83 c2 08             	add    $0x8,%edx
  800420f51f:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f522:	eb 0f                	jmp    800420f533 <vprintfmt+0x1b3>
  800420f524:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f528:	48 89 d0             	mov    %rdx,%rax
  800420f52b:	48 83 c2 08          	add    $0x8,%rdx
  800420f52f:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f533:	8b 10                	mov    (%rax),%edx
  800420f535:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f539:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f53d:	48 89 ce             	mov    %rcx,%rsi
  800420f540:	89 d7                	mov    %edx,%edi
  800420f542:	ff d0                	callq  *%rax
  800420f544:	e9 40 03 00 00       	jmpq   800420f889 <vprintfmt+0x509>
  800420f549:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f54c:	83 f8 30             	cmp    $0x30,%eax
  800420f54f:	73 17                	jae    800420f568 <vprintfmt+0x1e8>
  800420f551:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f555:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f558:	89 c0                	mov    %eax,%eax
  800420f55a:	48 01 d0             	add    %rdx,%rax
  800420f55d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f560:	83 c2 08             	add    $0x8,%edx
  800420f563:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f566:	eb 0f                	jmp    800420f577 <vprintfmt+0x1f7>
  800420f568:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f56c:	48 89 d0             	mov    %rdx,%rax
  800420f56f:	48 83 c2 08          	add    $0x8,%rdx
  800420f573:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f577:	8b 18                	mov    (%rax),%ebx
  800420f579:	85 db                	test   %ebx,%ebx
  800420f57b:	79 02                	jns    800420f57f <vprintfmt+0x1ff>
  800420f57d:	f7 db                	neg    %ebx
  800420f57f:	83 fb 15             	cmp    $0x15,%ebx
  800420f582:	7f 16                	jg     800420f59a <vprintfmt+0x21a>
  800420f584:	48 b8 e0 a8 21 04 80 	movabs $0x800421a8e0,%rax
  800420f58b:	00 00 00 
  800420f58e:	48 63 d3             	movslq %ebx,%rdx
  800420f591:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420f595:	4d 85 e4             	test   %r12,%r12
  800420f598:	75 2e                	jne    800420f5c8 <vprintfmt+0x248>
  800420f59a:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f59e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f5a2:	89 d9                	mov    %ebx,%ecx
  800420f5a4:	48 ba a1 a9 21 04 80 	movabs $0x800421a9a1,%rdx
  800420f5ab:	00 00 00 
  800420f5ae:	48 89 c7             	mov    %rax,%rdi
  800420f5b1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f5b6:	49 b8 98 f8 20 04 80 	movabs $0x800420f898,%r8
  800420f5bd:	00 00 00 
  800420f5c0:	41 ff d0             	callq  *%r8
  800420f5c3:	e9 c1 02 00 00       	jmpq   800420f889 <vprintfmt+0x509>
  800420f5c8:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f5cc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f5d0:	4c 89 e1             	mov    %r12,%rcx
  800420f5d3:	48 ba aa a9 21 04 80 	movabs $0x800421a9aa,%rdx
  800420f5da:	00 00 00 
  800420f5dd:	48 89 c7             	mov    %rax,%rdi
  800420f5e0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f5e5:	49 b8 98 f8 20 04 80 	movabs $0x800420f898,%r8
  800420f5ec:	00 00 00 
  800420f5ef:	41 ff d0             	callq  *%r8
  800420f5f2:	e9 92 02 00 00       	jmpq   800420f889 <vprintfmt+0x509>
  800420f5f7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5fa:	83 f8 30             	cmp    $0x30,%eax
  800420f5fd:	73 17                	jae    800420f616 <vprintfmt+0x296>
  800420f5ff:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f603:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f606:	89 c0                	mov    %eax,%eax
  800420f608:	48 01 d0             	add    %rdx,%rax
  800420f60b:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f60e:	83 c2 08             	add    $0x8,%edx
  800420f611:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f614:	eb 0f                	jmp    800420f625 <vprintfmt+0x2a5>
  800420f616:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f61a:	48 89 d0             	mov    %rdx,%rax
  800420f61d:	48 83 c2 08          	add    $0x8,%rdx
  800420f621:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f625:	4c 8b 20             	mov    (%rax),%r12
  800420f628:	4d 85 e4             	test   %r12,%r12
  800420f62b:	75 0a                	jne    800420f637 <vprintfmt+0x2b7>
  800420f62d:	49 bc ad a9 21 04 80 	movabs $0x800421a9ad,%r12
  800420f634:	00 00 00 
  800420f637:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f63b:	7e 3f                	jle    800420f67c <vprintfmt+0x2fc>
  800420f63d:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420f641:	74 39                	je     800420f67c <vprintfmt+0x2fc>
  800420f643:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f646:	48 98                	cltq   
  800420f648:	48 89 c6             	mov    %rax,%rsi
  800420f64b:	4c 89 e7             	mov    %r12,%rdi
  800420f64e:	48 b8 99 fc 20 04 80 	movabs $0x800420fc99,%rax
  800420f655:	00 00 00 
  800420f658:	ff d0                	callq  *%rax
  800420f65a:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420f65d:	eb 17                	jmp    800420f676 <vprintfmt+0x2f6>
  800420f65f:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420f663:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f667:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f66b:	48 89 ce             	mov    %rcx,%rsi
  800420f66e:	89 d7                	mov    %edx,%edi
  800420f670:	ff d0                	callq  *%rax
  800420f672:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f676:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f67a:	7f e3                	jg     800420f65f <vprintfmt+0x2df>
  800420f67c:	eb 37                	jmp    800420f6b5 <vprintfmt+0x335>
  800420f67e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420f682:	74 1e                	je     800420f6a2 <vprintfmt+0x322>
  800420f684:	83 fb 1f             	cmp    $0x1f,%ebx
  800420f687:	7e 05                	jle    800420f68e <vprintfmt+0x30e>
  800420f689:	83 fb 7e             	cmp    $0x7e,%ebx
  800420f68c:	7e 14                	jle    800420f6a2 <vprintfmt+0x322>
  800420f68e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f692:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f696:	48 89 d6             	mov    %rdx,%rsi
  800420f699:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420f69e:	ff d0                	callq  *%rax
  800420f6a0:	eb 0f                	jmp    800420f6b1 <vprintfmt+0x331>
  800420f6a2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f6a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f6aa:	48 89 d6             	mov    %rdx,%rsi
  800420f6ad:	89 df                	mov    %ebx,%edi
  800420f6af:	ff d0                	callq  *%rax
  800420f6b1:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f6b5:	4c 89 e0             	mov    %r12,%rax
  800420f6b8:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420f6bc:	0f b6 00             	movzbl (%rax),%eax
  800420f6bf:	0f be d8             	movsbl %al,%ebx
  800420f6c2:	85 db                	test   %ebx,%ebx
  800420f6c4:	74 10                	je     800420f6d6 <vprintfmt+0x356>
  800420f6c6:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f6ca:	78 b2                	js     800420f67e <vprintfmt+0x2fe>
  800420f6cc:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420f6d0:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f6d4:	79 a8                	jns    800420f67e <vprintfmt+0x2fe>
  800420f6d6:	eb 16                	jmp    800420f6ee <vprintfmt+0x36e>
  800420f6d8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f6dc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f6e0:	48 89 d6             	mov    %rdx,%rsi
  800420f6e3:	bf 20 00 00 00       	mov    $0x20,%edi
  800420f6e8:	ff d0                	callq  *%rax
  800420f6ea:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f6ee:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f6f2:	7f e4                	jg     800420f6d8 <vprintfmt+0x358>
  800420f6f4:	e9 90 01 00 00       	jmpq   800420f889 <vprintfmt+0x509>
  800420f6f9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f6fd:	be 03 00 00 00       	mov    $0x3,%esi
  800420f702:	48 89 c7             	mov    %rax,%rdi
  800420f705:	48 b8 70 f2 20 04 80 	movabs $0x800420f270,%rax
  800420f70c:	00 00 00 
  800420f70f:	ff d0                	callq  *%rax
  800420f711:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f719:	48 85 c0             	test   %rax,%rax
  800420f71c:	79 1d                	jns    800420f73b <vprintfmt+0x3bb>
  800420f71e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f722:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f726:	48 89 d6             	mov    %rdx,%rsi
  800420f729:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420f72e:	ff d0                	callq  *%rax
  800420f730:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f734:	48 f7 d8             	neg    %rax
  800420f737:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f73b:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f742:	e9 d5 00 00 00       	jmpq   800420f81c <vprintfmt+0x49c>
  800420f747:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f74b:	be 03 00 00 00       	mov    $0x3,%esi
  800420f750:	48 89 c7             	mov    %rax,%rdi
  800420f753:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800420f75a:	00 00 00 
  800420f75d:	ff d0                	callq  *%rax
  800420f75f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f763:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f76a:	e9 ad 00 00 00       	jmpq   800420f81c <vprintfmt+0x49c>
  800420f76f:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f773:	be 03 00 00 00       	mov    $0x3,%esi
  800420f778:	48 89 c7             	mov    %rax,%rdi
  800420f77b:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800420f782:	00 00 00 
  800420f785:	ff d0                	callq  *%rax
  800420f787:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f78b:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800420f792:	e9 85 00 00 00       	jmpq   800420f81c <vprintfmt+0x49c>
  800420f797:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f79b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f79f:	48 89 d6             	mov    %rdx,%rsi
  800420f7a2:	bf 30 00 00 00       	mov    $0x30,%edi
  800420f7a7:	ff d0                	callq  *%rax
  800420f7a9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f7ad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f7b1:	48 89 d6             	mov    %rdx,%rsi
  800420f7b4:	bf 78 00 00 00       	mov    $0x78,%edi
  800420f7b9:	ff d0                	callq  *%rax
  800420f7bb:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f7be:	83 f8 30             	cmp    $0x30,%eax
  800420f7c1:	73 17                	jae    800420f7da <vprintfmt+0x45a>
  800420f7c3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f7c7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f7ca:	89 c0                	mov    %eax,%eax
  800420f7cc:	48 01 d0             	add    %rdx,%rax
  800420f7cf:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f7d2:	83 c2 08             	add    $0x8,%edx
  800420f7d5:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f7d8:	eb 0f                	jmp    800420f7e9 <vprintfmt+0x469>
  800420f7da:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f7de:	48 89 d0             	mov    %rdx,%rax
  800420f7e1:	48 83 c2 08          	add    $0x8,%rdx
  800420f7e5:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f7e9:	48 8b 00             	mov    (%rax),%rax
  800420f7ec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7f0:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f7f7:	eb 23                	jmp    800420f81c <vprintfmt+0x49c>
  800420f7f9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7fd:	be 03 00 00 00       	mov    $0x3,%esi
  800420f802:	48 89 c7             	mov    %rax,%rdi
  800420f805:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800420f80c:	00 00 00 
  800420f80f:	ff d0                	callq  *%rax
  800420f811:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f815:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f81c:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420f821:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420f824:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420f827:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f82b:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f82f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f833:	45 89 c1             	mov    %r8d,%r9d
  800420f836:	41 89 f8             	mov    %edi,%r8d
  800420f839:	48 89 c7             	mov    %rax,%rdi
  800420f83c:	48 b8 a5 f0 20 04 80 	movabs $0x800420f0a5,%rax
  800420f843:	00 00 00 
  800420f846:	ff d0                	callq  *%rax
  800420f848:	eb 3f                	jmp    800420f889 <vprintfmt+0x509>
  800420f84a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f84e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f852:	48 89 d6             	mov    %rdx,%rsi
  800420f855:	89 df                	mov    %ebx,%edi
  800420f857:	ff d0                	callq  *%rax
  800420f859:	eb 2e                	jmp    800420f889 <vprintfmt+0x509>
  800420f85b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f85f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f863:	48 89 d6             	mov    %rdx,%rsi
  800420f866:	bf 25 00 00 00       	mov    $0x25,%edi
  800420f86b:	ff d0                	callq  *%rax
  800420f86d:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f872:	eb 05                	jmp    800420f879 <vprintfmt+0x4f9>
  800420f874:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f879:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f87d:	48 83 e8 01          	sub    $0x1,%rax
  800420f881:	0f b6 00             	movzbl (%rax),%eax
  800420f884:	3c 25                	cmp    $0x25,%al
  800420f886:	75 ec                	jne    800420f874 <vprintfmt+0x4f4>
  800420f888:	90                   	nop
  800420f889:	90                   	nop
  800420f88a:	e9 43 fb ff ff       	jmpq   800420f3d2 <vprintfmt+0x52>
  800420f88f:	48 83 c4 60          	add    $0x60,%rsp
  800420f893:	5b                   	pop    %rbx
  800420f894:	41 5c                	pop    %r12
  800420f896:	5d                   	pop    %rbp
  800420f897:	c3                   	retq   

000000800420f898 <printfmt>:
  800420f898:	55                   	push   %rbp
  800420f899:	48 89 e5             	mov    %rsp,%rbp
  800420f89c:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420f8a3:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420f8aa:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420f8b1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420f8b8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420f8bf:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420f8c6:	84 c0                	test   %al,%al
  800420f8c8:	74 20                	je     800420f8ea <printfmt+0x52>
  800420f8ca:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420f8ce:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420f8d2:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420f8d6:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420f8da:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420f8de:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420f8e2:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420f8e6:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420f8ea:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420f8f1:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420f8f8:	00 00 00 
  800420f8fb:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420f902:	00 00 00 
  800420f905:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420f909:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420f910:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f917:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420f91e:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420f925:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420f92c:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420f933:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420f93a:	48 89 c7             	mov    %rax,%rdi
  800420f93d:	48 b8 80 f3 20 04 80 	movabs $0x800420f380,%rax
  800420f944:	00 00 00 
  800420f947:	ff d0                	callq  *%rax
  800420f949:	c9                   	leaveq 
  800420f94a:	c3                   	retq   

000000800420f94b <sprintputch>:
  800420f94b:	55                   	push   %rbp
  800420f94c:	48 89 e5             	mov    %rsp,%rbp
  800420f94f:	48 83 ec 10          	sub    $0x10,%rsp
  800420f953:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f956:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f95a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f95e:	8b 40 10             	mov    0x10(%rax),%eax
  800420f961:	8d 50 01             	lea    0x1(%rax),%edx
  800420f964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f968:	89 50 10             	mov    %edx,0x10(%rax)
  800420f96b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f96f:	48 8b 10             	mov    (%rax),%rdx
  800420f972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f976:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f97a:	48 39 c2             	cmp    %rax,%rdx
  800420f97d:	73 17                	jae    800420f996 <sprintputch+0x4b>
  800420f97f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f983:	48 8b 00             	mov    (%rax),%rax
  800420f986:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420f98a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f98e:	48 89 0a             	mov    %rcx,(%rdx)
  800420f991:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420f994:	88 10                	mov    %dl,(%rax)
  800420f996:	c9                   	leaveq 
  800420f997:	c3                   	retq   

000000800420f998 <vsnprintf>:
  800420f998:	55                   	push   %rbp
  800420f999:	48 89 e5             	mov    %rsp,%rbp
  800420f99c:	48 83 ec 50          	sub    $0x50,%rsp
  800420f9a0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420f9a4:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420f9a7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420f9ab:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420f9af:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420f9b3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420f9b7:	48 8b 0a             	mov    (%rdx),%rcx
  800420f9ba:	48 89 08             	mov    %rcx,(%rax)
  800420f9bd:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f9c1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f9c5:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f9c9:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f9cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f9d1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f9d5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420f9d8:	48 98                	cltq   
  800420f9da:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420f9de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f9e2:	48 01 d0             	add    %rdx,%rax
  800420f9e5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f9e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f9f0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f9f5:	74 06                	je     800420f9fd <vsnprintf+0x65>
  800420f9f7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420f9fb:	7f 07                	jg     800420fa04 <vsnprintf+0x6c>
  800420f9fd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420fa02:	eb 2f                	jmp    800420fa33 <vsnprintf+0x9b>
  800420fa04:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420fa08:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420fa0c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420fa10:	48 89 c6             	mov    %rax,%rsi
  800420fa13:	48 bf 4b f9 20 04 80 	movabs $0x800420f94b,%rdi
  800420fa1a:	00 00 00 
  800420fa1d:	48 b8 80 f3 20 04 80 	movabs $0x800420f380,%rax
  800420fa24:	00 00 00 
  800420fa27:	ff d0                	callq  *%rax
  800420fa29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fa2d:	c6 00 00             	movb   $0x0,(%rax)
  800420fa30:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420fa33:	c9                   	leaveq 
  800420fa34:	c3                   	retq   

000000800420fa35 <snprintf>:
  800420fa35:	55                   	push   %rbp
  800420fa36:	48 89 e5             	mov    %rsp,%rbp
  800420fa39:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420fa40:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420fa47:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420fa4d:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fa54:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fa5b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fa62:	84 c0                	test   %al,%al
  800420fa64:	74 20                	je     800420fa86 <snprintf+0x51>
  800420fa66:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fa6a:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fa6e:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fa72:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fa76:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fa7a:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fa7e:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fa82:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fa86:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  800420fa8d:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420fa94:	00 00 00 
  800420fa97:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420fa9e:	00 00 00 
  800420faa1:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420faa5:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420faac:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fab3:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420faba:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420fac1:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420fac8:	48 8b 0a             	mov    (%rdx),%rcx
  800420facb:	48 89 08             	mov    %rcx,(%rax)
  800420face:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fad2:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fad6:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fada:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fade:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420fae5:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420faec:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420faf2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420faf9:	48 89 c7             	mov    %rax,%rdi
  800420fafc:	48 b8 98 f9 20 04 80 	movabs $0x800420f998,%rax
  800420fb03:	00 00 00 
  800420fb06:	ff d0                	callq  *%rax
  800420fb08:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  800420fb0e:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800420fb14:	c9                   	leaveq 
  800420fb15:	c3                   	retq   

000000800420fb16 <readline>:
  800420fb16:	55                   	push   %rbp
  800420fb17:	48 89 e5             	mov    %rsp,%rbp
  800420fb1a:	48 83 ec 20          	sub    $0x20,%rsp
  800420fb1e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fb22:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fb27:	74 22                	je     800420fb4b <readline+0x35>
  800420fb29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb2d:	48 89 c6             	mov    %rax,%rsi
  800420fb30:	48 bf 68 ac 21 04 80 	movabs $0x800421ac68,%rdi
  800420fb37:	00 00 00 
  800420fb3a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fb3f:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420fb46:	00 00 00 
  800420fb49:	ff d2                	callq  *%rdx
  800420fb4b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fb52:	bf 00 00 00 00       	mov    $0x0,%edi
  800420fb57:	48 b8 7a 13 20 04 80 	movabs $0x800420137a,%rax
  800420fb5e:	00 00 00 
  800420fb61:	ff d0                	callq  *%rax
  800420fb63:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420fb66:	48 b8 58 13 20 04 80 	movabs $0x8004201358,%rax
  800420fb6d:	00 00 00 
  800420fb70:	ff d0                	callq  *%rax
  800420fb72:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420fb75:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420fb79:	79 30                	jns    800420fbab <readline+0x95>
  800420fb7b:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800420fb7f:	74 20                	je     800420fba1 <readline+0x8b>
  800420fb81:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fb84:	89 c6                	mov    %eax,%esi
  800420fb86:	48 bf 6b ac 21 04 80 	movabs $0x800421ac6b,%rdi
  800420fb8d:	00 00 00 
  800420fb90:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fb95:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800420fb9c:	00 00 00 
  800420fb9f:	ff d2                	callq  *%rdx
  800420fba1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fba6:	e9 be 00 00 00       	jmpq   800420fc69 <readline+0x153>
  800420fbab:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420fbaf:	74 06                	je     800420fbb7 <readline+0xa1>
  800420fbb1:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420fbb5:	75 26                	jne    800420fbdd <readline+0xc7>
  800420fbb7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420fbbb:	7e 20                	jle    800420fbdd <readline+0xc7>
  800420fbbd:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fbc1:	74 11                	je     800420fbd4 <readline+0xbe>
  800420fbc3:	bf 08 00 00 00       	mov    $0x8,%edi
  800420fbc8:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fbcf:	00 00 00 
  800420fbd2:	ff d0                	callq  *%rax
  800420fbd4:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420fbd8:	e9 87 00 00 00       	jmpq   800420fc64 <readline+0x14e>
  800420fbdd:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420fbe1:	7e 3f                	jle    800420fc22 <readline+0x10c>
  800420fbe3:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420fbea:	7f 36                	jg     800420fc22 <readline+0x10c>
  800420fbec:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fbf0:	74 11                	je     800420fc03 <readline+0xed>
  800420fbf2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fbf5:	89 c7                	mov    %eax,%edi
  800420fbf7:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fbfe:	00 00 00 
  800420fc01:	ff d0                	callq  *%rax
  800420fc03:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fc06:	8d 50 01             	lea    0x1(%rax),%edx
  800420fc09:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800420fc0c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420fc0f:	89 d1                	mov    %edx,%ecx
  800420fc11:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fc18:	00 00 00 
  800420fc1b:	48 98                	cltq   
  800420fc1d:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420fc20:	eb 42                	jmp    800420fc64 <readline+0x14e>
  800420fc22:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800420fc26:	74 06                	je     800420fc2e <readline+0x118>
  800420fc28:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800420fc2c:	75 36                	jne    800420fc64 <readline+0x14e>
  800420fc2e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fc32:	74 11                	je     800420fc45 <readline+0x12f>
  800420fc34:	bf 0a 00 00 00       	mov    $0xa,%edi
  800420fc39:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fc40:	00 00 00 
  800420fc43:	ff d0                	callq  *%rax
  800420fc45:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fc4c:	00 00 00 
  800420fc4f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fc52:	48 98                	cltq   
  800420fc54:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800420fc58:	48 b8 a0 d2 49 04 80 	movabs $0x800449d2a0,%rax
  800420fc5f:	00 00 00 
  800420fc62:	eb 05                	jmp    800420fc69 <readline+0x153>
  800420fc64:	e9 fd fe ff ff       	jmpq   800420fb66 <readline+0x50>
  800420fc69:	c9                   	leaveq 
  800420fc6a:	c3                   	retq   

000000800420fc6b <strlen>:
  800420fc6b:	55                   	push   %rbp
  800420fc6c:	48 89 e5             	mov    %rsp,%rbp
  800420fc6f:	48 83 ec 18          	sub    $0x18,%rsp
  800420fc73:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fc77:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fc7e:	eb 09                	jmp    800420fc89 <strlen+0x1e>
  800420fc80:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fc84:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fc89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc8d:	0f b6 00             	movzbl (%rax),%eax
  800420fc90:	84 c0                	test   %al,%al
  800420fc92:	75 ec                	jne    800420fc80 <strlen+0x15>
  800420fc94:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fc97:	c9                   	leaveq 
  800420fc98:	c3                   	retq   

000000800420fc99 <strnlen>:
  800420fc99:	55                   	push   %rbp
  800420fc9a:	48 89 e5             	mov    %rsp,%rbp
  800420fc9d:	48 83 ec 20          	sub    $0x20,%rsp
  800420fca1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fca5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fca9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fcb0:	eb 0e                	jmp    800420fcc0 <strnlen+0x27>
  800420fcb2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fcb6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fcbb:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  800420fcc0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420fcc5:	74 0b                	je     800420fcd2 <strnlen+0x39>
  800420fcc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fccb:	0f b6 00             	movzbl (%rax),%eax
  800420fcce:	84 c0                	test   %al,%al
  800420fcd0:	75 e0                	jne    800420fcb2 <strnlen+0x19>
  800420fcd2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fcd5:	c9                   	leaveq 
  800420fcd6:	c3                   	retq   

000000800420fcd7 <strcpy>:
  800420fcd7:	55                   	push   %rbp
  800420fcd8:	48 89 e5             	mov    %rsp,%rbp
  800420fcdb:	48 83 ec 20          	sub    $0x20,%rsp
  800420fcdf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fce3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fce7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fceb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fcef:	90                   	nop
  800420fcf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcf4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fcf8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fcfc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fd00:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fd04:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fd08:	0f b6 12             	movzbl (%rdx),%edx
  800420fd0b:	88 10                	mov    %dl,(%rax)
  800420fd0d:	0f b6 00             	movzbl (%rax),%eax
  800420fd10:	84 c0                	test   %al,%al
  800420fd12:	75 dc                	jne    800420fcf0 <strcpy+0x19>
  800420fd14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fd18:	c9                   	leaveq 
  800420fd19:	c3                   	retq   

000000800420fd1a <strcat>:
  800420fd1a:	55                   	push   %rbp
  800420fd1b:	48 89 e5             	mov    %rsp,%rbp
  800420fd1e:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd22:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd26:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd2e:	48 89 c7             	mov    %rax,%rdi
  800420fd31:	48 b8 6b fc 20 04 80 	movabs $0x800420fc6b,%rax
  800420fd38:	00 00 00 
  800420fd3b:	ff d0                	callq  *%rax
  800420fd3d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420fd40:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fd43:	48 63 d0             	movslq %eax,%rdx
  800420fd46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd4a:	48 01 c2             	add    %rax,%rdx
  800420fd4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fd51:	48 89 c6             	mov    %rax,%rsi
  800420fd54:	48 89 d7             	mov    %rdx,%rdi
  800420fd57:	48 b8 d7 fc 20 04 80 	movabs $0x800420fcd7,%rax
  800420fd5e:	00 00 00 
  800420fd61:	ff d0                	callq  *%rax
  800420fd63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd67:	c9                   	leaveq 
  800420fd68:	c3                   	retq   

000000800420fd69 <strncpy>:
  800420fd69:	55                   	push   %rbp
  800420fd6a:	48 89 e5             	mov    %rsp,%rbp
  800420fd6d:	48 83 ec 28          	sub    $0x28,%rsp
  800420fd71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fd7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fd85:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420fd8c:	00 
  800420fd8d:	eb 2a                	jmp    800420fdb9 <strncpy+0x50>
  800420fd8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd93:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fd97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fd9b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fd9f:	0f b6 12             	movzbl (%rdx),%edx
  800420fda2:	88 10                	mov    %dl,(%rax)
  800420fda4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fda8:	0f b6 00             	movzbl (%rax),%eax
  800420fdab:	84 c0                	test   %al,%al
  800420fdad:	74 05                	je     800420fdb4 <strncpy+0x4b>
  800420fdaf:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  800420fdb4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420fdb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fdbd:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fdc1:	72 cc                	jb     800420fd8f <strncpy+0x26>
  800420fdc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fdc7:	c9                   	leaveq 
  800420fdc8:	c3                   	retq   

000000800420fdc9 <strlcpy>:
  800420fdc9:	55                   	push   %rbp
  800420fdca:	48 89 e5             	mov    %rsp,%rbp
  800420fdcd:	48 83 ec 28          	sub    $0x28,%rsp
  800420fdd1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fdd5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fdd9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fde1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fde5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fdea:	74 3d                	je     800420fe29 <strlcpy+0x60>
  800420fdec:	eb 1d                	jmp    800420fe0b <strlcpy+0x42>
  800420fdee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdf2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fdf6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fdfa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fdfe:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fe02:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fe06:	0f b6 12             	movzbl (%rdx),%edx
  800420fe09:	88 10                	mov    %dl,(%rax)
  800420fe0b:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  800420fe10:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fe15:	74 0b                	je     800420fe22 <strlcpy+0x59>
  800420fe17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fe1b:	0f b6 00             	movzbl (%rax),%eax
  800420fe1e:	84 c0                	test   %al,%al
  800420fe20:	75 cc                	jne    800420fdee <strlcpy+0x25>
  800420fe22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe26:	c6 00 00             	movb   $0x0,(%rax)
  800420fe29:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe31:	48 29 c2             	sub    %rax,%rdx
  800420fe34:	48 89 d0             	mov    %rdx,%rax
  800420fe37:	c9                   	leaveq 
  800420fe38:	c3                   	retq   

000000800420fe39 <strcmp>:
  800420fe39:	55                   	push   %rbp
  800420fe3a:	48 89 e5             	mov    %rsp,%rbp
  800420fe3d:	48 83 ec 10          	sub    $0x10,%rsp
  800420fe41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fe45:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fe49:	eb 0a                	jmp    800420fe55 <strcmp+0x1c>
  800420fe4b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420fe50:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420fe55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe59:	0f b6 00             	movzbl (%rax),%eax
  800420fe5c:	84 c0                	test   %al,%al
  800420fe5e:	74 12                	je     800420fe72 <strcmp+0x39>
  800420fe60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe64:	0f b6 10             	movzbl (%rax),%edx
  800420fe67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fe6b:	0f b6 00             	movzbl (%rax),%eax
  800420fe6e:	38 c2                	cmp    %al,%dl
  800420fe70:	74 d9                	je     800420fe4b <strcmp+0x12>
  800420fe72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe76:	0f b6 00             	movzbl (%rax),%eax
  800420fe79:	0f b6 d0             	movzbl %al,%edx
  800420fe7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fe80:	0f b6 00             	movzbl (%rax),%eax
  800420fe83:	0f b6 c0             	movzbl %al,%eax
  800420fe86:	29 c2                	sub    %eax,%edx
  800420fe88:	89 d0                	mov    %edx,%eax
  800420fe8a:	c9                   	leaveq 
  800420fe8b:	c3                   	retq   

000000800420fe8c <strncmp>:
  800420fe8c:	55                   	push   %rbp
  800420fe8d:	48 89 e5             	mov    %rsp,%rbp
  800420fe90:	48 83 ec 18          	sub    $0x18,%rsp
  800420fe94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fe98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fe9c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fea0:	eb 0f                	jmp    800420feb1 <strncmp+0x25>
  800420fea2:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  800420fea7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420feac:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420feb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420feb6:	74 1d                	je     800420fed5 <strncmp+0x49>
  800420feb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420febc:	0f b6 00             	movzbl (%rax),%eax
  800420febf:	84 c0                	test   %al,%al
  800420fec1:	74 12                	je     800420fed5 <strncmp+0x49>
  800420fec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fec7:	0f b6 10             	movzbl (%rax),%edx
  800420feca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fece:	0f b6 00             	movzbl (%rax),%eax
  800420fed1:	38 c2                	cmp    %al,%dl
  800420fed3:	74 cd                	je     800420fea2 <strncmp+0x16>
  800420fed5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420feda:	75 07                	jne    800420fee3 <strncmp+0x57>
  800420fedc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fee1:	eb 18                	jmp    800420fefb <strncmp+0x6f>
  800420fee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fee7:	0f b6 00             	movzbl (%rax),%eax
  800420feea:	0f b6 d0             	movzbl %al,%edx
  800420feed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fef1:	0f b6 00             	movzbl (%rax),%eax
  800420fef4:	0f b6 c0             	movzbl %al,%eax
  800420fef7:	29 c2                	sub    %eax,%edx
  800420fef9:	89 d0                	mov    %edx,%eax
  800420fefb:	c9                   	leaveq 
  800420fefc:	c3                   	retq   

000000800420fefd <strchr>:
  800420fefd:	55                   	push   %rbp
  800420fefe:	48 89 e5             	mov    %rsp,%rbp
  800420ff01:	48 83 ec 0c          	sub    $0xc,%rsp
  800420ff05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ff09:	89 f0                	mov    %esi,%eax
  800420ff0b:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420ff0e:	eb 17                	jmp    800420ff27 <strchr+0x2a>
  800420ff10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff14:	0f b6 00             	movzbl (%rax),%eax
  800420ff17:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420ff1a:	75 06                	jne    800420ff22 <strchr+0x25>
  800420ff1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff20:	eb 15                	jmp    800420ff37 <strchr+0x3a>
  800420ff22:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff2b:	0f b6 00             	movzbl (%rax),%eax
  800420ff2e:	84 c0                	test   %al,%al
  800420ff30:	75 de                	jne    800420ff10 <strchr+0x13>
  800420ff32:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff37:	c9                   	leaveq 
  800420ff38:	c3                   	retq   

000000800420ff39 <strfind>:
  800420ff39:	55                   	push   %rbp
  800420ff3a:	48 89 e5             	mov    %rsp,%rbp
  800420ff3d:	48 83 ec 0c          	sub    $0xc,%rsp
  800420ff41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ff45:	89 f0                	mov    %esi,%eax
  800420ff47:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420ff4a:	eb 13                	jmp    800420ff5f <strfind+0x26>
  800420ff4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff50:	0f b6 00             	movzbl (%rax),%eax
  800420ff53:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420ff56:	75 02                	jne    800420ff5a <strfind+0x21>
  800420ff58:	eb 10                	jmp    800420ff6a <strfind+0x31>
  800420ff5a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff63:	0f b6 00             	movzbl (%rax),%eax
  800420ff66:	84 c0                	test   %al,%al
  800420ff68:	75 e2                	jne    800420ff4c <strfind+0x13>
  800420ff6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff6e:	c9                   	leaveq 
  800420ff6f:	c3                   	retq   

000000800420ff70 <memset>:
  800420ff70:	55                   	push   %rbp
  800420ff71:	48 89 e5             	mov    %rsp,%rbp
  800420ff74:	48 83 ec 18          	sub    $0x18,%rsp
  800420ff78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ff7c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  800420ff7f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ff83:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff88:	75 06                	jne    800420ff90 <memset+0x20>
  800420ff8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff8e:	eb 69                	jmp    800420fff9 <memset+0x89>
  800420ff90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff94:	83 e0 03             	and    $0x3,%eax
  800420ff97:	48 85 c0             	test   %rax,%rax
  800420ff9a:	75 48                	jne    800420ffe4 <memset+0x74>
  800420ff9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffa0:	83 e0 03             	and    $0x3,%eax
  800420ffa3:	48 85 c0             	test   %rax,%rax
  800420ffa6:	75 3c                	jne    800420ffe4 <memset+0x74>
  800420ffa8:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  800420ffaf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ffb2:	c1 e0 18             	shl    $0x18,%eax
  800420ffb5:	89 c2                	mov    %eax,%edx
  800420ffb7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ffba:	c1 e0 10             	shl    $0x10,%eax
  800420ffbd:	09 c2                	or     %eax,%edx
  800420ffbf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ffc2:	c1 e0 08             	shl    $0x8,%eax
  800420ffc5:	09 d0                	or     %edx,%eax
  800420ffc7:	09 45 f4             	or     %eax,-0xc(%rbp)
  800420ffca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffce:	48 c1 e8 02          	shr    $0x2,%rax
  800420ffd2:	48 89 c1             	mov    %rax,%rcx
  800420ffd5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ffd9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ffdc:	48 89 d7             	mov    %rdx,%rdi
  800420ffdf:	fc                   	cld    
  800420ffe0:	f3 ab                	rep stos %eax,%es:(%rdi)
  800420ffe2:	eb 11                	jmp    800420fff5 <memset+0x85>
  800420ffe4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ffe8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ffeb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ffef:	48 89 d7             	mov    %rdx,%rdi
  800420fff2:	fc                   	cld    
  800420fff3:	f3 aa                	rep stos %al,%es:(%rdi)
  800420fff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fff9:	c9                   	leaveq 
  800420fffa:	c3                   	retq   

000000800420fffb <memmove>:
  800420fffb:	55                   	push   %rbp
  800420fffc:	48 89 e5             	mov    %rsp,%rbp
  800420ffff:	48 83 ec 28          	sub    $0x28,%rsp
  8004210003:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210007:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421000b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421000f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210013:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210017:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421001b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421001f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210023:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210027:	0f 83 88 00 00 00    	jae    80042100b5 <memmove+0xba>
  800421002d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210031:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210035:	48 01 d0             	add    %rdx,%rax
  8004210038:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421003c:	76 77                	jbe    80042100b5 <memmove+0xba>
  800421003e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210042:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210046:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421004a:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  800421004e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210052:	83 e0 03             	and    $0x3,%eax
  8004210055:	48 85 c0             	test   %rax,%rax
  8004210058:	75 3b                	jne    8004210095 <memmove+0x9a>
  800421005a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421005e:	83 e0 03             	and    $0x3,%eax
  8004210061:	48 85 c0             	test   %rax,%rax
  8004210064:	75 2f                	jne    8004210095 <memmove+0x9a>
  8004210066:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421006a:	83 e0 03             	and    $0x3,%eax
  800421006d:	48 85 c0             	test   %rax,%rax
  8004210070:	75 23                	jne    8004210095 <memmove+0x9a>
  8004210072:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210076:	48 83 e8 04          	sub    $0x4,%rax
  800421007a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421007e:	48 83 ea 04          	sub    $0x4,%rdx
  8004210082:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210086:	48 c1 e9 02          	shr    $0x2,%rcx
  800421008a:	48 89 c7             	mov    %rax,%rdi
  800421008d:	48 89 d6             	mov    %rdx,%rsi
  8004210090:	fd                   	std    
  8004210091:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210093:	eb 1d                	jmp    80042100b2 <memmove+0xb7>
  8004210095:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210099:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421009d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100a1:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  80042100a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100a9:	48 89 d7             	mov    %rdx,%rdi
  80042100ac:	48 89 c1             	mov    %rax,%rcx
  80042100af:	fd                   	std    
  80042100b0:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042100b2:	fc                   	cld    
  80042100b3:	eb 57                	jmp    800421010c <memmove+0x111>
  80042100b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100b9:	83 e0 03             	and    $0x3,%eax
  80042100bc:	48 85 c0             	test   %rax,%rax
  80042100bf:	75 36                	jne    80042100f7 <memmove+0xfc>
  80042100c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100c5:	83 e0 03             	and    $0x3,%eax
  80042100c8:	48 85 c0             	test   %rax,%rax
  80042100cb:	75 2a                	jne    80042100f7 <memmove+0xfc>
  80042100cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100d1:	83 e0 03             	and    $0x3,%eax
  80042100d4:	48 85 c0             	test   %rax,%rax
  80042100d7:	75 1e                	jne    80042100f7 <memmove+0xfc>
  80042100d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100dd:	48 c1 e8 02          	shr    $0x2,%rax
  80042100e1:	48 89 c1             	mov    %rax,%rcx
  80042100e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042100ec:	48 89 c7             	mov    %rax,%rdi
  80042100ef:	48 89 d6             	mov    %rdx,%rsi
  80042100f2:	fc                   	cld    
  80042100f3:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042100f5:	eb 15                	jmp    800421010c <memmove+0x111>
  80042100f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042100ff:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210103:	48 89 c7             	mov    %rax,%rdi
  8004210106:	48 89 d6             	mov    %rdx,%rsi
  8004210109:	fc                   	cld    
  800421010a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  800421010c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210110:	c9                   	leaveq 
  8004210111:	c3                   	retq   

0000008004210112 <memcpy>:
  8004210112:	55                   	push   %rbp
  8004210113:	48 89 e5             	mov    %rsp,%rbp
  8004210116:	48 83 ec 18          	sub    $0x18,%rsp
  800421011a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421011e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210122:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210126:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421012a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421012e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210132:	48 89 ce             	mov    %rcx,%rsi
  8004210135:	48 89 c7             	mov    %rax,%rdi
  8004210138:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  800421013f:	00 00 00 
  8004210142:	ff d0                	callq  *%rax
  8004210144:	c9                   	leaveq 
  8004210145:	c3                   	retq   

0000008004210146 <memcmp>:
  8004210146:	55                   	push   %rbp
  8004210147:	48 89 e5             	mov    %rsp,%rbp
  800421014a:	48 83 ec 28          	sub    $0x28,%rsp
  800421014e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210152:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210156:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421015a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421015e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210162:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210166:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421016a:	eb 36                	jmp    80042101a2 <memcmp+0x5c>
  800421016c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210170:	0f b6 10             	movzbl (%rax),%edx
  8004210173:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210177:	0f b6 00             	movzbl (%rax),%eax
  800421017a:	38 c2                	cmp    %al,%dl
  800421017c:	74 1a                	je     8004210198 <memcmp+0x52>
  800421017e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210182:	0f b6 00             	movzbl (%rax),%eax
  8004210185:	0f b6 d0             	movzbl %al,%edx
  8004210188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421018c:	0f b6 00             	movzbl (%rax),%eax
  800421018f:	0f b6 c0             	movzbl %al,%eax
  8004210192:	29 c2                	sub    %eax,%edx
  8004210194:	89 d0                	mov    %edx,%eax
  8004210196:	eb 20                	jmp    80042101b8 <memcmp+0x72>
  8004210198:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421019d:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042101a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042101a6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042101aa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042101ae:	48 85 c0             	test   %rax,%rax
  80042101b1:	75 b9                	jne    800421016c <memcmp+0x26>
  80042101b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042101b8:	c9                   	leaveq 
  80042101b9:	c3                   	retq   

00000080042101ba <memfind>:
  80042101ba:	55                   	push   %rbp
  80042101bb:	48 89 e5             	mov    %rsp,%rbp
  80042101be:	48 83 ec 28          	sub    $0x28,%rsp
  80042101c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042101c6:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042101c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042101cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042101d1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101d5:	48 01 d0             	add    %rdx,%rax
  80042101d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101dc:	eb 15                	jmp    80042101f3 <memfind+0x39>
  80042101de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101e2:	0f b6 10             	movzbl (%rax),%edx
  80042101e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042101e8:	38 c2                	cmp    %al,%dl
  80042101ea:	75 02                	jne    80042101ee <memfind+0x34>
  80042101ec:	eb 0f                	jmp    80042101fd <memfind+0x43>
  80042101ee:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042101f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042101fb:	72 e1                	jb     80042101de <memfind+0x24>
  80042101fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210201:	c9                   	leaveq 
  8004210202:	c3                   	retq   

0000008004210203 <strtol>:
  8004210203:	55                   	push   %rbp
  8004210204:	48 89 e5             	mov    %rsp,%rbp
  8004210207:	48 83 ec 34          	sub    $0x34,%rsp
  800421020b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421020f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210213:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210216:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421021d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210224:	00 
  8004210225:	eb 05                	jmp    800421022c <strtol+0x29>
  8004210227:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421022c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210230:	0f b6 00             	movzbl (%rax),%eax
  8004210233:	3c 20                	cmp    $0x20,%al
  8004210235:	74 f0                	je     8004210227 <strtol+0x24>
  8004210237:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421023b:	0f b6 00             	movzbl (%rax),%eax
  800421023e:	3c 09                	cmp    $0x9,%al
  8004210240:	74 e5                	je     8004210227 <strtol+0x24>
  8004210242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210246:	0f b6 00             	movzbl (%rax),%eax
  8004210249:	3c 2b                	cmp    $0x2b,%al
  800421024b:	75 07                	jne    8004210254 <strtol+0x51>
  800421024d:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210252:	eb 17                	jmp    800421026b <strtol+0x68>
  8004210254:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210258:	0f b6 00             	movzbl (%rax),%eax
  800421025b:	3c 2d                	cmp    $0x2d,%al
  800421025d:	75 0c                	jne    800421026b <strtol+0x68>
  800421025f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210264:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  800421026b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421026f:	74 06                	je     8004210277 <strtol+0x74>
  8004210271:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210275:	75 28                	jne    800421029f <strtol+0x9c>
  8004210277:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421027b:	0f b6 00             	movzbl (%rax),%eax
  800421027e:	3c 30                	cmp    $0x30,%al
  8004210280:	75 1d                	jne    800421029f <strtol+0x9c>
  8004210282:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210286:	48 83 c0 01          	add    $0x1,%rax
  800421028a:	0f b6 00             	movzbl (%rax),%eax
  800421028d:	3c 78                	cmp    $0x78,%al
  800421028f:	75 0e                	jne    800421029f <strtol+0x9c>
  8004210291:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210296:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  800421029d:	eb 2c                	jmp    80042102cb <strtol+0xc8>
  800421029f:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042102a3:	75 19                	jne    80042102be <strtol+0xbb>
  80042102a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102a9:	0f b6 00             	movzbl (%rax),%eax
  80042102ac:	3c 30                	cmp    $0x30,%al
  80042102ae:	75 0e                	jne    80042102be <strtol+0xbb>
  80042102b0:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042102b5:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  80042102bc:	eb 0d                	jmp    80042102cb <strtol+0xc8>
  80042102be:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042102c2:	75 07                	jne    80042102cb <strtol+0xc8>
  80042102c4:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  80042102cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102cf:	0f b6 00             	movzbl (%rax),%eax
  80042102d2:	3c 2f                	cmp    $0x2f,%al
  80042102d4:	7e 1d                	jle    80042102f3 <strtol+0xf0>
  80042102d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102da:	0f b6 00             	movzbl (%rax),%eax
  80042102dd:	3c 39                	cmp    $0x39,%al
  80042102df:	7f 12                	jg     80042102f3 <strtol+0xf0>
  80042102e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102e5:	0f b6 00             	movzbl (%rax),%eax
  80042102e8:	0f be c0             	movsbl %al,%eax
  80042102eb:	83 e8 30             	sub    $0x30,%eax
  80042102ee:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042102f1:	eb 4e                	jmp    8004210341 <strtol+0x13e>
  80042102f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102f7:	0f b6 00             	movzbl (%rax),%eax
  80042102fa:	3c 60                	cmp    $0x60,%al
  80042102fc:	7e 1d                	jle    800421031b <strtol+0x118>
  80042102fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210302:	0f b6 00             	movzbl (%rax),%eax
  8004210305:	3c 7a                	cmp    $0x7a,%al
  8004210307:	7f 12                	jg     800421031b <strtol+0x118>
  8004210309:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421030d:	0f b6 00             	movzbl (%rax),%eax
  8004210310:	0f be c0             	movsbl %al,%eax
  8004210313:	83 e8 57             	sub    $0x57,%eax
  8004210316:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210319:	eb 26                	jmp    8004210341 <strtol+0x13e>
  800421031b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421031f:	0f b6 00             	movzbl (%rax),%eax
  8004210322:	3c 40                	cmp    $0x40,%al
  8004210324:	7e 48                	jle    800421036e <strtol+0x16b>
  8004210326:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421032a:	0f b6 00             	movzbl (%rax),%eax
  800421032d:	3c 5a                	cmp    $0x5a,%al
  800421032f:	7f 3d                	jg     800421036e <strtol+0x16b>
  8004210331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210335:	0f b6 00             	movzbl (%rax),%eax
  8004210338:	0f be c0             	movsbl %al,%eax
  800421033b:	83 e8 37             	sub    $0x37,%eax
  800421033e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210341:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210344:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210347:	7c 02                	jl     800421034b <strtol+0x148>
  8004210349:	eb 23                	jmp    800421036e <strtol+0x16b>
  800421034b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210350:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210353:	48 98                	cltq   
  8004210355:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800421035a:	48 89 c2             	mov    %rax,%rdx
  800421035d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210360:	48 98                	cltq   
  8004210362:	48 01 d0             	add    %rdx,%rax
  8004210365:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210369:	e9 5d ff ff ff       	jmpq   80042102cb <strtol+0xc8>
  800421036e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210373:	74 0b                	je     8004210380 <strtol+0x17d>
  8004210375:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210379:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421037d:	48 89 10             	mov    %rdx,(%rax)
  8004210380:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210384:	74 09                	je     800421038f <strtol+0x18c>
  8004210386:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421038a:	48 f7 d8             	neg    %rax
  800421038d:	eb 04                	jmp    8004210393 <strtol+0x190>
  800421038f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210393:	c9                   	leaveq 
  8004210394:	c3                   	retq   

0000008004210395 <strstr>:
  8004210395:	55                   	push   %rbp
  8004210396:	48 89 e5             	mov    %rsp,%rbp
  8004210399:	48 83 ec 30          	sub    $0x30,%rsp
  800421039d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042103a1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042103a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042103a9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042103ad:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042103b1:	0f b6 00             	movzbl (%rax),%eax
  80042103b4:	88 45 ff             	mov    %al,-0x1(%rbp)
  80042103b7:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  80042103bb:	75 06                	jne    80042103c3 <strstr+0x2e>
  80042103bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103c1:	eb 6b                	jmp    800421042e <strstr+0x99>
  80042103c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042103c7:	48 89 c7             	mov    %rax,%rdi
  80042103ca:	48 b8 6b fc 20 04 80 	movabs $0x800420fc6b,%rax
  80042103d1:	00 00 00 
  80042103d4:	ff d0                	callq  *%rax
  80042103d6:	48 98                	cltq   
  80042103d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042103dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042103e4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042103e8:	0f b6 00             	movzbl (%rax),%eax
  80042103eb:	88 45 ef             	mov    %al,-0x11(%rbp)
  80042103ee:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  80042103f2:	75 07                	jne    80042103fb <strstr+0x66>
  80042103f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042103f9:	eb 33                	jmp    800421042e <strstr+0x99>
  80042103fb:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042103ff:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210402:	75 d8                	jne    80042103dc <strstr+0x47>
  8004210404:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210408:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  800421040c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210410:	48 89 ce             	mov    %rcx,%rsi
  8004210413:	48 89 c7             	mov    %rax,%rdi
  8004210416:	48 b8 8c fe 20 04 80 	movabs $0x800420fe8c,%rax
  800421041d:	00 00 00 
  8004210420:	ff d0                	callq  *%rax
  8004210422:	85 c0                	test   %eax,%eax
  8004210424:	75 b6                	jne    80042103dc <strstr+0x47>
  8004210426:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421042a:	48 83 e8 01          	sub    $0x1,%rax
  800421042e:	c9                   	leaveq 
  800421042f:	c3                   	retq   

0000008004210430 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210430:	55                   	push   %rbp
  8004210431:	48 89 e5             	mov    %rsp,%rbp
  8004210434:	48 83 ec 24          	sub    $0x24,%rsp
  8004210438:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421043c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210440:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210443:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210447:	48 8b 10             	mov    (%rax),%rdx
  800421044a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421044e:	48 01 d0             	add    %rdx,%rax
  8004210451:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210455:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421045c:	00 
	switch (bytes_to_read) {
  800421045d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210460:	83 f8 02             	cmp    $0x2,%eax
  8004210463:	0f 84 ab 00 00 00    	je     8004210514 <_dwarf_read_lsb+0xe4>
  8004210469:	83 f8 02             	cmp    $0x2,%eax
  800421046c:	7f 0e                	jg     800421047c <_dwarf_read_lsb+0x4c>
  800421046e:	83 f8 01             	cmp    $0x1,%eax
  8004210471:	0f 84 b3 00 00 00    	je     800421052a <_dwarf_read_lsb+0xfa>
  8004210477:	e9 d9 00 00 00       	jmpq   8004210555 <_dwarf_read_lsb+0x125>
  800421047c:	83 f8 04             	cmp    $0x4,%eax
  800421047f:	74 65                	je     80042104e6 <_dwarf_read_lsb+0xb6>
  8004210481:	83 f8 08             	cmp    $0x8,%eax
  8004210484:	0f 85 cb 00 00 00    	jne    8004210555 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421048a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421048e:	48 83 c0 04          	add    $0x4,%rax
  8004210492:	0f b6 00             	movzbl (%rax),%eax
  8004210495:	0f b6 c0             	movzbl %al,%eax
  8004210498:	48 c1 e0 20          	shl    $0x20,%rax
  800421049c:	48 89 c2             	mov    %rax,%rdx
  800421049f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104a3:	48 83 c0 05          	add    $0x5,%rax
  80042104a7:	0f b6 00             	movzbl (%rax),%eax
  80042104aa:	0f b6 c0             	movzbl %al,%eax
  80042104ad:	48 c1 e0 28          	shl    $0x28,%rax
  80042104b1:	48 09 d0             	or     %rdx,%rax
  80042104b4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042104b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104bc:	48 83 c0 06          	add    $0x6,%rax
  80042104c0:	0f b6 00             	movzbl (%rax),%eax
  80042104c3:	0f b6 c0             	movzbl %al,%eax
  80042104c6:	48 c1 e0 30          	shl    $0x30,%rax
  80042104ca:	48 89 c2             	mov    %rax,%rdx
  80042104cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104d1:	48 83 c0 07          	add    $0x7,%rax
  80042104d5:	0f b6 00             	movzbl (%rax),%eax
  80042104d8:	0f b6 c0             	movzbl %al,%eax
  80042104db:	48 c1 e0 38          	shl    $0x38,%rax
  80042104df:	48 09 d0             	or     %rdx,%rax
  80042104e2:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042104e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104ea:	48 83 c0 02          	add    $0x2,%rax
  80042104ee:	0f b6 00             	movzbl (%rax),%eax
  80042104f1:	0f b6 c0             	movzbl %al,%eax
  80042104f4:	48 c1 e0 10          	shl    $0x10,%rax
  80042104f8:	48 89 c2             	mov    %rax,%rdx
  80042104fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104ff:	48 83 c0 03          	add    $0x3,%rax
  8004210503:	0f b6 00             	movzbl (%rax),%eax
  8004210506:	0f b6 c0             	movzbl %al,%eax
  8004210509:	48 c1 e0 18          	shl    $0x18,%rax
  800421050d:	48 09 d0             	or     %rdx,%rax
  8004210510:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210514:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210518:	48 83 c0 01          	add    $0x1,%rax
  800421051c:	0f b6 00             	movzbl (%rax),%eax
  800421051f:	0f b6 c0             	movzbl %al,%eax
  8004210522:	48 c1 e0 08          	shl    $0x8,%rax
  8004210526:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421052a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421052e:	0f b6 00             	movzbl (%rax),%eax
  8004210531:	0f b6 c0             	movzbl %al,%eax
  8004210534:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210538:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004210539:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421053d:	48 8b 10             	mov    (%rax),%rdx
  8004210540:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210543:	48 98                	cltq   
  8004210545:	48 01 c2             	add    %rax,%rdx
  8004210548:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421054c:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421054f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210553:	eb 05                	jmp    800421055a <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210555:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  800421055a:	c9                   	leaveq 
  800421055b:	c3                   	retq   

000000800421055c <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  800421055c:	55                   	push   %rbp
  800421055d:	48 89 e5             	mov    %rsp,%rbp
  8004210560:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210564:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210568:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421056b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421056f:	48 8b 00             	mov    (%rax),%rax
  8004210572:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210576:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421057d:	00 
	switch (bytes_to_read) {
  800421057e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210581:	83 f8 02             	cmp    $0x2,%eax
  8004210584:	0f 84 ab 00 00 00    	je     8004210635 <_dwarf_decode_lsb+0xd9>
  800421058a:	83 f8 02             	cmp    $0x2,%eax
  800421058d:	7f 0e                	jg     800421059d <_dwarf_decode_lsb+0x41>
  800421058f:	83 f8 01             	cmp    $0x1,%eax
  8004210592:	0f 84 b3 00 00 00    	je     800421064b <_dwarf_decode_lsb+0xef>
  8004210598:	e9 d9 00 00 00       	jmpq   8004210676 <_dwarf_decode_lsb+0x11a>
  800421059d:	83 f8 04             	cmp    $0x4,%eax
  80042105a0:	74 65                	je     8004210607 <_dwarf_decode_lsb+0xab>
  80042105a2:	83 f8 08             	cmp    $0x8,%eax
  80042105a5:	0f 85 cb 00 00 00    	jne    8004210676 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042105ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105af:	48 83 c0 04          	add    $0x4,%rax
  80042105b3:	0f b6 00             	movzbl (%rax),%eax
  80042105b6:	0f b6 c0             	movzbl %al,%eax
  80042105b9:	48 c1 e0 20          	shl    $0x20,%rax
  80042105bd:	48 89 c2             	mov    %rax,%rdx
  80042105c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105c4:	48 83 c0 05          	add    $0x5,%rax
  80042105c8:	0f b6 00             	movzbl (%rax),%eax
  80042105cb:	0f b6 c0             	movzbl %al,%eax
  80042105ce:	48 c1 e0 28          	shl    $0x28,%rax
  80042105d2:	48 09 d0             	or     %rdx,%rax
  80042105d5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042105d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105dd:	48 83 c0 06          	add    $0x6,%rax
  80042105e1:	0f b6 00             	movzbl (%rax),%eax
  80042105e4:	0f b6 c0             	movzbl %al,%eax
  80042105e7:	48 c1 e0 30          	shl    $0x30,%rax
  80042105eb:	48 89 c2             	mov    %rax,%rdx
  80042105ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105f2:	48 83 c0 07          	add    $0x7,%rax
  80042105f6:	0f b6 00             	movzbl (%rax),%eax
  80042105f9:	0f b6 c0             	movzbl %al,%eax
  80042105fc:	48 c1 e0 38          	shl    $0x38,%rax
  8004210600:	48 09 d0             	or     %rdx,%rax
  8004210603:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210607:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421060b:	48 83 c0 02          	add    $0x2,%rax
  800421060f:	0f b6 00             	movzbl (%rax),%eax
  8004210612:	0f b6 c0             	movzbl %al,%eax
  8004210615:	48 c1 e0 10          	shl    $0x10,%rax
  8004210619:	48 89 c2             	mov    %rax,%rdx
  800421061c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210620:	48 83 c0 03          	add    $0x3,%rax
  8004210624:	0f b6 00             	movzbl (%rax),%eax
  8004210627:	0f b6 c0             	movzbl %al,%eax
  800421062a:	48 c1 e0 18          	shl    $0x18,%rax
  800421062e:	48 09 d0             	or     %rdx,%rax
  8004210631:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210635:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210639:	48 83 c0 01          	add    $0x1,%rax
  800421063d:	0f b6 00             	movzbl (%rax),%eax
  8004210640:	0f b6 c0             	movzbl %al,%eax
  8004210643:	48 c1 e0 08          	shl    $0x8,%rax
  8004210647:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421064b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421064f:	0f b6 00             	movzbl (%rax),%eax
  8004210652:	0f b6 c0             	movzbl %al,%eax
  8004210655:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210659:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421065a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421065e:	48 8b 10             	mov    (%rax),%rdx
  8004210661:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210664:	48 98                	cltq   
  8004210666:	48 01 c2             	add    %rax,%rdx
  8004210669:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421066d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210670:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210674:	eb 05                	jmp    800421067b <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210676:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421067b:	c9                   	leaveq 
  800421067c:	c3                   	retq   

000000800421067d <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421067d:	55                   	push   %rbp
  800421067e:	48 89 e5             	mov    %rsp,%rbp
  8004210681:	48 83 ec 24          	sub    $0x24,%rsp
  8004210685:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210689:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421068d:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210690:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210694:	48 8b 10             	mov    (%rax),%rdx
  8004210697:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421069b:	48 01 d0             	add    %rdx,%rax
  800421069e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  80042106a2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042106a5:	83 f8 02             	cmp    $0x2,%eax
  80042106a8:	74 35                	je     80042106df <_dwarf_read_msb+0x62>
  80042106aa:	83 f8 02             	cmp    $0x2,%eax
  80042106ad:	7f 0a                	jg     80042106b9 <_dwarf_read_msb+0x3c>
  80042106af:	83 f8 01             	cmp    $0x1,%eax
  80042106b2:	74 18                	je     80042106cc <_dwarf_read_msb+0x4f>
  80042106b4:	e9 53 01 00 00       	jmpq   800421080c <_dwarf_read_msb+0x18f>
  80042106b9:	83 f8 04             	cmp    $0x4,%eax
  80042106bc:	74 49                	je     8004210707 <_dwarf_read_msb+0x8a>
  80042106be:	83 f8 08             	cmp    $0x8,%eax
  80042106c1:	0f 84 96 00 00 00    	je     800421075d <_dwarf_read_msb+0xe0>
  80042106c7:	e9 40 01 00 00       	jmpq   800421080c <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  80042106cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106d0:	0f b6 00             	movzbl (%rax),%eax
  80042106d3:	0f b6 c0             	movzbl %al,%eax
  80042106d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042106da:	e9 34 01 00 00       	jmpq   8004210813 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042106df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106e3:	48 83 c0 01          	add    $0x1,%rax
  80042106e7:	0f b6 00             	movzbl (%rax),%eax
  80042106ea:	0f b6 d0             	movzbl %al,%edx
  80042106ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106f1:	0f b6 00             	movzbl (%rax),%eax
  80042106f4:	0f b6 c0             	movzbl %al,%eax
  80042106f7:	48 c1 e0 08          	shl    $0x8,%rax
  80042106fb:	48 09 d0             	or     %rdx,%rax
  80042106fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210702:	e9 0c 01 00 00       	jmpq   8004210813 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210707:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421070b:	48 83 c0 03          	add    $0x3,%rax
  800421070f:	0f b6 00             	movzbl (%rax),%eax
  8004210712:	0f b6 c0             	movzbl %al,%eax
  8004210715:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210719:	48 83 c2 02          	add    $0x2,%rdx
  800421071d:	0f b6 12             	movzbl (%rdx),%edx
  8004210720:	0f b6 d2             	movzbl %dl,%edx
  8004210723:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210727:	48 09 d0             	or     %rdx,%rax
  800421072a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800421072e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210732:	48 83 c0 01          	add    $0x1,%rax
  8004210736:	0f b6 00             	movzbl (%rax),%eax
  8004210739:	0f b6 c0             	movzbl %al,%eax
  800421073c:	48 c1 e0 10          	shl    $0x10,%rax
  8004210740:	48 89 c2             	mov    %rax,%rdx
  8004210743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210747:	0f b6 00             	movzbl (%rax),%eax
  800421074a:	0f b6 c0             	movzbl %al,%eax
  800421074d:	48 c1 e0 18          	shl    $0x18,%rax
  8004210751:	48 09 d0             	or     %rdx,%rax
  8004210754:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210758:	e9 b6 00 00 00       	jmpq   8004210813 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421075d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210761:	48 83 c0 07          	add    $0x7,%rax
  8004210765:	0f b6 00             	movzbl (%rax),%eax
  8004210768:	0f b6 c0             	movzbl %al,%eax
  800421076b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421076f:	48 83 c2 06          	add    $0x6,%rdx
  8004210773:	0f b6 12             	movzbl (%rdx),%edx
  8004210776:	0f b6 d2             	movzbl %dl,%edx
  8004210779:	48 c1 e2 08          	shl    $0x8,%rdx
  800421077d:	48 09 d0             	or     %rdx,%rax
  8004210780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210788:	48 83 c0 05          	add    $0x5,%rax
  800421078c:	0f b6 00             	movzbl (%rax),%eax
  800421078f:	0f b6 c0             	movzbl %al,%eax
  8004210792:	48 c1 e0 10          	shl    $0x10,%rax
  8004210796:	48 89 c2             	mov    %rax,%rdx
  8004210799:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421079d:	48 83 c0 04          	add    $0x4,%rax
  80042107a1:	0f b6 00             	movzbl (%rax),%eax
  80042107a4:	0f b6 c0             	movzbl %al,%eax
  80042107a7:	48 c1 e0 18          	shl    $0x18,%rax
  80042107ab:	48 09 d0             	or     %rdx,%rax
  80042107ae:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042107b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107b6:	48 83 c0 03          	add    $0x3,%rax
  80042107ba:	0f b6 00             	movzbl (%rax),%eax
  80042107bd:	0f b6 c0             	movzbl %al,%eax
  80042107c0:	48 c1 e0 20          	shl    $0x20,%rax
  80042107c4:	48 89 c2             	mov    %rax,%rdx
  80042107c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107cb:	48 83 c0 02          	add    $0x2,%rax
  80042107cf:	0f b6 00             	movzbl (%rax),%eax
  80042107d2:	0f b6 c0             	movzbl %al,%eax
  80042107d5:	48 c1 e0 28          	shl    $0x28,%rax
  80042107d9:	48 09 d0             	or     %rdx,%rax
  80042107dc:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042107e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107e4:	48 83 c0 01          	add    $0x1,%rax
  80042107e8:	0f b6 00             	movzbl (%rax),%eax
  80042107eb:	0f b6 c0             	movzbl %al,%eax
  80042107ee:	48 c1 e0 30          	shl    $0x30,%rax
  80042107f2:	48 89 c2             	mov    %rax,%rdx
  80042107f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107f9:	0f b6 00             	movzbl (%rax),%eax
  80042107fc:	0f b6 c0             	movzbl %al,%eax
  80042107ff:	48 c1 e0 38          	shl    $0x38,%rax
  8004210803:	48 09 d0             	or     %rdx,%rax
  8004210806:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421080a:	eb 07                	jmp    8004210813 <_dwarf_read_msb+0x196>
	default:
		return (0);
  800421080c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210811:	eb 1a                	jmp    800421082d <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004210813:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210817:	48 8b 10             	mov    (%rax),%rdx
  800421081a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421081d:	48 98                	cltq   
  800421081f:	48 01 c2             	add    %rax,%rdx
  8004210822:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210826:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421082d:	c9                   	leaveq 
  800421082e:	c3                   	retq   

000000800421082f <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  800421082f:	55                   	push   %rbp
  8004210830:	48 89 e5             	mov    %rsp,%rbp
  8004210833:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210837:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421083b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421083e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210842:	48 8b 00             	mov    (%rax),%rax
  8004210845:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210849:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210850:	00 
	switch (bytes_to_read) {
  8004210851:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210854:	83 f8 02             	cmp    $0x2,%eax
  8004210857:	74 35                	je     800421088e <_dwarf_decode_msb+0x5f>
  8004210859:	83 f8 02             	cmp    $0x2,%eax
  800421085c:	7f 0a                	jg     8004210868 <_dwarf_decode_msb+0x39>
  800421085e:	83 f8 01             	cmp    $0x1,%eax
  8004210861:	74 18                	je     800421087b <_dwarf_decode_msb+0x4c>
  8004210863:	e9 53 01 00 00       	jmpq   80042109bb <_dwarf_decode_msb+0x18c>
  8004210868:	83 f8 04             	cmp    $0x4,%eax
  800421086b:	74 49                	je     80042108b6 <_dwarf_decode_msb+0x87>
  800421086d:	83 f8 08             	cmp    $0x8,%eax
  8004210870:	0f 84 96 00 00 00    	je     800421090c <_dwarf_decode_msb+0xdd>
  8004210876:	e9 40 01 00 00       	jmpq   80042109bb <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800421087b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421087f:	0f b6 00             	movzbl (%rax),%eax
  8004210882:	0f b6 c0             	movzbl %al,%eax
  8004210885:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210889:	e9 34 01 00 00       	jmpq   80042109c2 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800421088e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210892:	48 83 c0 01          	add    $0x1,%rax
  8004210896:	0f b6 00             	movzbl (%rax),%eax
  8004210899:	0f b6 d0             	movzbl %al,%edx
  800421089c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108a0:	0f b6 00             	movzbl (%rax),%eax
  80042108a3:	0f b6 c0             	movzbl %al,%eax
  80042108a6:	48 c1 e0 08          	shl    $0x8,%rax
  80042108aa:	48 09 d0             	or     %rdx,%rax
  80042108ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042108b1:	e9 0c 01 00 00       	jmpq   80042109c2 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042108b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108ba:	48 83 c0 03          	add    $0x3,%rax
  80042108be:	0f b6 00             	movzbl (%rax),%eax
  80042108c1:	0f b6 c0             	movzbl %al,%eax
  80042108c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042108c8:	48 83 c2 02          	add    $0x2,%rdx
  80042108cc:	0f b6 12             	movzbl (%rdx),%edx
  80042108cf:	0f b6 d2             	movzbl %dl,%edx
  80042108d2:	48 c1 e2 08          	shl    $0x8,%rdx
  80042108d6:	48 09 d0             	or     %rdx,%rax
  80042108d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042108dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108e1:	48 83 c0 01          	add    $0x1,%rax
  80042108e5:	0f b6 00             	movzbl (%rax),%eax
  80042108e8:	0f b6 c0             	movzbl %al,%eax
  80042108eb:	48 c1 e0 10          	shl    $0x10,%rax
  80042108ef:	48 89 c2             	mov    %rax,%rdx
  80042108f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108f6:	0f b6 00             	movzbl (%rax),%eax
  80042108f9:	0f b6 c0             	movzbl %al,%eax
  80042108fc:	48 c1 e0 18          	shl    $0x18,%rax
  8004210900:	48 09 d0             	or     %rdx,%rax
  8004210903:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210907:	e9 b6 00 00 00       	jmpq   80042109c2 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421090c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210910:	48 83 c0 07          	add    $0x7,%rax
  8004210914:	0f b6 00             	movzbl (%rax),%eax
  8004210917:	0f b6 c0             	movzbl %al,%eax
  800421091a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421091e:	48 83 c2 06          	add    $0x6,%rdx
  8004210922:	0f b6 12             	movzbl (%rdx),%edx
  8004210925:	0f b6 d2             	movzbl %dl,%edx
  8004210928:	48 c1 e2 08          	shl    $0x8,%rdx
  800421092c:	48 09 d0             	or     %rdx,%rax
  800421092f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210933:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210937:	48 83 c0 05          	add    $0x5,%rax
  800421093b:	0f b6 00             	movzbl (%rax),%eax
  800421093e:	0f b6 c0             	movzbl %al,%eax
  8004210941:	48 c1 e0 10          	shl    $0x10,%rax
  8004210945:	48 89 c2             	mov    %rax,%rdx
  8004210948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421094c:	48 83 c0 04          	add    $0x4,%rax
  8004210950:	0f b6 00             	movzbl (%rax),%eax
  8004210953:	0f b6 c0             	movzbl %al,%eax
  8004210956:	48 c1 e0 18          	shl    $0x18,%rax
  800421095a:	48 09 d0             	or     %rdx,%rax
  800421095d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210961:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210965:	48 83 c0 03          	add    $0x3,%rax
  8004210969:	0f b6 00             	movzbl (%rax),%eax
  800421096c:	0f b6 c0             	movzbl %al,%eax
  800421096f:	48 c1 e0 20          	shl    $0x20,%rax
  8004210973:	48 89 c2             	mov    %rax,%rdx
  8004210976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421097a:	48 83 c0 02          	add    $0x2,%rax
  800421097e:	0f b6 00             	movzbl (%rax),%eax
  8004210981:	0f b6 c0             	movzbl %al,%eax
  8004210984:	48 c1 e0 28          	shl    $0x28,%rax
  8004210988:	48 09 d0             	or     %rdx,%rax
  800421098b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  800421098f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210993:	48 83 c0 01          	add    $0x1,%rax
  8004210997:	0f b6 00             	movzbl (%rax),%eax
  800421099a:	0f b6 c0             	movzbl %al,%eax
  800421099d:	48 c1 e0 30          	shl    $0x30,%rax
  80042109a1:	48 89 c2             	mov    %rax,%rdx
  80042109a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109a8:	0f b6 00             	movzbl (%rax),%eax
  80042109ab:	0f b6 c0             	movzbl %al,%eax
  80042109ae:	48 c1 e0 38          	shl    $0x38,%rax
  80042109b2:	48 09 d0             	or     %rdx,%rax
  80042109b5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042109b9:	eb 07                	jmp    80042109c2 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  80042109bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042109c0:	eb 1a                	jmp    80042109dc <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  80042109c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109c6:	48 8b 10             	mov    (%rax),%rdx
  80042109c9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042109cc:	48 98                	cltq   
  80042109ce:	48 01 c2             	add    %rax,%rdx
  80042109d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109d5:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042109d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042109dc:	c9                   	leaveq 
  80042109dd:	c3                   	retq   

00000080042109de <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  80042109de:	55                   	push   %rbp
  80042109df:	48 89 e5             	mov    %rsp,%rbp
  80042109e2:	48 83 ec 30          	sub    $0x30,%rsp
  80042109e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042109ea:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  80042109ee:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042109f5:	00 
	uint8_t b;
	int shift = 0;
  80042109f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042109fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a01:	48 8b 10             	mov    (%rax),%rdx
  8004210a04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a08:	48 01 d0             	add    %rdx,%rax
  8004210a0b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210a0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a13:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210a17:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210a1b:	0f b6 00             	movzbl (%rax),%eax
  8004210a1e:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210a21:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210a25:	83 e0 7f             	and    $0x7f,%eax
  8004210a28:	89 c2                	mov    %eax,%edx
  8004210a2a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a2d:	89 c1                	mov    %eax,%ecx
  8004210a2f:	d3 e2                	shl    %cl,%edx
  8004210a31:	89 d0                	mov    %edx,%eax
  8004210a33:	48 98                	cltq   
  8004210a35:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210a39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a3d:	48 8b 00             	mov    (%rax),%rax
  8004210a40:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210a44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a48:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210a4b:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210a4f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210a53:	84 c0                	test   %al,%al
  8004210a55:	78 b8                	js     8004210a0f <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004210a57:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210a5b:	7f 1f                	jg     8004210a7c <_dwarf_read_sleb128+0x9e>
  8004210a5d:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210a61:	83 e0 40             	and    $0x40,%eax
  8004210a64:	85 c0                	test   %eax,%eax
  8004210a66:	74 14                	je     8004210a7c <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004210a68:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a6b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210a70:	89 c1                	mov    %eax,%ecx
  8004210a72:	d3 e2                	shl    %cl,%edx
  8004210a74:	89 d0                	mov    %edx,%eax
  8004210a76:	48 98                	cltq   
  8004210a78:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004210a7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210a80:	c9                   	leaveq 
  8004210a81:	c3                   	retq   

0000008004210a82 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210a82:	55                   	push   %rbp
  8004210a83:	48 89 e5             	mov    %rsp,%rbp
  8004210a86:	48 83 ec 30          	sub    $0x30,%rsp
  8004210a8a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210a8e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004210a92:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210a99:	00 
	uint8_t b;
	int shift = 0;
  8004210a9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210aa1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210aa5:	48 8b 10             	mov    (%rax),%rdx
  8004210aa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210aac:	48 01 d0             	add    %rdx,%rax
  8004210aaf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210ab3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ab7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210abb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210abf:	0f b6 00             	movzbl (%rax),%eax
  8004210ac2:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210ac5:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ac9:	83 e0 7f             	and    $0x7f,%eax
  8004210acc:	89 c2                	mov    %eax,%edx
  8004210ace:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ad1:	89 c1                	mov    %eax,%ecx
  8004210ad3:	d3 e2                	shl    %cl,%edx
  8004210ad5:	89 d0                	mov    %edx,%eax
  8004210ad7:	48 98                	cltq   
  8004210ad9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210add:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210ae1:	48 8b 00             	mov    (%rax),%rax
  8004210ae4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210ae8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210aec:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210aef:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210af3:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210af7:	84 c0                	test   %al,%al
  8004210af9:	78 b8                	js     8004210ab3 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004210afb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210aff:	c9                   	leaveq 
  8004210b00:	c3                   	retq   

0000008004210b01 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004210b01:	55                   	push   %rbp
  8004210b02:	48 89 e5             	mov    %rsp,%rbp
  8004210b05:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b09:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004210b0d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210b14:	00 
	uint8_t b;
	int shift = 0;
  8004210b15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210b1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b20:	48 8b 00             	mov    (%rax),%rax
  8004210b23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b2b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b33:	0f b6 00             	movzbl (%rax),%eax
  8004210b36:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210b39:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b3d:	83 e0 7f             	and    $0x7f,%eax
  8004210b40:	89 c2                	mov    %eax,%edx
  8004210b42:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210b45:	89 c1                	mov    %eax,%ecx
  8004210b47:	d3 e2                	shl    %cl,%edx
  8004210b49:	89 d0                	mov    %edx,%eax
  8004210b4b:	48 98                	cltq   
  8004210b4d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210b51:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210b55:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b59:	84 c0                	test   %al,%al
  8004210b5b:	78 ca                	js     8004210b27 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004210b5d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210b61:	7f 1f                	jg     8004210b82 <_dwarf_decode_sleb128+0x81>
  8004210b63:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b67:	83 e0 40             	and    $0x40,%eax
  8004210b6a:	85 c0                	test   %eax,%eax
  8004210b6c:	74 14                	je     8004210b82 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004210b6e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210b71:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210b76:	89 c1                	mov    %eax,%ecx
  8004210b78:	d3 e2                	shl    %cl,%edx
  8004210b7a:	89 d0                	mov    %edx,%eax
  8004210b7c:	48 98                	cltq   
  8004210b7e:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004210b82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210b8a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210b8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210b91:	c9                   	leaveq 
  8004210b92:	c3                   	retq   

0000008004210b93 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004210b93:	55                   	push   %rbp
  8004210b94:	48 89 e5             	mov    %rsp,%rbp
  8004210b97:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b9b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004210b9f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210ba6:	00 
	uint8_t b;
	int shift = 0;
  8004210ba7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210bae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bb2:	48 8b 00             	mov    (%rax),%rax
  8004210bb5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210bb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bbd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210bc1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210bc5:	0f b6 00             	movzbl (%rax),%eax
  8004210bc8:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210bcb:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210bcf:	83 e0 7f             	and    $0x7f,%eax
  8004210bd2:	89 c2                	mov    %eax,%edx
  8004210bd4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bd7:	89 c1                	mov    %eax,%ecx
  8004210bd9:	d3 e2                	shl    %cl,%edx
  8004210bdb:	89 d0                	mov    %edx,%eax
  8004210bdd:	48 98                	cltq   
  8004210bdf:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210be3:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210be7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210beb:	84 c0                	test   %al,%al
  8004210bed:	78 ca                	js     8004210bb9 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004210bef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bf3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210bf7:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210bfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210bfe:	c9                   	leaveq 
  8004210bff:	c3                   	retq   

0000008004210c00 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004210c00:	55                   	push   %rbp
  8004210c01:	48 89 e5             	mov    %rsp,%rbp
  8004210c04:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c0c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004210c14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c18:	48 8b 10             	mov    (%rax),%rdx
  8004210c1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c1f:	48 01 d0             	add    %rdx,%rax
  8004210c22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210c26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c2a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004210c2e:	eb 17                	jmp    8004210c47 <_dwarf_read_string+0x47>
		src++;
  8004210c30:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004210c35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c39:	48 8b 00             	mov    (%rax),%rax
  8004210c3c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c44:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004210c47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c4b:	0f b6 00             	movzbl (%rax),%eax
  8004210c4e:	84 c0                	test   %al,%al
  8004210c50:	74 0d                	je     8004210c5f <_dwarf_read_string+0x5f>
  8004210c52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c56:	48 8b 00             	mov    (%rax),%rax
  8004210c59:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210c5d:	72 d1                	jb     8004210c30 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004210c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c63:	0f b6 00             	movzbl (%rax),%eax
  8004210c66:	84 c0                	test   %al,%al
  8004210c68:	75 1f                	jne    8004210c89 <_dwarf_read_string+0x89>
  8004210c6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c6e:	48 8b 00             	mov    (%rax),%rax
  8004210c71:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210c75:	73 12                	jae    8004210c89 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004210c77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c7b:	48 8b 00             	mov    (%rax),%rax
  8004210c7e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c86:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210c89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210c8d:	c9                   	leaveq 
  8004210c8e:	c3                   	retq   

0000008004210c8f <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004210c8f:	55                   	push   %rbp
  8004210c90:	48 89 e5             	mov    %rsp,%rbp
  8004210c93:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c97:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c9b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c9f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004210ca3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ca7:	48 8b 10             	mov    (%rax),%rdx
  8004210caa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210cae:	48 01 d0             	add    %rdx,%rax
  8004210cb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cb9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004210cbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210cc1:	48 8b 10             	mov    (%rax),%rdx
  8004210cc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cc8:	48 01 c2             	add    %rax,%rdx
  8004210ccb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ccf:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210cd6:	c9                   	leaveq 
  8004210cd7:	c3                   	retq   

0000008004210cd8 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004210cd8:	55                   	push   %rbp
  8004210cd9:	48 89 e5             	mov    %rsp,%rbp
  8004210cdc:	48 83 ec 20          	sub    $0x20,%rsp
  8004210ce0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004210ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ce8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210cec:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210cf1:	75 35                	jne    8004210d28 <_dwarf_elf_get_byte_order+0x50>
  8004210cf3:	48 b9 80 ac 21 04 80 	movabs $0x800421ac80,%rcx
  8004210cfa:	00 00 00 
  8004210cfd:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004210d04:	00 00 00 
  8004210d07:	be 29 01 00 00       	mov    $0x129,%esi
  8004210d0c:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004210d13:	00 00 00 
  8004210d16:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d1b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210d22:	00 00 00 
  8004210d25:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004210d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d2c:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004210d30:	0f b6 c0             	movzbl %al,%eax
  8004210d33:	83 f8 02             	cmp    $0x2,%eax
  8004210d36:	75 07                	jne    8004210d3f <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004210d38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d3d:	eb 05                	jmp    8004210d44 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004210d3f:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004210d44:	c9                   	leaveq 
  8004210d45:	c3                   	retq   

0000008004210d46 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004210d46:	55                   	push   %rbp
  8004210d47:	48 89 e5             	mov    %rsp,%rbp
  8004210d4a:	48 83 ec 20          	sub    $0x20,%rsp
  8004210d4e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004210d52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210d5a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210d5f:	75 35                	jne    8004210d96 <_dwarf_elf_get_pointer_size+0x50>
  8004210d61:	48 b9 80 ac 21 04 80 	movabs $0x800421ac80,%rcx
  8004210d68:	00 00 00 
  8004210d6b:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004210d72:	00 00 00 
  8004210d75:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004210d7a:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004210d81:	00 00 00 
  8004210d84:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d89:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210d90:	00 00 00 
  8004210d93:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004210d96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d9a:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004210d9e:	3c 01                	cmp    $0x1,%al
  8004210da0:	75 07                	jne    8004210da9 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004210da2:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210da7:	eb 05                	jmp    8004210dae <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004210da9:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004210dae:	c9                   	leaveq 
  8004210daf:	c3                   	retq   

0000008004210db0 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004210db0:	55                   	push   %rbp
  8004210db1:	48 89 e5             	mov    %rsp,%rbp
  8004210db4:	53                   	push   %rbx
  8004210db5:	48 83 ec 18          	sub    $0x18,%rsp
  8004210db9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210dbd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004210dc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210dc5:	ba 60 00 00 00       	mov    $0x60,%edx
  8004210dca:	be 00 00 00 00       	mov    $0x0,%esi
  8004210dcf:	48 89 c7             	mov    %rax,%rdi
  8004210dd2:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  8004210dd9:	00 00 00 
  8004210ddc:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004210dde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210de2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004210de9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ded:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004210df4:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004210df5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210df9:	48 89 c7             	mov    %rax,%rdi
  8004210dfc:	48 b8 46 0d 21 04 80 	movabs $0x8004210d46,%rax
  8004210e03:	00 00 00 
  8004210e06:	ff d0                	callq  *%rax
  8004210e08:	0f b6 d0             	movzbl %al,%edx
  8004210e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e0f:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004210e12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e16:	48 89 c7             	mov    %rax,%rdi
  8004210e19:	48 b8 d8 0c 21 04 80 	movabs $0x8004210cd8,%rax
  8004210e20:	00 00 00 
  8004210e23:	ff d0                	callq  *%rax
  8004210e25:	85 c0                	test   %eax,%eax
  8004210e27:	75 26                	jne    8004210e4f <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004210e29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e2d:	48 b9 7d 06 21 04 80 	movabs $0x800421067d,%rcx
  8004210e34:	00 00 00 
  8004210e37:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004210e3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e3f:	48 bb 2f 08 21 04 80 	movabs $0x800421082f,%rbx
  8004210e46:	00 00 00 
  8004210e49:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004210e4d:	eb 24                	jmp    8004210e73 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004210e4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e53:	48 b9 30 04 21 04 80 	movabs $0x8004210430,%rcx
  8004210e5a:	00 00 00 
  8004210e5d:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004210e61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e65:	48 be 5c 05 21 04 80 	movabs $0x800421055c,%rsi
  8004210e6c:	00 00 00 
  8004210e6f:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004210e73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e77:	48 89 c7             	mov    %rax,%rdi
  8004210e7a:	48 b8 7d 23 21 04 80 	movabs $0x800421237d,%rax
  8004210e81:	00 00 00 
  8004210e84:	ff d0                	callq  *%rax
	return 0;
  8004210e86:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210e8b:	48 83 c4 18          	add    $0x18,%rsp
  8004210e8f:	5b                   	pop    %rbx
  8004210e90:	5d                   	pop    %rbp
  8004210e91:	c3                   	retq   

0000008004210e92 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004210e92:	55                   	push   %rbp
  8004210e93:	48 89 e5             	mov    %rsp,%rbp
  8004210e96:	48 83 ec 20          	sub    $0x20,%rsp
  8004210e9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e9e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004210ea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ea6:	48 8b 10             	mov    (%rax),%rdx
  8004210ea9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ead:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004210eb1:	48 39 c2             	cmp    %rax,%rdx
  8004210eb4:	76 0a                	jbe    8004210ec0 <_get_next_cu+0x2e>
		return -1;
  8004210eb6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210ebb:	e9 6b 01 00 00       	jmpq   800421102b <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004210ec0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ec4:	48 8b 00             	mov    (%rax),%rax
  8004210ec7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004210ecb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210ecf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ed3:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004210ed7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210edb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210edf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210ee3:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210ee7:	48 89 d1             	mov    %rdx,%rcx
  8004210eea:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210eee:	ba 04 00 00 00       	mov    $0x4,%edx
  8004210ef3:	48 89 cf             	mov    %rcx,%rdi
  8004210ef6:	ff d0                	callq  *%rax
  8004210ef8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004210efb:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004210eff:	75 2a                	jne    8004210f2b <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004210f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f05:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210f09:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f0d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210f11:	48 89 d1             	mov    %rdx,%rcx
  8004210f14:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210f18:	ba 08 00 00 00       	mov    $0x8,%edx
  8004210f1d:	48 89 cf             	mov    %rcx,%rdi
  8004210f20:	ff d0                	callq  *%rax
  8004210f22:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004210f25:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004210f29:	eb 04                	jmp    8004210f2f <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004210f2b:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004210f2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f33:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004210f37:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004210f3a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210f3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f41:	48 01 c2             	add    %rax,%rdx
  8004210f44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f48:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004210f4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f4f:	48 8b 10             	mov    (%rax),%rdx
  8004210f52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f56:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004210f5a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210f5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f61:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004210f64:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004210f68:	75 07                	jne    8004210f71 <_get_next_cu+0xdf>
  8004210f6a:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210f6f:	eb 05                	jmp    8004210f76 <_get_next_cu+0xe4>
  8004210f71:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004210f76:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210f7a:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004210f7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f81:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210f85:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f89:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210f8d:	48 89 d1             	mov    %rdx,%rcx
  8004210f90:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210f94:	ba 02 00 00 00       	mov    $0x2,%edx
  8004210f99:	48 89 cf             	mov    %rcx,%rdi
  8004210f9c:	ff d0                	callq  *%rax
  8004210f9e:	89 c2                	mov    %eax,%edx
  8004210fa0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fa4:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004210fa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fac:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210fb0:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004210fb4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210fb8:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004210fbc:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210fc0:	48 89 cf             	mov    %rcx,%rdi
  8004210fc3:	ff d0                	callq  *%rax
  8004210fc5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210fc9:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004210fcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fd1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210fd5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210fd9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210fdd:	48 89 d1             	mov    %rdx,%rcx
  8004210fe0:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210fe4:	ba 01 00 00 00       	mov    $0x1,%edx
  8004210fe9:	48 89 cf             	mov    %rcx,%rdi
  8004210fec:	ff d0                	callq  *%rax
  8004210fee:	89 c2                	mov    %eax,%edx
  8004210ff0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ff4:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004210ff7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ffb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004210fff:	66 83 f8 01          	cmp    $0x1,%ax
  8004211003:	76 0e                	jbe    8004211013 <_get_next_cu+0x181>
  8004211005:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211009:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421100d:	66 83 f8 04          	cmp    $0x4,%ax
  8004211011:	76 07                	jbe    800421101a <_get_next_cu+0x188>
		return -1;
  8004211013:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211018:	eb 11                	jmp    800421102b <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  800421101a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421101e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211022:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211026:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421102b:	c9                   	leaveq 
  800421102c:	c3                   	retq   

000000800421102d <print_cu>:

void print_cu(Dwarf_CU cu)
{
  800421102d:	55                   	push   %rbp
  800421102e:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211031:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211035:	0f b6 c8             	movzbl %al,%ecx
  8004211038:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  800421103c:	0f b7 d0             	movzwl %ax,%edx
  800421103f:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211043:	48 89 c6             	mov    %rax,%rsi
  8004211046:	48 bf b2 ac 21 04 80 	movabs $0x800421acb2,%rdi
  800421104d:	00 00 00 
  8004211050:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211055:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  800421105c:	00 00 00 
  800421105f:	41 ff d0             	callq  *%r8
}
  8004211062:	5d                   	pop    %rbp
  8004211063:	c3                   	retq   

0000008004211064 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211064:	55                   	push   %rbp
  8004211065:	48 89 e5             	mov    %rsp,%rbp
  8004211068:	48 83 ec 60          	sub    $0x60,%rsp
  800421106c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211070:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211074:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211078:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  800421107c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211081:	75 35                	jne    80042110b8 <_dwarf_abbrev_parse+0x54>
  8004211083:	48 b9 c1 ac 21 04 80 	movabs $0x800421acc1,%rcx
  800421108a:	00 00 00 
  800421108d:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211094:	00 00 00 
  8004211097:	be a4 01 00 00       	mov    $0x1a4,%esi
  800421109c:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  80042110a3:	00 00 00 
  80042110a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042110ab:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042110b2:	00 00 00 
  80042110b5:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  80042110b8:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  80042110bd:	75 35                	jne    80042110f4 <_dwarf_abbrev_parse+0x90>
  80042110bf:	48 b9 cd ac 21 04 80 	movabs $0x800421accd,%rcx
  80042110c6:	00 00 00 
  80042110c9:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  80042110d0:	00 00 00 
  80042110d3:	be a5 01 00 00       	mov    $0x1a5,%esi
  80042110d8:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  80042110df:	00 00 00 
  80042110e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042110e7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042110ee:	00 00 00 
  80042110f1:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  80042110f4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042110f8:	48 8b 10             	mov    (%rax),%rdx
  80042110fb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042110ff:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211103:	48 39 c2             	cmp    %rax,%rdx
  8004211106:	72 0a                	jb     8004211112 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211108:	b8 04 00 00 00       	mov    $0x4,%eax
  800421110d:	e9 d3 01 00 00       	jmpq   80042112e5 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211112:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211116:	48 8b 00             	mov    (%rax),%rax
  8004211119:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  800421111d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211121:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211125:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211129:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421112d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211131:	48 89 d6             	mov    %rdx,%rsi
  8004211134:	48 89 c7             	mov    %rax,%rdi
  8004211137:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  800421113e:	00 00 00 
  8004211141:	ff d0                	callq  *%rax
  8004211143:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211147:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421114c:	75 15                	jne    8004211163 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  800421114e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211152:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211159:	b8 00 00 00 00       	mov    $0x0,%eax
  800421115e:	e9 82 01 00 00       	jmpq   80042112e5 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211163:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211167:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421116b:	48 89 d6             	mov    %rdx,%rsi
  800421116e:	48 89 c7             	mov    %rax,%rdi
  8004211171:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211178:	00 00 00 
  800421117b:	ff d0                	callq  *%rax
  800421117d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211181:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211185:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211189:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421118d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211191:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211196:	48 89 cf             	mov    %rcx,%rdi
  8004211199:	ff d0                	callq  *%rax
  800421119b:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  800421119e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042111a6:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  80042111a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111ad:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042111b1:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  80042111b5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111b9:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  80042111bd:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  80042111c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042111c8:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  80042111cc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111d0:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  80042111d7:	00 
	abp->ab_atnum    = 0;
  80042111d8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042111dc:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  80042111e3:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  80042111e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042111e8:	48 8b 00             	mov    (%rax),%rax
  80042111eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042111ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111f3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042111f7:	48 89 d6             	mov    %rdx,%rsi
  80042111fa:	48 89 c7             	mov    %rax,%rdi
  80042111fd:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211204:	00 00 00 
  8004211207:	ff d0                	callq  *%rax
  8004211209:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421120d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211211:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211215:	48 89 d6             	mov    %rdx,%rsi
  8004211218:	48 89 c7             	mov    %rax,%rdi
  800421121b:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211222:	00 00 00 
  8004211225:	ff d0                	callq  *%rax
  8004211227:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800421122b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211230:	0f 84 89 00 00 00    	je     80042112bf <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211236:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421123a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421123e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211242:	48 89 d0             	mov    %rdx,%rax
  8004211245:	48 01 c0             	add    %rax,%rax
  8004211248:	48 01 d0             	add    %rdx,%rax
  800421124b:	48 c1 e0 03          	shl    $0x3,%rax
  800421124f:	48 01 c8             	add    %rcx,%rax
  8004211252:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211256:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421125a:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  800421125d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211261:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211265:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211269:	48 89 d0             	mov    %rdx,%rax
  800421126c:	48 01 c0             	add    %rax,%rax
  800421126f:	48 01 d0             	add    %rdx,%rax
  8004211272:	48 c1 e0 03          	shl    $0x3,%rax
  8004211276:	48 01 c8             	add    %rcx,%rax
  8004211279:	48 8d 50 38          	lea    0x38(%rax),%rdx
  800421127d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211281:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211284:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211288:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421128c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211290:	48 89 d0             	mov    %rdx,%rax
  8004211293:	48 01 c0             	add    %rax,%rax
  8004211296:	48 01 d0             	add    %rdx,%rax
  8004211299:	48 c1 e0 03          	shl    $0x3,%rax
  800421129d:	48 01 c8             	add    %rcx,%rax
  80042112a0:	48 8d 50 40          	lea    0x40(%rax),%rdx
  80042112a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042112a8:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  80042112ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112af:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042112b3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042112b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112bb:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  80042112bf:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042112c4:	0f 85 1a ff ff ff    	jne    80042111e4 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  80042112ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042112ce:	48 8b 00             	mov    (%rax),%rax
  80042112d1:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  80042112d5:	48 89 c2             	mov    %rax,%rdx
  80042112d8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112dc:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  80042112e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042112e5:	c9                   	leaveq 
  80042112e6:	c3                   	retq   

00000080042112e7 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  80042112e7:	55                   	push   %rbp
  80042112e8:	48 89 e5             	mov    %rsp,%rbp
  80042112eb:	48 83 ec 70          	sub    $0x70,%rsp
  80042112ef:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042112f3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042112f7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  80042112fb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211300:	75 0a                	jne    800421130c <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211302:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211307:	e9 0a 01 00 00       	jmpq   8004211416 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  800421130c:	48 bf d8 ac 21 04 80 	movabs $0x800421acd8,%rdi
  8004211313:	00 00 00 
  8004211316:	48 b8 47 56 21 04 80 	movabs $0x8004215647,%rax
  800421131d:	00 00 00 
  8004211320:	ff d0                	callq  *%rax
  8004211322:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211326:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421132b:	75 35                	jne    8004211362 <_dwarf_abbrev_find+0x7b>
  800421132d:	48 b9 cd ac 21 04 80 	movabs $0x800421accd,%rcx
  8004211334:	00 00 00 
  8004211337:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  800421133e:	00 00 00 
  8004211341:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211346:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  800421134d:	00 00 00 
  8004211350:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211355:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421135c:	00 00 00 
  800421135f:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211362:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211366:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800421136a:	e9 8d 00 00 00       	jmpq   80042113fc <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  800421136f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211373:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211377:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800421137b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421137f:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211383:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211387:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  800421138b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211390:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211394:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211399:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  800421139d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042113a2:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  80042113a6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042113ab:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  80042113af:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  80042113b4:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  80042113b8:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  80042113bd:	48 89 c7             	mov    %rax,%rdi
  80042113c0:	48 b8 64 10 21 04 80 	movabs $0x8004211064,%rax
  80042113c7:	00 00 00 
  80042113ca:	ff d0                	callq  *%rax
  80042113cc:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  80042113cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042113d3:	74 05                	je     80042113da <_dwarf_abbrev_find+0xf3>
			return (ret);
  80042113d5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042113d8:	eb 3c                	jmp    8004211416 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  80042113da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042113de:	48 8b 00             	mov    (%rax),%rax
  80042113e1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042113e5:	75 07                	jne    80042113ee <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  80042113e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042113ec:	eb 28                	jmp    8004211416 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  80042113ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042113f2:	48 8b 00             	mov    (%rax),%rax
  80042113f5:	48 85 c0             	test   %rax,%rax
  80042113f8:	75 02                	jne    80042113fc <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  80042113fa:	eb 15                	jmp    8004211411 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  80042113fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211400:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211408:	48 39 c2             	cmp    %rax,%rdx
  800421140b:	0f 87 5e ff ff ff    	ja     800421136f <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004211411:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211416:	c9                   	leaveq 
  8004211417:	c3                   	retq   

0000008004211418 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004211418:	55                   	push   %rbp
  8004211419:	48 89 e5             	mov    %rsp,%rbp
  800421141c:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004211423:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421142a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004211431:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004211438:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800421143f:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004211446:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  800421144d:	48 bf e6 ac 21 04 80 	movabs $0x800421ace6,%rdi
  8004211454:	00 00 00 
  8004211457:	48 b8 47 56 21 04 80 	movabs $0x8004215647,%rax
  800421145e:	00 00 00 
  8004211461:	ff d0                	callq  *%rax
  8004211463:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004211467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421146b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421146f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004211473:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421147a:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800421147e:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004211481:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004211488:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421148f:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211494:	be 00 00 00 00       	mov    $0x0,%esi
  8004211499:	48 89 c7             	mov    %rax,%rdi
  800421149c:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042114a3:	00 00 00 
  80042114a6:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  80042114a8:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042114af:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  80042114b6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042114bd:	48 8b 00             	mov    (%rax),%rax
  80042114c0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  80042114c4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042114cb:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042114cf:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  80042114d3:	8b 45 10             	mov    0x10(%rbp),%eax
  80042114d6:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042114d9:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042114e0:	00 

	switch (form) {
  80042114e1:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  80042114e8:	20 
  80042114e9:	0f 87 82 04 00 00    	ja     8004211971 <_dwarf_attr_init+0x559>
  80042114ef:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042114f6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042114fd:	00 
  80042114fe:	48 b8 10 ad 21 04 80 	movabs $0x800421ad10,%rax
  8004211505:	00 00 00 
  8004211508:	48 01 d0             	add    %rdx,%rax
  800421150b:	48 8b 00             	mov    (%rax),%rax
  800421150e:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211510:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211517:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421151b:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211522:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211526:	0f b6 d2             	movzbl %dl,%edx
  8004211529:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211530:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211534:	48 89 cf             	mov    %rcx,%rdi
  8004211537:	ff d0                	callq  *%rax
  8004211539:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421153d:	e9 37 04 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211542:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211549:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421154d:	48 89 d6             	mov    %rdx,%rsi
  8004211550:	48 89 c7             	mov    %rax,%rdi
  8004211553:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  800421155a:	00 00 00 
  800421155d:	ff d0                	callq  *%rax
  800421155f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211563:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211567:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421156e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211572:	48 89 ce             	mov    %rcx,%rsi
  8004211575:	48 89 c7             	mov    %rax,%rdi
  8004211578:	48 b8 8f 0c 21 04 80 	movabs $0x8004210c8f,%rax
  800421157f:	00 00 00 
  8004211582:	ff d0                	callq  *%rax
  8004211584:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211588:	e9 ec 03 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800421158d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211594:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211598:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421159f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042115a3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042115a8:	48 89 cf             	mov    %rcx,%rdi
  80042115ab:	ff d0                	callq  *%rax
  80042115ad:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042115b1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042115b5:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042115bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115c0:	48 89 ce             	mov    %rcx,%rsi
  80042115c3:	48 89 c7             	mov    %rax,%rdi
  80042115c6:	48 b8 8f 0c 21 04 80 	movabs $0x8004210c8f,%rax
  80042115cd:	00 00 00 
  80042115d0:	ff d0                	callq  *%rax
  80042115d2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042115d6:	e9 9e 03 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042115db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042115e2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042115e6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042115ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042115f1:	ba 02 00 00 00       	mov    $0x2,%edx
  80042115f6:	48 89 cf             	mov    %rcx,%rdi
  80042115f9:	ff d0                	callq  *%rax
  80042115fb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042115ff:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211603:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421160a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421160e:	48 89 ce             	mov    %rcx,%rsi
  8004211611:	48 89 c7             	mov    %rax,%rdi
  8004211614:	48 b8 8f 0c 21 04 80 	movabs $0x8004210c8f,%rax
  800421161b:	00 00 00 
  800421161e:	ff d0                	callq  *%rax
  8004211620:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211624:	e9 50 03 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211629:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211630:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211634:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421163b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421163f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211644:	48 89 cf             	mov    %rcx,%rdi
  8004211647:	ff d0                	callq  *%rax
  8004211649:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421164d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211651:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421165c:	48 89 ce             	mov    %rcx,%rsi
  800421165f:	48 89 c7             	mov    %rax,%rdi
  8004211662:	48 b8 8f 0c 21 04 80 	movabs $0x8004210c8f,%rax
  8004211669:	00 00 00 
  800421166c:	ff d0                	callq  *%rax
  800421166e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211672:	e9 02 03 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211677:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421167e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211682:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211689:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421168d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211692:	48 89 cf             	mov    %rcx,%rdi
  8004211695:	ff d0                	callq  *%rax
  8004211697:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421169b:	e9 d9 02 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042116a0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116a7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116ab:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042116b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116b6:	ba 02 00 00 00       	mov    $0x2,%edx
  80042116bb:	48 89 cf             	mov    %rcx,%rdi
  80042116be:	ff d0                	callq  *%rax
  80042116c0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042116c4:	e9 b0 02 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042116c9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116d0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116d4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042116db:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116df:	ba 04 00 00 00       	mov    $0x4,%edx
  80042116e4:	48 89 cf             	mov    %rcx,%rdi
  80042116e7:	ff d0                	callq  *%rax
  80042116e9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042116ed:	e9 87 02 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042116f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116f9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116fd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211704:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211708:	ba 08 00 00 00       	mov    $0x8,%edx
  800421170d:	48 89 cf             	mov    %rcx,%rdi
  8004211710:	ff d0                	callq  *%rax
  8004211712:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211716:	e9 5e 02 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  800421171b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211726:	48 89 d6             	mov    %rdx,%rsi
  8004211729:	48 89 c7             	mov    %rax,%rdi
  800421172c:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211733:	00 00 00 
  8004211736:	ff d0                	callq  *%rax
  8004211738:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800421173f:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004211746:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  800421174d:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211754:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421175b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211762:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211769:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004211770:	4d 89 c1             	mov    %r8,%r9
  8004211773:	49 89 f8             	mov    %rdi,%r8
  8004211776:	48 89 c7             	mov    %rax,%rdi
  8004211779:	48 b8 18 14 21 04 80 	movabs $0x8004211418,%rax
  8004211780:	00 00 00 
  8004211783:	ff d0                	callq  *%rax
  8004211785:	e9 1d 03 00 00       	jmpq   8004211aa7 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  800421178a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211791:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211795:	66 83 f8 02          	cmp    $0x2,%ax
  8004211799:	75 2f                	jne    80042117ca <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800421179b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117a2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042117a6:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042117ad:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042117b1:	0f b6 d2             	movzbl %dl,%edx
  80042117b4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042117bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042117bf:	48 89 cf             	mov    %rcx,%rdi
  80042117c2:	ff d0                	callq  *%rax
  80042117c4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042117c8:	eb 39                	jmp    8004211803 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  80042117ca:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042117d1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042117d5:	66 83 f8 03          	cmp    $0x3,%ax
  80042117d9:	75 28                	jne    8004211803 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042117db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117e2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042117e6:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042117ea:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042117f1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042117f5:	48 89 cf             	mov    %rcx,%rdi
  80042117f8:	ff d0                	callq  *%rax
  80042117fa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042117fe:	e9 76 01 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
  8004211803:	e9 71 01 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211808:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421180f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211813:	48 89 d6             	mov    %rdx,%rsi
  8004211816:	48 89 c7             	mov    %rax,%rdi
  8004211819:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211820:	00 00 00 
  8004211823:	ff d0                	callq  *%rax
  8004211825:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211829:	e9 4b 01 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  800421182e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211835:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211839:	48 89 d6             	mov    %rdx,%rsi
  800421183c:	48 89 c7             	mov    %rax,%rdi
  800421183f:	48 b8 de 09 21 04 80 	movabs $0x80042109de,%rax
  8004211846:	00 00 00 
  8004211849:	ff d0                	callq  *%rax
  800421184b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421184f:	e9 25 01 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211854:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421185b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421185f:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211863:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421186a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421186e:	48 89 cf             	mov    %rcx,%rdi
  8004211871:	ff d0                	callq  *%rax
  8004211873:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211877:	e9 fd 00 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800421187c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211880:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004211884:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421188b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421188f:	48 89 ce             	mov    %rcx,%rsi
  8004211892:	48 89 c7             	mov    %rax,%rdi
  8004211895:	48 b8 00 0c 21 04 80 	movabs $0x8004210c00,%rax
  800421189c:	00 00 00 
  800421189f:	ff d0                	callq  *%rax
  80042118a1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118a5:	e9 cf 00 00 00       	jmpq   8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042118aa:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042118b1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042118b5:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042118b9:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042118c0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042118c4:	48 89 cf             	mov    %rcx,%rdi
  80042118c7:	ff d0                	callq  *%rax
  80042118c9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  80042118cd:	48 bf f2 ac 21 04 80 	movabs $0x800421acf2,%rdi
  80042118d4:	00 00 00 
  80042118d7:	48 b8 47 56 21 04 80 	movabs $0x8004215647,%rax
  80042118de:	00 00 00 
  80042118e1:	ff d0                	callq  *%rax
  80042118e3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  80042118e7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042118ec:	75 35                	jne    8004211923 <_dwarf_attr_init+0x50b>
  80042118ee:	48 b9 fd ac 21 04 80 	movabs $0x800421acfd,%rcx
  80042118f5:	00 00 00 
  80042118f8:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  80042118ff:	00 00 00 
  8004211902:	be 51 02 00 00       	mov    $0x251,%esi
  8004211907:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  800421190e:	00 00 00 
  8004211911:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211916:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421191d:	00 00 00 
  8004211920:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004211923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211927:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421192b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421192f:	48 01 d0             	add    %rdx,%rax
  8004211932:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211936:	eb 41                	jmp    8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004211938:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  800421193f:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004211940:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211944:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421194b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421194f:	48 89 ce             	mov    %rcx,%rsi
  8004211952:	48 89 c7             	mov    %rax,%rdi
  8004211955:	48 b8 8f 0c 21 04 80 	movabs $0x8004210c8f,%rax
  800421195c:	00 00 00 
  800421195f:	ff d0                	callq  *%rax
  8004211961:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211965:	eb 12                	jmp    8004211979 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004211967:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  800421196e:	00 
		break;
  800421196f:	eb 08                	jmp    8004211979 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004211971:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004211978:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004211979:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421197d:	0f 85 21 01 00 00    	jne    8004211aa4 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004211983:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  800421198a:	09 
  800421198b:	74 1e                	je     80042119ab <_dwarf_attr_init+0x593>
  800421198d:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004211994:	0a 
  8004211995:	74 14                	je     80042119ab <_dwarf_attr_init+0x593>
  8004211997:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  800421199e:	03 
  800421199f:	74 0a                	je     80042119ab <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  80042119a1:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  80042119a8:	04 
  80042119a9:	75 10                	jne    80042119bb <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  80042119ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042119af:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  80042119b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042119b7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  80042119bb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042119bf:	48 83 f8 03          	cmp    $0x3,%rax
  80042119c3:	75 39                	jne    80042119fe <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  80042119c5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042119c9:	48 83 f8 08          	cmp    $0x8,%rax
  80042119cd:	74 1c                	je     80042119eb <_dwarf_attr_init+0x5d3>
  80042119cf:	48 83 f8 0e          	cmp    $0xe,%rax
  80042119d3:	74 02                	je     80042119d7 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  80042119d5:	eb 27                	jmp    80042119fe <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  80042119d7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042119db:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042119e2:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042119e9:	eb 13                	jmp    80042119fe <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  80042119eb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042119ef:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042119f6:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042119fd:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  80042119fe:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211a05:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211a0c:	8d 48 01             	lea    0x1(%rax),%ecx
  8004211a0f:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004211a16:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004211a1c:	0f b6 c0             	movzbl %al,%eax
  8004211a1f:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211a26:	48 63 d0             	movslq %eax,%rdx
  8004211a29:	48 89 d0             	mov    %rdx,%rax
  8004211a2c:	48 01 c0             	add    %rax,%rax
  8004211a2f:	48 01 d0             	add    %rdx,%rax
  8004211a32:	48 c1 e0 05          	shl    $0x5,%rax
  8004211a36:	48 01 c8             	add    %rcx,%rax
  8004211a39:	48 05 70 03 00 00    	add    $0x370,%rax
  8004211a3f:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004211a46:	48 89 10             	mov    %rdx,(%rax)
  8004211a49:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004211a50:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004211a54:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004211a58:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004211a5c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004211a60:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211a64:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004211a68:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004211a6c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211a70:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004211a74:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211a78:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004211a7c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004211a80:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004211a84:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211a88:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004211a8c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004211a90:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004211a94:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004211a98:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004211a9c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211aa0:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004211aa4:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004211aa7:	c9                   	leaveq 
  8004211aa8:	c3                   	retq   

0000008004211aa9 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004211aa9:	55                   	push   %rbp
  8004211aaa:	48 89 e5             	mov    %rsp,%rbp
  8004211aad:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004211ab4:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004211abb:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004211ac2:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004211ac9:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004211acf:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004211ad6:	00 
  8004211ad7:	75 35                	jne    8004211b0e <dwarf_search_die_within_cu+0x65>
  8004211ad9:	48 b9 18 ae 21 04 80 	movabs $0x800421ae18,%rcx
  8004211ae0:	00 00 00 
  8004211ae3:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211aea:	00 00 00 
  8004211aed:	be 86 02 00 00       	mov    $0x286,%esi
  8004211af2:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211af9:	00 00 00 
  8004211afc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b01:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211b08:	00 00 00 
  8004211b0b:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004211b0e:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004211b15:	00 
  8004211b16:	75 35                	jne    8004211b4d <dwarf_search_die_within_cu+0xa4>
  8004211b18:	48 b9 1c ae 21 04 80 	movabs $0x800421ae1c,%rcx
  8004211b1f:	00 00 00 
  8004211b22:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211b29:	00 00 00 
  8004211b2c:	be 88 02 00 00       	mov    $0x288,%esi
  8004211b31:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211b38:	00 00 00 
  8004211b3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b40:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211b47:	00 00 00 
  8004211b4a:	41 ff d0             	callq  *%r8

	level = 1;
  8004211b4d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211b54:	e9 17 02 00 00       	jmpq   8004211d70 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004211b59:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211b60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004211b64:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211b6b:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211b6f:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004211b76:	48 89 d6             	mov    %rdx,%rsi
  8004211b79:	48 89 c7             	mov    %rax,%rdi
  8004211b7c:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004211b83:	00 00 00 
  8004211b86:	ff d0                	callq  *%rax
  8004211b88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004211b8c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211b91:	75 22                	jne    8004211bb5 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004211b93:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211b97:	74 09                	je     8004211ba2 <dwarf_search_die_within_cu+0xf9>
  8004211b99:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211ba0:	75 0a                	jne    8004211bac <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004211ba2:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211ba7:	e9 f4 01 00 00       	jmpq   8004211da0 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004211bac:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004211bb0:	e9 bb 01 00 00       	jmpq   8004211d70 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004211bb5:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211bbc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211bc0:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211bc7:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004211bcb:	48 89 34 24          	mov    %rsi,(%rsp)
  8004211bcf:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004211bd3:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004211bd8:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004211bdc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004211be1:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004211be5:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004211bea:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004211bee:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004211bf3:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004211bf7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004211bfc:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004211c00:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004211c05:	48 89 ce             	mov    %rcx,%rsi
  8004211c08:	48 89 c7             	mov    %rax,%rdi
  8004211c0b:	48 b8 e7 12 21 04 80 	movabs $0x80042112e7,%rax
  8004211c12:	00 00 00 
  8004211c15:	ff d0                	callq  *%rax
  8004211c17:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211c1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211c1e:	74 08                	je     8004211c28 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004211c20:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211c23:	e9 78 01 00 00       	jmpq   8004211da0 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004211c28:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c2f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211c33:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004211c36:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211c41:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004211c45:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c4c:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004211c50:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211c57:	b8 66 00 00 00       	mov    $0x66,%eax
  8004211c5c:	48 89 d6             	mov    %rdx,%rsi
  8004211c5f:	48 89 c1             	mov    %rax,%rcx
  8004211c62:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004211c65:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c6c:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004211c73:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004211c7a:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211c81:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211c85:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004211c8c:	e9 8e 00 00 00       	jmpq   8004211d1f <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004211c91:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211c94:	48 63 d0             	movslq %eax,%rdx
  8004211c97:	48 89 d0             	mov    %rdx,%rax
  8004211c9a:	48 01 c0             	add    %rax,%rax
  8004211c9d:	48 01 d0             	add    %rdx,%rax
  8004211ca0:	48 c1 e0 03          	shl    $0x3,%rax
  8004211ca4:	48 01 e8             	add    %rbp,%rax
  8004211ca7:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004211cad:	48 8b 08             	mov    (%rax),%rcx
  8004211cb0:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004211cb7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211cba:	48 63 d0             	movslq %eax,%rdx
  8004211cbd:	48 89 d0             	mov    %rdx,%rax
  8004211cc0:	48 01 c0             	add    %rax,%rax
  8004211cc3:	48 01 d0             	add    %rdx,%rax
  8004211cc6:	48 c1 e0 03          	shl    $0x3,%rax
  8004211cca:	48 83 c0 30          	add    $0x30,%rax
  8004211cce:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004211cd2:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004211cd9:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004211ce0:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211ce7:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004211cee:	49 89 c9             	mov    %rcx,%r9
  8004211cf1:	49 89 f8             	mov    %rdi,%r8
  8004211cf4:	48 89 d1             	mov    %rdx,%rcx
  8004211cf7:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004211cfb:	48 89 c7             	mov    %rax,%rdi
  8004211cfe:	48 b8 18 14 21 04 80 	movabs $0x8004211418,%rax
  8004211d05:	00 00 00 
  8004211d08:	ff d0                	callq  *%rax
  8004211d0a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211d0d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211d11:	74 08                	je     8004211d1b <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004211d13:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211d16:	e9 85 00 00 00       	jmpq   8004211da0 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211d1b:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004211d1f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211d22:	48 63 d0             	movslq %eax,%rdx
  8004211d25:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004211d2c:	48 39 c2             	cmp    %rax,%rdx
  8004211d2f:	0f 82 5c ff ff ff    	jb     8004211c91 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004211d35:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004211d3c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211d43:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004211d47:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211d4e:	74 19                	je     8004211d69 <dwarf_search_die_within_cu+0x2c0>
  8004211d50:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211d54:	7e 13                	jle    8004211d69 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211d56:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004211d5d:	3c 01                	cmp    $0x1,%al
  8004211d5f:	75 06                	jne    8004211d67 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004211d61:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211d65:	eb 09                	jmp    8004211d70 <dwarf_search_die_within_cu+0x2c7>
  8004211d67:	eb 07                	jmp    8004211d70 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004211d69:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d6e:	eb 30                	jmp    8004211da0 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211d70:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004211d74:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211d7b:	48 39 c2             	cmp    %rax,%rdx
  8004211d7e:	76 1b                	jbe    8004211d9b <dwarf_search_die_within_cu+0x2f2>
  8004211d80:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211d87:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004211d8b:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211d92:	48 39 c2             	cmp    %rax,%rdx
  8004211d95:	0f 87 be fd ff ff    	ja     8004211b59 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004211d9b:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211da0:	c9                   	leaveq 
  8004211da1:	c3                   	retq   

0000008004211da2 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004211da2:	55                   	push   %rbp
  8004211da3:	48 89 e5             	mov    %rsp,%rbp
  8004211da6:	48 83 ec 60          	sub    $0x60,%rsp
  8004211daa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211dae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211db2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004211db6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211dbb:	75 35                	jne    8004211df2 <dwarf_offdie+0x50>
  8004211dbd:	48 b9 18 ae 21 04 80 	movabs $0x800421ae18,%rcx
  8004211dc4:	00 00 00 
  8004211dc7:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211dce:	00 00 00 
  8004211dd1:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004211dd6:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211ddd:	00 00 00 
  8004211de0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211de5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211dec:	00 00 00 
  8004211def:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211df2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211df7:	75 35                	jne    8004211e2e <dwarf_offdie+0x8c>
  8004211df9:	48 b9 1c ae 21 04 80 	movabs $0x800421ae1c,%rcx
  8004211e00:	00 00 00 
  8004211e03:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211e0a:	00 00 00 
  8004211e0d:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004211e12:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211e19:	00 00 00 
  8004211e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e21:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211e28:	00 00 00 
  8004211e2b:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004211e2e:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004211e32:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211e36:	76 66                	jbe    8004211e9e <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004211e38:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211e3c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004211e40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e44:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004211e48:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004211e4c:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004211e50:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004211e55:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004211e59:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004211e5e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004211e62:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004211e67:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004211e6b:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004211e70:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004211e74:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004211e79:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004211e7d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004211e82:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004211e87:	48 89 c7             	mov    %rax,%rdi
  8004211e8a:	48 b8 a9 1a 21 04 80 	movabs $0x8004211aa9,%rax
  8004211e91:	00 00 00 
  8004211e94:	ff d0                	callq  *%rax
  8004211e96:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004211e99:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004211e9c:	eb 05                	jmp    8004211ea3 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004211e9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ea3:	c9                   	leaveq 
  8004211ea4:	c3                   	retq   

0000008004211ea5 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004211ea5:	55                   	push   %rbp
  8004211ea6:	48 89 e5             	mov    %rsp,%rbp
  8004211ea9:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211ead:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211eb1:	89 f0                	mov    %esi,%eax
  8004211eb3:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004211eb7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211ebe:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211ebf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004211ec6:	eb 57                	jmp    8004211f1f <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004211ec8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211ecc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211ecf:	48 63 d0             	movslq %eax,%rdx
  8004211ed2:	48 89 d0             	mov    %rdx,%rax
  8004211ed5:	48 01 c0             	add    %rax,%rax
  8004211ed8:	48 01 d0             	add    %rdx,%rax
  8004211edb:	48 c1 e0 05          	shl    $0x5,%rax
  8004211edf:	48 01 c8             	add    %rcx,%rax
  8004211ee2:	48 05 80 03 00 00    	add    $0x380,%rax
  8004211ee8:	48 8b 10             	mov    (%rax),%rdx
  8004211eeb:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004211eef:	48 39 c2             	cmp    %rax,%rdx
  8004211ef2:	75 27                	jne    8004211f1b <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004211ef4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211ef7:	48 63 d0             	movslq %eax,%rdx
  8004211efa:	48 89 d0             	mov    %rdx,%rax
  8004211efd:	48 01 c0             	add    %rax,%rax
  8004211f00:	48 01 d0             	add    %rdx,%rax
  8004211f03:	48 c1 e0 05          	shl    $0x5,%rax
  8004211f07:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004211f0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f12:	48 01 d0             	add    %rdx,%rax
  8004211f15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004211f19:	eb 17                	jmp    8004211f32 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211f1b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004211f1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f23:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211f2a:	0f b6 c0             	movzbl %al,%eax
  8004211f2d:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004211f30:	7f 96                	jg     8004211ec8 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004211f32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211f36:	c9                   	leaveq 
  8004211f37:	c3                   	retq   

0000008004211f38 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004211f38:	55                   	push   %rbp
  8004211f39:	48 89 e5             	mov    %rsp,%rbp
  8004211f3c:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004211f40:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211f44:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211f48:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004211f4c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004211f50:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211f55:	75 35                	jne    8004211f8c <dwarf_siblingof+0x54>
  8004211f57:	48 b9 18 ae 21 04 80 	movabs $0x800421ae18,%rcx
  8004211f5e:	00 00 00 
  8004211f61:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211f68:	00 00 00 
  8004211f6b:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004211f70:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211f77:	00 00 00 
  8004211f7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f7f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211f86:	00 00 00 
  8004211f89:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211f8c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211f91:	75 35                	jne    8004211fc8 <dwarf_siblingof+0x90>
  8004211f93:	48 b9 1c ae 21 04 80 	movabs $0x800421ae1c,%rcx
  8004211f9a:	00 00 00 
  8004211f9d:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211fa4:	00 00 00 
  8004211fa7:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004211fac:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211fb3:	00 00 00 
  8004211fb6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fbb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211fc2:	00 00 00 
  8004211fc5:	41 ff d0             	callq  *%r8
	assert(cu);
  8004211fc8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004211fcd:	75 35                	jne    8004212004 <dwarf_siblingof+0xcc>
  8004211fcf:	48 b9 24 ae 21 04 80 	movabs $0x800421ae24,%rcx
  8004211fd6:	00 00 00 
  8004211fd9:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004211fe0:	00 00 00 
  8004211fe3:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004211fe8:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004211fef:	00 00 00 
  8004211ff2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ff7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211ffe:	00 00 00 
  8004212001:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212004:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212009:	75 65                	jne    8004212070 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800421200b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421200f:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212013:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212017:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421201b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421201f:	48 8b 38             	mov    (%rax),%rdi
  8004212022:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212026:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800421202a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800421202f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212033:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212038:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800421203c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212041:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212045:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800421204a:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800421204e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212053:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212057:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421205c:	48 89 cf             	mov    %rcx,%rdi
  800421205f:	48 b8 a2 1d 21 04 80 	movabs $0x8004211da2,%rax
  8004212066:	00 00 00 
  8004212069:	ff d0                	callq  *%rax
  800421206b:	e9 0a 01 00 00       	jmpq   800421217a <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212070:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212077:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421207b:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800421207f:	84 c0                	test   %al,%al
  8004212081:	75 0e                	jne    8004212091 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212083:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212087:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421208b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421208f:	eb 6b                	jmp    80042120fc <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212091:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212095:	be 01 00 00 00       	mov    $0x1,%esi
  800421209a:	48 89 c7             	mov    %rax,%rdi
  800421209d:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  80042120a4:	00 00 00 
  80042120a7:	ff d0                	callq  *%rax
  80042120a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042120ad:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042120b2:	74 35                	je     80042120e9 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  80042120b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120b8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042120bc:	48 83 f8 10          	cmp    $0x10,%rax
  80042120c0:	74 19                	je     80042120db <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  80042120c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120c6:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042120ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042120ce:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042120d2:	48 01 d0             	add    %rdx,%rax
  80042120d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042120d9:	eb 21                	jmp    80042120fc <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  80042120db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120df:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042120e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042120e7:	eb 13                	jmp    80042120fc <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  80042120e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042120ed:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042120f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  80042120f5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  80042120fc:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042120ff:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212103:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212107:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800421210b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421210f:	4c 8b 00             	mov    (%rax),%r8
  8004212112:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212116:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421211a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800421211f:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212123:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212128:	4c 8b 40 18          	mov    0x18(%rax),%r8
  800421212c:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212131:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212135:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  800421213a:	4c 8b 40 28          	mov    0x28(%rax),%r8
  800421213e:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212143:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212147:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421214c:	48 b8 a9 1a 21 04 80 	movabs $0x8004211aa9,%rax
  8004212153:	00 00 00 
  8004212156:	ff d0                	callq  *%rax
  8004212158:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  800421215b:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  800421215f:	75 07                	jne    8004212168 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212161:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212166:	eb 12                	jmp    800421217a <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212168:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421216c:	74 07                	je     8004212175 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  800421216e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212173:	eb 05                	jmp    800421217a <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212175:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421217a:	c9                   	leaveq 
  800421217b:	c3                   	retq   

000000800421217c <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  800421217c:	55                   	push   %rbp
  800421217d:	48 89 e5             	mov    %rsp,%rbp
  8004212180:	48 83 ec 70          	sub    $0x70,%rsp
  8004212184:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212188:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421218c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212190:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212194:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212199:	75 35                	jne    80042121d0 <dwarf_child+0x54>
  800421219b:	48 b9 27 ae 21 04 80 	movabs $0x800421ae27,%rcx
  80042121a2:	00 00 00 
  80042121a5:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  80042121ac:	00 00 00 
  80042121af:	be 1c 03 00 00       	mov    $0x31c,%esi
  80042121b4:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  80042121bb:	00 00 00 
  80042121be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042121c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042121ca:	00 00 00 
  80042121cd:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042121d0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042121d5:	75 35                	jne    800421220c <dwarf_child+0x90>
  80042121d7:	48 b9 1c ae 21 04 80 	movabs $0x800421ae1c,%rcx
  80042121de:	00 00 00 
  80042121e1:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  80042121e8:	00 00 00 
  80042121eb:	be 1d 03 00 00       	mov    $0x31d,%esi
  80042121f0:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  80042121f7:	00 00 00 
  80042121fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042121ff:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212206:	00 00 00 
  8004212209:	41 ff d0             	callq  *%r8
	assert(dbg);
  800421220c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212211:	75 35                	jne    8004212248 <dwarf_child+0xcc>
  8004212213:	48 b9 18 ae 21 04 80 	movabs $0x800421ae18,%rcx
  800421221a:	00 00 00 
  800421221d:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004212224:	00 00 00 
  8004212227:	be 1e 03 00 00       	mov    $0x31e,%esi
  800421222c:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  8004212233:	00 00 00 
  8004212236:	b8 00 00 00 00       	mov    $0x0,%eax
  800421223b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212242:	00 00 00 
  8004212245:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212248:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421224d:	75 35                	jne    8004212284 <dwarf_child+0x108>
  800421224f:	48 b9 24 ae 21 04 80 	movabs $0x800421ae24,%rcx
  8004212256:	00 00 00 
  8004212259:	48 ba 8a ac 21 04 80 	movabs $0x800421ac8a,%rdx
  8004212260:	00 00 00 
  8004212263:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212268:	48 bf 9f ac 21 04 80 	movabs $0x800421ac9f,%rdi
  800421226f:	00 00 00 
  8004212272:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212277:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421227e:	00 00 00 
  8004212281:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212284:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212288:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800421228c:	84 c0                	test   %al,%al
  800421228e:	75 0a                	jne    800421229a <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212290:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212295:	e9 84 00 00 00       	jmpq   800421231e <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  800421229a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421229e:	48 8b 70 08          	mov    0x8(%rax),%rsi
  80042122a2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042122a6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  80042122aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042122ae:	48 8b 08             	mov    (%rax),%rcx
  80042122b1:	48 89 0c 24          	mov    %rcx,(%rsp)
  80042122b5:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042122b9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  80042122be:	48 8b 48 10          	mov    0x10(%rax),%rcx
  80042122c2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  80042122c7:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042122cb:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  80042122d0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042122d4:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  80042122d9:	48 8b 48 28          	mov    0x28(%rax),%rcx
  80042122dd:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  80042122e2:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042122e6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042122eb:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042122f0:	48 b8 a9 1a 21 04 80 	movabs $0x8004211aa9,%rax
  80042122f7:	00 00 00 
  80042122fa:	ff d0                	callq  *%rax
  80042122fc:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  80042122ff:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212303:	75 07                	jne    800421230c <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212305:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421230a:	eb 12                	jmp    800421231e <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  800421230c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212310:	74 07                	je     8004212319 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212312:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212317:	eb 05                	jmp    800421231e <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212319:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421231e:	c9                   	leaveq 
  800421231f:	c3                   	retq   

0000008004212320 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212320:	55                   	push   %rbp
  8004212321:	48 89 e5             	mov    %rsp,%rbp
  8004212324:	48 83 ec 20          	sub    $0x20,%rsp
  8004212328:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  800421232c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212330:	48 8b 00             	mov    (%rax),%rax
  8004212333:	48 89 c7             	mov    %rax,%rdi
  8004212336:	48 b8 47 56 21 04 80 	movabs $0x8004215647,%rax
  800421233d:	00 00 00 
  8004212340:	ff d0                	callq  *%rax
  8004212342:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421234a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421234e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212352:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212356:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421235a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421235e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212362:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421236a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421236e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212372:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212376:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421237b:	c9                   	leaveq 
  800421237c:	c3                   	retq   

000000800421237d <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  800421237d:	55                   	push   %rbp
  800421237e:	48 89 e5             	mov    %rsp,%rbp
  8004212381:	48 83 ec 08          	sub    $0x8,%rsp
  8004212385:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421238d:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212393:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212397:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  800421239d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123a1:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  80042123a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123ab:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  80042123b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123b5:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  80042123bb:	c9                   	leaveq 
  80042123bc:	c3                   	retq   

00000080042123bd <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  80042123bd:	55                   	push   %rbp
  80042123be:	48 89 e5             	mov    %rsp,%rbp
  80042123c1:	48 83 ec 40          	sub    $0x40,%rsp
  80042123c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042123c9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042123cd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042123d1:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042123d5:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  80042123d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042123dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  80042123e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123e5:	ba 80 00 00 00       	mov    $0x80,%edx
  80042123ea:	be 00 00 00 00       	mov    $0x0,%esi
  80042123ef:	48 89 c7             	mov    %rax,%rdi
  80042123f2:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042123f9:	00 00 00 
  80042123fc:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  80042123fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212402:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212406:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  800421240a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421240f:	75 07                	jne    8004212418 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004212411:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212416:	eb 75                	jmp    800421248d <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212418:	eb 59                	jmp    8004212473 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  800421241a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800421241e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212422:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212426:	be 01 00 00 00       	mov    $0x1,%esi
  800421242b:	48 89 c7             	mov    %rax,%rdi
  800421242e:	48 b8 d2 45 21 04 80 	movabs $0x80042145d2,%rax
  8004212435:	00 00 00 
  8004212438:	ff d0                	callq  *%rax
  800421243a:	85 c0                	test   %eax,%eax
  800421243c:	79 07                	jns    8004212445 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  800421243e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212443:	eb 48                	jmp    800421248d <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212449:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421244d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212451:	77 20                	ja     8004212473 <dwarf_get_fde_at_pc+0xb6>
  8004212453:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212457:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  800421245b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421245f:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212463:	48 01 d0             	add    %rdx,%rax
  8004212466:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421246a:	76 07                	jbe    8004212473 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  800421246c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212471:	eb 1a                	jmp    800421248d <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212473:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212477:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421247b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421247f:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004212483:	48 39 c2             	cmp    %rax,%rdx
  8004212486:	72 92                	jb     800421241a <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004212488:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  800421248d:	c9                   	leaveq 
  800421248e:	c3                   	retq   

000000800421248f <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  800421248f:	55                   	push   %rbp
  8004212490:	48 89 e5             	mov    %rsp,%rbp
  8004212493:	53                   	push   %rbx
  8004212494:	48 83 ec 38          	sub    $0x38,%rsp
  8004212498:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421249c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042124a0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042124a4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  80042124a8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042124ad:	75 35                	jne    80042124e4 <_dwarf_frame_regtable_copy+0x55>
  80042124af:	48 b9 3a ae 21 04 80 	movabs $0x800421ae3a,%rcx
  80042124b6:	00 00 00 
  80042124b9:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  80042124c0:	00 00 00 
  80042124c3:	be 57 00 00 00       	mov    $0x57,%esi
  80042124c8:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  80042124cf:	00 00 00 
  80042124d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042124d7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042124de:	00 00 00 
  80042124e1:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  80042124e4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042124e9:	75 35                	jne    8004212520 <_dwarf_frame_regtable_copy+0x91>
  80042124eb:	48 b9 72 ae 21 04 80 	movabs $0x800421ae72,%rcx
  80042124f2:	00 00 00 
  80042124f5:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  80042124fc:	00 00 00 
  80042124ff:	be 58 00 00 00       	mov    $0x58,%esi
  8004212504:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  800421250b:	00 00 00 
  800421250e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212513:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421251a:	00 00 00 
  800421251d:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004212520:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212524:	48 8b 00             	mov    (%rax),%rax
  8004212527:	48 85 c0             	test   %rax,%rax
  800421252a:	75 39                	jne    8004212565 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  800421252c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212530:	48 bb e0 d6 49 04 80 	movabs $0x800449d6e0,%rbx
  8004212537:	00 00 00 
  800421253a:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  800421253d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212541:	48 8b 00             	mov    (%rax),%rax
  8004212544:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212548:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  800421254c:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004212550:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212554:	48 8b 00             	mov    (%rax),%rax
  8004212557:	48 bb e0 b7 69 04 80 	movabs $0x800469b7e0,%rbx
  800421255e:	00 00 00 
  8004212561:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212565:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004212569:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421256d:	48 8b 00             	mov    (%rax),%rax
  8004212570:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212575:	48 89 ce             	mov    %rcx,%rsi
  8004212578:	48 89 c7             	mov    %rax,%rdi
  800421257b:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  8004212582:	00 00 00 
  8004212585:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212587:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800421258e:	eb 5a                	jmp    80042125ea <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004212590:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212594:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212598:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421259b:	48 63 d0             	movslq %eax,%rdx
  800421259e:	48 89 d0             	mov    %rdx,%rax
  80042125a1:	48 01 c0             	add    %rax,%rax
  80042125a4:	48 01 d0             	add    %rdx,%rax
  80042125a7:	48 c1 e0 03          	shl    $0x3,%rax
  80042125ab:	48 01 c1             	add    %rax,%rcx
  80042125ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125b2:	48 8b 00             	mov    (%rax),%rax
  80042125b5:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042125b9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042125bc:	48 63 d0             	movslq %eax,%rdx
  80042125bf:	48 89 d0             	mov    %rdx,%rax
  80042125c2:	48 01 c0             	add    %rax,%rax
  80042125c5:	48 01 d0             	add    %rdx,%rax
  80042125c8:	48 c1 e0 03          	shl    $0x3,%rax
  80042125cc:	48 01 f0             	add    %rsi,%rax
  80042125cf:	ba 18 00 00 00       	mov    $0x18,%edx
  80042125d4:	48 89 ce             	mov    %rcx,%rsi
  80042125d7:	48 89 c7             	mov    %rax,%rdi
  80042125da:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  80042125e1:	00 00 00 
  80042125e4:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  80042125e6:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042125ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125ee:	48 8b 00             	mov    (%rax),%rax
  80042125f1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042125f5:	0f b7 c0             	movzwl %ax,%eax
  80042125f8:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042125fb:	7e 10                	jle    800421260d <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  80042125fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212601:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212605:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212608:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421260b:	7f 83                	jg     8004212590 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421260d:	eb 32                	jmp    8004212641 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  800421260f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212613:	48 8b 00             	mov    (%rax),%rax
  8004212616:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421261a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421261d:	48 63 d0             	movslq %eax,%rdx
  8004212620:	48 89 d0             	mov    %rdx,%rax
  8004212623:	48 01 c0             	add    %rax,%rax
  8004212626:	48 01 d0             	add    %rdx,%rax
  8004212629:	48 c1 e0 03          	shl    $0x3,%rax
  800421262d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004212631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212635:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004212639:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421263d:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004212641:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212645:	48 8b 00             	mov    (%rax),%rax
  8004212648:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421264c:	0f b7 c0             	movzwl %ax,%eax
  800421264f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212652:	7f bb                	jg     800421260f <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004212654:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212659:	48 83 c4 38          	add    $0x38,%rsp
  800421265d:	5b                   	pop    %rbx
  800421265e:	5d                   	pop    %rbp
  800421265f:	c3                   	retq   

0000008004212660 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004212660:	55                   	push   %rbp
  8004212661:	48 89 e5             	mov    %rsp,%rbp
  8004212664:	53                   	push   %rbx
  8004212665:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800421266c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004212670:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004212674:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004212678:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421267c:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  8004212683:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  800421268a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  8004212691:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004212698:	00 
  8004212699:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421269d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042126a1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042126a5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042126a9:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042126ac:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042126b0:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042126b4:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042126b8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042126bc:	48 89 c7             	mov    %rax,%rdi
  80042126bf:	48 b8 8f 24 21 04 80 	movabs $0x800421248f,%rax
  80042126c6:	00 00 00 
  80042126c9:	ff d0                	callq  *%rax
	p = insts;
  80042126cb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042126cf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  80042126d3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042126d7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042126db:	48 01 d0             	add    %rdx,%rax
  80042126de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  80042126e2:	e9 3a 0d 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  80042126e7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042126eb:	0f b6 00             	movzbl (%rax),%eax
  80042126ee:	84 c0                	test   %al,%al
  80042126f0:	75 11                	jne    8004212703 <_dwarf_frame_run_inst+0xa3>
			p++;
  80042126f2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042126f6:	48 83 c0 01          	add    $0x1,%rax
  80042126fa:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  80042126fe:	e9 1e 0d 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  8004212703:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212707:	0f b6 00             	movzbl (%rax),%eax
  800421270a:	83 e0 c0             	and    $0xffffffc0,%eax
  800421270d:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004212710:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212714:	0f b6 00             	movzbl (%rax),%eax
  8004212717:	83 e0 3f             	and    $0x3f,%eax
  800421271a:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  800421271d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212721:	48 83 c0 01          	add    $0x1,%rax
  8004212725:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004212729:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  800421272d:	0f 84 a1 01 00 00    	je     80042128d4 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  8004212733:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004212737:	3d 80 00 00 00       	cmp    $0x80,%eax
  800421273c:	74 38                	je     8004212776 <_dwarf_frame_run_inst+0x116>
  800421273e:	3d c0 00 00 00       	cmp    $0xc0,%eax
  8004212743:	0f 84 01 01 00 00    	je     800421284a <_dwarf_frame_run_inst+0x1ea>
  8004212749:	83 f8 40             	cmp    $0x40,%eax
  800421274c:	0f 85 71 01 00 00    	jne    80042128c3 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004212752:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212756:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421275d:	ff 
  800421275e:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004212762:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212766:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421276a:	73 05                	jae    8004212771 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800421276c:	e9 be 0c 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004212771:	e9 59 01 00 00       	jmpq   80042128cf <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004212776:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421277a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421277e:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212781:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212785:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212789:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421278d:	66 39 c2             	cmp    %ax,%dx
  8004212790:	72 0c                	jb     800421279e <_dwarf_frame_run_inst+0x13e>
  8004212792:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212799:	e9 91 0c 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  800421279e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042127a2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042127a6:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042127aa:	48 89 d0             	mov    %rdx,%rax
  80042127ad:	48 01 c0             	add    %rax,%rax
  80042127b0:	48 01 d0             	add    %rdx,%rax
  80042127b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042127b7:	48 01 c8             	add    %rcx,%rax
  80042127ba:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042127bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042127c1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042127c5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042127c9:	48 89 d0             	mov    %rdx,%rax
  80042127cc:	48 01 c0             	add    %rax,%rax
  80042127cf:	48 01 d0             	add    %rdx,%rax
  80042127d2:	48 c1 e0 03          	shl    $0x3,%rax
  80042127d6:	48 01 c8             	add    %rcx,%rax
  80042127d9:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  80042127dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042127e1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042127e5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042127e9:	48 89 d0             	mov    %rdx,%rax
  80042127ec:	48 01 c0             	add    %rax,%rax
  80042127ef:	48 01 d0             	add    %rdx,%rax
  80042127f2:	48 c1 e0 03          	shl    $0x3,%rax
  80042127f6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042127fa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042127fe:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212802:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004212806:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421280a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421280e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212812:	48 89 d0             	mov    %rdx,%rax
  8004212815:	48 01 c0             	add    %rax,%rax
  8004212818:	48 01 d0             	add    %rdx,%rax
  800421281b:	48 c1 e0 03          	shl    $0x3,%rax
  800421281f:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004212823:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212827:	48 89 c7             	mov    %rax,%rdi
  800421282a:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212831:	00 00 00 
  8004212834:	ff d0                	callq  *%rax
  8004212836:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421283d:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004212841:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004212845:	e9 85 00 00 00       	jmpq   80042128cf <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  800421284a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421284e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212852:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212855:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212859:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421285d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212861:	66 39 c2             	cmp    %ax,%dx
  8004212864:	72 0c                	jb     8004212872 <_dwarf_frame_run_inst+0x212>
  8004212866:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421286d:	e9 bd 0b 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004212872:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212876:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421287a:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421287e:	48 89 d0             	mov    %rdx,%rax
  8004212881:	48 01 c0             	add    %rax,%rax
  8004212884:	48 01 d0             	add    %rdx,%rax
  8004212887:	48 c1 e0 03          	shl    $0x3,%rax
  800421288b:	48 01 c1             	add    %rax,%rcx
  800421288e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212892:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212896:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421289a:	48 89 d0             	mov    %rdx,%rax
  800421289d:	48 01 c0             	add    %rax,%rax
  80042128a0:	48 01 d0             	add    %rdx,%rax
  80042128a3:	48 c1 e0 03          	shl    $0x3,%rax
  80042128a7:	48 01 f0             	add    %rsi,%rax
  80042128aa:	ba 18 00 00 00       	mov    $0x18,%edx
  80042128af:	48 89 ce             	mov    %rcx,%rsi
  80042128b2:	48 89 c7             	mov    %rax,%rdi
  80042128b5:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  80042128bc:	00 00 00 
  80042128bf:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042128c1:	eb 0c                	jmp    80042128cf <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042128c3:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  80042128ca:	e9 60 0b 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  80042128cf:	e9 4d 0b 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  80042128d4:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042128d8:	83 f8 16             	cmp    $0x16,%eax
  80042128db:	0f 87 37 0b 00 00    	ja     8004213418 <_dwarf_frame_run_inst+0xdb8>
  80042128e1:	89 c0                	mov    %eax,%eax
  80042128e3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042128ea:	00 
  80042128eb:	48 b8 80 ae 21 04 80 	movabs $0x800421ae80,%rax
  80042128f2:	00 00 00 
  80042128f5:	48 01 d0             	add    %rdx,%rax
  80042128f8:	48 8b 00             	mov    (%rax),%rax
  80042128fb:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  80042128fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212901:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212905:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212909:	8b 4a 28             	mov    0x28(%rdx),%ecx
  800421290c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212910:	89 ce                	mov    %ecx,%esi
  8004212912:	48 89 d7             	mov    %rdx,%rdi
  8004212915:	ff d0                	callq  *%rax
  8004212917:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421291b:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421291f:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212923:	73 05                	jae    800421292a <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004212925:	e9 05 0b 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			break;
  800421292a:	e9 f2 0a 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  800421292f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212933:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212937:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421293b:	be 01 00 00 00       	mov    $0x1,%esi
  8004212940:	48 89 d7             	mov    %rdx,%rdi
  8004212943:	ff d0                	callq  *%rax
  8004212945:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421294c:	ff 
  800421294d:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212951:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212955:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212959:	73 05                	jae    8004212960 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  800421295b:	e9 cf 0a 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212960:	e9 bc 0a 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004212965:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212969:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421296d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212971:	be 02 00 00 00       	mov    $0x2,%esi
  8004212976:	48 89 d7             	mov    %rdx,%rdi
  8004212979:	ff d0                	callq  *%rax
  800421297b:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212982:	ff 
  8004212983:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212987:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421298b:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421298f:	73 05                	jae    8004212996 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004212991:	e9 99 0a 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212996:	e9 86 0a 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  800421299b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421299f:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042129a3:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042129a7:	be 04 00 00 00       	mov    $0x4,%esi
  80042129ac:	48 89 d7             	mov    %rdx,%rdi
  80042129af:	ff d0                	callq  *%rax
  80042129b1:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042129b8:	ff 
  80042129b9:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042129bd:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042129c1:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042129c5:	73 05                	jae    80042129cc <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  80042129c7:	e9 63 0a 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			break;
  80042129cc:	e9 50 0a 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  80042129d1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042129d5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042129d9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042129dc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042129e0:	48 89 c7             	mov    %rax,%rdi
  80042129e3:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  80042129ea:	00 00 00 
  80042129ed:	ff d0                	callq  *%rax
  80042129ef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042129f3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042129f7:	48 89 c7             	mov    %rax,%rdi
  80042129fa:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212a01:	00 00 00 
  8004212a04:	ff d0                	callq  *%rax
  8004212a06:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212a0a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a0e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212a12:	0f b7 c0             	movzwl %ax,%eax
  8004212a15:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212a19:	77 0c                	ja     8004212a27 <_dwarf_frame_run_inst+0x3c7>
  8004212a1b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212a22:	e9 08 0a 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004212a27:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a2b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212a33:	48 89 d0             	mov    %rdx,%rax
  8004212a36:	48 01 c0             	add    %rax,%rax
  8004212a39:	48 01 d0             	add    %rdx,%rax
  8004212a3c:	48 c1 e0 03          	shl    $0x3,%rax
  8004212a40:	48 01 c8             	add    %rcx,%rax
  8004212a43:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004212a46:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a4a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a4e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212a52:	48 89 d0             	mov    %rdx,%rax
  8004212a55:	48 01 c0             	add    %rax,%rax
  8004212a58:	48 01 d0             	add    %rdx,%rax
  8004212a5b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212a5f:	48 01 c8             	add    %rcx,%rax
  8004212a62:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212a66:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a6a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a6e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212a72:	48 89 d0             	mov    %rdx,%rax
  8004212a75:	48 01 c0             	add    %rax,%rax
  8004212a78:	48 01 d0             	add    %rdx,%rax
  8004212a7b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212a7f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212a83:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a87:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212a8b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004212a8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212a93:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a97:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212a9b:	48 89 d0             	mov    %rdx,%rax
  8004212a9e:	48 01 c0             	add    %rax,%rax
  8004212aa1:	48 01 d0             	add    %rdx,%rax
  8004212aa4:	48 c1 e0 03          	shl    $0x3,%rax
  8004212aa8:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212aac:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212ab3:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004212ab8:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004212abc:	e9 60 09 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004212ac1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ac5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ac9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212acc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ad0:	48 89 c7             	mov    %rax,%rdi
  8004212ad3:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212ada:	00 00 00 
  8004212add:	ff d0                	callq  *%rax
  8004212adf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212ae3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ae7:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212aeb:	0f b7 c0             	movzwl %ax,%eax
  8004212aee:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212af2:	77 0c                	ja     8004212b00 <_dwarf_frame_run_inst+0x4a0>
  8004212af4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212afb:	e9 2f 09 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004212b00:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212b04:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b08:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b0c:	48 89 d0             	mov    %rdx,%rax
  8004212b0f:	48 01 c0             	add    %rax,%rax
  8004212b12:	48 01 d0             	add    %rdx,%rax
  8004212b15:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b19:	48 01 c1             	add    %rax,%rcx
  8004212b1c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b20:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212b24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b28:	48 89 d0             	mov    %rdx,%rax
  8004212b2b:	48 01 c0             	add    %rax,%rax
  8004212b2e:	48 01 d0             	add    %rdx,%rax
  8004212b31:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b35:	48 01 f0             	add    %rsi,%rax
  8004212b38:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212b3d:	48 89 ce             	mov    %rcx,%rsi
  8004212b40:	48 89 c7             	mov    %rax,%rdi
  8004212b43:	48 b8 12 01 21 04 80 	movabs $0x8004210112,%rax
  8004212b4a:	00 00 00 
  8004212b4d:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004212b4f:	e9 cd 08 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004212b54:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212b58:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212b5c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212b5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212b63:	48 89 c7             	mov    %rax,%rdi
  8004212b66:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212b6d:	00 00 00 
  8004212b70:	ff d0                	callq  *%rax
  8004212b72:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212b76:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b7a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212b7e:	0f b7 c0             	movzwl %ax,%eax
  8004212b81:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212b85:	77 0c                	ja     8004212b93 <_dwarf_frame_run_inst+0x533>
  8004212b87:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212b8e:	e9 9c 08 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212b93:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b97:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b9b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b9f:	48 89 d0             	mov    %rdx,%rax
  8004212ba2:	48 01 c0             	add    %rax,%rax
  8004212ba5:	48 01 d0             	add    %rdx,%rax
  8004212ba8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bac:	48 01 c8             	add    %rcx,%rax
  8004212baf:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004212bb2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bb6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212bbe:	48 89 d0             	mov    %rdx,%rax
  8004212bc1:	48 01 c0             	add    %rax,%rax
  8004212bc4:	48 01 d0             	add    %rdx,%rax
  8004212bc7:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bcb:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212bcf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212bd3:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004212bd7:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212bdb:	e9 41 08 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004212be0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212be4:	48 89 c7             	mov    %rax,%rdi
  8004212be7:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212bee:	00 00 00 
  8004212bf1:	ff d0                	callq  *%rax
  8004212bf3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212bf7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bfb:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212bff:	0f b7 c0             	movzwl %ax,%eax
  8004212c02:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212c06:	77 0c                	ja     8004212c14 <_dwarf_frame_run_inst+0x5b4>
  8004212c08:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212c0f:	e9 1b 08 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212c14:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c18:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c1c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c20:	48 89 d0             	mov    %rdx,%rax
  8004212c23:	48 01 c0             	add    %rax,%rax
  8004212c26:	48 01 d0             	add    %rdx,%rax
  8004212c29:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c2d:	48 01 c8             	add    %rcx,%rax
  8004212c30:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004212c33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c37:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c3b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c3f:	48 89 d0             	mov    %rdx,%rax
  8004212c42:	48 01 c0             	add    %rax,%rax
  8004212c45:	48 01 d0             	add    %rdx,%rax
  8004212c48:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c4c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212c50:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212c54:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004212c58:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212c5c:	e9 c0 07 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004212c61:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212c65:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212c69:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212c6c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c70:	48 89 c7             	mov    %rax,%rdi
  8004212c73:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212c7a:	00 00 00 
  8004212c7d:	ff d0                	callq  *%rax
  8004212c7f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004212c83:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c87:	48 89 c7             	mov    %rax,%rdi
  8004212c8a:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212c91:	00 00 00 
  8004212c94:	ff d0                	callq  *%rax
  8004212c96:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212c9a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c9e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212ca2:	0f b7 c0             	movzwl %ax,%eax
  8004212ca5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212ca9:	77 0c                	ja     8004212cb7 <_dwarf_frame_run_inst+0x657>
  8004212cab:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212cb2:	e9 78 07 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212cb7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cbb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212cbf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212cc3:	48 89 d0             	mov    %rdx,%rax
  8004212cc6:	48 01 c0             	add    %rax,%rax
  8004212cc9:	48 01 d0             	add    %rdx,%rax
  8004212ccc:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cd0:	48 01 c8             	add    %rcx,%rax
  8004212cd3:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004212cd6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cda:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212cde:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ce2:	48 89 d0             	mov    %rdx,%rax
  8004212ce5:	48 01 c0             	add    %rax,%rax
  8004212ce8:	48 01 d0             	add    %rdx,%rax
  8004212ceb:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cef:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212cf3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212cf7:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212cfb:	e9 21 07 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004212d00:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212d04:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212d08:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004212d0c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d10:	48 89 c7             	mov    %rax,%rdi
  8004212d13:	48 b8 8f 24 21 04 80 	movabs $0x800421248f,%rax
  8004212d1a:	00 00 00 
  8004212d1d:	ff d0                	callq  *%rax
			break;
  8004212d1f:	e9 fd 06 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004212d24:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212d28:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212d2c:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004212d2f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212d33:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212d37:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004212d3b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d3f:	48 89 c7             	mov    %rax,%rdi
  8004212d42:	48 b8 8f 24 21 04 80 	movabs $0x800421248f,%rax
  8004212d49:	00 00 00 
  8004212d4c:	ff d0                	callq  *%rax
			break;
  8004212d4e:	e9 ce 06 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004212d53:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212d57:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212d5b:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212d5e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d62:	48 89 c7             	mov    %rax,%rdi
  8004212d65:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212d6c:	00 00 00 
  8004212d6f:	ff d0                	callq  *%rax
  8004212d71:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212d75:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d79:	48 89 c7             	mov    %rax,%rdi
  8004212d7c:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212d83:	00 00 00 
  8004212d86:	ff d0                	callq  *%rax
  8004212d88:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212d8c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d90:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212d93:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d97:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004212d9b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d9f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212da3:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212da7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212dab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212daf:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212db3:	e9 69 06 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004212db8:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212dbc:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212dc0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212dc3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212dc7:	48 89 c7             	mov    %rax,%rdi
  8004212dca:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212dd1:	00 00 00 
  8004212dd4:	ff d0                	callq  *%rax
  8004212dd6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004212dda:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212dde:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212de2:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004212de6:	e9 36 06 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004212deb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212def:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212df3:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004212df6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212dfa:	48 89 c7             	mov    %rax,%rdi
  8004212dfd:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212e04:	00 00 00 
  8004212e07:	ff d0                	callq  *%rax
  8004212e09:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212e0d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e11:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212e14:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e18:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212e1c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e24:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212e28:	e9 f4 05 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004212e2d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e31:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e35:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004212e38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e3c:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004212e3f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e43:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004212e47:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004212e4b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e4f:	48 89 c7             	mov    %rax,%rdi
  8004212e52:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212e59:	00 00 00 
  8004212e5c:	ff d0                	callq  *%rax
  8004212e5e:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004212e62:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e66:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212e6a:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004212e6e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212e72:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e76:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212e7a:	48 01 d0             	add    %rdx,%rax
  8004212e7d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212e81:	e9 9b 05 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004212e86:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e8a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e8e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212e91:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e95:	48 89 c7             	mov    %rax,%rdi
  8004212e98:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212e9f:	00 00 00 
  8004212ea2:	ff d0                	callq  *%rax
  8004212ea4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212ea8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212eac:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212eb0:	0f b7 c0             	movzwl %ax,%eax
  8004212eb3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212eb7:	77 0c                	ja     8004212ec5 <_dwarf_frame_run_inst+0x865>
  8004212eb9:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212ec0:	e9 6a 05 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212ec5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ec9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ecd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ed1:	48 89 d0             	mov    %rdx,%rax
  8004212ed4:	48 01 c0             	add    %rax,%rax
  8004212ed7:	48 01 d0             	add    %rdx,%rax
  8004212eda:	48 c1 e0 03          	shl    $0x3,%rax
  8004212ede:	48 01 c8             	add    %rcx,%rax
  8004212ee1:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004212ee4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ee8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212eec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ef0:	48 89 d0             	mov    %rdx,%rax
  8004212ef3:	48 01 c0             	add    %rax,%rax
  8004212ef6:	48 01 d0             	add    %rdx,%rax
  8004212ef9:	48 c1 e0 03          	shl    $0x3,%rax
  8004212efd:	48 01 c8             	add    %rcx,%rax
  8004212f00:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004212f04:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f08:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f0c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f10:	48 89 d0             	mov    %rdx,%rax
  8004212f13:	48 01 c0             	add    %rax,%rax
  8004212f16:	48 01 d0             	add    %rdx,%rax
  8004212f19:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f1d:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004212f21:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f25:	48 89 c7             	mov    %rax,%rdi
  8004212f28:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212f2f:	00 00 00 
  8004212f32:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004212f34:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004212f38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f3c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f40:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f44:	48 89 d0             	mov    %rdx,%rax
  8004212f47:	48 01 c0             	add    %rax,%rax
  8004212f4a:	48 01 d0             	add    %rdx,%rax
  8004212f4d:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f51:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212f55:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212f59:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004212f5d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004212f61:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f65:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212f69:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f6d:	48 89 d0             	mov    %rdx,%rax
  8004212f70:	48 01 c0             	add    %rax,%rax
  8004212f73:	48 01 d0             	add    %rdx,%rax
  8004212f76:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f7a:	48 01 f0             	add    %rsi,%rax
  8004212f7d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212f81:	48 01 c8             	add    %rcx,%rax
  8004212f84:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212f88:	e9 94 04 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004212f8d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212f91:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212f95:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212f98:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f9c:	48 89 c7             	mov    %rax,%rdi
  8004212f9f:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004212fa6:	00 00 00 
  8004212fa9:	ff d0                	callq  *%rax
  8004212fab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004212faf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212fb3:	48 89 c7             	mov    %rax,%rdi
  8004212fb6:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  8004212fbd:	00 00 00 
  8004212fc0:	ff d0                	callq  *%rax
  8004212fc2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212fc6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fca:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212fce:	0f b7 c0             	movzwl %ax,%eax
  8004212fd1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212fd5:	77 0c                	ja     8004212fe3 <_dwarf_frame_run_inst+0x983>
  8004212fd7:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212fde:	e9 4c 04 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004212fe3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fe7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212feb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fef:	48 89 d0             	mov    %rdx,%rax
  8004212ff2:	48 01 c0             	add    %rax,%rax
  8004212ff5:	48 01 d0             	add    %rdx,%rax
  8004212ff8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212ffc:	48 01 c8             	add    %rcx,%rax
  8004212fff:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213002:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213006:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421300a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421300e:	48 89 d0             	mov    %rdx,%rax
  8004213011:	48 01 c0             	add    %rax,%rax
  8004213014:	48 01 d0             	add    %rdx,%rax
  8004213017:	48 c1 e0 03          	shl    $0x3,%rax
  800421301b:	48 01 c8             	add    %rcx,%rax
  800421301e:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213022:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213026:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421302a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421302e:	48 89 d0             	mov    %rdx,%rax
  8004213031:	48 01 c0             	add    %rax,%rax
  8004213034:	48 01 d0             	add    %rdx,%rax
  8004213037:	48 c1 e0 03          	shl    $0x3,%rax
  800421303b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421303f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213043:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213047:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421304b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421304f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213053:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213057:	48 89 d0             	mov    %rdx,%rax
  800421305a:	48 01 c0             	add    %rax,%rax
  800421305d:	48 01 d0             	add    %rdx,%rax
  8004213060:	48 c1 e0 03          	shl    $0x3,%rax
  8004213064:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213068:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421306f:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213074:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213078:	e9 a4 03 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  800421307d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213081:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213085:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213088:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421308c:	48 89 c7             	mov    %rax,%rdi
  800421308f:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004213096:	00 00 00 
  8004213099:	ff d0                	callq  *%rax
  800421309b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421309f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042130a3:	48 89 c7             	mov    %rax,%rdi
  80042130a6:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  80042130ad:	00 00 00 
  80042130b0:	ff d0                	callq  *%rax
  80042130b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042130b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130ba:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042130bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130c1:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042130c5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130cd:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042130d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130d5:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042130dc:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  80042130e1:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042130e5:	e9 37 03 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  80042130ea:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042130ee:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042130f2:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  80042130f5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042130f9:	48 89 c7             	mov    %rax,%rdi
  80042130fc:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  8004213103:	00 00 00 
  8004213106:	ff d0                	callq  *%rax
  8004213108:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800421310c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213110:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213113:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213117:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800421311b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421311f:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213126:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800421312b:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421312f:	e9 ed 02 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213134:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213138:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421313c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421313f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213143:	48 89 c7             	mov    %rax,%rdi
  8004213146:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  800421314d:	00 00 00 
  8004213150:	ff d0                	callq  *%rax
  8004213152:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213156:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421315a:	48 89 c7             	mov    %rax,%rdi
  800421315d:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004213164:	00 00 00 
  8004213167:	ff d0                	callq  *%rax
  8004213169:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421316d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213171:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213175:	0f b7 c0             	movzwl %ax,%eax
  8004213178:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421317c:	77 0c                	ja     800421318a <_dwarf_frame_run_inst+0xb2a>
  800421317e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213185:	e9 a5 02 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421318a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421318e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213192:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213196:	48 89 d0             	mov    %rdx,%rax
  8004213199:	48 01 c0             	add    %rax,%rax
  800421319c:	48 01 d0             	add    %rdx,%rax
  800421319f:	48 c1 e0 03          	shl    $0x3,%rax
  80042131a3:	48 01 c8             	add    %rcx,%rax
  80042131a6:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042131a9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131ad:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131b5:	48 89 d0             	mov    %rdx,%rax
  80042131b8:	48 01 c0             	add    %rax,%rax
  80042131bb:	48 01 d0             	add    %rdx,%rax
  80042131be:	48 c1 e0 03          	shl    $0x3,%rax
  80042131c2:	48 01 c8             	add    %rcx,%rax
  80042131c5:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042131c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131cd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131d1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131d5:	48 89 d0             	mov    %rdx,%rax
  80042131d8:	48 01 c0             	add    %rax,%rax
  80042131db:	48 01 d0             	add    %rdx,%rax
  80042131de:	48 c1 e0 03          	shl    $0x3,%rax
  80042131e2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042131e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042131ea:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042131ee:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042131f2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131f6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131fa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131fe:	48 89 d0             	mov    %rdx,%rax
  8004213201:	48 01 c0             	add    %rax,%rax
  8004213204:	48 01 d0             	add    %rdx,%rax
  8004213207:	48 c1 e0 03          	shl    $0x3,%rax
  800421320b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421320f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213216:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421321b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421321f:	e9 fd 01 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213224:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213228:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421322c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421322f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213233:	48 89 c7             	mov    %rax,%rdi
  8004213236:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  800421323d:	00 00 00 
  8004213240:	ff d0                	callq  *%rax
  8004213242:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213246:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421324a:	48 89 c7             	mov    %rax,%rdi
  800421324d:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  8004213254:	00 00 00 
  8004213257:	ff d0                	callq  *%rax
  8004213259:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421325d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213261:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213265:	0f b7 c0             	movzwl %ax,%eax
  8004213268:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421326c:	77 0c                	ja     800421327a <_dwarf_frame_run_inst+0xc1a>
  800421326e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213275:	e9 b5 01 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421327a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421327e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213282:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213286:	48 89 d0             	mov    %rdx,%rax
  8004213289:	48 01 c0             	add    %rax,%rax
  800421328c:	48 01 d0             	add    %rdx,%rax
  800421328f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213293:	48 01 c8             	add    %rcx,%rax
  8004213296:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213299:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421329d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132a5:	48 89 d0             	mov    %rdx,%rax
  80042132a8:	48 01 c0             	add    %rax,%rax
  80042132ab:	48 01 d0             	add    %rdx,%rax
  80042132ae:	48 c1 e0 03          	shl    $0x3,%rax
  80042132b2:	48 01 c8             	add    %rcx,%rax
  80042132b5:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042132b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132bd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132c1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132c5:	48 89 d0             	mov    %rdx,%rax
  80042132c8:	48 01 c0             	add    %rax,%rax
  80042132cb:	48 01 d0             	add    %rdx,%rax
  80042132ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042132d2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042132d6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042132da:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042132de:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042132e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132e6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132ee:	48 89 d0             	mov    %rdx,%rax
  80042132f1:	48 01 c0             	add    %rax,%rax
  80042132f4:	48 01 d0             	add    %rdx,%rax
  80042132f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042132fb:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042132ff:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213306:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421330b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421330f:	e9 0d 01 00 00       	jmpq   8004213421 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213314:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213318:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421331c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421331f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213323:	48 89 c7             	mov    %rax,%rdi
  8004213326:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  800421332d:	00 00 00 
  8004213330:	ff d0                	callq  *%rax
  8004213332:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213336:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421333a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421333e:	0f b7 c0             	movzwl %ax,%eax
  8004213341:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213345:	77 0c                	ja     8004213353 <_dwarf_frame_run_inst+0xcf3>
  8004213347:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421334e:	e9 dc 00 00 00       	jmpq   800421342f <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213353:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213357:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421335b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421335f:	48 89 d0             	mov    %rdx,%rax
  8004213362:	48 01 c0             	add    %rax,%rax
  8004213365:	48 01 d0             	add    %rdx,%rax
  8004213368:	48 c1 e0 03          	shl    $0x3,%rax
  800421336c:	48 01 c8             	add    %rcx,%rax
  800421336f:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213372:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213376:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421337a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421337e:	48 89 d0             	mov    %rdx,%rax
  8004213381:	48 01 c0             	add    %rax,%rax
  8004213384:	48 01 d0             	add    %rdx,%rax
  8004213387:	48 c1 e0 03          	shl    $0x3,%rax
  800421338b:	48 01 c8             	add    %rcx,%rax
  800421338e:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213392:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213396:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421339a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421339e:	48 89 d0             	mov    %rdx,%rax
  80042133a1:	48 01 c0             	add    %rax,%rax
  80042133a4:	48 01 d0             	add    %rdx,%rax
  80042133a7:	48 c1 e0 03          	shl    $0x3,%rax
  80042133ab:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042133af:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133b3:	48 89 c7             	mov    %rax,%rdi
  80042133b6:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  80042133bd:	00 00 00 
  80042133c0:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  80042133c2:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  80042133c6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133ca:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133ce:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133d2:	48 89 d0             	mov    %rdx,%rax
  80042133d5:	48 01 c0             	add    %rax,%rax
  80042133d8:	48 01 d0             	add    %rdx,%rax
  80042133db:	48 c1 e0 03          	shl    $0x3,%rax
  80042133df:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042133e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042133e7:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  80042133eb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042133ef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133f3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042133f7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133fb:	48 89 d0             	mov    %rdx,%rax
  80042133fe:	48 01 c0             	add    %rax,%rax
  8004213401:	48 01 d0             	add    %rdx,%rax
  8004213404:	48 c1 e0 03          	shl    $0x3,%rax
  8004213408:	48 01 f0             	add    %rsi,%rax
  800421340b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421340f:	48 01 c8             	add    %rcx,%rax
  8004213412:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213416:	eb 09                	jmp    8004213421 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213418:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  800421341f:	eb 0e                	jmp    800421342f <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004213421:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213425:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213429:	0f 82 b8 f2 ff ff    	jb     80042126e7 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  800421342f:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213432:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004213439:	5b                   	pop    %rbx
  800421343a:	5d                   	pop    %rbp
  800421343b:	c3                   	retq   

000000800421343c <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  800421343c:	55                   	push   %rbp
  800421343d:	48 89 e5             	mov    %rsp,%rbp
  8004213440:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004213444:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213448:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421344c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213450:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213454:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004213458:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  800421345c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213461:	75 35                	jne    8004213498 <_dwarf_frame_get_internal_table+0x5c>
  8004213463:	48 b9 38 af 21 04 80 	movabs $0x800421af38,%rcx
  800421346a:	00 00 00 
  800421346d:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  8004213474:	00 00 00 
  8004213477:	be 83 01 00 00       	mov    $0x183,%esi
  800421347c:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  8004213483:	00 00 00 
  8004213486:	b8 00 00 00 00       	mov    $0x0,%eax
  800421348b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213492:	00 00 00 
  8004213495:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004213498:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421349d:	75 35                	jne    80042134d4 <_dwarf_frame_get_internal_table+0x98>
  800421349f:	48 b9 47 af 21 04 80 	movabs $0x800421af47,%rcx
  80042134a6:	00 00 00 
  80042134a9:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  80042134b0:	00 00 00 
  80042134b3:	be 86 01 00 00       	mov    $0x186,%esi
  80042134b8:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  80042134bf:	00 00 00 
  80042134c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042134c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042134ce:	00 00 00 
  80042134d1:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  80042134d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042134d8:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042134dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  80042134e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042134e4:	ba 18 00 00 00       	mov    $0x18,%edx
  80042134e9:	be 00 00 00 00       	mov    $0x0,%esi
  80042134ee:	48 89 c7             	mov    %rax,%rdi
  80042134f1:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  80042134f8:	00 00 00 
  80042134fb:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  80042134fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213501:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213505:	0f b7 d0             	movzwl %ax,%edx
  8004213508:	48 89 d0             	mov    %rdx,%rax
  800421350b:	48 01 c0             	add    %rax,%rax
  800421350e:	48 01 d0             	add    %rdx,%rax
  8004213511:	48 c1 e0 03          	shl    $0x3,%rax
  8004213515:	48 89 c2             	mov    %rax,%rdx
  8004213518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421351c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213520:	be 00 00 00 00       	mov    $0x0,%esi
  8004213525:	48 89 c7             	mov    %rax,%rdi
  8004213528:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800421352f:	00 00 00 
  8004213532:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213534:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421353b:	eb 2f                	jmp    800421356c <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  800421353d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213541:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213545:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213548:	48 63 d0             	movslq %eax,%rdx
  800421354b:	48 89 d0             	mov    %rdx,%rax
  800421354e:	48 01 c0             	add    %rax,%rax
  8004213551:	48 01 d0             	add    %rdx,%rax
  8004213554:	48 c1 e0 03          	shl    $0x3,%rax
  8004213558:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421355c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213560:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213564:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213568:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421356c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213570:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213574:	0f b7 c0             	movzwl %ax,%eax
  8004213577:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421357a:	7f c1                	jg     800421353d <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  800421357c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213580:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213584:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004213588:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421358d:	75 35                	jne    80042135c4 <_dwarf_frame_get_internal_table+0x188>
  800421358f:	48 b9 53 af 21 04 80 	movabs $0x800421af53,%rcx
  8004213596:	00 00 00 
  8004213599:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  80042135a0:	00 00 00 
  80042135a3:	be 95 01 00 00       	mov    $0x195,%esi
  80042135a8:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  80042135af:	00 00 00 
  80042135b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042135b7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042135be:	00 00 00 
  80042135c1:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042135c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135c8:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042135cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135d0:	4c 8b 40 38          	mov    0x38(%rax),%r8
  80042135d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135d8:	48 8b 48 70          	mov    0x70(%rax),%rcx
  80042135dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135e0:	48 8b 50 68          	mov    0x68(%rax),%rdx
  80042135e4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042135e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042135ec:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  80042135f0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042135f5:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  80042135f9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042135fe:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004213605:	ff ff 
  8004213607:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  800421360e:	00 
  800421360f:	48 89 c7             	mov    %rax,%rdi
  8004213612:	48 b8 60 26 21 04 80 	movabs $0x8004212660,%rax
  8004213619:	00 00 00 
  800421361c:	ff d0                	callq  *%rax
  800421361e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004213621:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213625:	74 08                	je     800421362f <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004213627:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421362a:	e9 98 00 00 00       	jmpq   80042136c7 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  800421362f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213633:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213637:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800421363b:	77 6f                	ja     80042136ac <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  800421363d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213641:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004213645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213649:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800421364d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213651:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004213655:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213659:	48 8b 48 58          	mov    0x58(%rax),%rcx
  800421365d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213661:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004213665:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213669:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421366d:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004213671:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004213676:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800421367a:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800421367f:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  8004213683:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004213688:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421368c:	4d 89 d0             	mov    %r10,%r8
  800421368f:	48 89 c7             	mov    %rax,%rdi
  8004213692:	48 b8 60 26 21 04 80 	movabs $0x8004212660,%rax
  8004213699:	00 00 00 
  800421369c:	ff d0                	callq  *%rax
  800421369e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042136a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042136a5:	74 05                	je     80042136ac <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042136a7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042136aa:	eb 1b                	jmp    80042136c7 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  80042136ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042136b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042136b4:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042136b7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042136bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042136bf:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042136c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042136c7:	c9                   	leaveq 
  80042136c8:	c3                   	retq   

00000080042136c9 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  80042136c9:	55                   	push   %rbp
  80042136ca:	48 89 e5             	mov    %rsp,%rbp
  80042136cd:	48 83 ec 50          	sub    $0x50,%rsp
  80042136d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042136d5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042136d9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042136dd:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042136e1:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  80042136e5:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  80042136e9:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042136ee:	74 07                	je     80042136f7 <dwarf_get_fde_info_for_all_regs+0x2e>
  80042136f0:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042136f5:	75 0a                	jne    8004213701 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042136f7:	b8 01 00 00 00       	mov    $0x1,%eax
  80042136fc:	e9 eb 02 00 00       	jmpq   80042139ec <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004213701:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213706:	75 35                	jne    800421373d <dwarf_get_fde_info_for_all_regs+0x74>
  8004213708:	48 b9 47 af 21 04 80 	movabs $0x800421af47,%rcx
  800421370f:	00 00 00 
  8004213712:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  8004213719:	00 00 00 
  800421371c:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004213721:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  8004213728:	00 00 00 
  800421372b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213730:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213737:	00 00 00 
  800421373a:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  800421373d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213741:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213745:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213749:	77 19                	ja     8004213764 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800421374b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421374f:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213753:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213757:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421375b:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  800421375e:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213762:	77 0a                	ja     800421376e <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004213764:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213769:	e9 7e 02 00 00       	jmpq   80042139ec <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  800421376e:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004213772:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004213776:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421377a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421377e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213782:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213786:	4d 89 c1             	mov    %r8,%r9
  8004213789:	49 89 f8             	mov    %rdi,%r8
  800421378c:	48 89 c7             	mov    %rax,%rdi
  800421378f:	48 b8 3c 34 21 04 80 	movabs $0x800421343c,%rax
  8004213796:	00 00 00 
  8004213799:	ff d0                	callq  *%rax
  800421379b:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  800421379e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042137a2:	74 0a                	je     80042137ae <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042137a4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042137a9:	e9 3e 02 00 00       	jmpq   80042139ec <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042137ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042137b2:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042137b6:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042137ba:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042137bf:	0f 87 b1 00 00 00    	ja     8004213876 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  80042137c5:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  80042137c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042137cd:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  80042137d0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042137d4:	48 63 c9             	movslq %ecx,%rcx
  80042137d7:	48 83 c1 01          	add    $0x1,%rcx
  80042137db:	48 c1 e1 04          	shl    $0x4,%rcx
  80042137df:	48 01 ca             	add    %rcx,%rdx
  80042137e2:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  80042137e4:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042137e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042137ec:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042137f0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042137f4:	48 63 c9             	movslq %ecx,%rcx
  80042137f7:	48 83 c1 01          	add    $0x1,%rcx
  80042137fb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042137ff:	48 01 ca             	add    %rcx,%rdx
  8004213802:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004213805:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213809:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421380d:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213811:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213815:	48 63 c9             	movslq %ecx,%rcx
  8004213818:	48 83 c1 01          	add    $0x1,%rcx
  800421381c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213820:	48 01 ca             	add    %rcx,%rdx
  8004213823:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004213827:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421382b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421382f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213833:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213837:	48 63 c9             	movslq %ecx,%rcx
  800421383a:	48 83 c1 01          	add    $0x1,%rcx
  800421383e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213842:	48 01 ca             	add    %rcx,%rdx
  8004213845:	48 83 c2 08          	add    $0x8,%rdx
  8004213849:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  800421384c:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004213850:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004213854:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213858:	48 63 d2             	movslq %edx,%rdx
  800421385b:	48 83 c2 01          	add    $0x1,%rdx
  800421385f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004213863:	48 01 d0             	add    %rdx,%rax
  8004213866:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421386a:	48 8b 00             	mov    (%rax),%rax
  800421386d:	48 89 01             	mov    %rax,(%rcx)
  8004213870:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004213874:	eb 3c                	jmp    80042138b2 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004213876:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421387a:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  800421387d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213881:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  8004213883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213887:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  800421388b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421388f:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004213892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213896:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  800421389a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421389e:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042138a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138a6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042138aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138ae:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042138b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042138b9:	e9 fd 00 00 00       	jmpq   80042139bb <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042138be:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042138c2:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042138c5:	75 05                	jne    80042138cc <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  80042138c7:	e9 eb 00 00 00       	jmpq   80042139b7 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  80042138cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138d0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138d4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042138d7:	48 63 d0             	movslq %eax,%rdx
  80042138da:	48 89 d0             	mov    %rdx,%rax
  80042138dd:	48 01 c0             	add    %rax,%rax
  80042138e0:	48 01 d0             	add    %rdx,%rax
  80042138e3:	48 c1 e0 03          	shl    $0x3,%rax
  80042138e7:	48 01 c8             	add    %rcx,%rax
  80042138ea:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  80042138ed:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042138f1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042138f4:	48 63 c9             	movslq %ecx,%rcx
  80042138f7:	48 83 c1 01          	add    $0x1,%rcx
  80042138fb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138ff:	48 01 ca             	add    %rcx,%rdx
  8004213902:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004213904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213908:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421390c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421390f:	48 63 d0             	movslq %eax,%rdx
  8004213912:	48 89 d0             	mov    %rdx,%rax
  8004213915:	48 01 c0             	add    %rax,%rax
  8004213918:	48 01 d0             	add    %rdx,%rax
  800421391b:	48 c1 e0 03          	shl    $0x3,%rax
  800421391f:	48 01 c8             	add    %rcx,%rax
  8004213922:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004213926:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421392a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421392d:	48 63 c9             	movslq %ecx,%rcx
  8004213930:	48 83 c1 01          	add    $0x1,%rcx
  8004213934:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213938:	48 01 ca             	add    %rcx,%rdx
  800421393b:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  800421393e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213942:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213946:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213949:	48 63 d0             	movslq %eax,%rdx
  800421394c:	48 89 d0             	mov    %rdx,%rax
  800421394f:	48 01 c0             	add    %rax,%rax
  8004213952:	48 01 d0             	add    %rdx,%rax
  8004213955:	48 c1 e0 03          	shl    $0x3,%rax
  8004213959:	48 01 c8             	add    %rcx,%rax
  800421395c:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213960:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213964:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213967:	48 63 c9             	movslq %ecx,%rcx
  800421396a:	48 83 c1 01          	add    $0x1,%rcx
  800421396e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213972:	48 01 ca             	add    %rcx,%rdx
  8004213975:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004213979:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421397d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213981:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213984:	48 63 d0             	movslq %eax,%rdx
  8004213987:	48 89 d0             	mov    %rdx,%rax
  800421398a:	48 01 c0             	add    %rax,%rax
  800421398d:	48 01 d0             	add    %rdx,%rax
  8004213990:	48 c1 e0 03          	shl    $0x3,%rax
  8004213994:	48 01 c8             	add    %rcx,%rax
  8004213997:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  800421399b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421399f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042139a2:	48 63 c9             	movslq %ecx,%rcx
  80042139a5:	48 83 c1 01          	add    $0x1,%rcx
  80042139a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042139ad:	48 01 ca             	add    %rcx,%rdx
  80042139b0:	48 83 c2 08          	add    $0x8,%rdx
  80042139b4:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  80042139b7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042139bb:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  80042139bf:	7f 14                	jg     80042139d5 <dwarf_get_fde_info_for_all_regs+0x30c>
  80042139c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042139c5:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  80042139c9:	0f b7 c0             	movzwl %ax,%eax
  80042139cc:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042139cf:	0f 8f e9 fe ff ff    	jg     80042138be <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  80042139d5:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  80042139da:	74 0b                	je     80042139e7 <dwarf_get_fde_info_for_all_regs+0x31e>
  80042139dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042139e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042139e4:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  80042139e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042139ec:	c9                   	leaveq 
  80042139ed:	c3                   	retq   

00000080042139ee <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042139ee:	55                   	push   %rbp
  80042139ef:	48 89 e5             	mov    %rsp,%rbp
  80042139f2:	48 83 ec 40          	sub    $0x40,%rsp
  80042139f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042139fa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042139fe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213a02:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213a06:	44 89 c0             	mov    %r8d,%eax
  8004213a09:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004213a0d:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004213a10:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004213a14:	75 0a                	jne    8004213a20 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004213a16:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213a1b:	e9 e6 01 00 00       	jmpq   8004213c06 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004213a20:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213a24:	83 e0 f0             	and    $0xfffffff0,%eax
  8004213a27:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004213a2a:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004213a2e:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213a32:	83 f8 0c             	cmp    $0xc,%eax
  8004213a35:	0f 87 72 01 00 00    	ja     8004213bad <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004213a3b:	89 c0                	mov    %eax,%eax
  8004213a3d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213a44:	00 
  8004213a45:	48 b8 60 af 21 04 80 	movabs $0x800421af60,%rax
  8004213a4c:	00 00 00 
  8004213a4f:	48 01 d0             	add    %rdx,%rax
  8004213a52:	48 8b 00             	mov    (%rax),%rax
  8004213a55:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004213a57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a5b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213a5f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213a63:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213a66:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213a6a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213a6e:	48 89 cf             	mov    %rcx,%rdi
  8004213a71:	ff d0                	callq  *%rax
  8004213a73:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213a77:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213a7a:	e9 35 01 00 00       	jmpq   8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004213a7f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213a87:	48 89 d6             	mov    %rdx,%rsi
  8004213a8a:	48 89 c7             	mov    %rax,%rdi
  8004213a8d:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004213a94:	00 00 00 
  8004213a97:	ff d0                	callq  *%rax
  8004213a99:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213a9d:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213aa0:	e9 0f 01 00 00       	jmpq   8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004213aa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213aa9:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213aad:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213ab1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213ab5:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213aba:	48 89 cf             	mov    %rcx,%rdi
  8004213abd:	ff d0                	callq  *%rax
  8004213abf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213ac3:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213ac6:	e9 e9 00 00 00       	jmpq   8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004213acb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213acf:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ad3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213ad7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213adb:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213ae0:	48 89 cf             	mov    %rcx,%rdi
  8004213ae3:	ff d0                	callq  *%rax
  8004213ae5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213ae9:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213aec:	e9 c3 00 00 00       	jmpq   8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004213af1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213af5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213af9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213afd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b01:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213b06:	48 89 cf             	mov    %rcx,%rdi
  8004213b09:	ff d0                	callq  *%rax
  8004213b0b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b0f:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b12:	e9 9d 00 00 00       	jmpq   8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004213b17:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213b1f:	48 89 d6             	mov    %rdx,%rsi
  8004213b22:	48 89 c7             	mov    %rax,%rdi
  8004213b25:	48 b8 de 09 21 04 80 	movabs $0x80042109de,%rax
  8004213b2c:	00 00 00 
  8004213b2f:	ff d0                	callq  *%rax
  8004213b31:	48 89 c2             	mov    %rax,%rdx
  8004213b34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213b38:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213b3b:	eb 77                	jmp    8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004213b3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b41:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b45:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b49:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b4d:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213b52:	48 89 cf             	mov    %rcx,%rdi
  8004213b55:	ff d0                	callq  *%rax
  8004213b57:	48 0f bf d0          	movswq %ax,%rdx
  8004213b5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213b5f:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213b62:	eb 50                	jmp    8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004213b64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b68:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b6c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b70:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b74:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213b79:	48 89 cf             	mov    %rcx,%rdi
  8004213b7c:	ff d0                	callq  *%rax
  8004213b7e:	48 63 d0             	movslq %eax,%rdx
  8004213b81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213b85:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213b88:	eb 2a                	jmp    8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004213b8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b92:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b96:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b9a:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213b9f:	48 89 cf             	mov    %rcx,%rdi
  8004213ba2:	ff d0                	callq  *%rax
  8004213ba4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213ba8:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213bab:	eb 07                	jmp    8004213bb4 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213bad:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213bb2:	eb 52                	jmp    8004213c06 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004213bb4:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004213bb8:	75 47                	jne    8004213c01 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004213bba:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213bbe:	83 f8 01             	cmp    $0x1,%eax
  8004213bc1:	7c 3d                	jl     8004213c00 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213bc3:	83 f8 04             	cmp    $0x4,%eax
  8004213bc6:	7e 0a                	jle    8004213bd2 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004213bc8:	83 e8 09             	sub    $0x9,%eax
  8004213bcb:	83 f8 03             	cmp    $0x3,%eax
  8004213bce:	77 30                	ja     8004213c00 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213bd0:	eb 17                	jmp    8004213be9 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004213bd2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bd6:	48 8b 10             	mov    (%rax),%rdx
  8004213bd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213bdd:	48 01 c2             	add    %rax,%rdx
  8004213be0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213be4:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213be7:	eb 18                	jmp    8004213c01 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004213be9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bed:	48 8b 10             	mov    (%rax),%rdx
  8004213bf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213bf4:	48 01 c2             	add    %rax,%rdx
  8004213bf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bfb:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213bfe:	eb 01                	jmp    8004213c01 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004213c00:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004213c01:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213c06:	c9                   	leaveq 
  8004213c07:	c3                   	retq   

0000008004213c08 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004213c08:	55                   	push   %rbp
  8004213c09:	48 89 e5             	mov    %rsp,%rbp
  8004213c0c:	48 83 ec 50          	sub    $0x50,%rsp
  8004213c10:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213c14:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213c18:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004213c1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c20:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213c24:	48 85 c0             	test   %rax,%rax
  8004213c27:	74 0f                	je     8004213c38 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004213c29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c2d:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213c31:	0f b6 00             	movzbl (%rax),%eax
  8004213c34:	3c 7a                	cmp    $0x7a,%al
  8004213c36:	74 35                	je     8004213c6d <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004213c38:	48 b9 c8 af 21 04 80 	movabs $0x800421afc8,%rcx
  8004213c3f:	00 00 00 
  8004213c42:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  8004213c49:	00 00 00 
  8004213c4c:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004213c51:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  8004213c58:	00 00 00 
  8004213c5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213c60:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213c67:	00 00 00 
  8004213c6a:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004213c6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c71:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213c75:	48 83 c0 01          	add    $0x1,%rax
  8004213c79:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004213c7d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c81:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213c85:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004213c89:	e9 af 00 00 00       	jmpq   8004213d3d <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004213c8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213c92:	0f b6 00             	movzbl (%rax),%eax
  8004213c95:	0f b6 c0             	movzbl %al,%eax
  8004213c98:	83 f8 50             	cmp    $0x50,%eax
  8004213c9b:	74 18                	je     8004213cb5 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004213c9d:	83 f8 52             	cmp    $0x52,%eax
  8004213ca0:	74 77                	je     8004213d19 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004213ca2:	83 f8 4c             	cmp    $0x4c,%eax
  8004213ca5:	0f 85 86 00 00 00    	jne    8004213d31 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004213cab:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004213cb0:	e9 83 00 00 00       	jmpq   8004213d38 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004213cb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213cb9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213cbd:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213cc1:	0f b6 00             	movzbl (%rax),%eax
  8004213cc4:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004213cc7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004213cce:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004213ccf:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004213cd4:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004213cd8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213cdc:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004213ce0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213ce4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004213ce8:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004213cec:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004213cf2:	48 89 c7             	mov    %rax,%rdi
  8004213cf5:	48 b8 ee 39 21 04 80 	movabs $0x80042139ee,%rax
  8004213cfc:	00 00 00 
  8004213cff:	ff d0                	callq  *%rax
  8004213d01:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004213d04:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004213d08:	74 05                	je     8004213d0f <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004213d0a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004213d0d:	eb 42                	jmp    8004213d51 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004213d0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213d13:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004213d17:	eb 1f                	jmp    8004213d38 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004213d19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213d1d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213d21:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213d25:	0f b6 10             	movzbl (%rax),%edx
  8004213d28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d2c:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004213d2f:	eb 07                	jmp    8004213d38 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213d31:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213d36:	eb 19                	jmp    8004213d51 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004213d38:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004213d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213d41:	0f b6 00             	movzbl (%rax),%eax
  8004213d44:	84 c0                	test   %al,%al
  8004213d46:	0f 85 42 ff ff ff    	jne    8004213c8e <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004213d4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213d51:	c9                   	leaveq 
  8004213d52:	c3                   	retq   

0000008004213d53 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004213d53:	55                   	push   %rbp
  8004213d54:	48 89 e5             	mov    %rsp,%rbp
  8004213d57:	48 83 ec 60          	sub    $0x60,%rsp
  8004213d5b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213d5f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213d63:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213d67:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213d6b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004213d6f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213d74:	75 35                	jne    8004213dab <_dwarf_frame_set_cie+0x58>
  8004213d76:	48 b9 fd af 21 04 80 	movabs $0x800421affd,%rcx
  8004213d7d:	00 00 00 
  8004213d80:	48 ba 47 ae 21 04 80 	movabs $0x800421ae47,%rdx
  8004213d87:	00 00 00 
  8004213d8a:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004213d8f:	48 bf 5c ae 21 04 80 	movabs $0x800421ae5c,%rdi
  8004213d96:	00 00 00 
  8004213d99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213d9e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213da5:	00 00 00 
  8004213da8:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004213dab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213daf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004213db3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213db7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213dbb:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004213dbe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213dc2:	48 8b 10             	mov    (%rax),%rdx
  8004213dc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213dc9:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004213dcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213dd1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213dd5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213dd9:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213ddd:	48 89 d1             	mov    %rdx,%rcx
  8004213de0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213de4:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213de9:	48 89 cf             	mov    %rcx,%rdi
  8004213dec:	ff d0                	callq  *%rax
  8004213dee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004213df2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213df7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004213dfb:	75 2e                	jne    8004213e2b <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004213dfd:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004213e04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e08:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e0c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e10:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e14:	48 89 d1             	mov    %rdx,%rcx
  8004213e17:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e1b:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213e20:	48 89 cf             	mov    %rcx,%rdi
  8004213e23:	ff d0                	callq  *%rax
  8004213e25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213e29:	eb 07                	jmp    8004213e32 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004213e2b:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004213e32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e36:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004213e3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213e3e:	48 8b 00             	mov    (%rax),%rax
  8004213e41:	48 29 c2             	sub    %rax,%rdx
  8004213e44:	48 89 d0             	mov    %rdx,%rax
  8004213e47:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004213e4b:	73 0a                	jae    8004213e57 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004213e4d:	b8 12 00 00 00       	mov    $0x12,%eax
  8004213e52:	e9 5d 03 00 00       	jmpq   80042141b4 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004213e57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e5b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e5f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e63:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e67:	48 89 d1             	mov    %rdx,%rcx
  8004213e6a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004213e6d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e71:	48 89 cf             	mov    %rcx,%rdi
  8004213e74:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004213e76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004213e7e:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004213e82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e86:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e8a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e8e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e92:	48 89 d1             	mov    %rdx,%rcx
  8004213e95:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e99:	ba 01 00 00 00       	mov    $0x1,%edx
  8004213e9e:	48 89 cf             	mov    %rcx,%rdi
  8004213ea1:	ff d0                	callq  *%rax
  8004213ea3:	89 c2                	mov    %eax,%edx
  8004213ea5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ea9:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213ead:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213eb1:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213eb5:	66 83 f8 01          	cmp    $0x1,%ax
  8004213eb9:	74 26                	je     8004213ee1 <_dwarf_frame_set_cie+0x18e>
  8004213ebb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ebf:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213ec3:	66 83 f8 03          	cmp    $0x3,%ax
  8004213ec7:	74 18                	je     8004213ee1 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004213ec9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ecd:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213ed1:	66 83 f8 04          	cmp    $0x4,%ax
  8004213ed5:	74 0a                	je     8004213ee1 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004213ed7:	b8 16 00 00 00       	mov    $0x16,%eax
  8004213edc:	e9 d3 02 00 00       	jmpq   80042141b4 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004213ee1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213ee5:	48 8b 10             	mov    (%rax),%rdx
  8004213ee8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213eec:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213ef0:	48 01 d0             	add    %rdx,%rax
  8004213ef3:	48 89 c2             	mov    %rax,%rdx
  8004213ef6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213efa:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004213efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f02:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213f06:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004213f0a:	90                   	nop
  8004213f0b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f0f:	48 8b 00             	mov    (%rax),%rax
  8004213f12:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004213f16:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004213f1a:	48 89 0a             	mov    %rcx,(%rdx)
  8004213f1d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213f21:	48 01 d0             	add    %rdx,%rax
  8004213f24:	0f b6 00             	movzbl (%rax),%eax
  8004213f27:	84 c0                	test   %al,%al
  8004213f29:	75 e0                	jne    8004213f0b <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004213f2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f2f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213f33:	0f b6 00             	movzbl (%rax),%eax
  8004213f36:	84 c0                	test   %al,%al
  8004213f38:	74 48                	je     8004213f82 <_dwarf_frame_set_cie+0x22f>
  8004213f3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f3e:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213f42:	0f b6 00             	movzbl (%rax),%eax
  8004213f45:	3c 7a                	cmp    $0x7a,%al
  8004213f47:	74 39                	je     8004213f82 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004213f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004213f51:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004213f55:	75 07                	jne    8004213f5e <_dwarf_frame_set_cie+0x20b>
  8004213f57:	b8 04 00 00 00       	mov    $0x4,%eax
  8004213f5c:	eb 05                	jmp    8004213f63 <_dwarf_frame_set_cie+0x210>
  8004213f5e:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004213f63:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004213f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f6a:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004213f6e:	48 01 c2             	add    %rax,%rdx
  8004213f71:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f75:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004213f78:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213f7d:	e9 32 02 00 00       	jmpq   80042141b4 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004213f82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f86:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213f8a:	48 be 05 b0 21 04 80 	movabs $0x800421b005,%rsi
  8004213f91:	00 00 00 
  8004213f94:	48 89 c7             	mov    %rax,%rdi
  8004213f97:	48 b8 95 03 21 04 80 	movabs $0x8004210395,%rax
  8004213f9e:	00 00 00 
  8004213fa1:	ff d0                	callq  *%rax
  8004213fa3:	48 85 c0             	test   %rax,%rax
  8004213fa6:	74 28                	je     8004213fd0 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004213fa8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213fac:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213fb0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213fb4:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213fb7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004213fbb:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004213fbf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213fc3:	48 89 cf             	mov    %rcx,%rdi
  8004213fc6:	ff d0                	callq  *%rax
  8004213fc8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213fcc:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004213fd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213fd4:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213fd8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004213fdc:	48 89 d6             	mov    %rdx,%rsi
  8004213fdf:	48 89 c7             	mov    %rax,%rdi
  8004213fe2:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004213fe9:	00 00 00 
  8004213fec:	ff d0                	callq  *%rax
  8004213fee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213ff2:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004213ff6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213ffa:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213ffe:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214002:	48 89 d6             	mov    %rdx,%rsi
  8004214005:	48 89 c7             	mov    %rax,%rdi
  8004214008:	48 b8 de 09 21 04 80 	movabs $0x80042109de,%rax
  800421400f:	00 00 00 
  8004214012:	ff d0                	callq  *%rax
  8004214014:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214018:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  800421401c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214020:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214024:	66 83 f8 01          	cmp    $0x1,%ax
  8004214028:	75 2b                	jne    8004214055 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800421402a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421402e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214032:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214036:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421403a:	48 89 d1             	mov    %rdx,%rcx
  800421403d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214041:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214046:	48 89 cf             	mov    %rcx,%rdi
  8004214049:	ff d0                	callq  *%rax
  800421404b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421404f:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214053:	eb 26                	jmp    800421407b <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214055:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214059:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421405d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214061:	48 89 d6             	mov    %rdx,%rsi
  8004214064:	48 89 c7             	mov    %rax,%rdi
  8004214067:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  800421406e:	00 00 00 
  8004214071:	ff d0                	callq  *%rax
  8004214073:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214077:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  800421407b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421407f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214083:	0f b6 00             	movzbl (%rax),%eax
  8004214086:	3c 7a                	cmp    $0x7a,%al
  8004214088:	0f 85 93 00 00 00    	jne    8004214121 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421408e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214092:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214096:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421409a:	48 89 d6             	mov    %rdx,%rsi
  800421409d:	48 89 c7             	mov    %rax,%rdi
  80042140a0:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  80042140a7:	00 00 00 
  80042140aa:	ff d0                	callq  *%rax
  80042140ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140b0:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042140b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042140b8:	48 8b 10             	mov    (%rax),%rdx
  80042140bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140bf:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042140c3:	48 01 d0             	add    %rdx,%rax
  80042140c6:	48 89 c2             	mov    %rax,%rdx
  80042140c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140cd:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  80042140d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042140d5:	48 8b 10             	mov    (%rax),%rdx
  80042140d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140dc:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042140e0:	48 01 c2             	add    %rax,%rdx
  80042140e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042140e7:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  80042140ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140ee:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  80042140f2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042140f6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042140fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140fe:	48 89 ce             	mov    %rcx,%rsi
  8004214101:	48 89 c7             	mov    %rax,%rdi
  8004214104:	48 b8 08 3c 21 04 80 	movabs $0x8004213c08,%rax
  800421410b:	00 00 00 
  800421410e:	ff d0                	callq  *%rax
  8004214110:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214113:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214117:	74 08                	je     8004214121 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214119:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421411c:	e9 93 00 00 00       	jmpq   80042141b4 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214125:	48 8b 10             	mov    (%rax),%rdx
  8004214128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421412c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214130:	48 01 d0             	add    %rdx,%rax
  8004214133:	48 89 c2             	mov    %rax,%rdx
  8004214136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421413a:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  800421413e:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214142:	75 2a                	jne    800421416e <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214144:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214148:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421414c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214150:	48 01 c2             	add    %rax,%rdx
  8004214153:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214157:	48 8b 00             	mov    (%rax),%rax
  800421415a:	48 29 c2             	sub    %rax,%rdx
  800421415d:	48 89 d0             	mov    %rdx,%rax
  8004214160:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214168:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421416c:	eb 28                	jmp    8004214196 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  800421416e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214172:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421417a:	48 01 c2             	add    %rax,%rdx
  800421417d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214181:	48 8b 00             	mov    (%rax),%rax
  8004214184:	48 29 c2             	sub    %rax,%rdx
  8004214187:	48 89 d0             	mov    %rdx,%rax
  800421418a:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421418e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214192:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214196:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421419a:	48 8b 10             	mov    (%rax),%rdx
  800421419d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141a1:	48 8b 40 70          	mov    0x70(%rax),%rax
  80042141a5:	48 01 c2             	add    %rax,%rdx
  80042141a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141ac:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042141af:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042141b4:	c9                   	leaveq 
  80042141b5:	c3                   	retq   

00000080042141b6 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  80042141b6:	55                   	push   %rbp
  80042141b7:	48 89 e5             	mov    %rsp,%rbp
  80042141ba:	48 83 ec 70          	sub    $0x70,%rsp
  80042141be:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042141c2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042141c6:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042141ca:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042141ce:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  80042141d2:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  80042141d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042141da:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  80042141de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141e2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042141e6:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042141e9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042141ed:	48 8b 10             	mov    (%rax),%rdx
  80042141f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141f4:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042141f8:	48 01 d0             	add    %rdx,%rax
  80042141fb:	48 89 c2             	mov    %rax,%rdx
  80042141fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214202:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214206:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421420a:	48 8b 10             	mov    (%rax),%rdx
  800421420d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214211:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214215:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214219:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421421d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214221:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214225:	48 89 d1             	mov    %rdx,%rcx
  8004214228:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421422c:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214231:	48 89 cf             	mov    %rcx,%rdi
  8004214234:	ff d0                	callq  *%rax
  8004214236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800421423a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421423f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214243:	75 2e                	jne    8004214273 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214245:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  800421424c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214250:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214254:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214258:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421425c:	48 89 d1             	mov    %rdx,%rcx
  800421425f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214263:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214268:	48 89 cf             	mov    %rcx,%rdi
  800421426b:	ff d0                	callq  *%rax
  800421426d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214271:	eb 07                	jmp    800421427a <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214273:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800421427a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421427e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214282:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214286:	48 8b 00             	mov    (%rax),%rax
  8004214289:	48 29 c2             	sub    %rax,%rdx
  800421428c:	48 89 d0             	mov    %rdx,%rax
  800421428f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214293:	73 0a                	jae    800421429f <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214295:	b8 12 00 00 00       	mov    $0x12,%eax
  800421429a:	e9 ca 02 00 00       	jmpq   8004214569 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  800421429f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042142a7:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  80042142ab:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042142af:	74 5e                	je     800421430f <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042142b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142b5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042142b9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042142bd:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042142c1:	48 89 d1             	mov    %rdx,%rcx
  80042142c4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042142c8:	ba 04 00 00 00       	mov    $0x4,%edx
  80042142cd:	48 89 cf             	mov    %rcx,%rdi
  80042142d0:	ff d0                	callq  *%rax
  80042142d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042142d6:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  80042142da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042142de:	48 8b 10             	mov    (%rax),%rdx
  80042142e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142e5:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042142e9:	48 29 c2             	sub    %rax,%rdx
  80042142ec:	48 89 d0             	mov    %rdx,%rax
  80042142ef:	48 83 e8 04          	sub    $0x4,%rax
  80042142f3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  80042142f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142fb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042142ff:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214303:	75 3d                	jne    8004214342 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214305:	b8 13 00 00 00       	mov    $0x13,%eax
  800421430a:	e9 5a 02 00 00       	jmpq   8004214569 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  800421430f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214313:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214317:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421431b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421431f:	48 89 d1             	mov    %rdx,%rcx
  8004214322:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214325:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214329:	48 89 cf             	mov    %rcx,%rdi
  800421432c:	ff d0                	callq  *%rax
  800421432e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214332:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421433a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421433e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214342:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214346:	0f 84 c9 00 00 00    	je     8004214415 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800421434c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214350:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214354:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214358:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421435b:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800421435f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214363:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214367:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421436b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421436f:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214373:	48 89 c2             	mov    %rax,%rdx
  8004214376:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421437a:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800421437e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214382:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214386:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421438a:	48 89 c7             	mov    %rax,%rdi
  800421438d:	48 b8 ee 39 21 04 80 	movabs $0x80042139ee,%rax
  8004214394:	00 00 00 
  8004214397:	ff d0                	callq  *%rax
  8004214399:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  800421439c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042143a0:	74 08                	je     80042143aa <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  80042143a2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042143a5:	e9 bf 01 00 00       	jmpq   8004214569 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  80042143aa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042143ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143b2:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  80042143b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042143ba:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042143be:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  80042143c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143c6:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042143ca:	48 89 c2             	mov    %rax,%rdx
  80042143cd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042143d1:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042143d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143d9:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042143dd:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042143e1:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042143e7:	48 89 c7             	mov    %rax,%rdi
  80042143ea:	48 b8 ee 39 21 04 80 	movabs $0x80042139ee,%rax
  80042143f1:	00 00 00 
  80042143f4:	ff d0                	callq  *%rax
  80042143f6:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  80042143f9:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042143fd:	74 08                	je     8004214407 <_dwarf_frame_set_fde+0x251>
			return (ret);
  80042143ff:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214402:	e9 62 01 00 00       	jmpq   8004214569 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004214407:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421440b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421440f:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004214413:	eb 50                	jmp    8004214465 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214415:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214419:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421441d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214421:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214424:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214428:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421442c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214430:	48 89 cf             	mov    %rcx,%rdi
  8004214433:	ff d0                	callq  *%rax
  8004214435:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214439:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421443d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214441:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214445:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214449:	8b 52 28             	mov    0x28(%rdx),%edx
  800421444c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214450:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214454:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214458:	48 89 cf             	mov    %rcx,%rdi
  800421445b:	ff d0                	callq  *%rax
  800421445d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214461:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004214465:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214469:	74 6b                	je     80042144d6 <_dwarf_frame_set_fde+0x320>
  800421446b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421446f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214473:	0f b6 00             	movzbl (%rax),%eax
  8004214476:	3c 7a                	cmp    $0x7a,%al
  8004214478:	75 5c                	jne    80042144d6 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421447a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421447e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214482:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004214486:	48 89 d6             	mov    %rdx,%rsi
  8004214489:	48 89 c7             	mov    %rax,%rdi
  800421448c:	48 b8 82 0a 21 04 80 	movabs $0x8004210a82,%rax
  8004214493:	00 00 00 
  8004214496:	ff d0                	callq  *%rax
  8004214498:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421449c:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042144a0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042144a4:	48 8b 10             	mov    (%rax),%rdx
  80042144a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144ab:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042144af:	48 01 d0             	add    %rdx,%rax
  80042144b2:	48 89 c2             	mov    %rax,%rdx
  80042144b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144b9:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  80042144bd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042144c1:	48 8b 10             	mov    (%rax),%rdx
  80042144c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144c8:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042144cc:	48 01 c2             	add    %rax,%rdx
  80042144cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042144d3:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042144d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042144da:	48 8b 10             	mov    (%rax),%rdx
  80042144dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144e1:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042144e5:	48 01 d0             	add    %rdx,%rax
  80042144e8:	48 89 c2             	mov    %rax,%rdx
  80042144eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144ef:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  80042144f3:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042144f7:	75 2a                	jne    8004214523 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  80042144f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144fd:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214501:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214505:	48 01 c2             	add    %rax,%rdx
  8004214508:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421450c:	48 8b 00             	mov    (%rax),%rax
  800421450f:	48 29 c2             	sub    %rax,%rdx
  8004214512:	48 89 d0             	mov    %rdx,%rax
  8004214515:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214519:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421451d:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004214521:	eb 28                	jmp    800421454b <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004214523:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214527:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421452b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421452f:	48 01 c2             	add    %rax,%rdx
  8004214532:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214536:	48 8b 00             	mov    (%rax),%rax
  8004214539:	48 29 c2             	sub    %rax,%rdx
  800421453c:	48 89 d0             	mov    %rdx,%rax
  800421453f:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214543:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214547:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  800421454b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421454f:	48 8b 10             	mov    (%rax),%rdx
  8004214552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214556:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421455a:	48 01 c2             	add    %rax,%rdx
  800421455d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214561:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214564:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214569:	c9                   	leaveq 
  800421456a:	c3                   	retq   

000000800421456b <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421456b:	55                   	push   %rbp
  800421456c:	48 89 e5             	mov    %rsp,%rbp
  800421456f:	48 83 ec 20          	sub    $0x20,%rsp
  8004214573:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214577:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  800421457b:	48 b8 a0 d6 49 04 80 	movabs $0x800449d6a0,%rax
  8004214582:	00 00 00 
  8004214585:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004214589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421458d:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214591:	48 85 c0             	test   %rax,%rax
  8004214594:	74 07                	je     800421459d <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004214596:	b8 00 00 00 00       	mov    $0x0,%eax
  800421459b:	eb 33                	jmp    80042145d0 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  800421459d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145a1:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042145a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042145a9:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  80042145ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042145b1:	48 b9 20 be 69 04 80 	movabs $0x800469be20,%rcx
  80042145b8:	00 00 00 
  80042145bb:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  80042145bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145c3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042145c7:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  80042145cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042145d0:	c9                   	leaveq 
  80042145d1:	c3                   	retq   

00000080042145d2 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  80042145d2:	55                   	push   %rbp
  80042145d3:	48 89 e5             	mov    %rsp,%rbp
  80042145d6:	48 83 ec 60          	sub    $0x60,%rsp
  80042145da:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042145de:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042145e1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042145e5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  80042145e9:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  80042145f0:	00 00 00 
  80042145f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  80042145f7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  80042145fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214602:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214606:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  800421460a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421460e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214612:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214616:	48 39 c2             	cmp    %rax,%rdx
  8004214619:	0f 86 fe 01 00 00    	jbe    800421481d <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  800421461f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214623:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004214627:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421462b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421462f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214633:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214637:	48 89 d1             	mov    %rdx,%rcx
  800421463a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421463e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214643:	48 89 cf             	mov    %rcx,%rdi
  8004214646:	ff d0                	callq  *%rax
  8004214648:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  800421464c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214651:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214655:	75 2e                	jne    8004214685 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004214657:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  800421465e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214662:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214666:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421466a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421466e:	48 89 d1             	mov    %rdx,%rcx
  8004214671:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004214675:	ba 08 00 00 00       	mov    $0x8,%edx
  800421467a:	48 89 cf             	mov    %rcx,%rdi
  800421467d:	ff d0                	callq  *%rax
  800421467f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214683:	eb 07                	jmp    800421468c <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  8004214685:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  800421468c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214690:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214694:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214698:	48 29 c2             	sub    %rax,%rdx
  800421469b:	48 89 d0             	mov    %rdx,%rax
  800421469e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042146a2:	72 0d                	jb     80042146b1 <_dwarf_get_next_fde+0xdf>
  80042146a4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042146a9:	75 10                	jne    80042146bb <_dwarf_get_next_fde+0xe9>
  80042146ab:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042146af:	75 0a                	jne    80042146bb <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042146b1:	b8 12 00 00 00       	mov    $0x12,%eax
  80042146b6:	e9 67 01 00 00       	jmpq   8004214822 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  80042146bb:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042146bf:	74 11                	je     80042146d2 <_dwarf_get_next_fde+0x100>
  80042146c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042146c6:	75 0a                	jne    80042146d2 <_dwarf_get_next_fde+0x100>
			return(-1);
  80042146c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042146cd:	e9 50 01 00 00       	jmpq   8004214822 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  80042146d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146d6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146da:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042146de:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042146e2:	48 89 d1             	mov    %rdx,%rcx
  80042146e5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042146e8:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042146ec:	48 89 cf             	mov    %rcx,%rdi
  80042146ef:	ff d0                	callq  *%rax
  80042146f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  80042146f5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042146f9:	74 79                	je     8004214774 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  80042146fb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004214700:	75 32                	jne    8004214734 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214702:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214706:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421470a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421470e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214712:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214716:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421471a:	49 89 f8             	mov    %rdi,%r8
  800421471d:	48 89 c7             	mov    %rax,%rdi
  8004214720:	48 b8 53 3d 21 04 80 	movabs $0x8004213d53,%rax
  8004214727:	00 00 00 
  800421472a:	ff d0                	callq  *%rax
  800421472c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421472f:	e9 c8 00 00 00       	jmpq   80042147fc <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  8004214734:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214738:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421473c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004214740:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214744:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214748:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421474c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214750:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214754:	4d 89 c1             	mov    %r8,%r9
  8004214757:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421475d:	48 89 c7             	mov    %rax,%rdi
  8004214760:	48 b8 b6 41 21 04 80 	movabs $0x80042141b6,%rax
  8004214767:	00 00 00 
  800421476a:	ff d0                	callq  *%rax
  800421476c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421476f:	e9 88 00 00 00       	jmpq   80042147fc <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004214774:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214778:	75 0b                	jne    8004214785 <_dwarf_get_next_fde+0x1b3>
  800421477a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421477f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004214783:	74 0d                	je     8004214792 <_dwarf_get_next_fde+0x1c0>
  8004214785:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004214789:	75 36                	jne    80042147c1 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  800421478b:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004214790:	75 2f                	jne    80042147c1 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214792:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214796:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421479a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421479e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042147a2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042147a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147aa:	49 89 f8             	mov    %rdi,%r8
  80042147ad:	48 89 c7             	mov    %rax,%rdi
  80042147b0:	48 b8 53 3d 21 04 80 	movabs $0x8004213d53,%rax
  80042147b7:	00 00 00 
  80042147ba:	ff d0                	callq  *%rax
  80042147bc:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042147bf:	eb 3b                	jmp    80042147fc <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  80042147c1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042147c5:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042147c9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042147cd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042147d1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042147d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147d9:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042147dd:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042147e1:	4d 89 c1             	mov    %r8,%r9
  80042147e4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042147ea:	48 89 c7             	mov    %rax,%rdi
  80042147ed:	48 b8 b6 41 21 04 80 	movabs $0x80042141b6,%rax
  80042147f4:	00 00 00 
  80042147f7:	ff d0                	callq  *%rax
  80042147f9:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  80042147fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004214800:	74 07                	je     8004214809 <_dwarf_get_next_fde+0x237>
			return(-1);
  8004214802:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214807:	eb 19                	jmp    8004214822 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004214809:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421480d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004214811:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214815:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214819:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  800421481d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214822:	c9                   	leaveq 
  8004214823:	c3                   	retq   

0000008004214824 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004214824:	55                   	push   %rbp
  8004214825:	48 89 e5             	mov    %rsp,%rbp
  8004214828:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421482c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214830:	89 f0                	mov    %esi,%eax
  8004214832:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004214836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421483a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421483e:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004214842:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214846:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  800421484a:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  800421484e:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004214852:	c9                   	leaveq 
  8004214853:	c3                   	retq   

0000008004214854 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004214854:	55                   	push   %rbp
  8004214855:	48 89 e5             	mov    %rsp,%rbp
  8004214858:	48 83 ec 10          	sub    $0x10,%rsp
  800421485c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004214860:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004214864:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214869:	75 0a                	jne    8004214875 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421486b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214870:	e9 85 00 00 00       	jmpq   80042148fa <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004214875:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214879:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421487d:	48 85 c0             	test   %rax,%rax
  8004214880:	75 25                	jne    80042148a7 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004214882:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421488a:	48 89 d6             	mov    %rdx,%rsi
  800421488d:	48 89 c7             	mov    %rax,%rdi
  8004214890:	48 b8 6b 45 21 04 80 	movabs $0x800421456b,%rax
  8004214897:	00 00 00 
  800421489a:	ff d0                	callq  *%rax
  800421489c:	85 c0                	test   %eax,%eax
  800421489e:	74 07                	je     80042148a7 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  80042148a0:	b8 01 00 00 00       	mov    $0x1,%eax
  80042148a5:	eb 53                	jmp    80042148fa <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042148a7:	48 bf a0 c6 22 04 80 	movabs $0x800422c6a0,%rdi
  80042148ae:	00 00 00 
  80042148b1:	48 b8 20 23 21 04 80 	movabs $0x8004212320,%rax
  80042148b8:	00 00 00 
  80042148bb:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  80042148bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148c1:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  80042148c8:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  80042148c9:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  80042148d0:	00 00 00 
  80042148d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042148d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148db:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  80042148df:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  80042148e6:	00 00 00 
  80042148e9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042148ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148f1:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  80042148f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042148fa:	c9                   	leaveq 
  80042148fb:	c3                   	retq   

00000080042148fc <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042148fc:	55                   	push   %rbp
  80042148fd:	48 89 e5             	mov    %rsp,%rbp
  8004214900:	53                   	push   %rbx
  8004214901:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004214908:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800421490c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004214910:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214917:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  800421491e:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004214925:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  800421492c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214930:	48 83 c0 48          	add    $0x48,%rax
  8004214934:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004214938:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421493f:	00 
  8004214940:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214947:	00 
  8004214948:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800421494f:	00 
  8004214950:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214957:	00 
  8004214958:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421495c:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214960:	0f b6 c0             	movzbl %al,%eax
  8004214963:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214966:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800421496d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214974:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421497b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214982:	e9 0a 05 00 00       	jmpq   8004214e91 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  8004214987:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421498e:	0f b6 00             	movzbl (%rax),%eax
  8004214991:	84 c0                	test   %al,%al
  8004214993:	0f 85 78 01 00 00    	jne    8004214b11 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004214999:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042149a0:	48 83 c0 01          	add    $0x1,%rax
  80042149a4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  80042149ab:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042149b2:	48 89 c7             	mov    %rax,%rdi
  80042149b5:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  80042149bc:	00 00 00 
  80042149bf:	ff d0                	callq  *%rax
  80042149c1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  80042149c5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042149cc:	0f b6 00             	movzbl (%rax),%eax
  80042149cf:	0f b6 c0             	movzbl %al,%eax
  80042149d2:	83 f8 02             	cmp    $0x2,%eax
  80042149d5:	74 7a                	je     8004214a51 <_dwarf_lineno_run_program+0x155>
  80042149d7:	83 f8 03             	cmp    $0x3,%eax
  80042149da:	0f 84 b3 00 00 00    	je     8004214a93 <_dwarf_lineno_run_program+0x197>
  80042149e0:	83 f8 01             	cmp    $0x1,%eax
  80042149e3:	0f 85 09 01 00 00    	jne    8004214af2 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  80042149e9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042149f0:	48 83 c0 01          	add    $0x1,%rax
  80042149f4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  80042149fb:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004214a02:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004214a09:	00 
  8004214a0a:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214a11:	00 
  8004214a12:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004214a19:	00 
  8004214a1a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214a21:	00 
  8004214a22:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214a26:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214a2a:	0f b6 c0             	movzbl %al,%eax
  8004214a2d:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214a30:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214a37:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214a3e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214a45:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214a4c:	e9 bb 00 00 00       	jmpq   8004214b0c <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004214a51:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a58:	48 83 c0 01          	add    $0x1,%rax
  8004214a5c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004214a63:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214a6a:	00 00 00 
  8004214a6d:	48 8b 00             	mov    (%rax),%rax
  8004214a70:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214a74:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004214a78:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004214a7c:	0f b6 ca             	movzbl %dl,%ecx
  8004214a7f:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214a86:	89 ce                	mov    %ecx,%esi
  8004214a88:	48 89 d7             	mov    %rdx,%rdi
  8004214a8b:	ff d0                	callq  *%rax
  8004214a8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004214a91:	eb 79                	jmp    8004214b0c <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004214a93:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a9a:	48 83 c0 01          	add    $0x1,%rax
  8004214a9e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004214aa5:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214aac:	00 00 00 
  8004214aaf:	48 8b 08             	mov    (%rax),%rcx
  8004214ab2:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004214ab9:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004214ac0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ac4:	49 89 c8             	mov    %rcx,%r8
  8004214ac7:	48 89 d1             	mov    %rdx,%rcx
  8004214aca:	ba 00 00 00 00       	mov    $0x0,%edx
  8004214acf:	48 89 c7             	mov    %rax,%rdi
  8004214ad2:	48 b8 b4 4e 21 04 80 	movabs $0x8004214eb4,%rax
  8004214ad9:	00 00 00 
  8004214adc:	ff d0                	callq  *%rax
  8004214ade:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004214ae1:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004214ae5:	74 09                	je     8004214af0 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004214ae7:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004214ae8:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004214aeb:	e9 ba 03 00 00       	jmpq   8004214eaa <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004214af0:	eb 1a                	jmp    8004214b0c <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004214af2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004214af9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214afd:	48 01 d0             	add    %rdx,%rax
  8004214b00:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004214b07:	e9 85 03 00 00       	jmpq   8004214e91 <_dwarf_lineno_run_program+0x595>
  8004214b0c:	e9 80 03 00 00       	jmpq   8004214e91 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004214b11:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b18:	0f b6 00             	movzbl (%rax),%eax
  8004214b1b:	84 c0                	test   %al,%al
  8004214b1d:	0f 84 3c 02 00 00    	je     8004214d5f <_dwarf_lineno_run_program+0x463>
  8004214b23:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b2a:	0f b6 10             	movzbl (%rax),%edx
  8004214b2d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214b31:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214b35:	38 c2                	cmp    %al,%dl
  8004214b37:	0f 83 22 02 00 00    	jae    8004214d5f <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004214b3d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b44:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214b48:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214b4f:	0f b6 00             	movzbl (%rax),%eax
  8004214b52:	0f b6 c0             	movzbl %al,%eax
  8004214b55:	83 f8 0c             	cmp    $0xc,%eax
  8004214b58:	0f 87 fb 01 00 00    	ja     8004214d59 <_dwarf_lineno_run_program+0x45d>
  8004214b5e:	89 c0                	mov    %eax,%eax
  8004214b60:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214b67:	00 
  8004214b68:	48 b8 08 b0 21 04 80 	movabs $0x800421b008,%rax
  8004214b6f:	00 00 00 
  8004214b72:	48 01 d0             	add    %rdx,%rax
  8004214b75:	48 8b 00             	mov    (%rax),%rax
  8004214b78:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004214b7a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214b81:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214b85:	73 0a                	jae    8004214b91 <_dwarf_lineno_run_program+0x295>
  8004214b87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214b8c:	e9 19 03 00 00       	jmpq   8004214eaa <_dwarf_lineno_run_program+0x5ae>
  8004214b91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214b99:	48 89 10             	mov    %rdx,(%rax)
  8004214b9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ba0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214ba7:	00 
  8004214ba8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bac:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214bb0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214bb4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bb8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214bbc:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214bc0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214bc4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bc8:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214bcc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bd0:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214bd3:	89 50 28             	mov    %edx,0x28(%rax)
  8004214bd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bda:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214bdd:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214be0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214be4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214be7:	89 50 30             	mov    %edx,0x30(%rax)
  8004214bea:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214bee:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214bf5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214bf9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214bfd:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004214c04:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004214c0b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004214c12:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214c19:	e9 3c 01 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214c1e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214c25:	48 89 c7             	mov    %rax,%rdi
  8004214c28:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214c2f:	00 00 00 
  8004214c32:	ff d0                	callq  *%rax
					li->li_minlen;
  8004214c34:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004214c38:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214c3c:	0f b6 d2             	movzbl %dl,%edx
  8004214c3f:	48 0f af c2          	imul   %rdx,%rax
  8004214c43:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004214c47:	e9 0e 01 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004214c4c:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214c53:	48 89 c7             	mov    %rax,%rdi
  8004214c56:	48 b8 01 0b 21 04 80 	movabs $0x8004210b01,%rax
  8004214c5d:	00 00 00 
  8004214c60:	ff d0                	callq  *%rax
  8004214c62:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004214c66:	e9 ef 00 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004214c6b:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214c72:	48 89 c7             	mov    %rax,%rdi
  8004214c75:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214c7c:	00 00 00 
  8004214c7f:	ff d0                	callq  *%rax
  8004214c81:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004214c85:	e9 d0 00 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004214c8a:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214c91:	48 89 c7             	mov    %rax,%rdi
  8004214c94:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214c9b:	00 00 00 
  8004214c9e:	ff d0                	callq  *%rax
  8004214ca0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004214ca4:	e9 b1 00 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004214ca9:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004214cad:	0f 94 c0             	sete   %al
  8004214cb0:	0f b6 c0             	movzbl %al,%eax
  8004214cb3:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004214cb6:	e9 9f 00 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004214cbb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004214cc2:	e9 93 00 00 00       	jmpq   8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004214cc7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ccb:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214ccf:	0f b6 c0             	movzbl %al,%eax
  8004214cd2:	ba ff 00 00 00       	mov    $0xff,%edx
  8004214cd7:	89 d1                	mov    %edx,%ecx
  8004214cd9:	29 c1                	sub    %eax,%ecx
  8004214cdb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214cdf:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214ce3:	0f b6 d8             	movzbl %al,%ebx
  8004214ce6:	89 c8                	mov    %ecx,%eax
  8004214ce8:	99                   	cltd   
  8004214ce9:	f7 fb                	idiv   %ebx
  8004214ceb:	89 c2                	mov    %eax,%edx
  8004214ced:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214cf1:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214cf5:	0f b6 c0             	movzbl %al,%eax
  8004214cf8:	0f af c2             	imul   %edx,%eax
  8004214cfb:	48 98                	cltq   
  8004214cfd:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214d01:	eb 57                	jmp    8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004214d03:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214d0a:	00 00 00 
  8004214d0d:	48 8b 00             	mov    (%rax),%rax
  8004214d10:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214d14:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214d1b:	be 02 00 00 00       	mov    $0x2,%esi
  8004214d20:	48 89 d7             	mov    %rdx,%rdi
  8004214d23:	ff d0                	callq  *%rax
  8004214d25:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214d29:	eb 2f                	jmp    8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004214d2b:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004214d32:	eb 26                	jmp    8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004214d34:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004214d3b:	eb 1d                	jmp    8004214d5a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004214d3d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214d44:	48 89 c7             	mov    %rax,%rdi
  8004214d47:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214d4e:	00 00 00 
  8004214d51:	ff d0                	callq  *%rax
  8004214d53:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004214d57:	eb 01                	jmp    8004214d5a <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004214d59:	90                   	nop
			}

		} else {
  8004214d5a:	e9 32 01 00 00       	jmpq   8004214e91 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004214d5f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d63:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004214d67:	0f be c8             	movsbl %al,%ecx
  8004214d6a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214d71:	0f b6 00             	movzbl (%rax),%eax
  8004214d74:	0f b6 d0             	movzbl %al,%edx
  8004214d77:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d7b:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214d7f:	0f b6 c0             	movzbl %al,%eax
  8004214d82:	29 c2                	sub    %eax,%edx
  8004214d84:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d88:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214d8c:	0f b6 f0             	movzbl %al,%esi
  8004214d8f:	89 d0                	mov    %edx,%eax
  8004214d91:	99                   	cltd   
  8004214d92:	f7 fe                	idiv   %esi
  8004214d94:	89 d0                	mov    %edx,%eax
  8004214d96:	01 c8                	add    %ecx,%eax
  8004214d98:	48 98                	cltq   
  8004214d9a:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004214d9e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214da5:	0f b6 00             	movzbl (%rax),%eax
  8004214da8:	0f b6 d0             	movzbl %al,%edx
  8004214dab:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214daf:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214db3:	0f b6 c0             	movzbl %al,%eax
  8004214db6:	89 d1                	mov    %edx,%ecx
  8004214db8:	29 c1                	sub    %eax,%ecx
  8004214dba:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214dbe:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214dc2:	0f b6 d8             	movzbl %al,%ebx
  8004214dc5:	89 c8                	mov    %ecx,%eax
  8004214dc7:	99                   	cltd   
  8004214dc8:	f7 fb                	idiv   %ebx
  8004214dca:	89 c2                	mov    %eax,%edx
  8004214dcc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214dd0:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214dd4:	0f b6 c0             	movzbl %al,%eax
  8004214dd7:	0f af c2             	imul   %edx,%eax
  8004214dda:	48 98                	cltq   
  8004214ddc:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004214de0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214de7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214deb:	73 0a                	jae    8004214df7 <_dwarf_lineno_run_program+0x4fb>
  8004214ded:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214df2:	e9 b3 00 00 00       	jmpq   8004214eaa <_dwarf_lineno_run_program+0x5ae>
  8004214df7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dfb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214dff:	48 89 10             	mov    %rdx,(%rax)
  8004214e02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e06:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214e0d:	00 
  8004214e0e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e12:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214e16:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214e1a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e1e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214e22:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214e26:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214e2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e2e:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214e32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e36:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214e39:	89 50 28             	mov    %edx,0x28(%rax)
  8004214e3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e40:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214e43:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214e46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e4a:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214e4d:	89 50 30             	mov    %edx,0x30(%rax)
  8004214e50:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e54:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214e5b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214e5f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e63:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004214e6a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004214e71:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004214e78:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004214e7f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e86:	48 83 c0 01          	add    $0x1,%rax
  8004214e8a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214e91:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e98:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004214e9f:	0f 82 e2 fa ff ff    	jb     8004214987 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004214ea5:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004214eaa:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004214eb1:	5b                   	pop    %rbx
  8004214eb2:	5d                   	pop    %rbp
  8004214eb3:	c3                   	retq   

0000008004214eb4 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004214eb4:	55                   	push   %rbp
  8004214eb5:	48 89 e5             	mov    %rsp,%rbp
  8004214eb8:	53                   	push   %rbx
  8004214eb9:	48 83 ec 48          	sub    $0x48,%rsp
  8004214ebd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004214ec1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214ec5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214ec9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214ecd:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004214ed1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214ed5:	48 8b 00             	mov    (%rax),%rax
  8004214ed8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004214edc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214ee0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004214ee4:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004214ee8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214eec:	48 89 c7             	mov    %rax,%rdi
  8004214eef:	48 b8 6b fc 20 04 80 	movabs $0x800420fc6b,%rax
  8004214ef6:	00 00 00 
  8004214ef9:	ff d0                	callq  *%rax
  8004214efb:	48 98                	cltq   
  8004214efd:	48 83 c0 01          	add    $0x1,%rax
  8004214f01:	48 01 d8             	add    %rbx,%rax
  8004214f04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004214f08:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f0c:	48 89 c7             	mov    %rax,%rdi
  8004214f0f:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214f16:	00 00 00 
  8004214f19:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004214f1b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f1f:	48 89 c7             	mov    %rax,%rdi
  8004214f22:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214f29:	00 00 00 
  8004214f2c:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004214f2e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214f32:	48 89 c7             	mov    %rax,%rdi
  8004214f35:	48 b8 93 0b 21 04 80 	movabs $0x8004210b93,%rax
  8004214f3c:	00 00 00 
  8004214f3f:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004214f41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214f45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214f49:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004214f4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214f51:	48 83 c4 48          	add    $0x48,%rsp
  8004214f55:	5b                   	pop    %rbx
  8004214f56:	5d                   	pop    %rbp
  8004214f57:	c3                   	retq   

0000008004214f58 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004214f58:	55                   	push   %rbp
  8004214f59:	48 89 e5             	mov    %rsp,%rbp
  8004214f5c:	53                   	push   %rbx
  8004214f5d:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004214f64:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004214f6b:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004214f72:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004214f79:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004214f80:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004214f87:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004214f8e:	00 
  8004214f8f:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004214f96:	00 
  8004214f97:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004214f9e:	00 
  8004214f9f:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004214fa6:	00 
  8004214fa7:	48 b8 70 b0 21 04 80 	movabs $0x800421b070,%rax
  8004214fae:	00 00 00 
  8004214fb1:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004214fb5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004214fb9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004214fbd:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004214fc4:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004214fcb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004214fcf:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004214fd4:	75 35                	jne    800421500b <_dwarf_lineno_init+0xb3>
  8004214fd6:	48 b9 7c b0 21 04 80 	movabs $0x800421b07c,%rcx
  8004214fdd:	00 00 00 
  8004214fe0:	48 ba 87 b0 21 04 80 	movabs $0x800421b087,%rdx
  8004214fe7:	00 00 00 
  8004214fea:	be 13 01 00 00       	mov    $0x113,%esi
  8004214fef:	48 bf 9c b0 21 04 80 	movabs $0x800421b09c,%rdi
  8004214ff6:	00 00 00 
  8004214ff9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214ffe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215005:	00 00 00 
  8004215008:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421500b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215012:	00 00 00 
  8004215015:	48 8b 00             	mov    (%rax),%rax
  8004215018:	48 85 c0             	test   %rax,%rax
  800421501b:	75 35                	jne    8004215052 <_dwarf_lineno_init+0xfa>
  800421501d:	48 b9 b3 b0 21 04 80 	movabs $0x800421b0b3,%rcx
  8004215024:	00 00 00 
  8004215027:	48 ba 87 b0 21 04 80 	movabs $0x800421b087,%rdx
  800421502e:	00 00 00 
  8004215031:	be 14 01 00 00       	mov    $0x114,%esi
  8004215036:	48 bf 9c b0 21 04 80 	movabs $0x800421b09c,%rdi
  800421503d:	00 00 00 
  8004215040:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215045:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421504c:	00 00 00 
  800421504f:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215052:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215056:	48 89 c7             	mov    %rax,%rdi
  8004215059:	48 b8 20 23 21 04 80 	movabs $0x8004212320,%rax
  8004215060:	00 00 00 
  8004215063:	ff d0                	callq  *%rax
  8004215065:	85 c0                	test   %eax,%eax
  8004215067:	74 0a                	je     8004215073 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215069:	b8 00 00 00 00       	mov    $0x0,%eax
  800421506e:	e9 4f 04 00 00       	jmpq   80042154c2 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215073:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421507a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  800421507e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215085:	00 00 00 
  8004215088:	48 8b 00             	mov    (%rax),%rax
  800421508b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421508f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215093:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215097:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421509e:	ba 04 00 00 00       	mov    $0x4,%edx
  80042150a3:	48 89 cf             	mov    %rcx,%rdi
  80042150a6:	ff d0                	callq  *%rax
  80042150a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  80042150ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042150b1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042150b5:	75 37                	jne    80042150ee <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  80042150b7:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  80042150be:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042150c5:	00 00 00 
  80042150c8:	48 8b 00             	mov    (%rax),%rax
  80042150cb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150cf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042150d3:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042150d7:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042150de:	ba 08 00 00 00       	mov    $0x8,%edx
  80042150e3:	48 89 cf             	mov    %rcx,%rdi
  80042150e6:	ff d0                	callq  *%rax
  80042150e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042150ec:	eb 07                	jmp    80042150f5 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  80042150ee:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  80042150f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042150f9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042150fd:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215104:	48 29 c2             	sub    %rax,%rdx
  8004215107:	48 89 d0             	mov    %rdx,%rax
  800421510a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421510e:	73 0a                	jae    800421511a <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215110:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215115:	e9 a8 03 00 00       	jmpq   80042154c2 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421511a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421511e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215122:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215125:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421512c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215130:	48 01 d0             	add    %rdx,%rax
  8004215133:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215137:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421513e:	00 00 00 
  8004215141:	48 8b 00             	mov    (%rax),%rax
  8004215144:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215148:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421514c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215150:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215157:	ba 02 00 00 00       	mov    $0x2,%edx
  800421515c:	48 89 cf             	mov    %rcx,%rdi
  800421515f:	ff d0                	callq  *%rax
  8004215161:	89 c2                	mov    %eax,%edx
  8004215163:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215167:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  800421516b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215172:	00 00 00 
  8004215175:	48 8b 00             	mov    (%rax),%rax
  8004215178:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421517c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215180:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215184:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215187:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421518e:	48 89 cf             	mov    %rcx,%rdi
  8004215191:	ff d0                	callq  *%rax
  8004215193:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215197:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  800421519b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042151a2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  80042151a6:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151ad:	00 00 00 
  80042151b0:	48 8b 00             	mov    (%rax),%rax
  80042151b3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151b7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151bb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151bf:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042151c6:	ba 01 00 00 00       	mov    $0x1,%edx
  80042151cb:	48 89 cf             	mov    %rcx,%rdi
  80042151ce:	ff d0                	callq  *%rax
  80042151d0:	89 c2                	mov    %eax,%edx
  80042151d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042151d6:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  80042151d9:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151e0:	00 00 00 
  80042151e3:	48 8b 00             	mov    (%rax),%rax
  80042151e6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151ee:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151f2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042151f9:	ba 01 00 00 00       	mov    $0x1,%edx
  80042151fe:	48 89 cf             	mov    %rcx,%rdi
  8004215201:	ff d0                	callq  *%rax
  8004215203:	89 c2                	mov    %eax,%edx
  8004215205:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215209:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  800421520c:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215213:	00 00 00 
  8004215216:	48 8b 00             	mov    (%rax),%rax
  8004215219:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421521d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215221:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215225:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421522c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215231:	48 89 cf             	mov    %rcx,%rdi
  8004215234:	ff d0                	callq  *%rax
  8004215236:	89 c2                	mov    %eax,%edx
  8004215238:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421523c:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  800421523f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215246:	00 00 00 
  8004215249:	48 8b 00             	mov    (%rax),%rax
  800421524c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215250:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215254:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215258:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421525f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215264:	48 89 cf             	mov    %rcx,%rdi
  8004215267:	ff d0                	callq  *%rax
  8004215269:	89 c2                	mov    %eax,%edx
  800421526b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421526f:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215272:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215279:	00 00 00 
  800421527c:	48 8b 00             	mov    (%rax),%rax
  800421527f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215283:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215287:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421528b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215292:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215297:	48 89 cf             	mov    %rcx,%rdi
  800421529a:	ff d0                	callq  *%rax
  800421529c:	89 c2                	mov    %eax,%edx
  800421529e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152a2:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042152a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152a9:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042152ad:	8d 50 fb             	lea    -0x5(%rax),%edx
  80042152b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152b4:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042152b8:	0f b6 c0             	movzbl %al,%eax
  80042152bb:	83 e8 01             	sub    $0x1,%eax
  80042152be:	39 c2                	cmp    %eax,%edx
  80042152c0:	7d 0c                	jge    80042152ce <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042152c2:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042152c9:	e9 f1 01 00 00       	jmpq   80042154bf <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  80042152ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152d2:	48 bb 60 c4 69 04 80 	movabs $0x800469c460,%rbx
  80042152d9:	00 00 00 
  80042152dc:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  80042152e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  80042152e7:	eb 41                	jmp    800421532a <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  80042152e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152ed:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042152f1:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042152f4:	48 98                	cltq   
  80042152f6:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042152fa:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215301:	00 00 00 
  8004215304:	48 8b 00             	mov    (%rax),%rax
  8004215307:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421530b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421530f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215313:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421531a:	ba 01 00 00 00       	mov    $0x1,%edx
  800421531f:	48 89 cf             	mov    %rcx,%rdi
  8004215322:	ff d0                	callq  *%rax
  8004215324:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215326:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421532a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421532e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215332:	0f b6 c0             	movzbl %al,%eax
  8004215335:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215338:	7f af                	jg     80042152e9 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  800421533a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215341:	00 
	p = ds->ds_data + offset;
  8004215342:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215346:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421534a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215351:	48 01 d0             	add    %rdx,%rax
  8004215354:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  800421535b:	eb 1f                	jmp    800421537c <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  800421535d:	90                   	nop
  800421535e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215365:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215369:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215370:	0f b6 00             	movzbl (%rax),%eax
  8004215373:	84 c0                	test   %al,%al
  8004215375:	75 e7                	jne    800421535e <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215377:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  800421537c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215383:	0f b6 00             	movzbl (%rax),%eax
  8004215386:	84 c0                	test   %al,%al
  8004215388:	75 d3                	jne    800421535d <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  800421538a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421538e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215392:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215396:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421539d:	48 89 c2             	mov    %rax,%rdx
  80042153a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042153a4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042153a8:	48 29 c2             	sub    %rax,%rdx
  80042153ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042153af:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042153b3:	48 98                	cltq   
  80042153b5:	48 39 c2             	cmp    %rax,%rdx
  80042153b8:	7e 0c                	jle    80042153c6 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042153ba:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042153c1:	e9 f9 00 00 00       	jmpq   80042154bf <_dwarf_lineno_init+0x567>
	}
	p++;
  80042153c6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042153cd:	48 83 c0 01          	add    $0x1,%rax
  80042153d1:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042153d8:	eb 3c                	jmp    8004215416 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  80042153da:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042153e1:	00 00 00 
  80042153e4:	48 8b 08             	mov    (%rax),%rcx
  80042153e7:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  80042153ee:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  80042153f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153f9:	49 89 c8             	mov    %rcx,%r8
  80042153fc:	48 89 d1             	mov    %rdx,%rcx
  80042153ff:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215404:	48 89 c7             	mov    %rax,%rdi
  8004215407:	48 b8 b4 4e 21 04 80 	movabs $0x8004214eb4,%rax
  800421540e:	00 00 00 
  8004215411:	ff d0                	callq  *%rax
  8004215413:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215416:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421541d:	0f b6 00             	movzbl (%rax),%eax
  8004215420:	84 c0                	test   %al,%al
  8004215422:	75 b6                	jne    80042153da <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004215424:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421542b:	48 83 c0 01          	add    $0x1,%rax
  800421542f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004215436:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421543d:	48 89 c2             	mov    %rax,%rdx
  8004215440:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215444:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215448:	48 29 c2             	sub    %rax,%rdx
  800421544b:	48 89 d0             	mov    %rdx,%rax
  800421544e:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215452:	48 89 c2             	mov    %rax,%rdx
  8004215455:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215459:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421545d:	48 39 c2             	cmp    %rax,%rdx
  8004215460:	74 09                	je     800421546b <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215462:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215469:	eb 54                	jmp    80042154bf <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  800421546b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421546f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215473:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215477:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800421547b:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004215482:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004215489:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004215490:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004215494:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215498:	4d 89 c1             	mov    %r8,%r9
  800421549b:	49 89 f8             	mov    %rdi,%r8
  800421549e:	48 89 c7             	mov    %rax,%rdi
  80042154a1:	48 b8 fc 48 21 04 80 	movabs $0x80042148fc,%rax
  80042154a8:	00 00 00 
  80042154ab:	ff d0                	callq  *%rax
  80042154ad:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042154b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042154b4:	74 02                	je     80042154b8 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042154b6:	eb 07                	jmp    80042154bf <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042154b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042154bd:	eb 03                	jmp    80042154c2 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042154bf:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042154c2:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  80042154c9:	5b                   	pop    %rbx
  80042154ca:	5d                   	pop    %rbp
  80042154cb:	c3                   	retq   

00000080042154cc <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042154cc:	55                   	push   %rbp
  80042154cd:	48 89 e5             	mov    %rsp,%rbp
  80042154d0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  80042154d7:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042154de:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042154e5:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042154ec:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  80042154f3:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  80042154fa:	00 
  80042154fb:	75 35                	jne    8004215532 <dwarf_srclines+0x66>
  80042154fd:	48 b9 bf b0 21 04 80 	movabs $0x800421b0bf,%rcx
  8004215504:	00 00 00 
  8004215507:	48 ba 87 b0 21 04 80 	movabs $0x800421b087,%rdx
  800421550e:	00 00 00 
  8004215511:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004215516:	48 bf 9c b0 21 04 80 	movabs $0x800421b09c,%rdi
  800421551d:	00 00 00 
  8004215520:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215525:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421552c:	00 00 00 
  800421552f:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215532:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004215539:	00 
  800421553a:	75 35                	jne    8004215571 <dwarf_srclines+0xa5>
  800421553c:	48 b9 c3 b0 21 04 80 	movabs $0x800421b0c3,%rcx
  8004215543:	00 00 00 
  8004215546:	48 ba 87 b0 21 04 80 	movabs $0x800421b087,%rdx
  800421554d:	00 00 00 
  8004215550:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004215555:	48 bf 9c b0 21 04 80 	movabs $0x800421b09c,%rdi
  800421555c:	00 00 00 
  800421555f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215564:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421556b:	00 00 00 
  800421556e:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215571:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004215578:	ba 88 00 00 00       	mov    $0x88,%edx
  800421557d:	be 00 00 00 00       	mov    $0x0,%esi
  8004215582:	48 89 c7             	mov    %rax,%rdi
  8004215585:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800421558c:	00 00 00 
  800421558f:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004215591:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215598:	be 10 00 00 00       	mov    $0x10,%esi
  800421559d:	48 89 c7             	mov    %rax,%rdi
  80042155a0:	48 b8 a5 1e 21 04 80 	movabs $0x8004211ea5,%rax
  80042155a7:	00 00 00 
  80042155aa:	ff d0                	callq  *%rax
  80042155ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042155b0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042155b5:	75 0a                	jne    80042155c1 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042155b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042155bc:	e9 84 00 00 00       	jmpq   8004215645 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042155c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042155c5:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042155c9:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  80042155d0:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  80042155d7:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  80042155de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042155e5:	49 89 f8             	mov    %rdi,%r8
  80042155e8:	48 89 c7             	mov    %rax,%rdi
  80042155eb:	48 b8 58 4f 21 04 80 	movabs $0x8004214f58,%rax
  80042155f2:	00 00 00 
  80042155f5:	ff d0                	callq  *%rax
  80042155f7:	85 c0                	test   %eax,%eax
  80042155f9:	74 07                	je     8004215602 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  80042155fb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215600:	eb 43                	jmp    8004215645 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004215602:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004215609:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421560d:	48 89 10             	mov    %rdx,(%rax)
  8004215610:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215614:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215618:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421561c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215620:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215624:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215628:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421562c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215630:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215634:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215638:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421563c:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004215640:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215645:	c9                   	leaveq 
  8004215646:	c3                   	retq   

0000008004215647 <_dwarf_find_section>:
  8004215647:	55                   	push   %rbp
  8004215648:	48 89 e5             	mov    %rsp,%rbp
  800421564b:	48 83 ec 20          	sub    $0x20,%rsp
  800421564f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215653:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421565a:	00 
  800421565b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215662:	eb 57                	jmp    80042156bb <_dwarf_find_section+0x74>
  8004215664:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421566b:	00 00 00 
  800421566e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215671:	48 63 d2             	movslq %edx,%rdx
  8004215674:	48 c1 e2 05          	shl    $0x5,%rdx
  8004215678:	48 01 d0             	add    %rdx,%rax
  800421567b:	48 8b 00             	mov    (%rax),%rax
  800421567e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215682:	48 89 d6             	mov    %rdx,%rsi
  8004215685:	48 89 c7             	mov    %rax,%rdi
  8004215688:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  800421568f:	00 00 00 
  8004215692:	ff d0                	callq  *%rax
  8004215694:	85 c0                	test   %eax,%eax
  8004215696:	75 1f                	jne    80042156b7 <_dwarf_find_section+0x70>
  8004215698:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421569b:	48 98                	cltq   
  800421569d:	48 c1 e0 05          	shl    $0x5,%rax
  80042156a1:	48 89 c2             	mov    %rax,%rdx
  80042156a4:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042156ab:	00 00 00 
  80042156ae:	48 01 d0             	add    %rdx,%rax
  80042156b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042156b5:	eb 0a                	jmp    80042156c1 <_dwarf_find_section+0x7a>
  80042156b7:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042156bb:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042156bf:	7e a3                	jle    8004215664 <_dwarf_find_section+0x1d>
  80042156c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042156c5:	c9                   	leaveq 
  80042156c6:	c3                   	retq   

00000080042156c7 <find_debug_sections>:
  80042156c7:	55                   	push   %rbp
  80042156c8:	48 89 e5             	mov    %rsp,%rbp
  80042156cb:	48 83 ec 40          	sub    $0x40,%rsp
  80042156cf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042156d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156d7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042156db:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  80042156e2:	00 
  80042156e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042156e7:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042156eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042156ef:	48 01 d0             	add    %rdx,%rax
  80042156f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042156f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042156fa:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042156fe:	0f b7 c0             	movzwl %ax,%eax
  8004215701:	48 c1 e0 06          	shl    $0x6,%rax
  8004215705:	48 89 c2             	mov    %rax,%rdx
  8004215708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421570c:	48 01 d0             	add    %rdx,%rax
  800421570f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215713:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215717:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800421571b:	0f b7 c0             	movzwl %ax,%eax
  800421571e:	48 c1 e0 06          	shl    $0x6,%rax
  8004215722:	48 89 c2             	mov    %rax,%rdx
  8004215725:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215729:	48 01 d0             	add    %rdx,%rax
  800421572c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215730:	e9 4b 02 00 00       	jmpq   8004215980 <find_debug_sections+0x2b9>
  8004215735:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215739:	8b 00                	mov    (%rax),%eax
  800421573b:	89 c2                	mov    %eax,%edx
  800421573d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215741:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004215745:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215749:	48 01 c8             	add    %rcx,%rax
  800421574c:	48 01 d0             	add    %rdx,%rax
  800421574f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215753:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215757:	48 be cb b0 21 04 80 	movabs $0x800421b0cb,%rsi
  800421575e:	00 00 00 
  8004215761:	48 89 c7             	mov    %rax,%rdi
  8004215764:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  800421576b:	00 00 00 
  800421576e:	ff d0                	callq  *%rax
  8004215770:	85 c0                	test   %eax,%eax
  8004215772:	75 4b                	jne    80042157bf <find_debug_sections+0xf8>
  8004215774:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215778:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421577f:	00 00 00 
  8004215782:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215786:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421578d:	00 00 00 
  8004215790:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215794:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421579c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042157a0:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157a7:	00 00 00 
  80042157aa:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042157ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042157b2:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042157b6:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042157ba:	e9 bc 01 00 00       	jmpq   800421597b <find_debug_sections+0x2b4>
  80042157bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042157c3:	48 be d7 b0 21 04 80 	movabs $0x800421b0d7,%rsi
  80042157ca:	00 00 00 
  80042157cd:	48 89 c7             	mov    %rax,%rdi
  80042157d0:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  80042157d7:	00 00 00 
  80042157da:	ff d0                	callq  *%rax
  80042157dc:	85 c0                	test   %eax,%eax
  80042157de:	75 4b                	jne    800421582b <find_debug_sections+0x164>
  80042157e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042157e4:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157eb:	00 00 00 
  80042157ee:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042157f2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157f9:	00 00 00 
  80042157fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215800:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215808:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421580c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215813:	00 00 00 
  8004215816:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421581a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421581e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215822:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215826:	e9 50 01 00 00       	jmpq   800421597b <find_debug_sections+0x2b4>
  800421582b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421582f:	48 be ef b0 21 04 80 	movabs $0x800421b0ef,%rsi
  8004215836:	00 00 00 
  8004215839:	48 89 c7             	mov    %rax,%rdi
  800421583c:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215843:	00 00 00 
  8004215846:	ff d0                	callq  *%rax
  8004215848:	85 c0                	test   %eax,%eax
  800421584a:	75 4b                	jne    8004215897 <find_debug_sections+0x1d0>
  800421584c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215850:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215857:	00 00 00 
  800421585a:	48 89 50 68          	mov    %rdx,0x68(%rax)
  800421585e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215865:	00 00 00 
  8004215868:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421586c:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215874:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215878:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421587f:	00 00 00 
  8004215882:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421588a:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421588e:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215892:	e9 e4 00 00 00       	jmpq   800421597b <find_debug_sections+0x2b4>
  8004215897:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421589b:	48 be e5 b0 21 04 80 	movabs $0x800421b0e5,%rsi
  80042158a2:	00 00 00 
  80042158a5:	48 89 c7             	mov    %rax,%rdi
  80042158a8:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  80042158af:	00 00 00 
  80042158b2:	ff d0                	callq  *%rax
  80042158b4:	85 c0                	test   %eax,%eax
  80042158b6:	75 53                	jne    800421590b <find_debug_sections+0x244>
  80042158b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158bc:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042158c0:	48 89 c2             	mov    %rax,%rdx
  80042158c3:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158ca:	00 00 00 
  80042158cd:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042158d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042158d9:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158e0:	00 00 00 
  80042158e3:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042158e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158eb:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042158ef:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158f6:	00 00 00 
  80042158f9:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042158fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215901:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215905:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215909:	eb 70                	jmp    800421597b <find_debug_sections+0x2b4>
  800421590b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421590f:	48 be fb b0 21 04 80 	movabs $0x800421b0fb,%rsi
  8004215916:	00 00 00 
  8004215919:	48 89 c7             	mov    %rax,%rdi
  800421591c:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215923:	00 00 00 
  8004215926:	ff d0                	callq  *%rax
  8004215928:	85 c0                	test   %eax,%eax
  800421592a:	75 4f                	jne    800421597b <find_debug_sections+0x2b4>
  800421592c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215930:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215937:	00 00 00 
  800421593a:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004215941:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215948:	00 00 00 
  800421594b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421594f:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004215956:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421595a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421595e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215965:	00 00 00 
  8004215968:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421596f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215973:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215977:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421597b:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004215980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215984:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004215988:	0f 82 a7 fd ff ff    	jb     8004215735 <find_debug_sections+0x6e>
  800421598e:	c9                   	leaveq 
  800421598f:	c3                   	retq   

0000008004215990 <read_section_headers>:
  8004215990:	55                   	push   %rbp
  8004215991:	48 89 e5             	mov    %rsp,%rbp
  8004215994:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  800421599b:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  80042159a2:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  80042159a9:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  80042159b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042159b5:	ba 14 00 00 00       	mov    $0x14,%edx
  80042159ba:	48 89 f7             	mov    %rsi,%rdi
  80042159bd:	48 89 d1             	mov    %rdx,%rcx
  80042159c0:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  80042159c3:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  80042159ca:	00 
  80042159cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042159cf:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  80042159d6:	48 01 d0             	add    %rdx,%rax
  80042159d9:	48 83 e8 01          	sub    $0x1,%rax
  80042159dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042159e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042159e5:	ba 00 00 00 00       	mov    $0x0,%edx
  80042159ea:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042159ee:	48 89 d0             	mov    %rdx,%rax
  80042159f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042159f5:	48 29 c2             	sub    %rax,%rdx
  80042159f8:	48 89 d0             	mov    %rdx,%rax
  80042159fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042159ff:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004215a06:	00 00 00 00 
  8004215a0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215a0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215a12:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004215a19:	00 
  8004215a1a:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004215a21:	00 00 00 
  8004215a24:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004215a2b:	75 11                	jne    8004215a3e <read_section_headers+0xae>
  8004215a2d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a34:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215a38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215a3c:	eb 26                	jmp    8004215a64 <read_section_headers+0xd4>
  8004215a3e:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a45:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215a49:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a50:	48 01 c2             	add    %rax,%rdx
  8004215a53:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004215a5a:	ff ff ff 
  8004215a5d:	48 01 d0             	add    %rdx,%rax
  8004215a60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215a64:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a6b:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215a6f:	0f b7 c0             	movzwl %ax,%eax
  8004215a72:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004215a75:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a7c:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004215a80:	0f b7 c0             	movzwl %ax,%eax
  8004215a83:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004215a86:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215a8d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004215a91:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004215a94:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004215a98:	48 63 f0             	movslq %eax,%rsi
  8004215a9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215a9f:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215aa6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215aaa:	48 89 c7             	mov    %rax,%rdi
  8004215aad:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  8004215ab4:	00 00 00 
  8004215ab7:	ff d0                	callq  *%rax
  8004215ab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215abd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004215ac1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215ac5:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215acb:	48 89 c2             	mov    %rax,%rdx
  8004215ace:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215ad2:	48 29 d0             	sub    %rdx,%rax
  8004215ad5:	48 89 c2             	mov    %rax,%rdx
  8004215ad8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215adc:	48 01 d0             	add    %rdx,%rax
  8004215adf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004215ae3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215aea:	eb 24                	jmp    8004215b10 <read_section_headers+0x180>
  8004215aec:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215aef:	48 98                	cltq   
  8004215af1:	48 c1 e0 06          	shl    $0x6,%rax
  8004215af5:	48 89 c2             	mov    %rax,%rdx
  8004215af8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215afc:	48 01 c2             	add    %rax,%rdx
  8004215aff:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b02:	48 98                	cltq   
  8004215b04:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004215b0b:	ff 
  8004215b0c:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215b10:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b13:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004215b16:	7c d4                	jl     8004215aec <read_section_headers+0x15c>
  8004215b18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215b1c:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215b20:	0f b7 c0             	movzwl %ax,%eax
  8004215b23:	48 98                	cltq   
  8004215b25:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215b2c:	ff 
  8004215b2d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004215b31:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215b38:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215b3c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215b40:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215b44:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215b48:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215b4c:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215b57:	48 01 c8             	add    %rcx,%rax
  8004215b5a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215b61:	48 89 c7             	mov    %rax,%rdi
  8004215b64:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  8004215b6b:	00 00 00 
  8004215b6e:	ff d0                	callq  *%rax
  8004215b70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215b74:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215b78:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215b7c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b80:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004215b84:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004215b88:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215b8e:	48 29 c2             	sub    %rax,%rdx
  8004215b91:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215b95:	48 01 c2             	add    %rax,%rdx
  8004215b98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215b9c:	48 01 d0             	add    %rdx,%rax
  8004215b9f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004215ba3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215baa:	e9 04 05 00 00       	jmpq   80042160b3 <read_section_headers+0x723>
  8004215baf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215bb2:	48 98                	cltq   
  8004215bb4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215bbb:	ff 
  8004215bbc:	8b 00                	mov    (%rax),%eax
  8004215bbe:	89 c2                	mov    %eax,%edx
  8004215bc0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004215bc4:	48 01 d0             	add    %rdx,%rax
  8004215bc7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004215bcb:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215bd2:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004215bd7:	48 85 c0             	test   %rax,%rax
  8004215bda:	74 35                	je     8004215c11 <read_section_headers+0x281>
  8004215bdc:	48 b9 06 b1 21 04 80 	movabs $0x800421b106,%rcx
  8004215be3:	00 00 00 
  8004215be6:	48 ba 1f b1 21 04 80 	movabs $0x800421b11f,%rdx
  8004215bed:	00 00 00 
  8004215bf0:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004215bf5:	48 bf 34 b1 21 04 80 	movabs $0x800421b134,%rdi
  8004215bfc:	00 00 00 
  8004215bff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c04:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215c0b:	00 00 00 
  8004215c0e:	41 ff d0             	callq  *%r8
  8004215c11:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215c18:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215c1c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215c20:	48 be cb b0 21 04 80 	movabs $0x800421b0cb,%rsi
  8004215c27:	00 00 00 
  8004215c2a:	48 89 c7             	mov    %rax,%rdi
  8004215c2d:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215c34:	00 00 00 
  8004215c37:	ff d0                	callq  *%rax
  8004215c39:	85 c0                	test   %eax,%eax
  8004215c3b:	0f 85 d8 00 00 00    	jne    8004215d19 <read_section_headers+0x389>
  8004215c41:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c44:	48 98                	cltq   
  8004215c46:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c4d:	ff 
  8004215c4e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215c52:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c55:	48 98                	cltq   
  8004215c57:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c5e:	ff 
  8004215c5f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215c63:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215c6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215c6e:	48 01 c8             	add    %rcx,%rax
  8004215c71:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215c78:	48 89 c7             	mov    %rax,%rdi
  8004215c7b:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  8004215c82:	00 00 00 
  8004215c85:	ff d0                	callq  *%rax
  8004215c87:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c8a:	48 98                	cltq   
  8004215c8c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c93:	ff 
  8004215c94:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215c98:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c9b:	48 98                	cltq   
  8004215c9d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ca4:	ff 
  8004215ca5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ca9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004215cad:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215cb1:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215cb7:	48 29 c2             	sub    %rax,%rdx
  8004215cba:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215cbe:	48 01 c2             	add    %rax,%rdx
  8004215cc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215cc5:	48 01 c2             	add    %rax,%rdx
  8004215cc8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ccf:	00 00 00 
  8004215cd2:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215cd6:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215cdd:	00 00 00 
  8004215ce0:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215ce4:	48 89 c2             	mov    %rax,%rdx
  8004215ce7:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215cee:	00 00 00 
  8004215cf1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215cf5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cf8:	48 98                	cltq   
  8004215cfa:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d01:	ff 
  8004215d02:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215d06:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d0d:	00 00 00 
  8004215d10:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215d14:	e9 96 03 00 00       	jmpq   80042160af <read_section_headers+0x71f>
  8004215d19:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215d1d:	48 be d7 b0 21 04 80 	movabs $0x800421b0d7,%rsi
  8004215d24:	00 00 00 
  8004215d27:	48 89 c7             	mov    %rax,%rdi
  8004215d2a:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215d31:	00 00 00 
  8004215d34:	ff d0                	callq  *%rax
  8004215d36:	85 c0                	test   %eax,%eax
  8004215d38:	0f 85 de 00 00 00    	jne    8004215e1c <read_section_headers+0x48c>
  8004215d3e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d41:	48 98                	cltq   
  8004215d43:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d4a:	ff 
  8004215d4b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d4f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d52:	48 98                	cltq   
  8004215d54:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d5b:	ff 
  8004215d5c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215d60:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215d67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215d6b:	48 01 c8             	add    %rcx,%rax
  8004215d6e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215d75:	48 89 c7             	mov    %rax,%rdi
  8004215d78:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  8004215d7f:	00 00 00 
  8004215d82:	ff d0                	callq  *%rax
  8004215d84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d87:	48 98                	cltq   
  8004215d89:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d90:	ff 
  8004215d91:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d95:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d98:	48 98                	cltq   
  8004215d9a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215da1:	ff 
  8004215da2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215da6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215dad:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215db4:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215dba:	48 29 c2             	sub    %rax,%rdx
  8004215dbd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215dc1:	48 01 c2             	add    %rax,%rdx
  8004215dc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215dc8:	48 01 c2             	add    %rax,%rdx
  8004215dcb:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215dd2:	00 00 00 
  8004215dd5:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215dd9:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215de0:	00 00 00 
  8004215de3:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215de7:	48 89 c2             	mov    %rax,%rdx
  8004215dea:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215df1:	00 00 00 
  8004215df4:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215df8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215dfb:	48 98                	cltq   
  8004215dfd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e04:	ff 
  8004215e05:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215e09:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e10:	00 00 00 
  8004215e13:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215e17:	e9 93 02 00 00       	jmpq   80042160af <read_section_headers+0x71f>
  8004215e1c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215e20:	48 be ef b0 21 04 80 	movabs $0x800421b0ef,%rsi
  8004215e27:	00 00 00 
  8004215e2a:	48 89 c7             	mov    %rax,%rdi
  8004215e2d:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215e34:	00 00 00 
  8004215e37:	ff d0                	callq  *%rax
  8004215e39:	85 c0                	test   %eax,%eax
  8004215e3b:	0f 85 de 00 00 00    	jne    8004215f1f <read_section_headers+0x58f>
  8004215e41:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e44:	48 98                	cltq   
  8004215e46:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e4d:	ff 
  8004215e4e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215e52:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e55:	48 98                	cltq   
  8004215e57:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e5e:	ff 
  8004215e5f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215e63:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215e6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215e6e:	48 01 c8             	add    %rcx,%rax
  8004215e71:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215e78:	48 89 c7             	mov    %rax,%rdi
  8004215e7b:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  8004215e82:	00 00 00 
  8004215e85:	ff d0                	callq  *%rax
  8004215e87:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e8a:	48 98                	cltq   
  8004215e8c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e93:	ff 
  8004215e94:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215e98:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e9b:	48 98                	cltq   
  8004215e9d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ea4:	ff 
  8004215ea5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ea9:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004215eb0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004215eb7:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215ebd:	48 29 c2             	sub    %rax,%rdx
  8004215ec0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215ec4:	48 01 c2             	add    %rax,%rdx
  8004215ec7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215ecb:	48 01 c2             	add    %rax,%rdx
  8004215ece:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ed5:	00 00 00 
  8004215ed8:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004215edc:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ee3:	00 00 00 
  8004215ee6:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004215eea:	48 89 c2             	mov    %rax,%rdx
  8004215eed:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ef4:	00 00 00 
  8004215ef7:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215efb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215efe:	48 98                	cltq   
  8004215f00:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f07:	ff 
  8004215f08:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215f0c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f13:	00 00 00 
  8004215f16:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215f1a:	e9 90 01 00 00       	jmpq   80042160af <read_section_headers+0x71f>
  8004215f1f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215f23:	48 be e5 b0 21 04 80 	movabs $0x800421b0e5,%rsi
  8004215f2a:	00 00 00 
  8004215f2d:	48 89 c7             	mov    %rax,%rdi
  8004215f30:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215f37:	00 00 00 
  8004215f3a:	ff d0                	callq  *%rax
  8004215f3c:	85 c0                	test   %eax,%eax
  8004215f3e:	75 65                	jne    8004215fa5 <read_section_headers+0x615>
  8004215f40:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f43:	48 98                	cltq   
  8004215f45:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f4c:	ff 
  8004215f4d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215f51:	48 89 c2             	mov    %rax,%rdx
  8004215f54:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f5b:	00 00 00 
  8004215f5e:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004215f62:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f69:	00 00 00 
  8004215f6c:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004215f70:	48 89 c2             	mov    %rax,%rdx
  8004215f73:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f7a:	00 00 00 
  8004215f7d:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215f81:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f84:	48 98                	cltq   
  8004215f86:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f8d:	ff 
  8004215f8e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215f92:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f99:	00 00 00 
  8004215f9c:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004215fa0:	e9 0a 01 00 00       	jmpq   80042160af <read_section_headers+0x71f>
  8004215fa5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215fa9:	48 be fb b0 21 04 80 	movabs $0x800421b0fb,%rsi
  8004215fb0:	00 00 00 
  8004215fb3:	48 89 c7             	mov    %rax,%rdi
  8004215fb6:	48 b8 39 fe 20 04 80 	movabs $0x800420fe39,%rax
  8004215fbd:	00 00 00 
  8004215fc0:	ff d0                	callq  *%rax
  8004215fc2:	85 c0                	test   %eax,%eax
  8004215fc4:	0f 85 e5 00 00 00    	jne    80042160af <read_section_headers+0x71f>
  8004215fca:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fcd:	48 98                	cltq   
  8004215fcf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fd6:	ff 
  8004215fd7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215fdb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fde:	48 98                	cltq   
  8004215fe0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fe7:	ff 
  8004215fe8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215fec:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215ff3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215ff7:	48 01 c8             	add    %rcx,%rax
  8004215ffa:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216001:	48 89 c7             	mov    %rax,%rdi
  8004216004:	48 b8 cf 60 21 04 80 	movabs $0x80042160cf,%rax
  800421600b:	00 00 00 
  800421600e:	ff d0                	callq  *%rax
  8004216010:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216013:	48 98                	cltq   
  8004216015:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421601c:	ff 
  800421601d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216021:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216024:	48 98                	cltq   
  8004216026:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421602d:	ff 
  800421602e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216032:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216039:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216040:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216046:	48 29 c2             	sub    %rax,%rdx
  8004216049:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421604d:	48 01 c2             	add    %rax,%rdx
  8004216050:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216054:	48 01 c2             	add    %rax,%rdx
  8004216057:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421605e:	00 00 00 
  8004216061:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216068:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421606f:	00 00 00 
  8004216072:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216079:	48 89 c2             	mov    %rax,%rdx
  800421607c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216083:	00 00 00 
  8004216086:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800421608d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216090:	48 98                	cltq   
  8004216092:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216099:	ff 
  800421609a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421609e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160a5:	00 00 00 
  80042160a8:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042160af:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042160b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160b6:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042160b9:	0f 8c f0 fa ff ff    	jl     8004215baf <read_section_headers+0x21f>
  80042160bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042160c3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042160ca:	48 01 d0             	add    %rdx,%rax
  80042160cd:	c9                   	leaveq 
  80042160ce:	c3                   	retq   

00000080042160cf <readseg>:
  80042160cf:	55                   	push   %rbp
  80042160d0:	48 89 e5             	mov    %rsp,%rbp
  80042160d3:	48 83 ec 30          	sub    $0x30,%rsp
  80042160d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042160db:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042160df:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042160e3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042160e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042160eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042160ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042160f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042160f7:	48 01 d0             	add    %rdx,%rax
  80042160fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042160fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216102:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216107:	48 85 c0             	test   %rax,%rax
  800421610a:	74 35                	je     8004216141 <readseg+0x72>
  800421610c:	48 b9 45 b1 21 04 80 	movabs $0x800421b145,%rcx
  8004216113:	00 00 00 
  8004216116:	48 ba 1f b1 21 04 80 	movabs $0x800421b11f,%rdx
  800421611d:	00 00 00 
  8004216120:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216125:	48 bf 34 b1 21 04 80 	movabs $0x800421b134,%rdi
  800421612c:	00 00 00 
  800421612f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216134:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421613b:	00 00 00 
  800421613e:	41 ff d0             	callq  *%r8
  8004216141:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216148:	ff 
  8004216149:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421614d:	48 c1 e8 09          	shr    $0x9,%rax
  8004216151:	48 83 c0 01          	add    $0x1,%rax
  8004216155:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216159:	eb 3c                	jmp    8004216197 <readseg+0xc8>
  800421615b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421615f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216163:	48 89 d6             	mov    %rdx,%rsi
  8004216166:	48 89 c7             	mov    %rax,%rdi
  8004216169:	48 b8 5f 62 21 04 80 	movabs $0x800421625f,%rax
  8004216170:	00 00 00 
  8004216173:	ff d0                	callq  *%rax
  8004216175:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  800421617c:	00 
  800421617d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216181:	48 8b 00             	mov    (%rax),%rax
  8004216184:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  800421618b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421618f:	48 89 10             	mov    %rdx,(%rax)
  8004216192:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421619b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421619f:	72 ba                	jb     800421615b <readseg+0x8c>
  80042161a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042161a5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042161aa:	48 89 c2             	mov    %rax,%rdx
  80042161ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042161b1:	48 01 d0             	add    %rdx,%rax
  80042161b4:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  80042161ba:	76 2f                	jbe    80042161eb <readseg+0x11c>
  80042161bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042161c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042161c4:	48 89 d6             	mov    %rdx,%rsi
  80042161c7:	48 89 c7             	mov    %rax,%rdi
  80042161ca:	48 b8 5f 62 21 04 80 	movabs $0x800421625f,%rax
  80042161d1:	00 00 00 
  80042161d4:	ff d0                	callq  *%rax
  80042161d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161da:	48 8b 00             	mov    (%rax),%rax
  80042161dd:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042161e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161e8:	48 89 10             	mov    %rdx,(%rax)
  80042161eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161ef:	48 8b 00             	mov    (%rax),%rax
  80042161f2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042161f7:	48 85 c0             	test   %rax,%rax
  80042161fa:	74 35                	je     8004216231 <readseg+0x162>
  80042161fc:	48 b9 58 b1 21 04 80 	movabs $0x800421b158,%rcx
  8004216203:	00 00 00 
  8004216206:	48 ba 1f b1 21 04 80 	movabs $0x800421b11f,%rdx
  800421620d:	00 00 00 
  8004216210:	be da 00 00 00       	mov    $0xda,%esi
  8004216215:	48 bf 34 b1 21 04 80 	movabs $0x800421b134,%rdi
  800421621c:	00 00 00 
  800421621f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216224:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421622b:	00 00 00 
  800421622e:	41 ff d0             	callq  *%r8
  8004216231:	c9                   	leaveq 
  8004216232:	c3                   	retq   

0000008004216233 <waitdisk>:
  8004216233:	55                   	push   %rbp
  8004216234:	48 89 e5             	mov    %rsp,%rbp
  8004216237:	48 83 ec 10          	sub    $0x10,%rsp
  800421623b:	90                   	nop
  800421623c:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216243:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216246:	89 c2                	mov    %eax,%edx
  8004216248:	ec                   	in     (%dx),%al
  8004216249:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800421624c:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216250:	0f b6 c0             	movzbl %al,%eax
  8004216253:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216258:	83 f8 40             	cmp    $0x40,%eax
  800421625b:	75 df                	jne    800421623c <waitdisk+0x9>
  800421625d:	c9                   	leaveq 
  800421625e:	c3                   	retq   

000000800421625f <readsect>:
  800421625f:	55                   	push   %rbp
  8004216260:	48 89 e5             	mov    %rsp,%rbp
  8004216263:	48 83 ec 60          	sub    $0x60,%rsp
  8004216267:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421626b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421626f:	48 b8 33 62 21 04 80 	movabs $0x8004216233,%rax
  8004216276:	00 00 00 
  8004216279:	ff d0                	callq  *%rax
  800421627b:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216282:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216286:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800421628a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421628d:	ee                   	out    %al,(%dx)
  800421628e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216292:	0f b6 c0             	movzbl %al,%eax
  8004216295:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  800421629c:	88 45 f3             	mov    %al,-0xd(%rbp)
  800421629f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042162a3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042162a6:	ee                   	out    %al,(%dx)
  80042162a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042162ab:	48 c1 e8 08          	shr    $0x8,%rax
  80042162af:	0f b6 c0             	movzbl %al,%eax
  80042162b2:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  80042162b9:	88 45 eb             	mov    %al,-0x15(%rbp)
  80042162bc:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042162c0:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042162c3:	ee                   	out    %al,(%dx)
  80042162c4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042162c8:	48 c1 e8 10          	shr    $0x10,%rax
  80042162cc:	0f b6 c0             	movzbl %al,%eax
  80042162cf:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  80042162d6:	88 45 e3             	mov    %al,-0x1d(%rbp)
  80042162d9:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042162dd:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042162e0:	ee                   	out    %al,(%dx)
  80042162e1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042162e5:	48 c1 e8 18          	shr    $0x18,%rax
  80042162e9:	83 c8 e0             	or     $0xffffffe0,%eax
  80042162ec:	0f b6 c0             	movzbl %al,%eax
  80042162ef:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  80042162f6:	88 45 db             	mov    %al,-0x25(%rbp)
  80042162f9:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042162fd:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216300:	ee                   	out    %al,(%dx)
  8004216301:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216308:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800421630c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216310:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216313:	ee                   	out    %al,(%dx)
  8004216314:	48 b8 33 62 21 04 80 	movabs $0x8004216233,%rax
  800421631b:	00 00 00 
  800421631e:	ff d0                	callq  *%rax
  8004216320:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216327:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421632b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421632f:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216336:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216339:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421633d:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216340:	48 89 ce             	mov    %rcx,%rsi
  8004216343:	48 89 f7             	mov    %rsi,%rdi
  8004216346:	89 c1                	mov    %eax,%ecx
  8004216348:	fc                   	cld    
  8004216349:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  800421634b:	89 c8                	mov    %ecx,%eax
  800421634d:	48 89 fe             	mov    %rdi,%rsi
  8004216350:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216354:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216357:	c9                   	leaveq 
  8004216358:	c3                   	retq   
  8004216359:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000008004216360 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216360:	fa                   	cli    
	xorw    %ax, %ax
  8004216361:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216363:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216365:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216367:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216369:	0f 01 16             	lgdt   (%rsi)
  800421636c:	e0 70                	loopne 80042163de <start64+0x10>
	movl    %cr0, %eax
  800421636e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216371:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216375:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216378:	ea                   	(bad)  
  8004216379:	1d                   	.byte 0x1d
  800421637a:	70 08                	jo     8004216384 <start32+0x7>
	...

000000800421637d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  800421637d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216381:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216383:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216385:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216387:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421638b:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421638d:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
  800421638f:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif

	movl %eax,%cr4
  8004216394:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216397:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421d45e <bootstack+0x145e>
	movl    %cr0, %eax
  800421639e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042163a1:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  80042163a4:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  80042163a7:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  80042163ac:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  80042163af:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  80042163b4:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  80042163b6:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  80042163ba:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  80042163bc:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  80042163bf:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  80042163c4:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  80042163c7:	ea                   	(bad)  
  80042163c8:	6e                   	outsb  %ds:(%rsi),(%dx)
  80042163c9:	70 00                	jo     80042163cb <start32+0x4e>
  80042163cb:	00 08                	add    %cl,(%rax)
	...

00000080042163ce <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  80042163ce:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042163d2:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042163d4:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042163d6:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042163d8:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042163dc:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042163de:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  80042163e0:	48 a1 d8 b5 69 04 80 	movabs 0x800469b5d8,%rax
  80042163e7:	00 00 00 
	movq    %rax,%rsp
  80042163ea:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  80042163ed:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  80042163f4:	48 b8 1e 05 20 04 80 	movabs $0x800420051e,%rax
  80042163fb:	00 00 00 
	call    *%rax
  80042163fe:	ff d0                	callq  *%rax

0000008004216400 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216400:	eb fe                	jmp    8004216400 <spin>
  8004216402:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216408 <gdt>:
	...
  8004216410:	ff                   	(bad)  
  8004216411:	ff 00                	incl   (%rax)
  8004216413:	00 00                	add    %al,(%rax)
  8004216415:	9a                   	(bad)  
  8004216416:	af                   	scas   %es:(%rdi),%eax
  8004216417:	00 ff                	add    %bh,%bh
  8004216419:	ff 00                	incl   (%rax)
  800421641b:	00 00                	add    %al,(%rax)
  800421641d:	92                   	xchg   %eax,%edx
  800421641e:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216420 <gdtdesc>:
  8004216420:	17                   	(bad)  
  8004216421:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004216427:	90                   	nop

0000008004216428 <gdt32>:
	...
  8004216430:	ff                   	(bad)  
  8004216431:	ff 00                	incl   (%rax)
  8004216433:	00 00                	add    %al,(%rax)
  8004216435:	9a                   	(bad)  
  8004216436:	cf                   	iret   
  8004216437:	00 ff                	add    %bh,%bh
  8004216439:	ff 00                	incl   (%rax)
  800421643b:	00 00                	add    %al,(%rax)
  800421643d:	92                   	xchg   %eax,%edx
  800421643e:	cf                   	iret   
	...

0000008004216440 <gdt32desc>:
  8004216440:	17                   	(bad)  
  8004216441:	00 c8                	add    %cl,%al
  8004216443:	70 00                	jo     8004216445 <gdt32desc+0x5>
	...

0000008004216446 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004216446:	90                   	nop

0000008004216447 <sum>:
  8004216447:	55                   	push   %rbp
  8004216448:	48 89 e5             	mov    %rsp,%rbp
  800421644b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421644f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216453:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004216456:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421645d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004216464:	eb 1a                	jmp    8004216480 <sum+0x39>
  8004216466:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216469:	48 63 d0             	movslq %eax,%rdx
  800421646c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216470:	48 01 d0             	add    %rdx,%rax
  8004216473:	0f b6 00             	movzbl (%rax),%eax
  8004216476:	0f b6 c0             	movzbl %al,%eax
  8004216479:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421647c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004216480:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216483:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216486:	7c de                	jl     8004216466 <sum+0x1f>
  8004216488:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421648b:	c9                   	leaveq 
  800421648c:	c3                   	retq   

000000800421648d <mpsearch1>:
  800421648d:	55                   	push   %rbp
  800421648e:	48 89 e5             	mov    %rsp,%rbp
  8004216491:	48 83 ec 40          	sub    $0x40,%rsp
  8004216495:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004216499:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421649c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042164a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042164a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164a8:	48 c1 e8 0c          	shr    $0xc,%rax
  80042164ac:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042164af:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042164b2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042164b9:	00 00 00 
  80042164bc:	48 8b 00             	mov    (%rax),%rax
  80042164bf:	48 39 c2             	cmp    %rax,%rdx
  80042164c2:	72 32                	jb     80042164f6 <mpsearch1+0x69>
  80042164c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164c8:	48 89 c1             	mov    %rax,%rcx
  80042164cb:	48 ba 78 b1 21 04 80 	movabs $0x800421b178,%rdx
  80042164d2:	00 00 00 
  80042164d5:	be 74 00 00 00       	mov    $0x74,%esi
  80042164da:	48 bf 9b b1 21 04 80 	movabs $0x800421b19b,%rdi
  80042164e1:	00 00 00 
  80042164e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042164e9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042164f0:	00 00 00 
  80042164f3:	41 ff d0             	callq  *%r8
  80042164f6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042164fd:	00 00 00 
  8004216500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216504:	48 01 d0             	add    %rdx,%rax
  8004216507:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421650b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421650e:	48 63 d0             	movslq %eax,%rdx
  8004216511:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216515:	48 01 d0             	add    %rdx,%rax
  8004216518:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421651c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216520:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216524:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004216527:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421652a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216531:	00 00 00 
  8004216534:	48 8b 00             	mov    (%rax),%rax
  8004216537:	48 39 c2             	cmp    %rax,%rdx
  800421653a:	72 32                	jb     800421656e <mpsearch1+0xe1>
  800421653c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216540:	48 89 c1             	mov    %rax,%rcx
  8004216543:	48 ba 78 b1 21 04 80 	movabs $0x800421b178,%rdx
  800421654a:	00 00 00 
  800421654d:	be 74 00 00 00       	mov    $0x74,%esi
  8004216552:	48 bf 9b b1 21 04 80 	movabs $0x800421b19b,%rdi
  8004216559:	00 00 00 
  800421655c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216561:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216568:	00 00 00 
  800421656b:	41 ff d0             	callq  *%r8
  800421656e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216575:	00 00 00 
  8004216578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421657c:	48 01 d0             	add    %rdx,%rax
  800421657f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216583:	eb 4d                	jmp    80042165d2 <mpsearch1+0x145>
  8004216585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216589:	ba 04 00 00 00       	mov    $0x4,%edx
  800421658e:	48 be ae b1 21 04 80 	movabs $0x800421b1ae,%rsi
  8004216595:	00 00 00 
  8004216598:	48 89 c7             	mov    %rax,%rdi
  800421659b:	48 b8 46 01 21 04 80 	movabs $0x8004210146,%rax
  80042165a2:	00 00 00 
  80042165a5:	ff d0                	callq  *%rax
  80042165a7:	85 c0                	test   %eax,%eax
  80042165a9:	75 22                	jne    80042165cd <mpsearch1+0x140>
  80042165ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165af:	be 10 00 00 00       	mov    $0x10,%esi
  80042165b4:	48 89 c7             	mov    %rax,%rdi
  80042165b7:	48 b8 47 64 21 04 80 	movabs $0x8004216447,%rax
  80042165be:	00 00 00 
  80042165c1:	ff d0                	callq  *%rax
  80042165c3:	84 c0                	test   %al,%al
  80042165c5:	75 06                	jne    80042165cd <mpsearch1+0x140>
  80042165c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165cb:	eb 14                	jmp    80042165e1 <mpsearch1+0x154>
  80042165cd:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  80042165d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165d6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042165da:	72 a9                	jb     8004216585 <mpsearch1+0xf8>
  80042165dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042165e1:	c9                   	leaveq 
  80042165e2:	c3                   	retq   

00000080042165e3 <mpsearch>:
  80042165e3:	55                   	push   %rbp
  80042165e4:	48 89 e5             	mov    %rsp,%rbp
  80042165e7:	48 83 ec 30          	sub    $0x30,%rsp
  80042165eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042165f2:	00 
  80042165f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165f7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042165fb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042165fe:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216601:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216608:	00 00 00 
  800421660b:	48 8b 00             	mov    (%rax),%rax
  800421660e:	48 39 c2             	cmp    %rax,%rdx
  8004216611:	72 32                	jb     8004216645 <mpsearch+0x62>
  8004216613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216617:	48 89 c1             	mov    %rax,%rcx
  800421661a:	48 ba 78 b1 21 04 80 	movabs $0x800421b178,%rdx
  8004216621:	00 00 00 
  8004216624:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004216629:	48 bf 9b b1 21 04 80 	movabs $0x800421b19b,%rdi
  8004216630:	00 00 00 
  8004216633:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216638:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421663f:	00 00 00 
  8004216642:	41 ff d0             	callq  *%r8
  8004216645:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421664c:	00 00 00 
  800421664f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216653:	48 01 d0             	add    %rdx,%rax
  8004216656:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421665a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421665e:	48 83 c0 0e          	add    $0xe,%rax
  8004216662:	0f b7 00             	movzwl (%rax),%eax
  8004216665:	0f b7 c0             	movzwl %ax,%eax
  8004216668:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421666b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421666f:	74 2c                	je     800421669d <mpsearch+0xba>
  8004216671:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004216675:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216678:	be 00 04 00 00       	mov    $0x400,%esi
  800421667d:	48 89 c7             	mov    %rax,%rdi
  8004216680:	48 b8 8d 64 21 04 80 	movabs $0x800421648d,%rax
  8004216687:	00 00 00 
  800421668a:	ff d0                	callq  *%rax
  800421668c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216690:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216695:	74 49                	je     80042166e0 <mpsearch+0xfd>
  8004216697:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421669b:	eb 59                	jmp    80042166f6 <mpsearch+0x113>
  800421669d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042166a1:	48 83 c0 13          	add    $0x13,%rax
  80042166a5:	0f b7 00             	movzwl (%rax),%eax
  80042166a8:	0f b7 c0             	movzwl %ax,%eax
  80042166ab:	c1 e0 0a             	shl    $0xa,%eax
  80042166ae:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042166b1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042166b4:	2d 00 04 00 00       	sub    $0x400,%eax
  80042166b9:	89 c0                	mov    %eax,%eax
  80042166bb:	be 00 04 00 00       	mov    $0x400,%esi
  80042166c0:	48 89 c7             	mov    %rax,%rdi
  80042166c3:	48 b8 8d 64 21 04 80 	movabs $0x800421648d,%rax
  80042166ca:	00 00 00 
  80042166cd:	ff d0                	callq  *%rax
  80042166cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042166d3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042166d8:	74 06                	je     80042166e0 <mpsearch+0xfd>
  80042166da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042166de:	eb 16                	jmp    80042166f6 <mpsearch+0x113>
  80042166e0:	be 00 00 01 00       	mov    $0x10000,%esi
  80042166e5:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  80042166ea:	48 b8 8d 64 21 04 80 	movabs $0x800421648d,%rax
  80042166f1:	00 00 00 
  80042166f4:	ff d0                	callq  *%rax
  80042166f6:	c9                   	leaveq 
  80042166f7:	c3                   	retq   

00000080042166f8 <mpconfig>:
  80042166f8:	55                   	push   %rbp
  80042166f9:	48 89 e5             	mov    %rsp,%rbp
  80042166fc:	48 83 ec 30          	sub    $0x30,%rsp
  8004216700:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004216704:	48 b8 e3 65 21 04 80 	movabs $0x80042165e3,%rax
  800421670b:	00 00 00 
  800421670e:	ff d0                	callq  *%rax
  8004216710:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216714:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004216719:	75 0a                	jne    8004216725 <mpconfig+0x2d>
  800421671b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216720:	e9 f6 01 00 00       	jmpq   800421691b <mpconfig+0x223>
  8004216725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216729:	8b 40 04             	mov    0x4(%rax),%eax
  800421672c:	85 c0                	test   %eax,%eax
  800421672e:	74 0c                	je     800421673c <mpconfig+0x44>
  8004216730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216734:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004216738:	84 c0                	test   %al,%al
  800421673a:	74 25                	je     8004216761 <mpconfig+0x69>
  800421673c:	48 bf b8 b1 21 04 80 	movabs $0x800421b1b8,%rdi
  8004216743:	00 00 00 
  8004216746:	b8 00 00 00 00       	mov    $0x0,%eax
  800421674b:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216752:	00 00 00 
  8004216755:	ff d2                	callq  *%rdx
  8004216757:	b8 00 00 00 00       	mov    $0x0,%eax
  800421675c:	e9 ba 01 00 00       	jmpq   800421691b <mpconfig+0x223>
  8004216761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216765:	8b 40 04             	mov    0x4(%rax),%eax
  8004216768:	89 c0                	mov    %eax,%eax
  800421676a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421676e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216772:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216776:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004216779:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421677c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216783:	00 00 00 
  8004216786:	48 8b 00             	mov    (%rax),%rax
  8004216789:	48 39 c2             	cmp    %rax,%rdx
  800421678c:	72 32                	jb     80042167c0 <mpconfig+0xc8>
  800421678e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216792:	48 89 c1             	mov    %rax,%rcx
  8004216795:	48 ba 78 b1 21 04 80 	movabs $0x800421b178,%rdx
  800421679c:	00 00 00 
  800421679f:	be ad 00 00 00       	mov    $0xad,%esi
  80042167a4:	48 bf 9b b1 21 04 80 	movabs $0x800421b19b,%rdi
  80042167ab:	00 00 00 
  80042167ae:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167b3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042167ba:	00 00 00 
  80042167bd:	41 ff d0             	callq  *%r8
  80042167c0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042167c7:	00 00 00 
  80042167ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167ce:	48 01 d0             	add    %rdx,%rax
  80042167d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042167d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042167d9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042167de:	48 be e5 b1 21 04 80 	movabs $0x800421b1e5,%rsi
  80042167e5:	00 00 00 
  80042167e8:	48 89 c7             	mov    %rax,%rdi
  80042167eb:	48 b8 46 01 21 04 80 	movabs $0x8004210146,%rax
  80042167f2:	00 00 00 
  80042167f5:	ff d0                	callq  *%rax
  80042167f7:	85 c0                	test   %eax,%eax
  80042167f9:	74 25                	je     8004216820 <mpconfig+0x128>
  80042167fb:	48 bf f0 b1 21 04 80 	movabs $0x800421b1f0,%rdi
  8004216802:	00 00 00 
  8004216805:	b8 00 00 00 00       	mov    $0x0,%eax
  800421680a:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216811:	00 00 00 
  8004216814:	ff d2                	callq  *%rdx
  8004216816:	b8 00 00 00 00       	mov    $0x0,%eax
  800421681b:	e9 fb 00 00 00       	jmpq   800421691b <mpconfig+0x223>
  8004216820:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216824:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004216828:	0f b7 d0             	movzwl %ax,%edx
  800421682b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421682f:	89 d6                	mov    %edx,%esi
  8004216831:	48 89 c7             	mov    %rax,%rdi
  8004216834:	48 b8 47 64 21 04 80 	movabs $0x8004216447,%rax
  800421683b:	00 00 00 
  800421683e:	ff d0                	callq  *%rax
  8004216840:	84 c0                	test   %al,%al
  8004216842:	74 25                	je     8004216869 <mpconfig+0x171>
  8004216844:	48 bf 28 b2 21 04 80 	movabs $0x800421b228,%rdi
  800421684b:	00 00 00 
  800421684e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216853:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800421685a:	00 00 00 
  800421685d:	ff d2                	callq  *%rdx
  800421685f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216864:	e9 b2 00 00 00       	jmpq   800421691b <mpconfig+0x223>
  8004216869:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421686d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216871:	3c 01                	cmp    $0x1,%al
  8004216873:	74 3b                	je     80042168b0 <mpconfig+0x1b8>
  8004216875:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216879:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421687d:	3c 04                	cmp    $0x4,%al
  800421687f:	74 2f                	je     80042168b0 <mpconfig+0x1b8>
  8004216881:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216885:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216889:	0f b6 c0             	movzbl %al,%eax
  800421688c:	89 c6                	mov    %eax,%esi
  800421688e:	48 bf 50 b2 21 04 80 	movabs $0x800421b250,%rdi
  8004216895:	00 00 00 
  8004216898:	b8 00 00 00 00       	mov    $0x0,%eax
  800421689d:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  80042168a4:	00 00 00 
  80042168a7:	ff d2                	callq  *%rdx
  80042168a9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168ae:	eb 6b                	jmp    800421691b <mpconfig+0x223>
  80042168b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168b4:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042168b8:	0f b7 c0             	movzwl %ax,%eax
  80042168bb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042168bf:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042168c3:	0f b7 ca             	movzwl %dx,%ecx
  80042168c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042168ca:	48 01 ca             	add    %rcx,%rdx
  80042168cd:	89 c6                	mov    %eax,%esi
  80042168cf:	48 89 d7             	mov    %rdx,%rdi
  80042168d2:	48 b8 47 64 21 04 80 	movabs $0x8004216447,%rax
  80042168d9:	00 00 00 
  80042168dc:	ff d0                	callq  *%rax
  80042168de:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042168e2:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  80042168e6:	38 d0                	cmp    %dl,%al
  80042168e8:	74 22                	je     800421690c <mpconfig+0x214>
  80042168ea:	48 bf 70 b2 21 04 80 	movabs $0x800421b270,%rdi
  80042168f1:	00 00 00 
  80042168f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168f9:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216900:	00 00 00 
  8004216903:	ff d2                	callq  *%rdx
  8004216905:	b8 00 00 00 00       	mov    $0x0,%eax
  800421690a:	eb 0f                	jmp    800421691b <mpconfig+0x223>
  800421690c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216910:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216914:	48 89 10             	mov    %rdx,(%rax)
  8004216917:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421691b:	c9                   	leaveq 
  800421691c:	c3                   	retq   

000000800421691d <mp_init>:
  800421691d:	55                   	push   %rbp
  800421691e:	48 89 e5             	mov    %rsp,%rbp
  8004216921:	53                   	push   %rbx
  8004216922:	48 83 ec 58          	sub    $0x58,%rsp
  8004216926:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  800421692d:	00 00 00 
  8004216930:	48 bb 20 d0 69 04 80 	movabs $0x800469d020,%rbx
  8004216937:	00 00 00 
  800421693a:	48 89 18             	mov    %rbx,(%rax)
  800421693d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004216941:	48 89 c7             	mov    %rax,%rdi
  8004216944:	48 b8 f8 66 21 04 80 	movabs $0x80042166f8,%rax
  800421694b:	00 00 00 
  800421694e:	ff d0                	callq  *%rax
  8004216950:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216954:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216959:	75 05                	jne    8004216960 <mp_init+0x43>
  800421695b:	e9 d2 03 00 00       	jmpq   8004216d32 <mp_init+0x415>
  8004216960:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216967:	00 00 00 
  800421696a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216970:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216974:	8b 40 24             	mov    0x24(%rax),%eax
  8004216977:	89 c2                	mov    %eax,%edx
  8004216979:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216980:	00 00 00 
  8004216983:	48 89 10             	mov    %rdx,(%rax)
  8004216986:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421698a:	48 83 c0 2c          	add    $0x2c,%rax
  800421698e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216992:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216999:	e9 17 02 00 00       	jmpq   8004216bb5 <mp_init+0x298>
  800421699e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042169a2:	0f b6 00             	movzbl (%rax),%eax
  80042169a5:	0f b6 c0             	movzbl %al,%eax
  80042169a8:	85 c0                	test   %eax,%eax
  80042169aa:	74 16                	je     80042169c2 <mp_init+0xa5>
  80042169ac:	85 c0                	test   %eax,%eax
  80042169ae:	0f 88 b8 01 00 00    	js     8004216b6c <mp_init+0x24f>
  80042169b4:	83 f8 04             	cmp    $0x4,%eax
  80042169b7:	0f 8f af 01 00 00    	jg     8004216b6c <mp_init+0x24f>
  80042169bd:	e9 a3 01 00 00       	jmpq   8004216b65 <mp_init+0x248>
  80042169c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042169c6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042169ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042169ce:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042169d2:	0f b6 c0             	movzbl %al,%eax
  80042169d5:	83 e0 02             	and    $0x2,%eax
  80042169d8:	85 c0                	test   %eax,%eax
  80042169da:	74 51                	je     8004216a2d <mp_init+0x110>
  80042169dc:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  80042169e3:	00 00 00 
  80042169e6:	8b 00                	mov    (%rax),%eax
  80042169e8:	48 98                	cltq   
  80042169ea:	48 c1 e0 03          	shl    $0x3,%rax
  80042169ee:	48 89 c2             	mov    %rax,%rdx
  80042169f1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042169f5:	48 01 d0             	add    %rdx,%rax
  80042169f8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042169ff:	00 00 00 
  8004216a02:	48 01 c2             	add    %rax,%rdx
  8004216a05:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216a0c:	00 00 00 
  8004216a0f:	48 89 10             	mov    %rdx,(%rax)
  8004216a12:	48 bf 9d b2 21 04 80 	movabs $0x800421b29d,%rdi
  8004216a19:	00 00 00 
  8004216a1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a21:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216a28:	00 00 00 
  8004216a2b:	ff d2                	callq  *%rdx
  8004216a2d:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216a34:	00 00 00 
  8004216a37:	8b 00                	mov    (%rax),%eax
  8004216a39:	83 f8 03             	cmp    $0x3,%eax
  8004216a3c:	0f 8f f4 00 00 00    	jg     8004216b36 <mp_init+0x219>
  8004216a42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a46:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004216a4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a4e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216a52:	0f b6 f0             	movzbl %al,%esi
  8004216a55:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a59:	8b 78 08             	mov    0x8(%rax),%edi
  8004216a5c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a60:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004216a64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a68:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004216a6c:	0f b6 c8             	movzbl %al,%ecx
  8004216a6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a73:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216a77:	0f b6 d0             	movzbl %al,%edx
  8004216a7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a7e:	0f b6 00             	movzbl (%rax),%eax
  8004216a81:	0f b6 c0             	movzbl %al,%eax
  8004216a84:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004216a89:	89 34 24             	mov    %esi,(%rsp)
  8004216a8c:	41 89 f9             	mov    %edi,%r9d
  8004216a8f:	4d 89 d0             	mov    %r10,%r8
  8004216a92:	89 c6                	mov    %eax,%esi
  8004216a94:	48 bf b0 b2 21 04 80 	movabs $0x800421b2b0,%rdi
  8004216a9b:	00 00 00 
  8004216a9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216aa3:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  8004216aaa:	00 00 00 
  8004216aad:	41 ff d2             	callq  *%r10
  8004216ab0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ab4:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216ab8:	0f b6 c0             	movzbl %al,%eax
  8004216abb:	83 e0 01             	and    $0x1,%eax
  8004216abe:	85 c0                	test   %eax,%eax
  8004216ac0:	74 57                	je     8004216b19 <mp_init+0x1fc>
  8004216ac2:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216ac9:	00 00 00 
  8004216acc:	8b 30                	mov    (%rax),%esi
  8004216ace:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216ad5:	00 00 00 
  8004216ad8:	8b 00                	mov    (%rax),%eax
  8004216ada:	89 c2                	mov    %eax,%edx
  8004216adc:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  8004216ae3:	00 00 00 
  8004216ae6:	48 63 c6             	movslq %esi,%rax
  8004216ae9:	48 c1 e0 03          	shl    $0x3,%rax
  8004216aed:	48 89 c6             	mov    %rax,%rsi
  8004216af0:	48 c1 e6 04          	shl    $0x4,%rsi
  8004216af4:	48 01 f0             	add    %rsi,%rax
  8004216af7:	48 01 c8             	add    %rcx,%rax
  8004216afa:	88 10                	mov    %dl,(%rax)
  8004216afc:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b03:	00 00 00 
  8004216b06:	8b 00                	mov    (%rax),%eax
  8004216b08:	8d 50 01             	lea    0x1(%rax),%edx
  8004216b0b:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b12:	00 00 00 
  8004216b15:	89 10                	mov    %edx,(%rax)
  8004216b17:	eb 45                	jmp    8004216b5e <mp_init+0x241>
  8004216b19:	48 bf 00 b3 21 04 80 	movabs $0x800421b300,%rdi
  8004216b20:	00 00 00 
  8004216b23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b28:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216b2f:	00 00 00 
  8004216b32:	ff d2                	callq  *%rdx
  8004216b34:	eb 28                	jmp    8004216b5e <mp_init+0x241>
  8004216b36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b3a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216b3e:	0f b6 c0             	movzbl %al,%eax
  8004216b41:	89 c6                	mov    %eax,%esi
  8004216b43:	48 bf 30 b3 21 04 80 	movabs $0x800421b330,%rdi
  8004216b4a:	00 00 00 
  8004216b4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b52:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216b59:	00 00 00 
  8004216b5c:	ff d2                	callq  *%rdx
  8004216b5e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004216b63:	eb 4c                	jmp    8004216bb1 <mp_init+0x294>
  8004216b65:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004216b6a:	eb 45                	jmp    8004216bb1 <mp_init+0x294>
  8004216b6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b70:	0f b6 00             	movzbl (%rax),%eax
  8004216b73:	0f b6 c0             	movzbl %al,%eax
  8004216b76:	89 c6                	mov    %eax,%esi
  8004216b78:	48 bf 58 b3 21 04 80 	movabs $0x800421b358,%rdi
  8004216b7f:	00 00 00 
  8004216b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b87:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216b8e:	00 00 00 
  8004216b91:	ff d2                	callq  *%rdx
  8004216b93:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216b9a:	00 00 00 
  8004216b9d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004216ba3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ba7:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216bab:	0f b7 c0             	movzwl %ax,%eax
  8004216bae:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216bb1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216bb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216bb9:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216bbd:	0f b7 c0             	movzwl %ax,%eax
  8004216bc0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216bc3:	0f 87 d5 fd ff ff    	ja     800421699e <mp_init+0x81>
  8004216bc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216bd0:	eb 53                	jmp    8004216c25 <mp_init+0x308>
  8004216bd2:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216bd9:	00 00 00 
  8004216bdc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216bdf:	48 c1 e0 03          	shl    $0x3,%rax
  8004216be3:	48 89 c1             	mov    %rax,%rcx
  8004216be6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216bea:	48 01 c8             	add    %rcx,%rax
  8004216bed:	48 01 d0             	add    %rdx,%rax
  8004216bf0:	48 83 c0 70          	add    $0x70,%rax
  8004216bf4:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004216bf8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216bff:	00 00 00 
  8004216c02:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216c05:	48 c1 e0 03          	shl    $0x3,%rax
  8004216c09:	48 89 c1             	mov    %rax,%rcx
  8004216c0c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216c10:	48 01 c8             	add    %rcx,%rax
  8004216c13:	48 01 d0             	add    %rdx,%rax
  8004216c16:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004216c1a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216c21:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216c25:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004216c29:	76 a7                	jbe    8004216bd2 <mp_init+0x2b5>
  8004216c2b:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216c32:	00 00 00 
  8004216c35:	48 8b 00             	mov    (%rax),%rax
  8004216c38:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004216c3f:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216c46:	00 00 00 
  8004216c49:	8b 00                	mov    (%rax),%eax
  8004216c4b:	85 c0                	test   %eax,%eax
  8004216c4d:	75 41                	jne    8004216c90 <mp_init+0x373>
  8004216c4f:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216c56:	00 00 00 
  8004216c59:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216c5f:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216c66:	00 00 00 
  8004216c69:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216c70:	48 bf 78 b3 21 04 80 	movabs $0x800421b378,%rdi
  8004216c77:	00 00 00 
  8004216c7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c7f:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216c86:	00 00 00 
  8004216c89:	ff d2                	callq  *%rdx
  8004216c8b:	e9 a2 00 00 00       	jmpq   8004216d32 <mp_init+0x415>
  8004216c90:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216c97:	00 00 00 
  8004216c9a:	8b 10                	mov    (%rax),%edx
  8004216c9c:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216ca3:	00 00 00 
  8004216ca6:	48 8b 00             	mov    (%rax),%rax
  8004216ca9:	0f b6 00             	movzbl (%rax),%eax
  8004216cac:	0f b6 c0             	movzbl %al,%eax
  8004216caf:	89 c6                	mov    %eax,%esi
  8004216cb1:	48 bf a4 b3 21 04 80 	movabs $0x800421b3a4,%rdi
  8004216cb8:	00 00 00 
  8004216cbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216cc0:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  8004216cc7:	00 00 00 
  8004216cca:	ff d1                	callq  *%rcx
  8004216ccc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216cd0:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004216cd4:	84 c0                	test   %al,%al
  8004216cd6:	74 5a                	je     8004216d32 <mp_init+0x415>
  8004216cd8:	48 bf c8 b3 21 04 80 	movabs $0x800421b3c8,%rdi
  8004216cdf:	00 00 00 
  8004216ce2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216ce7:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004216cee:	00 00 00 
  8004216cf1:	ff d2                	callq  *%rdx
  8004216cf3:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004216cfa:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216cfe:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004216d02:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216d05:	ee                   	out    %al,(%dx)
  8004216d06:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216d0d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216d10:	89 c2                	mov    %eax,%edx
  8004216d12:	ec                   	in     (%dx),%al
  8004216d13:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004216d16:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004216d1a:	83 c8 01             	or     $0x1,%eax
  8004216d1d:	0f b6 c0             	movzbl %al,%eax
  8004216d20:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004216d27:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216d2a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004216d2e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004216d31:	ee                   	out    %al,(%dx)
  8004216d32:	48 83 c4 58          	add    $0x58,%rsp
  8004216d36:	5b                   	pop    %rbx
  8004216d37:	5d                   	pop    %rbp
  8004216d38:	c3                   	retq   

0000008004216d39 <lapicw>:
  8004216d39:	55                   	push   %rbp
  8004216d3a:	48 89 e5             	mov    %rsp,%rbp
  8004216d3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004216d41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004216d44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004216d47:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216d4e:	00 00 00 
  8004216d51:	48 8b 00             	mov    (%rax),%rax
  8004216d54:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216d57:	48 63 d2             	movslq %edx,%rdx
  8004216d5a:	48 c1 e2 02          	shl    $0x2,%rdx
  8004216d5e:	48 01 c2             	add    %rax,%rdx
  8004216d61:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216d64:	89 02                	mov    %eax,(%rdx)
  8004216d66:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216d6d:	00 00 00 
  8004216d70:	48 8b 00             	mov    (%rax),%rax
  8004216d73:	48 83 c0 20          	add    $0x20,%rax
  8004216d77:	8b 00                	mov    (%rax),%eax
  8004216d79:	c9                   	leaveq 
  8004216d7a:	c3                   	retq   

0000008004216d7b <lapic_init>:
  8004216d7b:	55                   	push   %rbp
  8004216d7c:	48 89 e5             	mov    %rsp,%rbp
  8004216d7f:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216d86:	00 00 00 
  8004216d89:	48 8b 00             	mov    (%rax),%rax
  8004216d8c:	48 85 c0             	test   %rax,%rax
  8004216d8f:	75 05                	jne    8004216d96 <lapic_init+0x1b>
  8004216d91:	e9 da 01 00 00       	jmpq   8004216f70 <lapic_init+0x1f5>
  8004216d96:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216d9d:	00 00 00 
  8004216da0:	48 8b 00             	mov    (%rax),%rax
  8004216da3:	be 00 10 00 00       	mov    $0x1000,%esi
  8004216da8:	48 89 c7             	mov    %rax,%rdi
  8004216dab:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004216db2:	00 00 00 
  8004216db5:	ff d0                	callq  *%rax
  8004216db7:	48 ba 08 e0 6d 04 80 	movabs $0x80046de008,%rdx
  8004216dbe:	00 00 00 
  8004216dc1:	48 89 02             	mov    %rax,(%rdx)
  8004216dc4:	be 27 01 00 00       	mov    $0x127,%esi
  8004216dc9:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004216dce:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216dd5:	00 00 00 
  8004216dd8:	ff d0                	callq  *%rax
  8004216dda:	be 0b 00 00 00       	mov    $0xb,%esi
  8004216ddf:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004216de4:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216deb:	00 00 00 
  8004216dee:	ff d0                	callq  *%rax
  8004216df0:	be 20 00 02 00       	mov    $0x20020,%esi
  8004216df5:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004216dfa:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216e01:	00 00 00 
  8004216e04:	ff d0                	callq  *%rax
  8004216e06:	be 80 96 98 00       	mov    $0x989680,%esi
  8004216e0b:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004216e10:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216e17:	00 00 00 
  8004216e1a:	ff d0                	callq  *%rax
  8004216e1c:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004216e23:	00 00 00 
  8004216e26:	ff d0                	callq  *%rax
  8004216e28:	48 98                	cltq   
  8004216e2a:	48 c1 e0 03          	shl    $0x3,%rax
  8004216e2e:	48 89 c2             	mov    %rax,%rdx
  8004216e31:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216e35:	48 01 d0             	add    %rdx,%rax
  8004216e38:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216e3f:	00 00 00 
  8004216e42:	48 01 c2             	add    %rax,%rdx
  8004216e45:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216e4c:	00 00 00 
  8004216e4f:	48 8b 00             	mov    (%rax),%rax
  8004216e52:	48 39 c2             	cmp    %rax,%rdx
  8004216e55:	74 16                	je     8004216e6d <lapic_init+0xf2>
  8004216e57:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216e5c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004216e61:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216e68:	00 00 00 
  8004216e6b:	ff d0                	callq  *%rax
  8004216e6d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216e72:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004216e77:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216e7e:	00 00 00 
  8004216e81:	ff d0                	callq  *%rax
  8004216e83:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216e8a:	00 00 00 
  8004216e8d:	48 8b 00             	mov    (%rax),%rax
  8004216e90:	48 83 c0 30          	add    $0x30,%rax
  8004216e94:	8b 00                	mov    (%rax),%eax
  8004216e96:	c1 e8 10             	shr    $0x10,%eax
  8004216e99:	0f b6 c0             	movzbl %al,%eax
  8004216e9c:	83 f8 03             	cmp    $0x3,%eax
  8004216e9f:	76 16                	jbe    8004216eb7 <lapic_init+0x13c>
  8004216ea1:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216ea6:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004216eab:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216eb2:	00 00 00 
  8004216eb5:	ff d0                	callq  *%rax
  8004216eb7:	be 33 00 00 00       	mov    $0x33,%esi
  8004216ebc:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004216ec1:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216ec8:	00 00 00 
  8004216ecb:	ff d0                	callq  *%rax
  8004216ecd:	be 00 00 00 00       	mov    $0x0,%esi
  8004216ed2:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216ed7:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216ede:	00 00 00 
  8004216ee1:	ff d0                	callq  *%rax
  8004216ee3:	be 00 00 00 00       	mov    $0x0,%esi
  8004216ee8:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216eed:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216ef4:	00 00 00 
  8004216ef7:	ff d0                	callq  *%rax
  8004216ef9:	be 00 00 00 00       	mov    $0x0,%esi
  8004216efe:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004216f03:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216f0a:	00 00 00 
  8004216f0d:	ff d0                	callq  *%rax
  8004216f0f:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f14:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004216f19:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216f20:	00 00 00 
  8004216f23:	ff d0                	callq  *%rax
  8004216f25:	be 00 85 08 00       	mov    $0x88500,%esi
  8004216f2a:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004216f2f:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216f36:	00 00 00 
  8004216f39:	ff d0                	callq  *%rax
  8004216f3b:	90                   	nop
  8004216f3c:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216f43:	00 00 00 
  8004216f46:	48 8b 00             	mov    (%rax),%rax
  8004216f49:	48 05 00 03 00 00    	add    $0x300,%rax
  8004216f4f:	8b 00                	mov    (%rax),%eax
  8004216f51:	25 00 10 00 00       	and    $0x1000,%eax
  8004216f56:	85 c0                	test   %eax,%eax
  8004216f58:	75 e2                	jne    8004216f3c <lapic_init+0x1c1>
  8004216f5a:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f5f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004216f64:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216f6b:	00 00 00 
  8004216f6e:	ff d0                	callq  *%rax
  8004216f70:	5d                   	pop    %rbp
  8004216f71:	c3                   	retq   

0000008004216f72 <cpunum>:
  8004216f72:	55                   	push   %rbp
  8004216f73:	48 89 e5             	mov    %rsp,%rbp
  8004216f76:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216f7d:	00 00 00 
  8004216f80:	48 8b 00             	mov    (%rax),%rax
  8004216f83:	48 85 c0             	test   %rax,%rax
  8004216f86:	74 18                	je     8004216fa0 <cpunum+0x2e>
  8004216f88:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216f8f:	00 00 00 
  8004216f92:	48 8b 00             	mov    (%rax),%rax
  8004216f95:	48 83 c0 20          	add    $0x20,%rax
  8004216f99:	8b 00                	mov    (%rax),%eax
  8004216f9b:	c1 e8 18             	shr    $0x18,%eax
  8004216f9e:	eb 05                	jmp    8004216fa5 <cpunum+0x33>
  8004216fa0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216fa5:	5d                   	pop    %rbp
  8004216fa6:	c3                   	retq   

0000008004216fa7 <lapic_eoi>:
  8004216fa7:	55                   	push   %rbp
  8004216fa8:	48 89 e5             	mov    %rsp,%rbp
  8004216fab:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216fb2:	00 00 00 
  8004216fb5:	48 8b 00             	mov    (%rax),%rax
  8004216fb8:	48 85 c0             	test   %rax,%rax
  8004216fbb:	74 16                	je     8004216fd3 <lapic_eoi+0x2c>
  8004216fbd:	be 00 00 00 00       	mov    $0x0,%esi
  8004216fc2:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004216fc7:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004216fce:	00 00 00 
  8004216fd1:	ff d0                	callq  *%rax
  8004216fd3:	5d                   	pop    %rbp
  8004216fd4:	c3                   	retq   

0000008004216fd5 <microdelay>:
  8004216fd5:	55                   	push   %rbp
  8004216fd6:	48 89 e5             	mov    %rsp,%rbp
  8004216fd9:	48 83 ec 04          	sub    $0x4,%rsp
  8004216fdd:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004216fe0:	c9                   	leaveq 
  8004216fe1:	c3                   	retq   

0000008004216fe2 <lapic_startap>:
  8004216fe2:	55                   	push   %rbp
  8004216fe3:	48 89 e5             	mov    %rsp,%rbp
  8004216fe6:	48 83 ec 40          	sub    $0x40,%rsp
  8004216fea:	89 f8                	mov    %edi,%eax
  8004216fec:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004216fef:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004216ff2:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004216ff9:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004216ffd:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217001:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217004:	ee                   	out    %al,(%dx)
  8004217005:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  800421700c:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217010:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217014:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217017:	ee                   	out    %al,(%dx)
  8004217018:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  800421701f:	00 
  8004217020:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217024:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217028:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421702b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421702e:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004217035:	00 00 00 
  8004217038:	48 8b 00             	mov    (%rax),%rax
  800421703b:	48 39 c2             	cmp    %rax,%rdx
  800421703e:	72 32                	jb     8004217072 <lapic_startap+0x90>
  8004217040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217044:	48 89 c1             	mov    %rax,%rcx
  8004217047:	48 ba 10 b4 21 04 80 	movabs $0x800421b410,%rdx
  800421704e:	00 00 00 
  8004217051:	be 99 00 00 00       	mov    $0x99,%esi
  8004217056:	48 bf 33 b4 21 04 80 	movabs $0x800421b433,%rdi
  800421705d:	00 00 00 
  8004217060:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217065:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421706c:	00 00 00 
  800421706f:	41 ff d0             	callq  *%r8
  8004217072:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217079:	00 00 00 
  800421707c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217080:	48 01 d0             	add    %rdx,%rax
  8004217083:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217087:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421708b:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217090:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217094:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217098:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421709b:	c1 e8 04             	shr    $0x4,%eax
  800421709e:	66 89 02             	mov    %ax,(%rdx)
  80042170a1:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042170a5:	c1 e0 18             	shl    $0x18,%eax
  80042170a8:	89 c6                	mov    %eax,%esi
  80042170aa:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042170af:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  80042170b6:	00 00 00 
  80042170b9:	ff d0                	callq  *%rax
  80042170bb:	be 00 c5 00 00       	mov    $0xc500,%esi
  80042170c0:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042170c5:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  80042170cc:	00 00 00 
  80042170cf:	ff d0                	callq  *%rax
  80042170d1:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042170d6:	48 b8 d5 6f 21 04 80 	movabs $0x8004216fd5,%rax
  80042170dd:	00 00 00 
  80042170e0:	ff d0                	callq  *%rax
  80042170e2:	be 00 85 00 00       	mov    $0x8500,%esi
  80042170e7:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042170ec:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  80042170f3:	00 00 00 
  80042170f6:	ff d0                	callq  *%rax
  80042170f8:	bf 64 00 00 00       	mov    $0x64,%edi
  80042170fd:	48 b8 d5 6f 21 04 80 	movabs $0x8004216fd5,%rax
  8004217104:	00 00 00 
  8004217107:	ff d0                	callq  *%rax
  8004217109:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217110:	eb 4b                	jmp    800421715d <lapic_startap+0x17b>
  8004217112:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217116:	c1 e0 18             	shl    $0x18,%eax
  8004217119:	89 c6                	mov    %eax,%esi
  800421711b:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217120:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004217127:	00 00 00 
  800421712a:	ff d0                	callq  *%rax
  800421712c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421712f:	c1 e8 0c             	shr    $0xc,%eax
  8004217132:	80 cc 06             	or     $0x6,%ah
  8004217135:	89 c6                	mov    %eax,%esi
  8004217137:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421713c:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004217143:	00 00 00 
  8004217146:	ff d0                	callq  *%rax
  8004217148:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421714d:	48 b8 d5 6f 21 04 80 	movabs $0x8004216fd5,%rax
  8004217154:	00 00 00 
  8004217157:	ff d0                	callq  *%rax
  8004217159:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421715d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217161:	7e af                	jle    8004217112 <lapic_startap+0x130>
  8004217163:	c9                   	leaveq 
  8004217164:	c3                   	retq   

0000008004217165 <lapic_ipi>:
  8004217165:	55                   	push   %rbp
  8004217166:	48 89 e5             	mov    %rsp,%rbp
  8004217169:	48 83 ec 08          	sub    $0x8,%rsp
  800421716d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217170:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217173:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217178:	89 c6                	mov    %eax,%esi
  800421717a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421717f:	48 b8 39 6d 21 04 80 	movabs $0x8004216d39,%rax
  8004217186:	00 00 00 
  8004217189:	ff d0                	callq  *%rax
  800421718b:	90                   	nop
  800421718c:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004217193:	00 00 00 
  8004217196:	48 8b 00             	mov    (%rax),%rax
  8004217199:	48 05 00 03 00 00    	add    $0x300,%rax
  800421719f:	8b 00                	mov    (%rax),%eax
  80042171a1:	25 00 10 00 00       	and    $0x1000,%eax
  80042171a6:	85 c0                	test   %eax,%eax
  80042171a8:	75 e2                	jne    800421718c <lapic_ipi+0x27>
  80042171aa:	c9                   	leaveq 
  80042171ab:	c3                   	retq   

00000080042171ac <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042171ac:	55                   	push   %rbp
  80042171ad:	48 89 e5             	mov    %rsp,%rbp
  80042171b0:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042171b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042171b8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042171bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042171bf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042171c2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042171c6:	f0 87 02             	lock xchg %eax,(%rdx)
  80042171c9:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042171cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042171cf:	c9                   	leaveq 
  80042171d0:	c3                   	retq   

00000080042171d1 <get_caller_pcs>:
  80042171d1:	55                   	push   %rbp
  80042171d2:	48 89 e5             	mov    %rsp,%rbp
  80042171d5:	48 83 ec 28          	sub    $0x28,%rsp
  80042171d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042171dd:	48 89 e8             	mov    %rbp,%rax
  80042171e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  80042171e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042171e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042171ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042171f3:	eb 45                	jmp    800421723a <get_caller_pcs+0x69>
  80042171f5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042171fa:	74 44                	je     8004217240 <get_caller_pcs+0x6f>
  80042171fc:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217203:	00 00 00 
  8004217206:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421720a:	76 34                	jbe    8004217240 <get_caller_pcs+0x6f>
  800421720c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421720f:	48 98                	cltq   
  8004217211:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217218:	00 
  8004217219:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421721d:	48 01 c2             	add    %rax,%rdx
  8004217220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217224:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217228:	48 89 02             	mov    %rax,(%rdx)
  800421722b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421722f:	48 8b 00             	mov    (%rax),%rax
  8004217232:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217236:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421723a:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  800421723e:	7e b5                	jle    80042171f5 <get_caller_pcs+0x24>
  8004217240:	eb 1f                	jmp    8004217261 <get_caller_pcs+0x90>
  8004217242:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217245:	48 98                	cltq   
  8004217247:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421724e:	00 
  800421724f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217253:	48 01 d0             	add    %rdx,%rax
  8004217256:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421725d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217261:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217265:	7e db                	jle    8004217242 <get_caller_pcs+0x71>
  8004217267:	c9                   	leaveq 
  8004217268:	c3                   	retq   

0000008004217269 <holding>:
  8004217269:	55                   	push   %rbp
  800421726a:	48 89 e5             	mov    %rsp,%rbp
  800421726d:	53                   	push   %rbx
  800421726e:	48 83 ec 18          	sub    $0x18,%rsp
  8004217272:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217276:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421727a:	8b 00                	mov    (%rax),%eax
  800421727c:	85 c0                	test   %eax,%eax
  800421727e:	74 3d                	je     80042172bd <holding+0x54>
  8004217280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217284:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217288:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800421728f:	00 00 00 
  8004217292:	ff d0                	callq  *%rax
  8004217294:	48 98                	cltq   
  8004217296:	48 c1 e0 03          	shl    $0x3,%rax
  800421729a:	48 89 c2             	mov    %rax,%rdx
  800421729d:	48 c1 e2 04          	shl    $0x4,%rdx
  80042172a1:	48 01 d0             	add    %rdx,%rax
  80042172a4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042172ab:	00 00 00 
  80042172ae:	48 01 d0             	add    %rdx,%rax
  80042172b1:	48 39 c3             	cmp    %rax,%rbx
  80042172b4:	75 07                	jne    80042172bd <holding+0x54>
  80042172b6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042172bb:	eb 05                	jmp    80042172c2 <holding+0x59>
  80042172bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042172c2:	48 83 c4 18          	add    $0x18,%rsp
  80042172c6:	5b                   	pop    %rbx
  80042172c7:	5d                   	pop    %rbp
  80042172c8:	c3                   	retq   

00000080042172c9 <__spin_initlock>:
  80042172c9:	55                   	push   %rbp
  80042172ca:	48 89 e5             	mov    %rsp,%rbp
  80042172cd:	48 83 ec 10          	sub    $0x10,%rsp
  80042172d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042172d5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042172d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042172dd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042172e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042172e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042172eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042172ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042172f3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042172fa:	00 
  80042172fb:	c9                   	leaveq 
  80042172fc:	c3                   	retq   

00000080042172fd <spin_lock>:
  80042172fd:	55                   	push   %rbp
  80042172fe:	48 89 e5             	mov    %rsp,%rbp
  8004217301:	53                   	push   %rbx
  8004217302:	48 83 ec 18          	sub    $0x18,%rsp
  8004217306:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421730a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421730e:	48 89 c7             	mov    %rax,%rdi
  8004217311:	48 b8 69 72 21 04 80 	movabs $0x8004217269,%rax
  8004217318:	00 00 00 
  800421731b:	ff d0                	callq  *%rax
  800421731d:	85 c0                	test   %eax,%eax
  800421731f:	74 44                	je     8004217365 <spin_lock+0x68>
  8004217321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217325:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217329:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004217330:	00 00 00 
  8004217333:	ff d0                	callq  *%rax
  8004217335:	49 89 d8             	mov    %rbx,%r8
  8004217338:	89 c1                	mov    %eax,%ecx
  800421733a:	48 ba 58 b4 21 04 80 	movabs $0x800421b458,%rdx
  8004217341:	00 00 00 
  8004217344:	be 42 00 00 00       	mov    $0x42,%esi
  8004217349:	48 bf 82 b4 21 04 80 	movabs $0x800421b482,%rdi
  8004217350:	00 00 00 
  8004217353:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217358:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800421735f:	00 00 00 
  8004217362:	41 ff d1             	callq  *%r9
  8004217365:	eb 02                	jmp    8004217369 <spin_lock+0x6c>
  8004217367:	f3 90                	pause  
  8004217369:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421736d:	be 01 00 00 00       	mov    $0x1,%esi
  8004217372:	48 89 c7             	mov    %rax,%rdi
  8004217375:	48 b8 ac 71 21 04 80 	movabs $0x80042171ac,%rax
  800421737c:	00 00 00 
  800421737f:	ff d0                	callq  *%rax
  8004217381:	85 c0                	test   %eax,%eax
  8004217383:	75 e2                	jne    8004217367 <spin_lock+0x6a>
  8004217385:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800421738c:	00 00 00 
  800421738f:	ff d0                	callq  *%rax
  8004217391:	48 98                	cltq   
  8004217393:	48 c1 e0 03          	shl    $0x3,%rax
  8004217397:	48 89 c2             	mov    %rax,%rdx
  800421739a:	48 c1 e2 04          	shl    $0x4,%rdx
  800421739e:	48 01 d0             	add    %rdx,%rax
  80042173a1:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042173a8:	00 00 00 
  80042173ab:	48 01 c2             	add    %rax,%rdx
  80042173ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173b2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042173b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173ba:	48 83 c0 18          	add    $0x18,%rax
  80042173be:	48 89 c7             	mov    %rax,%rdi
  80042173c1:	48 b8 d1 71 21 04 80 	movabs $0x80042171d1,%rax
  80042173c8:	00 00 00 
  80042173cb:	ff d0                	callq  *%rax
  80042173cd:	48 83 c4 18          	add    $0x18,%rsp
  80042173d1:	5b                   	pop    %rbx
  80042173d2:	5d                   	pop    %rbp
  80042173d3:	c3                   	retq   

00000080042173d4 <spin_unlock>:
  80042173d4:	55                   	push   %rbp
  80042173d5:	48 89 e5             	mov    %rsp,%rbp
  80042173d8:	41 54                	push   %r12
  80042173da:	53                   	push   %rbx
  80042173db:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  80042173e2:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  80042173e9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042173f0:	48 89 c7             	mov    %rax,%rdi
  80042173f3:	48 b8 69 72 21 04 80 	movabs $0x8004217269,%rax
  80042173fa:	00 00 00 
  80042173fd:	ff d0                	callq  *%rax
  80042173ff:	85 c0                	test   %eax,%eax
  8004217401:	0f 85 d2 01 00 00    	jne    80042175d9 <spin_unlock+0x205>
  8004217407:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421740e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217412:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217419:	ba 28 00 00 00       	mov    $0x28,%edx
  800421741e:	48 89 ce             	mov    %rcx,%rsi
  8004217421:	48 89 c7             	mov    %rax,%rdi
  8004217424:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  800421742b:	00 00 00 
  800421742e:	ff d0                	callq  *%rax
  8004217430:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217437:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421743b:	48 85 c0             	test   %rax,%rax
  800421743e:	75 39                	jne    8004217479 <spin_unlock+0xa5>
  8004217440:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217447:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421744b:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  8004217452:	00 00 00 
  8004217455:	ff d0                	callq  *%rax
  8004217457:	48 89 da             	mov    %rbx,%rdx
  800421745a:	89 c6                	mov    %eax,%esi
  800421745c:	48 bf 98 b4 21 04 80 	movabs $0x800421b498,%rdi
  8004217463:	00 00 00 
  8004217466:	b8 00 00 00 00       	mov    $0x0,%eax
  800421746b:	48 b9 1f 95 20 04 80 	movabs $0x800420951f,%rcx
  8004217472:	00 00 00 
  8004217475:	ff d1                	callq  *%rcx
  8004217477:	eb 4d                	jmp    80042174c6 <spin_unlock+0xf2>
  8004217479:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217480:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217484:	0f b6 00             	movzbl (%rax),%eax
  8004217487:	44 0f b6 e0          	movzbl %al,%r12d
  800421748b:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217492:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217496:	48 b8 72 6f 21 04 80 	movabs $0x8004216f72,%rax
  800421749d:	00 00 00 
  80042174a0:	ff d0                	callq  *%rax
  80042174a2:	44 89 e1             	mov    %r12d,%ecx
  80042174a5:	48 89 da             	mov    %rbx,%rdx
  80042174a8:	89 c6                	mov    %eax,%esi
  80042174aa:	48 bf d8 b4 21 04 80 	movabs $0x800421b4d8,%rdi
  80042174b1:	00 00 00 
  80042174b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174b9:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  80042174c0:	00 00 00 
  80042174c3:	41 ff d0             	callq  *%r8
  80042174c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042174cd:	e9 c3 00 00 00       	jmpq   8004217595 <spin_unlock+0x1c1>
  80042174d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042174d5:	48 98                	cltq   
  80042174d7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042174de:	89 c0                	mov    %eax,%eax
  80042174e0:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  80042174e7:	48 89 d6             	mov    %rdx,%rsi
  80042174ea:	48 89 c7             	mov    %rax,%rdi
  80042174ed:	48 b8 dc eb 20 04 80 	movabs $0x800420ebdc,%rax
  80042174f4:	00 00 00 
  80042174f7:	ff d0                	callq  *%rax
  80042174f9:	85 c0                	test   %eax,%eax
  80042174fb:	78 6b                	js     8004217568 <spin_unlock+0x194>
  80042174fd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217500:	48 98                	cltq   
  8004217502:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217509:	89 c2                	mov    %eax,%edx
  800421750b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217512:	48 29 c2             	sub    %rax,%rdx
  8004217515:	49 89 d0             	mov    %rdx,%r8
  8004217518:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  800421751f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217525:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  800421752b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217532:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217535:	48 98                	cltq   
  8004217537:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421753e:	4c 89 04 24          	mov    %r8,(%rsp)
  8004217542:	49 89 f9             	mov    %rdi,%r9
  8004217545:	41 89 f0             	mov    %esi,%r8d
  8004217548:	89 c6                	mov    %eax,%esi
  800421754a:	48 bf 0e b5 21 04 80 	movabs $0x800421b50e,%rdi
  8004217551:	00 00 00 
  8004217554:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217559:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  8004217560:	00 00 00 
  8004217563:	41 ff d2             	callq  *%r10
  8004217566:	eb 29                	jmp    8004217591 <spin_unlock+0x1bd>
  8004217568:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421756b:	48 98                	cltq   
  800421756d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217574:	89 c6                	mov    %eax,%esi
  8004217576:	48 bf 25 b5 21 04 80 	movabs $0x800421b525,%rdi
  800421757d:	00 00 00 
  8004217580:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217585:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  800421758c:	00 00 00 
  800421758f:	ff d2                	callq  *%rdx
  8004217591:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004217595:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004217599:	7f 14                	jg     80042175af <spin_unlock+0x1db>
  800421759b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421759e:	48 98                	cltq   
  80042175a0:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042175a7:	85 c0                	test   %eax,%eax
  80042175a9:	0f 85 23 ff ff ff    	jne    80042174d2 <spin_unlock+0xfe>
  80042175af:	48 ba 2d b5 21 04 80 	movabs $0x800421b52d,%rdx
  80042175b6:	00 00 00 
  80042175b9:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042175be:	48 bf 82 b4 21 04 80 	movabs $0x800421b482,%rdi
  80042175c5:	00 00 00 
  80042175c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175cd:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042175d4:	00 00 00 
  80042175d7:	ff d1                	callq  *%rcx
  80042175d9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042175e0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  80042175e7:	00 
  80042175e8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042175ef:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042175f6:	00 
  80042175f7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042175fe:	be 00 00 00 00       	mov    $0x0,%esi
  8004217603:	48 89 c7             	mov    %rax,%rdi
  8004217606:	48 b8 ac 71 21 04 80 	movabs $0x80042171ac,%rax
  800421760d:	00 00 00 
  8004217610:	ff d0                	callq  *%rax
  8004217612:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004217619:	5b                   	pop    %rbx
  800421761a:	41 5c                	pop    %r12
  800421761c:	5d                   	pop    %rbp
  800421761d:	c3                   	retq   

000000800421761e <e1000_attach>:
  800421761e:	55                   	push   %rbp
  800421761f:	48 89 e5             	mov    %rsp,%rbp
  8004217622:	48 83 ec 40          	sub    $0x40,%rsp
  8004217626:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421762a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421762e:	48 89 c7             	mov    %rax,%rdi
  8004217631:	48 b8 db 84 21 04 80 	movabs $0x80042184db,%rax
  8004217638:	00 00 00 
  800421763b:	ff d0                	callq  *%rax
  800421763d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217641:	8b 40 30             	mov    0x30(%rax),%eax
  8004217644:	89 c2                	mov    %eax,%edx
  8004217646:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421764a:	8b 40 18             	mov    0x18(%rax),%eax
  800421764d:	89 c0                	mov    %eax,%eax
  800421764f:	48 89 d6             	mov    %rdx,%rsi
  8004217652:	48 89 c7             	mov    %rax,%rdi
  8004217655:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800421765c:	00 00 00 
  800421765f:	ff d0                	callq  *%rax
  8004217661:	48 ba 20 d7 49 04 80 	movabs $0x800449d720,%rdx
  8004217668:	00 00 00 
  800421766b:	48 89 02             	mov    %rax,(%rdx)
  800421766e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217675:	e9 a9 00 00 00       	jmpq   8004217723 <e1000_attach+0x105>
  800421767a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421767d:	48 98                	cltq   
  800421767f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  8004217686:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  800421768d:	00 00 00 
  8004217690:	48 01 d0             	add    %rdx,%rax
  8004217693:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217697:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421769e:	00 00 00 
  80042176a1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042176a5:	77 32                	ja     80042176d9 <e1000_attach+0xbb>
  80042176a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042176ab:	48 89 c1             	mov    %rax,%rcx
  80042176ae:	48 ba 40 b5 21 04 80 	movabs $0x800421b540,%rdx
  80042176b5:	00 00 00 
  80042176b8:	be 97 00 00 00       	mov    $0x97,%esi
  80042176bd:	48 bf 64 b5 21 04 80 	movabs $0x800421b564,%rdi
  80042176c4:	00 00 00 
  80042176c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176cc:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042176d3:	00 00 00 
  80042176d6:	41 ff d0             	callq  *%r8
  80042176d9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042176e0:	ff ff ff 
  80042176e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042176e7:	48 01 c2             	add    %rax,%rdx
  80042176ea:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042176f1:	00 00 00 
  80042176f4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042176f7:	48 63 c9             	movslq %ecx,%rcx
  80042176fa:	48 c1 e1 04          	shl    $0x4,%rcx
  80042176fe:	48 01 c8             	add    %rcx,%rax
  8004217701:	48 89 10             	mov    %rdx,(%rax)
  8004217704:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  800421770b:	00 00 00 
  800421770e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217711:	48 63 d2             	movslq %edx,%rdx
  8004217714:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217718:	48 01 d0             	add    %rdx,%rax
  800421771b:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  800421771f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217723:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004217727:	0f 8e 4d ff ff ff    	jle    800421767a <e1000_attach+0x5c>
  800421772d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217734:	00 00 00 
  8004217737:	48 8b 00             	mov    (%rax),%rax
  800421773a:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004217741:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217748:	00 00 00 
  800421774b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421774f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217756:	00 00 00 
  8004217759:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421775d:	77 32                	ja     8004217791 <e1000_attach+0x173>
  800421775f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217763:	48 89 c1             	mov    %rax,%rcx
  8004217766:	48 ba 40 b5 21 04 80 	movabs $0x800421b540,%rdx
  800421776d:	00 00 00 
  8004217770:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004217775:	48 bf 64 b5 21 04 80 	movabs $0x800421b564,%rdi
  800421777c:	00 00 00 
  800421777f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217784:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421778b:	00 00 00 
  800421778e:	41 ff d0             	callq  *%r8
  8004217791:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217798:	ff ff ff 
  800421779b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421779f:	48 01 c8             	add    %rcx,%rax
  80042177a2:	89 02                	mov    %eax,(%rdx)
  80042177a4:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042177ab:	00 00 00 
  80042177ae:	48 8b 00             	mov    (%rax),%rax
  80042177b1:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042177b7:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042177bd:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042177c4:	00 00 00 
  80042177c7:	48 8b 00             	mov    (%rax),%rax
  80042177ca:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  80042177d1:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042177d8:	00 00 00 
  80042177db:	48 8b 00             	mov    (%rax),%rax
  80042177de:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042177e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177ea:	89 01                	mov    %eax,(%rcx)
  80042177ec:	89 02                	mov    %eax,(%rdx)
  80042177ee:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042177f5:	00 00 00 
  80042177f8:	48 8b 00             	mov    (%rax),%rax
  80042177fb:	48 05 00 04 00 00    	add    $0x400,%rax
  8004217801:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004217807:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421780e:	00 00 00 
  8004217811:	48 8b 00             	mov    (%rax),%rax
  8004217814:	48 05 10 04 00 00    	add    $0x410,%rax
  800421781a:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004217820:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217827:	e9 8e 00 00 00       	jmpq   80042178ba <e1000_attach+0x29c>
  800421782c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421782f:	48 98                	cltq   
  8004217831:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217835:	48 89 c2             	mov    %rax,%rdx
  8004217838:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  800421783f:	00 00 00 
  8004217842:	48 01 d0             	add    %rdx,%rax
  8004217845:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217849:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217850:	00 00 00 
  8004217853:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004217857:	77 32                	ja     800421788b <e1000_attach+0x26d>
  8004217859:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421785d:	48 89 c1             	mov    %rax,%rcx
  8004217860:	48 ba 40 b5 21 04 80 	movabs $0x800421b540,%rdx
  8004217867:	00 00 00 
  800421786a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421786f:	48 bf 64 b5 21 04 80 	movabs $0x800421b564,%rdi
  8004217876:	00 00 00 
  8004217879:	b8 00 00 00 00       	mov    $0x0,%eax
  800421787e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217885:	00 00 00 
  8004217888:	41 ff d0             	callq  *%r8
  800421788b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217892:	ff ff ff 
  8004217895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217899:	48 01 c2             	add    %rax,%rdx
  800421789c:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  80042178a3:	00 00 00 
  80042178a6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042178a9:	48 63 c9             	movslq %ecx,%rcx
  80042178ac:	48 c1 e1 04          	shl    $0x4,%rcx
  80042178b0:	48 01 c8             	add    %rcx,%rax
  80042178b3:	48 89 10             	mov    %rdx,(%rax)
  80042178b6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042178ba:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042178c1:	0f 8e 65 ff ff ff    	jle    800421782c <e1000_attach+0x20e>
  80042178c7:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042178ce:	00 00 00 
  80042178d1:	48 8b 00             	mov    (%rax),%rax
  80042178d4:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  80042178db:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  80042178e2:	00 00 00 
  80042178e5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042178e9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042178f0:	00 00 00 
  80042178f3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042178f7:	77 32                	ja     800421792b <e1000_attach+0x30d>
  80042178f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042178fd:	48 89 c1             	mov    %rax,%rcx
  8004217900:	48 ba 40 b5 21 04 80 	movabs $0x800421b540,%rdx
  8004217907:	00 00 00 
  800421790a:	be ba 00 00 00       	mov    $0xba,%esi
  800421790f:	48 bf 64 b5 21 04 80 	movabs $0x800421b564,%rdi
  8004217916:	00 00 00 
  8004217919:	b8 00 00 00 00       	mov    $0x0,%eax
  800421791e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217925:	00 00 00 
  8004217928:	41 ff d0             	callq  *%r8
  800421792b:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217932:	ff ff ff 
  8004217935:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217939:	48 01 c8             	add    %rcx,%rax
  800421793c:	89 02                	mov    %eax,(%rdx)
  800421793e:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217945:	00 00 00 
  8004217948:	48 8b 00             	mov    (%rax),%rax
  800421794b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004217951:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004217957:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421795e:	00 00 00 
  8004217961:	48 8b 00             	mov    (%rax),%rax
  8004217964:	48 05 10 28 00 00    	add    $0x2810,%rax
  800421796a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217970:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217977:	00 00 00 
  800421797a:	48 8b 00             	mov    (%rax),%rax
  800421797d:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217983:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004217989:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217990:	00 00 00 
  8004217993:	48 8b 00             	mov    (%rax),%rax
  8004217996:	48 05 00 01 00 00    	add    $0x100,%rax
  800421799c:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  80042179a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179a7:	c9                   	leaveq 
  80042179a8:	c3                   	retq   

00000080042179a9 <e1000_transmit>:
  80042179a9:	55                   	push   %rbp
  80042179aa:	48 89 e5             	mov    %rsp,%rbp
  80042179ad:	48 83 ec 20          	sub    $0x20,%rsp
  80042179b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042179b5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042179b8:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179bf:	00 00 00 
  80042179c2:	48 8b 00             	mov    (%rax),%rax
  80042179c5:	48 85 c0             	test   %rax,%rax
  80042179c8:	74 09                	je     80042179d3 <e1000_transmit+0x2a>
  80042179ca:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  80042179d1:	76 0a                	jbe    80042179dd <e1000_transmit+0x34>
  80042179d3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042179d8:	e9 39 01 00 00       	jmpq   8004217b16 <e1000_transmit+0x16d>
  80042179dd:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179e4:	00 00 00 
  80042179e7:	48 8b 00             	mov    (%rax),%rax
  80042179ea:	48 05 18 38 00 00    	add    $0x3818,%rax
  80042179f0:	8b 00                	mov    (%rax),%eax
  80042179f2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042179f5:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042179fc:	00 00 00 
  80042179ff:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217a02:	48 63 d2             	movslq %edx,%rdx
  8004217a05:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217a09:	48 01 d0             	add    %rdx,%rax
  8004217a0c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217a10:	0f b6 c0             	movzbl %al,%eax
  8004217a13:	83 e0 01             	and    $0x1,%eax
  8004217a16:	85 c0                	test   %eax,%eax
  8004217a18:	75 25                	jne    8004217a3f <e1000_transmit+0x96>
  8004217a1a:	48 bf 74 b5 21 04 80 	movabs $0x800421b574,%rdi
  8004217a21:	00 00 00 
  8004217a24:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a29:	48 ba 1f 95 20 04 80 	movabs $0x800420951f,%rdx
  8004217a30:	00 00 00 
  8004217a33:	ff d2                	callq  *%rdx
  8004217a35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a3a:	e9 d7 00 00 00       	jmpq   8004217b16 <e1000_transmit+0x16d>
  8004217a3f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217a42:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217a45:	48 98                	cltq   
  8004217a47:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004217a4e:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  8004217a55:	00 00 00 
  8004217a58:	48 01 c1             	add    %rax,%rcx
  8004217a5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217a5f:	48 89 c6             	mov    %rax,%rsi
  8004217a62:	48 89 cf             	mov    %rcx,%rdi
  8004217a65:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  8004217a6c:	00 00 00 
  8004217a6f:	ff d0                	callq  *%rax
  8004217a71:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217a74:	48 ba 30 d7 49 04 80 	movabs $0x800449d730,%rdx
  8004217a7b:	00 00 00 
  8004217a7e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217a81:	48 63 c9             	movslq %ecx,%rcx
  8004217a84:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217a88:	48 01 ca             	add    %rcx,%rdx
  8004217a8b:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004217a8f:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217a96:	00 00 00 
  8004217a99:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217a9c:	48 63 d2             	movslq %edx,%rdx
  8004217a9f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217aa3:	48 01 d0             	add    %rdx,%rax
  8004217aa6:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217aaa:	83 e0 fe             	and    $0xfffffffe,%eax
  8004217aad:	89 c2                	mov    %eax,%edx
  8004217aaf:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217ab6:	00 00 00 
  8004217ab9:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217abc:	48 63 c9             	movslq %ecx,%rcx
  8004217abf:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217ac3:	48 01 c8             	add    %rcx,%rax
  8004217ac6:	88 50 0c             	mov    %dl,0xc(%rax)
  8004217ac9:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217ad0:	00 00 00 
  8004217ad3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217ad6:	48 63 d2             	movslq %edx,%rdx
  8004217ad9:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217add:	48 01 d0             	add    %rdx,%rax
  8004217ae0:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004217ae4:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217aeb:	00 00 00 
  8004217aee:	48 8b 00             	mov    (%rax),%rax
  8004217af1:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217af8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217afb:	8d 50 01             	lea    0x1(%rax),%edx
  8004217afe:	89 d0                	mov    %edx,%eax
  8004217b00:	c1 f8 1f             	sar    $0x1f,%eax
  8004217b03:	c1 e8 1c             	shr    $0x1c,%eax
  8004217b06:	01 c2                	add    %eax,%edx
  8004217b08:	83 e2 0f             	and    $0xf,%edx
  8004217b0b:	29 c2                	sub    %eax,%edx
  8004217b0d:	89 d0                	mov    %edx,%eax
  8004217b0f:	89 01                	mov    %eax,(%rcx)
  8004217b11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b16:	c9                   	leaveq 
  8004217b17:	c3                   	retq   

0000008004217b18 <e1000_receive>:
  8004217b18:	55                   	push   %rbp
  8004217b19:	48 89 e5             	mov    %rsp,%rbp
  8004217b1c:	48 83 ec 20          	sub    $0x20,%rsp
  8004217b20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217b24:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217b27:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217b2e:	00 00 00 
  8004217b31:	48 8b 00             	mov    (%rax),%rax
  8004217b34:	48 85 c0             	test   %rax,%rax
  8004217b37:	75 0a                	jne    8004217b43 <e1000_receive+0x2b>
  8004217b39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b3e:	e9 59 01 00 00       	jmpq   8004217c9c <e1000_receive+0x184>
  8004217b43:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217b4a:	00 00 00 
  8004217b4d:	48 8b 00             	mov    (%rax),%rax
  8004217b50:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217b56:	8b 00                	mov    (%rax),%eax
  8004217b58:	8d 48 01             	lea    0x1(%rax),%ecx
  8004217b5b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004217b60:	89 c8                	mov    %ecx,%eax
  8004217b62:	f7 e2                	mul    %edx
  8004217b64:	89 d0                	mov    %edx,%eax
  8004217b66:	c1 e8 06             	shr    $0x6,%eax
  8004217b69:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004217b6f:	29 c1                	sub    %eax,%ecx
  8004217b71:	89 c8                	mov    %ecx,%eax
  8004217b73:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217b76:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217b7d:	00 00 00 
  8004217b80:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b83:	48 63 d2             	movslq %edx,%rdx
  8004217b86:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b8a:	48 01 d0             	add    %rdx,%rax
  8004217b8d:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217b91:	0f b6 c0             	movzbl %al,%eax
  8004217b94:	83 e0 01             	and    $0x1,%eax
  8004217b97:	85 c0                	test   %eax,%eax
  8004217b99:	75 0a                	jne    8004217ba5 <e1000_receive+0x8d>
  8004217b9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ba0:	e9 f7 00 00 00       	jmpq   8004217c9c <e1000_receive+0x184>
  8004217ba5:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217bac:	00 00 00 
  8004217baf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217bb2:	48 63 d2             	movslq %edx,%rdx
  8004217bb5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217bb9:	48 01 d0             	add    %rdx,%rax
  8004217bbc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217bc0:	0f b6 c0             	movzbl %al,%eax
  8004217bc3:	83 e0 02             	and    $0x2,%eax
  8004217bc6:	85 c0                	test   %eax,%eax
  8004217bc8:	75 35                	jne    8004217bff <e1000_receive+0xe7>
  8004217bca:	48 b9 88 b5 21 04 80 	movabs $0x800421b588,%rcx
  8004217bd1:	00 00 00 
  8004217bd4:	48 ba b2 b5 21 04 80 	movabs $0x800421b5b2,%rdx
  8004217bdb:	00 00 00 
  8004217bde:	be ef 00 00 00       	mov    $0xef,%esi
  8004217be3:	48 bf 64 b5 21 04 80 	movabs $0x800421b564,%rdi
  8004217bea:	00 00 00 
  8004217bed:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217bf2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217bf9:	00 00 00 
  8004217bfc:	41 ff d0             	callq  *%r8
  8004217bff:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217c02:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217c05:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c0c:	00 00 00 
  8004217c0f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c12:	48 63 d2             	movslq %edx,%rdx
  8004217c15:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c19:	48 01 d0             	add    %rdx,%rax
  8004217c1c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004217c20:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004217c24:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004217c28:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217c2b:	39 c2                	cmp    %eax,%edx
  8004217c2d:	0f 46 c2             	cmovbe %edx,%eax
  8004217c30:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217c33:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217c36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217c39:	48 98                	cltq   
  8004217c3b:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217c3f:	48 89 c1             	mov    %rax,%rcx
  8004217c42:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  8004217c49:	00 00 00 
  8004217c4c:	48 01 c1             	add    %rax,%rcx
  8004217c4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c53:	48 89 ce             	mov    %rcx,%rsi
  8004217c56:	48 89 c7             	mov    %rax,%rdi
  8004217c59:	48 b8 fb ff 20 04 80 	movabs $0x800420fffb,%rax
  8004217c60:	00 00 00 
  8004217c63:	ff d0                	callq  *%rax
  8004217c65:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c6c:	00 00 00 
  8004217c6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c72:	48 63 d2             	movslq %edx,%rdx
  8004217c75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c79:	48 01 d0             	add    %rdx,%rax
  8004217c7c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004217c80:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217c87:	00 00 00 
  8004217c8a:	48 8b 00             	mov    (%rax),%rax
  8004217c8d:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004217c94:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217c97:	89 02                	mov    %eax,(%rdx)
  8004217c99:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217c9c:	c9                   	leaveq 
  8004217c9d:	c3                   	retq   

0000008004217c9e <pci_conf1_set_addr>:
  8004217c9e:	55                   	push   %rbp
  8004217c9f:	48 89 e5             	mov    %rsp,%rbp
  8004217ca2:	48 83 ec 20          	sub    $0x20,%rsp
  8004217ca6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217ca9:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217cac:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004217caf:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004217cb2:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004217cb9:	76 35                	jbe    8004217cf0 <pci_conf1_set_addr+0x52>
  8004217cbb:	48 b9 c8 b5 21 04 80 	movabs $0x800421b5c8,%rcx
  8004217cc2:	00 00 00 
  8004217cc5:	48 ba d2 b5 21 04 80 	movabs $0x800421b5d2,%rdx
  8004217ccc:	00 00 00 
  8004217ccf:	be 31 00 00 00       	mov    $0x31,%esi
  8004217cd4:	48 bf e7 b5 21 04 80 	movabs $0x800421b5e7,%rdi
  8004217cdb:	00 00 00 
  8004217cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ce3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217cea:	00 00 00 
  8004217ced:	41 ff d0             	callq  *%r8
  8004217cf0:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004217cf4:	76 35                	jbe    8004217d2b <pci_conf1_set_addr+0x8d>
  8004217cf6:	48 b9 f5 b5 21 04 80 	movabs $0x800421b5f5,%rcx
  8004217cfd:	00 00 00 
  8004217d00:	48 ba d2 b5 21 04 80 	movabs $0x800421b5d2,%rdx
  8004217d07:	00 00 00 
  8004217d0a:	be 32 00 00 00       	mov    $0x32,%esi
  8004217d0f:	48 bf e7 b5 21 04 80 	movabs $0x800421b5e7,%rdi
  8004217d16:	00 00 00 
  8004217d19:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d1e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d25:	00 00 00 
  8004217d28:	41 ff d0             	callq  *%r8
  8004217d2b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004217d2f:	76 35                	jbe    8004217d66 <pci_conf1_set_addr+0xc8>
  8004217d31:	48 b9 fe b5 21 04 80 	movabs $0x800421b5fe,%rcx
  8004217d38:	00 00 00 
  8004217d3b:	48 ba d2 b5 21 04 80 	movabs $0x800421b5d2,%rdx
  8004217d42:	00 00 00 
  8004217d45:	be 33 00 00 00       	mov    $0x33,%esi
  8004217d4a:	48 bf e7 b5 21 04 80 	movabs $0x800421b5e7,%rdi
  8004217d51:	00 00 00 
  8004217d54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d59:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d60:	00 00 00 
  8004217d63:	41 ff d0             	callq  *%r8
  8004217d66:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004217d6d:	76 35                	jbe    8004217da4 <pci_conf1_set_addr+0x106>
  8004217d6f:	48 b9 07 b6 21 04 80 	movabs $0x800421b607,%rcx
  8004217d76:	00 00 00 
  8004217d79:	48 ba d2 b5 21 04 80 	movabs $0x800421b5d2,%rdx
  8004217d80:	00 00 00 
  8004217d83:	be 34 00 00 00       	mov    $0x34,%esi
  8004217d88:	48 bf e7 b5 21 04 80 	movabs $0x800421b5e7,%rdi
  8004217d8f:	00 00 00 
  8004217d92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d97:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d9e:	00 00 00 
  8004217da1:	41 ff d0             	callq  *%r8
  8004217da4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217da7:	83 e0 03             	and    $0x3,%eax
  8004217daa:	85 c0                	test   %eax,%eax
  8004217dac:	74 35                	je     8004217de3 <pci_conf1_set_addr+0x145>
  8004217dae:	48 b9 14 b6 21 04 80 	movabs $0x800421b614,%rcx
  8004217db5:	00 00 00 
  8004217db8:	48 ba d2 b5 21 04 80 	movabs $0x800421b5d2,%rdx
  8004217dbf:	00 00 00 
  8004217dc2:	be 35 00 00 00       	mov    $0x35,%esi
  8004217dc7:	48 bf e7 b5 21 04 80 	movabs $0x800421b5e7,%rdi
  8004217dce:	00 00 00 
  8004217dd1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217dd6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217ddd:	00 00 00 
  8004217de0:	41 ff d0             	callq  *%r8
  8004217de3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217de6:	c1 e0 10             	shl    $0x10,%eax
  8004217de9:	89 c2                	mov    %eax,%edx
  8004217deb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004217dee:	c1 e0 0b             	shl    $0xb,%eax
  8004217df1:	09 c2                	or     %eax,%edx
  8004217df3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217df6:	c1 e0 08             	shl    $0x8,%eax
  8004217df9:	09 d0                	or     %edx,%eax
  8004217dfb:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004217dfe:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004217e03:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217e06:	48 b8 e4 c7 22 04 80 	movabs $0x800422c7e4,%rax
  8004217e0d:	00 00 00 
  8004217e10:	8b 00                	mov    (%rax),%eax
  8004217e12:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217e15:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217e18:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217e1b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e1e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004217e21:	ef                   	out    %eax,(%dx)
  8004217e22:	c9                   	leaveq 
  8004217e23:	c3                   	retq   

0000008004217e24 <pci_conf_read>:
  8004217e24:	55                   	push   %rbp
  8004217e25:	48 89 e5             	mov    %rsp,%rbp
  8004217e28:	48 83 ec 20          	sub    $0x20,%rsp
  8004217e2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217e30:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e37:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217e3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e3e:	8b 70 08             	mov    0x8(%rax),%esi
  8004217e41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e45:	48 8b 00             	mov    (%rax),%rax
  8004217e48:	8b 40 08             	mov    0x8(%rax),%eax
  8004217e4b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217e4e:	89 c7                	mov    %eax,%edi
  8004217e50:	48 b8 9e 7c 21 04 80 	movabs $0x8004217c9e,%rax
  8004217e57:	00 00 00 
  8004217e5a:	ff d0                	callq  *%rax
  8004217e5c:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217e63:	00 00 00 
  8004217e66:	8b 00                	mov    (%rax),%eax
  8004217e68:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004217e6b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217e6e:	89 c2                	mov    %eax,%edx
  8004217e70:	ed                   	in     (%dx),%eax
  8004217e71:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004217e74:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217e77:	c9                   	leaveq 
  8004217e78:	c3                   	retq   

0000008004217e79 <pci_conf_write>:
  8004217e79:	55                   	push   %rbp
  8004217e7a:	48 89 e5             	mov    %rsp,%rbp
  8004217e7d:	48 83 ec 20          	sub    $0x20,%rsp
  8004217e81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217e85:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217e88:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004217e8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e8f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217e92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e96:	8b 70 08             	mov    0x8(%rax),%esi
  8004217e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e9d:	48 8b 00             	mov    (%rax),%rax
  8004217ea0:	8b 40 08             	mov    0x8(%rax),%eax
  8004217ea3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217ea6:	89 c7                	mov    %eax,%edi
  8004217ea8:	48 b8 9e 7c 21 04 80 	movabs $0x8004217c9e,%rax
  8004217eaf:	00 00 00 
  8004217eb2:	ff d0                	callq  *%rax
  8004217eb4:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217ebb:	00 00 00 
  8004217ebe:	8b 00                	mov    (%rax),%eax
  8004217ec0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217ec3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217ec6:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217ec9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217ecc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217ecf:	ef                   	out    %eax,(%dx)
  8004217ed0:	c9                   	leaveq 
  8004217ed1:	c3                   	retq   

0000008004217ed2 <pci_attach_match>:
  8004217ed2:	55                   	push   %rbp
  8004217ed3:	48 89 e5             	mov    %rsp,%rbp
  8004217ed6:	48 83 ec 30          	sub    $0x30,%rsp
  8004217eda:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217edd:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217ee0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004217ee4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004217ee8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217eef:	e9 aa 00 00 00       	jmpq   8004217f9e <pci_attach_match+0xcc>
  8004217ef4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217ef7:	48 c1 e0 04          	shl    $0x4,%rax
  8004217efb:	48 89 c2             	mov    %rax,%rdx
  8004217efe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f02:	48 01 d0             	add    %rdx,%rax
  8004217f05:	8b 00                	mov    (%rax),%eax
  8004217f07:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004217f0a:	0f 85 8a 00 00 00    	jne    8004217f9a <pci_attach_match+0xc8>
  8004217f10:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f13:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f17:	48 89 c2             	mov    %rax,%rdx
  8004217f1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f1e:	48 01 d0             	add    %rdx,%rax
  8004217f21:	8b 40 04             	mov    0x4(%rax),%eax
  8004217f24:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004217f27:	75 71                	jne    8004217f9a <pci_attach_match+0xc8>
  8004217f29:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f2c:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f30:	48 89 c2             	mov    %rax,%rdx
  8004217f33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f37:	48 01 d0             	add    %rdx,%rax
  8004217f3a:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217f3e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004217f42:	48 89 d7             	mov    %rdx,%rdi
  8004217f45:	ff d0                	callq  *%rax
  8004217f47:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217f4a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004217f4e:	7e 05                	jle    8004217f55 <pci_attach_match+0x83>
  8004217f50:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217f53:	eb 6c                	jmp    8004217fc1 <pci_attach_match+0xef>
  8004217f55:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004217f59:	79 3f                	jns    8004217f9a <pci_attach_match+0xc8>
  8004217f5b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f5e:	48 c1 e0 04          	shl    $0x4,%rax
  8004217f62:	48 89 c2             	mov    %rax,%rdx
  8004217f65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f69:	48 01 d0             	add    %rdx,%rax
  8004217f6c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004217f70:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004217f73:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004217f76:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f79:	41 89 f0             	mov    %esi,%r8d
  8004217f7c:	89 c6                	mov    %eax,%esi
  8004217f7e:	48 bf 28 b6 21 04 80 	movabs $0x800421b628,%rdi
  8004217f85:	00 00 00 
  8004217f88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f8d:	49 b9 1f 95 20 04 80 	movabs $0x800420951f,%r9
  8004217f94:	00 00 00 
  8004217f97:	41 ff d1             	callq  *%r9
  8004217f9a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217f9e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fa1:	48 c1 e0 04          	shl    $0x4,%rax
  8004217fa5:	48 89 c2             	mov    %rax,%rdx
  8004217fa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217fac:	48 01 d0             	add    %rdx,%rax
  8004217faf:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217fb3:	48 85 c0             	test   %rax,%rax
  8004217fb6:	0f 85 38 ff ff ff    	jne    8004217ef4 <pci_attach_match+0x22>
  8004217fbc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fc1:	c9                   	leaveq 
  8004217fc2:	c3                   	retq   

0000008004217fc3 <pci_attach>:
  8004217fc3:	55                   	push   %rbp
  8004217fc4:	48 89 e5             	mov    %rsp,%rbp
  8004217fc7:	48 83 ec 10          	sub    $0x10,%rsp
  8004217fcb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217fcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217fd3:	8b 40 14             	mov    0x14(%rax),%eax
  8004217fd6:	c1 e8 10             	shr    $0x10,%eax
  8004217fd9:	0f b6 c0             	movzbl %al,%eax
  8004217fdc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004217fe0:	8b 52 14             	mov    0x14(%rdx),%edx
  8004217fe3:	89 d7                	mov    %edx,%edi
  8004217fe5:	c1 ef 18             	shr    $0x18,%edi
  8004217fe8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004217fec:	48 89 d1             	mov    %rdx,%rcx
  8004217fef:	48 ba 00 c8 22 04 80 	movabs $0x800422c800,%rdx
  8004217ff6:	00 00 00 
  8004217ff9:	89 c6                	mov    %eax,%esi
  8004217ffb:	48 b8 d2 7e 21 04 80 	movabs $0x8004217ed2,%rax
  8004218002:	00 00 00 
  8004218005:	ff d0                	callq  *%rax
  8004218007:	85 c0                	test   %eax,%eax
  8004218009:	75 39                	jne    8004218044 <pci_attach+0x81>
  800421800b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421800f:	8b 40 10             	mov    0x10(%rax),%eax
  8004218012:	c1 e8 10             	shr    $0x10,%eax
  8004218015:	89 c6                	mov    %eax,%esi
  8004218017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421801b:	8b 40 10             	mov    0x10(%rax),%eax
  800421801e:	0f b7 c0             	movzwl %ax,%eax
  8004218021:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218025:	48 89 d1             	mov    %rdx,%rcx
  8004218028:	48 ba 20 c8 22 04 80 	movabs $0x800422c820,%rdx
  800421802f:	00 00 00 
  8004218032:	89 c7                	mov    %eax,%edi
  8004218034:	48 b8 d2 7e 21 04 80 	movabs $0x8004217ed2,%rax
  800421803b:	00 00 00 
  800421803e:	ff d0                	callq  *%rax
  8004218040:	85 c0                	test   %eax,%eax
  8004218042:	74 07                	je     800421804b <pci_attach+0x88>
  8004218044:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218049:	eb 05                	jmp    8004218050 <pci_attach+0x8d>
  800421804b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218050:	c9                   	leaveq 
  8004218051:	c3                   	retq   

0000008004218052 <pci_print_func>:
  8004218052:	55                   	push   %rbp
  8004218053:	48 89 e5             	mov    %rsp,%rbp
  8004218056:	48 83 ec 40          	sub    $0x40,%rsp
  800421805a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421805e:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  8004218065:	00 00 00 
  8004218068:	48 8b 00             	mov    (%rax),%rax
  800421806b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421806f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218073:	8b 40 14             	mov    0x14(%rax),%eax
  8004218076:	c1 e8 18             	shr    $0x18,%eax
  8004218079:	83 f8 06             	cmp    $0x6,%eax
  800421807c:	77 20                	ja     800421809e <pci_print_func+0x4c>
  800421807e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218082:	8b 40 14             	mov    0x14(%rax),%eax
  8004218085:	c1 e8 18             	shr    $0x18,%eax
  8004218088:	89 c2                	mov    %eax,%edx
  800421808a:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  8004218091:	00 00 00 
  8004218094:	89 d2                	mov    %edx,%edx
  8004218096:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800421809a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421809e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180a2:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  80042180a6:	0f b6 f8             	movzbl %al,%edi
  80042180a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180ad:	8b 40 14             	mov    0x14(%rax),%eax
  80042180b0:	c1 e8 10             	shr    $0x10,%eax
  80042180b3:	0f b6 f0             	movzbl %al,%esi
  80042180b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180ba:	8b 40 14             	mov    0x14(%rax),%eax
  80042180bd:	c1 e8 18             	shr    $0x18,%eax
  80042180c0:	41 89 c1             	mov    %eax,%r9d
  80042180c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180c7:	8b 40 10             	mov    0x10(%rax),%eax
  80042180ca:	c1 e8 10             	shr    $0x10,%eax
  80042180cd:	41 89 c2             	mov    %eax,%r10d
  80042180d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180d4:	8b 40 10             	mov    0x10(%rax),%eax
  80042180d7:	44 0f b7 c0          	movzwl %ax,%r8d
  80042180db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180df:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042180e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180e6:	8b 50 08             	mov    0x8(%rax),%edx
  80042180e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180ed:	48 8b 00             	mov    (%rax),%rax
  80042180f0:	8b 40 08             	mov    0x8(%rax),%eax
  80042180f3:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  80042180f7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  80042180fb:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218100:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218104:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218108:	45 89 d1             	mov    %r10d,%r9d
  800421810b:	89 c6                	mov    %eax,%esi
  800421810d:	48 bf c8 b6 21 04 80 	movabs $0x800421b6c8,%rdi
  8004218114:	00 00 00 
  8004218117:	b8 00 00 00 00       	mov    $0x0,%eax
  800421811c:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  8004218123:	00 00 00 
  8004218126:	41 ff d2             	callq  *%r10
  8004218129:	c9                   	leaveq 
  800421812a:	c3                   	retq   

000000800421812b <pci_scan_bus>:
  800421812b:	55                   	push   %rbp
  800421812c:	48 89 e5             	mov    %rsp,%rbp
  800421812f:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218136:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421813d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218144:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218148:	ba 50 00 00 00       	mov    $0x50,%edx
  800421814d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218152:	48 89 c7             	mov    %rax,%rdi
  8004218155:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800421815c:	00 00 00 
  800421815f:	ff d0                	callq  *%rax
  8004218161:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218168:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421816c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218173:	e9 22 02 00 00       	jmpq   800421839a <pci_scan_bus+0x26f>
  8004218178:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421817c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218181:	48 89 c7             	mov    %rax,%rdi
  8004218184:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  800421818b:	00 00 00 
  800421818e:	ff d0                	callq  *%rax
  8004218190:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218193:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218196:	c1 e8 10             	shr    $0x10,%eax
  8004218199:	83 e0 7f             	and    $0x7f,%eax
  800421819c:	83 f8 01             	cmp    $0x1,%eax
  800421819f:	0f 87 ec 01 00 00    	ja     8004218391 <pci_scan_bus+0x266>
  80042181a5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042181a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042181ad:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042181b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042181b8:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  80042181bf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042181c3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042181ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042181ce:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  80042181d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042181d9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042181e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042181e4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  80042181eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042181ef:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  80042181f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042181fa:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218205:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421820c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218210:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218217:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  800421821e:	00 00 00 
  8004218221:	e9 45 01 00 00       	jmpq   800421836b <pci_scan_bus+0x240>
  8004218226:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421822d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218234:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421823b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218242:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218249:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218250:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218257:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421825e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218265:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421826c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218273:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421827a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218281:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218285:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800421828c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218290:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218297:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800421829b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042182a2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042182a6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  80042182ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042182b2:	48 89 c7             	mov    %rax,%rdi
  80042182b5:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  80042182bc:	00 00 00 
  80042182bf:	ff d0                	callq  *%rax
  80042182c1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  80042182c7:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  80042182cd:	0f b7 c0             	movzwl %ax,%eax
  80042182d0:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80042182d5:	0f 84 81 00 00 00    	je     800421835c <pci_scan_bus+0x231>
  80042182db:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042182e2:	be 3c 00 00 00       	mov    $0x3c,%esi
  80042182e7:	48 89 c7             	mov    %rax,%rdi
  80042182ea:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  80042182f1:	00 00 00 
  80042182f4:	ff d0                	callq  *%rax
  80042182f6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042182f9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042182fc:	88 45 98             	mov    %al,-0x68(%rbp)
  80042182ff:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218306:	be 08 00 00 00       	mov    $0x8,%esi
  800421830b:	48 89 c7             	mov    %rax,%rdi
  800421830e:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  8004218315:	00 00 00 
  8004218318:	ff d0                	callq  *%rax
  800421831a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218320:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218327:	00 00 00 
  800421832a:	8b 00                	mov    (%rax),%eax
  800421832c:	85 c0                	test   %eax,%eax
  800421832e:	74 16                	je     8004218346 <pci_scan_bus+0x21b>
  8004218330:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218337:	48 89 c7             	mov    %rax,%rdi
  800421833a:	48 b8 52 80 21 04 80 	movabs $0x8004218052,%rax
  8004218341:	00 00 00 
  8004218344:	ff d0                	callq  *%rax
  8004218346:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421834d:	48 89 c7             	mov    %rax,%rdi
  8004218350:	48 b8 c3 7f 21 04 80 	movabs $0x8004217fc3,%rax
  8004218357:	00 00 00 
  800421835a:	ff d0                	callq  *%rax
  800421835c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218362:	83 c0 01             	add    $0x1,%eax
  8004218365:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421836b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218371:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218374:	25 00 00 80 00       	and    $0x800000,%eax
  8004218379:	85 c0                	test   %eax,%eax
  800421837b:	74 07                	je     8004218384 <pci_scan_bus+0x259>
  800421837d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218382:	eb 05                	jmp    8004218389 <pci_scan_bus+0x25e>
  8004218384:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218389:	39 c2                	cmp    %eax,%edx
  800421838b:	0f 82 95 fe ff ff    	jb     8004218226 <pci_scan_bus+0xfb>
  8004218391:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218394:	83 c0 01             	add    $0x1,%eax
  8004218397:	89 45 a8             	mov    %eax,-0x58(%rbp)
  800421839a:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421839d:	83 f8 1f             	cmp    $0x1f,%eax
  80042183a0:	0f 86 d2 fd ff ff    	jbe    8004218178 <pci_scan_bus+0x4d>
  80042183a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042183a9:	c9                   	leaveq 
  80042183aa:	c3                   	retq   

00000080042183ab <pci_bridge_attach>:
  80042183ab:	55                   	push   %rbp
  80042183ac:	48 89 e5             	mov    %rsp,%rbp
  80042183af:	48 83 ec 30          	sub    $0x30,%rsp
  80042183b3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042183b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042183bb:	be 1c 00 00 00       	mov    $0x1c,%esi
  80042183c0:	48 89 c7             	mov    %rax,%rdi
  80042183c3:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  80042183ca:	00 00 00 
  80042183cd:	ff d0                	callq  *%rax
  80042183cf:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042183d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042183d6:	be 18 00 00 00       	mov    $0x18,%esi
  80042183db:	48 89 c7             	mov    %rax,%rdi
  80042183de:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  80042183e5:	00 00 00 
  80042183e8:	ff d0                	callq  *%rax
  80042183ea:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042183ed:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042183f0:	83 e0 0f             	and    $0xf,%eax
  80042183f3:	83 f8 01             	cmp    $0x1,%eax
  80042183f6:	75 40                	jne    8004218438 <pci_bridge_attach+0x8d>
  80042183f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042183fc:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042183ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218403:	8b 50 08             	mov    0x8(%rax),%edx
  8004218406:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421840a:	48 8b 00             	mov    (%rax),%rax
  800421840d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218410:	89 c6                	mov    %eax,%esi
  8004218412:	48 bf 08 b7 21 04 80 	movabs $0x800421b708,%rdi
  8004218419:	00 00 00 
  800421841c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218421:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  8004218428:	00 00 00 
  800421842b:	41 ff d0             	callq  *%r8
  800421842e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218433:	e9 a1 00 00 00       	jmpq   80042184d9 <pci_bridge_attach+0x12e>
  8004218438:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421843c:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218441:	be 00 00 00 00       	mov    $0x0,%esi
  8004218446:	48 89 c7             	mov    %rax,%rdi
  8004218449:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  8004218450:	00 00 00 
  8004218453:	ff d0                	callq  *%rax
  8004218455:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218459:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421845d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218460:	c1 e8 08             	shr    $0x8,%eax
  8004218463:	0f b6 c0             	movzbl %al,%eax
  8004218466:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218469:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218470:	00 00 00 
  8004218473:	8b 00                	mov    (%rax),%eax
  8004218475:	85 c0                	test   %eax,%eax
  8004218477:	74 48                	je     80042184c1 <pci_bridge_attach+0x116>
  8004218479:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421847c:	c1 e8 10             	shr    $0x10,%eax
  800421847f:	0f b6 f8             	movzbl %al,%edi
  8004218482:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004218485:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218489:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421848c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218490:	8b 50 08             	mov    0x8(%rax),%edx
  8004218493:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218497:	48 8b 00             	mov    (%rax),%rax
  800421849a:	8b 40 08             	mov    0x8(%rax),%eax
  800421849d:	41 89 f9             	mov    %edi,%r9d
  80042184a0:	41 89 f0             	mov    %esi,%r8d
  80042184a3:	89 c6                	mov    %eax,%esi
  80042184a5:	48 bf 40 b7 21 04 80 	movabs $0x800421b740,%rdi
  80042184ac:	00 00 00 
  80042184af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184b4:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  80042184bb:	00 00 00 
  80042184be:	41 ff d2             	callq  *%r10
  80042184c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042184c5:	48 89 c7             	mov    %rax,%rdi
  80042184c8:	48 b8 2b 81 21 04 80 	movabs $0x800421812b,%rax
  80042184cf:	00 00 00 
  80042184d2:	ff d0                	callq  *%rax
  80042184d4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042184d9:	c9                   	leaveq 
  80042184da:	c3                   	retq   

00000080042184db <pci_func_enable>:
  80042184db:	55                   	push   %rbp
  80042184dc:	48 89 e5             	mov    %rsp,%rbp
  80042184df:	48 83 ec 40          	sub    $0x40,%rsp
  80042184e3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042184e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184eb:	ba 07 00 00 00       	mov    $0x7,%edx
  80042184f0:	be 04 00 00 00       	mov    $0x4,%esi
  80042184f5:	48 89 c7             	mov    %rax,%rdi
  80042184f8:	48 b8 79 7e 21 04 80 	movabs $0x8004217e79,%rax
  80042184ff:	00 00 00 
  8004218502:	ff d0                	callq  *%rax
  8004218504:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  800421850b:	e9 ee 01 00 00       	jmpq   80042186fe <pci_func_enable+0x223>
  8004218510:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218513:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218517:	89 d6                	mov    %edx,%esi
  8004218519:	48 89 c7             	mov    %rax,%rdi
  800421851c:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  8004218523:	00 00 00 
  8004218526:	ff d0                	callq  *%rax
  8004218528:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421852b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004218532:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218535:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218539:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800421853e:	89 ce                	mov    %ecx,%esi
  8004218540:	48 89 c7             	mov    %rax,%rdi
  8004218543:	48 b8 79 7e 21 04 80 	movabs $0x8004217e79,%rax
  800421854a:	00 00 00 
  800421854d:	ff d0                	callq  *%rax
  800421854f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218552:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218556:	89 d6                	mov    %edx,%esi
  8004218558:	48 89 c7             	mov    %rax,%rdi
  800421855b:	48 b8 24 7e 21 04 80 	movabs $0x8004217e24,%rax
  8004218562:	00 00 00 
  8004218565:	ff d0                	callq  *%rax
  8004218567:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421856a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421856e:	75 05                	jne    8004218575 <pci_func_enable+0x9a>
  8004218570:	e9 83 01 00 00       	jmpq   80042186f8 <pci_func_enable+0x21d>
  8004218575:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218578:	83 e8 10             	sub    $0x10,%eax
  800421857b:	c1 e8 02             	shr    $0x2,%eax
  800421857e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218581:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218584:	83 e0 01             	and    $0x1,%eax
  8004218587:	85 c0                	test   %eax,%eax
  8004218589:	75 65                	jne    80042185f0 <pci_func_enable+0x115>
  800421858b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421858e:	83 e0 06             	and    $0x6,%eax
  8004218591:	83 f8 04             	cmp    $0x4,%eax
  8004218594:	75 07                	jne    800421859d <pci_func_enable+0xc2>
  8004218596:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  800421859d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042185a0:	83 e0 f0             	and    $0xfffffff0,%eax
  80042185a3:	f7 d8                	neg    %eax
  80042185a5:	23 45 e8             	and    -0x18(%rbp),%eax
  80042185a8:	83 e0 f0             	and    $0xfffffff0,%eax
  80042185ab:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042185ae:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042185b1:	83 e0 f0             	and    $0xfffffff0,%eax
  80042185b4:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042185b7:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  80042185be:	00 00 00 
  80042185c1:	8b 00                	mov    (%rax),%eax
  80042185c3:	85 c0                	test   %eax,%eax
  80042185c5:	74 7a                	je     8004218641 <pci_func_enable+0x166>
  80042185c7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042185ca:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042185cd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042185d0:	89 c6                	mov    %eax,%esi
  80042185d2:	48 bf 70 b7 21 04 80 	movabs $0x800421b770,%rdi
  80042185d9:	00 00 00 
  80042185dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185e1:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  80042185e8:	00 00 00 
  80042185eb:	41 ff d0             	callq  *%r8
  80042185ee:	eb 51                	jmp    8004218641 <pci_func_enable+0x166>
  80042185f0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042185f3:	83 e0 fc             	and    $0xfffffffc,%eax
  80042185f6:	f7 d8                	neg    %eax
  80042185f8:	23 45 e8             	and    -0x18(%rbp),%eax
  80042185fb:	83 e0 fc             	and    $0xfffffffc,%eax
  80042185fe:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218601:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218604:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218607:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421860a:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  8004218611:	00 00 00 
  8004218614:	8b 00                	mov    (%rax),%eax
  8004218616:	85 c0                	test   %eax,%eax
  8004218618:	74 27                	je     8004218641 <pci_func_enable+0x166>
  800421861a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421861d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218620:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218623:	89 c6                	mov    %eax,%esi
  8004218625:	48 bf 98 b7 21 04 80 	movabs $0x800421b798,%rdi
  800421862c:	00 00 00 
  800421862f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218634:	49 b8 1f 95 20 04 80 	movabs $0x800420951f,%r8
  800421863b:	00 00 00 
  800421863e:	41 ff d0             	callq  *%r8
  8004218641:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004218644:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218647:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421864b:	89 ce                	mov    %ecx,%esi
  800421864d:	48 89 c7             	mov    %rax,%rdi
  8004218650:	48 b8 79 7e 21 04 80 	movabs $0x8004217e79,%rax
  8004218657:	00 00 00 
  800421865a:	ff d0                	callq  *%rax
  800421865c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218660:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218663:	48 63 d2             	movslq %edx,%rdx
  8004218666:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421866a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421866d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004218671:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218675:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218678:	48 63 d2             	movslq %edx,%rdx
  800421867b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421867f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218682:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  8004218685:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004218689:	74 6d                	je     80042186f8 <pci_func_enable+0x21d>
  800421868b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421868f:	75 67                	jne    80042186f8 <pci_func_enable+0x21d>
  8004218691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218695:	8b 40 10             	mov    0x10(%rax),%eax
  8004218698:	c1 e8 10             	shr    $0x10,%eax
  800421869b:	41 89 c0             	mov    %eax,%r8d
  800421869e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186a2:	8b 40 10             	mov    0x10(%rax),%eax
  80042186a5:	0f b7 f8             	movzwl %ax,%edi
  80042186a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186ac:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042186af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186b3:	8b 50 08             	mov    0x8(%rax),%edx
  80042186b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186ba:	48 8b 00             	mov    (%rax),%rax
  80042186bd:	8b 40 08             	mov    0x8(%rax),%eax
  80042186c0:	8b 75 f0             	mov    -0x10(%rbp),%esi
  80042186c3:	89 74 24 10          	mov    %esi,0x10(%rsp)
  80042186c7:	8b 75 f4             	mov    -0xc(%rbp),%esi
  80042186ca:	89 74 24 08          	mov    %esi,0x8(%rsp)
  80042186ce:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  80042186d1:	89 34 24             	mov    %esi,(%rsp)
  80042186d4:	45 89 c1             	mov    %r8d,%r9d
  80042186d7:	41 89 f8             	mov    %edi,%r8d
  80042186da:	89 c6                	mov    %eax,%esi
  80042186dc:	48 bf c0 b7 21 04 80 	movabs $0x800421b7c0,%rdi
  80042186e3:	00 00 00 
  80042186e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186eb:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  80042186f2:	00 00 00 
  80042186f5:	41 ff d2             	callq  *%r10
  80042186f8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042186fb:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042186fe:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  8004218702:	0f 86 08 fe ff ff    	jbe    8004218510 <pci_func_enable+0x35>
  8004218708:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421870c:	8b 40 10             	mov    0x10(%rax),%eax
  800421870f:	c1 e8 10             	shr    $0x10,%eax
  8004218712:	89 c7                	mov    %eax,%edi
  8004218714:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218718:	8b 40 10             	mov    0x10(%rax),%eax
  800421871b:	0f b7 f0             	movzwl %ax,%esi
  800421871e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218722:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218725:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218729:	8b 50 08             	mov    0x8(%rax),%edx
  800421872c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218730:	48 8b 00             	mov    (%rax),%rax
  8004218733:	8b 40 08             	mov    0x8(%rax),%eax
  8004218736:	41 89 f9             	mov    %edi,%r9d
  8004218739:	41 89 f0             	mov    %esi,%r8d
  800421873c:	89 c6                	mov    %eax,%esi
  800421873e:	48 bf 20 b8 21 04 80 	movabs $0x800421b820,%rdi
  8004218745:	00 00 00 
  8004218748:	b8 00 00 00 00       	mov    $0x0,%eax
  800421874d:	49 ba 1f 95 20 04 80 	movabs $0x800420951f,%r10
  8004218754:	00 00 00 
  8004218757:	41 ff d2             	callq  *%r10
  800421875a:	c9                   	leaveq 
  800421875b:	c3                   	retq   

000000800421875c <pci_init>:
  800421875c:	55                   	push   %rbp
  800421875d:	48 89 e5             	mov    %rsp,%rbp
  8004218760:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218765:	be 00 00 00 00       	mov    $0x0,%esi
  800421876a:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  8004218771:	00 00 00 
  8004218774:	48 b8 70 ff 20 04 80 	movabs $0x800420ff70,%rax
  800421877b:	00 00 00 
  800421877e:	ff d0                	callq  *%rax
  8004218780:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  8004218787:	00 00 00 
  800421878a:	48 b8 2b 81 21 04 80 	movabs $0x800421812b,%rax
  8004218791:	00 00 00 
  8004218794:	ff d0                	callq  *%rax
  8004218796:	5d                   	pop    %rbp
  8004218797:	c3                   	retq   

0000008004218798 <time_init>:
  8004218798:	55                   	push   %rbp
  8004218799:	48 89 e5             	mov    %rsp,%rbp
  800421879c:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042187a3:	00 00 00 
  80042187a6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042187ac:	5d                   	pop    %rbp
  80042187ad:	c3                   	retq   

00000080042187ae <time_tick>:
  80042187ae:	55                   	push   %rbp
  80042187af:	48 89 e5             	mov    %rsp,%rbp
  80042187b2:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042187b9:	00 00 00 
  80042187bc:	8b 00                	mov    (%rax),%eax
  80042187be:	8d 50 01             	lea    0x1(%rax),%edx
  80042187c1:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042187c8:	00 00 00 
  80042187cb:	89 10                	mov    %edx,(%rax)
  80042187cd:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042187d4:	00 00 00 
  80042187d7:	8b 10                	mov    (%rax),%edx
  80042187d9:	89 d0                	mov    %edx,%eax
  80042187db:	c1 e0 02             	shl    $0x2,%eax
  80042187de:	01 d0                	add    %edx,%eax
  80042187e0:	01 c0                	add    %eax,%eax
  80042187e2:	89 c2                	mov    %eax,%edx
  80042187e4:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042187eb:	00 00 00 
  80042187ee:	8b 00                	mov    (%rax),%eax
  80042187f0:	39 c2                	cmp    %eax,%edx
  80042187f2:	73 2a                	jae    800421881e <time_tick+0x70>
  80042187f4:	48 ba 4f b8 21 04 80 	movabs $0x800421b84f,%rdx
  80042187fb:	00 00 00 
  80042187fe:	be 14 00 00 00       	mov    $0x14,%esi
  8004218803:	48 bf 6a b8 21 04 80 	movabs $0x800421b86a,%rdi
  800421880a:	00 00 00 
  800421880d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218812:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004218819:	00 00 00 
  800421881c:	ff d1                	callq  *%rcx
  800421881e:	5d                   	pop    %rbp
  800421881f:	c3                   	retq   

0000008004218820 <time_msec>:
  8004218820:	55                   	push   %rbp
  8004218821:	48 89 e5             	mov    %rsp,%rbp
  8004218824:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  800421882b:	00 00 00 
  800421882e:	8b 10                	mov    (%rax),%edx
  8004218830:	89 d0                	mov    %edx,%eax
  8004218832:	c1 e0 02             	shl    $0x2,%eax
  8004218835:	01 d0                	add    %edx,%eax
  8004218837:	01 c0                	add    %eax,%eax
  8004218839:	5d                   	pop    %rbp
  800421883a:	c3                   	retq   
