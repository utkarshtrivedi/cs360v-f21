
vmm/guest/obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
_head64:

# Save multiboot_info addr passed by bootloader
#ifdef VMM_GUEST
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
  100000:	b8 01 00 00 00       	mov    $0x1,%eax
    vmcall
  100005:	0f 01 c1             	vmcall 
#endif
	
    movl $multiboot_info, %eax
  100008:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  10000d:	89 18                	mov    %ebx,(%rax)
#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  10000f:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100014:	e8 cc 00 00 00       	callq  1000e5 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
  100019:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif
    movl %eax,%cr4
  10001e:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100021:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100026:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100028:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002d:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  10002f:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100034:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  100039:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  10003f:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100041:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100046:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  100049:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004c:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  10004f:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100054:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  100059:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  10005f:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100061:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100066:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006b:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006e:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100071:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100073:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100078:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007d:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100082:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100088:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008d:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  10008f:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100091:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100094:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100097:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009c:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  10009f:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a2:	75 e9                	jne    10008d <_head64+0x8d>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a4:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000a9:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b1:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b3:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b7:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000b9:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bc:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000bf:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c4:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000c9:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000ce:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d1:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d4:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000d9:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dc:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000de:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e3:	50                   	push   %rax

00000000001000e4 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e4:	cb                   	lret   

00000000001000e5 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e5:	9c                   	pushfq 
    popl %eax
  1000e6:	58                   	pop    %rax
    movl %eax,%ecx
  1000e7:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000e9:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ee:	50                   	push   %rax
    popfl
  1000ef:	9d                   	popfq  
    pushfl
  1000f0:	9c                   	pushfq 
    popl %eax
  1000f1:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f2:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f4:	74 1c                	je     100112 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f6:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fb:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fd:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100100:	72 10                	jb     100112 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100102:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100107:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  100109:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  10010f:	74 01                	je     100112 <verify_cpu_no_longmode>

    ret
  100111:	c3                   	retq   

0000000000100112 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100112:	eb fe                	jmp    100112 <verify_cpu_no_longmode>
  100114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 
  10011e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100125:	00 00 00 
  100128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10012f:	00 00 00 
  100132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100139:	00 00 00 
  10013c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100143:	00 00 00 
  100146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014d:	00 00 00 
  100150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100157:	00 00 00 
  10015a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100161:	00 00 00 
  100164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016b:	00 00 00 
  10016e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100175:	00 00 00 
  100178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10017f:	00 00 00 
  100182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100189:	00 00 00 
  10018c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100193:	00 00 00 
  100196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019d:	00 00 00 
  1001a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a7:	00 00 00 
  1001aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b1:	00 00 00 
  1001b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bb:	00 00 00 
  1001be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c5:	00 00 00 
  1001c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001cf:	00 00 00 
  1001d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d9:	00 00 00 
  1001dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e3:	00 00 00 
  1001e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ed:	00 00 00 
  1001f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f7:	00 00 00 
  1001fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100201:	00 00 00 
  100204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020b:	00 00 00 
  10020e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100215:	00 00 00 
  100218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10021f:	00 00 00 
  100222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100229:	00 00 00 
  10022c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100233:	00 00 00 
  100236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023d:	00 00 00 
  100240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100247:	00 00 00 
  10024a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100251:	00 00 00 
  100254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025b:	00 00 00 
  10025e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100265:	00 00 00 
  100268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10026f:	00 00 00 
  100272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100279:	00 00 00 
  10027c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100283:	00 00 00 
  100286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028d:	00 00 00 
  100290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100297:	00 00 00 
  10029a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a1:	00 00 00 
  1002a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ab:	00 00 00 
  1002ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b5:	00 00 00 
  1002b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002bf:	00 00 00 
  1002c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c9:	00 00 00 
  1002cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d3:	00 00 00 
  1002d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002dd:	00 00 00 
  1002e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e7:	00 00 00 
  1002ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f1:	00 00 00 
  1002f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fb:	00 00 00 
  1002fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100305:	00 00 00 
  100308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10030f:	00 00 00 
  100312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100319:	00 00 00 
  10031c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100323:	00 00 00 
  100326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032d:	00 00 00 
  100330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100337:	00 00 00 
  10033a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100341:	00 00 00 
  100344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034b:	00 00 00 
  10034e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100355:	00 00 00 
  100358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10035f:	00 00 00 
  100362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100369:	00 00 00 
  10036c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100373:	00 00 00 
  100376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037d:	00 00 00 
  100380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100387:	00 00 00 
  10038a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100391:	00 00 00 
  100394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039b:	00 00 00 
  10039e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a5:	00 00 00 
  1003a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003af:	00 00 00 
  1003b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b9:	00 00 00 
  1003bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c3:	00 00 00 
  1003c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003cd:	00 00 00 
  1003d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d7:	00 00 00 
  1003da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e1:	00 00 00 
  1003e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003eb:	00 00 00 
  1003ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f5:	00 00 00 
  1003f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ff:	00 00 00 
  100402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100409:	00 00 00 
  10040c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100413:	00 00 00 
  100416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041d:	00 00 00 
  100420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100427:	00 00 00 
  10042a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100431:	00 00 00 
  100434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043b:	00 00 00 
  10043e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100445:	00 00 00 
  100448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10044f:	00 00 00 
  100452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100459:	00 00 00 
  10045c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100463:	00 00 00 
  100466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046d:	00 00 00 
  100470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100477:	00 00 00 
  10047a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100481:	00 00 00 
  100484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048b:	00 00 00 
  10048e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100495:	00 00 00 
  100498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10049f:	00 00 00 
  1004a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a9:	00 00 00 
  1004ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b3:	00 00 00 
  1004b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004bd:	00 00 00 
  1004c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c7:	00 00 00 
  1004ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d1:	00 00 00 
  1004d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004db:	00 00 00 
  1004de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e5:	00 00 00 
  1004e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004ef:	00 00 00 
  1004f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f9:	00 00 00 
  1004fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100503:	00 00 00 
  100506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050d:	00 00 00 
  100510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100517:	00 00 00 
  10051a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100521:	00 00 00 
  100524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052b:	00 00 00 
  10052e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100535:	00 00 00 
  100538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10053f:	00 00 00 
  100542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100549:	00 00 00 
  10054c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100553:	00 00 00 
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055d:	00 00 00 
  100560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100567:	00 00 00 
  10056a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100571:	00 00 00 
  100574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057b:	00 00 00 
  10057e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100585:	00 00 00 
  100588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10058f:	00 00 00 
  100592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100599:	00 00 00 
  10059c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a3:	00 00 00 
  1005a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ad:	00 00 00 
  1005b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b7:	00 00 00 
  1005ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c1:	00 00 00 
  1005c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cb:	00 00 00 
  1005ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d5:	00 00 00 
  1005d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005df:	00 00 00 
  1005e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e9:	00 00 00 
  1005ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f3:	00 00 00 
  1005f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fd:	00 00 00 
  100600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100607:	00 00 00 
  10060a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100611:	00 00 00 
  100614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061b:	00 00 00 
  10061e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100625:	00 00 00 
  100628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10062f:	00 00 00 
  100632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100639:	00 00 00 
  10063c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100643:	00 00 00 
  100646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064d:	00 00 00 
  100650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100657:	00 00 00 
  10065a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100661:	00 00 00 
  100664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066b:	00 00 00 
  10066e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100675:	00 00 00 
  100678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10067f:	00 00 00 
  100682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100689:	00 00 00 
  10068c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100693:	00 00 00 
  100696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069d:	00 00 00 
  1006a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a7:	00 00 00 
  1006aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b1:	00 00 00 
  1006b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bb:	00 00 00 
  1006be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c5:	00 00 00 
  1006c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006cf:	00 00 00 
  1006d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d9:	00 00 00 
  1006dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e3:	00 00 00 
  1006e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ed:	00 00 00 
  1006f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f7:	00 00 00 
  1006fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100701:	00 00 00 
  100704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070b:	00 00 00 
  10070e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100715:	00 00 00 
  100718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10071f:	00 00 00 
  100722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100729:	00 00 00 
  10072c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100733:	00 00 00 
  100736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073d:	00 00 00 
  100740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100747:	00 00 00 
  10074a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100751:	00 00 00 
  100754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075b:	00 00 00 
  10075e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100765:	00 00 00 
  100768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10076f:	00 00 00 
  100772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100779:	00 00 00 
  10077c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100783:	00 00 00 
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078d:	00 00 00 
  100790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100797:	00 00 00 
  10079a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a1:	00 00 00 
  1007a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ab:	00 00 00 
  1007ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b5:	00 00 00 
  1007b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007bf:	00 00 00 
  1007c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c9:	00 00 00 
  1007cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d3:	00 00 00 
  1007d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007dd:	00 00 00 
  1007e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e7:	00 00 00 
  1007ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f1:	00 00 00 
  1007f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fb:	00 00 00 
  1007fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100805:	00 00 00 
  100808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10080f:	00 00 00 
  100812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100819:	00 00 00 
  10081c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100823:	00 00 00 
  100826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082d:	00 00 00 
  100830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100837:	00 00 00 
  10083a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100841:	00 00 00 
  100844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084b:	00 00 00 
  10084e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100855:	00 00 00 
  100858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10085f:	00 00 00 
  100862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100869:	00 00 00 
  10086c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100873:	00 00 00 
  100876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087d:	00 00 00 
  100880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100887:	00 00 00 
  10088a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100891:	00 00 00 
  100894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089b:	00 00 00 
  10089e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a5:	00 00 00 
  1008a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008af:	00 00 00 
  1008b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b9:	00 00 00 
  1008bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c3:	00 00 00 
  1008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008cd:	00 00 00 
  1008d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d7:	00 00 00 
  1008da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e1:	00 00 00 
  1008e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008eb:	00 00 00 
  1008ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f5:	00 00 00 
  1008f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ff:	00 00 00 
  100902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100909:	00 00 00 
  10090c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100913:	00 00 00 
  100916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091d:	00 00 00 
  100920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100927:	00 00 00 
  10092a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100931:	00 00 00 
  100934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093b:	00 00 00 
  10093e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100945:	00 00 00 
  100948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10094f:	00 00 00 
  100952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100959:	00 00 00 
  10095c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100963:	00 00 00 
  100966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096d:	00 00 00 
  100970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100977:	00 00 00 
  10097a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100981:	00 00 00 
  100984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098b:	00 00 00 
  10098e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100995:	00 00 00 
  100998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10099f:	00 00 00 
  1009a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a9:	00 00 00 
  1009ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b3:	00 00 00 
  1009b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009bd:	00 00 00 
  1009c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c7:	00 00 00 
  1009ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d1:	00 00 00 
  1009d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009db:	00 00 00 
  1009de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e5:	00 00 00 
  1009e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009ef:	00 00 00 
  1009f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f9:	00 00 00 
  1009fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a03:	00 00 00 
  100a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0d:	00 00 00 
  100a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a17:	00 00 00 
  100a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a21:	00 00 00 
  100a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2b:	00 00 00 
  100a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a35:	00 00 00 
  100a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a3f:	00 00 00 
  100a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a49:	00 00 00 
  100a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a53:	00 00 00 
  100a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5d:	00 00 00 
  100a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a67:	00 00 00 
  100a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a71:	00 00 00 
  100a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7b:	00 00 00 
  100a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a85:	00 00 00 
  100a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a8f:	00 00 00 
  100a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a99:	00 00 00 
  100a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa3:	00 00 00 
  100aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aad:	00 00 00 
  100ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab7:	00 00 00 
  100aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac1:	00 00 00 
  100ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acb:	00 00 00 
  100ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad5:	00 00 00 
  100ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100adf:	00 00 00 
  100ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae9:	00 00 00 
  100aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af3:	00 00 00 
  100af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afd:	00 00 00 
  100b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b07:	00 00 00 
  100b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b11:	00 00 00 
  100b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1b:	00 00 00 
  100b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b25:	00 00 00 
  100b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b2f:	00 00 00 
  100b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b39:	00 00 00 
  100b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b43:	00 00 00 
  100b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4d:	00 00 00 
  100b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b57:	00 00 00 
  100b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b61:	00 00 00 
  100b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6b:	00 00 00 
  100b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b75:	00 00 00 
  100b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b7f:	00 00 00 
  100b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b89:	00 00 00 
  100b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b93:	00 00 00 
  100b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9d:	00 00 00 
  100ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba7:	00 00 00 
  100baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb1:	00 00 00 
  100bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbb:	00 00 00 
  100bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc5:	00 00 00 
  100bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bcf:	00 00 00 
  100bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd9:	00 00 00 
  100bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be3:	00 00 00 
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bed:	00 00 00 
  100bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf7:	00 00 00 
  100bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c01:	00 00 00 
  100c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0b:	00 00 00 
  100c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c15:	00 00 00 
  100c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c1f:	00 00 00 
  100c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c29:	00 00 00 
  100c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c33:	00 00 00 
  100c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3d:	00 00 00 
  100c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c47:	00 00 00 
  100c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c51:	00 00 00 
  100c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5b:	00 00 00 
  100c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c65:	00 00 00 
  100c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6f:	00 00 00 
  100c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c79:	00 00 00 
  100c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c83:	00 00 00 
  100c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8d:	00 00 00 
  100c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c97:	00 00 00 
  100c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca1:	00 00 00 
  100ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cab:	00 00 00 
  100cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb5:	00 00 00 
  100cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cbf:	00 00 00 
  100cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc9:	00 00 00 
  100ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd3:	00 00 00 
  100cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cdd:	00 00 00 
  100ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce7:	00 00 00 
  100cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf1:	00 00 00 
  100cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfb:	00 00 00 
  100cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d05:	00 00 00 
  100d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d0f:	00 00 00 
  100d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d19:	00 00 00 
  100d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d23:	00 00 00 
  100d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2d:	00 00 00 
  100d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d37:	00 00 00 
  100d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d41:	00 00 00 
  100d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4b:	00 00 00 
  100d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d55:	00 00 00 
  100d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d5f:	00 00 00 
  100d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d69:	00 00 00 
  100d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d73:	00 00 00 
  100d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7d:	00 00 00 
  100d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d87:	00 00 00 
  100d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d91:	00 00 00 
  100d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9b:	00 00 00 
  100d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da5:	00 00 00 
  100da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100daf:	00 00 00 
  100db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db9:	00 00 00 
  100dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc3:	00 00 00 
  100dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dcd:	00 00 00 
  100dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd7:	00 00 00 
  100dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de1:	00 00 00 
  100de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100deb:	00 00 00 
  100dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df5:	00 00 00 
  100df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dff:	00 00 00 
  100e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e09:	00 00 00 
  100e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e13:	00 00 00 
  100e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1d:	00 00 00 
  100e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e27:	00 00 00 
  100e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e31:	00 00 00 
  100e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3b:	00 00 00 
  100e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e45:	00 00 00 
  100e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e4f:	00 00 00 
  100e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e59:	00 00 00 
  100e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e63:	00 00 00 
  100e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6d:	00 00 00 
  100e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e77:	00 00 00 
  100e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e81:	00 00 00 
  100e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8b:	00 00 00 
  100e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e95:	00 00 00 
  100e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e9f:	00 00 00 
  100ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea9:	00 00 00 
  100eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb3:	00 00 00 
  100eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebd:	00 00 00 
  100ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec7:	00 00 00 
  100eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed1:	00 00 00 
  100ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edb:	00 00 00 
  100ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee5:	00 00 00 
  100ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eef:	00 00 00 
  100ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef9:	00 00 00 
  100efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f03:	00 00 00 
  100f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0d:	00 00 00 
  100f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f17:	00 00 00 
  100f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f21:	00 00 00 
  100f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2b:	00 00 00 
  100f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f35:	00 00 00 
  100f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f3f:	00 00 00 
  100f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f49:	00 00 00 
  100f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f53:	00 00 00 
  100f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5d:	00 00 00 
  100f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f67:	00 00 00 
  100f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f71:	00 00 00 
  100f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7b:	00 00 00 
  100f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f85:	00 00 00 
  100f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f8f:	00 00 00 
  100f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f99:	00 00 00 
  100f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa3:	00 00 00 
  100fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fad:	00 00 00 
  100fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb7:	00 00 00 
  100fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc1:	00 00 00 
  100fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcb:	00 00 00 
  100fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd5:	00 00 00 
  100fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fdf:	00 00 00 
  100fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe9:	00 00 00 
  100fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff3:	00 00 00 
  100ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ffd:	00 00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 c0 22 04 80 	movabs $0x800422c038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 c0 22 04 80 	movabs $0x800422c000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 9e 01 20 04 80 	movabs $0x800420019e,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	53                   	push   %rbx
  800420005d:	48 83 ec 38          	sub    $0x38,%rsp
  8004200061:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004200064:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004200068:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420006c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200070:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004200074:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200077:	0f a2                	cpuid  
  8004200079:	89 de                	mov    %ebx,%esi
  800420007b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420007e:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004200081:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004200084:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004200087:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420008c:	74 09                	je     8004200097 <cpuid+0x3f>
		*eaxp = eax;
  800420008e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200092:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200095:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004200097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420009c:	74 09                	je     80042000a7 <cpuid+0x4f>
		*ebxp = ebx;
  800420009e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042000a2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042000a5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042000a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042000ac:	74 09                	je     80042000b7 <cpuid+0x5f>
		*ecxp = ecx;
  80042000ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042000b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042000b5:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042000b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042000bc:	74 09                	je     80042000c7 <cpuid+0x6f>
		*edxp = edx;
  80042000be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042000c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042000c5:	89 10                	mov    %edx,(%rax)
}
  80042000c7:	48 83 c4 38          	add    $0x38,%rsp
  80042000cb:	5b                   	pop    %rbx
  80042000cc:	5d                   	pop    %rbp
  80042000cd:	c3                   	retq   

00000080042000ce <xchg>:

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042000ce:	55                   	push   %rbp
  80042000cf:	48 89 e5             	mov    %rsp,%rbp
  80042000d2:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042000d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042000da:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042000dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042000e1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042000e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042000e8:	f0 87 02             	lock xchg %eax,(%rdx)
  80042000eb:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042000ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042000f1:	c9                   	leaveq 
  80042000f2:	c3                   	retq   

00000080042000f3 <lock_kernel>:
  80042000f3:	55                   	push   %rbp
  80042000f4:	48 89 e5             	mov    %rsp,%rbp
  80042000f7:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042000fe:	00 00 00 
  8004200101:	48 b8 ad 73 21 04 80 	movabs $0x80042173ad,%rax
  8004200108:	00 00 00 
  800420010b:	ff d0                	callq  *%rax
  800420010d:	5d                   	pop    %rbp
  800420010e:	c3                   	retq   

000000800420010f <vmcall>:
  800420010f:	55                   	push   %rbp
  8004200110:	48 89 e5             	mov    %rsp,%rbp
  8004200113:	53                   	push   %rbx
  8004200114:	48 83 ec 48          	sub    $0x48,%rsp
  8004200118:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420011b:	89 75 d8             	mov    %esi,-0x28(%rbp)
  800420011e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004200122:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200126:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  800420012a:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  800420012e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200131:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004200135:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004200139:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  800420013d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004200141:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004200145:	4c 89 c3             	mov    %r8,%rbx
  8004200148:	0f 01 c1             	vmcall 
  800420014b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420014f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004200153:	74 3e                	je     8004200193 <vmcall+0x84>
  8004200155:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420015a:	7e 37                	jle    8004200193 <vmcall+0x84>
  800420015c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004200160:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200163:	49 89 d0             	mov    %rdx,%r8
  8004200166:	89 c1                	mov    %eax,%ecx
  8004200168:	48 ba 00 89 21 04 80 	movabs $0x8004218900,%rdx
  800420016f:	00 00 00 
  8004200172:	be 35 00 00 00       	mov    $0x35,%esi
  8004200177:	48 bf 1c 89 21 04 80 	movabs $0x800421891c,%rdi
  800420017e:	00 00 00 
  8004200181:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200186:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800420018d:	00 00 00 
  8004200190:	41 ff d1             	callq  *%r9
  8004200193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200197:	48 83 c4 48          	add    $0x48,%rsp
  800420019b:	5b                   	pop    %rbx
  800420019c:	5d                   	pop    %rbp
  800420019d:	c3                   	retq   

000000800420019e <i386_init>:
  800420019e:	55                   	push   %rbp
  800420019f:	48 89 e5             	mov    %rsp,%rbp
  80042001a2:	48 83 ec 10          	sub    $0x10,%rsp
  80042001a6:	48 ba 10 e0 6d 04 80 	movabs $0x80046de010,%rdx
  80042001ad:	00 00 00 
  80042001b0:	48 b8 a0 be 49 04 80 	movabs $0x800449bea0,%rax
  80042001b7:	00 00 00 
  80042001ba:	48 29 c2             	sub    %rax,%rdx
  80042001bd:	48 89 d0             	mov    %rdx,%rax
  80042001c0:	48 89 c2             	mov    %rax,%rdx
  80042001c3:	be 00 00 00 00       	mov    $0x0,%esi
  80042001c8:	48 bf a0 be 49 04 80 	movabs $0x800449bea0,%rdi
  80042001cf:	00 00 00 
  80042001d2:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042001d9:	00 00 00 
  80042001dc:	ff d0                	callq  *%rax
  80042001de:	48 b8 e1 12 20 04 80 	movabs $0x80042012e1,%rax
  80042001e5:	00 00 00 
  80042001e8:	ff d0                	callq  *%rax
  80042001ea:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042001ef:	48 bf 2b 89 21 04 80 	movabs $0x800421892b,%rdi
  80042001f6:	00 00 00 
  80042001f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042001fe:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004200205:	00 00 00 
  8004200208:	ff d2                	callq  *%rdx
  800420020a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200211:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004200215:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420021b:	48 89 c1             	mov    %rax,%rcx
  800420021e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004200223:	be 00 00 00 00       	mov    $0x0,%esi
  8004200228:	bf 01 00 00 00       	mov    $0x1,%edi
  800420022d:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200234:	00 00 00 
  8004200237:	ff d0                	callq  *%rax
  8004200239:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420023c:	83 e0 20             	and    $0x20,%eax
  800420023f:	85 c0                	test   %eax,%eax
  8004200241:	74 2a                	je     800420026d <i386_init+0xcf>
  8004200243:	48 ba 48 89 21 04 80 	movabs $0x8004218948,%rdx
  800420024a:	00 00 00 
  800420024d:	be 68 00 00 00       	mov    $0x68,%esi
  8004200252:	48 bf 1c 89 21 04 80 	movabs $0x800421891c,%rdi
  8004200259:	00 00 00 
  800420025c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200261:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004200268:	00 00 00 
  800420026b:	ff d1                	callq  *%rcx
  800420026d:	48 bf 70 89 21 04 80 	movabs $0x8004218970,%rdi
  8004200274:	00 00 00 
  8004200277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420027c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004200283:	00 00 00 
  8004200286:	ff d2                	callq  *%rdx
  8004200288:	b8 00 00 00 00       	mov    $0x0,%eax
  800420028d:	48 ba 76 27 20 04 80 	movabs $0x8004202776,%rdx
  8004200294:	00 00 00 
  8004200297:	ff d2                	callq  *%rdx
  8004200299:	48 b8 e7 80 20 04 80 	movabs $0x80042080e7,%rax
  80042002a0:	00 00 00 
  80042002a3:	ff d0                	callq  *%rax
  80042002a5:	48 b8 3b 97 20 04 80 	movabs $0x800420973b,%rax
  80042002ac:	00 00 00 
  80042002af:	ff d0                	callq  *%rax
  80042002b1:	48 b8 c3 92 20 04 80 	movabs $0x80042092c3,%rax
  80042002b8:	00 00 00 
  80042002bb:	ff d0                	callq  *%rax
  80042002bd:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042002c4:	00 00 00 
  80042002c7:	ff d0                	callq  *%rax
  80042002c9:	be 01 00 00 00       	mov    $0x1,%esi
  80042002ce:	48 bf 20 59 2b 04 80 	movabs $0x80042b5920,%rdi
  80042002d5:	00 00 00 
  80042002d8:	48 b8 77 89 20 04 80 	movabs $0x8004208977,%rax
  80042002df:	00 00 00 
  80042002e2:	ff d0                	callq  *%rax
  80042002e4:	be 00 00 00 00       	mov    $0x0,%esi
  80042002e9:	48 bf 40 d8 29 04 80 	movabs $0x800429d840,%rdi
  80042002f0:	00 00 00 
  80042002f3:	48 b8 77 89 20 04 80 	movabs $0x8004208977,%rax
  80042002fa:	00 00 00 
  80042002fd:	ff d0                	callq  *%rax
  80042002ff:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004200306:	00 00 00 
  8004200309:	ff d0                	callq  *%rax
  800420030b:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  8004200312:	00 00 00 
  8004200315:	ff d0                	callq  *%rax

0000008004200317 <boot_aps>:
  8004200317:	55                   	push   %rbp
  8004200318:	48 89 e5             	mov    %rsp,%rbp
  800420031b:	48 83 ec 30          	sub    $0x30,%rsp
  800420031f:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200326:	00 
  8004200327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420032b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420032f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200332:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200335:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420033c:	00 00 00 
  800420033f:	48 8b 00             	mov    (%rax),%rax
  8004200342:	48 39 c2             	cmp    %rax,%rdx
  8004200345:	72 32                	jb     8004200379 <boot_aps+0x62>
  8004200347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420034b:	48 89 c1             	mov    %rax,%rcx
  800420034e:	48 ba 98 89 21 04 80 	movabs $0x8004218998,%rdx
  8004200355:	00 00 00 
  8004200358:	be 01 01 00 00       	mov    $0x101,%esi
  800420035d:	48 bf 1c 89 21 04 80 	movabs $0x800421891c,%rdi
  8004200364:	00 00 00 
  8004200367:	b8 00 00 00 00       	mov    $0x0,%eax
  800420036c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004200373:	00 00 00 
  8004200376:	41 ff d0             	callq  *%r8
  8004200379:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200380:	00 00 00 
  8004200383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200387:	48 01 d0             	add    %rdx,%rax
  800420038a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420038e:	48 ba f6 64 21 04 80 	movabs $0x80042164f6,%rdx
  8004200395:	00 00 00 
  8004200398:	48 b8 10 64 21 04 80 	movabs $0x8004216410,%rax
  800420039f:	00 00 00 
  80042003a2:	48 29 c2             	sub    %rax,%rdx
  80042003a5:	48 89 d0             	mov    %rdx,%rax
  80042003a8:	48 89 c2             	mov    %rax,%rdx
  80042003ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042003af:	48 be 10 64 21 04 80 	movabs $0x8004216410,%rsi
  80042003b6:	00 00 00 
  80042003b9:	48 89 c7             	mov    %rax,%rdi
  80042003bc:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  80042003c3:	00 00 00 
  80042003c6:	ff d0                	callq  *%rax
  80042003c8:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003cf:	00 00 00 
  80042003d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042003d6:	e9 0e 01 00 00       	jmpq   80042004e9 <boot_aps+0x1d2>
  80042003db:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  80042003e2:	00 00 00 
  80042003e5:	ff d0                	callq  *%rax
  80042003e7:	48 98                	cltq   
  80042003e9:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ed:	48 89 c2             	mov    %rax,%rdx
  80042003f0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f4:	48 01 c2             	add    %rax,%rdx
  80042003f7:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  80042003fe:	00 00 00 
  8004200401:	48 01 d0             	add    %rdx,%rax
  8004200404:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200408:	75 05                	jne    800420040f <boot_aps+0xf8>
  800420040a:	e9 d2 00 00 00       	jmpq   80042004e1 <boot_aps+0x1ca>
  800420040f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200413:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420041a:	00 00 00 
  800420041d:	48 29 c2             	sub    %rax,%rdx
  8004200420:	48 89 d0             	mov    %rdx,%rax
  8004200423:	48 c1 f8 03          	sar    $0x3,%rax
  8004200427:	48 89 c2             	mov    %rax,%rdx
  800420042a:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200431:	f0 f0 f0 
  8004200434:	48 0f af c2          	imul   %rdx,%rax
  8004200438:	48 83 c0 01          	add    $0x1,%rax
  800420043c:	48 c1 e0 10          	shl    $0x10,%rax
  8004200440:	48 89 c2             	mov    %rax,%rdx
  8004200443:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  800420044a:	00 00 00 
  800420044d:	48 01 c2             	add    %rax,%rdx
  8004200450:	48 b8 d8 b5 69 04 80 	movabs $0x800469b5d8,%rax
  8004200457:	00 00 00 
  800420045a:	48 89 10             	mov    %rdx,(%rax)
  800420045d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200461:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200465:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420046c:	00 00 00 
  800420046f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200473:	77 32                	ja     80042004a7 <boot_aps+0x190>
  8004200475:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200479:	48 89 c1             	mov    %rax,%rcx
  800420047c:	48 ba c0 89 21 04 80 	movabs $0x80042189c0,%rdx
  8004200483:	00 00 00 
  8004200486:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420048b:	48 bf 1c 89 21 04 80 	movabs $0x800421891c,%rdi
  8004200492:	00 00 00 
  8004200495:	b8 00 00 00 00       	mov    $0x0,%eax
  800420049a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042004a1:	00 00 00 
  80042004a4:	41 ff d0             	callq  *%r8
  80042004a7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042004ae:	ff ff ff 
  80042004b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042004b5:	48 01 d0             	add    %rdx,%rax
  80042004b8:	89 c2                	mov    %eax,%edx
  80042004ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004be:	0f b6 00             	movzbl (%rax),%eax
  80042004c1:	0f b6 c0             	movzbl %al,%eax
  80042004c4:	89 d6                	mov    %edx,%esi
  80042004c6:	89 c7                	mov    %eax,%edi
  80042004c8:	48 b8 92 70 21 04 80 	movabs $0x8004217092,%rax
  80042004cf:	00 00 00 
  80042004d2:	ff d0                	callq  *%rax
  80042004d4:	90                   	nop
  80042004d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004d9:	8b 40 04             	mov    0x4(%rax),%eax
  80042004dc:	83 f8 01             	cmp    $0x1,%eax
  80042004df:	75 f4                	jne    80042004d5 <boot_aps+0x1be>
  80042004e1:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042004e8:	00 
  80042004e9:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  80042004f0:	00 00 00 
  80042004f3:	8b 00                	mov    (%rax),%eax
  80042004f5:	48 98                	cltq   
  80042004f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042004fb:	48 89 c2             	mov    %rax,%rdx
  80042004fe:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200502:	48 01 c2             	add    %rax,%rdx
  8004200505:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420050c:	00 00 00 
  800420050f:	48 01 d0             	add    %rdx,%rax
  8004200512:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200516:	0f 87 bf fe ff ff    	ja     80042003db <boot_aps+0xc4>
  800420051c:	c9                   	leaveq 
  800420051d:	c3                   	retq   

000000800420051e <mp_main>:
  800420051e:	55                   	push   %rbp
  800420051f:	48 89 e5             	mov    %rsp,%rbp
  8004200522:	48 83 ec 10          	sub    $0x10,%rsp
  8004200526:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420052d:	00 00 00 
  8004200530:	48 8b 00             	mov    (%rax),%rax
  8004200533:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420053b:	0f 22 d8             	mov    %rax,%cr3
  800420053e:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004200545:	00 00 00 
  8004200548:	ff d0                	callq  *%rax
  800420054a:	89 c6                	mov    %eax,%esi
  800420054c:	48 bf e4 89 21 04 80 	movabs $0x80042189e4,%rdi
  8004200553:	00 00 00 
  8004200556:	b8 00 00 00 00       	mov    $0x0,%eax
  800420055b:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004200562:	00 00 00 
  8004200565:	ff d2                	callq  *%rdx
  8004200567:	48 b8 2b 6e 21 04 80 	movabs $0x8004216e2b,%rax
  800420056e:	00 00 00 
  8004200571:	ff d0                	callq  *%rax
  8004200573:	48 b8 b4 81 20 04 80 	movabs $0x80042081b4,%rax
  800420057a:	00 00 00 
  800420057d:	ff d0                	callq  *%rax
  800420057f:	48 b8 3e be 20 04 80 	movabs $0x800420be3e,%rax
  8004200586:	00 00 00 
  8004200589:	ff d0                	callq  *%rax
  800420058b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004200592:	00 00 00 
  8004200595:	ff d0                	callq  *%rax
  8004200597:	48 98                	cltq   
  8004200599:	48 c1 e0 03          	shl    $0x3,%rax
  800420059d:	48 89 c2             	mov    %rax,%rdx
  80042005a0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042005a4:	48 01 d0             	add    %rdx,%rax
  80042005a7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042005ae:	00 00 00 
  80042005b1:	48 01 d0             	add    %rdx,%rax
  80042005b4:	48 83 c0 04          	add    $0x4,%rax
  80042005b8:	be 01 00 00 00       	mov    $0x1,%esi
  80042005bd:	48 89 c7             	mov    %rax,%rdi
  80042005c0:	48 b8 ce 00 20 04 80 	movabs $0x80042000ce,%rax
  80042005c7:	00 00 00 
  80042005ca:	ff d0                	callq  *%rax
  80042005cc:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042005d3:	00 00 00 
  80042005d6:	ff d0                	callq  *%rax
  80042005d8:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  80042005df:	00 00 00 
  80042005e2:	ff d0                	callq  *%rax

00000080042005e4 <_panic>:
  80042005e4:	55                   	push   %rbp
  80042005e5:	48 89 e5             	mov    %rsp,%rbp
  80042005e8:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042005ef:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042005f6:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042005fc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004200603:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420060a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200611:	84 c0                	test   %al,%al
  8004200613:	74 20                	je     8004200635 <_panic+0x51>
  8004200615:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200619:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420061d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200621:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200625:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200629:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420062d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200631:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200635:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420063c:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  8004200643:	00 00 00 
  8004200646:	48 8b 00             	mov    (%rax),%rax
  8004200649:	48 85 c0             	test   %rax,%rax
  800420064c:	74 05                	je     8004200653 <_panic+0x6f>
  800420064e:	e9 b5 00 00 00       	jmpq   8004200708 <_panic+0x124>
  8004200653:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420065a:	00 00 00 
  800420065d:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200664:	48 89 10             	mov    %rdx,(%rax)
  8004200667:	fa                   	cli    
  8004200668:	fc                   	cld    
  8004200669:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200670:	00 00 00 
  8004200673:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420067a:	00 00 00 
  800420067d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200681:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200688:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200696:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420069d:	00 00 00 
  80042006a0:	ff d0                	callq  *%rax
  80042006a2:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  80042006a8:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042006af:	89 c6                	mov    %eax,%esi
  80042006b1:	48 bf 00 8a 21 04 80 	movabs $0x8004218a00,%rdi
  80042006b8:	00 00 00 
  80042006bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006c0:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  80042006c7:	00 00 00 
  80042006ca:	41 ff d0             	callq  *%r8
  80042006cd:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006d4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006db:	48 89 d6             	mov    %rdx,%rsi
  80042006de:	48 89 c7             	mov    %rax,%rdi
  80042006e1:	48 b8 64 95 20 04 80 	movabs $0x8004209564,%rax
  80042006e8:	00 00 00 
  80042006eb:	ff d0                	callq  *%rax
  80042006ed:	48 bf 22 8a 21 04 80 	movabs $0x8004218a22,%rdi
  80042006f4:	00 00 00 
  80042006f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006fc:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004200703:	00 00 00 
  8004200706:	ff d2                	callq  *%rdx
  8004200708:	bf 00 00 00 00       	mov    $0x0,%edi
  800420070d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  8004200714:	00 00 00 
  8004200717:	ff d0                	callq  *%rax
  8004200719:	eb ed                	jmp    8004200708 <_panic+0x124>

000000800420071b <_warn>:
  800420071b:	55                   	push   %rbp
  800420071c:	48 89 e5             	mov    %rsp,%rbp
  800420071f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200726:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420072d:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200733:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420073a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200741:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200748:	84 c0                	test   %al,%al
  800420074a:	74 20                	je     800420076c <_warn+0x51>
  800420074c:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200750:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200754:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200758:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420075c:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200760:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200764:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200768:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420076c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200773:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420077a:	00 00 00 
  800420077d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200784:	00 00 00 
  8004200787:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420078b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200792:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200799:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042007a0:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042007a6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042007ad:	48 89 c6             	mov    %rax,%rsi
  80042007b0:	48 bf 24 8a 21 04 80 	movabs $0x8004218a24,%rdi
  80042007b7:	00 00 00 
  80042007ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007bf:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  80042007c6:	00 00 00 
  80042007c9:	ff d1                	callq  *%rcx
  80042007cb:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042007d2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042007d9:	48 89 d6             	mov    %rdx,%rsi
  80042007dc:	48 89 c7             	mov    %rax,%rdi
  80042007df:	48 b8 64 95 20 04 80 	movabs $0x8004209564,%rax
  80042007e6:	00 00 00 
  80042007e9:	ff d0                	callq  *%rax
  80042007eb:	48 bf 22 8a 21 04 80 	movabs $0x8004218a22,%rdi
  80042007f2:	00 00 00 
  80042007f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007fa:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004200801:	00 00 00 
  8004200804:	ff d2                	callq  *%rdx
  8004200806:	c9                   	leaveq 
  8004200807:	c3                   	retq   

0000008004200808 <delay>:
  8004200808:	55                   	push   %rbp
  8004200809:	48 89 e5             	mov    %rsp,%rbp
  800420080c:	48 83 ec 20          	sub    $0x20,%rsp
  8004200810:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200817:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420081a:	89 c2                	mov    %eax,%edx
  800420081c:	ec                   	in     (%dx),%al
  800420081d:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200820:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200827:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420082a:	89 c2                	mov    %eax,%edx
  800420082c:	ec                   	in     (%dx),%al
  800420082d:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200830:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200837:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420083a:	89 c2                	mov    %eax,%edx
  800420083c:	ec                   	in     (%dx),%al
  800420083d:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200840:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200847:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420084a:	89 c2                	mov    %eax,%edx
  800420084c:	ec                   	in     (%dx),%al
  800420084d:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200850:	c9                   	leaveq 
  8004200851:	c3                   	retq   

0000008004200852 <serial_proc_data>:
  8004200852:	55                   	push   %rbp
  8004200853:	48 89 e5             	mov    %rsp,%rbp
  8004200856:	48 83 ec 10          	sub    $0x10,%rsp
  800420085a:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200861:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200864:	89 c2                	mov    %eax,%edx
  8004200866:	ec                   	in     (%dx),%al
  8004200867:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420086a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420086e:	0f b6 c0             	movzbl %al,%eax
  8004200871:	83 e0 01             	and    $0x1,%eax
  8004200874:	85 c0                	test   %eax,%eax
  8004200876:	75 07                	jne    800420087f <serial_proc_data+0x2d>
  8004200878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420087d:	eb 17                	jmp    8004200896 <serial_proc_data+0x44>
  800420087f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200886:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200889:	89 c2                	mov    %eax,%edx
  800420088b:	ec                   	in     (%dx),%al
  800420088c:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420088f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200893:	0f b6 c0             	movzbl %al,%eax
  8004200896:	c9                   	leaveq 
  8004200897:	c3                   	retq   

0000008004200898 <serial_intr>:
  8004200898:	55                   	push   %rbp
  8004200899:	48 89 e5             	mov    %rsp,%rbp
  800420089c:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042008a3:	00 00 00 
  80042008a6:	0f b6 00             	movzbl (%rax),%eax
  80042008a9:	84 c0                	test   %al,%al
  80042008ab:	74 16                	je     80042008c3 <serial_intr+0x2b>
  80042008ad:	48 bf 52 08 20 04 80 	movabs $0x8004200852,%rdi
  80042008b4:	00 00 00 
  80042008b7:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  80042008be:	00 00 00 
  80042008c1:	ff d0                	callq  *%rax
  80042008c3:	5d                   	pop    %rbp
  80042008c4:	c3                   	retq   

00000080042008c5 <serial_putc>:
  80042008c5:	55                   	push   %rbp
  80042008c6:	48 89 e5             	mov    %rsp,%rbp
  80042008c9:	48 83 ec 28          	sub    $0x28,%rsp
  80042008cd:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042008d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042008d7:	eb 10                	jmp    80042008e9 <serial_putc+0x24>
  80042008d9:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  80042008e0:	00 00 00 
  80042008e3:	ff d0                	callq  *%rax
  80042008e5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042008e9:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008f0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042008f3:	89 c2                	mov    %eax,%edx
  80042008f5:	ec                   	in     (%dx),%al
  80042008f6:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042008f9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042008fd:	0f b6 c0             	movzbl %al,%eax
  8004200900:	83 e0 20             	and    $0x20,%eax
  8004200903:	85 c0                	test   %eax,%eax
  8004200905:	75 09                	jne    8004200910 <serial_putc+0x4b>
  8004200907:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420090e:	7e c9                	jle    80042008d9 <serial_putc+0x14>
  8004200910:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200913:	0f b6 c0             	movzbl %al,%eax
  8004200916:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420091d:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200920:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200924:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200927:	ee                   	out    %al,(%dx)
  8004200928:	c9                   	leaveq 
  8004200929:	c3                   	retq   

000000800420092a <serial_init>:
  800420092a:	55                   	push   %rbp
  800420092b:	48 89 e5             	mov    %rsp,%rbp
  800420092e:	48 83 ec 50          	sub    $0x50,%rsp
  8004200932:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  8004200939:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420093d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200941:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200944:	ee                   	out    %al,(%dx)
  8004200945:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420094c:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200950:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200954:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200957:	ee                   	out    %al,(%dx)
  8004200958:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  800420095f:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200963:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200967:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420096a:	ee                   	out    %al,(%dx)
  800420096b:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200972:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200976:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420097a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420097d:	ee                   	out    %al,(%dx)
  800420097e:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200985:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  8004200989:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420098d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200990:	ee                   	out    %al,(%dx)
  8004200991:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200998:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420099c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042009a0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042009a3:	ee                   	out    %al,(%dx)
  80042009a4:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  80042009ab:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042009af:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042009b3:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042009b6:	ee                   	out    %al,(%dx)
  80042009b7:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009be:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042009c1:	89 c2                	mov    %eax,%edx
  80042009c3:	ec                   	in     (%dx),%al
  80042009c4:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042009c7:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042009cb:	3c ff                	cmp    $0xff,%al
  80042009cd:	0f 95 c2             	setne  %dl
  80042009d0:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  80042009d7:	00 00 00 
  80042009da:	88 10                	mov    %dl,(%rax)
  80042009dc:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009e3:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042009e6:	89 c2                	mov    %eax,%edx
  80042009e8:	ec                   	in     (%dx),%al
  80042009e9:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042009ec:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042009f3:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042009f6:	89 c2                	mov    %eax,%edx
  80042009f8:	ec                   	in     (%dx),%al
  80042009f9:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042009fc:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004200a03:	00 00 00 
  8004200a06:	0f b6 00             	movzbl (%rax),%eax
  8004200a09:	84 c0                	test   %al,%al
  8004200a0b:	74 23                	je     8004200a30 <serial_init+0x106>
  8004200a0d:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004200a14:	00 00 00 
  8004200a17:	0f b7 00             	movzwl (%rax),%eax
  8004200a1a:	0f b7 c0             	movzwl %ax,%eax
  8004200a1d:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200a22:	89 c7                	mov    %eax,%edi
  8004200a24:	48 b8 15 94 20 04 80 	movabs $0x8004209415,%rax
  8004200a2b:	00 00 00 
  8004200a2e:	ff d0                	callq  *%rax
  8004200a30:	c9                   	leaveq 
  8004200a31:	c3                   	retq   

0000008004200a32 <lpt_putc>:
  8004200a32:	55                   	push   %rbp
  8004200a33:	48 89 e5             	mov    %rsp,%rbp
  8004200a36:	48 83 ec 38          	sub    $0x38,%rsp
  8004200a3a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200a3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200a44:	eb 10                	jmp    8004200a56 <lpt_putc+0x24>
  8004200a46:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  8004200a4d:	00 00 00 
  8004200a50:	ff d0                	callq  *%rax
  8004200a52:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200a56:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200a5d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200a60:	89 c2                	mov    %eax,%edx
  8004200a62:	ec                   	in     (%dx),%al
  8004200a63:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200a66:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200a6a:	84 c0                	test   %al,%al
  8004200a6c:	78 09                	js     8004200a77 <lpt_putc+0x45>
  8004200a6e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200a75:	7e cf                	jle    8004200a46 <lpt_putc+0x14>
  8004200a77:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200a7a:	0f b6 c0             	movzbl %al,%eax
  8004200a7d:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200a84:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a87:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200a8b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200a8e:	ee                   	out    %al,(%dx)
  8004200a8f:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200a96:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  8004200a9a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200a9e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200aa1:	ee                   	out    %al,(%dx)
  8004200aa2:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  8004200aa9:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200aad:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200ab1:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200ab4:	ee                   	out    %al,(%dx)
  8004200ab5:	c9                   	leaveq 
  8004200ab6:	c3                   	retq   

0000008004200ab7 <cga_init>:
  8004200ab7:	55                   	push   %rbp
  8004200ab8:	48 89 e5             	mov    %rsp,%rbp
  8004200abb:	48 83 ec 30          	sub    $0x30,%rsp
  8004200abf:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  8004200ac6:	00 00 00 
  8004200ac9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ad1:	0f b7 00             	movzwl (%rax),%eax
  8004200ad4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004200ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200adc:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  8004200ae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ae5:	0f b7 00             	movzwl (%rax),%eax
  8004200ae8:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200aec:	74 20                	je     8004200b0e <cga_init+0x57>
  8004200aee:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200af5:	00 00 00 
  8004200af8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200afc:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b03:	00 00 00 
  8004200b06:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200b0c:	eb 1b                	jmp    8004200b29 <cga_init+0x72>
  8004200b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200b12:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200b16:	66 89 10             	mov    %dx,(%rax)
  8004200b19:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b20:	00 00 00 
  8004200b23:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200b29:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b30:	00 00 00 
  8004200b33:	8b 00                	mov    (%rax),%eax
  8004200b35:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200b38:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200b3c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200b40:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200b43:	ee                   	out    %al,(%dx)
  8004200b44:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b4b:	00 00 00 
  8004200b4e:	8b 00                	mov    (%rax),%eax
  8004200b50:	83 c0 01             	add    $0x1,%eax
  8004200b53:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b56:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200b59:	89 c2                	mov    %eax,%edx
  8004200b5b:	ec                   	in     (%dx),%al
  8004200b5c:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200b5f:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200b63:	0f b6 c0             	movzbl %al,%eax
  8004200b66:	c1 e0 08             	shl    $0x8,%eax
  8004200b69:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200b6c:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b73:	00 00 00 
  8004200b76:	8b 00                	mov    (%rax),%eax
  8004200b78:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200b7b:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200b7f:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200b83:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200b86:	ee                   	out    %al,(%dx)
  8004200b87:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200b8e:	00 00 00 
  8004200b91:	8b 00                	mov    (%rax),%eax
  8004200b93:	83 c0 01             	add    $0x1,%eax
  8004200b96:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b99:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200b9c:	89 c2                	mov    %eax,%edx
  8004200b9e:	ec                   	in     (%dx),%al
  8004200b9f:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200ba2:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200ba6:	0f b6 c0             	movzbl %al,%eax
  8004200ba9:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200bac:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200bb3:	00 00 00 
  8004200bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200bba:	48 89 10             	mov    %rdx,(%rax)
  8004200bbd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200bc0:	89 c2                	mov    %eax,%edx
  8004200bc2:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200bc9:	00 00 00 
  8004200bcc:	66 89 10             	mov    %dx,(%rax)
  8004200bcf:	c9                   	leaveq 
  8004200bd0:	c3                   	retq   

0000008004200bd1 <cga_putc>:
  8004200bd1:	55                   	push   %rbp
  8004200bd2:	48 89 e5             	mov    %rsp,%rbp
  8004200bd5:	48 83 ec 40          	sub    $0x40,%rsp
  8004200bd9:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200bdc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bdf:	b0 00                	mov    $0x0,%al
  8004200be1:	85 c0                	test   %eax,%eax
  8004200be3:	75 07                	jne    8004200bec <cga_putc+0x1b>
  8004200be5:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200bec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bef:	0f b6 c0             	movzbl %al,%eax
  8004200bf2:	83 f8 09             	cmp    $0x9,%eax
  8004200bf5:	0f 84 f6 00 00 00    	je     8004200cf1 <cga_putc+0x120>
  8004200bfb:	83 f8 09             	cmp    $0x9,%eax
  8004200bfe:	7f 0a                	jg     8004200c0a <cga_putc+0x39>
  8004200c00:	83 f8 08             	cmp    $0x8,%eax
  8004200c03:	74 18                	je     8004200c1d <cga_putc+0x4c>
  8004200c05:	e9 3e 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c0a:	83 f8 0a             	cmp    $0xa,%eax
  8004200c0d:	74 75                	je     8004200c84 <cga_putc+0xb3>
  8004200c0f:	83 f8 0d             	cmp    $0xd,%eax
  8004200c12:	0f 84 89 00 00 00    	je     8004200ca1 <cga_putc+0xd0>
  8004200c18:	e9 2b 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c1d:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c24:	00 00 00 
  8004200c27:	0f b7 00             	movzwl (%rax),%eax
  8004200c2a:	66 85 c0             	test   %ax,%ax
  8004200c2d:	74 50                	je     8004200c7f <cga_putc+0xae>
  8004200c2f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c36:	00 00 00 
  8004200c39:	0f b7 00             	movzwl (%rax),%eax
  8004200c3c:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200c3f:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c46:	00 00 00 
  8004200c49:	66 89 10             	mov    %dx,(%rax)
  8004200c4c:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200c53:	00 00 00 
  8004200c56:	48 8b 10             	mov    (%rax),%rdx
  8004200c59:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c60:	00 00 00 
  8004200c63:	0f b7 00             	movzwl (%rax),%eax
  8004200c66:	0f b7 c0             	movzwl %ax,%eax
  8004200c69:	48 01 c0             	add    %rax,%rax
  8004200c6c:	48 01 c2             	add    %rax,%rdx
  8004200c6f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c72:	b0 00                	mov    $0x0,%al
  8004200c74:	83 c8 20             	or     $0x20,%eax
  8004200c77:	66 89 02             	mov    %ax,(%rdx)
  8004200c7a:	e9 04 01 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c7f:	e9 ff 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c84:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c8b:	00 00 00 
  8004200c8e:	0f b7 00             	movzwl (%rax),%eax
  8004200c91:	8d 50 50             	lea    0x50(%rax),%edx
  8004200c94:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200c9b:	00 00 00 
  8004200c9e:	66 89 10             	mov    %dx,(%rax)
  8004200ca1:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ca8:	00 00 00 
  8004200cab:	0f b7 30             	movzwl (%rax),%esi
  8004200cae:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200cb5:	00 00 00 
  8004200cb8:	0f b7 08             	movzwl (%rax),%ecx
  8004200cbb:	0f b7 c1             	movzwl %cx,%eax
  8004200cbe:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200cc4:	c1 e8 10             	shr    $0x10,%eax
  8004200cc7:	89 c2                	mov    %eax,%edx
  8004200cc9:	66 c1 ea 06          	shr    $0x6,%dx
  8004200ccd:	89 d0                	mov    %edx,%eax
  8004200ccf:	c1 e0 02             	shl    $0x2,%eax
  8004200cd2:	01 d0                	add    %edx,%eax
  8004200cd4:	c1 e0 04             	shl    $0x4,%eax
  8004200cd7:	29 c1                	sub    %eax,%ecx
  8004200cd9:	89 ca                	mov    %ecx,%edx
  8004200cdb:	29 d6                	sub    %edx,%esi
  8004200cdd:	89 f2                	mov    %esi,%edx
  8004200cdf:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200ce6:	00 00 00 
  8004200ce9:	66 89 10             	mov    %dx,(%rax)
  8004200cec:	e9 92 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200cf1:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200cf6:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200cfd:	00 00 00 
  8004200d00:	ff d0                	callq  *%rax
  8004200d02:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d07:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d0e:	00 00 00 
  8004200d11:	ff d0                	callq  *%rax
  8004200d13:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d18:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d1f:	00 00 00 
  8004200d22:	ff d0                	callq  *%rax
  8004200d24:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d29:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d30:	00 00 00 
  8004200d33:	ff d0                	callq  *%rax
  8004200d35:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d3a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d41:	00 00 00 
  8004200d44:	ff d0                	callq  *%rax
  8004200d46:	eb 3b                	jmp    8004200d83 <cga_putc+0x1b2>
  8004200d48:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200d4f:	00 00 00 
  8004200d52:	48 8b 30             	mov    (%rax),%rsi
  8004200d55:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d5c:	00 00 00 
  8004200d5f:	0f b7 00             	movzwl (%rax),%eax
  8004200d62:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d65:	48 ba 10 c0 49 04 80 	movabs $0x800449c010,%rdx
  8004200d6c:	00 00 00 
  8004200d6f:	66 89 0a             	mov    %cx,(%rdx)
  8004200d72:	0f b7 c0             	movzwl %ax,%eax
  8004200d75:	48 01 c0             	add    %rax,%rax
  8004200d78:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200d7c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200d7f:	66 89 02             	mov    %ax,(%rdx)
  8004200d82:	90                   	nop
  8004200d83:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200d8a:	00 00 00 
  8004200d8d:	0f b7 00             	movzwl (%rax),%eax
  8004200d90:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200d94:	0f 86 89 00 00 00    	jbe    8004200e23 <cga_putc+0x252>
  8004200d9a:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200da1:	00 00 00 
  8004200da4:	48 8b 00             	mov    (%rax),%rax
  8004200da7:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200dae:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200db5:	00 00 00 
  8004200db8:	48 8b 00             	mov    (%rax),%rax
  8004200dbb:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200dc0:	48 89 ce             	mov    %rcx,%rsi
  8004200dc3:	48 89 c7             	mov    %rax,%rdi
  8004200dc6:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  8004200dcd:	00 00 00 
  8004200dd0:	ff d0                	callq  *%rax
  8004200dd2:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200dd9:	eb 22                	jmp    8004200dfd <cga_putc+0x22c>
  8004200ddb:	48 b8 08 c0 49 04 80 	movabs $0x800449c008,%rax
  8004200de2:	00 00 00 
  8004200de5:	48 8b 00             	mov    (%rax),%rax
  8004200de8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200deb:	48 63 d2             	movslq %edx,%rdx
  8004200dee:	48 01 d2             	add    %rdx,%rdx
  8004200df1:	48 01 d0             	add    %rdx,%rax
  8004200df4:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200df9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200dfd:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200e04:	7e d5                	jle    8004200ddb <cga_putc+0x20a>
  8004200e06:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e0d:	00 00 00 
  8004200e10:	0f b7 00             	movzwl (%rax),%eax
  8004200e13:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200e16:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e1d:	00 00 00 
  8004200e20:	66 89 10             	mov    %dx,(%rax)
  8004200e23:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e2a:	00 00 00 
  8004200e2d:	8b 00                	mov    (%rax),%eax
  8004200e2f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200e32:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200e36:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200e3a:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200e3d:	ee                   	out    %al,(%dx)
  8004200e3e:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e45:	00 00 00 
  8004200e48:	0f b7 00             	movzwl (%rax),%eax
  8004200e4b:	66 c1 e8 08          	shr    $0x8,%ax
  8004200e4f:	0f b6 c0             	movzbl %al,%eax
  8004200e52:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200e59:	00 00 00 
  8004200e5c:	8b 12                	mov    (%rdx),%edx
  8004200e5e:	83 c2 01             	add    $0x1,%edx
  8004200e61:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200e64:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200e67:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200e6b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200e6e:	ee                   	out    %al,(%dx)
  8004200e6f:	48 b8 04 c0 49 04 80 	movabs $0x800449c004,%rax
  8004200e76:	00 00 00 
  8004200e79:	8b 00                	mov    (%rax),%eax
  8004200e7b:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200e7e:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200e82:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200e86:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200e89:	ee                   	out    %al,(%dx)
  8004200e8a:	48 b8 10 c0 49 04 80 	movabs $0x800449c010,%rax
  8004200e91:	00 00 00 
  8004200e94:	0f b7 00             	movzwl (%rax),%eax
  8004200e97:	0f b6 c0             	movzbl %al,%eax
  8004200e9a:	48 ba 04 c0 49 04 80 	movabs $0x800449c004,%rdx
  8004200ea1:	00 00 00 
  8004200ea4:	8b 12                	mov    (%rdx),%edx
  8004200ea6:	83 c2 01             	add    $0x1,%edx
  8004200ea9:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200eac:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200eaf:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200eb3:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200eb6:	ee                   	out    %al,(%dx)
  8004200eb7:	c9                   	leaveq 
  8004200eb8:	c3                   	retq   

0000008004200eb9 <kbd_proc_data>:
  8004200eb9:	55                   	push   %rbp
  8004200eba:	48 89 e5             	mov    %rsp,%rbp
  8004200ebd:	48 83 ec 30          	sub    $0x30,%rsp
  8004200ec1:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ec8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ecb:	89 c2                	mov    %eax,%edx
  8004200ecd:	ec                   	in     (%dx),%al
  8004200ece:	88 45 ef             	mov    %al,-0x11(%rbp)
	return data;
  8004200ed1:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200ed5:	0f b6 c0             	movzbl %al,%eax
  8004200ed8:	83 e0 01             	and    $0x1,%eax
  8004200edb:	85 c0                	test   %eax,%eax
  8004200edd:	75 0a                	jne    8004200ee9 <kbd_proc_data+0x30>
  8004200edf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200ee4:	e9 28 02 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200ee9:	c7 45 e8 60 00 00 00 	movl   $0x60,-0x18(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ef0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200ef3:	89 c2                	mov    %eax,%edx
  8004200ef5:	ec                   	in     (%dx),%al
  8004200ef6:	88 45 e7             	mov    %al,-0x19(%rbp)
	return data;
  8004200ef9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200efd:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f00:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200f04:	75 27                	jne    8004200f2d <kbd_proc_data+0x74>
  8004200f06:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f0d:	00 00 00 
  8004200f10:	8b 00                	mov    (%rax),%eax
  8004200f12:	83 c8 40             	or     $0x40,%eax
  8004200f15:	89 c2                	mov    %eax,%edx
  8004200f17:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f1e:	00 00 00 
  8004200f21:	89 10                	mov    %edx,(%rax)
  8004200f23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f28:	e9 e4 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f31:	84 c0                	test   %al,%al
  8004200f33:	79 65                	jns    8004200f9a <kbd_proc_data+0xe1>
  8004200f35:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f3c:	00 00 00 
  8004200f3f:	8b 00                	mov    (%rax),%eax
  8004200f41:	83 e0 40             	and    $0x40,%eax
  8004200f44:	85 c0                	test   %eax,%eax
  8004200f46:	75 09                	jne    8004200f51 <kbd_proc_data+0x98>
  8004200f48:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f4c:	83 e0 7f             	and    $0x7f,%eax
  8004200f4f:	eb 04                	jmp    8004200f55 <kbd_proc_data+0x9c>
  8004200f51:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f55:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f58:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f5c:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200f63:	00 00 00 
  8004200f66:	48 98                	cltq   
  8004200f68:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f6c:	83 c8 40             	or     $0x40,%eax
  8004200f6f:	0f b6 c0             	movzbl %al,%eax
  8004200f72:	f7 d0                	not    %eax
  8004200f74:	89 c2                	mov    %eax,%edx
  8004200f76:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f7d:	00 00 00 
  8004200f80:	8b 00                	mov    (%rax),%eax
  8004200f82:	21 c2                	and    %eax,%edx
  8004200f84:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200f8b:	00 00 00 
  8004200f8e:	89 10                	mov    %edx,(%rax)
  8004200f90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f95:	e9 77 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f9a:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fa1:	00 00 00 
  8004200fa4:	8b 00                	mov    (%rax),%eax
  8004200fa6:	83 e0 40             	and    $0x40,%eax
  8004200fa9:	85 c0                	test   %eax,%eax
  8004200fab:	74 21                	je     8004200fce <kbd_proc_data+0x115>
  8004200fad:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200fb1:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fb8:	00 00 00 
  8004200fbb:	8b 00                	mov    (%rax),%eax
  8004200fbd:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200fc0:	89 c2                	mov    %eax,%edx
  8004200fc2:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fc9:	00 00 00 
  8004200fcc:	89 10                	mov    %edx,(%rax)
  8004200fce:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200fd2:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200fd9:	00 00 00 
  8004200fdc:	48 98                	cltq   
  8004200fde:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200fe2:	0f b6 d0             	movzbl %al,%edx
  8004200fe5:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200fec:	00 00 00 
  8004200fef:	8b 00                	mov    (%rax),%eax
  8004200ff1:	09 c2                	or     %eax,%edx
  8004200ff3:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004200ffa:	00 00 00 
  8004200ffd:	89 10                	mov    %edx,(%rax)
  8004200fff:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201003:	48 ba 60 c1 22 04 80 	movabs $0x800422c160,%rdx
  800420100a:	00 00 00 
  800420100d:	48 98                	cltq   
  800420100f:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201013:	0f b6 d0             	movzbl %al,%edx
  8004201016:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420101d:	00 00 00 
  8004201020:	8b 00                	mov    (%rax),%eax
  8004201022:	31 c2                	xor    %eax,%edx
  8004201024:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420102b:	00 00 00 
  800420102e:	89 10                	mov    %edx,(%rax)
  8004201030:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201037:	00 00 00 
  800420103a:	8b 00                	mov    (%rax),%eax
  800420103c:	83 e0 03             	and    $0x3,%eax
  800420103f:	89 c2                	mov    %eax,%edx
  8004201041:	48 b8 60 c5 22 04 80 	movabs $0x800422c560,%rax
  8004201048:	00 00 00 
  800420104b:	89 d2                	mov    %edx,%edx
  800420104d:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004201051:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201055:	48 01 d0             	add    %rdx,%rax
  8004201058:	0f b6 00             	movzbl (%rax),%eax
  800420105b:	0f b6 c0             	movzbl %al,%eax
  800420105e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201061:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  8004201068:	00 00 00 
  800420106b:	8b 00                	mov    (%rax),%eax
  800420106d:	83 e0 08             	and    $0x8,%eax
  8004201070:	85 c0                	test   %eax,%eax
  8004201072:	74 22                	je     8004201096 <kbd_proc_data+0x1dd>
  8004201074:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004201078:	7e 0c                	jle    8004201086 <kbd_proc_data+0x1cd>
  800420107a:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  800420107e:	7f 06                	jg     8004201086 <kbd_proc_data+0x1cd>
  8004201080:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004201084:	eb 10                	jmp    8004201096 <kbd_proc_data+0x1dd>
  8004201086:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  800420108a:	7e 0a                	jle    8004201096 <kbd_proc_data+0x1dd>
  800420108c:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004201090:	7f 04                	jg     8004201096 <kbd_proc_data+0x1dd>
  8004201092:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004201096:	48 b8 28 c2 49 04 80 	movabs $0x800449c228,%rax
  800420109d:	00 00 00 
  80042010a0:	8b 00                	mov    (%rax),%eax
  80042010a2:	f7 d0                	not    %eax
  80042010a4:	83 e0 06             	and    $0x6,%eax
  80042010a7:	85 c0                	test   %eax,%eax
  80042010a9:	75 37                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010ab:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  80042010b2:	75 2e                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010b4:	48 bf 3e 8a 21 04 80 	movabs $0x8004218a3e,%rdi
  80042010bb:	00 00 00 
  80042010be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010c3:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042010ca:	00 00 00 
  80042010cd:	ff d2                	callq  *%rdx
  80042010cf:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%rbp)
  80042010d6:	c6 45 df 03          	movb   $0x3,-0x21(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042010da:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042010de:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042010e1:	ee                   	out    %al,(%dx)
  80042010e2:	83 7d fc 1b          	cmpl   $0x1b,-0x4(%rbp)
  80042010e6:	75 26                	jne    800420110e <kbd_proc_data+0x255>
  80042010e8:	48 bf 4a 8a 21 04 80 	movabs $0x8004218a4a,%rdi
  80042010ef:	00 00 00 
  80042010f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010f7:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042010fe:	00 00 00 
  8004201101:	ff d2                	callq  *%rdx
  8004201103:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201108:	0f 01 c1             	vmcall 
  800420110b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420110e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201111:	c9                   	leaveq 
  8004201112:	c3                   	retq   

0000008004201113 <kbd_intr>:
  8004201113:	55                   	push   %rbp
  8004201114:	48 89 e5             	mov    %rsp,%rbp
  8004201117:	48 bf b9 0e 20 04 80 	movabs $0x8004200eb9,%rdi
  800420111e:	00 00 00 
  8004201121:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  8004201128:	00 00 00 
  800420112b:	ff d0                	callq  *%rax
  800420112d:	5d                   	pop    %rbp
  800420112e:	c3                   	retq   

000000800420112f <kbd_init>:
  800420112f:	55                   	push   %rbp
  8004201130:	48 89 e5             	mov    %rsp,%rbp
  8004201133:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420113a:	00 00 00 
  800420113d:	ff d0                	callq  *%rax
  800420113f:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004201146:	00 00 00 
  8004201149:	0f b7 00             	movzwl (%rax),%eax
  800420114c:	0f b7 c0             	movzwl %ax,%eax
  800420114f:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201154:	89 c7                	mov    %eax,%edi
  8004201156:	48 b8 15 94 20 04 80 	movabs $0x8004209415,%rax
  800420115d:	00 00 00 
  8004201160:	ff d0                	callq  *%rax
  8004201162:	5d                   	pop    %rbp
  8004201163:	c3                   	retq   

0000008004201164 <cons_intr>:
  8004201164:	55                   	push   %rbp
  8004201165:	48 89 e5             	mov    %rsp,%rbp
  8004201168:	48 83 ec 20          	sub    $0x20,%rsp
  800420116c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201170:	eb 6a                	jmp    80042011dc <cons_intr+0x78>
  8004201172:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201176:	75 02                	jne    800420117a <cons_intr+0x16>
  8004201178:	eb 62                	jmp    80042011dc <cons_intr+0x78>
  800420117a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201181:	00 00 00 
  8004201184:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420118a:	8d 48 01             	lea    0x1(%rax),%ecx
  800420118d:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  8004201194:	00 00 00 
  8004201197:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  800420119d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042011a0:	89 d1                	mov    %edx,%ecx
  80042011a2:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  80042011a9:	00 00 00 
  80042011ac:	89 c0                	mov    %eax,%eax
  80042011ae:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042011b1:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011b8:	00 00 00 
  80042011bb:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011c1:	3d 00 02 00 00       	cmp    $0x200,%eax
  80042011c6:	75 14                	jne    80042011dc <cons_intr+0x78>
  80042011c8:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  80042011cf:	00 00 00 
  80042011d2:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  80042011d9:	00 00 00 
  80042011dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042011e0:	ff d0                	callq  *%rax
  80042011e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042011e5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042011e9:	75 87                	jne    8004201172 <cons_intr+0xe>
  80042011eb:	c9                   	leaveq 
  80042011ec:	c3                   	retq   

00000080042011ed <cons_getc>:
  80042011ed:	55                   	push   %rbp
  80042011ee:	48 89 e5             	mov    %rsp,%rbp
  80042011f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042011f5:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  80042011fc:	00 00 00 
  80042011ff:	ff d0                	callq  *%rax
  8004201201:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004201208:	00 00 00 
  800420120b:	ff d0                	callq  *%rax
  800420120d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201214:	00 00 00 
  8004201217:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  800420121d:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201224:	00 00 00 
  8004201227:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420122d:	39 c2                	cmp    %eax,%edx
  800420122f:	74 69                	je     800420129a <cons_getc+0xad>
  8004201231:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201238:	00 00 00 
  800420123b:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201241:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201244:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420124b:	00 00 00 
  800420124e:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201254:	48 ba 20 c0 49 04 80 	movabs $0x800449c020,%rdx
  800420125b:	00 00 00 
  800420125e:	89 c0                	mov    %eax,%eax
  8004201260:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201264:	0f b6 c0             	movzbl %al,%eax
  8004201267:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420126a:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201271:	00 00 00 
  8004201274:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420127a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420127f:	75 14                	jne    8004201295 <cons_getc+0xa8>
  8004201281:	48 b8 20 c0 49 04 80 	movabs $0x800449c020,%rax
  8004201288:	00 00 00 
  800420128b:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201292:	00 00 00 
  8004201295:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201298:	eb 05                	jmp    800420129f <cons_getc+0xb2>
  800420129a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420129f:	c9                   	leaveq 
  80042012a0:	c3                   	retq   

00000080042012a1 <cons_putc>:
  80042012a1:	55                   	push   %rbp
  80042012a2:	48 89 e5             	mov    %rsp,%rbp
  80042012a5:	48 83 ec 10          	sub    $0x10,%rsp
  80042012a9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042012ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012af:	89 c7                	mov    %eax,%edi
  80042012b1:	48 b8 c5 08 20 04 80 	movabs $0x80042008c5,%rax
  80042012b8:	00 00 00 
  80042012bb:	ff d0                	callq  *%rax
  80042012bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012c0:	89 c7                	mov    %eax,%edi
  80042012c2:	48 b8 32 0a 20 04 80 	movabs $0x8004200a32,%rax
  80042012c9:	00 00 00 
  80042012cc:	ff d0                	callq  *%rax
  80042012ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d1:	89 c7                	mov    %eax,%edi
  80042012d3:	48 b8 d1 0b 20 04 80 	movabs $0x8004200bd1,%rax
  80042012da:	00 00 00 
  80042012dd:	ff d0                	callq  *%rax
  80042012df:	c9                   	leaveq 
  80042012e0:	c3                   	retq   

00000080042012e1 <cons_init>:
  80042012e1:	55                   	push   %rbp
  80042012e2:	48 89 e5             	mov    %rsp,%rbp
  80042012e5:	48 b8 b7 0a 20 04 80 	movabs $0x8004200ab7,%rax
  80042012ec:	00 00 00 
  80042012ef:	ff d0                	callq  *%rax
  80042012f1:	48 b8 2f 11 20 04 80 	movabs $0x800420112f,%rax
  80042012f8:	00 00 00 
  80042012fb:	ff d0                	callq  *%rax
  80042012fd:	48 b8 2a 09 20 04 80 	movabs $0x800420092a,%rax
  8004201304:	00 00 00 
  8004201307:	ff d0                	callq  *%rax
  8004201309:	48 b8 00 c0 49 04 80 	movabs $0x800449c000,%rax
  8004201310:	00 00 00 
  8004201313:	0f b6 00             	movzbl (%rax),%eax
  8004201316:	83 f0 01             	xor    $0x1,%eax
  8004201319:	84 c0                	test   %al,%al
  800420131b:	74 1b                	je     8004201338 <cons_init+0x57>
  800420131d:	48 bf 57 8a 21 04 80 	movabs $0x8004218a57,%rdi
  8004201324:	00 00 00 
  8004201327:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201333:	00 00 00 
  8004201336:	ff d2                	callq  *%rdx
  8004201338:	5d                   	pop    %rbp
  8004201339:	c3                   	retq   

000000800420133a <cputchar>:
  800420133a:	55                   	push   %rbp
  800420133b:	48 89 e5             	mov    %rsp,%rbp
  800420133e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201342:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201345:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201348:	89 c7                	mov    %eax,%edi
  800420134a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004201351:	00 00 00 
  8004201354:	ff d0                	callq  *%rax
  8004201356:	c9                   	leaveq 
  8004201357:	c3                   	retq   

0000008004201358 <getchar>:
  8004201358:	55                   	push   %rbp
  8004201359:	48 89 e5             	mov    %rsp,%rbp
  800420135c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201360:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  8004201367:	00 00 00 
  800420136a:	ff d0                	callq  *%rax
  800420136c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420136f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201373:	74 eb                	je     8004201360 <getchar+0x8>
  8004201375:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201378:	c9                   	leaveq 
  8004201379:	c3                   	retq   

000000800420137a <iscons>:
  800420137a:	55                   	push   %rbp
  800420137b:	48 89 e5             	mov    %rsp,%rbp
  800420137e:	48 83 ec 04          	sub    $0x4,%rsp
  8004201382:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201385:	b8 01 00 00 00       	mov    $0x1,%eax
  800420138a:	c9                   	leaveq 
  800420138b:	c3                   	retq   

000000800420138c <mon_help>:
  800420138c:	55                   	push   %rbp
  800420138d:	48 89 e5             	mov    %rsp,%rbp
  8004201390:	48 83 ec 30          	sub    $0x30,%rsp
  8004201394:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201397:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420139b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420139f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042013a6:	eb 6c                	jmp    8004201414 <mon_help+0x88>
  80042013a8:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  80042013af:	00 00 00 
  80042013b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013b5:	48 63 d0             	movslq %eax,%rdx
  80042013b8:	48 89 d0             	mov    %rdx,%rax
  80042013bb:	48 01 c0             	add    %rax,%rax
  80042013be:	48 01 d0             	add    %rdx,%rax
  80042013c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042013c5:	48 01 c8             	add    %rcx,%rax
  80042013c8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042013cc:	48 be 80 c5 22 04 80 	movabs $0x800422c580,%rsi
  80042013d3:	00 00 00 
  80042013d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013d9:	48 63 d0             	movslq %eax,%rdx
  80042013dc:	48 89 d0             	mov    %rdx,%rax
  80042013df:	48 01 c0             	add    %rax,%rax
  80042013e2:	48 01 d0             	add    %rdx,%rax
  80042013e5:	48 c1 e0 03          	shl    $0x3,%rax
  80042013e9:	48 01 f0             	add    %rsi,%rax
  80042013ec:	48 8b 00             	mov    (%rax),%rax
  80042013ef:	48 89 ca             	mov    %rcx,%rdx
  80042013f2:	48 89 c6             	mov    %rax,%rsi
  80042013f5:	48 bf 05 8b 21 04 80 	movabs $0x8004218b05,%rdi
  80042013fc:	00 00 00 
  80042013ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201404:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420140b:	00 00 00 
  800420140e:	ff d1                	callq  *%rcx
  8004201410:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201414:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201417:	83 f8 03             	cmp    $0x3,%eax
  800420141a:	76 8c                	jbe    80042013a8 <mon_help+0x1c>
  800420141c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201421:	c9                   	leaveq 
  8004201422:	c3                   	retq   

0000008004201423 <mon_kerninfo>:
  8004201423:	55                   	push   %rbp
  8004201424:	48 89 e5             	mov    %rsp,%rbp
  8004201427:	48 83 ec 30          	sub    $0x30,%rsp
  800420142b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420142e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201432:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201436:	48 bf 0e 8b 21 04 80 	movabs $0x8004218b0e,%rdi
  800420143d:	00 00 00 
  8004201440:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201445:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420144c:	00 00 00 
  800420144f:	ff d2                	callq  *%rdx
  8004201451:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201458:	00 00 00 
  800420145b:	48 bf 28 8b 21 04 80 	movabs $0x8004218b28,%rdi
  8004201462:	00 00 00 
  8004201465:	b8 00 00 00 00       	mov    $0x0,%eax
  800420146a:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201471:	00 00 00 
  8004201474:	ff d2                	callq  *%rdx
  8004201476:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  800420147d:	00 00 00 
  8004201480:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201487:	00 00 00 
  800420148a:	48 bf 50 8b 21 04 80 	movabs $0x8004218b50,%rdi
  8004201491:	00 00 00 
  8004201494:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201499:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  80042014a0:	00 00 00 
  80042014a3:	ff d1                	callq  *%rcx
  80042014a5:	48 ba eb 88 21 00 00 	movabs $0x2188eb,%rdx
  80042014ac:	00 00 00 
  80042014af:	48 be eb 88 21 04 80 	movabs $0x80042188eb,%rsi
  80042014b6:	00 00 00 
  80042014b9:	48 bf 78 8b 21 04 80 	movabs $0x8004218b78,%rdi
  80042014c0:	00 00 00 
  80042014c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014c8:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  80042014cf:	00 00 00 
  80042014d2:	ff d1                	callq  *%rcx
  80042014d4:	48 ba a0 be 49 00 00 	movabs $0x49bea0,%rdx
  80042014db:	00 00 00 
  80042014de:	48 be a0 be 49 04 80 	movabs $0x800449bea0,%rsi
  80042014e5:	00 00 00 
  80042014e8:	48 bf a0 8b 21 04 80 	movabs $0x8004218ba0,%rdi
  80042014ef:	00 00 00 
  80042014f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f7:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  80042014fe:	00 00 00 
  8004201501:	ff d1                	callq  *%rcx
  8004201503:	48 ba 10 e0 6d 00 00 	movabs $0x6de010,%rdx
  800420150a:	00 00 00 
  800420150d:	48 be 10 e0 6d 04 80 	movabs $0x80046de010,%rsi
  8004201514:	00 00 00 
  8004201517:	48 bf c8 8b 21 04 80 	movabs $0x8004218bc8,%rdi
  800420151e:	00 00 00 
  8004201521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201526:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420152d:	00 00 00 
  8004201530:	ff d1                	callq  *%rcx
  8004201532:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004201539:	00 
  800420153a:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201541:	00 00 00 
  8004201544:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201548:	48 29 c2             	sub    %rax,%rdx
  800420154b:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  8004201552:	00 00 00 
  8004201555:	48 83 e8 01          	sub    $0x1,%rax
  8004201559:	48 01 d0             	add    %rdx,%rax
  800420155c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201564:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201569:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420156d:	48 89 d0             	mov    %rdx,%rax
  8004201570:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201574:	48 29 c2             	sub    %rax,%rdx
  8004201577:	48 89 d0             	mov    %rdx,%rax
  800420157a:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201581:	48 85 c0             	test   %rax,%rax
  8004201584:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201588:	48 c1 f8 0a          	sar    $0xa,%rax
  800420158c:	48 89 c6             	mov    %rax,%rsi
  800420158f:	48 bf f0 8b 21 04 80 	movabs $0x8004218bf0,%rdi
  8004201596:	00 00 00 
  8004201599:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159e:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042015a5:	00 00 00 
  80042015a8:	ff d2                	callq  *%rdx
  80042015aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015af:	c9                   	leaveq 
  80042015b0:	c3                   	retq   

00000080042015b1 <mon_backtrace>:
  80042015b1:	55                   	push   %rbp
  80042015b2:	48 89 e5             	mov    %rsp,%rbp
  80042015b5:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  80042015bc:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  80042015c2:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  80042015c9:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042015d0:	48 89 e8             	mov    %rbp,%rax
  80042015d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  80042015d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042015db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042015df:	48 89 e0             	mov    %rsp,%rax
  80042015e2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042015e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042015ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042015ee:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042015f5:	00 
  80042015f6:	74 21                	je     8004201619 <mon_backtrace+0x68>
  80042015f8:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042015ff:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004201603:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201607:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  800420160e:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004201615:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201619:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8004201620 <mon_backtrace+0x6f>
  8004201620:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201624:	48 bf 1a 8c 21 04 80 	movabs $0x8004218c1a,%rdi
  800420162b:	00 00 00 
  800420162e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201633:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420163a:	00 00 00 
  800420163d:	ff d2                	callq  *%rdx
  800420163f:	e9 17 03 00 00       	jmpq   800420195b <mon_backtrace+0x3aa>
  8004201644:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201648:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420164c:	48 89 c6             	mov    %rax,%rsi
  800420164f:	48 bf 2c 8c 21 04 80 	movabs $0x8004218c2c,%rdi
  8004201656:	00 00 00 
  8004201659:	b8 00 00 00 00       	mov    $0x0,%eax
  800420165e:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  8004201665:	00 00 00 
  8004201668:	ff d1                	callq  *%rcx
  800420166a:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201675:	48 89 d6             	mov    %rdx,%rsi
  8004201678:	48 89 c7             	mov    %rax,%rdi
  800420167b:	48 b8 8c ec 20 04 80 	movabs $0x800420ec8c,%rax
  8004201682:	00 00 00 
  8004201685:	ff d0                	callq  *%rax
  8004201687:	85 c0                	test   %eax,%eax
  8004201689:	0f 88 9a 02 00 00    	js     8004201929 <mon_backtrace+0x378>
  800420168f:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  8004201696:	48 05 a8 00 00 00    	add    $0xa8,%rax
  800420169c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042016a0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  80042016a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042016ab:	48 89 d7             	mov    %rdx,%rdi
  80042016ae:	48 29 c7             	sub    %rax,%rdi
  80042016b1:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  80042016b8:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  80042016be:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  80042016c4:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  80042016cb:	49 89 f9             	mov    %rdi,%r9
  80042016ce:	49 89 f0             	mov    %rsi,%r8
  80042016d1:	48 89 c6             	mov    %rax,%rsi
  80042016d4:	48 bf 48 8c 21 04 80 	movabs $0x8004218c48,%rdi
  80042016db:	00 00 00 
  80042016de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042016e3:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  80042016ea:	00 00 00 
  80042016ed:	41 ff d2             	callq  *%r10
  80042016f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042016f4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042016f8:	66 83 f8 06          	cmp    $0x6,%ax
  80042016fc:	75 15                	jne    8004201713 <mon_backtrace+0x162>
  80042016fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201702:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420170a:	48 01 d0             	add    %rdx,%rax
  800420170d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201711:	eb 28                	jmp    800420173b <mon_backtrace+0x18a>
  8004201713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201717:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420171b:	66 83 f8 07          	cmp    $0x7,%ax
  800420171f:	75 15                	jne    8004201736 <mon_backtrace+0x185>
  8004201721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201725:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420172d:	48 01 d0             	add    %rdx,%rax
  8004201730:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201734:	eb 05                	jmp    800420173b <mon_backtrace+0x18a>
  8004201736:	e9 ee 01 00 00       	jmpq   8004201929 <mon_backtrace+0x378>
  800420173b:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201741:	89 c6                	mov    %eax,%esi
  8004201743:	48 bf 63 8c 21 04 80 	movabs $0x8004218c63,%rdi
  800420174a:	00 00 00 
  800420174d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201752:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201759:	00 00 00 
  800420175c:	ff d2                	callq  *%rdx
  800420175e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201765:	e9 f2 00 00 00       	jmpq   800420185c <mon_backtrace+0x2ab>
  800420176a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420176d:	48 98                	cltq   
  800420176f:	48 83 c0 0a          	add    $0xa,%rax
  8004201773:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420177a:	ff 
  800420177b:	48 85 c0             	test   %rax,%rax
  800420177e:	75 35                	jne    80042017b5 <mon_backtrace+0x204>
  8004201780:	48 b9 6e 8c 21 04 80 	movabs $0x8004218c6e,%rcx
  8004201787:	00 00 00 
  800420178a:	48 ba 84 8c 21 04 80 	movabs $0x8004218c84,%rdx
  8004201791:	00 00 00 
  8004201794:	be 78 00 00 00       	mov    $0x78,%esi
  8004201799:	48 bf 99 8c 21 04 80 	movabs $0x8004218c99,%rdi
  80042017a0:	00 00 00 
  80042017a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017a8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042017af:	00 00 00 
  80042017b2:	41 ff d0             	callq  *%r8
  80042017b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017b8:	48 98                	cltq   
  80042017ba:	48 83 c0 0a          	add    $0xa,%rax
  80042017be:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  80042017c5:	ff 
  80042017c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ca:	48 01 d0             	add    %rdx,%rax
  80042017cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042017d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017d4:	48 98                	cltq   
  80042017d6:	48 83 c0 08          	add    $0x8,%rax
  80042017da:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042017e1:	83 f8 02             	cmp    $0x2,%eax
  80042017e4:	74 31                	je     8004201817 <mon_backtrace+0x266>
  80042017e6:	83 f8 02             	cmp    $0x2,%eax
  80042017e9:	7f 07                	jg     80042017f2 <mon_backtrace+0x241>
  80042017eb:	83 f8 01             	cmp    $0x1,%eax
  80042017ee:	74 37                	je     8004201827 <mon_backtrace+0x276>
  80042017f0:	eb 44                	jmp    8004201836 <mon_backtrace+0x285>
  80042017f2:	83 f8 04             	cmp    $0x4,%eax
  80042017f5:	74 12                	je     8004201809 <mon_backtrace+0x258>
  80042017f7:	83 f8 08             	cmp    $0x8,%eax
  80042017fa:	75 3a                	jne    8004201836 <mon_backtrace+0x285>
  80042017fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201800:	48 8b 00             	mov    (%rax),%rax
  8004201803:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201807:	eb 2d                	jmp    8004201836 <mon_backtrace+0x285>
  8004201809:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420180d:	8b 00                	mov    (%rax),%eax
  800420180f:	89 c0                	mov    %eax,%eax
  8004201811:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201815:	eb 1f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201817:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420181b:	0f b7 00             	movzwl (%rax),%eax
  800420181e:	0f b7 c0             	movzwl %ax,%eax
  8004201821:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201825:	eb 0f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201827:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420182b:	0f b6 00             	movzbl (%rax),%eax
  800420182e:	0f b6 c0             	movzbl %al,%eax
  8004201831:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201835:	90                   	nop
  8004201836:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420183a:	48 89 c6             	mov    %rax,%rsi
  800420183d:	48 bf ab 8c 21 04 80 	movabs $0x8004218cab,%rdi
  8004201844:	00 00 00 
  8004201847:	b8 00 00 00 00       	mov    $0x0,%eax
  800420184c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201853:	00 00 00 
  8004201856:	ff d2                	callq  *%rdx
  8004201858:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420185c:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201862:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004201865:	0f 8f ff fe ff ff    	jg     800420176a <mon_backtrace+0x1b9>
  800420186b:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201872:	0f b7 c0             	movzwl %ax,%eax
  8004201875:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420187a:	74 48                	je     80042018c4 <mon_backtrace+0x313>
  800420187c:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201881:	75 17                	jne    800420189a <mon_backtrace+0x2e9>
  8004201883:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420188a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420188e:	48 01 d0             	add    %rdx,%rax
  8004201891:	48 8b 00             	mov    (%rax),%rax
  8004201894:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201898:	eb 2b                	jmp    80042018c5 <mon_backtrace+0x314>
  800420189a:	48 ba b2 8c 21 04 80 	movabs $0x8004218cb2,%rdx
  80042018a1:	00 00 00 
  80042018a4:	be 92 00 00 00       	mov    $0x92,%esi
  80042018a9:	48 bf 99 8c 21 04 80 	movabs $0x8004218c99,%rdi
  80042018b0:	00 00 00 
  80042018b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042018b8:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042018bf:	00 00 00 
  80042018c2:	ff d1                	callq  *%rcx
  80042018c4:	90                   	nop
  80042018c5:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  80042018cc:	0f b7 c0             	movzwl %ax,%eax
  80042018cf:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  80042018d4:	74 48                	je     800420191e <mon_backtrace+0x36d>
  80042018d6:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018db:	75 17                	jne    80042018f4 <mon_backtrace+0x343>
  80042018dd:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042018e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042018e8:	48 01 d0             	add    %rdx,%rax
  80042018eb:	48 8b 00             	mov    (%rax),%rax
  80042018ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042018f2:	eb 2b                	jmp    800420191f <mon_backtrace+0x36e>
  80042018f4:	48 ba b2 8c 21 04 80 	movabs $0x8004218cb2,%rdx
  80042018fb:	00 00 00 
  80042018fe:	be 9d 00 00 00       	mov    $0x9d,%esi
  8004201903:	48 bf 99 8c 21 04 80 	movabs $0x8004218c99,%rdi
  800420190a:	00 00 00 
  800420190d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201912:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201919:	00 00 00 
  800420191c:	ff d1                	callq  *%rcx
  800420191e:	90                   	nop
  800420191f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201923:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201927:	eb 17                	jmp    8004201940 <mon_backtrace+0x38f>
  8004201929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420192d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004201931:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201935:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201939:	48 8b 00             	mov    (%rax),%rax
  800420193c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201940:	48 bf c3 8c 21 04 80 	movabs $0x8004218cc3,%rdi
  8004201947:	00 00 00 
  800420194a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420194f:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201956:	00 00 00 
  8004201959:	ff d2                	callq  *%rdx
  800420195b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201960:	0f 85 de fc ff ff    	jne    8004201644 <mon_backtrace+0x93>
  8004201966:	b8 00 00 00 00       	mov    $0x0,%eax
  800420196b:	c9                   	leaveq 
  800420196c:	c3                   	retq   

000000800420196d <mon_exit>:
  800420196d:	55                   	push   %rbp
  800420196e:	48 89 e5             	mov    %rsp,%rbp
  8004201971:	48 83 ec 18          	sub    $0x18,%rsp
  8004201975:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420197c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201980:	f4                   	hlt    
  8004201981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004201986:	c9                   	leaveq 
  8004201987:	c3                   	retq   

0000008004201988 <runcmd>:
  8004201988:	55                   	push   %rbp
  8004201989:	48 89 e5             	mov    %rsp,%rbp
  800420198c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201993:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420199a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042019a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042019a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042019ab:	48 98                	cltq   
  80042019ad:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042019b4:	ff 00 00 00 00 
  80042019b9:	eb 15                	jmp    80042019d0 <runcmd+0x48>
  80042019bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019c2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042019c6:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042019cd:	c6 00 00             	movb   $0x0,(%rax)
  80042019d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019d7:	0f b6 00             	movzbl (%rax),%eax
  80042019da:	84 c0                	test   %al,%al
  80042019dc:	74 2a                	je     8004201a08 <runcmd+0x80>
  80042019de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019e5:	0f b6 00             	movzbl (%rax),%eax
  80042019e8:	0f be c0             	movsbl %al,%eax
  80042019eb:	89 c6                	mov    %eax,%esi
  80042019ed:	48 bf c5 8c 21 04 80 	movabs $0x8004218cc5,%rdi
  80042019f4:	00 00 00 
  80042019f7:	48 b8 ad ff 20 04 80 	movabs $0x800420ffad,%rax
  80042019fe:	00 00 00 
  8004201a01:	ff d0                	callq  *%rax
  8004201a03:	48 85 c0             	test   %rax,%rax
  8004201a06:	75 b3                	jne    80042019bb <runcmd+0x33>
  8004201a08:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a0f:	0f b6 00             	movzbl (%rax),%eax
  8004201a12:	84 c0                	test   %al,%al
  8004201a14:	75 21                	jne    8004201a37 <runcmd+0xaf>
  8004201a16:	90                   	nop
  8004201a17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a1a:	48 98                	cltq   
  8004201a1c:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201a23:	ff 00 00 00 00 
  8004201a28:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201a2c:	0f 85 a1 00 00 00    	jne    8004201ad3 <runcmd+0x14b>
  8004201a32:	e9 92 00 00 00       	jmpq   8004201ac9 <runcmd+0x141>
  8004201a37:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004201a3b:	75 2a                	jne    8004201a67 <runcmd+0xdf>
  8004201a3d:	be 10 00 00 00       	mov    $0x10,%esi
  8004201a42:	48 bf ca 8c 21 04 80 	movabs $0x8004218cca,%rdi
  8004201a49:	00 00 00 
  8004201a4c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a51:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201a58:	00 00 00 
  8004201a5b:	ff d2                	callq  *%rdx
  8004201a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a62:	e9 30 01 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201a67:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a6a:	8d 50 01             	lea    0x1(%rax),%edx
  8004201a6d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201a70:	48 98                	cltq   
  8004201a72:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201a79:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201a80:	ff 
  8004201a81:	eb 08                	jmp    8004201a8b <runcmd+0x103>
  8004201a83:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201a8a:	01 
  8004201a8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a92:	0f b6 00             	movzbl (%rax),%eax
  8004201a95:	84 c0                	test   %al,%al
  8004201a97:	74 2a                	je     8004201ac3 <runcmd+0x13b>
  8004201a99:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201aa0:	0f b6 00             	movzbl (%rax),%eax
  8004201aa3:	0f be c0             	movsbl %al,%eax
  8004201aa6:	89 c6                	mov    %eax,%esi
  8004201aa8:	48 bf c5 8c 21 04 80 	movabs $0x8004218cc5,%rdi
  8004201aaf:	00 00 00 
  8004201ab2:	48 b8 ad ff 20 04 80 	movabs $0x800420ffad,%rax
  8004201ab9:	00 00 00 
  8004201abc:	ff d0                	callq  *%rax
  8004201abe:	48 85 c0             	test   %rax,%rax
  8004201ac1:	74 c0                	je     8004201a83 <runcmd+0xfb>
  8004201ac3:	90                   	nop
  8004201ac4:	e9 07 ff ff ff       	jmpq   80042019d0 <runcmd+0x48>
  8004201ac9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ace:	e9 c4 00 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201ad3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201ada:	e9 82 00 00 00       	jmpq   8004201b61 <runcmd+0x1d9>
  8004201adf:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201ae6:	00 00 00 
  8004201ae9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201aec:	48 63 d0             	movslq %eax,%rdx
  8004201aef:	48 89 d0             	mov    %rdx,%rax
  8004201af2:	48 01 c0             	add    %rax,%rax
  8004201af5:	48 01 d0             	add    %rdx,%rax
  8004201af8:	48 c1 e0 03          	shl    $0x3,%rax
  8004201afc:	48 01 c8             	add    %rcx,%rax
  8004201aff:	48 8b 10             	mov    (%rax),%rdx
  8004201b02:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b09:	48 89 d6             	mov    %rdx,%rsi
  8004201b0c:	48 89 c7             	mov    %rax,%rdi
  8004201b0f:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004201b16:	00 00 00 
  8004201b19:	ff d0                	callq  *%rax
  8004201b1b:	85 c0                	test   %eax,%eax
  8004201b1d:	75 3e                	jne    8004201b5d <runcmd+0x1d5>
  8004201b1f:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b26:	00 00 00 
  8004201b29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b2c:	48 63 d0             	movslq %eax,%rdx
  8004201b2f:	48 89 d0             	mov    %rdx,%rax
  8004201b32:	48 01 c0             	add    %rax,%rax
  8004201b35:	48 01 d0             	add    %rdx,%rax
  8004201b38:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b3c:	48 01 c8             	add    %rcx,%rax
  8004201b3f:	48 83 c0 10          	add    $0x10,%rax
  8004201b43:	48 8b 00             	mov    (%rax),%rax
  8004201b46:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201b4d:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201b54:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201b57:	89 cf                	mov    %ecx,%edi
  8004201b59:	ff d0                	callq  *%rax
  8004201b5b:	eb 3a                	jmp    8004201b97 <runcmd+0x20f>
  8004201b5d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201b61:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b64:	83 f8 03             	cmp    $0x3,%eax
  8004201b67:	0f 86 72 ff ff ff    	jbe    8004201adf <runcmd+0x157>
  8004201b6d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b74:	48 89 c6             	mov    %rax,%rsi
  8004201b77:	48 bf e7 8c 21 04 80 	movabs $0x8004218ce7,%rdi
  8004201b7e:	00 00 00 
  8004201b81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b86:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201b8d:	00 00 00 
  8004201b90:	ff d2                	callq  *%rdx
  8004201b92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b97:	c9                   	leaveq 
  8004201b98:	c3                   	retq   

0000008004201b99 <monitor>:
  8004201b99:	55                   	push   %rbp
  8004201b9a:	48 89 e5             	mov    %rsp,%rbp
  8004201b9d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201ba1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201ba5:	48 bf 00 8d 21 04 80 	movabs $0x8004218d00,%rdi
  8004201bac:	00 00 00 
  8004201baf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bb4:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201bbb:	00 00 00 
  8004201bbe:	ff d2                	callq  *%rdx
  8004201bc0:	48 bf 28 8d 21 04 80 	movabs $0x8004218d28,%rdi
  8004201bc7:	00 00 00 
  8004201bca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bcf:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201bd6:	00 00 00 
  8004201bd9:	ff d2                	callq  *%rdx
  8004201bdb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201be0:	74 13                	je     8004201bf5 <monitor+0x5c>
  8004201be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201be6:	48 89 c7             	mov    %rax,%rdi
  8004201be9:	48 b8 ba c2 20 04 80 	movabs $0x800420c2ba,%rax
  8004201bf0:	00 00 00 
  8004201bf3:	ff d0                	callq  *%rax
  8004201bf5:	48 bf 4d 8d 21 04 80 	movabs $0x8004218d4d,%rdi
  8004201bfc:	00 00 00 
  8004201bff:	48 b8 c6 fb 20 04 80 	movabs $0x800420fbc6,%rax
  8004201c06:	00 00 00 
  8004201c09:	ff d0                	callq  *%rax
  8004201c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201c14:	74 20                	je     8004201c36 <monitor+0x9d>
  8004201c16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c1e:	48 89 d6             	mov    %rdx,%rsi
  8004201c21:	48 89 c7             	mov    %rax,%rdi
  8004201c24:	48 b8 88 19 20 04 80 	movabs $0x8004201988,%rax
  8004201c2b:	00 00 00 
  8004201c2e:	ff d0                	callq  *%rax
  8004201c30:	85 c0                	test   %eax,%eax
  8004201c32:	79 02                	jns    8004201c36 <monitor+0x9d>
  8004201c34:	eb 02                	jmp    8004201c38 <monitor+0x9f>
  8004201c36:	eb bd                	jmp    8004201bf5 <monitor+0x5c>
  8004201c38:	c9                   	leaveq 
  8004201c39:	c3                   	retq   

0000008004201c3a <page2ppn>:
  8004201c3a:	55                   	push   %rbp
  8004201c3b:	48 89 e5             	mov    %rsp,%rbp
  8004201c3e:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201c4a:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201c51:	00 00 00 
  8004201c54:	48 8b 00             	mov    (%rax),%rax
  8004201c57:	48 29 c2             	sub    %rax,%rdx
  8004201c5a:	48 89 d0             	mov    %rdx,%rax
  8004201c5d:	48 c1 f8 04          	sar    $0x4,%rax
  8004201c61:	c9                   	leaveq 
  8004201c62:	c3                   	retq   

0000008004201c63 <page2pa>:
  8004201c63:	55                   	push   %rbp
  8004201c64:	48 89 e5             	mov    %rsp,%rbp
  8004201c67:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c73:	48 89 c7             	mov    %rax,%rdi
  8004201c76:	48 b8 3a 1c 20 04 80 	movabs $0x8004201c3a,%rax
  8004201c7d:	00 00 00 
  8004201c80:	ff d0                	callq  *%rax
  8004201c82:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201c86:	c9                   	leaveq 
  8004201c87:	c3                   	retq   

0000008004201c88 <pa2page>:
  8004201c88:	55                   	push   %rbp
  8004201c89:	48 89 e5             	mov    %rsp,%rbp
  8004201c8c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201c90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c98:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201c9c:	48 89 c2             	mov    %rax,%rdx
  8004201c9f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201ca6:	00 00 00 
  8004201ca9:	48 8b 00             	mov    (%rax),%rax
  8004201cac:	48 39 c2             	cmp    %rax,%rdx
  8004201caf:	72 2a                	jb     8004201cdb <pa2page+0x53>
  8004201cb1:	48 ba 58 8d 21 04 80 	movabs $0x8004218d58,%rdx
  8004201cb8:	00 00 00 
  8004201cbb:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201cc0:	48 bf 77 8d 21 04 80 	movabs $0x8004218d77,%rdi
  8004201cc7:	00 00 00 
  8004201cca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ccf:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201cd6:	00 00 00 
  8004201cd9:	ff d1                	callq  *%rcx
  8004201cdb:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004201ce2:	00 00 00 
  8004201ce5:	48 8b 00             	mov    (%rax),%rax
  8004201ce8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201cec:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201cf0:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201cf4:	48 01 d0             	add    %rdx,%rax
  8004201cf7:	c9                   	leaveq 
  8004201cf8:	c3                   	retq   

0000008004201cf9 <page2kva>:
  8004201cf9:	55                   	push   %rbp
  8004201cfa:	48 89 e5             	mov    %rsp,%rbp
  8004201cfd:	48 83 ec 20          	sub    $0x20,%rsp
  8004201d01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201d09:	48 89 c7             	mov    %rax,%rdi
  8004201d0c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004201d13:	00 00 00 
  8004201d16:	ff d0                	callq  *%rax
  8004201d18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d20:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201d24:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201d27:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201d2a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004201d31:	00 00 00 
  8004201d34:	48 8b 00             	mov    (%rax),%rax
  8004201d37:	48 39 c2             	cmp    %rax,%rdx
  8004201d3a:	72 32                	jb     8004201d6e <page2kva+0x75>
  8004201d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d40:	48 89 c1             	mov    %rax,%rcx
  8004201d43:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004201d4a:	00 00 00 
  8004201d4d:	be 62 00 00 00       	mov    $0x62,%esi
  8004201d52:	48 bf 77 8d 21 04 80 	movabs $0x8004218d77,%rdi
  8004201d59:	00 00 00 
  8004201d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d61:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004201d68:	00 00 00 
  8004201d6b:	41 ff d0             	callq  *%r8
  8004201d6e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201d75:	00 00 00 
  8004201d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d7c:	48 01 d0             	add    %rdx,%rax
  8004201d7f:	c9                   	leaveq 
  8004201d80:	c3                   	retq   

0000008004201d81 <restrictive_type>:
  8004201d81:	55                   	push   %rbp
  8004201d82:	48 89 e5             	mov    %rsp,%rbp
  8004201d85:	48 83 ec 08          	sub    $0x8,%rsp
  8004201d89:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201d8c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201d8f:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201d93:	74 06                	je     8004201d9b <restrictive_type+0x1a>
  8004201d95:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201d99:	75 07                	jne    8004201da2 <restrictive_type+0x21>
  8004201d9b:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201da0:	eb 3e                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201da2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201da6:	74 06                	je     8004201dae <restrictive_type+0x2d>
  8004201da8:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201dac:	75 07                	jne    8004201db5 <restrictive_type+0x34>
  8004201dae:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201db3:	eb 2b                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201db5:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201db9:	74 06                	je     8004201dc1 <restrictive_type+0x40>
  8004201dbb:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201dbf:	75 07                	jne    8004201dc8 <restrictive_type+0x47>
  8004201dc1:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201dc6:	eb 18                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201dc8:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201dcc:	74 06                	je     8004201dd4 <restrictive_type+0x53>
  8004201dce:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201dd2:	75 07                	jne    8004201ddb <restrictive_type+0x5a>
  8004201dd4:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201dd9:	eb 05                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201ddb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201de0:	c9                   	leaveq 
  8004201de1:	c3                   	retq   

0000008004201de2 <nvram_read>:
  8004201de2:	55                   	push   %rbp
  8004201de3:	48 89 e5             	mov    %rsp,%rbp
  8004201de6:	53                   	push   %rbx
  8004201de7:	48 83 ec 18          	sub    $0x18,%rsp
  8004201deb:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201dee:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201df1:	89 c7                	mov    %eax,%edi
  8004201df3:	48 b8 47 92 20 04 80 	movabs $0x8004209247,%rax
  8004201dfa:	00 00 00 
  8004201dfd:	ff d0                	callq  *%rax
  8004201dff:	89 c3                	mov    %eax,%ebx
  8004201e01:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e04:	83 c0 01             	add    $0x1,%eax
  8004201e07:	89 c7                	mov    %eax,%edi
  8004201e09:	48 b8 47 92 20 04 80 	movabs $0x8004209247,%rax
  8004201e10:	00 00 00 
  8004201e13:	ff d0                	callq  *%rax
  8004201e15:	c1 e0 08             	shl    $0x8,%eax
  8004201e18:	09 d8                	or     %ebx,%eax
  8004201e1a:	48 83 c4 18          	add    $0x18,%rsp
  8004201e1e:	5b                   	pop    %rbx
  8004201e1f:	5d                   	pop    %rbp
  8004201e20:	c3                   	retq   

0000008004201e21 <multiboot_read>:
  8004201e21:	55                   	push   %rbp
  8004201e22:	48 89 e5             	mov    %rsp,%rbp
  8004201e25:	41 54                	push   %r12
  8004201e27:	53                   	push   %rbx
  8004201e28:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201e2f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201e36:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201e3d:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201e44:	48 89 e0             	mov    %rsp,%rax
  8004201e47:	49 89 c4             	mov    %rax,%r12
  8004201e4a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e51:	8b 40 30             	mov    0x30(%rax),%eax
  8004201e54:	89 c0                	mov    %eax,%eax
  8004201e56:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201e5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e61:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201e64:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201e69:	f7 e2                	mul    %edx
  8004201e6b:	89 d0                	mov    %edx,%eax
  8004201e6d:	c1 e8 04             	shr    $0x4,%eax
  8004201e70:	89 c0                	mov    %eax,%eax
  8004201e72:	48 89 c2             	mov    %rax,%rdx
  8004201e75:	48 83 ea 01          	sub    $0x1,%rdx
  8004201e79:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201e7d:	49 89 c0             	mov    %rax,%r8
  8004201e80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201e86:	48 89 c1             	mov    %rax,%rcx
  8004201e89:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201e8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004201e92:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201e96:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201e9b:	48 83 e8 01          	sub    $0x1,%rax
  8004201e9f:	48 01 d0             	add    %rdx,%rax
  8004201ea2:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201ea7:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201eac:	48 f7 f3             	div    %rbx
  8004201eaf:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201eb3:	48 29 c4             	sub    %rax,%rsp
  8004201eb6:	48 89 e0             	mov    %rsp,%rax
  8004201eb9:	48 83 c0 07          	add    $0x7,%rax
  8004201ebd:	48 c1 e8 03          	shr    $0x3,%rax
  8004201ec1:	48 c1 e0 03          	shl    $0x3,%rax
  8004201ec5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201ec9:	48 bf ab 8d 21 04 80 	movabs $0x8004218dab,%rdi
  8004201ed0:	00 00 00 
  8004201ed3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ed8:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004201edf:	00 00 00 
  8004201ee2:	ff d2                	callq  *%rdx
  8004201ee4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201eeb:	e9 6c 01 00 00       	jmpq   800420205c <multiboot_read+0x23b>
  8004201ef0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ef3:	48 63 d0             	movslq %eax,%rdx
  8004201ef6:	48 89 d0             	mov    %rdx,%rax
  8004201ef9:	48 01 c0             	add    %rax,%rax
  8004201efc:	48 01 d0             	add    %rdx,%rax
  8004201eff:	48 c1 e0 03          	shl    $0x3,%rax
  8004201f03:	48 89 c2             	mov    %rax,%rdx
  8004201f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201f0a:	48 01 d0             	add    %rdx,%rax
  8004201f0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201f11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f15:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f18:	89 c0                	mov    %eax,%eax
  8004201f1a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f1e:	48 89 c2             	mov    %rax,%rdx
  8004201f21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f25:	8b 40 04             	mov    0x4(%rax),%eax
  8004201f28:	89 c0                	mov    %eax,%eax
  8004201f2a:	48 01 d0             	add    %rdx,%rax
  8004201f2d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201f31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f35:	8b 40 10             	mov    0x10(%rax),%eax
  8004201f38:	89 c0                	mov    %eax,%eax
  8004201f3a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f3e:	48 89 c2             	mov    %rax,%rdx
  8004201f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f45:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201f48:	89 c0                	mov    %eax,%eax
  8004201f4a:	48 01 d0             	add    %rdx,%rax
  8004201f4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201f51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f55:	8b 70 14             	mov    0x14(%rax),%esi
  8004201f58:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f5c:	8b 00                	mov    (%rax),%eax
  8004201f5e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201f62:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201f66:	41 89 f0             	mov    %esi,%r8d
  8004201f69:	89 c6                	mov    %eax,%esi
  8004201f6b:	48 bf c0 8d 21 04 80 	movabs $0x8004218dc0,%rdi
  8004201f72:	00 00 00 
  8004201f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f7a:	49 b9 c3 95 20 04 80 	movabs $0x80042095c3,%r9
  8004201f81:	00 00 00 
  8004201f84:	41 ff d1             	callq  *%r9
  8004201f87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f8b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f8e:	83 f8 05             	cmp    $0x5,%eax
  8004201f91:	77 0b                	ja     8004201f9e <multiboot_read+0x17d>
  8004201f93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f97:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f9a:	85 c0                	test   %eax,%eax
  8004201f9c:	75 0b                	jne    8004201fa9 <multiboot_read+0x188>
  8004201f9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fa2:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201fa9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201fb0:	e9 85 00 00 00       	jmpq   800420203a <multiboot_read+0x219>
  8004201fb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201fb9:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201fbc:	48 63 d2             	movslq %edx,%rdx
  8004201fbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201fc3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201fc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fcb:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fce:	89 c0                	mov    %eax,%eax
  8004201fd0:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd4:	48 89 c2             	mov    %rax,%rdx
  8004201fd7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fdb:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fde:	89 c0                	mov    %eax,%eax
  8004201fe0:	48 01 d0             	add    %rdx,%rax
  8004201fe3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201fe7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201feb:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201fef:	76 45                	jbe    8004202036 <multiboot_read+0x215>
  8004201ff1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ff4:	83 c0 01             	add    $0x1,%eax
  8004201ff7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ffa:	eb 30                	jmp    800420202c <multiboot_read+0x20b>
  8004201ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202000:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202003:	48 63 d2             	movslq %edx,%rdx
  8004202006:	48 c1 e2 03          	shl    $0x3,%rdx
  800420200a:	48 01 c2             	add    %rax,%rdx
  800420200d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202011:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004202014:	48 63 c9             	movslq %ecx,%rcx
  8004202017:	48 c1 e1 03          	shl    $0x3,%rcx
  800420201b:	48 83 e9 08          	sub    $0x8,%rcx
  800420201f:	48 01 c8             	add    %rcx,%rax
  8004202022:	48 8b 00             	mov    (%rax),%rax
  8004202025:	48 89 02             	mov    %rax,(%rdx)
  8004202028:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  800420202c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420202f:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004202032:	75 c8                	jne    8004201ffc <multiboot_read+0x1db>
  8004202034:	eb 10                	jmp    8004202046 <multiboot_read+0x225>
  8004202036:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420203a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420203d:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004202040:	0f 8c 6f ff ff ff    	jl     8004201fb5 <multiboot_read+0x194>
  8004202046:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420204a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420204d:	48 63 d2             	movslq %edx,%rdx
  8004202050:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202054:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004202058:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420205c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420205f:	48 63 c8             	movslq %eax,%rcx
  8004202062:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202069:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420206c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202071:	f7 e2                	mul    %edx
  8004202073:	89 d0                	mov    %edx,%eax
  8004202075:	c1 e8 04             	shr    $0x4,%eax
  8004202078:	89 c0                	mov    %eax,%eax
  800420207a:	48 39 c1             	cmp    %rax,%rcx
  800420207d:	0f 82 6d fe ff ff    	jb     8004201ef0 <multiboot_read+0xcf>
  8004202083:	48 bf f7 8d 21 04 80 	movabs $0x8004218df7,%rdi
  800420208a:	00 00 00 
  800420208d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202092:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004202099:	00 00 00 
  800420209c:	ff d2                	callq  *%rdx
  800420209e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042020a5:	e9 93 01 00 00       	jmpq   800420223d <multiboot_read+0x41c>
  80042020aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020ad:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042020b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020b4:	48 63 d2             	movslq %edx,%rdx
  80042020b7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042020bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042020c6:	48 63 d2             	movslq %edx,%rdx
  80042020c9:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020cd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042020d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020d5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020d8:	89 c0                	mov    %eax,%eax
  80042020da:	48 c1 e0 20          	shl    $0x20,%rax
  80042020de:	48 89 c2             	mov    %rax,%rdx
  80042020e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e5:	8b 40 04             	mov    0x4(%rax),%eax
  80042020e8:	89 c0                	mov    %eax,%eax
  80042020ea:	48 01 d0             	add    %rdx,%rax
  80042020ed:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042020f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020f5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020f8:	89 c0                	mov    %eax,%eax
  80042020fa:	48 c1 e0 20          	shl    $0x20,%rax
  80042020fe:	48 89 c2             	mov    %rax,%rdx
  8004202101:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202105:	8b 40 04             	mov    0x4(%rax),%eax
  8004202108:	89 c0                	mov    %eax,%eax
  800420210a:	48 01 d0             	add    %rdx,%rax
  800420210d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004202111:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202115:	8b 40 10             	mov    0x10(%rax),%eax
  8004202118:	89 c0                	mov    %eax,%eax
  800420211a:	48 c1 e0 20          	shl    $0x20,%rax
  800420211e:	48 89 c2             	mov    %rax,%rdx
  8004202121:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202125:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202128:	89 c0                	mov    %eax,%eax
  800420212a:	48 01 d0             	add    %rdx,%rax
  800420212d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004202134:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202138:	8b 40 10             	mov    0x10(%rax),%eax
  800420213b:	89 c0                	mov    %eax,%eax
  800420213d:	48 c1 e0 20          	shl    $0x20,%rax
  8004202141:	48 89 c2             	mov    %rax,%rdx
  8004202144:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202148:	8b 40 0c             	mov    0xc(%rax),%eax
  800420214b:	89 c0                	mov    %eax,%eax
  800420214d:	48 01 d0             	add    %rdx,%rax
  8004202150:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004202157:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420215e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202162:	48 01 d0             	add    %rdx,%rax
  8004202165:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202169:	75 7c                	jne    80042021e7 <multiboot_read+0x3c6>
  800420216b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420216f:	8b 50 14             	mov    0x14(%rax),%edx
  8004202172:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202176:	8b 40 14             	mov    0x14(%rax),%eax
  8004202179:	39 c2                	cmp    %eax,%edx
  800420217b:	75 6a                	jne    80042021e7 <multiboot_read+0x3c6>
  800420217d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202184:	89 c2                	mov    %eax,%edx
  8004202186:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420218d:	01 c2                	add    %eax,%edx
  800420218f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202193:	89 50 0c             	mov    %edx,0xc(%rax)
  8004202196:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420219d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042021a4:	48 01 d0             	add    %rdx,%rax
  80042021a7:	48 c1 e8 20          	shr    $0x20,%rax
  80042021ab:	89 c2                	mov    %eax,%edx
  80042021ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021b1:	89 50 10             	mov    %edx,0x10(%rax)
  80042021b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021b8:	8b 50 04             	mov    0x4(%rax),%edx
  80042021bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021bf:	89 50 04             	mov    %edx,0x4(%rax)
  80042021c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021c6:	8b 50 08             	mov    0x8(%rax),%edx
  80042021c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021cd:	89 50 08             	mov    %edx,0x8(%rax)
  80042021d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042021d3:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042021d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042021da:	48 63 d2             	movslq %edx,%rdx
  80042021dd:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042021e4:	00 
  80042021e5:	eb 52                	jmp    8004202239 <multiboot_read+0x418>
  80042021e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042021ee:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042021f2:	48 01 d0             	add    %rdx,%rax
  80042021f5:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042021f9:	76 3e                	jbe    8004202239 <multiboot_read+0x418>
  80042021fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021ff:	8b 50 14             	mov    0x14(%rax),%edx
  8004202202:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202206:	8b 40 14             	mov    0x14(%rax),%eax
  8004202209:	89 d6                	mov    %edx,%esi
  800420220b:	89 c7                	mov    %eax,%edi
  800420220d:	48 b8 81 1d 20 04 80 	movabs $0x8004201d81,%rax
  8004202214:	00 00 00 
  8004202217:	ff d0                	callq  *%rax
  8004202219:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  800420221f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202223:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202229:	89 50 14             	mov    %edx,0x14(%rax)
  800420222c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202230:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202236:	89 50 14             	mov    %edx,0x14(%rax)
  8004202239:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420223d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202240:	48 63 c8             	movslq %eax,%rcx
  8004202243:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420224a:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420224d:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202252:	f7 e2                	mul    %edx
  8004202254:	89 d0                	mov    %edx,%eax
  8004202256:	c1 e8 04             	shr    $0x4,%eax
  8004202259:	89 c0                	mov    %eax,%eax
  800420225b:	48 39 c1             	cmp    %rax,%rcx
  800420225e:	0f 82 46 fe ff ff    	jb     80042020aa <multiboot_read+0x289>
  8004202264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420226b:	e9 dc 00 00 00       	jmpq   800420234c <multiboot_read+0x52b>
  8004202270:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202274:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004202277:	48 63 d2             	movslq %edx,%rdx
  800420227a:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420227e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202285:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800420228c:	00 
  800420228d:	0f 84 b5 00 00 00    	je     8004202348 <multiboot_read+0x527>
  8004202293:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420229a:	8b 40 14             	mov    0x14(%rax),%eax
  800420229d:	83 f8 01             	cmp    $0x1,%eax
  80042022a0:	74 13                	je     80042022b5 <multiboot_read+0x494>
  80042022a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022a9:	8b 40 14             	mov    0x14(%rax),%eax
  80042022ac:	83 f8 03             	cmp    $0x3,%eax
  80042022af:	0f 85 93 00 00 00    	jne    8004202348 <multiboot_read+0x527>
  80042022b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022bc:	8b 40 04             	mov    0x4(%rax),%eax
  80042022bf:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042022c4:	77 49                	ja     800420230f <multiboot_read+0x4ee>
  80042022c6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022cd:	8b 40 08             	mov    0x8(%rax),%eax
  80042022d0:	85 c0                	test   %eax,%eax
  80042022d2:	75 3b                	jne    800420230f <multiboot_read+0x4ee>
  80042022d4:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042022db:	48 8b 10             	mov    (%rax),%rdx
  80042022de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022e5:	8b 40 10             	mov    0x10(%rax),%eax
  80042022e8:	89 c0                	mov    %eax,%eax
  80042022ea:	48 c1 e0 20          	shl    $0x20,%rax
  80042022ee:	48 89 c1             	mov    %rax,%rcx
  80042022f1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022f8:	8b 40 0c             	mov    0xc(%rax),%eax
  80042022fb:	89 c0                	mov    %eax,%eax
  80042022fd:	48 01 c8             	add    %rcx,%rax
  8004202300:	48 01 c2             	add    %rax,%rdx
  8004202303:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420230a:	48 89 10             	mov    %rdx,(%rax)
  800420230d:	eb 39                	jmp    8004202348 <multiboot_read+0x527>
  800420230f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202316:	48 8b 10             	mov    (%rax),%rdx
  8004202319:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202320:	8b 40 10             	mov    0x10(%rax),%eax
  8004202323:	89 c0                	mov    %eax,%eax
  8004202325:	48 c1 e0 20          	shl    $0x20,%rax
  8004202329:	48 89 c1             	mov    %rax,%rcx
  800420232c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202333:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202336:	89 c0                	mov    %eax,%eax
  8004202338:	48 01 c8             	add    %rcx,%rax
  800420233b:	48 01 c2             	add    %rax,%rdx
  800420233e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202345:	48 89 10             	mov    %rdx,(%rax)
  8004202348:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420234c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420234f:	48 63 c8             	movslq %eax,%rcx
  8004202352:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202359:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420235c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202361:	f7 e2                	mul    %edx
  8004202363:	89 d0                	mov    %edx,%eax
  8004202365:	c1 e8 04             	shr    $0x4,%eax
  8004202368:	89 c0                	mov    %eax,%eax
  800420236a:	48 39 c1             	cmp    %rax,%rcx
  800420236d:	0f 82 fd fe ff ff    	jb     8004202270 <multiboot_read+0x44f>
  8004202373:	4c 89 e4             	mov    %r12,%rsp
  8004202376:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420237a:	5b                   	pop    %rbx
  800420237b:	41 5c                	pop    %r12
  800420237d:	5d                   	pop    %rbp
  800420237e:	c3                   	retq   

000000800420237f <i386_detect_memory>:
  800420237f:	55                   	push   %rbp
  8004202380:	48 89 e5             	mov    %rsp,%rbp
  8004202383:	48 83 ec 50          	sub    $0x50,%rsp
  8004202387:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420238e:	00 
  800420238f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004202396:	00 
  8004202397:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  800420239e:	00 00 00 
  80042023a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042023a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042023a9:	48 8b 00             	mov    (%rax),%rax
  80042023ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042023b0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042023b5:	74 2d                	je     80042023e4 <i386_detect_memory+0x65>
  80042023b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023bb:	8b 00                	mov    (%rax),%eax
  80042023bd:	83 e0 40             	and    $0x40,%eax
  80042023c0:	85 c0                	test   %eax,%eax
  80042023c2:	74 20                	je     80042023e4 <i386_detect_memory+0x65>
  80042023c4:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  80042023c8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  80042023cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023d0:	48 89 ce             	mov    %rcx,%rsi
  80042023d3:	48 89 c7             	mov    %rax,%rdi
  80042023d6:	48 b8 21 1e 20 04 80 	movabs $0x8004201e21,%rax
  80042023dd:	00 00 00 
  80042023e0:	ff d0                	callq  *%rax
  80042023e2:	eb 34                	jmp    8004202418 <i386_detect_memory+0x99>
  80042023e4:	bf 15 00 00 00       	mov    $0x15,%edi
  80042023e9:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  80042023f0:	00 00 00 
  80042023f3:	ff d0                	callq  *%rax
  80042023f5:	c1 e0 0a             	shl    $0xa,%eax
  80042023f8:	48 98                	cltq   
  80042023fa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042023fe:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202403:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420240a:	00 00 00 
  800420240d:	ff d0                	callq  *%rax
  800420240f:	c1 e0 0a             	shl    $0xa,%eax
  8004202412:	48 98                	cltq   
  8004202414:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202418:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420241c:	48 85 c0             	test   %rax,%rax
  800420241f:	75 35                	jne    8004202456 <i386_detect_memory+0xd7>
  8004202421:	48 b9 f9 8d 21 04 80 	movabs $0x8004218df9,%rcx
  8004202428:	00 00 00 
  800420242b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004202432:	00 00 00 
  8004202435:	be 8b 00 00 00       	mov    $0x8b,%esi
  800420243a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202441:	00 00 00 
  8004202444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202449:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202450:	00 00 00 
  8004202453:	41 ff d0             	callq  *%r8
  8004202456:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420245a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420245e:	48 89 c2             	mov    %rax,%rdx
  8004202461:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202468:	00 00 00 
  800420246b:	48 89 10             	mov    %rdx,(%rax)
  800420246e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202472:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202476:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420247a:	bf 17 00 00 00       	mov    $0x17,%edi
  800420247f:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  8004202486:	00 00 00 
  8004202489:	ff d0                	callq  *%rax
  800420248b:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202490:	75 2c                	jne    80042024be <i386_detect_memory+0x13f>
  8004202492:	bf 34 00 00 00       	mov    $0x34,%edi
  8004202497:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420249e:	00 00 00 
  80042024a1:	ff d0                	callq  *%rax
  80042024a3:	c1 e0 10             	shl    $0x10,%eax
  80042024a6:	48 98                	cltq   
  80042024a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042024ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042024b0:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  80042024b6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042024be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042024c3:	74 1a                	je     80042024df <i386_detect_memory+0x160>
  80042024c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042024c9:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  80042024d0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024d7:	00 00 00 
  80042024da:	48 89 10             	mov    %rdx,(%rax)
  80042024dd:	eb 1a                	jmp    80042024f9 <i386_detect_memory+0x17a>
  80042024df:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  80042024e6:	00 00 00 
  80042024e9:	48 8b 10             	mov    (%rax),%rdx
  80042024ec:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042024f3:	00 00 00 
  80042024f6:	48 89 10             	mov    %rdx,(%rax)
  80042024f9:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202500:	00 00 00 
  8004202503:	48 8b 30             	mov    (%rax),%rsi
  8004202506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420250a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420250e:	48 c1 e8 0a          	shr    $0xa,%rax
  8004202512:	48 89 c1             	mov    %rax,%rcx
  8004202515:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  800420251c:	00 00 00 
  800420251f:	48 8b 00             	mov    (%rax),%rax
  8004202522:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202526:	48 c1 e8 0a          	shr    $0xa,%rax
  800420252a:	48 89 c2             	mov    %rax,%rdx
  800420252d:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202534:	00 00 00 
  8004202537:	48 8b 00             	mov    (%rax),%rax
  800420253a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420253e:	48 c1 e8 14          	shr    $0x14,%rax
  8004202542:	49 89 f0             	mov    %rsi,%r8
  8004202545:	48 89 c6             	mov    %rax,%rsi
  8004202548:	48 bf 28 8e 21 04 80 	movabs $0x8004218e28,%rdi
  800420254f:	00 00 00 
  8004202552:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202557:	49 b9 c3 95 20 04 80 	movabs $0x80042095c3,%r9
  800420255e:	00 00 00 
  8004202561:	41 ff d1             	callq  *%r9
  8004202564:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420256b:	00 
  800420256c:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202573:	07 
  8004202574:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202578:	48 c1 e0 0c          	shl    $0xc,%rax
  800420257c:	48 c1 e8 14          	shr    $0x14,%rax
  8004202580:	48 89 c1             	mov    %rax,%rcx
  8004202583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202587:	48 c1 e0 0c          	shl    $0xc,%rax
  800420258b:	48 c1 e8 14          	shr    $0x14,%rax
  800420258f:	48 89 c6             	mov    %rax,%rsi
  8004202592:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202596:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420259a:	49 89 c8             	mov    %rcx,%r8
  800420259d:	48 89 d1             	mov    %rdx,%rcx
  80042025a0:	48 89 f2             	mov    %rsi,%rdx
  80042025a3:	48 89 c6             	mov    %rax,%rsi
  80042025a6:	48 bf 78 8e 21 04 80 	movabs $0x8004218e78,%rdi
  80042025ad:	00 00 00 
  80042025b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b5:	49 b9 c3 95 20 04 80 	movabs $0x80042095c3,%r9
  80042025bc:	00 00 00 
  80042025bf:	41 ff d1             	callq  *%r9
  80042025c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025c6:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042025ca:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  80042025cf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042025d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025da:	00 00 00 
  80042025dd:	48 8b 00             	mov    (%rax),%rax
  80042025e0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042025e4:	76 3a                	jbe    8004202620 <i386_detect_memory+0x2a1>
  80042025e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042025ea:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042025f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042025f8:	00 00 00 
  80042025fb:	48 89 10             	mov    %rdx,(%rax)
  80042025fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202602:	48 89 c6             	mov    %rax,%rsi
  8004202605:	48 bf e0 8e 21 04 80 	movabs $0x8004218ee0,%rdi
  800420260c:	00 00 00 
  800420260f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202614:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420261b:	00 00 00 
  800420261e:	ff d2                	callq  *%rdx
  8004202620:	c9                   	leaveq 
  8004202621:	c3                   	retq   

0000008004202622 <boot_alloc>:
  8004202622:	55                   	push   %rbp
  8004202623:	48 89 e5             	mov    %rsp,%rbp
  8004202626:	48 83 ec 40          	sub    $0x40,%rsp
  800420262a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420262d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202634:	00 00 00 
  8004202637:	48 8b 00             	mov    (%rax),%rax
  800420263a:	48 85 c0             	test   %rax,%rax
  800420263d:	75 4b                	jne    800420268a <boot_alloc+0x68>
  800420263f:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004202646:	00 
  8004202647:	48 b8 10 e0 6d 04 80 	movabs $0x80046de010,%rax
  800420264e:	00 00 00 
  8004202651:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004202655:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202659:	48 01 d0             	add    %rdx,%rax
  800420265c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202664:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202669:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420266d:	48 89 d0             	mov    %rdx,%rax
  8004202670:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004202674:	48 29 c2             	sub    %rax,%rdx
  8004202677:	48 89 d0             	mov    %rdx,%rax
  800420267a:	48 89 c2             	mov    %rax,%rdx
  800420267d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202684:	00 00 00 
  8004202687:	48 89 10             	mov    %rdx,(%rax)
  800420268a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420268d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202694:	00 00 00 
  8004202697:	48 8b 00             	mov    (%rax),%rax
  800420269a:	48 01 c2             	add    %rax,%rdx
  800420269d:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026a4:	00 00 00 
  80042026a7:	48 8b 00             	mov    (%rax),%rax
  80042026aa:	48 39 c2             	cmp    %rax,%rdx
  80042026ad:	72 2f                	jb     80042026de <boot_alloc+0xbc>
  80042026af:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  80042026b6:	00 00 00 
  80042026b9:	48 8b 10             	mov    (%rax),%rdx
  80042026bc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042026bf:	48 01 c2             	add    %rax,%rdx
  80042026c2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042026c9:	00 00 00 
  80042026cc:	48 8b 00             	mov    (%rax),%rax
  80042026cf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  80042026d5:	48 c1 e0 0c          	shl    $0xc,%rax
  80042026d9:	48 39 c2             	cmp    %rax,%rdx
  80042026dc:	76 2a                	jbe    8004202708 <boot_alloc+0xe6>
  80042026de:	48 ba 10 8f 21 04 80 	movabs $0x8004218f10,%rdx
  80042026e5:	00 00 00 
  80042026e8:	be f3 00 00 00       	mov    $0xf3,%esi
  80042026ed:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042026f4:	00 00 00 
  80042026f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026fc:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004202703:	00 00 00 
  8004202706:	ff d1                	callq  *%rcx
  8004202708:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420270f:	00 00 00 
  8004202712:	48 8b 00             	mov    (%rax),%rax
  8004202715:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202719:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004202720:	00 
  8004202721:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  8004202728:	00 00 00 
  800420272b:	48 8b 10             	mov    (%rax),%rdx
  800420272e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202731:	48 01 d0             	add    %rdx,%rax
  8004202734:	48 89 c2             	mov    %rax,%rdx
  8004202737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420273b:	48 01 d0             	add    %rdx,%rax
  800420273e:	48 83 e8 01          	sub    $0x1,%rax
  8004202742:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420274a:	ba 00 00 00 00       	mov    $0x0,%edx
  800420274f:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004202753:	48 89 d0             	mov    %rdx,%rax
  8004202756:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420275a:	48 29 c2             	sub    %rax,%rdx
  800420275d:	48 89 d0             	mov    %rdx,%rax
  8004202760:	48 89 c2             	mov    %rax,%rdx
  8004202763:	48 b8 48 c2 49 04 80 	movabs $0x800449c248,%rax
  800420276a:	00 00 00 
  800420276d:	48 89 10             	mov    %rdx,(%rax)
  8004202770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202774:	c9                   	leaveq 
  8004202775:	c3                   	retq   

0000008004202776 <x64_vm_init>:
  8004202776:	55                   	push   %rbp
  8004202777:	48 89 e5             	mov    %rsp,%rbp
  800420277a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420277e:	48 b8 7f 23 20 04 80 	movabs $0x800420237f,%rax
  8004202785:	00 00 00 
  8004202788:	ff d0                	callq  *%rax
  800420278a:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420278f:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202796:	00 00 00 
  8004202799:	ff d0                	callq  *%rax
  800420279b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420279f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027a3:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042027a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042027ad:	48 89 c7             	mov    %rax,%rdi
  80042027b0:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042027b7:	00 00 00 
  80042027ba:	ff d0                	callq  *%rax
  80042027bc:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042027c3:	00 00 00 
  80042027c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042027ca:	48 89 10             	mov    %rdx,(%rax)
  80042027cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042027d5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027dc:	00 00 00 
  80042027df:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042027e3:	77 32                	ja     8004202817 <x64_vm_init+0xa1>
  80042027e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027e9:	48 89 c1             	mov    %rax,%rcx
  80042027ec:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  80042027f3:	00 00 00 
  80042027f6:	be 18 01 00 00       	mov    $0x118,%esi
  80042027fb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202802:	00 00 00 
  8004202805:	b8 00 00 00 00       	mov    $0x0,%eax
  800420280a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202811:	00 00 00 
  8004202814:	41 ff d0             	callq  *%r8
  8004202817:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420281e:	ff ff ff 
  8004202821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202825:	48 01 c2             	add    %rax,%rdx
  8004202828:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  800420282f:	00 00 00 
  8004202832:	48 89 10             	mov    %rdx,(%rax)
  8004202835:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420283c:	00 00 00 
  800420283f:	48 8b 00             	mov    (%rax),%rax
  8004202842:	48 c1 e0 04          	shl    $0x4,%rax
  8004202846:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420284a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420284e:	89 c7                	mov    %eax,%edi
  8004202850:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202857:	00 00 00 
  800420285a:	ff d0                	callq  *%rax
  800420285c:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  8004202863:	00 00 00 
  8004202866:	48 89 02             	mov    %rax,(%rdx)
  8004202869:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202870:	00 00 00 
  8004202873:	48 8b 00             	mov    (%rax),%rax
  8004202876:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420287a:	be 00 00 00 00       	mov    $0x0,%esi
  800420287f:	48 89 c7             	mov    %rax,%rdi
  8004202882:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  8004202889:	00 00 00 
  800420288c:	ff d0                	callq  *%rax
  800420288e:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  8004202893:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  800420289a:	00 00 00 
  800420289d:	ff d0                	callq  *%rax
  800420289f:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  80042028a6:	00 00 00 
  80042028a9:	48 89 02             	mov    %rax,(%rdx)
  80042028ac:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042028b3:	00 00 00 
  80042028b6:	48 8b 00             	mov    (%rax),%rax
  80042028b9:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  80042028be:	be 00 00 00 00       	mov    $0x0,%esi
  80042028c3:	48 89 c7             	mov    %rax,%rdi
  80042028c6:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042028cd:	00 00 00 
  80042028d0:	ff d0                	callq  *%rax
  80042028d2:	48 b8 30 2d 20 04 80 	movabs $0x8004202d30,%rax
  80042028d9:	00 00 00 
  80042028dc:	ff d0                	callq  *%rax
  80042028de:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042028e5:	00 00 00 
  80042028e8:	48 8b 00             	mov    (%rax),%rax
  80042028eb:	48 c1 e0 04          	shl    $0x4,%rax
  80042028ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042028f3:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042028fa:	00 00 00 
  80042028fd:	48 8b 00             	mov    (%rax),%rax
  8004202900:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202904:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420290b:	00 00 00 
  800420290e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004202912:	77 32                	ja     8004202946 <x64_vm_init+0x1d0>
  8004202914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202918:	48 89 c1             	mov    %rax,%rcx
  800420291b:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004202922:	00 00 00 
  8004202925:	be 43 01 00 00       	mov    $0x143,%esi
  800420292a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202931:	00 00 00 
  8004202934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202939:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202940:	00 00 00 
  8004202943:	41 ff d0             	callq  *%r8
  8004202946:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420294d:	ff ff ff 
  8004202950:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202954:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202958:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420295f:	00 00 00 
  8004202962:	48 8b 00             	mov    (%rax),%rax
  8004202965:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202969:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420296f:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202976:	00 00 00 
  8004202979:	48 89 c7             	mov    %rax,%rdi
  800420297c:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202983:	00 00 00 
  8004202986:	ff d0                	callq  *%rax
  8004202988:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420298f:	00 
  8004202990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202994:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420299a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420299e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029a2:	ba 00 00 00 00       	mov    $0x0,%edx
  80042029a7:	48 f7 75 d8          	divq   -0x28(%rbp)
  80042029ab:	48 89 d0             	mov    %rdx,%rax
  80042029ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042029b2:	48 29 c2             	sub    %rax,%rdx
  80042029b5:	48 89 d0             	mov    %rdx,%rax
  80042029b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029bc:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042029c3:	00 00 00 
  80042029c6:	48 8b 00             	mov    (%rax),%rax
  80042029c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042029cd:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042029d4:	00 00 00 
  80042029d7:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042029db:	77 32                	ja     8004202a0f <x64_vm_init+0x299>
  80042029dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042029e1:	48 89 c1             	mov    %rax,%rcx
  80042029e4:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  80042029eb:	00 00 00 
  80042029ee:	be 51 01 00 00       	mov    $0x151,%esi
  80042029f3:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042029fa:	00 00 00 
  80042029fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a02:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a09:	00 00 00 
  8004202a0c:	41 ff d0             	callq  *%r8
  8004202a0f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202a16:	ff ff ff 
  8004202a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a1d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202a21:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202a32:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  8004202a38:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202a3f:	00 00 00 
  8004202a42:	48 89 c7             	mov    %rax,%rdi
  8004202a45:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202a4c:	00 00 00 
  8004202a4f:	ff d0                	callq  *%rax
  8004202a51:	48 b8 00 c0 21 04 80 	movabs $0x800421c000,%rax
  8004202a58:	00 00 00 
  8004202a5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202a5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202a66:	00 00 00 
  8004202a69:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202a6d:	77 32                	ja     8004202aa1 <x64_vm_init+0x32b>
  8004202a6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a73:	48 89 c1             	mov    %rax,%rcx
  8004202a76:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004202a7d:	00 00 00 
  8004202a80:	be 62 01 00 00       	mov    $0x162,%esi
  8004202a85:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202a8c:	00 00 00 
  8004202a8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a94:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a9b:	00 00 00 
  8004202a9e:	41 ff d0             	callq  *%r8
  8004202aa1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202aa8:	ff ff ff 
  8004202aab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202aaf:	48 01 c2             	add    %rax,%rdx
  8004202ab2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202ab9:	00 00 00 
  8004202abc:	48 8b 00             	mov    (%rax),%rax
  8004202abf:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202ac5:	48 89 d1             	mov    %rdx,%rcx
  8004202ac8:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202acd:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202ad4:	00 00 00 
  8004202ad7:	48 89 c7             	mov    %rax,%rdi
  8004202ada:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202ae1:	00 00 00 
  8004202ae4:	ff d0                	callq  *%rax
  8004202ae6:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202af7:	48 89 c2             	mov    %rax,%rdx
  8004202afa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202b01:	00 00 00 
  8004202b04:	48 8b 00             	mov    (%rax),%rax
  8004202b07:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202b0d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004202b12:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  8004202b19:	00 00 00 
  8004202b1c:	48 89 c7             	mov    %rax,%rdi
  8004202b1f:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202b26:	00 00 00 
  8004202b29:	ff d0                	callq  *%rax
  8004202b2b:	48 b8 45 2c 20 04 80 	movabs $0x8004202c45,%rax
  8004202b32:	00 00 00 
  8004202b35:	ff d0                	callq  *%rax
  8004202b37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b3b:	48 83 c0 08          	add    $0x8,%rax
  8004202b3f:	48 8b 00             	mov    (%rax),%rax
  8004202b42:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b48:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202b4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b54:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202b57:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202b5a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202b61:	00 00 00 
  8004202b64:	48 8b 00             	mov    (%rax),%rax
  8004202b67:	48 39 c2             	cmp    %rax,%rdx
  8004202b6a:	72 32                	jb     8004202b9e <x64_vm_init+0x428>
  8004202b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b70:	48 89 c1             	mov    %rax,%rcx
  8004202b73:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004202b7a:	00 00 00 
  8004202b7d:	be 82 01 00 00       	mov    $0x182,%esi
  8004202b82:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202b89:	00 00 00 
  8004202b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b91:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202b98:	00 00 00 
  8004202b9b:	41 ff d0             	callq  *%r8
  8004202b9e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ba5:	00 00 00 
  8004202ba8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202bac:	48 01 d0             	add    %rdx,%rax
  8004202baf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202bb3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202bb7:	48 8b 00             	mov    (%rax),%rax
  8004202bba:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202bc0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bc8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bcc:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202bcf:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202bd2:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202bd9:	00 00 00 
  8004202bdc:	48 8b 00             	mov    (%rax),%rax
  8004202bdf:	48 39 c2             	cmp    %rax,%rdx
  8004202be2:	72 32                	jb     8004202c16 <x64_vm_init+0x4a0>
  8004202be4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202be8:	48 89 c1             	mov    %rax,%rcx
  8004202beb:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004202bf2:	00 00 00 
  8004202bf5:	be 83 01 00 00       	mov    $0x183,%esi
  8004202bfa:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202c01:	00 00 00 
  8004202c04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202c10:	00 00 00 
  8004202c13:	41 ff d0             	callq  *%r8
  8004202c16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c1d:	00 00 00 
  8004202c20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202c24:	48 01 d0             	add    %rdx,%rax
  8004202c27:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202c2b:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202c3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202c40:	0f 22 d8             	mov    %rax,%cr3
  8004202c43:	c9                   	leaveq 
  8004202c44:	c3                   	retq   

0000008004202c45 <mem_init_mp>:
  8004202c45:	55                   	push   %rbp
  8004202c46:	48 89 e5             	mov    %rsp,%rbp
  8004202c49:	48 83 ec 20          	sub    $0x20,%rsp
  8004202c4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202c54:	e9 cb 00 00 00       	jmpq   8004202d24 <mem_init_mp+0xdf>
  8004202c59:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202c5c:	89 d0                	mov    %edx,%eax
  8004202c5e:	01 c0                	add    %eax,%eax
  8004202c60:	01 d0                	add    %edx,%eax
  8004202c62:	c1 e0 0f             	shl    $0xf,%eax
  8004202c65:	48 98                	cltq   
  8004202c67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c6e:	00 00 00 
  8004202c71:	48 29 c2             	sub    %rax,%rdx
  8004202c74:	48 89 d0             	mov    %rdx,%rax
  8004202c77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c7e:	48 98                	cltq   
  8004202c80:	48 c1 e0 10          	shl    $0x10,%rax
  8004202c84:	48 89 c2             	mov    %rax,%rdx
  8004202c87:	48 b8 00 e0 69 04 80 	movabs $0x800469e000,%rax
  8004202c8e:	00 00 00 
  8004202c91:	48 01 d0             	add    %rdx,%rax
  8004202c94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202c98:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c9f:	00 00 00 
  8004202ca2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202ca6:	77 32                	ja     8004202cda <mem_init_mp+0x95>
  8004202ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cac:	48 89 c1             	mov    %rax,%rcx
  8004202caf:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004202cb6:	00 00 00 
  8004202cb9:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202cbe:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202cc5:	00 00 00 
  8004202cc8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ccd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202cd4:	00 00 00 
  8004202cd7:	41 ff d0             	callq  *%r8
  8004202cda:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ce1:	ff ff ff 
  8004202ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ce8:	48 01 c2             	add    %rax,%rdx
  8004202ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202cef:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202cf6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004202cfd:	00 00 00 
  8004202d00:	48 8b 00             	mov    (%rax),%rax
  8004202d03:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202d09:	48 89 d1             	mov    %rdx,%rcx
  8004202d0c:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202d11:	48 89 c7             	mov    %rax,%rdi
  8004202d14:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202d1b:	00 00 00 
  8004202d1e:	ff d0                	callq  *%rax
  8004202d20:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202d24:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202d28:	0f 8e 2b ff ff ff    	jle    8004202c59 <mem_init_mp+0x14>
  8004202d2e:	c9                   	leaveq 
  8004202d2f:	c3                   	retq   

0000008004202d30 <page_init>:
  8004202d30:	55                   	push   %rbp
  8004202d31:	48 89 e5             	mov    %rsp,%rbp
  8004202d34:	48 83 ec 50          	sub    $0x50,%rsp
  8004202d38:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202d3d:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202d44:	00 00 00 
  8004202d47:	ff d0                	callq  *%rax
  8004202d49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202d4d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202d54:	00 
  8004202d55:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202d5c:	00 
  8004202d5d:	e9 65 02 00 00       	jmpq   8004202fc7 <page_init+0x297>
  8004202d62:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d6e:	74 1a                	je     8004202d8a <page_init+0x5a>
  8004202d70:	48 b8 30 c2 49 04 80 	movabs $0x800449c230,%rax
  8004202d77:	00 00 00 
  8004202d7a:	48 8b 00             	mov    (%rax),%rax
  8004202d7d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202d81:	73 07                	jae    8004202d8a <page_init+0x5a>
  8004202d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202d8a:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202d8f:	75 07                	jne    8004202d98 <page_init+0x68>
  8004202d91:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202da0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202da7:	00 00 00 
  8004202daa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202dae:	77 32                	ja     8004202de2 <page_init+0xb2>
  8004202db0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202db4:	48 89 c1             	mov    %rax,%rcx
  8004202db7:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004202dbe:	00 00 00 
  8004202dc1:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202dc6:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202dcd:	00 00 00 
  8004202dd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202dd5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ddc:	00 00 00 
  8004202ddf:	41 ff d0             	callq  *%r8
  8004202de2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202de9:	ff ff ff 
  8004202dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202df0:	48 01 d0             	add    %rdx,%rax
  8004202df3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202df7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202dfb:	77 07                	ja     8004202e04 <page_init+0xd4>
  8004202dfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e08:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202e0e:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202e12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202e16:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e1d:	00 00 00 
  8004202e20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e28:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e2c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202e2f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202e32:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202e39:	00 00 00 
  8004202e3c:	48 8b 00             	mov    (%rax),%rax
  8004202e3f:	48 39 c2             	cmp    %rax,%rdx
  8004202e42:	72 32                	jb     8004202e76 <page_init+0x146>
  8004202e44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e48:	48 89 c1             	mov    %rax,%rcx
  8004202e4b:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004202e52:	00 00 00 
  8004202e55:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202e5a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202e61:	00 00 00 
  8004202e64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202e69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202e70:	00 00 00 
  8004202e73:	41 ff d0             	callq  *%r8
  8004202e76:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202e7d:	00 00 00 
  8004202e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e84:	48 01 d0             	add    %rdx,%rax
  8004202e87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202e8b:	0f 87 84 00 00 00    	ja     8004202f15 <page_init+0x1e5>
  8004202e91:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e98:	00 00 00 
  8004202e9b:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202ea1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202ea5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ea9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ead:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202eb0:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202eb3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202eba:	00 00 00 
  8004202ebd:	48 8b 00             	mov    (%rax),%rax
  8004202ec0:	48 39 c2             	cmp    %rax,%rdx
  8004202ec3:	72 32                	jb     8004202ef7 <page_init+0x1c7>
  8004202ec5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ec9:	48 89 c1             	mov    %rax,%rcx
  8004202ecc:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004202ed3:	00 00 00 
  8004202ed6:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202edb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004202ee2:	00 00 00 
  8004202ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202eea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ef1:	00 00 00 
  8004202ef4:	41 ff d0             	callq  *%r8
  8004202ef7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202efe:	00 00 00 
  8004202f01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202f05:	48 01 d0             	add    %rdx,%rax
  8004202f08:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202f0c:	76 07                	jbe    8004202f15 <page_init+0x1e5>
  8004202f0e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202f15:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f1c:	00 00 00 
  8004202f1f:	48 8b 00             	mov    (%rax),%rax
  8004202f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f26:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f2a:	48 01 c2             	add    %rax,%rdx
  8004202f2d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202f30:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202f34:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f3b:	00 00 00 
  8004202f3e:	48 8b 00             	mov    (%rax),%rax
  8004202f41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f45:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f49:	48 01 d0             	add    %rdx,%rax
  8004202f4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202f53:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202f57:	75 69                	jne    8004202fc2 <page_init+0x292>
  8004202f59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202f5e:	74 21                	je     8004202f81 <page_init+0x251>
  8004202f60:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f67:	00 00 00 
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f71:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f75:	48 01 c2             	add    %rax,%rdx
  8004202f78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202f7c:	48 89 10             	mov    %rdx,(%rax)
  8004202f7f:	eb 25                	jmp    8004202fa6 <page_init+0x276>
  8004202f81:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202f88:	00 00 00 
  8004202f8b:	48 8b 00             	mov    (%rax),%rax
  8004202f8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f92:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f96:	48 01 c2             	add    %rax,%rdx
  8004202f99:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202fa0:	00 00 00 
  8004202fa3:	48 89 10             	mov    %rdx,(%rax)
  8004202fa6:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004202fad:	00 00 00 
  8004202fb0:	48 8b 00             	mov    (%rax),%rax
  8004202fb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fb7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202fbb:	48 01 d0             	add    %rdx,%rax
  8004202fbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202fc2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202fc7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004202fce:	00 00 00 
  8004202fd1:	48 8b 00             	mov    (%rax),%rax
  8004202fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202fd8:	0f 82 84 fd ff ff    	jb     8004202d62 <page_init+0x32>
  8004202fde:	c9                   	leaveq 
  8004202fdf:	c3                   	retq   

0000008004202fe0 <page_alloc>:
  8004202fe0:	55                   	push   %rbp
  8004202fe1:	48 89 e5             	mov    %rsp,%rbp
  8004202fe4:	48 83 ec 20          	sub    $0x20,%rsp
  8004202fe8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202feb:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004202ff2:	00 00 00 
  8004202ff5:	48 8b 00             	mov    (%rax),%rax
  8004202ff8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ffc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203001:	74 5e                	je     8004203061 <page_alloc+0x81>
  8004203003:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420300a:	00 00 00 
  800420300d:	48 8b 00             	mov    (%rax),%rax
  8004203010:	48 8b 10             	mov    (%rax),%rdx
  8004203013:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  800420301a:	00 00 00 
  800420301d:	48 89 10             	mov    %rdx,(%rax)
  8004203020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203024:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420302b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420302e:	83 e0 01             	and    $0x1,%eax
  8004203031:	85 c0                	test   %eax,%eax
  8004203033:	74 2c                	je     8004203061 <page_alloc+0x81>
  8004203035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203039:	48 89 c7             	mov    %rax,%rdi
  800420303c:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004203043:	00 00 00 
  8004203046:	ff d0                	callq  *%rax
  8004203048:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420304d:	be 00 00 00 00       	mov    $0x0,%esi
  8004203052:	48 89 c7             	mov    %rax,%rdi
  8004203055:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800420305c:	00 00 00 
  800420305f:	ff d0                	callq  *%rax
  8004203061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203065:	c9                   	leaveq 
  8004203066:	c3                   	retq   

0000008004203067 <page_initpp>:
  8004203067:	55                   	push   %rbp
  8004203068:	48 89 e5             	mov    %rsp,%rbp
  800420306b:	48 83 ec 10          	sub    $0x10,%rsp
  800420306f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203077:	ba 10 00 00 00       	mov    $0x10,%edx
  800420307c:	be 00 00 00 00       	mov    $0x0,%esi
  8004203081:	48 89 c7             	mov    %rax,%rdi
  8004203084:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800420308b:	00 00 00 
  800420308e:	ff d0                	callq  *%rax
  8004203090:	c9                   	leaveq 
  8004203091:	c3                   	retq   

0000008004203092 <page_free>:
  8004203092:	55                   	push   %rbp
  8004203093:	48 89 e5             	mov    %rsp,%rbp
  8004203096:	48 83 ec 10          	sub    $0x10,%rsp
  800420309a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420309e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a6:	66 85 c0             	test   %ax,%ax
  80042030a9:	75 0c                	jne    80042030b7 <page_free+0x25>
  80042030ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030af:	48 8b 00             	mov    (%rax),%rax
  80042030b2:	48 85 c0             	test   %rax,%rax
  80042030b5:	74 2c                	je     80042030e3 <page_free+0x51>
  80042030b7:	48 ba 60 8f 21 04 80 	movabs $0x8004218f60,%rdx
  80042030be:	00 00 00 
  80042030c1:	be 3d 02 00 00       	mov    $0x23d,%esi
  80042030c6:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042030cd:	00 00 00 
  80042030d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042030d5:	48 b9 1b 07 20 04 80 	movabs $0x800420071b,%rcx
  80042030dc:	00 00 00 
  80042030df:	ff d1                	callq  *%rcx
  80042030e1:	eb 2f                	jmp    8004203112 <page_free+0x80>
  80042030e3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030ea:	00 00 00 
  80042030ed:	48 8b 10             	mov    (%rax),%rdx
  80042030f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030f4:	48 89 10             	mov    %rdx,(%rax)
  80042030f7:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042030fe:	00 00 00 
  8004203101:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203105:	48 89 10             	mov    %rdx,(%rax)
  8004203108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420310c:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004203112:	c9                   	leaveq 
  8004203113:	c3                   	retq   

0000008004203114 <page_decref>:
  8004203114:	55                   	push   %rbp
  8004203115:	48 89 e5             	mov    %rsp,%rbp
  8004203118:	48 83 ec 10          	sub    $0x10,%rsp
  800420311c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203124:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203128:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420312b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420312f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203137:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420313b:	66 85 c0             	test   %ax,%ax
  800420313e:	75 13                	jne    8004203153 <page_decref+0x3f>
  8004203140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203144:	48 89 c7             	mov    %rax,%rdi
  8004203147:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420314e:	00 00 00 
  8004203151:	ff d0                	callq  *%rax
  8004203153:	c9                   	leaveq 
  8004203154:	c3                   	retq   

0000008004203155 <pml4e_walk>:
  8004203155:	55                   	push   %rbp
  8004203156:	48 89 e5             	mov    %rsp,%rbp
  8004203159:	53                   	push   %rbx
  800420315a:	48 83 ec 68          	sub    $0x68,%rsp
  800420315e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203162:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203166:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203169:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800420316e:	0f 84 4e 02 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203174:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203178:	48 c1 e8 27          	shr    $0x27,%rax
  800420317c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203181:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203188:	00 
  8004203189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420318d:	48 01 d0             	add    %rdx,%rax
  8004203190:	48 8b 00             	mov    (%rax),%rax
  8004203193:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420319b:	83 e0 01             	and    $0x1,%eax
  800420319e:	48 85 c0             	test   %rax,%rax
  80042031a1:	0f 85 7f 01 00 00    	jne    8004203326 <pml4e_walk+0x1d1>
  80042031a7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042031ab:	0f 84 75 01 00 00    	je     8004203326 <pml4e_walk+0x1d1>
  80042031b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042031b8:	00 
  80042031b9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042031be:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042031c5:	00 00 00 
  80042031c8:	ff d0                	callq  *%rax
  80042031ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042031ce:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042031d3:	0f 84 43 01 00 00    	je     800420331c <pml4e_walk+0x1c7>
  80042031d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031dd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042031e1:	8d 50 01             	lea    0x1(%rax),%edx
  80042031e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031e8:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042031ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031f0:	48 c1 e8 27          	shr    $0x27,%rax
  80042031f4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203200:	00 
  8004203201:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203205:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420320d:	48 89 c7             	mov    %rax,%rdi
  8004203210:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203217:	00 00 00 
  800420321a:	ff d0                	callq  *%rax
  800420321c:	48 83 c8 07          	or     $0x7,%rax
  8004203220:	48 89 03             	mov    %rax,(%rbx)
  8004203223:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203227:	48 c1 e8 27          	shr    $0x27,%rax
  800420322b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203230:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203237:	00 
  8004203238:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420323c:	48 01 d0             	add    %rdx,%rax
  800420323f:	48 8b 00             	mov    (%rax),%rax
  8004203242:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203248:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420324c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203250:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203254:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203257:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420325a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203261:	00 00 00 
  8004203264:	48 8b 00             	mov    (%rax),%rax
  8004203267:	48 39 c2             	cmp    %rax,%rdx
  800420326a:	72 32                	jb     800420329e <pml4e_walk+0x149>
  800420326c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203270:	48 89 c1             	mov    %rax,%rcx
  8004203273:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420327a:	00 00 00 
  800420327d:	be 79 02 00 00       	mov    $0x279,%esi
  8004203282:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203289:	00 00 00 
  800420328c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203291:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203298:	00 00 00 
  800420329b:	41 ff d0             	callq  *%r8
  800420329e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042032a5:	00 00 00 
  80042032a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042032ac:	48 01 d0             	add    %rdx,%rax
  80042032af:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042032b2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042032b6:	48 89 ce             	mov    %rcx,%rsi
  80042032b9:	48 89 c7             	mov    %rax,%rdi
  80042032bc:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042032c3:	00 00 00 
  80042032c6:	ff d0                	callq  *%rax
  80042032c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042032cc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042032d1:	74 09                	je     80042032dc <pml4e_walk+0x187>
  80042032d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042032d7:	e9 eb 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  80042032dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032e0:	48 c1 e8 27          	shr    $0x27,%rax
  80042032e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032f0:	00 
  80042032f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032f5:	48 01 d0             	add    %rdx,%rax
  80042032f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042032ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203303:	48 89 c7             	mov    %rax,%rdi
  8004203306:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420330d:	00 00 00 
  8004203310:	ff d0                	callq  *%rax
  8004203312:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203317:	e9 ab 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  800420331c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203321:	e9 a1 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  8004203326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420332a:	83 e0 01             	and    $0x1,%eax
  800420332d:	48 85 c0             	test   %rax,%rax
  8004203330:	0f 84 8c 00 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420333a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203344:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203348:	48 c1 e8 0c          	shr    $0xc,%rax
  800420334c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420334f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203352:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203359:	00 00 00 
  800420335c:	48 8b 00             	mov    (%rax),%rax
  800420335f:	48 39 c2             	cmp    %rax,%rdx
  8004203362:	72 32                	jb     8004203396 <pml4e_walk+0x241>
  8004203364:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203368:	48 89 c1             	mov    %rax,%rcx
  800420336b:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004203372:	00 00 00 
  8004203375:	be 83 02 00 00       	mov    $0x283,%esi
  800420337a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203381:	00 00 00 
  8004203384:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203389:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203390:	00 00 00 
  8004203393:	41 ff d0             	callq  *%r8
  8004203396:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420339d:	00 00 00 
  80042033a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042033a4:	48 01 d0             	add    %rdx,%rax
  80042033a7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ae:	48 89 ce             	mov    %rcx,%rsi
  80042033b1:	48 89 c7             	mov    %rax,%rdi
  80042033b4:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042033bb:	00 00 00 
  80042033be:	ff d0                	callq  *%rax
  80042033c0:	eb 05                	jmp    80042033c7 <pml4e_walk+0x272>
  80042033c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c7:	48 83 c4 68          	add    $0x68,%rsp
  80042033cb:	5b                   	pop    %rbx
  80042033cc:	5d                   	pop    %rbp
  80042033cd:	c3                   	retq   

00000080042033ce <pdpe_walk>:
  80042033ce:	55                   	push   %rbp
  80042033cf:	48 89 e5             	mov    %rsp,%rbp
  80042033d2:	53                   	push   %rbx
  80042033d3:	48 83 ec 68          	sub    $0x68,%rsp
  80042033d7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042033db:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042033df:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042033e2:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042033e7:	0f 84 4e 02 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042033ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042033f1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042033f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042033fa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203401:	00 
  8004203402:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203406:	48 01 d0             	add    %rdx,%rax
  8004203409:	48 8b 00             	mov    (%rax),%rax
  800420340c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203414:	83 e0 01             	and    $0x1,%eax
  8004203417:	48 85 c0             	test   %rax,%rax
  800420341a:	0f 85 7f 01 00 00    	jne    800420359f <pdpe_walk+0x1d1>
  8004203420:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203424:	0f 84 75 01 00 00    	je     800420359f <pdpe_walk+0x1d1>
  800420342a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203431:	00 
  8004203432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203437:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420343e:	00 00 00 
  8004203441:	ff d0                	callq  *%rax
  8004203443:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203447:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420344c:	0f 84 43 01 00 00    	je     8004203595 <pdpe_walk+0x1c7>
  8004203452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203456:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420345a:	8d 50 01             	lea    0x1(%rax),%edx
  800420345d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203461:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203465:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203469:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420346d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203472:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203479:	00 
  800420347a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420347e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203482:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203486:	48 89 c7             	mov    %rax,%rdi
  8004203489:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203490:	00 00 00 
  8004203493:	ff d0                	callq  *%rax
  8004203495:	48 83 c8 07          	or     $0x7,%rax
  8004203499:	48 89 03             	mov    %rax,(%rbx)
  800420349c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042034a0:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042034a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042034a9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042034b0:	00 
  80042034b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042034b5:	48 01 d0             	add    %rdx,%rax
  80042034b8:	48 8b 00             	mov    (%rax),%rax
  80042034bb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042034c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042034c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042034cd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  80042034d0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042034d3:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042034da:	00 00 00 
  80042034dd:	48 8b 00             	mov    (%rax),%rax
  80042034e0:	48 39 c2             	cmp    %rax,%rdx
  80042034e3:	72 32                	jb     8004203517 <pdpe_walk+0x149>
  80042034e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034e9:	48 89 c1             	mov    %rax,%rcx
  80042034ec:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042034f3:	00 00 00 
  80042034f6:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042034fb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203502:	00 00 00 
  8004203505:	b8 00 00 00 00       	mov    $0x0,%eax
  800420350a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203511:	00 00 00 
  8004203514:	41 ff d0             	callq  *%r8
  8004203517:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420351e:	00 00 00 
  8004203521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203525:	48 01 d0             	add    %rdx,%rax
  8004203528:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420352b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420352f:	48 89 ce             	mov    %rcx,%rsi
  8004203532:	48 89 c7             	mov    %rax,%rdi
  8004203535:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  800420353c:	00 00 00 
  800420353f:	ff d0                	callq  *%rax
  8004203541:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203545:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420354a:	74 09                	je     8004203555 <pdpe_walk+0x187>
  800420354c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203550:	e9 eb 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203555:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203559:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420355d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203562:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203569:	00 
  800420356a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420356e:	48 01 d0             	add    %rdx,%rax
  8004203571:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420357c:	48 89 c7             	mov    %rax,%rdi
  800420357f:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203586:	00 00 00 
  8004203589:	ff d0                	callq  *%rax
  800420358b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203590:	e9 ab 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203595:	b8 00 00 00 00       	mov    $0x0,%eax
  800420359a:	e9 a1 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  800420359f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035a3:	83 e0 01             	and    $0x1,%eax
  80042035a6:	48 85 c0             	test   %rax,%rax
  80042035a9:	0f 84 8c 00 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042035af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035b3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042035b9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042035bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035c1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035c5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042035c8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042035cb:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042035d2:	00 00 00 
  80042035d5:	48 8b 00             	mov    (%rax),%rax
  80042035d8:	48 39 c2             	cmp    %rax,%rdx
  80042035db:	72 32                	jb     800420360f <pdpe_walk+0x241>
  80042035dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035e1:	48 89 c1             	mov    %rax,%rcx
  80042035e4:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042035eb:	00 00 00 
  80042035ee:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042035f3:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042035fa:	00 00 00 
  80042035fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203602:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203609:	00 00 00 
  800420360c:	41 ff d0             	callq  *%r8
  800420360f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203616:	00 00 00 
  8004203619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420361d:	48 01 d0             	add    %rdx,%rax
  8004203620:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203623:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203627:	48 89 ce             	mov    %rcx,%rsi
  800420362a:	48 89 c7             	mov    %rax,%rdi
  800420362d:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  8004203634:	00 00 00 
  8004203637:	ff d0                	callq  *%rax
  8004203639:	eb 05                	jmp    8004203640 <pdpe_walk+0x272>
  800420363b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203640:	48 83 c4 68          	add    $0x68,%rsp
  8004203644:	5b                   	pop    %rbx
  8004203645:	5d                   	pop    %rbp
  8004203646:	c3                   	retq   

0000008004203647 <pgdir_walk>:
  8004203647:	55                   	push   %rbp
  8004203648:	48 89 e5             	mov    %rsp,%rbp
  800420364b:	53                   	push   %rbx
  800420364c:	48 83 ec 58          	sub    $0x58,%rsp
  8004203650:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203654:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203658:	89 55 ac             	mov    %edx,-0x54(%rbp)
  800420365b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203660:	0f 84 fd 01 00 00    	je     8004203863 <pgdir_walk+0x21c>
  8004203666:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420366a:	48 c1 e8 15          	shr    $0x15,%rax
  800420366e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203673:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420367a:	00 
  800420367b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420367f:	48 01 d0             	add    %rdx,%rax
  8004203682:	48 8b 00             	mov    (%rax),%rax
  8004203685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420368d:	83 e0 01             	and    $0x1,%eax
  8004203690:	48 85 c0             	test   %rax,%rax
  8004203693:	0f 85 2f 01 00 00    	jne    80042037c8 <pgdir_walk+0x181>
  8004203699:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420369d:	0f 84 25 01 00 00    	je     80042037c8 <pgdir_walk+0x181>
  80042036a3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042036aa:	00 
  80042036ab:	bf 01 00 00 00       	mov    $0x1,%edi
  80042036b0:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042036b7:	00 00 00 
  80042036ba:	ff d0                	callq  *%rax
  80042036bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042036c0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042036c5:	0f 84 f3 00 00 00    	je     80042037be <pgdir_walk+0x177>
  80042036cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036cf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042036d3:	8d 50 01             	lea    0x1(%rax),%edx
  80042036d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036da:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042036de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036e2:	48 c1 e8 15          	shr    $0x15,%rax
  80042036e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036f2:	00 
  80042036f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042036f7:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042036fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036ff:	48 89 c7             	mov    %rax,%rdi
  8004203702:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203709:	00 00 00 
  800420370c:	ff d0                	callq  *%rax
  800420370e:	48 83 c8 07          	or     $0x7,%rax
  8004203712:	48 89 03             	mov    %rax,(%rbx)
  8004203715:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203719:	48 c1 e8 0c          	shr    $0xc,%rax
  800420371d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203722:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203729:	00 
  800420372a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420372e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203732:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203737:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  800420373e:	00 
  800420373f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203743:	48 01 c8             	add    %rcx,%rax
  8004203746:	48 8b 00             	mov    (%rax),%rax
  8004203749:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420374f:	48 01 d0             	add    %rdx,%rax
  8004203752:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420375a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420375e:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203761:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203764:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420376b:	00 00 00 
  800420376e:	48 8b 00             	mov    (%rax),%rax
  8004203771:	48 39 c2             	cmp    %rax,%rdx
  8004203774:	72 32                	jb     80042037a8 <pgdir_walk+0x161>
  8004203776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420377a:	48 89 c1             	mov    %rax,%rcx
  800420377d:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004203784:	00 00 00 
  8004203787:	be be 02 00 00       	mov    $0x2be,%esi
  800420378c:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203793:	00 00 00 
  8004203796:	b8 00 00 00 00       	mov    $0x0,%eax
  800420379b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042037a2:	00 00 00 
  80042037a5:	41 ff d0             	callq  *%r8
  80042037a8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042037af:	00 00 00 
  80042037b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042037b6:	48 01 d0             	add    %rdx,%rax
  80042037b9:	e9 aa 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037c3:	e9 a0 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037cc:	83 e0 01             	and    $0x1,%eax
  80042037cf:	48 85 c0             	test   %rax,%rax
  80042037d2:	0f 84 8b 00 00 00    	je     8004203863 <pgdir_walk+0x21c>
  80042037d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042037dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042037e0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037e5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037ec:	00 
  80042037ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037f1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037f7:	48 01 d0             	add    %rdx,%rax
  80042037fa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042037fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203802:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203806:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203809:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420380c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203813:	00 00 00 
  8004203816:	48 8b 00             	mov    (%rax),%rax
  8004203819:	48 39 c2             	cmp    %rax,%rdx
  800420381c:	72 32                	jb     8004203850 <pgdir_walk+0x209>
  800420381e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203822:	48 89 c1             	mov    %rax,%rcx
  8004203825:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420382c:	00 00 00 
  800420382f:	be c3 02 00 00       	mov    $0x2c3,%esi
  8004203834:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420383b:	00 00 00 
  800420383e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203843:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420384a:	00 00 00 
  800420384d:	41 ff d0             	callq  *%r8
  8004203850:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203857:	00 00 00 
  800420385a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420385e:	48 01 d0             	add    %rdx,%rax
  8004203861:	eb 05                	jmp    8004203868 <pgdir_walk+0x221>
  8004203863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203868:	48 83 c4 58          	add    $0x58,%rsp
  800420386c:	5b                   	pop    %rbx
  800420386d:	5d                   	pop    %rbp
  800420386e:	c3                   	retq   

000000800420386f <boot_map_region>:
  800420386f:	55                   	push   %rbp
  8004203870:	48 89 e5             	mov    %rsp,%rbp
  8004203873:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203877:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420387b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420387f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004203883:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203887:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  800420388b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203892:	00 
  8004203893:	e9 aa 02 00 00       	jmpq   8004203b42 <boot_map_region+0x2d3>
  8004203898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420389c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038a0:	48 01 d0             	add    %rdx,%rax
  80042038a3:	48 89 c1             	mov    %rax,%rcx
  80042038a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042038aa:	ba 01 00 00 00       	mov    $0x1,%edx
  80042038af:	48 89 ce             	mov    %rcx,%rsi
  80042038b2:	48 89 c7             	mov    %rax,%rdi
  80042038b5:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042038bc:	00 00 00 
  80042038bf:	ff d0                	callq  *%rax
  80042038c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042038c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038c9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042038cd:	48 01 d0             	add    %rdx,%rax
  80042038d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042038d4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042038d9:	74 23                	je     80042038fe <boot_map_region+0x8f>
  80042038db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042038e5:	48 89 c2             	mov    %rax,%rdx
  80042038e8:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042038eb:	48 98                	cltq   
  80042038ed:	48 09 d0             	or     %rdx,%rax
  80042038f0:	48 83 c8 01          	or     $0x1,%rax
  80042038f4:	48 89 c2             	mov    %rax,%rdx
  80042038f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042038fb:	48 89 10             	mov    %rdx,(%rax)
  80042038fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203902:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203906:	48 01 d0             	add    %rdx,%rax
  8004203909:	48 c1 e8 27          	shr    $0x27,%rax
  800420390d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203919:	00 
  800420391a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420391e:	48 01 d0             	add    %rdx,%rax
  8004203921:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203925:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203929:	48 01 ca             	add    %rcx,%rdx
  800420392c:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203930:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203936:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  800420393d:	00 
  800420393e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203942:	48 01 ca             	add    %rcx,%rdx
  8004203945:	48 8b 0a             	mov    (%rdx),%rcx
  8004203948:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420394b:	48 63 d2             	movslq %edx,%rdx
  800420394e:	48 09 ca             	or     %rcx,%rdx
  8004203951:	48 83 ca 01          	or     $0x1,%rdx
  8004203955:	48 89 10             	mov    %rdx,(%rax)
  8004203958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420395c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203960:	48 01 d0             	add    %rdx,%rax
  8004203963:	48 c1 e8 27          	shr    $0x27,%rax
  8004203967:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420396c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203973:	00 
  8004203974:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203978:	48 01 d0             	add    %rdx,%rax
  800420397b:	48 8b 00             	mov    (%rax),%rax
  800420397e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203984:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420398c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203990:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004203993:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203996:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420399d:	00 00 00 
  80042039a0:	48 8b 00             	mov    (%rax),%rax
  80042039a3:	48 39 c2             	cmp    %rax,%rdx
  80042039a6:	72 32                	jb     80042039da <boot_map_region+0x16b>
  80042039a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039ac:	48 89 c1             	mov    %rax,%rcx
  80042039af:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042039b6:	00 00 00 
  80042039b9:	be e6 02 00 00       	mov    $0x2e6,%esi
  80042039be:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042039c5:	00 00 00 
  80042039c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039cd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042039d4:	00 00 00 
  80042039d7:	41 ff d0             	callq  *%r8
  80042039da:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042039e1:	00 00 00 
  80042039e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039e8:	48 01 d0             	add    %rdx,%rax
  80042039eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042039ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039f3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039f7:	48 01 d0             	add    %rdx,%rax
  80042039fa:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042039fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a03:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a0a:	00 
  8004203a0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a0f:	48 01 d0             	add    %rdx,%rax
  8004203a12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203a16:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203a1a:	48 01 ca             	add    %rcx,%rdx
  8004203a1d:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203a21:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a27:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a2e:	00 
  8004203a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203a33:	48 01 ca             	add    %rcx,%rdx
  8004203a36:	48 8b 0a             	mov    (%rdx),%rcx
  8004203a39:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203a3c:	48 63 d2             	movslq %edx,%rdx
  8004203a3f:	48 09 ca             	or     %rcx,%rdx
  8004203a42:	48 83 ca 01          	or     $0x1,%rdx
  8004203a46:	48 89 10             	mov    %rdx,(%rax)
  8004203a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a4d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a51:	48 01 d0             	add    %rdx,%rax
  8004203a54:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a58:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a64:	00 
  8004203a65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a69:	48 01 d0             	add    %rdx,%rax
  8004203a6c:	48 8b 00             	mov    (%rax),%rax
  8004203a6f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203a75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203a79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a7d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203a81:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203a84:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203a87:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203a8e:	00 00 00 
  8004203a91:	48 8b 00             	mov    (%rax),%rax
  8004203a94:	48 39 c2             	cmp    %rax,%rdx
  8004203a97:	72 32                	jb     8004203acb <boot_map_region+0x25c>
  8004203a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a9d:	48 89 c1             	mov    %rax,%rcx
  8004203aa0:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004203aa7:	00 00 00 
  8004203aaa:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203aaf:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203ab6:	00 00 00 
  8004203ab9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203abe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203ac5:	00 00 00 
  8004203ac8:	41 ff d0             	callq  *%r8
  8004203acb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203ad2:	00 00 00 
  8004203ad5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203ad9:	48 01 d0             	add    %rdx,%rax
  8004203adc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004203ae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ae4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203ae8:	48 01 d0             	add    %rdx,%rax
  8004203aeb:	48 c1 e8 15          	shr    $0x15,%rax
  8004203aef:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203af4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203afb:	00 
  8004203afc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b00:	48 01 d0             	add    %rdx,%rax
  8004203b03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203b07:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203b0b:	48 01 ca             	add    %rcx,%rdx
  8004203b0e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203b12:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b18:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b1f:	00 
  8004203b20:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203b24:	48 01 ca             	add    %rcx,%rdx
  8004203b27:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b2a:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203b2d:	48 63 d2             	movslq %edx,%rdx
  8004203b30:	48 09 ca             	or     %rcx,%rdx
  8004203b33:	48 83 ca 01          	or     $0x1,%rdx
  8004203b37:	48 89 10             	mov    %rdx,(%rax)
  8004203b3a:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203b41:	00 
  8004203b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b46:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203b4a:	0f 82 48 fd ff ff    	jb     8004203898 <boot_map_region+0x29>
  8004203b50:	c9                   	leaveq 
  8004203b51:	c3                   	retq   

0000008004203b52 <page_insert>:
  8004203b52:	55                   	push   %rbp
  8004203b53:	48 89 e5             	mov    %rsp,%rbp
  8004203b56:	48 83 ec 60          	sub    $0x60,%rsp
  8004203b5a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203b5e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203b62:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203b66:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203b69:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203b6e:	0f 84 47 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b74:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203b79:	0f 84 3c 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b7f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b87:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203b8c:	48 89 ce             	mov    %rcx,%rsi
  8004203b8f:	48 89 c7             	mov    %rax,%rdi
  8004203b92:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203b99:	00 00 00 
  8004203b9c:	ff d0                	callq  *%rax
  8004203b9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203ba2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203ba7:	0f 84 07 03 00 00    	je     8004203eb4 <page_insert+0x362>
  8004203bad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bb1:	48 c1 e8 27          	shr    $0x27,%rax
  8004203bb5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203bba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bc1:	00 
  8004203bc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bc6:	48 01 d0             	add    %rdx,%rax
  8004203bc9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203bcd:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203bd1:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203bd7:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203bde:	00 
  8004203bdf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203be3:	48 01 ca             	add    %rcx,%rdx
  8004203be6:	48 8b 0a             	mov    (%rdx),%rcx
  8004203be9:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203bec:	80 e6 f1             	and    $0xf1,%dh
  8004203bef:	48 63 d2             	movslq %edx,%rdx
  8004203bf2:	48 09 ca             	or     %rcx,%rdx
  8004203bf5:	48 89 10             	mov    %rdx,(%rax)
  8004203bf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bfc:	48 c1 e8 27          	shr    $0x27,%rax
  8004203c00:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c0c:	00 
  8004203c0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203c11:	48 01 d0             	add    %rdx,%rax
  8004203c14:	48 8b 00             	mov    (%rax),%rax
  8004203c17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c25:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203c29:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203c2c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203c2f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203c36:	00 00 00 
  8004203c39:	48 8b 00             	mov    (%rax),%rax
  8004203c3c:	48 39 c2             	cmp    %rax,%rdx
  8004203c3f:	72 32                	jb     8004203c73 <page_insert+0x121>
  8004203c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c45:	48 89 c1             	mov    %rax,%rcx
  8004203c48:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004203c4f:	00 00 00 
  8004203c52:	be 13 03 00 00       	mov    $0x313,%esi
  8004203c57:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203c5e:	00 00 00 
  8004203c61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c66:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203c6d:	00 00 00 
  8004203c70:	41 ff d0             	callq  *%r8
  8004203c73:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c7a:	00 00 00 
  8004203c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c81:	48 01 d0             	add    %rdx,%rax
  8004203c84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203c88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c8c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203c90:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c9c:	00 
  8004203c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ca1:	48 01 d0             	add    %rdx,%rax
  8004203ca4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ca8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203cac:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203cb2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203cb9:	00 
  8004203cba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203cbe:	48 01 ca             	add    %rcx,%rdx
  8004203cc1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203cc4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203cc7:	80 e6 f1             	and    $0xf1,%dh
  8004203cca:	48 63 d2             	movslq %edx,%rdx
  8004203ccd:	48 09 ca             	or     %rcx,%rdx
  8004203cd0:	48 89 10             	mov    %rdx,(%rax)
  8004203cd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cd7:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cdb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ce0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ce7:	00 
  8004203ce8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203cec:	48 01 d0             	add    %rdx,%rax
  8004203cef:	48 8b 00             	mov    (%rax),%rax
  8004203cf2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cf8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203cfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d00:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203d04:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203d07:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203d0a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004203d11:	00 00 00 
  8004203d14:	48 8b 00             	mov    (%rax),%rax
  8004203d17:	48 39 c2             	cmp    %rax,%rdx
  8004203d1a:	72 32                	jb     8004203d4e <page_insert+0x1fc>
  8004203d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d20:	48 89 c1             	mov    %rax,%rcx
  8004203d23:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004203d2a:	00 00 00 
  8004203d2d:	be 15 03 00 00       	mov    $0x315,%esi
  8004203d32:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203d39:	00 00 00 
  8004203d3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d41:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203d48:	00 00 00 
  8004203d4b:	41 ff d0             	callq  *%r8
  8004203d4e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203d55:	00 00 00 
  8004203d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d5c:	48 01 d0             	add    %rdx,%rax
  8004203d5f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203d63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203d67:	48 c1 e8 15          	shr    $0x15,%rax
  8004203d6b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d70:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d77:	00 
  8004203d78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203d7c:	48 01 d0             	add    %rdx,%rax
  8004203d7f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d83:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203d87:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203d8d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203d94:	00 
  8004203d95:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203d99:	48 01 ca             	add    %rcx,%rdx
  8004203d9c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203d9f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203da2:	80 e6 f1             	and    $0xf1,%dh
  8004203da5:	48 63 d2             	movslq %edx,%rdx
  8004203da8:	48 09 ca             	or     %rcx,%rdx
  8004203dab:	48 89 10             	mov    %rdx,(%rax)
  8004203dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203db2:	48 8b 00             	mov    (%rax),%rax
  8004203db5:	83 e0 01             	and    $0x1,%eax
  8004203db8:	48 85 c0             	test   %rax,%rax
  8004203dbb:	74 70                	je     8004203e2d <page_insert+0x2db>
  8004203dbd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203dc1:	48 89 c7             	mov    %rax,%rdi
  8004203dc4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203dcb:	00 00 00 
  8004203dce:	ff d0                	callq  *%rax
  8004203dd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dd4:	48 8b 12             	mov    (%rdx),%rdx
  8004203dd7:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203dde:	48 39 d0             	cmp    %rdx,%rax
  8004203de1:	75 4a                	jne    8004203e2d <page_insert+0x2db>
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c2             	mov    %rax,%rdx
  8004203df3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203df6:	48 98                	cltq   
  8004203df8:	48 09 d0             	or     %rdx,%rax
  8004203dfb:	48 83 c8 01          	or     $0x1,%rax
  8004203dff:	48 89 c2             	mov    %rax,%rdx
  8004203e02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e06:	48 89 10             	mov    %rdx,(%rax)
  8004203e09:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e11:	48 89 d6             	mov    %rdx,%rsi
  8004203e14:	48 89 c7             	mov    %rax,%rdi
  8004203e17:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203e1e:	00 00 00 
  8004203e21:	ff d0                	callq  *%rax
  8004203e23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e28:	e9 93 00 00 00       	jmpq   8004203ec0 <page_insert+0x36e>
  8004203e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e31:	48 8b 00             	mov    (%rax),%rax
  8004203e34:	83 e0 01             	and    $0x1,%eax
  8004203e37:	48 85 c0             	test   %rax,%rax
  8004203e3a:	74 1a                	je     8004203e56 <page_insert+0x304>
  8004203e3c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e44:	48 89 d6             	mov    %rdx,%rsi
  8004203e47:	48 89 c7             	mov    %rax,%rdi
  8004203e4a:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004203e51:	00 00 00 
  8004203e54:	ff d0                	callq  *%rax
  8004203e56:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e5a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203e5e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203e61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e65:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203e69:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e6d:	48 89 c7             	mov    %rax,%rdi
  8004203e70:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203e77:	00 00 00 
  8004203e7a:	ff d0                	callq  *%rax
  8004203e7c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203e7f:	48 63 d2             	movslq %edx,%rdx
  8004203e82:	48 09 d0             	or     %rdx,%rax
  8004203e85:	48 83 c8 01          	or     $0x1,%rax
  8004203e89:	48 89 c2             	mov    %rax,%rdx
  8004203e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e90:	48 89 10             	mov    %rdx,(%rax)
  8004203e93:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e9b:	48 89 d6             	mov    %rdx,%rsi
  8004203e9e:	48 89 c7             	mov    %rax,%rdi
  8004203ea1:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203ea8:	00 00 00 
  8004203eab:	ff d0                	callq  *%rax
  8004203ead:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eb2:	eb 0c                	jmp    8004203ec0 <page_insert+0x36e>
  8004203eb4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203eb9:	eb 05                	jmp    8004203ec0 <page_insert+0x36e>
  8004203ebb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ec0:	c9                   	leaveq 
  8004203ec1:	c3                   	retq   

0000008004203ec2 <page_lookup>:
  8004203ec2:	55                   	push   %rbp
  8004203ec3:	48 89 e5             	mov    %rsp,%rbp
  8004203ec6:	48 83 ec 30          	sub    $0x30,%rsp
  8004203eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203ed6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203edb:	74 69                	je     8004203f46 <page_lookup+0x84>
  8004203edd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ee5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203eea:	48 89 ce             	mov    %rcx,%rsi
  8004203eed:	48 89 c7             	mov    %rax,%rdi
  8004203ef0:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203ef7:	00 00 00 
  8004203efa:	ff d0                	callq  *%rax
  8004203efc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f05:	74 3f                	je     8004203f46 <page_lookup+0x84>
  8004203f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f0b:	48 8b 00             	mov    (%rax),%rax
  8004203f0e:	83 e0 01             	and    $0x1,%eax
  8004203f11:	48 85 c0             	test   %rax,%rax
  8004203f14:	74 30                	je     8004203f46 <page_lookup+0x84>
  8004203f16:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203f1b:	74 0b                	je     8004203f28 <page_lookup+0x66>
  8004203f1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203f25:	48 89 10             	mov    %rdx,(%rax)
  8004203f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f2c:	48 8b 00             	mov    (%rax),%rax
  8004203f2f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203f35:	48 89 c7             	mov    %rax,%rdi
  8004203f38:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  8004203f3f:	00 00 00 
  8004203f42:	ff d0                	callq  *%rax
  8004203f44:	eb 05                	jmp    8004203f4b <page_lookup+0x89>
  8004203f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203f4b:	c9                   	leaveq 
  8004203f4c:	c3                   	retq   

0000008004203f4d <page_remove>:
  8004203f4d:	55                   	push   %rbp
  8004203f4e:	48 89 e5             	mov    %rsp,%rbp
  8004203f51:	48 83 ec 20          	sub    $0x20,%rsp
  8004203f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203f59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203f5d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203f61:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f69:	48 89 ce             	mov    %rcx,%rsi
  8004203f6c:	48 89 c7             	mov    %rax,%rdi
  8004203f6f:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  8004203f76:	00 00 00 
  8004203f79:	ff d0                	callq  *%rax
  8004203f7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f84:	74 38                	je     8004203fbe <page_remove+0x71>
  8004203f86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8e:	48 89 d6             	mov    %rdx,%rsi
  8004203f91:	48 89 c7             	mov    %rax,%rdi
  8004203f94:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203f9b:	00 00 00 
  8004203f9e:	ff d0                	callq  *%rax
  8004203fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203fa4:	48 89 c7             	mov    %rax,%rdi
  8004203fa7:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203fae:	00 00 00 
  8004203fb1:	ff d0                	callq  *%rax
  8004203fb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203fb7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203fbe:	c9                   	leaveq 
  8004203fbf:	c3                   	retq   

0000008004203fc0 <tlb_invalidate>:
  8004203fc0:	55                   	push   %rbp
  8004203fc1:	48 89 e5             	mov    %rsp,%rbp
  8004203fc4:	48 83 ec 20          	sub    $0x20,%rsp
  8004203fc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203fcc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203fd0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203fd5:	75 35                	jne    800420400c <tlb_invalidate+0x4c>
  8004203fd7:	48 b9 87 8f 21 04 80 	movabs $0x8004218f87,%rcx
  8004203fde:	00 00 00 
  8004203fe1:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be 72 03 00 00       	mov    $0x372,%esi
  8004203ff0:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204006:	00 00 00 
  8004204009:	41 ff d0             	callq  *%r8
  800420400c:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004204013:	00 00 00 
  8004204016:	ff d0                	callq  *%rax
  8004204018:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420401f:	00 00 00 
  8004204022:	48 98                	cltq   
  8004204024:	48 c1 e0 03          	shl    $0x3,%rax
  8004204028:	48 89 c1             	mov    %rax,%rcx
  800420402b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420402f:	48 01 c8             	add    %rcx,%rax
  8004204032:	48 01 d0             	add    %rdx,%rax
  8004204035:	48 83 c0 08          	add    $0x8,%rax
  8004204039:	48 8b 00             	mov    (%rax),%rax
  800420403c:	48 85 c0             	test   %rax,%rax
  800420403f:	74 3d                	je     800420407e <tlb_invalidate+0xbe>
  8004204041:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004204048:	00 00 00 
  800420404b:	ff d0                	callq  *%rax
  800420404d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004204054:	00 00 00 
  8004204057:	48 98                	cltq   
  8004204059:	48 c1 e0 03          	shl    $0x3,%rax
  800420405d:	48 89 c1             	mov    %rax,%rcx
  8004204060:	48 c1 e1 04          	shl    $0x4,%rcx
  8004204064:	48 01 c8             	add    %rcx,%rax
  8004204067:	48 01 d0             	add    %rdx,%rax
  800420406a:	48 83 c0 08          	add    $0x8,%rax
  800420406e:	48 8b 00             	mov    (%rax),%rax
  8004204071:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004204078:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420407c:	75 0f                	jne    800420408d <tlb_invalidate+0xcd>
  800420407e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004204086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420408a:	0f 01 38             	invlpg (%rax)
  800420408d:	c9                   	leaveq 
  800420408e:	c3                   	retq   

000000800420408f <mmio_map_region>:
  800420408f:	55                   	push   %rbp
  8004204090:	48 89 e5             	mov    %rsp,%rbp
  8004204093:	48 83 ec 30          	sub    $0x30,%rsp
  8004204097:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420409b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420409f:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040a6:	00 00 00 
  80042040a9:	48 8b 00             	mov    (%rax),%rax
  80042040ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042040b0:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  80042040b7:	00 
  80042040b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040c0:	48 01 d0             	add    %rdx,%rax
  80042040c3:	48 83 e8 01          	sub    $0x1,%rax
  80042040c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042040cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042040cf:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040d4:	48 f7 75 f0          	divq   -0x10(%rbp)
  80042040d8:	48 89 d0             	mov    %rdx,%rax
  80042040db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042040df:	48 29 c2             	sub    %rax,%rdx
  80042040e2:	48 89 d0             	mov    %rdx,%rax
  80042040e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042040e9:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040f0:	00 00 00 
  80042040f3:	48 8b 10             	mov    (%rax),%rdx
  80042040f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042040fa:	48 01 c2             	add    %rax,%rdx
  80042040fd:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204104:	00 00 00 
  8004204107:	48 89 10             	mov    %rdx,(%rax)
  800420410a:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204111:	00 00 00 
  8004204114:	48 8b 10             	mov    (%rax),%rdx
  8004204117:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420411e:	00 00 00 
  8004204121:	48 39 c2             	cmp    %rax,%rdx
  8004204124:	76 2a                	jbe    8004204150 <mmio_map_region+0xc1>
  8004204126:	48 ba 98 8f 21 04 80 	movabs $0x8004218f98,%rdx
  800420412d:	00 00 00 
  8004204130:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004204135:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420413c:	00 00 00 
  800420413f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204144:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420414b:	00 00 00 
  800420414e:	ff d1                	callq  *%rcx
  8004204150:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004204157:	00 00 00 
  800420415a:	48 8b 00             	mov    (%rax),%rax
  800420415d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204161:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204165:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204169:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420416f:	48 89 c7             	mov    %rax,%rdi
  8004204172:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004204179:	00 00 00 
  800420417c:	ff d0                	callq  *%rax
  800420417e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204182:	c9                   	leaveq 
  8004204183:	c3                   	retq   

0000008004204184 <user_mem_check>:
  8004204184:	55                   	push   %rbp
  8004204185:	48 89 e5             	mov    %rsp,%rbp
  8004204188:	48 83 ec 40          	sub    $0x40,%rsp
  800420418c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204190:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004204194:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204198:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800420419b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420419f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042041a3:	48 01 d0             	add    %rdx,%rax
  80042041a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042041aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042041ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042041b5:	00 00 00 
  80042041b8:	48 39 c2             	cmp    %rax,%rdx
  80042041bb:	77 0a                	ja     80042041c7 <user_mem_check+0x43>
  80042041bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042041c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042041c5:	76 1b                	jbe    80042041e2 <user_mem_check+0x5e>
  80042041c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041cb:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042041d2:	00 00 00 
  80042041d5:	48 89 10             	mov    %rdx,(%rax)
  80042041d8:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042041dd:	e9 c0 00 00 00       	jmpq   80042042a2 <user_mem_check+0x11e>
  80042041e2:	e9 a8 00 00 00       	jmpq   800420428f <user_mem_check+0x10b>
  80042041e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042041eb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042041f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042041f6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042041fb:	48 89 ce             	mov    %rcx,%rsi
  80042041fe:	48 89 c7             	mov    %rax,%rdi
  8004204201:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004204208:	00 00 00 
  800420420b:	ff d0                	callq  *%rax
  800420420d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004204211:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004204216:	74 1f                	je     8004204237 <user_mem_check+0xb3>
  8004204218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420421c:	48 8b 10             	mov    (%rax),%rdx
  800420421f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204222:	83 c8 01             	or     $0x1,%eax
  8004204225:	48 98                	cltq   
  8004204227:	48 21 c2             	and    %rax,%rdx
  800420422a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420422d:	83 c8 01             	or     $0x1,%eax
  8004204230:	48 98                	cltq   
  8004204232:	48 39 c2             	cmp    %rax,%rdx
  8004204235:	74 18                	je     800420424f <user_mem_check+0xcb>
  8004204237:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420423b:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  8004204242:	00 00 00 
  8004204245:	48 89 10             	mov    %rdx,(%rax)
  8004204248:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  800420424d:	eb 53                	jmp    80042042a2 <user_mem_check+0x11e>
  800420424f:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204256:	00 
  8004204257:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420425b:	48 83 c0 01          	add    $0x1,%rax
  800420425f:	48 89 c2             	mov    %rax,%rdx
  8004204262:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204266:	48 01 d0             	add    %rdx,%rax
  8004204269:	48 83 e8 01          	sub    $0x1,%rax
  800420426d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204275:	ba 00 00 00 00       	mov    $0x0,%edx
  800420427a:	48 f7 75 e8          	divq   -0x18(%rbp)
  800420427e:	48 89 d0             	mov    %rdx,%rax
  8004204281:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204285:	48 29 c2             	sub    %rax,%rdx
  8004204288:	48 89 d0             	mov    %rdx,%rax
  800420428b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420428f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204293:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204297:	0f 82 4a ff ff ff    	jb     80042041e7 <user_mem_check+0x63>
  800420429d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042a2:	c9                   	leaveq 
  80042042a3:	c3                   	retq   

00000080042042a4 <user_mem_assert>:
  80042042a4:	55                   	push   %rbp
  80042042a5:	48 89 e5             	mov    %rsp,%rbp
  80042042a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042042ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042042b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042042b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042042b8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042042bb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042be:	83 c8 04             	or     $0x4,%eax
  80042042c1:	89 c1                	mov    %eax,%ecx
  80042042c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042042c7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042042cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042cf:	48 89 c7             	mov    %rax,%rdi
  80042042d2:	48 b8 84 41 20 04 80 	movabs $0x8004204184,%rax
  80042042d9:	00 00 00 
  80042042dc:	ff d0                	callq  *%rax
  80042042de:	85 c0                	test   %eax,%eax
  80042042e0:	79 47                	jns    8004204329 <user_mem_assert+0x85>
  80042042e2:	48 b8 40 c2 49 04 80 	movabs $0x800449c240,%rax
  80042042e9:	00 00 00 
  80042042ec:	48 8b 10             	mov    (%rax),%rdx
  80042042ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042f3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042042f9:	89 c6                	mov    %eax,%esi
  80042042fb:	48 bf b8 8f 21 04 80 	movabs $0x8004218fb8,%rdi
  8004204302:	00 00 00 
  8004204305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420430a:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  8004204311:	00 00 00 
  8004204314:	ff d1                	callq  *%rcx
  8004204316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431a:	48 89 c7             	mov    %rax,%rdi
  800420431d:	48 b8 ab 8e 20 04 80 	movabs $0x8004208eab,%rax
  8004204324:	00 00 00 
  8004204327:	ff d0                	callq  *%rax
  8004204329:	c9                   	leaveq 
  800420432a:	c3                   	retq   

000000800420432b <check_page_free_list>:
  800420432b:	55                   	push   %rbp
  800420432c:	48 89 e5             	mov    %rsp,%rbp
  800420432f:	48 83 ec 60          	sub    $0x60,%rsp
  8004204333:	89 f8                	mov    %edi,%eax
  8004204335:	88 45 ac             	mov    %al,-0x54(%rbp)
  8004204338:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420433c:	74 07                	je     8004204345 <check_page_free_list+0x1a>
  800420433e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004204343:	eb 05                	jmp    800420434a <check_page_free_list+0x1f>
  8004204345:	b8 00 02 00 00       	mov    $0x200,%eax
  800420434a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420434d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004204354:	00 
  8004204355:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420435c:	00 
  800420435d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204364:	00 00 00 
  8004204367:	48 8b 00             	mov    (%rax),%rax
  800420436a:	48 85 c0             	test   %rax,%rax
  800420436d:	75 2a                	jne    8004204399 <check_page_free_list+0x6e>
  800420436f:	48 ba f0 8f 21 04 80 	movabs $0x8004218ff0,%rdx
  8004204376:	00 00 00 
  8004204379:	be fd 03 00 00       	mov    $0x3fd,%esi
  800420437e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204385:	00 00 00 
  8004204388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420438d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004204394:	00 00 00 
  8004204397:	ff d1                	callq  *%rcx
  8004204399:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420439d:	0f 84 a9 00 00 00    	je     800420444c <check_page_free_list+0x121>
  80042043a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042043a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042043ab:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  80042043af:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042043b3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042043ba:	00 00 00 
  80042043bd:	48 8b 00             	mov    (%rax),%rax
  80042043c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043c4:	eb 58                	jmp    800420441e <check_page_free_list+0xf3>
  80042043c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042043ca:	48 89 c7             	mov    %rax,%rdi
  80042043cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042043d4:	00 00 00 
  80042043d7:	ff d0                	callq  *%rax
  80042043d9:	48 c1 e8 15          	shr    $0x15,%rax
  80042043dd:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042043e2:	48 89 c2             	mov    %rax,%rdx
  80042043e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042043e8:	48 39 c2             	cmp    %rax,%rdx
  80042043eb:	0f 93 c0             	setae  %al
  80042043ee:	0f b6 c0             	movzbl %al,%eax
  80042043f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042043f4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042043f7:	48 98                	cltq   
  80042043f9:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042043fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204402:	48 89 10             	mov    %rdx,(%rax)
  8004204405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204409:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420440c:	48 98                	cltq   
  800420440e:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  8004204413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204417:	48 8b 00             	mov    (%rax),%rax
  800420441a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420441e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204423:	75 a1                	jne    80042043c6 <check_page_free_list+0x9b>
  8004204425:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204429:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204430:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204434:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004204438:	48 89 10             	mov    %rdx,(%rax)
  800420443b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420443f:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204446:	00 00 00 
  8004204449:	48 89 10             	mov    %rdx,(%rax)
  800420444c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204453:	00 00 00 
  8004204456:	48 8b 00             	mov    (%rax),%rax
  8004204459:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420445d:	eb 5e                	jmp    80042044bd <check_page_free_list+0x192>
  800420445f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204463:	48 89 c7             	mov    %rax,%rdi
  8004204466:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420446d:	00 00 00 
  8004204470:	ff d0                	callq  *%rax
  8004204472:	48 c1 e8 15          	shr    $0x15,%rax
  8004204476:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420447b:	48 89 c2             	mov    %rax,%rdx
  800420447e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204481:	48 39 c2             	cmp    %rax,%rdx
  8004204484:	73 2c                	jae    80042044b2 <check_page_free_list+0x187>
  8004204486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420448a:	48 89 c7             	mov    %rax,%rdi
  800420448d:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204494:	00 00 00 
  8004204497:	ff d0                	callq  *%rax
  8004204499:	ba 80 00 00 00       	mov    $0x80,%edx
  800420449e:	be 97 00 00 00       	mov    $0x97,%esi
  80042044a3:	48 89 c7             	mov    %rax,%rdi
  80042044a6:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042044ad:	00 00 00 
  80042044b0:	ff d0                	callq  *%rax
  80042044b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b6:	48 8b 00             	mov    (%rax),%rax
  80042044b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042044c2:	75 9b                	jne    800420445f <check_page_free_list+0x134>
  80042044c4:	bf 00 00 00 00       	mov    $0x0,%edi
  80042044c9:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  80042044d0:	00 00 00 
  80042044d3:	ff d0                	callq  *%rax
  80042044d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042044d9:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042044e0:	00 00 00 
  80042044e3:	48 8b 00             	mov    (%rax),%rax
  80042044e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044ea:	e9 20 03 00 00       	jmpq   800420480f <check_page_free_list+0x4e4>
  80042044ef:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042044f6:	00 00 00 
  80042044f9:	48 8b 00             	mov    (%rax),%rax
  80042044fc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004204500:	73 35                	jae    8004204537 <check_page_free_list+0x20c>
  8004204502:	48 b9 14 90 21 04 80 	movabs $0x8004219014,%rcx
  8004204509:	00 00 00 
  800420450c:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204513:	00 00 00 
  8004204516:	be 17 04 00 00       	mov    $0x417,%esi
  800420451b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204522:	00 00 00 
  8004204525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420452a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204531:	00 00 00 
  8004204534:	41 ff d0             	callq  *%r8
  8004204537:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420453e:	00 00 00 
  8004204541:	48 8b 10             	mov    (%rax),%rdx
  8004204544:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420454b:	00 00 00 
  800420454e:	48 8b 00             	mov    (%rax),%rax
  8004204551:	48 c1 e0 04          	shl    $0x4,%rax
  8004204555:	48 01 d0             	add    %rdx,%rax
  8004204558:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420455c:	77 35                	ja     8004204593 <check_page_free_list+0x268>
  800420455e:	48 b9 20 90 21 04 80 	movabs $0x8004219020,%rcx
  8004204565:	00 00 00 
  8004204568:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420456f:	00 00 00 
  8004204572:	be 18 04 00 00       	mov    $0x418,%esi
  8004204577:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420457e:	00 00 00 
  8004204581:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204586:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420458d:	00 00 00 
  8004204590:	41 ff d0             	callq  *%r8
  8004204593:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204597:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  800420459e:	00 00 00 
  80042045a1:	48 8b 00             	mov    (%rax),%rax
  80042045a4:	48 29 c2             	sub    %rax,%rdx
  80042045a7:	48 89 d0             	mov    %rdx,%rax
  80042045aa:	83 e0 0f             	and    $0xf,%eax
  80042045ad:	48 85 c0             	test   %rax,%rax
  80042045b0:	74 35                	je     80042045e7 <check_page_free_list+0x2bc>
  80042045b2:	48 b9 38 90 21 04 80 	movabs $0x8004219038,%rcx
  80042045b9:	00 00 00 
  80042045bc:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042045c3:	00 00 00 
  80042045c6:	be 19 04 00 00       	mov    $0x419,%esi
  80042045cb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042045d2:	00 00 00 
  80042045d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045da:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042045e1:	00 00 00 
  80042045e4:	41 ff d0             	callq  *%r8
  80042045e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045eb:	48 89 c7             	mov    %rax,%rdi
  80042045ee:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042045f5:	00 00 00 
  80042045f8:	ff d0                	callq  *%rax
  80042045fa:	48 85 c0             	test   %rax,%rax
  80042045fd:	75 35                	jne    8004204634 <check_page_free_list+0x309>
  80042045ff:	48 b9 6a 90 21 04 80 	movabs $0x800421906a,%rcx
  8004204606:	00 00 00 
  8004204609:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204610:	00 00 00 
  8004204613:	be 1c 04 00 00       	mov    $0x41c,%esi
  8004204618:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420461f:	00 00 00 
  8004204622:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204627:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420462e:	00 00 00 
  8004204631:	41 ff d0             	callq  *%r8
  8004204634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204638:	48 89 c7             	mov    %rax,%rdi
  800420463b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204642:	00 00 00 
  8004204645:	ff d0                	callq  *%rax
  8004204647:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420464d:	75 35                	jne    8004204684 <check_page_free_list+0x359>
  800420464f:	48 b9 7b 90 21 04 80 	movabs $0x800421907b,%rcx
  8004204656:	00 00 00 
  8004204659:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204660:	00 00 00 
  8004204663:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204668:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420466f:	00 00 00 
  8004204672:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204677:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420467e:	00 00 00 
  8004204681:	41 ff d0             	callq  *%r8
  8004204684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204688:	48 89 c7             	mov    %rax,%rdi
  800420468b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204692:	00 00 00 
  8004204695:	ff d0                	callq  *%rax
  8004204697:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  800420469d:	75 35                	jne    80042046d4 <check_page_free_list+0x3a9>
  800420469f:	48 b9 98 90 21 04 80 	movabs $0x8004219098,%rcx
  80042046a6:	00 00 00 
  80042046a9:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042046b0:	00 00 00 
  80042046b3:	be 1e 04 00 00       	mov    $0x41e,%esi
  80042046b8:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042046bf:	00 00 00 
  80042046c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042046c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042046ce:	00 00 00 
  80042046d1:	41 ff d0             	callq  *%r8
  80042046d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046d8:	48 89 c7             	mov    %rax,%rdi
  80042046db:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042046e2:	00 00 00 
  80042046e5:	ff d0                	callq  *%rax
  80042046e7:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042046ed:	75 35                	jne    8004204724 <check_page_free_list+0x3f9>
  80042046ef:	48 b9 bb 90 21 04 80 	movabs $0x80042190bb,%rcx
  80042046f6:	00 00 00 
  80042046f9:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204700:	00 00 00 
  8004204703:	be 1f 04 00 00       	mov    $0x41f,%esi
  8004204708:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420470f:	00 00 00 
  8004204712:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204717:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420471e:	00 00 00 
  8004204721:	41 ff d0             	callq  *%r8
  8004204724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204728:	48 89 c7             	mov    %rax,%rdi
  800420472b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204732:	00 00 00 
  8004204735:	ff d0                	callq  *%rax
  8004204737:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  800420473d:	76 4e                	jbe    800420478d <check_page_free_list+0x462>
  800420473f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204743:	48 89 c7             	mov    %rax,%rdi
  8004204746:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420474d:	00 00 00 
  8004204750:	ff d0                	callq  *%rax
  8004204752:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204756:	73 35                	jae    800420478d <check_page_free_list+0x462>
  8004204758:	48 b9 d8 90 21 04 80 	movabs $0x80042190d8,%rcx
  800420475f:	00 00 00 
  8004204762:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204769:	00 00 00 
  800420476c:	be 20 04 00 00       	mov    $0x420,%esi
  8004204771:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204778:	00 00 00 
  800420477b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204780:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204787:	00 00 00 
  800420478a:	41 ff d0             	callq  *%r8
  800420478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204791:	48 89 c7             	mov    %rax,%rdi
  8004204794:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420479b:	00 00 00 
  800420479e:	ff d0                	callq  *%rax
  80042047a0:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  80042047a6:	75 35                	jne    80042047dd <check_page_free_list+0x4b2>
  80042047a8:	48 b9 1d 91 21 04 80 	movabs $0x800421911d,%rcx
  80042047af:	00 00 00 
  80042047b2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042047b9:	00 00 00 
  80042047bc:	be 23 04 00 00       	mov    $0x423,%esi
  80042047c1:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042047c8:	00 00 00 
  80042047cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042047d7:	00 00 00 
  80042047da:	41 ff d0             	callq  *%r8
  80042047dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047e1:	48 89 c7             	mov    %rax,%rdi
  80042047e4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042047eb:	00 00 00 
  80042047ee:	ff d0                	callq  *%rax
  80042047f0:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042047f6:	77 07                	ja     80042047ff <check_page_free_list+0x4d4>
  80042047f8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042047fd:	eb 05                	jmp    8004204804 <check_page_free_list+0x4d9>
  80042047ff:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204808:	48 8b 00             	mov    (%rax),%rax
  800420480b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420480f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204814:	0f 85 d5 fc ff ff    	jne    80042044ef <check_page_free_list+0x1c4>
  800420481a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420481f:	75 35                	jne    8004204856 <check_page_free_list+0x52b>
  8004204821:	48 b9 3a 91 21 04 80 	movabs $0x800421913a,%rcx
  8004204828:	00 00 00 
  800420482b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204832:	00 00 00 
  8004204835:	be 2c 04 00 00       	mov    $0x42c,%esi
  800420483a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204841:	00 00 00 
  8004204844:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204849:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204850:	00 00 00 
  8004204853:	41 ff d0             	callq  *%r8
  8004204856:	c9                   	leaveq 
  8004204857:	c3                   	retq   

0000008004204858 <check_page_alloc>:
  8004204858:	55                   	push   %rbp
  8004204859:	48 89 e5             	mov    %rsp,%rbp
  800420485c:	48 83 ec 40          	sub    $0x40,%rsp
  8004204860:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204867:	00 00 00 
  800420486a:	48 8b 00             	mov    (%rax),%rax
  800420486d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204871:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204878:	eb 37                	jmp    80042048b1 <check_page_alloc+0x59>
  800420487a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420487e:	48 89 c7             	mov    %rax,%rdi
  8004204881:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204888:	00 00 00 
  800420488b:	ff d0                	callq  *%rax
  800420488d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204892:	be 97 00 00 00       	mov    $0x97,%esi
  8004204897:	48 89 c7             	mov    %rax,%rdi
  800420489a:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042048a1:	00 00 00 
  80042048a4:	ff d0                	callq  *%rax
  80042048a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048aa:	48 8b 00             	mov    (%rax),%rax
  80042048ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042048b6:	75 c2                	jne    800420487a <check_page_alloc+0x22>
  80042048b8:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042048bf:	00 00 00 
  80042048c2:	48 8b 00             	mov    (%rax),%rax
  80042048c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  80042048d0:	e9 ec 01 00 00       	jmpq   8004204ac1 <check_page_alloc+0x269>
  80042048d5:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  80042048dc:	00 00 00 
  80042048df:	48 8b 00             	mov    (%rax),%rax
  80042048e2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042048e6:	73 35                	jae    800420491d <check_page_alloc+0xc5>
  80042048e8:	48 b9 4b 91 21 04 80 	movabs $0x800421914b,%rcx
  80042048ef:	00 00 00 
  80042048f2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042048f9:	00 00 00 
  80042048fc:	be 46 04 00 00       	mov    $0x446,%esi
  8004204901:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204908:	00 00 00 
  800420490b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204910:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204917:	00 00 00 
  800420491a:	41 ff d0             	callq  *%r8
  800420491d:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004204924:	00 00 00 
  8004204927:	48 8b 10             	mov    (%rax),%rdx
  800420492a:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004204931:	00 00 00 
  8004204934:	48 8b 00             	mov    (%rax),%rax
  8004204937:	48 c1 e0 04          	shl    $0x4,%rax
  800420493b:	48 01 d0             	add    %rdx,%rax
  800420493e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204942:	77 35                	ja     8004204979 <check_page_alloc+0x121>
  8004204944:	48 b9 58 91 21 04 80 	movabs $0x8004219158,%rcx
  800420494b:	00 00 00 
  800420494e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204955:	00 00 00 
  8004204958:	be 47 04 00 00       	mov    $0x447,%esi
  800420495d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204964:	00 00 00 
  8004204967:	b8 00 00 00 00       	mov    $0x0,%eax
  800420496c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204973:	00 00 00 
  8004204976:	41 ff d0             	callq  *%r8
  8004204979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420497d:	48 89 c7             	mov    %rax,%rdi
  8004204980:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204987:	00 00 00 
  800420498a:	ff d0                	callq  *%rax
  800420498c:	48 85 c0             	test   %rax,%rax
  800420498f:	75 35                	jne    80042049c6 <check_page_alloc+0x16e>
  8004204991:	48 b9 6d 91 21 04 80 	movabs $0x800421916d,%rcx
  8004204998:	00 00 00 
  800420499b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042049a2:	00 00 00 
  80042049a5:	be 4a 04 00 00       	mov    $0x44a,%esi
  80042049aa:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042049b1:	00 00 00 
  80042049b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042049c0:	00 00 00 
  80042049c3:	41 ff d0             	callq  *%r8
  80042049c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042049ca:	48 89 c7             	mov    %rax,%rdi
  80042049cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042049d4:	00 00 00 
  80042049d7:	ff d0                	callq  *%rax
  80042049d9:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042049df:	75 35                	jne    8004204a16 <check_page_alloc+0x1be>
  80042049e1:	48 b9 7f 91 21 04 80 	movabs $0x800421917f,%rcx
  80042049e8:	00 00 00 
  80042049eb:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042049f2:	00 00 00 
  80042049f5:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042049fa:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204a01:	00 00 00 
  8004204a04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a10:	00 00 00 
  8004204a13:	41 ff d0             	callq  *%r8
  8004204a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a1a:	48 89 c7             	mov    %rax,%rdi
  8004204a1d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a24:	00 00 00 
  8004204a27:	ff d0                	callq  *%rax
  8004204a29:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204a2f:	75 35                	jne    8004204a66 <check_page_alloc+0x20e>
  8004204a31:	48 b9 a0 91 21 04 80 	movabs $0x80042191a0,%rcx
  8004204a38:	00 00 00 
  8004204a3b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204a42:	00 00 00 
  8004204a45:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204a4a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204a51:	00 00 00 
  8004204a54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a59:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a60:	00 00 00 
  8004204a63:	41 ff d0             	callq  *%r8
  8004204a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a6a:	48 89 c7             	mov    %rax,%rdi
  8004204a6d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a74:	00 00 00 
  8004204a77:	ff d0                	callq  *%rax
  8004204a79:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204a7f:	75 35                	jne    8004204ab6 <check_page_alloc+0x25e>
  8004204a81:	48 b9 c4 91 21 04 80 	movabs $0x80042191c4,%rcx
  8004204a88:	00 00 00 
  8004204a8b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204a92:	00 00 00 
  8004204a95:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204a9a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204aa1:	00 00 00 
  8004204aa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204aa9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ab0:	00 00 00 
  8004204ab3:	41 ff d0             	callq  *%r8
  8004204ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204aba:	48 8b 00             	mov    (%rax),%rax
  8004204abd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ac1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ac6:	0f 85 09 fe ff ff    	jne    80042048d5 <check_page_alloc+0x7d>
  8004204acc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204ad3:	00 
  8004204ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ad8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ae4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ae9:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204af0:	00 00 00 
  8004204af3:	ff d0                	callq  *%rax
  8004204af5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204af9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204afe:	75 35                	jne    8004204b35 <check_page_alloc+0x2dd>
  8004204b00:	48 b9 df 91 21 04 80 	movabs $0x80042191df,%rcx
  8004204b07:	00 00 00 
  8004204b0a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204b11:	00 00 00 
  8004204b14:	be 51 04 00 00       	mov    $0x451,%esi
  8004204b19:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204b20:	00 00 00 
  8004204b23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b2f:	00 00 00 
  8004204b32:	41 ff d0             	callq  *%r8
  8004204b35:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b3a:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b41:	00 00 00 
  8004204b44:	ff d0                	callq  *%rax
  8004204b46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204b4a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204b4f:	75 35                	jne    8004204b86 <check_page_alloc+0x32e>
  8004204b51:	48 b9 f5 91 21 04 80 	movabs $0x80042191f5,%rcx
  8004204b58:	00 00 00 
  8004204b5b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204b62:	00 00 00 
  8004204b65:	be 52 04 00 00       	mov    $0x452,%esi
  8004204b6a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204b71:	00 00 00 
  8004204b74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b79:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b80:	00 00 00 
  8004204b83:	41 ff d0             	callq  *%r8
  8004204b86:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b8b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b92:	00 00 00 
  8004204b95:	ff d0                	callq  *%rax
  8004204b97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204b9b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ba0:	75 35                	jne    8004204bd7 <check_page_alloc+0x37f>
  8004204ba2:	48 b9 0b 92 21 04 80 	movabs $0x800421920b,%rcx
  8004204ba9:	00 00 00 
  8004204bac:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204bb3:	00 00 00 
  8004204bb6:	be 53 04 00 00       	mov    $0x453,%esi
  8004204bbb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204bc2:	00 00 00 
  8004204bc5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204bd1:	00 00 00 
  8004204bd4:	41 ff d0             	callq  *%r8
  8004204bd7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204bdc:	75 35                	jne    8004204c13 <check_page_alloc+0x3bb>
  8004204bde:	48 b9 21 92 21 04 80 	movabs $0x8004219221,%rcx
  8004204be5:	00 00 00 
  8004204be8:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204bef:	00 00 00 
  8004204bf2:	be 54 04 00 00       	mov    $0x454,%esi
  8004204bf7:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204bfe:	00 00 00 
  8004204c01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c0d:	00 00 00 
  8004204c10:	41 ff d0             	callq  *%r8
  8004204c13:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204c18:	74 0a                	je     8004204c24 <check_page_alloc+0x3cc>
  8004204c1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c1e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c22:	75 35                	jne    8004204c59 <check_page_alloc+0x401>
  8004204c24:	48 b9 25 92 21 04 80 	movabs $0x8004219225,%rcx
  8004204c2b:	00 00 00 
  8004204c2e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204c35:	00 00 00 
  8004204c38:	be 55 04 00 00       	mov    $0x455,%esi
  8004204c3d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204c44:	00 00 00 
  8004204c47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c4c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c53:	00 00 00 
  8004204c56:	41 ff d0             	callq  *%r8
  8004204c59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204c5e:	74 14                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c64:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204c68:	74 0a                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c6e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c72:	75 35                	jne    8004204ca9 <check_page_alloc+0x451>
  8004204c74:	48 b9 38 92 21 04 80 	movabs $0x8004219238,%rcx
  8004204c7b:	00 00 00 
  8004204c7e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204c85:	00 00 00 
  8004204c88:	be 56 04 00 00       	mov    $0x456,%esi
  8004204c8d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204c94:	00 00 00 
  8004204c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c9c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ca3:	00 00 00 
  8004204ca6:	41 ff d0             	callq  *%r8
  8004204ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cad:	48 89 c7             	mov    %rax,%rdi
  8004204cb0:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204cb7:	00 00 00 
  8004204cba:	ff d0                	callq  *%rax
  8004204cbc:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204cc3:	00 00 00 
  8004204cc6:	48 8b 12             	mov    (%rdx),%rdx
  8004204cc9:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204ccd:	48 39 d0             	cmp    %rdx,%rax
  8004204cd0:	72 35                	jb     8004204d07 <check_page_alloc+0x4af>
  8004204cd2:	48 b9 58 92 21 04 80 	movabs $0x8004219258,%rcx
  8004204cd9:	00 00 00 
  8004204cdc:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204ce3:	00 00 00 
  8004204ce6:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ceb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204cf2:	00 00 00 
  8004204cf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cfa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d01:	00 00 00 
  8004204d04:	41 ff d0             	callq  *%r8
  8004204d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0b:	48 89 c7             	mov    %rax,%rdi
  8004204d0e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d15:	00 00 00 
  8004204d18:	ff d0                	callq  *%rax
  8004204d1a:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d21:	00 00 00 
  8004204d24:	48 8b 12             	mov    (%rdx),%rdx
  8004204d27:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d2b:	48 39 d0             	cmp    %rdx,%rax
  8004204d2e:	72 35                	jb     8004204d65 <check_page_alloc+0x50d>
  8004204d30:	48 b9 75 92 21 04 80 	movabs $0x8004219275,%rcx
  8004204d37:	00 00 00 
  8004204d3a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204d41:	00 00 00 
  8004204d44:	be 58 04 00 00       	mov    $0x458,%esi
  8004204d49:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204d50:	00 00 00 
  8004204d53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d58:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d5f:	00 00 00 
  8004204d62:	41 ff d0             	callq  *%r8
  8004204d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d69:	48 89 c7             	mov    %rax,%rdi
  8004204d6c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d73:	00 00 00 
  8004204d76:	ff d0                	callq  *%rax
  8004204d78:	48 ba f0 b5 69 04 80 	movabs $0x800469b5f0,%rdx
  8004204d7f:	00 00 00 
  8004204d82:	48 8b 12             	mov    (%rdx),%rdx
  8004204d85:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d89:	48 39 d0             	cmp    %rdx,%rax
  8004204d8c:	72 35                	jb     8004204dc3 <check_page_alloc+0x56b>
  8004204d8e:	48 b9 92 92 21 04 80 	movabs $0x8004219292,%rcx
  8004204d95:	00 00 00 
  8004204d98:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204d9f:	00 00 00 
  8004204da2:	be 59 04 00 00       	mov    $0x459,%esi
  8004204da7:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204dae:	00 00 00 
  8004204db1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204db6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204dbd:	00 00 00 
  8004204dc0:	41 ff d0             	callq  *%r8
  8004204dc3:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204dca:	00 00 00 
  8004204dcd:	48 8b 00             	mov    (%rax),%rax
  8004204dd0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204dd4:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004204ddb:	00 00 00 
  8004204dde:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204de5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204dea:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204df1:	00 00 00 
  8004204df4:	ff d0                	callq  *%rax
  8004204df6:	48 85 c0             	test   %rax,%rax
  8004204df9:	74 35                	je     8004204e30 <check_page_alloc+0x5d8>
  8004204dfb:	48 b9 af 92 21 04 80 	movabs $0x80042192af,%rcx
  8004204e02:	00 00 00 
  8004204e05:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204e0c:	00 00 00 
  8004204e0f:	be 60 04 00 00       	mov    $0x460,%esi
  8004204e14:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204e1b:	00 00 00 
  8004204e1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e23:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204e2a:	00 00 00 
  8004204e2d:	41 ff d0             	callq  *%r8
  8004204e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204e34:	48 89 c7             	mov    %rax,%rdi
  8004204e37:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e3e:	00 00 00 
  8004204e41:	ff d0                	callq  *%rax
  8004204e43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e47:	48 89 c7             	mov    %rax,%rdi
  8004204e4a:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e51:	00 00 00 
  8004204e54:	ff d0                	callq  *%rax
  8004204e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e5a:	48 89 c7             	mov    %rax,%rdi
  8004204e5d:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e64:	00 00 00 
  8004204e67:	ff d0                	callq  *%rax
  8004204e69:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204e70:	00 
  8004204e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e81:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204e86:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204e8d:	00 00 00 
  8004204e90:	ff d0                	callq  *%rax
  8004204e92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e96:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e9b:	75 35                	jne    8004204ed2 <check_page_alloc+0x67a>
  8004204e9d:	48 b9 df 91 21 04 80 	movabs $0x80042191df,%rcx
  8004204ea4:	00 00 00 
  8004204ea7:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204eae:	00 00 00 
  8004204eb1:	be 67 04 00 00       	mov    $0x467,%esi
  8004204eb6:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204ebd:	00 00 00 
  8004204ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ec5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ecc:	00 00 00 
  8004204ecf:	41 ff d0             	callq  *%r8
  8004204ed2:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ed7:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204ede:	00 00 00 
  8004204ee1:	ff d0                	callq  *%rax
  8004204ee3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204ee7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204eec:	75 35                	jne    8004204f23 <check_page_alloc+0x6cb>
  8004204eee:	48 b9 f5 91 21 04 80 	movabs $0x80042191f5,%rcx
  8004204ef5:	00 00 00 
  8004204ef8:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204eff:	00 00 00 
  8004204f02:	be 68 04 00 00       	mov    $0x468,%esi
  8004204f07:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204f0e:	00 00 00 
  8004204f11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f16:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f1d:	00 00 00 
  8004204f20:	41 ff d0             	callq  *%r8
  8004204f23:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f28:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204f2f:	00 00 00 
  8004204f32:	ff d0                	callq  *%rax
  8004204f34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204f38:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204f3d:	75 35                	jne    8004204f74 <check_page_alloc+0x71c>
  8004204f3f:	48 b9 0b 92 21 04 80 	movabs $0x800421920b,%rcx
  8004204f46:	00 00 00 
  8004204f49:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204f50:	00 00 00 
  8004204f53:	be 69 04 00 00       	mov    $0x469,%esi
  8004204f58:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204f5f:	00 00 00 
  8004204f62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f67:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f6e:	00 00 00 
  8004204f71:	41 ff d0             	callq  *%r8
  8004204f74:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204f79:	75 35                	jne    8004204fb0 <check_page_alloc+0x758>
  8004204f7b:	48 b9 21 92 21 04 80 	movabs $0x8004219221,%rcx
  8004204f82:	00 00 00 
  8004204f85:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204f8c:	00 00 00 
  8004204f8f:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204f94:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204f9b:	00 00 00 
  8004204f9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fa3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204faa:	00 00 00 
  8004204fad:	41 ff d0             	callq  *%r8
  8004204fb0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204fb5:	74 0a                	je     8004204fc1 <check_page_alloc+0x769>
  8004204fb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204fbb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204fbf:	75 35                	jne    8004204ff6 <check_page_alloc+0x79e>
  8004204fc1:	48 b9 25 92 21 04 80 	movabs $0x8004219225,%rcx
  8004204fc8:	00 00 00 
  8004204fcb:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004204fd2:	00 00 00 
  8004204fd5:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204fda:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004204fe1:	00 00 00 
  8004204fe4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fe9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ff0:	00 00 00 
  8004204ff3:	41 ff d0             	callq  *%r8
  8004204ff6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ffb:	74 14                	je     8004205011 <check_page_alloc+0x7b9>
  8004204ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205001:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004205005:	74 0a                	je     8004205011 <check_page_alloc+0x7b9>
  8004205007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420500b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420500f:	75 35                	jne    8004205046 <check_page_alloc+0x7ee>
  8004205011:	48 b9 38 92 21 04 80 	movabs $0x8004219238,%rcx
  8004205018:	00 00 00 
  800420501b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205022:	00 00 00 
  8004205025:	be 6c 04 00 00       	mov    $0x46c,%esi
  800420502a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205031:	00 00 00 
  8004205034:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205039:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205040:	00 00 00 
  8004205043:	41 ff d0             	callq  *%r8
  8004205046:	bf 00 00 00 00       	mov    $0x0,%edi
  800420504b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205052:	00 00 00 
  8004205055:	ff d0                	callq  *%rax
  8004205057:	48 85 c0             	test   %rax,%rax
  800420505a:	74 35                	je     8004205091 <check_page_alloc+0x839>
  800420505c:	48 b9 af 92 21 04 80 	movabs $0x80042192af,%rcx
  8004205063:	00 00 00 
  8004205066:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420506d:	00 00 00 
  8004205070:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004205075:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420507c:	00 00 00 
  800420507f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205084:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420508b:	00 00 00 
  800420508e:	41 ff d0             	callq  *%r8
  8004205091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205095:	48 89 c7             	mov    %rax,%rdi
  8004205098:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420509f:	00 00 00 
  80042050a2:	ff d0                	callq  *%rax
  80042050a4:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042050ae:	48 89 c7             	mov    %rax,%rdi
  80042050b1:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042050b8:	00 00 00 
  80042050bb:	ff d0                	callq  *%rax
  80042050bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050c1:	48 89 c7             	mov    %rax,%rdi
  80042050c4:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042050cb:	00 00 00 
  80042050ce:	ff d0                	callq  *%rax
  80042050d0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042050d5:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042050dc:	00 00 00 
  80042050df:	ff d0                	callq  *%rax
  80042050e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042050e5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042050ea:	75 35                	jne    8004205121 <check_page_alloc+0x8c9>
  80042050ec:	48 b9 be 92 21 04 80 	movabs $0x80042192be,%rcx
  80042050f3:	00 00 00 
  80042050f6:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042050fd:	00 00 00 
  8004205100:	be 72 04 00 00       	mov    $0x472,%esi
  8004205105:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420510c:	00 00 00 
  800420510f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205114:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420511b:	00 00 00 
  800420511e:	41 ff d0             	callq  *%r8
  8004205121:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205126:	74 0a                	je     8004205132 <check_page_alloc+0x8da>
  8004205128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420512c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205130:	74 35                	je     8004205167 <check_page_alloc+0x90f>
  8004205132:	48 b9 dc 92 21 04 80 	movabs $0x80042192dc,%rcx
  8004205139:	00 00 00 
  800420513c:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205143:	00 00 00 
  8004205146:	be 73 04 00 00       	mov    $0x473,%esi
  800420514b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205152:	00 00 00 
  8004205155:	b8 00 00 00 00       	mov    $0x0,%eax
  800420515a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205161:	00 00 00 
  8004205164:	41 ff d0             	callq  *%r8
  8004205167:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420516b:	48 89 c7             	mov    %rax,%rdi
  800420516e:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004205175:	00 00 00 
  8004205178:	ff d0                	callq  *%rax
  800420517a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420517e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205185:	eb 4d                	jmp    80042051d4 <check_page_alloc+0x97c>
  8004205187:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420518a:	48 63 d0             	movslq %eax,%rdx
  800420518d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205191:	48 01 d0             	add    %rdx,%rax
  8004205194:	0f b6 00             	movzbl (%rax),%eax
  8004205197:	84 c0                	test   %al,%al
  8004205199:	74 35                	je     80042051d0 <check_page_alloc+0x978>
  800420519b:	48 b9 ec 92 21 04 80 	movabs $0x80042192ec,%rcx
  80042051a2:	00 00 00 
  80042051a5:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042051ac:	00 00 00 
  80042051af:	be 76 04 00 00       	mov    $0x476,%esi
  80042051b4:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042051bb:	00 00 00 
  80042051be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042051ca:	00 00 00 
  80042051cd:	41 ff d0             	callq  *%r8
  80042051d0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042051d4:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042051db:	7e aa                	jle    8004205187 <check_page_alloc+0x92f>
  80042051dd:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  80042051e4:	00 00 00 
  80042051e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042051eb:	48 89 10             	mov    %rdx,(%rax)
  80042051ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042051f2:	48 89 c7             	mov    %rax,%rdi
  80042051f5:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042051fc:	00 00 00 
  80042051ff:	ff d0                	callq  *%rax
  8004205201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205205:	48 89 c7             	mov    %rax,%rdi
  8004205208:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420520f:	00 00 00 
  8004205212:	ff d0                	callq  *%rax
  8004205214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205218:	48 89 c7             	mov    %rax,%rdi
  800420521b:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004205222:	00 00 00 
  8004205225:	ff d0                	callq  *%rax
  8004205227:	48 bf f8 92 21 04 80 	movabs $0x80042192f8,%rdi
  800420522e:	00 00 00 
  8004205231:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205236:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420523d:	00 00 00 
  8004205240:	ff d2                	callq  *%rdx
  8004205242:	c9                   	leaveq 
  8004205243:	c3                   	retq   

0000008004205244 <check_boot_pml4e>:
  8004205244:	55                   	push   %rbp
  8004205245:	48 89 e5             	mov    %rsp,%rbp
  8004205248:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420524f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205256:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420525d:	00 00 00 
  8004205260:	48 8b 00             	mov    (%rax),%rax
  8004205263:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205267:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  800420526e:	00 
  800420526f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205276:	00 00 00 
  8004205279:	48 8b 00             	mov    (%rax),%rax
  800420527c:	48 c1 e0 04          	shl    $0x4,%rax
  8004205280:	48 89 c2             	mov    %rax,%rdx
  8004205283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205287:	48 01 d0             	add    %rdx,%rax
  800420528a:	48 83 e8 01          	sub    $0x1,%rax
  800420528e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205296:	ba 00 00 00 00       	mov    $0x0,%edx
  800420529b:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420529f:	48 89 d0             	mov    %rdx,%rax
  80042052a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042052a6:	48 29 c2             	sub    %rax,%rdx
  80042052a9:	48 89 d0             	mov    %rdx,%rax
  80042052ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042052b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052b7:	00 
  80042052b8:	e9 d4 00 00 00       	jmpq   8004205391 <check_boot_pml4e+0x14d>
  80042052bd:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  80042052c4:	00 00 00 
  80042052c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052cb:	48 01 c2             	add    %rax,%rdx
  80042052ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052d2:	48 89 d6             	mov    %rdx,%rsi
  80042052d5:	48 89 c7             	mov    %rax,%rdi
  80042052d8:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042052df:	00 00 00 
  80042052e2:	ff d0                	callq  *%rax
  80042052e4:	48 ba f8 b5 69 04 80 	movabs $0x800469b5f8,%rdx
  80042052eb:	00 00 00 
  80042052ee:	48 8b 12             	mov    (%rdx),%rdx
  80042052f1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042052f5:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052fc:	00 00 00 
  80042052ff:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  8004205303:	77 32                	ja     8004205337 <check_boot_pml4e+0xf3>
  8004205305:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205309:	48 89 c1             	mov    %rax,%rcx
  800420530c:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004205313:	00 00 00 
  8004205316:	be 96 04 00 00       	mov    $0x496,%esi
  800420531b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205322:	00 00 00 
  8004205325:	b8 00 00 00 00       	mov    $0x0,%eax
  800420532a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205331:	00 00 00 
  8004205334:	41 ff d0             	callq  *%r8
  8004205337:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420533e:	ff ff ff 
  8004205341:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205345:	48 01 d1             	add    %rdx,%rcx
  8004205348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420534c:	48 01 ca             	add    %rcx,%rdx
  800420534f:	48 39 d0             	cmp    %rdx,%rax
  8004205352:	74 35                	je     8004205389 <check_boot_pml4e+0x145>
  8004205354:	48 b9 18 93 21 04 80 	movabs $0x8004219318,%rcx
  800420535b:	00 00 00 
  800420535e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205365:	00 00 00 
  8004205368:	be 96 04 00 00       	mov    $0x496,%esi
  800420536d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205374:	00 00 00 
  8004205377:	b8 00 00 00 00       	mov    $0x0,%eax
  800420537c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205383:	00 00 00 
  8004205386:	41 ff d0             	callq  *%r8
  8004205389:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205390:	00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205399:	0f 82 1e ff ff ff    	jb     80042052bd <check_boot_pml4e+0x79>
  800420539f:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  80042053a6:	00 
  80042053a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053ab:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042053b1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042053b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042053b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042053be:	48 f7 75 c8          	divq   -0x38(%rbp)
  80042053c2:	48 89 d0             	mov    %rdx,%rax
  80042053c5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042053c9:	48 29 c2             	sub    %rax,%rdx
  80042053cc:	48 89 d0             	mov    %rdx,%rax
  80042053cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042053d3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042053da:	00 
  80042053db:	e9 d4 00 00 00       	jmpq   80042054b4 <check_boot_pml4e+0x270>
  80042053e0:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042053e7:	00 00 00 
  80042053ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053ee:	48 01 c2             	add    %rax,%rdx
  80042053f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053f5:	48 89 d6             	mov    %rdx,%rsi
  80042053f8:	48 89 c7             	mov    %rax,%rdi
  80042053fb:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004205402:	00 00 00 
  8004205405:	ff d0                	callq  *%rax
  8004205407:	48 ba 58 c2 49 04 80 	movabs $0x800449c258,%rdx
  800420540e:	00 00 00 
  8004205411:	48 8b 12             	mov    (%rdx),%rdx
  8004205414:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004205418:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420541f:	00 00 00 
  8004205422:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  8004205426:	77 32                	ja     800420545a <check_boot_pml4e+0x216>
  8004205428:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420542c:	48 89 c1             	mov    %rax,%rcx
  800420542f:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  8004205436:	00 00 00 
  8004205439:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420543e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205445:	00 00 00 
  8004205448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420544d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205454:	00 00 00 
  8004205457:	41 ff d0             	callq  *%r8
  800420545a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205461:	ff ff ff 
  8004205464:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205468:	48 01 d1             	add    %rdx,%rcx
  800420546b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420546f:	48 01 ca             	add    %rcx,%rdx
  8004205472:	48 39 d0             	cmp    %rdx,%rax
  8004205475:	74 35                	je     80042054ac <check_boot_pml4e+0x268>
  8004205477:	48 b9 50 93 21 04 80 	movabs $0x8004219350,%rcx
  800420547e:	00 00 00 
  8004205481:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205488:	00 00 00 
  800420548b:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205490:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205497:	00 00 00 
  800420549a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420549f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042054a6:	00 00 00 
  80042054a9:	41 ff d0             	callq  *%r8
  80042054ac:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042054b3:	00 
  80042054b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054b8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042054bc:	0f 82 1e ff ff ff    	jb     80042053e0 <check_boot_pml4e+0x19c>
  80042054c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042054c9:	00 
  80042054ca:	eb 6a                	jmp    8004205536 <check_boot_pml4e+0x2f2>
  80042054cc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054d3:	00 00 00 
  80042054d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054da:	48 01 c2             	add    %rax,%rdx
  80042054dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042054e1:	48 89 d6             	mov    %rdx,%rsi
  80042054e4:	48 89 c7             	mov    %rax,%rdi
  80042054e7:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042054ee:	00 00 00 
  80042054f1:	ff d0                	callq  *%rax
  80042054f3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042054f7:	74 35                	je     800420552e <check_boot_pml4e+0x2ea>
  80042054f9:	48 b9 88 93 21 04 80 	movabs $0x8004219388,%rcx
  8004205500:	00 00 00 
  8004205503:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420550a:	00 00 00 
  800420550d:	be a2 04 00 00       	mov    $0x4a2,%esi
  8004205512:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205519:	00 00 00 
  800420551c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205521:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205528:	00 00 00 
  800420552b:	41 ff d0             	callq  *%r8
  800420552e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205535:	00 
  8004205536:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420553d:	00 00 00 
  8004205540:	48 8b 00             	mov    (%rax),%rax
  8004205543:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205547:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420554b:	0f 87 7b ff ff ff    	ja     80042054cc <check_boot_pml4e+0x288>
  8004205551:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205558:	00 
  8004205559:	e9 a1 01 00 00       	jmpq   80042056ff <check_boot_pml4e+0x4bb>
  800420555e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205562:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205566:	48 89 d0             	mov    %rdx,%rax
  8004205569:	48 01 c0             	add    %rax,%rax
  800420556c:	48 01 d0             	add    %rdx,%rax
  800420556f:	48 c1 e0 0f          	shl    $0xf,%rax
  8004205573:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420557a:	00 00 00 
  800420557d:	48 29 c2             	sub    %rax,%rdx
  8004205580:	48 89 d0             	mov    %rdx,%rax
  8004205583:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205587:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420558e:	00 
  800420558f:	e9 e0 00 00 00       	jmpq   8004205674 <check_boot_pml4e+0x430>
  8004205594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205598:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420559c:	48 01 d0             	add    %rdx,%rax
  800420559f:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  80042055a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042055aa:	48 89 d6             	mov    %rdx,%rsi
  80042055ad:	48 89 c7             	mov    %rax,%rdi
  80042055b0:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042055b7:	00 00 00 
  80042055ba:	ff d0                	callq  *%rax
  80042055bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042055c0:	48 89 d1             	mov    %rdx,%rcx
  80042055c3:	48 c1 e1 10          	shl    $0x10,%rcx
  80042055c7:	48 ba 00 e0 69 04 80 	movabs $0x800469e000,%rdx
  80042055ce:	00 00 00 
  80042055d1:	48 01 ca             	add    %rcx,%rdx
  80042055d4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042055d8:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042055df:	00 00 00 
  80042055e2:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042055e6:	77 32                	ja     800420561a <check_boot_pml4e+0x3d6>
  80042055e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042055ec:	48 89 c1             	mov    %rax,%rcx
  80042055ef:	48 ba 38 8f 21 04 80 	movabs $0x8004218f38,%rdx
  80042055f6:	00 00 00 
  80042055f9:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042055fe:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205605:	00 00 00 
  8004205608:	b8 00 00 00 00       	mov    $0x0,%eax
  800420560d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205614:	00 00 00 
  8004205617:	41 ff d0             	callq  *%r8
  800420561a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205621:	ff ff ff 
  8004205624:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004205628:	48 01 d1             	add    %rdx,%rcx
  800420562b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420562f:	48 01 ca             	add    %rcx,%rdx
  8004205632:	48 39 d0             	cmp    %rdx,%rax
  8004205635:	74 35                	je     800420566c <check_boot_pml4e+0x428>
  8004205637:	48 b9 b0 93 21 04 80 	movabs $0x80042193b0,%rcx
  800420563e:	00 00 00 
  8004205641:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205648:	00 00 00 
  800420564b:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205650:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205657:	00 00 00 
  800420565a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420565f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205666:	00 00 00 
  8004205669:	41 ff d0             	callq  *%r8
  800420566c:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205673:	00 
  8004205674:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  800420567b:	00 
  800420567c:	0f 86 12 ff ff ff    	jbe    8004205594 <check_boot_pml4e+0x350>
  8004205682:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205689:	00 
  800420568a:	eb 64                	jmp    80042056f0 <check_boot_pml4e+0x4ac>
  800420568c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205690:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205694:	48 01 c2             	add    %rax,%rdx
  8004205697:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420569b:	48 89 d6             	mov    %rdx,%rsi
  800420569e:	48 89 c7             	mov    %rax,%rdi
  80042056a1:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042056a8:	00 00 00 
  80042056ab:	ff d0                	callq  *%rax
  80042056ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042056b1:	74 35                	je     80042056e8 <check_boot_pml4e+0x4a4>
  80042056b3:	48 b9 f8 93 21 04 80 	movabs $0x80042193f8,%rcx
  80042056ba:	00 00 00 
  80042056bd:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042056c4:	00 00 00 
  80042056c7:	be ad 04 00 00       	mov    $0x4ad,%esi
  80042056cc:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042056d3:	00 00 00 
  80042056d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056db:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042056e2:	00 00 00 
  80042056e5:	41 ff d0             	callq  *%r8
  80042056e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042056ef:	00 
  80042056f0:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042056f7:	00 
  80042056f8:	76 92                	jbe    800420568c <check_boot_pml4e+0x448>
  80042056fa:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042056ff:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  8004205704:	0f 86 54 fe ff ff    	jbe    800420555e <check_boot_pml4e+0x31a>
  800420570a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004205711:	00 00 00 
  8004205714:	48 8b 00             	mov    (%rax),%rax
  8004205717:	48 83 c0 08          	add    $0x8,%rax
  800420571b:	48 8b 00             	mov    (%rax),%rax
  800420571e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205724:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004205728:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420572c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205730:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004205733:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004205736:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420573d:	00 00 00 
  8004205740:	48 8b 00             	mov    (%rax),%rax
  8004205743:	48 39 c2             	cmp    %rax,%rdx
  8004205746:	72 32                	jb     800420577a <check_boot_pml4e+0x536>
  8004205748:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420574c:	48 89 c1             	mov    %rax,%rcx
  800420574f:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004205756:	00 00 00 
  8004205759:	be b7 04 00 00       	mov    $0x4b7,%esi
  800420575e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205765:	00 00 00 
  8004205768:	b8 00 00 00 00       	mov    $0x0,%eax
  800420576d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205774:	00 00 00 
  8004205777:	41 ff d0             	callq  *%r8
  800420577a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205781:	00 00 00 
  8004205784:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205788:	48 01 d0             	add    %rdx,%rax
  800420578b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420578f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205793:	48 8b 00             	mov    (%rax),%rax
  8004205796:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420579c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042057a0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057a4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042057a8:	89 45 84             	mov    %eax,-0x7c(%rbp)
  80042057ab:	8b 55 84             	mov    -0x7c(%rbp),%edx
  80042057ae:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042057b5:	00 00 00 
  80042057b8:	48 8b 00             	mov    (%rax),%rax
  80042057bb:	48 39 c2             	cmp    %rax,%rdx
  80042057be:	72 32                	jb     80042057f2 <check_boot_pml4e+0x5ae>
  80042057c0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057c4:	48 89 c1             	mov    %rax,%rcx
  80042057c7:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042057ce:	00 00 00 
  80042057d1:	be b8 04 00 00       	mov    $0x4b8,%esi
  80042057d6:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042057dd:	00 00 00 
  80042057e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057e5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042057ec:	00 00 00 
  80042057ef:	41 ff d0             	callq  *%r8
  80042057f2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042057f9:	00 00 00 
  80042057fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004205800:	48 01 d0             	add    %rdx,%rax
  8004205803:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800420580a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205811:	00 
  8004205812:	e9 50 01 00 00       	jmpq   8004205967 <check_boot_pml4e+0x723>
  8004205817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420581b:	48 83 f8 04          	cmp    $0x4,%rax
  800420581f:	72 67                	jb     8004205888 <check_boot_pml4e+0x644>
  8004205821:	48 83 f8 05          	cmp    $0x5,%rax
  8004205825:	76 06                	jbe    800420582d <check_boot_pml4e+0x5e9>
  8004205827:	48 83 f8 1f          	cmp    $0x1f,%rax
  800420582b:	75 5b                	jne    8004205888 <check_boot_pml4e+0x644>
  800420582d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205831:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205838:	00 
  8004205839:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205840:	48 01 d0             	add    %rdx,%rax
  8004205843:	48 8b 00             	mov    (%rax),%rax
  8004205846:	83 e0 01             	and    $0x1,%eax
  8004205849:	48 85 c0             	test   %rax,%rax
  800420584c:	75 35                	jne    8004205883 <check_boot_pml4e+0x63f>
  800420584e:	48 b9 1b 94 21 04 80 	movabs $0x800421941b,%rcx
  8004205855:	00 00 00 
  8004205858:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420585f:	00 00 00 
  8004205862:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205867:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420586e:	00 00 00 
  8004205871:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205876:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420587d:	00 00 00 
  8004205880:	41 ff d0             	callq  *%r8
  8004205883:	e9 da 00 00 00       	jmpq   8004205962 <check_boot_pml4e+0x71e>
  8004205888:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  800420588d:	0f 86 ce 00 00 00    	jbe    8004205961 <check_boot_pml4e+0x71d>
  8004205893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205897:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420589e:	00 
  800420589f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058a6:	48 01 d0             	add    %rdx,%rax
  80042058a9:	48 8b 00             	mov    (%rax),%rax
  80042058ac:	83 e0 01             	and    $0x1,%eax
  80042058af:	48 85 c0             	test   %rax,%rax
  80042058b2:	74 5a                	je     800420590e <check_boot_pml4e+0x6ca>
  80042058b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058bf:	00 
  80042058c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058c7:	48 01 d0             	add    %rdx,%rax
  80042058ca:	48 8b 00             	mov    (%rax),%rax
  80042058cd:	83 e0 02             	and    $0x2,%eax
  80042058d0:	48 85 c0             	test   %rax,%rax
  80042058d3:	0f 85 88 00 00 00    	jne    8004205961 <check_boot_pml4e+0x71d>
  80042058d9:	48 b9 2c 94 21 04 80 	movabs $0x800421942c,%rcx
  80042058e0:	00 00 00 
  80042058e3:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042058ea:	00 00 00 
  80042058ed:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042058f2:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042058f9:	00 00 00 
  80042058fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205901:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205908:	00 00 00 
  800420590b:	41 ff d0             	callq  *%r8
  800420590e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205921:	48 01 d0             	add    %rdx,%rax
  8004205924:	48 8b 00             	mov    (%rax),%rax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	74 35                	je     8004205961 <check_boot_pml4e+0x71d>
  800420592c:	48 b9 3d 94 21 04 80 	movabs $0x800421943d,%rcx
  8004205933:	00 00 00 
  8004205936:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420593d:	00 00 00 
  8004205940:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205945:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420594c:	00 00 00 
  800420594f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205954:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420595b:	00 00 00 
  800420595e:	41 ff d0             	callq  *%r8
  8004205961:	90                   	nop
  8004205962:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205967:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  800420596e:	00 
  800420596f:	0f 86 a2 fe ff ff    	jbe    8004205817 <check_boot_pml4e+0x5d3>
  8004205975:	48 bf 50 94 21 04 80 	movabs $0x8004219450,%rdi
  800420597c:	00 00 00 
  800420597f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205984:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420598b:	00 00 00 
  800420598e:	ff d2                	callq  *%rdx
  8004205990:	c9                   	leaveq 
  8004205991:	c3                   	retq   

0000008004205992 <check_va2pa>:
  8004205992:	55                   	push   %rbp
  8004205993:	48 89 e5             	mov    %rsp,%rbp
  8004205996:	48 83 ec 60          	sub    $0x60,%rsp
  800420599a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420599e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042059a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059a6:	48 c1 e8 27          	shr    $0x27,%rax
  80042059aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059af:	48 c1 e0 03          	shl    $0x3,%rax
  80042059b3:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  80042059b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059bb:	48 8b 00             	mov    (%rax),%rax
  80042059be:	83 e0 01             	and    $0x1,%eax
  80042059c1:	48 85 c0             	test   %rax,%rax
  80042059c4:	75 0c                	jne    80042059d2 <check_va2pa+0x40>
  80042059c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059cd:	e9 38 02 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  80042059d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059d6:	48 8b 00             	mov    (%rax),%rax
  80042059d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042059df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042059e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042059e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042059eb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042059ee:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042059f1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042059f8:	00 00 00 
  80042059fb:	48 8b 00             	mov    (%rax),%rax
  80042059fe:	48 39 c2             	cmp    %rax,%rdx
  8004205a01:	72 32                	jb     8004205a35 <check_va2pa+0xa3>
  8004205a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a07:	48 89 c1             	mov    %rax,%rcx
  8004205a0a:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004205a11:	00 00 00 
  8004205a14:	be e1 04 00 00       	mov    $0x4e1,%esi
  8004205a19:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205a20:	00 00 00 
  8004205a23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205a2f:	00 00 00 
  8004205a32:	41 ff d0             	callq  *%r8
  8004205a35:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a3c:	00 00 00 
  8004205a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a43:	48 01 d0             	add    %rdx,%rax
  8004205a46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205a4a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a4e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a52:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a5e:	00 
  8004205a5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a63:	48 01 d0             	add    %rdx,%rax
  8004205a66:	48 8b 00             	mov    (%rax),%rax
  8004205a69:	83 e0 01             	and    $0x1,%eax
  8004205a6c:	48 85 c0             	test   %rax,%rax
  8004205a6f:	75 0c                	jne    8004205a7d <check_va2pa+0xeb>
  8004205a71:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a78:	e9 8d 01 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205a7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a81:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a85:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a8a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a91:	00 
  8004205a92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a96:	48 01 d0             	add    %rdx,%rax
  8004205a99:	48 8b 00             	mov    (%rax),%rax
  8004205a9c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205aa2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aaa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aae:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205ab1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004205ab4:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205abb:	00 00 00 
  8004205abe:	48 8b 00             	mov    (%rax),%rax
  8004205ac1:	48 39 c2             	cmp    %rax,%rdx
  8004205ac4:	72 32                	jb     8004205af8 <check_va2pa+0x166>
  8004205ac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aca:	48 89 c1             	mov    %rax,%rcx
  8004205acd:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004205ad4:	00 00 00 
  8004205ad7:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205adc:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205ae3:	00 00 00 
  8004205ae6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205aeb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205af2:	00 00 00 
  8004205af5:	41 ff d0             	callq  *%r8
  8004205af8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205aff:	00 00 00 
  8004205b02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205b06:	48 01 d0             	add    %rdx,%rax
  8004205b09:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205b0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205b11:	48 c1 e8 15          	shr    $0x15,%rax
  8004205b15:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205b1a:	48 c1 e0 03          	shl    $0x3,%rax
  8004205b1e:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  8004205b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b26:	48 8b 00             	mov    (%rax),%rax
  8004205b29:	83 e0 01             	and    $0x1,%eax
  8004205b2c:	48 85 c0             	test   %rax,%rax
  8004205b2f:	75 0c                	jne    8004205b3d <check_va2pa+0x1ab>
  8004205b31:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205b38:	e9 cd 00 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b41:	48 8b 00             	mov    (%rax),%rax
  8004205b44:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205b4a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b52:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205b56:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205b59:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205b5c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004205b63:	00 00 00 
  8004205b66:	48 8b 00             	mov    (%rax),%rax
  8004205b69:	48 39 c2             	cmp    %rax,%rdx
  8004205b6c:	72 32                	jb     8004205ba0 <check_va2pa+0x20e>
  8004205b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b72:	48 89 c1             	mov    %rax,%rcx
  8004205b75:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004205b7c:	00 00 00 
  8004205b7f:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205b84:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205b8b:	00 00 00 
  8004205b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b93:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205b9a:	00 00 00 
  8004205b9d:	41 ff d0             	callq  *%r8
  8004205ba0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205ba7:	00 00 00 
  8004205baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205bae:	48 01 d0             	add    %rdx,%rax
  8004205bb1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205bb5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205bb9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bbd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bc2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bc9:	00 
  8004205bca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bce:	48 01 d0             	add    %rdx,%rax
  8004205bd1:	48 8b 00             	mov    (%rax),%rax
  8004205bd4:	83 e0 01             	and    $0x1,%eax
  8004205bd7:	48 85 c0             	test   %rax,%rax
  8004205bda:	75 09                	jne    8004205be5 <check_va2pa+0x253>
  8004205bdc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205be3:	eb 25                	jmp    8004205c0a <check_va2pa+0x278>
  8004205be5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205be9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bed:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bf2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bf9:	00 
  8004205bfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bfe:	48 01 d0             	add    %rdx,%rax
  8004205c01:	48 8b 00             	mov    (%rax),%rax
  8004205c04:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205c0a:	c9                   	leaveq 
  8004205c0b:	c3                   	retq   

0000008004205c0c <page_check>:
  8004205c0c:	55                   	push   %rbp
  8004205c0d:	48 89 e5             	mov    %rsp,%rbp
  8004205c10:	53                   	push   %rbx
  8004205c11:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205c18:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205c1f:	00 
  8004205c20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205c24:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205c2c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205c34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205c3c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205c40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205c44:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4d:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205c54:	00 00 00 
  8004205c57:	ff d0                	callq  *%rax
  8004205c59:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c5d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205c62:	75 35                	jne    8004205c99 <page_check+0x8d>
  8004205c64:	48 b9 6f 94 21 04 80 	movabs $0x800421946f,%rcx
  8004205c6b:	00 00 00 
  8004205c6e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205c75:	00 00 00 
  8004205c78:	be 02 05 00 00       	mov    $0x502,%esi
  8004205c7d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205c84:	00 00 00 
  8004205c87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205c93:	00 00 00 
  8004205c96:	41 ff d0             	callq  *%r8
  8004205c99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9e:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205ca5:	00 00 00 
  8004205ca8:	ff d0                	callq  *%rax
  8004205caa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205cae:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205cb3:	75 35                	jne    8004205cea <page_check+0xde>
  8004205cb5:	48 b9 83 94 21 04 80 	movabs $0x8004219483,%rcx
  8004205cbc:	00 00 00 
  8004205cbf:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205cc6:	00 00 00 
  8004205cc9:	be 03 05 00 00       	mov    $0x503,%esi
  8004205cce:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205cd5:	00 00 00 
  8004205cd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205ce4:	00 00 00 
  8004205ce7:	41 ff d0             	callq  *%r8
  8004205cea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205cef:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205cf6:	00 00 00 
  8004205cf9:	ff d0                	callq  *%rax
  8004205cfb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205cff:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d04:	75 35                	jne    8004205d3b <page_check+0x12f>
  8004205d06:	48 b9 97 94 21 04 80 	movabs $0x8004219497,%rcx
  8004205d0d:	00 00 00 
  8004205d10:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205d17:	00 00 00 
  8004205d1a:	be 04 05 00 00       	mov    $0x504,%esi
  8004205d1f:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205d26:	00 00 00 
  8004205d29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d2e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d35:	00 00 00 
  8004205d38:	41 ff d0             	callq  *%r8
  8004205d3b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d40:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d47:	00 00 00 
  8004205d4a:	ff d0                	callq  *%rax
  8004205d4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205d55:	75 35                	jne    8004205d8c <page_check+0x180>
  8004205d57:	48 b9 ab 94 21 04 80 	movabs $0x80042194ab,%rcx
  8004205d5e:	00 00 00 
  8004205d61:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205d68:	00 00 00 
  8004205d6b:	be 05 05 00 00       	mov    $0x505,%esi
  8004205d70:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205d77:	00 00 00 
  8004205d7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d7f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d86:	00 00 00 
  8004205d89:	41 ff d0             	callq  *%r8
  8004205d8c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d91:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d98:	00 00 00 
  8004205d9b:	ff d0                	callq  *%rax
  8004205d9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205da1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205da6:	75 35                	jne    8004205ddd <page_check+0x1d1>
  8004205da8:	48 b9 bf 94 21 04 80 	movabs $0x80042194bf,%rcx
  8004205daf:	00 00 00 
  8004205db2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205db9:	00 00 00 
  8004205dbc:	be 06 05 00 00       	mov    $0x506,%esi
  8004205dc1:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205dc8:	00 00 00 
  8004205dcb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dd0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205dd7:	00 00 00 
  8004205dda:	41 ff d0             	callq  *%r8
  8004205ddd:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205de2:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205de9:	00 00 00 
  8004205dec:	ff d0                	callq  *%rax
  8004205dee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205df2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205df7:	75 35                	jne    8004205e2e <page_check+0x222>
  8004205df9:	48 b9 d3 94 21 04 80 	movabs $0x80042194d3,%rcx
  8004205e00:	00 00 00 
  8004205e03:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205e0a:	00 00 00 
  8004205e0d:	be 07 05 00 00       	mov    $0x507,%esi
  8004205e12:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205e19:	00 00 00 
  8004205e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e21:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e28:	00 00 00 
  8004205e2b:	41 ff d0             	callq  *%r8
  8004205e2e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205e33:	75 35                	jne    8004205e6a <page_check+0x25e>
  8004205e35:	48 b9 21 92 21 04 80 	movabs $0x8004219221,%rcx
  8004205e3c:	00 00 00 
  8004205e3f:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205e46:	00 00 00 
  8004205e49:	be 09 05 00 00       	mov    $0x509,%esi
  8004205e4e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205e55:	00 00 00 
  8004205e58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e64:	00 00 00 
  8004205e67:	41 ff d0             	callq  *%r8
  8004205e6a:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205e6f:	74 0a                	je     8004205e7b <page_check+0x26f>
  8004205e71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205e75:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e79:	75 35                	jne    8004205eb0 <page_check+0x2a4>
  8004205e7b:	48 b9 25 92 21 04 80 	movabs $0x8004219225,%rcx
  8004205e82:	00 00 00 
  8004205e85:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205e8c:	00 00 00 
  8004205e8f:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205e94:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205e9b:	00 00 00 
  8004205e9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ea3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205eaa:	00 00 00 
  8004205ead:	41 ff d0             	callq  *%r8
  8004205eb0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205eb5:	74 14                	je     8004205ecb <page_check+0x2bf>
  8004205eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ebb:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ebf:	74 0a                	je     8004205ecb <page_check+0x2bf>
  8004205ec1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ec5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ec9:	75 35                	jne    8004205f00 <page_check+0x2f4>
  8004205ecb:	48 b9 38 92 21 04 80 	movabs $0x8004219238,%rcx
  8004205ed2:	00 00 00 
  8004205ed5:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205edc:	00 00 00 
  8004205edf:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205ee4:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205eeb:	00 00 00 
  8004205eee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ef3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205efa:	00 00 00 
  8004205efd:	41 ff d0             	callq  *%r8
  8004205f00:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205f05:	74 1e                	je     8004205f25 <page_check+0x319>
  8004205f07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f0b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f0f:	74 14                	je     8004205f25 <page_check+0x319>
  8004205f11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f15:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f19:	74 0a                	je     8004205f25 <page_check+0x319>
  8004205f1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f1f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f23:	75 35                	jne    8004205f5a <page_check+0x34e>
  8004205f25:	48 b9 e8 94 21 04 80 	movabs $0x80042194e8,%rcx
  8004205f2c:	00 00 00 
  8004205f2f:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205f36:	00 00 00 
  8004205f39:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205f3e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205f45:	00 00 00 
  8004205f48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f4d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205f54:	00 00 00 
  8004205f57:	41 ff d0             	callq  *%r8
  8004205f5a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205f5f:	74 28                	je     8004205f89 <page_check+0x37d>
  8004205f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f65:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205f69:	74 1e                	je     8004205f89 <page_check+0x37d>
  8004205f6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f6f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f73:	74 14                	je     8004205f89 <page_check+0x37d>
  8004205f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f79:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f7d:	74 0a                	je     8004205f89 <page_check+0x37d>
  8004205f7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f83:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f87:	75 35                	jne    8004205fbe <page_check+0x3b2>
  8004205f89:	48 b9 18 95 21 04 80 	movabs $0x8004219518,%rcx
  8004205f90:	00 00 00 
  8004205f93:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004205f9a:	00 00 00 
  8004205f9d:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205fa2:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004205fa9:	00 00 00 
  8004205fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205fb8:	00 00 00 
  8004205fbb:	41 ff d0             	callq  *%r8
  8004205fbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205fc3:	74 32                	je     8004205ff7 <page_check+0x3eb>
  8004205fc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fc9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205fcd:	74 28                	je     8004205ff7 <page_check+0x3eb>
  8004205fcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fd3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205fd7:	74 1e                	je     8004205ff7 <page_check+0x3eb>
  8004205fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fdd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205fe1:	74 14                	je     8004205ff7 <page_check+0x3eb>
  8004205fe3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fe7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205feb:	74 0a                	je     8004205ff7 <page_check+0x3eb>
  8004205fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ff1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ff5:	75 35                	jne    800420602c <page_check+0x420>
  8004205ff7:	48 b9 58 95 21 04 80 	movabs $0x8004219558,%rcx
  8004205ffe:	00 00 00 
  8004206001:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206008:	00 00 00 
  800420600b:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004206010:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206017:	00 00 00 
  800420601a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420601f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206026:	00 00 00 
  8004206029:	41 ff d0             	callq  *%r8
  800420602c:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420603d:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004206044:	00 00 00 
  8004206047:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420604e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206053:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420605a:	00 00 00 
  800420605d:	ff d0                	callq  *%rax
  800420605f:	48 85 c0             	test   %rax,%rax
  8004206062:	74 35                	je     8004206099 <page_check+0x48d>
  8004206064:	48 b9 af 92 21 04 80 	movabs $0x80042192af,%rcx
  800420606b:	00 00 00 
  800420606e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206075:	00 00 00 
  8004206078:	be 15 05 00 00       	mov    $0x515,%esi
  800420607d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206084:	00 00 00 
  8004206087:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206093:	00 00 00 
  8004206096:	41 ff d0             	callq  *%r8
  8004206099:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042060a0:	00 00 00 
  80042060a3:	48 8b 00             	mov    (%rax),%rax
  80042060a6:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  80042060ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 85 c0             	test   %rax,%rax
  80042060c4:	74 35                	je     80042060fb <page_check+0x4ef>
  80042060c6:	48 b9 a8 95 21 04 80 	movabs $0x80042195a8,%rcx
  80042060cd:	00 00 00 
  80042060d0:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042060d7:	00 00 00 
  80042060da:	be 18 05 00 00       	mov    $0x518,%esi
  80042060df:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042060e6:	00 00 00 
  80042060e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060ee:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042060f5:	00 00 00 
  80042060f8:	41 ff d0             	callq  *%r8
  80042060fb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206102:	00 00 00 
  8004206105:	48 8b 00             	mov    (%rax),%rax
  8004206108:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420610c:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206111:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206116:	48 89 c7             	mov    %rax,%rdi
  8004206119:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206120:	00 00 00 
  8004206123:	ff d0                	callq  *%rax
  8004206125:	85 c0                	test   %eax,%eax
  8004206127:	78 35                	js     800420615e <page_check+0x552>
  8004206129:	48 b9 e0 95 21 04 80 	movabs $0x80042195e0,%rcx
  8004206130:	00 00 00 
  8004206133:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420613a:	00 00 00 
  800420613d:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004206142:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206149:	00 00 00 
  800420614c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206151:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206158:	00 00 00 
  800420615b:	41 ff d0             	callq  *%r8
  800420615e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206162:	48 89 c7             	mov    %rax,%rdi
  8004206165:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420616c:	00 00 00 
  800420616f:	ff d0                	callq  *%rax
  8004206171:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206178:	00 00 00 
  800420617b:	48 8b 00             	mov    (%rax),%rax
  800420617e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206182:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206187:	ba 00 00 00 00       	mov    $0x0,%edx
  800420618c:	48 89 c7             	mov    %rax,%rdi
  800420618f:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206196:	00 00 00 
  8004206199:	ff d0                	callq  *%rax
  800420619b:	85 c0                	test   %eax,%eax
  800420619d:	78 35                	js     80042061d4 <page_check+0x5c8>
  800420619f:	48 b9 e0 95 21 04 80 	movabs $0x80042195e0,%rcx
  80042061a6:	00 00 00 
  80042061a9:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042061b0:	00 00 00 
  80042061b3:	be 1f 05 00 00       	mov    $0x51f,%esi
  80042061b8:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042061bf:	00 00 00 
  80042061c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042061ce:	00 00 00 
  80042061d1:	41 ff d0             	callq  *%r8
  80042061d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042061d8:	48 89 c7             	mov    %rax,%rdi
  80042061db:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061e2:	00 00 00 
  80042061e5:	ff d0                	callq  *%rax
  80042061e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061eb:	48 89 c7             	mov    %rax,%rdi
  80042061ee:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061f5:	00 00 00 
  80042061f8:	ff d0                	callq  *%rax
  80042061fa:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206201:	00 00 00 
  8004206204:	48 8b 00             	mov    (%rax),%rax
  8004206207:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420620b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206210:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206215:	48 89 c7             	mov    %rax,%rdi
  8004206218:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420621f:	00 00 00 
  8004206222:	ff d0                	callq  *%rax
  8004206224:	85 c0                	test   %eax,%eax
  8004206226:	74 35                	je     800420625d <page_check+0x651>
  8004206228:	48 b9 10 96 21 04 80 	movabs $0x8004219610,%rcx
  800420622f:	00 00 00 
  8004206232:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206239:	00 00 00 
  800420623c:	be 25 05 00 00       	mov    $0x525,%esi
  8004206241:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206248:	00 00 00 
  800420624b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206250:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206257:	00 00 00 
  800420625a:	41 ff d0             	callq  *%r8
  800420625d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206264:	00 00 00 
  8004206267:	48 8b 00             	mov    (%rax),%rax
  800420626a:	48 8b 00             	mov    (%rax),%rax
  800420626d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206273:	48 89 c3             	mov    %rax,%rbx
  8004206276:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420627a:	48 89 c7             	mov    %rax,%rdi
  800420627d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206284:	00 00 00 
  8004206287:	ff d0                	callq  *%rax
  8004206289:	48 39 c3             	cmp    %rax,%rbx
  800420628c:	0f 84 97 00 00 00    	je     8004206329 <page_check+0x71d>
  8004206292:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206299:	00 00 00 
  800420629c:	48 8b 00             	mov    (%rax),%rax
  800420629f:	48 8b 00             	mov    (%rax),%rax
  80042062a2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062a8:	48 89 c3             	mov    %rax,%rbx
  80042062ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062af:	48 89 c7             	mov    %rax,%rdi
  80042062b2:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062b9:	00 00 00 
  80042062bc:	ff d0                	callq  *%rax
  80042062be:	48 39 c3             	cmp    %rax,%rbx
  80042062c1:	74 66                	je     8004206329 <page_check+0x71d>
  80042062c3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042062ca:	00 00 00 
  80042062cd:	48 8b 00             	mov    (%rax),%rax
  80042062d0:	48 8b 00             	mov    (%rax),%rax
  80042062d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062d9:	48 89 c3             	mov    %rax,%rbx
  80042062dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042062e0:	48 89 c7             	mov    %rax,%rdi
  80042062e3:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062ea:	00 00 00 
  80042062ed:	ff d0                	callq  *%rax
  80042062ef:	48 39 c3             	cmp    %rax,%rbx
  80042062f2:	74 35                	je     8004206329 <page_check+0x71d>
  80042062f4:	48 b9 40 96 21 04 80 	movabs $0x8004219640,%rcx
  80042062fb:	00 00 00 
  80042062fe:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206305:	00 00 00 
  8004206308:	be 26 05 00 00       	mov    $0x526,%esi
  800420630d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206314:	00 00 00 
  8004206317:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206323:	00 00 00 
  8004206326:	41 ff d0             	callq  *%r8
  8004206329:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206330:	00 00 00 
  8004206333:	48 8b 00             	mov    (%rax),%rax
  8004206336:	be 00 00 00 00       	mov    $0x0,%esi
  800420633b:	48 89 c7             	mov    %rax,%rdi
  800420633e:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206345:	00 00 00 
  8004206348:	ff d0                	callq  *%rax
  800420634a:	48 89 c3             	mov    %rax,%rbx
  800420634d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206351:	48 89 c7             	mov    %rax,%rdi
  8004206354:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420635b:	00 00 00 
  800420635e:	ff d0                	callq  *%rax
  8004206360:	48 39 c3             	cmp    %rax,%rbx
  8004206363:	74 35                	je     800420639a <page_check+0x78e>
  8004206365:	48 b9 c8 96 21 04 80 	movabs $0x80042196c8,%rcx
  800420636c:	00 00 00 
  800420636f:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206376:	00 00 00 
  8004206379:	be 27 05 00 00       	mov    $0x527,%esi
  800420637e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206385:	00 00 00 
  8004206388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420638d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206394:	00 00 00 
  8004206397:	41 ff d0             	callq  *%r8
  800420639a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420639e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063a2:	66 83 f8 01          	cmp    $0x1,%ax
  80042063a6:	74 35                	je     80042063dd <page_check+0x7d1>
  80042063a8:	48 b9 f5 96 21 04 80 	movabs $0x80042196f5,%rcx
  80042063af:	00 00 00 
  80042063b2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042063b9:	00 00 00 
  80042063bc:	be 28 05 00 00       	mov    $0x528,%esi
  80042063c1:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042063c8:	00 00 00 
  80042063cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042063d7:	00 00 00 
  80042063da:	41 ff d0             	callq  *%r8
  80042063dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042063e1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063e5:	66 83 f8 01          	cmp    $0x1,%ax
  80042063e9:	74 35                	je     8004206420 <page_check+0x814>
  80042063eb:	48 b9 06 97 21 04 80 	movabs $0x8004219706,%rcx
  80042063f2:	00 00 00 
  80042063f5:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042063fc:	00 00 00 
  80042063ff:	be 29 05 00 00       	mov    $0x529,%esi
  8004206404:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420640b:	00 00 00 
  800420640e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206413:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420641a:	00 00 00 
  800420641d:	41 ff d0             	callq  *%r8
  8004206420:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206424:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206428:	66 83 f8 01          	cmp    $0x1,%ax
  800420642c:	74 35                	je     8004206463 <page_check+0x857>
  800420642e:	48 b9 17 97 21 04 80 	movabs $0x8004219717,%rcx
  8004206435:	00 00 00 
  8004206438:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420643f:	00 00 00 
  8004206442:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206447:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420644e:	00 00 00 
  8004206451:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206456:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420645d:	00 00 00 
  8004206460:	41 ff d0             	callq  *%r8
  8004206463:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420646a:	00 00 00 
  800420646d:	48 8b 00             	mov    (%rax),%rax
  8004206470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206474:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206479:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420647e:	48 89 c7             	mov    %rax,%rdi
  8004206481:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206488:	00 00 00 
  800420648b:	ff d0                	callq  *%rax
  800420648d:	85 c0                	test   %eax,%eax
  800420648f:	74 35                	je     80042064c6 <page_check+0x8ba>
  8004206491:	48 b9 28 97 21 04 80 	movabs $0x8004219728,%rcx
  8004206498:	00 00 00 
  800420649b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042064a2:	00 00 00 
  80042064a5:	be 2c 05 00 00       	mov    $0x52c,%esi
  80042064aa:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042064b1:	00 00 00 
  80042064b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042064c0:	00 00 00 
  80042064c3:	41 ff d0             	callq  *%r8
  80042064c6:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042064cd:	00 00 00 
  80042064d0:	48 8b 00             	mov    (%rax),%rax
  80042064d3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064d8:	48 89 c7             	mov    %rax,%rdi
  80042064db:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042064e2:	00 00 00 
  80042064e5:	ff d0                	callq  *%rax
  80042064e7:	48 89 c3             	mov    %rax,%rbx
  80042064ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042064ee:	48 89 c7             	mov    %rax,%rdi
  80042064f1:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042064f8:	00 00 00 
  80042064fb:	ff d0                	callq  *%rax
  80042064fd:	48 39 c3             	cmp    %rax,%rbx
  8004206500:	74 35                	je     8004206537 <page_check+0x92b>
  8004206502:	48 b9 60 97 21 04 80 	movabs $0x8004219760,%rcx
  8004206509:	00 00 00 
  800420650c:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206513:	00 00 00 
  8004206516:	be 2d 05 00 00       	mov    $0x52d,%esi
  800420651b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206522:	00 00 00 
  8004206525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420652a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206531:	00 00 00 
  8004206534:	41 ff d0             	callq  *%r8
  8004206537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420653b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420653f:	66 83 f8 02          	cmp    $0x2,%ax
  8004206543:	74 35                	je     800420657a <page_check+0x96e>
  8004206545:	48 b9 90 97 21 04 80 	movabs $0x8004219790,%rcx
  800420654c:	00 00 00 
  800420654f:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206556:	00 00 00 
  8004206559:	be 2e 05 00 00       	mov    $0x52e,%esi
  800420655e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206565:	00 00 00 
  8004206568:	b8 00 00 00 00       	mov    $0x0,%eax
  800420656d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206574:	00 00 00 
  8004206577:	41 ff d0             	callq  *%r8
  800420657a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420657f:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004206586:	00 00 00 
  8004206589:	ff d0                	callq  *%rax
  800420658b:	48 85 c0             	test   %rax,%rax
  800420658e:	74 35                	je     80042065c5 <page_check+0x9b9>
  8004206590:	48 b9 af 92 21 04 80 	movabs $0x80042192af,%rcx
  8004206597:	00 00 00 
  800420659a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042065a1:	00 00 00 
  80042065a4:	be 31 05 00 00       	mov    $0x531,%esi
  80042065a9:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042065b0:	00 00 00 
  80042065b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042065bf:	00 00 00 
  80042065c2:	41 ff d0             	callq  *%r8
  80042065c5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042065cc:	00 00 00 
  80042065cf:	48 8b 00             	mov    (%rax),%rax
  80042065d2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042065d6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042065db:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042065e0:	48 89 c7             	mov    %rax,%rdi
  80042065e3:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042065ea:	00 00 00 
  80042065ed:	ff d0                	callq  *%rax
  80042065ef:	85 c0                	test   %eax,%eax
  80042065f1:	74 35                	je     8004206628 <page_check+0xa1c>
  80042065f3:	48 b9 28 97 21 04 80 	movabs $0x8004219728,%rcx
  80042065fa:	00 00 00 
  80042065fd:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206604:	00 00 00 
  8004206607:	be 34 05 00 00       	mov    $0x534,%esi
  800420660c:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206613:	00 00 00 
  8004206616:	b8 00 00 00 00       	mov    $0x0,%eax
  800420661b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206622:	00 00 00 
  8004206625:	41 ff d0             	callq  *%r8
  8004206628:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420662f:	00 00 00 
  8004206632:	48 8b 00             	mov    (%rax),%rax
  8004206635:	be 00 10 00 00       	mov    $0x1000,%esi
  800420663a:	48 89 c7             	mov    %rax,%rdi
  800420663d:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206644:	00 00 00 
  8004206647:	ff d0                	callq  *%rax
  8004206649:	48 89 c3             	mov    %rax,%rbx
  800420664c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206650:	48 89 c7             	mov    %rax,%rdi
  8004206653:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420665a:	00 00 00 
  800420665d:	ff d0                	callq  *%rax
  800420665f:	48 39 c3             	cmp    %rax,%rbx
  8004206662:	74 35                	je     8004206699 <page_check+0xa8d>
  8004206664:	48 b9 60 97 21 04 80 	movabs $0x8004219760,%rcx
  800420666b:	00 00 00 
  800420666e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206675:	00 00 00 
  8004206678:	be 35 05 00 00       	mov    $0x535,%esi
  800420667d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206684:	00 00 00 
  8004206687:	b8 00 00 00 00       	mov    $0x0,%eax
  800420668c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206693:	00 00 00 
  8004206696:	41 ff d0             	callq  *%r8
  8004206699:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420669d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042066a1:	66 83 f8 02          	cmp    $0x2,%ax
  80042066a5:	74 35                	je     80042066dc <page_check+0xad0>
  80042066a7:	48 b9 90 97 21 04 80 	movabs $0x8004219790,%rcx
  80042066ae:	00 00 00 
  80042066b1:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042066b8:	00 00 00 
  80042066bb:	be 36 05 00 00       	mov    $0x536,%esi
  80042066c0:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042066c7:	00 00 00 
  80042066ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066cf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042066d6:	00 00 00 
  80042066d9:	41 ff d0             	callq  *%r8
  80042066dc:	bf 00 00 00 00       	mov    $0x0,%edi
  80042066e1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042066e8:	00 00 00 
  80042066eb:	ff d0                	callq  *%rax
  80042066ed:	48 85 c0             	test   %rax,%rax
  80042066f0:	74 35                	je     8004206727 <page_check+0xb1b>
  80042066f2:	48 b9 af 92 21 04 80 	movabs $0x80042192af,%rcx
  80042066f9:	00 00 00 
  80042066fc:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206703:	00 00 00 
  8004206706:	be 3a 05 00 00       	mov    $0x53a,%esi
  800420670b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206712:	00 00 00 
  8004206715:	b8 00 00 00 00       	mov    $0x0,%eax
  800420671a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206721:	00 00 00 
  8004206724:	41 ff d0             	callq  *%r8
  8004206727:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420672e:	00 00 00 
  8004206731:	48 8b 00             	mov    (%rax),%rax
  8004206734:	48 8b 00             	mov    (%rax),%rax
  8004206737:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420673d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206741:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206745:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206749:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800420674c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420674f:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206756:	00 00 00 
  8004206759:	48 8b 00             	mov    (%rax),%rax
  800420675c:	48 39 c2             	cmp    %rax,%rdx
  800420675f:	72 32                	jb     8004206793 <page_check+0xb87>
  8004206761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206765:	48 89 c1             	mov    %rax,%rcx
  8004206768:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420676f:	00 00 00 
  8004206772:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206777:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420677e:	00 00 00 
  8004206781:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206786:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420678d:	00 00 00 
  8004206790:	41 ff d0             	callq  *%r8
  8004206793:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420679a:	00 00 00 
  800420679d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042067a1:	48 01 d0             	add    %rdx,%rax
  80042067a4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042067a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042067ac:	48 8b 00             	mov    (%rax),%rax
  80042067af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042067b5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042067b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042067c1:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042067c4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042067c7:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042067ce:	00 00 00 
  80042067d1:	48 8b 00             	mov    (%rax),%rax
  80042067d4:	48 39 c2             	cmp    %rax,%rdx
  80042067d7:	72 32                	jb     800420680b <page_check+0xbff>
  80042067d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067dd:	48 89 c1             	mov    %rax,%rcx
  80042067e0:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042067e7:	00 00 00 
  80042067ea:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042067ef:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042067f6:	00 00 00 
  80042067f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067fe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206805:	00 00 00 
  8004206808:	41 ff d0             	callq  *%r8
  800420680b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206812:	00 00 00 
  8004206815:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206819:	48 01 d0             	add    %rdx,%rax
  800420681c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004206820:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206824:	48 8b 00             	mov    (%rax),%rax
  8004206827:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420682d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004206834:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420683b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420683f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206845:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  800420684b:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004206852:	00 00 00 
  8004206855:	48 8b 00             	mov    (%rax),%rax
  8004206858:	48 39 c2             	cmp    %rax,%rdx
  800420685b:	72 35                	jb     8004206892 <page_check+0xc86>
  800420685d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206864:	48 89 c1             	mov    %rax,%rcx
  8004206867:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420686e:	00 00 00 
  8004206871:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206876:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420687d:	00 00 00 
  8004206880:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206885:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420688c:	00 00 00 
  800420688f:	41 ff d0             	callq  *%r8
  8004206892:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206899:	00 00 00 
  800420689c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042068a3:	48 01 d0             	add    %rdx,%rax
  80042068a6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042068ad:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042068b4:	00 00 00 
  80042068b7:	48 8b 00             	mov    (%rax),%rax
  80042068ba:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068bf:	be 00 10 00 00       	mov    $0x1000,%esi
  80042068c4:	48 89 c7             	mov    %rax,%rdi
  80042068c7:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042068ce:	00 00 00 
  80042068d1:	ff d0                	callq  *%rax
  80042068d3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042068da:	48 83 c2 08          	add    $0x8,%rdx
  80042068de:	48 39 d0             	cmp    %rdx,%rax
  80042068e1:	74 35                	je     8004206918 <page_check+0xd0c>
  80042068e3:	48 b9 a8 97 21 04 80 	movabs $0x80042197a8,%rcx
  80042068ea:	00 00 00 
  80042068ed:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042068f4:	00 00 00 
  80042068f7:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042068fc:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206903:	00 00 00 
  8004206906:	b8 00 00 00 00       	mov    $0x0,%eax
  800420690b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206912:	00 00 00 
  8004206915:	41 ff d0             	callq  *%r8
  8004206918:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420691f:	00 00 00 
  8004206922:	48 8b 00             	mov    (%rax),%rax
  8004206925:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206929:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420692e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206933:	48 89 c7             	mov    %rax,%rdi
  8004206936:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420693d:	00 00 00 
  8004206940:	ff d0                	callq  *%rax
  8004206942:	85 c0                	test   %eax,%eax
  8004206944:	74 35                	je     800420697b <page_check+0xd6f>
  8004206946:	48 b9 e8 97 21 04 80 	movabs $0x80042197e8,%rcx
  800420694d:	00 00 00 
  8004206950:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206957:	00 00 00 
  800420695a:	be 42 05 00 00       	mov    $0x542,%esi
  800420695f:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206966:	00 00 00 
  8004206969:	b8 00 00 00 00       	mov    $0x0,%eax
  800420696e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206975:	00 00 00 
  8004206978:	41 ff d0             	callq  *%r8
  800420697b:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206982:	00 00 00 
  8004206985:	48 8b 00             	mov    (%rax),%rax
  8004206988:	be 00 10 00 00       	mov    $0x1000,%esi
  800420698d:	48 89 c7             	mov    %rax,%rdi
  8004206990:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206997:	00 00 00 
  800420699a:	ff d0                	callq  *%rax
  800420699c:	48 89 c3             	mov    %rax,%rbx
  800420699f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069a3:	48 89 c7             	mov    %rax,%rdi
  80042069a6:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042069ad:	00 00 00 
  80042069b0:	ff d0                	callq  *%rax
  80042069b2:	48 39 c3             	cmp    %rax,%rbx
  80042069b5:	74 35                	je     80042069ec <page_check+0xde0>
  80042069b7:	48 b9 60 97 21 04 80 	movabs $0x8004219760,%rcx
  80042069be:	00 00 00 
  80042069c1:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042069c8:	00 00 00 
  80042069cb:	be 43 05 00 00       	mov    $0x543,%esi
  80042069d0:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042069d7:	00 00 00 
  80042069da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069df:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042069e6:	00 00 00 
  80042069e9:	41 ff d0             	callq  *%r8
  80042069ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069f0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042069f4:	66 83 f8 02          	cmp    $0x2,%ax
  80042069f8:	74 35                	je     8004206a2f <page_check+0xe23>
  80042069fa:	48 b9 90 97 21 04 80 	movabs $0x8004219790,%rcx
  8004206a01:	00 00 00 
  8004206a04:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206a0b:	00 00 00 
  8004206a0e:	be 44 05 00 00       	mov    $0x544,%esi
  8004206a13:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206a1a:	00 00 00 
  8004206a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a22:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a29:	00 00 00 
  8004206a2c:	41 ff d0             	callq  *%r8
  8004206a2f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a36:	00 00 00 
  8004206a39:	48 8b 00             	mov    (%rax),%rax
  8004206a3c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a41:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a46:	48 89 c7             	mov    %rax,%rdi
  8004206a49:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206a50:	00 00 00 
  8004206a53:	ff d0                	callq  *%rax
  8004206a55:	48 8b 00             	mov    (%rax),%rax
  8004206a58:	83 e0 04             	and    $0x4,%eax
  8004206a5b:	48 85 c0             	test   %rax,%rax
  8004206a5e:	75 35                	jne    8004206a95 <page_check+0xe89>
  8004206a60:	48 b9 28 98 21 04 80 	movabs $0x8004219828,%rcx
  8004206a67:	00 00 00 
  8004206a6a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206a71:	00 00 00 
  8004206a74:	be 45 05 00 00       	mov    $0x545,%esi
  8004206a79:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206a80:	00 00 00 
  8004206a83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a88:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a8f:	00 00 00 
  8004206a92:	41 ff d0             	callq  *%r8
  8004206a95:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206a9c:	00 00 00 
  8004206a9f:	48 8b 00             	mov    (%rax),%rax
  8004206aa2:	48 8b 00             	mov    (%rax),%rax
  8004206aa5:	83 e0 04             	and    $0x4,%eax
  8004206aa8:	48 85 c0             	test   %rax,%rax
  8004206aab:	75 35                	jne    8004206ae2 <page_check+0xed6>
  8004206aad:	48 b9 5b 98 21 04 80 	movabs $0x800421985b,%rcx
  8004206ab4:	00 00 00 
  8004206ab7:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206abe:	00 00 00 
  8004206ac1:	be 46 05 00 00       	mov    $0x546,%esi
  8004206ac6:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206acd:	00 00 00 
  8004206ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ad5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206adc:	00 00 00 
  8004206adf:	41 ff d0             	callq  *%r8
  8004206ae2:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ae9:	00 00 00 
  8004206aec:	48 8b 00             	mov    (%rax),%rax
  8004206aef:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004206af3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206af8:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	85 c0                	test   %eax,%eax
  8004206b0e:	78 35                	js     8004206b45 <page_check+0xf39>
  8004206b10:	48 b9 78 98 21 04 80 	movabs $0x8004219878,%rcx
  8004206b17:	00 00 00 
  8004206b1a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206b21:	00 00 00 
  8004206b24:	be 4a 05 00 00       	mov    $0x54a,%esi
  8004206b29:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206b30:	00 00 00 
  8004206b33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b38:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206b3f:	00 00 00 
  8004206b42:	41 ff d0             	callq  *%r8
  8004206b45:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206b4c:	00 00 00 
  8004206b4f:	48 8b 00             	mov    (%rax),%rax
  8004206b52:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206b56:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b5b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206b60:	48 89 c7             	mov    %rax,%rdi
  8004206b63:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b6a:	00 00 00 
  8004206b6d:	ff d0                	callq  *%rax
  8004206b6f:	85 c0                	test   %eax,%eax
  8004206b71:	74 35                	je     8004206ba8 <page_check+0xf9c>
  8004206b73:	48 b9 b0 98 21 04 80 	movabs $0x80042198b0,%rcx
  8004206b7a:	00 00 00 
  8004206b7d:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206b84:	00 00 00 
  8004206b87:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206b8c:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206b93:	00 00 00 
  8004206b96:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ba2:	00 00 00 
  8004206ba5:	41 ff d0             	callq  *%r8
  8004206ba8:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206baf:	00 00 00 
  8004206bb2:	48 8b 00             	mov    (%rax),%rax
  8004206bb5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206bba:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206bbf:	48 89 c7             	mov    %rax,%rdi
  8004206bc2:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206bc9:	00 00 00 
  8004206bcc:	ff d0                	callq  *%rax
  8004206bce:	48 8b 00             	mov    (%rax),%rax
  8004206bd1:	83 e0 04             	and    $0x4,%eax
  8004206bd4:	48 85 c0             	test   %rax,%rax
  8004206bd7:	74 35                	je     8004206c0e <page_check+0x1002>
  8004206bd9:	48 b9 e8 98 21 04 80 	movabs $0x80042198e8,%rcx
  8004206be0:	00 00 00 
  8004206be3:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206bea:	00 00 00 
  8004206bed:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206bf2:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206bf9:	00 00 00 
  8004206bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c01:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c08:	00 00 00 
  8004206c0b:	41 ff d0             	callq  *%r8
  8004206c0e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c15:	00 00 00 
  8004206c18:	48 8b 00             	mov    (%rax),%rax
  8004206c1b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c20:	48 89 c7             	mov    %rax,%rdi
  8004206c23:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c2a:	00 00 00 
  8004206c2d:	ff d0                	callq  *%rax
  8004206c2f:	48 89 c3             	mov    %rax,%rbx
  8004206c32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206c36:	48 89 c7             	mov    %rax,%rdi
  8004206c39:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206c40:	00 00 00 
  8004206c43:	ff d0                	callq  *%rax
  8004206c45:	48 39 c3             	cmp    %rax,%rbx
  8004206c48:	74 35                	je     8004206c7f <page_check+0x1073>
  8004206c4a:	48 b9 20 99 21 04 80 	movabs $0x8004219920,%rcx
  8004206c51:	00 00 00 
  8004206c54:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206c5b:	00 00 00 
  8004206c5e:	be 51 05 00 00       	mov    $0x551,%esi
  8004206c63:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206c6a:	00 00 00 
  8004206c6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c79:	00 00 00 
  8004206c7c:	41 ff d0             	callq  *%r8
  8004206c7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206c86:	00 00 00 
  8004206c89:	48 8b 00             	mov    (%rax),%rax
  8004206c8c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206c91:	48 89 c7             	mov    %rax,%rdi
  8004206c94:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c9b:	00 00 00 
  8004206c9e:	ff d0                	callq  *%rax
  8004206ca0:	48 89 c3             	mov    %rax,%rbx
  8004206ca3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ca7:	48 89 c7             	mov    %rax,%rdi
  8004206caa:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206cb1:	00 00 00 
  8004206cb4:	ff d0                	callq  *%rax
  8004206cb6:	48 39 c3             	cmp    %rax,%rbx
  8004206cb9:	74 35                	je     8004206cf0 <page_check+0x10e4>
  8004206cbb:	48 b9 50 99 21 04 80 	movabs $0x8004219950,%rcx
  8004206cc2:	00 00 00 
  8004206cc5:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206ccc:	00 00 00 
  8004206ccf:	be 52 05 00 00       	mov    $0x552,%esi
  8004206cd4:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206cdb:	00 00 00 
  8004206cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ce3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206cea:	00 00 00 
  8004206ced:	41 ff d0             	callq  *%r8
  8004206cf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cf4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206cf8:	66 83 f8 02          	cmp    $0x2,%ax
  8004206cfc:	74 35                	je     8004206d33 <page_check+0x1127>
  8004206cfe:	48 b9 80 99 21 04 80 	movabs $0x8004219980,%rcx
  8004206d05:	00 00 00 
  8004206d08:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206d0f:	00 00 00 
  8004206d12:	be 54 05 00 00       	mov    $0x554,%esi
  8004206d17:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206d1e:	00 00 00 
  8004206d21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d26:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d2d:	00 00 00 
  8004206d30:	41 ff d0             	callq  *%r8
  8004206d33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d37:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d3b:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d3f:	74 35                	je     8004206d76 <page_check+0x116a>
  8004206d41:	48 b9 91 99 21 04 80 	movabs $0x8004219991,%rcx
  8004206d48:	00 00 00 
  8004206d4b:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206d52:	00 00 00 
  8004206d55:	be 55 05 00 00       	mov    $0x555,%esi
  8004206d5a:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206d61:	00 00 00 
  8004206d64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d70:	00 00 00 
  8004206d73:	41 ff d0             	callq  *%r8
  8004206d76:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d7d:	00 00 00 
  8004206d80:	48 8b 00             	mov    (%rax),%rax
  8004206d83:	be 00 00 00 00       	mov    $0x0,%esi
  8004206d88:	48 89 c7             	mov    %rax,%rdi
  8004206d8b:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206d92:	00 00 00 
  8004206d95:	ff d0                	callq  *%rax
  8004206d97:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206d9e:	00 00 00 
  8004206da1:	48 8b 00             	mov    (%rax),%rax
  8004206da4:	be 00 00 00 00       	mov    $0x0,%esi
  8004206da9:	48 89 c7             	mov    %rax,%rdi
  8004206dac:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206db3:	00 00 00 
  8004206db6:	ff d0                	callq  *%rax
  8004206db8:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206dbc:	74 35                	je     8004206df3 <page_check+0x11e7>
  8004206dbe:	48 b9 a8 99 21 04 80 	movabs $0x80042199a8,%rcx
  8004206dc5:	00 00 00 
  8004206dc8:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206dcf:	00 00 00 
  8004206dd2:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206dd7:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206dde:	00 00 00 
  8004206de1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206de6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ded:	00 00 00 
  8004206df0:	41 ff d0             	callq  *%r8
  8004206df3:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206dfa:	00 00 00 
  8004206dfd:	48 8b 00             	mov    (%rax),%rax
  8004206e00:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e05:	48 89 c7             	mov    %rax,%rdi
  8004206e08:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206e0f:	00 00 00 
  8004206e12:	ff d0                	callq  *%rax
  8004206e14:	48 89 c3             	mov    %rax,%rbx
  8004206e17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e1b:	48 89 c7             	mov    %rax,%rdi
  8004206e1e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206e25:	00 00 00 
  8004206e28:	ff d0                	callq  *%rax
  8004206e2a:	48 39 c3             	cmp    %rax,%rbx
  8004206e2d:	74 35                	je     8004206e64 <page_check+0x1258>
  8004206e2f:	48 b9 50 99 21 04 80 	movabs $0x8004219950,%rcx
  8004206e36:	00 00 00 
  8004206e39:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206e40:	00 00 00 
  8004206e43:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206e48:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206e4f:	00 00 00 
  8004206e52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e57:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206e5e:	00 00 00 
  8004206e61:	41 ff d0             	callq  *%r8
  8004206e64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e6c:	66 83 f8 01          	cmp    $0x1,%ax
  8004206e70:	74 35                	je     8004206ea7 <page_check+0x129b>
  8004206e72:	48 b9 f5 96 21 04 80 	movabs $0x80042196f5,%rcx
  8004206e79:	00 00 00 
  8004206e7c:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206e83:	00 00 00 
  8004206e86:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206e8b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206e92:	00 00 00 
  8004206e95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e9a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ea1:	00 00 00 
  8004206ea4:	41 ff d0             	callq  *%r8
  8004206ea7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206eab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206eaf:	66 83 f8 01          	cmp    $0x1,%ax
  8004206eb3:	74 35                	je     8004206eea <page_check+0x12de>
  8004206eb5:	48 b9 91 99 21 04 80 	movabs $0x8004219991,%rcx
  8004206ebc:	00 00 00 
  8004206ebf:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206ec6:	00 00 00 
  8004206ec9:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206ece:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206ed5:	00 00 00 
  8004206ed8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206edd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ee4:	00 00 00 
  8004206ee7:	41 ff d0             	callq  *%r8
  8004206eea:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ef1:	00 00 00 
  8004206ef4:	48 8b 00             	mov    (%rax),%rax
  8004206ef7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206efb:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206f00:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206f05:	48 89 c7             	mov    %rax,%rdi
  8004206f08:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206f0f:	00 00 00 
  8004206f12:	ff d0                	callq  *%rax
  8004206f14:	85 c0                	test   %eax,%eax
  8004206f16:	74 35                	je     8004206f4d <page_check+0x1341>
  8004206f18:	48 b9 b0 98 21 04 80 	movabs $0x80042198b0,%rcx
  8004206f1f:	00 00 00 
  8004206f22:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206f29:	00 00 00 
  8004206f2c:	be 61 05 00 00       	mov    $0x561,%esi
  8004206f31:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206f38:	00 00 00 
  8004206f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f40:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f47:	00 00 00 
  8004206f4a:	41 ff d0             	callq  *%r8
  8004206f4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f51:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f55:	66 85 c0             	test   %ax,%ax
  8004206f58:	75 35                	jne    8004206f8f <page_check+0x1383>
  8004206f5a:	48 b9 cb 99 21 04 80 	movabs $0x80042199cb,%rcx
  8004206f61:	00 00 00 
  8004206f64:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206f6b:	00 00 00 
  8004206f6e:	be 62 05 00 00       	mov    $0x562,%esi
  8004206f73:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206f7a:	00 00 00 
  8004206f7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f82:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f89:	00 00 00 
  8004206f8c:	41 ff d0             	callq  *%r8
  8004206f8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f93:	48 8b 00             	mov    (%rax),%rax
  8004206f96:	48 85 c0             	test   %rax,%rax
  8004206f99:	74 35                	je     8004206fd0 <page_check+0x13c4>
  8004206f9b:	48 b9 d7 99 21 04 80 	movabs $0x80042199d7,%rcx
  8004206fa2:	00 00 00 
  8004206fa5:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004206fac:	00 00 00 
  8004206faf:	be 63 05 00 00       	mov    $0x563,%esi
  8004206fb4:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004206fbb:	00 00 00 
  8004206fbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fc3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206fca:	00 00 00 
  8004206fcd:	41 ff d0             	callq  *%r8
  8004206fd0:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206fd7:	00 00 00 
  8004206fda:	48 8b 00             	mov    (%rax),%rax
  8004206fdd:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206fe2:	48 89 c7             	mov    %rax,%rdi
  8004206fe5:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206fec:	00 00 00 
  8004206fef:	ff d0                	callq  *%rax
  8004206ff1:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004206ff8:	00 00 00 
  8004206ffb:	48 8b 00             	mov    (%rax),%rax
  8004206ffe:	be 00 00 00 00       	mov    $0x0,%esi
  8004207003:	48 89 c7             	mov    %rax,%rdi
  8004207006:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  800420700d:	00 00 00 
  8004207010:	ff d0                	callq  *%rax
  8004207012:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207016:	74 35                	je     800420704d <page_check+0x1441>
  8004207018:	48 b9 a8 99 21 04 80 	movabs $0x80042199a8,%rcx
  800420701f:	00 00 00 
  8004207022:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207029:	00 00 00 
  800420702c:	be 67 05 00 00       	mov    $0x567,%esi
  8004207031:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207038:	00 00 00 
  800420703b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207040:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207047:	00 00 00 
  800420704a:	41 ff d0             	callq  *%r8
  800420704d:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207054:	00 00 00 
  8004207057:	48 8b 00             	mov    (%rax),%rax
  800420705a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420705f:	48 89 c7             	mov    %rax,%rdi
  8004207062:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207069:	00 00 00 
  800420706c:	ff d0                	callq  *%rax
  800420706e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207072:	74 35                	je     80042070a9 <page_check+0x149d>
  8004207074:	48 b9 f0 99 21 04 80 	movabs $0x80042199f0,%rcx
  800420707b:	00 00 00 
  800420707e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207085:	00 00 00 
  8004207088:	be 68 05 00 00       	mov    $0x568,%esi
  800420708d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207094:	00 00 00 
  8004207097:	b8 00 00 00 00       	mov    $0x0,%eax
  800420709c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070a3:	00 00 00 
  80042070a6:	41 ff d0             	callq  *%r8
  80042070a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042070ad:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070b1:	66 85 c0             	test   %ax,%ax
  80042070b4:	74 35                	je     80042070eb <page_check+0x14df>
  80042070b6:	48 b9 16 9a 21 04 80 	movabs $0x8004219a16,%rcx
  80042070bd:	00 00 00 
  80042070c0:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042070c7:	00 00 00 
  80042070ca:	be 69 05 00 00       	mov    $0x569,%esi
  80042070cf:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042070d6:	00 00 00 
  80042070d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042070de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070e5:	00 00 00 
  80042070e8:	41 ff d0             	callq  *%r8
  80042070eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042070ef:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070f3:	66 83 f8 01          	cmp    $0x1,%ax
  80042070f7:	74 35                	je     800420712e <page_check+0x1522>
  80042070f9:	48 b9 91 99 21 04 80 	movabs $0x8004219991,%rcx
  8004207100:	00 00 00 
  8004207103:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420710a:	00 00 00 
  800420710d:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004207112:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207119:	00 00 00 
  800420711c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207121:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207128:	00 00 00 
  800420712b:	41 ff d0             	callq  *%r8
  800420712e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207135:	00 00 00 
  8004207138:	48 8b 00             	mov    (%rax),%rax
  800420713b:	48 8b 00             	mov    (%rax),%rax
  800420713e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207144:	48 89 c7             	mov    %rax,%rdi
  8004207147:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  800420714e:	00 00 00 
  8004207151:	ff d0                	callq  *%rax
  8004207153:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800420715a:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207161:	00 00 00 
  8004207164:	48 8b 00             	mov    (%rax),%rax
  8004207167:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420716e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207172:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207176:	66 83 f8 01          	cmp    $0x1,%ax
  800420717a:	74 35                	je     80042071b1 <page_check+0x15a5>
  800420717c:	48 b9 91 99 21 04 80 	movabs $0x8004219991,%rcx
  8004207183:	00 00 00 
  8004207186:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420718d:	00 00 00 
  8004207190:	be 80 05 00 00       	mov    $0x580,%esi
  8004207195:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420719c:	00 00 00 
  800420719f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042071ab:	00 00 00 
  80042071ae:	41 ff d0             	callq  *%r8
  80042071b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071b8:	48 89 c7             	mov    %rax,%rdi
  80042071bb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071c2:	00 00 00 
  80042071c5:	ff d0                	callq  *%rax
  80042071c7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042071d2:	74 13                	je     80042071e7 <page_check+0x15db>
  80042071d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042071d8:	48 89 c7             	mov    %rax,%rdi
  80042071db:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071e2:	00 00 00 
  80042071e5:	ff d0                	callq  *%rax
  80042071e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ee:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042071f2:	74 13                	je     8004207207 <page_check+0x15fb>
  80042071f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042071f8:	48 89 c7             	mov    %rax,%rdi
  80042071fb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207202:	00 00 00 
  8004207205:	ff d0                	callq  *%rax
  8004207207:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420720e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004207212:	74 13                	je     8004207227 <page_check+0x161b>
  8004207214:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207218:	48 89 c7             	mov    %rax,%rdi
  800420721b:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207222:	00 00 00 
  8004207225:	ff d0                	callq  *%rax
  8004207227:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  800420722e:	00 40 06 00 
  8004207232:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207239:	00 00 00 
  800420723c:	48 8b 00             	mov    (%rax),%rax
  800420723f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207246:	ba 01 00 00 00       	mov    $0x1,%edx
  800420724b:	48 89 ce             	mov    %rcx,%rsi
  800420724e:	48 89 c7             	mov    %rax,%rdi
  8004207251:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207258:	00 00 00 
  800420725b:	ff d0                	callq  *%rax
  800420725d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207264:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420726b:	00 00 00 
  800420726e:	48 8b 00             	mov    (%rax),%rax
  8004207271:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207278:	48 c1 ea 27          	shr    $0x27,%rdx
  800420727c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207282:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207286:	48 01 d0             	add    %rdx,%rax
  8004207289:	48 8b 00             	mov    (%rax),%rax
  800420728c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207292:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207299:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072a0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  80042072aa:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  80042072b0:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042072b7:	00 00 00 
  80042072ba:	48 8b 00             	mov    (%rax),%rax
  80042072bd:	48 39 c2             	cmp    %rax,%rdx
  80042072c0:	72 35                	jb     80042072f7 <page_check+0x16eb>
  80042072c2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072c9:	48 89 c1             	mov    %rax,%rcx
  80042072cc:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042072d3:	00 00 00 
  80042072d6:	be 88 05 00 00       	mov    $0x588,%esi
  80042072db:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042072e2:	00 00 00 
  80042072e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042072f1:	00 00 00 
  80042072f4:	41 ff d0             	callq  *%r8
  80042072f7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042072fe:	00 00 00 
  8004207301:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207308:	48 01 d0             	add    %rdx,%rax
  800420730b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420730f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207316:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420731a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420731f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207326:	00 
  8004207327:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420732b:	48 01 d0             	add    %rdx,%rax
  800420732e:	48 8b 00             	mov    (%rax),%rax
  8004207331:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207337:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420733e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207345:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207349:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420734f:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207355:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420735c:	00 00 00 
  800420735f:	48 8b 00             	mov    (%rax),%rax
  8004207362:	48 39 c2             	cmp    %rax,%rdx
  8004207365:	72 35                	jb     800420739c <page_check+0x1790>
  8004207367:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420736e:	48 89 c1             	mov    %rax,%rcx
  8004207371:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004207378:	00 00 00 
  800420737b:	be 89 05 00 00       	mov    $0x589,%esi
  8004207380:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207387:	00 00 00 
  800420738a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420738f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207396:	00 00 00 
  8004207399:	41 ff d0             	callq  *%r8
  800420739c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042073a3:	00 00 00 
  80042073a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042073ad:	48 01 d0             	add    %rdx,%rax
  80042073b0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042073b4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042073bb:	48 c1 e8 15          	shr    $0x15,%rax
  80042073bf:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042073c4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042073cb:	00 
  80042073cc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042073d0:	48 01 d0             	add    %rdx,%rax
  80042073d3:	48 8b 00             	mov    (%rax),%rax
  80042073d6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073dc:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042073e3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042073ea:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042073f4:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042073fa:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207401:	00 00 00 
  8004207404:	48 8b 00             	mov    (%rax),%rax
  8004207407:	48 39 c2             	cmp    %rax,%rdx
  800420740a:	72 35                	jb     8004207441 <page_check+0x1835>
  800420740c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207413:	48 89 c1             	mov    %rax,%rcx
  8004207416:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420741d:	00 00 00 
  8004207420:	be 8a 05 00 00       	mov    $0x58a,%esi
  8004207425:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420742c:	00 00 00 
  800420742f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207434:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420743b:	00 00 00 
  800420743e:	41 ff d0             	callq  *%r8
  8004207441:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207448:	00 00 00 
  800420744b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207452:	48 01 d0             	add    %rdx,%rax
  8004207455:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800420745c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207463:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207467:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420746c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207473:	00 
  8004207474:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420747b:	48 01 c2             	add    %rax,%rdx
  800420747e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207485:	48 39 c2             	cmp    %rax,%rdx
  8004207488:	74 35                	je     80042074bf <page_check+0x18b3>
  800420748a:	48 b9 27 9a 21 04 80 	movabs $0x8004219a27,%rcx
  8004207491:	00 00 00 
  8004207494:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420749b:	00 00 00 
  800420749e:	be 8b 05 00 00       	mov    $0x58b,%esi
  80042074a3:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042074aa:	00 00 00 
  80042074ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074b2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042074b9:	00 00 00 
  80042074bc:	41 ff d0             	callq  *%r8
  80042074bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042074c3:	48 89 c7             	mov    %rax,%rdi
  80042074c6:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  80042074cd:	00 00 00 
  80042074d0:	ff d0                	callq  *%rax
  80042074d2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042074d7:	be ff 00 00 00       	mov    $0xff,%esi
  80042074dc:	48 89 c7             	mov    %rax,%rdi
  80042074df:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042074e6:	00 00 00 
  80042074e9:	ff d0                	callq  *%rax
  80042074eb:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042074f2:	00 00 00 
  80042074f5:	48 8b 00             	mov    (%rax),%rax
  80042074f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042074fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004207502:	48 89 c7             	mov    %rax,%rdi
  8004207505:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  800420750c:	00 00 00 
  800420750f:	ff d0                	callq  *%rax
  8004207511:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207518:	00 00 00 
  800420751b:	48 8b 00             	mov    (%rax),%rax
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207527:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  800420752e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207535:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207539:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800420753f:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207545:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  800420754c:	00 00 00 
  800420754f:	48 8b 00             	mov    (%rax),%rax
  8004207552:	48 39 c2             	cmp    %rax,%rdx
  8004207555:	72 35                	jb     800420758c <page_check+0x1980>
  8004207557:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420755e:	48 89 c1             	mov    %rax,%rcx
  8004207561:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  8004207568:	00 00 00 
  800420756b:	be 90 05 00 00       	mov    $0x590,%esi
  8004207570:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207577:	00 00 00 
  800420757a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420757f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207586:	00 00 00 
  8004207589:	41 ff d0             	callq  *%r8
  800420758c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207593:	00 00 00 
  8004207596:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420759d:	48 01 d0             	add    %rdx,%rax
  80042075a0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042075a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042075a8:	48 8b 00             	mov    (%rax),%rax
  80042075ab:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042075b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042075b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075bf:	48 c1 e8 0c          	shr    $0xc,%rax
  80042075c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042075c9:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042075cf:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042075d6:	00 00 00 
  80042075d9:	48 8b 00             	mov    (%rax),%rax
  80042075dc:	48 39 c2             	cmp    %rax,%rdx
  80042075df:	72 35                	jb     8004207616 <page_check+0x1a0a>
  80042075e1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075e8:	48 89 c1             	mov    %rax,%rcx
  80042075eb:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  80042075f2:	00 00 00 
  80042075f5:	be 91 05 00 00       	mov    $0x591,%esi
  80042075fa:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207601:	00 00 00 
  8004207604:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207609:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207610:	00 00 00 
  8004207613:	41 ff d0             	callq  *%r8
  8004207616:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420761d:	00 00 00 
  8004207620:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207627:	48 01 d0             	add    %rdx,%rax
  800420762a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420762e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207632:	48 8b 00             	mov    (%rax),%rax
  8004207635:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420763b:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207642:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207649:	48 c1 e8 0c          	shr    $0xc,%rax
  800420764d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004207653:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207659:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207660:	00 00 00 
  8004207663:	48 8b 00             	mov    (%rax),%rax
  8004207666:	48 39 c2             	cmp    %rax,%rdx
  8004207669:	72 35                	jb     80042076a0 <page_check+0x1a94>
  800420766b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207672:	48 89 c1             	mov    %rax,%rcx
  8004207675:	48 ba 88 8d 21 04 80 	movabs $0x8004218d88,%rdx
  800420767c:	00 00 00 
  800420767f:	be 92 05 00 00       	mov    $0x592,%esi
  8004207684:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  800420768b:	00 00 00 
  800420768e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207693:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420769a:	00 00 00 
  800420769d:	41 ff d0             	callq  *%r8
  80042076a0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042076a7:	00 00 00 
  80042076aa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076b1:	48 01 d0             	add    %rdx,%rax
  80042076b4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042076bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042076c2:	eb 58                	jmp    800420771c <page_check+0x1b10>
  80042076c4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042076cb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042076ce:	48 63 d2             	movslq %edx,%rdx
  80042076d1:	48 c1 e2 03          	shl    $0x3,%rdx
  80042076d5:	48 01 d0             	add    %rdx,%rax
  80042076d8:	48 8b 00             	mov    (%rax),%rax
  80042076db:	83 e0 01             	and    $0x1,%eax
  80042076de:	48 85 c0             	test   %rax,%rax
  80042076e1:	74 35                	je     8004207718 <page_check+0x1b0c>
  80042076e3:	48 b9 3f 9a 21 04 80 	movabs $0x8004219a3f,%rcx
  80042076ea:	00 00 00 
  80042076ed:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042076f4:	00 00 00 
  80042076f7:	be 94 05 00 00       	mov    $0x594,%esi
  80042076fc:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207703:	00 00 00 
  8004207706:	b8 00 00 00 00       	mov    $0x0,%eax
  800420770b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207712:	00 00 00 
  8004207715:	41 ff d0             	callq  *%r8
  8004207718:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420771c:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004207723:	7e 9f                	jle    80042076c4 <page_check+0x1ab8>
  8004207725:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420772c:	00 00 00 
  800420772f:	48 8b 00             	mov    (%rax),%rax
  8004207732:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207739:	48 b8 38 c2 49 04 80 	movabs $0x800449c238,%rax
  8004207740:	00 00 00 
  8004207743:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207747:	48 89 10             	mov    %rdx,(%rax)
  800420774a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420774e:	48 89 c7             	mov    %rax,%rdi
  8004207751:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207758:	00 00 00 
  800420775b:	ff d0                	callq  *%rax
  800420775d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207761:	48 89 c7             	mov    %rax,%rdi
  8004207764:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420776b:	00 00 00 
  800420776e:	ff d0                	callq  *%rax
  8004207770:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207774:	48 89 c7             	mov    %rax,%rdi
  8004207777:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420777e:	00 00 00 
  8004207781:	ff d0                	callq  *%rax
  8004207783:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207787:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420778b:	66 85 c0             	test   %ax,%ax
  800420778e:	74 35                	je     80042077c5 <page_check+0x1bb9>
  8004207790:	48 b9 56 9a 21 04 80 	movabs $0x8004219a56,%rcx
  8004207797:	00 00 00 
  800420779a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042077a1:	00 00 00 
  80042077a4:	be a0 05 00 00       	mov    $0x5a0,%esi
  80042077a9:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042077b0:	00 00 00 
  80042077b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042077bf:	00 00 00 
  80042077c2:	41 ff d0             	callq  *%r8
  80042077c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042077c9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077cd:	66 85 c0             	test   %ax,%ax
  80042077d0:	74 35                	je     8004207807 <page_check+0x1bfb>
  80042077d2:	48 b9 16 9a 21 04 80 	movabs $0x8004219a16,%rcx
  80042077d9:	00 00 00 
  80042077dc:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042077e3:	00 00 00 
  80042077e6:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042077eb:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042077f2:	00 00 00 
  80042077f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077fa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207801:	00 00 00 
  8004207804:	41 ff d0             	callq  *%r8
  8004207807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420780b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420780f:	66 85 c0             	test   %ax,%ax
  8004207812:	74 35                	je     8004207849 <page_check+0x1c3d>
  8004207814:	48 b9 67 9a 21 04 80 	movabs $0x8004219a67,%rcx
  800420781b:	00 00 00 
  800420781e:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207825:	00 00 00 
  8004207828:	be a2 05 00 00       	mov    $0x5a2,%esi
  800420782d:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207834:	00 00 00 
  8004207837:	b8 00 00 00 00       	mov    $0x0,%eax
  800420783c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207843:	00 00 00 
  8004207846:	41 ff d0             	callq  *%r8
  8004207849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420784d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207851:	66 85 c0             	test   %ax,%ax
  8004207854:	74 35                	je     800420788b <page_check+0x1c7f>
  8004207856:	48 b9 78 9a 21 04 80 	movabs $0x8004219a78,%rcx
  800420785d:	00 00 00 
  8004207860:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207867:	00 00 00 
  800420786a:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420786f:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207876:	00 00 00 
  8004207879:	b8 00 00 00 00       	mov    $0x0,%eax
  800420787e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207885:	00 00 00 
  8004207888:	41 ff d0             	callq  *%r8
  800420788b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420788f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207893:	66 85 c0             	test   %ax,%ax
  8004207896:	74 35                	je     80042078cd <page_check+0x1cc1>
  8004207898:	48 b9 89 9a 21 04 80 	movabs $0x8004219a89,%rcx
  800420789f:	00 00 00 
  80042078a2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042078a9:	00 00 00 
  80042078ac:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042078b1:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042078b8:	00 00 00 
  80042078bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042078c7:	00 00 00 
  80042078ca:	41 ff d0             	callq  *%r8
  80042078cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042078d1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042078d5:	66 85 c0             	test   %ax,%ax
  80042078d8:	74 35                	je     800420790f <page_check+0x1d03>
  80042078da:	48 b9 9a 9a 21 04 80 	movabs $0x8004219a9a,%rcx
  80042078e1:	00 00 00 
  80042078e4:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042078eb:	00 00 00 
  80042078ee:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042078f3:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042078fa:	00 00 00 
  80042078fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207902:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207909:	00 00 00 
  800420790c:	41 ff d0             	callq  *%r8
  800420790f:	be 01 10 00 00       	mov    $0x1001,%esi
  8004207914:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207919:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004207920:	00 00 00 
  8004207923:	ff d0                	callq  *%rax
  8004207925:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  800420792c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207931:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207936:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800420793d:	00 00 00 
  8004207940:	ff d0                	callq  *%rax
  8004207942:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207949:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207950:	00 00 00 
  8004207953:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  800420795a:	76 1d                	jbe    8004207979 <page_check+0x1d6d>
  800420795c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207963:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420796a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207971:	00 00 00 
  8004207974:	48 39 c2             	cmp    %rax,%rdx
  8004207977:	76 35                	jbe    80042079ae <page_check+0x1da2>
  8004207979:	48 b9 b0 9a 21 04 80 	movabs $0x8004219ab0,%rcx
  8004207980:	00 00 00 
  8004207983:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  800420798a:	00 00 00 
  800420798d:	be ac 05 00 00       	mov    $0x5ac,%esi
  8004207992:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207999:	00 00 00 
  800420799c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079a1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042079a8:	00 00 00 
  80042079ab:	41 ff d0             	callq  *%r8
  80042079ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042079b5:	00 00 00 
  80042079b8:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  80042079bf:	76 1d                	jbe    80042079de <page_check+0x1dd2>
  80042079c1:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042079c8:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  80042079cf:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  80042079d6:	00 00 00 
  80042079d9:	48 39 c2             	cmp    %rax,%rdx
  80042079dc:	76 35                	jbe    8004207a13 <page_check+0x1e07>
  80042079de:	48 b9 d8 9a 21 04 80 	movabs $0x8004219ad8,%rcx
  80042079e5:	00 00 00 
  80042079e8:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  80042079ef:	00 00 00 
  80042079f2:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042079f7:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  80042079fe:	00 00 00 
  8004207a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a0d:	00 00 00 
  8004207a10:	41 ff d0             	callq  *%r8
  8004207a13:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a1a:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a1f:	48 85 c0             	test   %rax,%rax
  8004207a22:	75 11                	jne    8004207a35 <page_check+0x1e29>
  8004207a24:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207a2b:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a30:	48 85 c0             	test   %rax,%rax
  8004207a33:	74 35                	je     8004207a6a <page_check+0x1e5e>
  8004207a35:	48 b9 00 9b 21 04 80 	movabs $0x8004219b00,%rcx
  8004207a3c:	00 00 00 
  8004207a3f:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207a46:	00 00 00 
  8004207a49:	be af 05 00 00       	mov    $0x5af,%esi
  8004207a4e:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207a55:	00 00 00 
  8004207a58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a64:	00 00 00 
  8004207a67:	41 ff d0             	callq  *%r8
  8004207a6a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a71:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207a77:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207a7e:	76 35                	jbe    8004207ab5 <page_check+0x1ea9>
  8004207a80:	48 b9 27 9b 21 04 80 	movabs $0x8004219b27,%rcx
  8004207a87:	00 00 00 
  8004207a8a:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207a91:	00 00 00 
  8004207a94:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207a99:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207aa0:	00 00 00 
  8004207aa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207aa8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207aaf:	00 00 00 
  8004207ab2:	41 ff d0             	callq  *%r8
  8004207ab5:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207abc:	00 00 00 
  8004207abf:	48 8b 00             	mov    (%rax),%rax
  8004207ac2:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207ac9:	48 89 d6             	mov    %rdx,%rsi
  8004207acc:	48 89 c7             	mov    %rax,%rdi
  8004207acf:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ad6:	00 00 00 
  8004207ad9:	ff d0                	callq  *%rax
  8004207adb:	48 85 c0             	test   %rax,%rax
  8004207ade:	74 35                	je     8004207b15 <page_check+0x1f09>
  8004207ae0:	48 b9 40 9b 21 04 80 	movabs $0x8004219b40,%rcx
  8004207ae7:	00 00 00 
  8004207aea:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207af1:	00 00 00 
  8004207af4:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207af9:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207b00:	00 00 00 
  8004207b03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b0f:	00 00 00 
  8004207b12:	41 ff d0             	callq  *%r8
  8004207b15:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207b1c:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207b23:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b2a:	00 00 00 
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	48 89 d6             	mov    %rdx,%rsi
  8004207b33:	48 89 c7             	mov    %rax,%rdi
  8004207b36:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207b3d:	00 00 00 
  8004207b40:	ff d0                	callq  *%rax
  8004207b42:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207b48:	74 35                	je     8004207b7f <page_check+0x1f73>
  8004207b4a:	48 b9 68 9b 21 04 80 	movabs $0x8004219b68,%rcx
  8004207b51:	00 00 00 
  8004207b54:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207b5b:	00 00 00 
  8004207b5e:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207b63:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207b6a:	00 00 00 
  8004207b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b79:	00 00 00 
  8004207b7c:	41 ff d0             	callq  *%r8
  8004207b7f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207b86:	00 00 00 
  8004207b89:	48 8b 00             	mov    (%rax),%rax
  8004207b8c:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207b93:	48 89 d6             	mov    %rdx,%rsi
  8004207b96:	48 89 c7             	mov    %rax,%rdi
  8004207b99:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ba0:	00 00 00 
  8004207ba3:	ff d0                	callq  *%rax
  8004207ba5:	48 85 c0             	test   %rax,%rax
  8004207ba8:	74 35                	je     8004207bdf <page_check+0x1fd3>
  8004207baa:	48 b9 98 9b 21 04 80 	movabs $0x8004219b98,%rcx
  8004207bb1:	00 00 00 
  8004207bb4:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207bbb:	00 00 00 
  8004207bbe:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207bc3:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207bca:	00 00 00 
  8004207bcd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207bd9:	00 00 00 
  8004207bdc:	41 ff d0             	callq  *%r8
  8004207bdf:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207be6:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207bed:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207bf4:	00 00 00 
  8004207bf7:	48 8b 00             	mov    (%rax),%rax
  8004207bfa:	48 89 d6             	mov    %rdx,%rsi
  8004207bfd:	48 89 c7             	mov    %rax,%rdi
  8004207c00:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207c07:	00 00 00 
  8004207c0a:	ff d0                	callq  *%rax
  8004207c0c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207c10:	74 35                	je     8004207c47 <page_check+0x203b>
  8004207c12:	48 b9 c0 9b 21 04 80 	movabs $0x8004219bc0,%rcx
  8004207c19:	00 00 00 
  8004207c1c:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207c23:	00 00 00 
  8004207c26:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207c2b:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207c32:	00 00 00 
  8004207c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c3a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207c41:	00 00 00 
  8004207c44:	41 ff d0             	callq  *%r8
  8004207c47:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207c4e:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207c55:	00 00 00 
  8004207c58:	48 8b 00             	mov    (%rax),%rax
  8004207c5b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c60:	48 89 ce             	mov    %rcx,%rsi
  8004207c63:	48 89 c7             	mov    %rax,%rdi
  8004207c66:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207c6d:	00 00 00 
  8004207c70:	ff d0                	callq  *%rax
  8004207c72:	48 8b 00             	mov    (%rax),%rax
  8004207c75:	83 e0 1a             	and    $0x1a,%eax
  8004207c78:	48 85 c0             	test   %rax,%rax
  8004207c7b:	75 35                	jne    8004207cb2 <page_check+0x20a6>
  8004207c7d:	48 b9 f0 9b 21 04 80 	movabs $0x8004219bf0,%rcx
  8004207c84:	00 00 00 
  8004207c87:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207c8e:	00 00 00 
  8004207c91:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207c96:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207c9d:	00 00 00 
  8004207ca0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ca5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207cac:	00 00 00 
  8004207caf:	41 ff d0             	callq  *%r8
  8004207cb2:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207cb9:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207cc0:	00 00 00 
  8004207cc3:	48 8b 00             	mov    (%rax),%rax
  8004207cc6:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207ccb:	48 89 ce             	mov    %rcx,%rsi
  8004207cce:	48 89 c7             	mov    %rax,%rdi
  8004207cd1:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207cd8:	00 00 00 
  8004207cdb:	ff d0                	callq  *%rax
  8004207cdd:	48 8b 00             	mov    (%rax),%rax
  8004207ce0:	83 e0 04             	and    $0x4,%eax
  8004207ce3:	48 85 c0             	test   %rax,%rax
  8004207ce6:	74 35                	je     8004207d1d <page_check+0x2111>
  8004207ce8:	48 b9 38 9c 21 04 80 	movabs $0x8004219c38,%rcx
  8004207cef:	00 00 00 
  8004207cf2:	48 ba 01 8e 21 04 80 	movabs $0x8004218e01,%rdx
  8004207cf9:	00 00 00 
  8004207cfc:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207d01:	48 bf 16 8e 21 04 80 	movabs $0x8004218e16,%rdi
  8004207d08:	00 00 00 
  8004207d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d10:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207d17:	00 00 00 
  8004207d1a:	41 ff d0             	callq  *%r8
  8004207d1d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207d24:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d2b:	00 00 00 
  8004207d2e:	48 8b 00             	mov    (%rax),%rax
  8004207d31:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d36:	48 89 ce             	mov    %rcx,%rsi
  8004207d39:	48 89 c7             	mov    %rax,%rdi
  8004207d3c:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d43:	00 00 00 
  8004207d46:	ff d0                	callq  *%rax
  8004207d48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d4f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207d56:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207d5c:	48 89 c1             	mov    %rax,%rcx
  8004207d5f:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d66:	00 00 00 
  8004207d69:	48 8b 00             	mov    (%rax),%rax
  8004207d6c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d71:	48 89 ce             	mov    %rcx,%rsi
  8004207d74:	48 89 c7             	mov    %rax,%rdi
  8004207d77:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d7e:	00 00 00 
  8004207d81:	ff d0                	callq  *%rax
  8004207d83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d8a:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207d91:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  8004207d98:	00 00 00 
  8004207d9b:	48 8b 00             	mov    (%rax),%rax
  8004207d9e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207da3:	48 89 ce             	mov    %rcx,%rsi
  8004207da6:	48 89 c7             	mov    %rax,%rdi
  8004207da9:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207db0:	00 00 00 
  8004207db3:	ff d0                	callq  *%rax
  8004207db5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207dbc:	48 bf 6b 9c 21 04 80 	movabs $0x8004219c6b,%rdi
  8004207dc3:	00 00 00 
  8004207dc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcb:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004207dd2:	00 00 00 
  8004207dd5:	ff d2                	callq  *%rdx
  8004207dd7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207dde:	5b                   	pop    %rbx
  8004207ddf:	5d                   	pop    %rbp
  8004207de0:	c3                   	retq   

0000008004207de1 <page2ppn>:
  8004207de1:	55                   	push   %rbp
  8004207de2:	48 89 e5             	mov    %rsp,%rbp
  8004207de5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207de9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ded:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207df1:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207df8:	00 00 00 
  8004207dfb:	48 8b 00             	mov    (%rax),%rax
  8004207dfe:	48 29 c2             	sub    %rax,%rdx
  8004207e01:	48 89 d0             	mov    %rdx,%rax
  8004207e04:	48 c1 f8 04          	sar    $0x4,%rax
  8004207e08:	c9                   	leaveq 
  8004207e09:	c3                   	retq   

0000008004207e0a <page2pa>:
  8004207e0a:	55                   	push   %rbp
  8004207e0b:	48 89 e5             	mov    %rsp,%rbp
  8004207e0e:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e1a:	48 89 c7             	mov    %rax,%rdi
  8004207e1d:	48 b8 e1 7d 20 04 80 	movabs $0x8004207de1,%rax
  8004207e24:	00 00 00 
  8004207e27:	ff d0                	callq  *%rax
  8004207e29:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207e2d:	c9                   	leaveq 
  8004207e2e:	c3                   	retq   

0000008004207e2f <pa2page>:
  8004207e2f:	55                   	push   %rbp
  8004207e30:	48 89 e5             	mov    %rsp,%rbp
  8004207e33:	48 83 ec 10          	sub    $0x10,%rsp
  8004207e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e3f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207e43:	48 89 c2             	mov    %rax,%rdx
  8004207e46:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207e4d:	00 00 00 
  8004207e50:	48 8b 00             	mov    (%rax),%rax
  8004207e53:	48 39 c2             	cmp    %rax,%rdx
  8004207e56:	72 2a                	jb     8004207e82 <pa2page+0x53>
  8004207e58:	48 ba 88 9c 21 04 80 	movabs $0x8004219c88,%rdx
  8004207e5f:	00 00 00 
  8004207e62:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207e67:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004207e6e:	00 00 00 
  8004207e71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e76:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004207e7d:	00 00 00 
  8004207e80:	ff d1                	callq  *%rcx
  8004207e82:	48 b8 f8 b5 69 04 80 	movabs $0x800469b5f8,%rax
  8004207e89:	00 00 00 
  8004207e8c:	48 8b 00             	mov    (%rax),%rax
  8004207e8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207e93:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207e97:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207e9b:	48 01 d0             	add    %rdx,%rax
  8004207e9e:	c9                   	leaveq 
  8004207e9f:	c3                   	retq   

0000008004207ea0 <page2kva>:
  8004207ea0:	55                   	push   %rbp
  8004207ea1:	48 89 e5             	mov    %rsp,%rbp
  8004207ea4:	48 83 ec 20          	sub    $0x20,%rsp
  8004207ea8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207eb0:	48 89 c7             	mov    %rax,%rdi
  8004207eb3:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004207eba:	00 00 00 
  8004207ebd:	ff d0                	callq  *%rax
  8004207ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ec7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207ecb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207ece:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207ed1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004207ed8:	00 00 00 
  8004207edb:	48 8b 00             	mov    (%rax),%rax
  8004207ede:	48 39 c2             	cmp    %rax,%rdx
  8004207ee1:	72 32                	jb     8004207f15 <page2kva+0x75>
  8004207ee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ee7:	48 89 c1             	mov    %rax,%rcx
  8004207eea:	48 ba b8 9c 21 04 80 	movabs $0x8004219cb8,%rdx
  8004207ef1:	00 00 00 
  8004207ef4:	be 62 00 00 00       	mov    $0x62,%esi
  8004207ef9:	48 bf a7 9c 21 04 80 	movabs $0x8004219ca7,%rdi
  8004207f00:	00 00 00 
  8004207f03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207f0f:	00 00 00 
  8004207f12:	41 ff d0             	callq  *%r8
  8004207f15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207f1c:	00 00 00 
  8004207f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f23:	48 01 d0             	add    %rdx,%rax
  8004207f26:	c9                   	leaveq 
  8004207f27:	c3                   	retq   

0000008004207f28 <unlock_kernel>:
  8004207f28:	55                   	push   %rbp
  8004207f29:	48 89 e5             	mov    %rsp,%rbp
  8004207f2c:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004207f33:	00 00 00 
  8004207f36:	48 b8 84 74 21 04 80 	movabs $0x8004217484,%rax
  8004207f3d:	00 00 00 
  8004207f40:	ff d0                	callq  *%rax
  8004207f42:	f3 90                	pause  
  8004207f44:	5d                   	pop    %rbp
  8004207f45:	c3                   	retq   

0000008004207f46 <envid2env>:
//   On success, sets *env_store to the environment.
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207f46:	55                   	push   %rbp
  8004207f47:	48 89 e5             	mov    %rsp,%rbp
  8004207f4a:	53                   	push   %rbx
  8004207f4b:	48 83 ec 28          	sub    $0x28,%rsp
  8004207f4f:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207f52:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207f56:	89 d0                	mov    %edx,%eax
  8004207f58:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// Following comment is what it should look like
	if (envid == 0)
  8004207f5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207f5f:	75 41                	jne    8004207fa2 <envid2env+0x5c>
	{
		*env_store = curenv;
  8004207f61:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004207f68:	00 00 00 
  8004207f6b:	ff d0                	callq  *%rax
  8004207f6d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004207f74:	00 00 00 
  8004207f77:	48 98                	cltq   
  8004207f79:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f7d:	48 89 c1             	mov    %rax,%rcx
  8004207f80:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f84:	48 01 c8             	add    %rcx,%rax
  8004207f87:	48 01 d0             	add    %rdx,%rax
  8004207f8a:	48 83 c0 08          	add    $0x8,%rax
  8004207f8e:	48 8b 10             	mov    (%rax),%rdx
  8004207f91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f95:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207f98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f9d:	e9 3e 01 00 00       	jmpq   80042080e0 <envid2env+0x19a>
	// that used the same slot in the envs[] array).

	// it should use the ENVX() macro found in inc/env.h, not straight reference

	int i;
	for (i = 0; i < NENV; i++)
  8004207fa2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004207fa9:	eb 4b                	jmp    8004207ff6 <envid2env+0xb0>
	{
		if (envs[i].env_id == envid)
  8004207fab:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004207fb2:	00 00 00 
  8004207fb5:	48 8b 10             	mov    (%rax),%rdx
  8004207fb8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004207fbb:	48 98                	cltq   
  8004207fbd:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fc4:	48 01 d0             	add    %rdx,%rax
  8004207fc7:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207fcd:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207fd0:	75 20                	jne    8004207ff2 <envid2env+0xac>
		{
			e = &envs[envid];
  8004207fd2:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004207fd9:	00 00 00 
  8004207fdc:	48 8b 10             	mov    (%rax),%rdx
  8004207fdf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207fe2:	48 98                	cltq   
  8004207fe4:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207feb:	48 01 d0             	add    %rdx,%rax
  8004207fee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	// that used the same slot in the envs[] array).

	// it should use the ENVX() macro found in inc/env.h, not straight reference

	int i;
	for (i = 0; i < NENV; i++)
  8004207ff2:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004207ff6:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%rbp)
  8004207ffd:	7e ac                	jle    8004207fab <envid2env+0x65>
		{
			e = &envs[envid];
		}
	}

	if (e == NULL || e->env_status == ENV_FREE || e->env_id != envid)
  8004207fff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208003:	48 85 c0             	test   %rax,%rax
  8004208006:	74 1d                	je     8004208025 <envid2env+0xdf>
  8004208008:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420800c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208012:	85 c0                	test   %eax,%eax
  8004208014:	74 0f                	je     8004208025 <envid2env+0xdf>
  8004208016:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420801a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208020:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004208023:	74 15                	je     800420803a <envid2env+0xf4>
	{
		*env_store = 0;
  8004208025:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208029:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004208030:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004208035:	e9 a6 00 00 00       	jmpq   80042080e0 <envid2env+0x19a>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id)
  800420803a:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  800420803e:	0f 84 8f 00 00 00    	je     80042080d3 <envid2env+0x18d>
  8004208044:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420804b:	00 00 00 
  800420804e:	ff d0                	callq  *%rax
  8004208050:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208057:	00 00 00 
  800420805a:	48 98                	cltq   
  800420805c:	48 c1 e0 03          	shl    $0x3,%rax
  8004208060:	48 89 c1             	mov    %rax,%rcx
  8004208063:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208067:	48 01 c8             	add    %rcx,%rax
  800420806a:	48 01 d0             	add    %rdx,%rax
  800420806d:	48 83 c0 08          	add    $0x8,%rax
  8004208071:	48 8b 10             	mov    (%rax),%rdx
  8004208074:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208078:	48 39 c2             	cmp    %rax,%rdx
  800420807b:	74 56                	je     80042080d3 <envid2env+0x18d>
  800420807d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208081:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004208087:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420808e:	00 00 00 
  8004208091:	ff d0                	callq  *%rax
  8004208093:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420809a:	00 00 00 
  800420809d:	48 98                	cltq   
  800420809f:	48 c1 e0 03          	shl    $0x3,%rax
  80042080a3:	48 89 c1             	mov    %rax,%rcx
  80042080a6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042080aa:	48 01 c8             	add    %rcx,%rax
  80042080ad:	48 01 d0             	add    %rdx,%rax
  80042080b0:	48 83 c0 08          	add    $0x8,%rax
  80042080b4:	48 8b 00             	mov    (%rax),%rax
  80042080b7:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042080bd:	39 c3                	cmp    %eax,%ebx
  80042080bf:	74 12                	je     80042080d3 <envid2env+0x18d>
	{
		*env_store = 0;
  80042080c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042080c5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  80042080cc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  80042080d1:	eb 0d                	jmp    80042080e0 <envid2env+0x19a>
	}

	// should be *env_store = e;, this might literaly work tho
	env_store = &e;
  80042080d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042080d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return 0;
  80042080db:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042080e0:	48 83 c4 28          	add    $0x28,%rsp
  80042080e4:	5b                   	pop    %rbx
  80042080e5:	5d                   	pop    %rbp
  80042080e6:	c3                   	retq   

00000080042080e7 <env_init>:
// Make sure the environments are in the free list in the same order
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void env_init(void)
{
  80042080e7:	55                   	push   %rbp
  80042080e8:	48 89 e5             	mov    %rsp,%rbp
  80042080eb:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++)
  80042080ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042080f6:	eb 6d                	jmp    8004208165 <env_init+0x7e>
	{
		envs[i].env_status = ENV_FREE;
  80042080f8:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  80042080ff:	00 00 00 
  8004208102:	48 8b 10             	mov    (%rax),%rdx
  8004208105:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208108:	48 98                	cltq   
  800420810a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208111:	48 01 d0             	add    %rdx,%rax
  8004208114:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  800420811b:	00 00 00 
		envs[i].env_link = &envs[i + 1];
  800420811e:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208125:	00 00 00 
  8004208128:	48 8b 10             	mov    (%rax),%rdx
  800420812b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420812e:	48 98                	cltq   
  8004208130:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208137:	48 01 c2             	add    %rax,%rdx
  800420813a:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208141:	00 00 00 
  8004208144:	48 8b 08             	mov    (%rax),%rcx
  8004208147:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420814a:	48 98                	cltq   
  800420814c:	48 83 c0 01          	add    $0x1,%rax
  8004208150:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208157:	48 01 c8             	add    %rcx,%rax
  800420815a:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
void env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++)
  8004208161:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004208165:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420816c:	7e 8a                	jle    80042080f8 <env_init+0x11>
	{
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i + 1];
	}
	envs[NENV - 1].env_link = NULL;
  800420816e:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208175:	00 00 00 
  8004208178:	48 8b 00             	mov    (%rax),%rax
  800420817b:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208181:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208188:	00 00 00 00 
	env_free_list = &envs[0];
  800420818c:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  8004208193:	00 00 00 
  8004208196:	48 8b 10             	mov    (%rax),%rdx
  8004208199:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  80042081a0:	00 00 00 
  80042081a3:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  80042081a6:	48 b8 b4 81 20 04 80 	movabs $0x80042081b4,%rax
  80042081ad:	00 00 00 
  80042081b0:	ff d0                	callq  *%rax
}
  80042081b2:	c9                   	leaveq 
  80042081b3:	c3                   	retq   

00000080042081b4 <env_init_percpu>:

// Load GDT and segment descriptors.
void env_init_percpu(void)
{
  80042081b4:	55                   	push   %rbp
  80042081b5:	48 89 e5             	mov    %rsp,%rbp
  80042081b8:	53                   	push   %rbx
  80042081b9:	48 83 ec 10          	sub    $0x10,%rsp
  80042081bd:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  80042081c4:	00 00 00 
  80042081c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  80042081cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081cf:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" ::"a"(GD_UD | 3));
  80042081d2:	b8 23 00 00 00       	mov    $0x23,%eax
  80042081d7:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" ::"a"(GD_UD | 3));
  80042081d9:	b8 23 00 00 00       	mov    $0x23,%eax
  80042081de:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" ::"a"(GD_KD));
  80042081e0:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081e5:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" ::"a"(GD_KD));
  80042081e7:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081ec:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" ::"a"(GD_KD));
  80042081ee:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081f3:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" ::"b"(GD_KT)
  80042081f5:	b8 08 00 00 00       	mov    $0x8,%eax
  80042081fa:	89 c3                	mov    %eax,%ebx
  80042081fc:	53                   	push   %rbx
  80042081fd:	48 b8 0a 82 20 04 80 	movabs $0x800420820a,%rax
  8004208204:	00 00 00 
  8004208207:	50                   	push   %rax
  8004208208:	48 cb                	lretq  
  800420820a:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004208210:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  8004208214:	0f 00 d0             	lldt   %ax
				 : "cc", "memory");
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208217:	48 83 c4 10          	add    $0x10,%rsp
  800420821b:	5b                   	pop    %rbx
  800420821c:	5d                   	pop    %rbp
  800420821d:	c3                   	retq   

000000800420821e <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  800420821e:	55                   	push   %rbp
  800420821f:	48 89 e5             	mov    %rsp,%rbp
  8004208222:	48 83 ec 20          	sub    $0x20,%rsp
  8004208226:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  800420822a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208231:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  8004208232:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208237:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420823e:	00 00 00 
  8004208241:	ff d0                	callq  *%rax
  8004208243:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208247:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420824c:	75 0a                	jne    8004208258 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  800420824e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208253:	e9 bc 00 00 00       	jmpq   8004208314 <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref += 1;
  8004208258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420825c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208260:	8d 50 01             	lea    0x1(%rax),%edx
  8004208263:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208267:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e = page2kva(p);
  800420826b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420826f:	48 89 c7             	mov    %rax,%rdi
  8004208272:	48 b8 a0 7e 20 04 80 	movabs $0x8004207ea0,%rax
  8004208279:	00 00 00 
  800420827c:	ff d0                	callq  *%rax
  800420827e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208282:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3 = page2pa(p);
  8004208289:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420828d:	48 89 c7             	mov    %rax,%rdi
  8004208290:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004208297:	00 00 00 
  800420829a:	ff d0                	callq  *%rax
  800420829c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042082a0:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  80042082a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082ab:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082b2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042082b7:	be 00 00 00 00       	mov    $0x0,%esi
  80042082bc:	48 89 c7             	mov    %rax,%rdi
  80042082bf:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042082c6:	00 00 00 
  80042082c9:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  80042082cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082cf:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082d6:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042082da:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  80042082e1:	00 00 00 
  80042082e4:	48 8b 00             	mov    (%rax),%rax
  80042082e7:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042082eb:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  80042082ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082f2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082f9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  80042082fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208301:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208308:	48 83 c8 05          	or     $0x5,%rax
  800420830c:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  800420830f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208314:	c9                   	leaveq 
  8004208315:	c3                   	retq   

0000008004208316 <env_alloc>:
//	-E_NO_FREE_ENV if all NENVS environments are allocated
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208316:	55                   	push   %rbp
  8004208317:	48 89 e5             	mov    %rsp,%rbp
  800420831a:	48 83 ec 30          	sub    $0x30,%rsp
  800420831e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208322:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208325:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  800420832c:	00 00 00 
  800420832f:	48 8b 00             	mov    (%rax),%rax
  8004208332:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208336:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420833b:	75 0a                	jne    8004208347 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  800420833d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208342:	e9 5b 01 00 00       	jmpq   80042084a2 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420834b:	48 89 c7             	mov    %rax,%rdi
  800420834e:	48 b8 1e 82 20 04 80 	movabs $0x800420821e,%rax
  8004208355:	00 00 00 
  8004208358:	ff d0                	callq  *%rax
  800420835a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420835d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208361:	79 08                	jns    800420836b <env_alloc+0x55>
		return r;
  8004208363:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208366:	e9 37 01 00 00       	jmpq   80042084a2 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  800420836b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420836f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208375:	05 00 10 00 00       	add    $0x1000,%eax
  800420837a:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  800420837f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0) // Don't create a negative env_id.
  8004208382:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208386:	7f 07                	jg     800420838f <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  8004208388:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  800420838f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208393:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420839a:	00 00 00 
  800420839d:	48 8b 00             	mov    (%rax),%rax
  80042083a0:	48 29 c2             	sub    %rax,%rdx
  80042083a3:	48 89 d0             	mov    %rdx,%rax
  80042083a6:	48 c1 f8 03          	sar    $0x3,%rax
  80042083aa:	48 89 c2             	mov    %rax,%rdx
  80042083ad:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042083b4:	fa a4 4f 
  80042083b7:	48 0f af c2          	imul   %rdx,%rax
  80042083bb:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042083be:	89 c2                	mov    %eax,%edx
  80042083c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083c4:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  80042083ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083ce:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042083d1:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  80042083d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083db:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  80042083e2:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  80042083e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083e9:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042083f0:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042083f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083f7:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042083fc:	be 00 00 00 00       	mov    $0x0,%esi
  8004208401:	48 89 c7             	mov    %rax,%rdi
  8004208404:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800420840b:	00 00 00 
  800420840e:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208410:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208414:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  800420841b:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  800420841d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208421:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208427:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420842b:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208432:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208438:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  800420843d:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208444:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208448:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  800420844f:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208455:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  800420845c:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208464:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  800420846b:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  800420846f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208473:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  800420847a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420847e:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208485:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  800420848c:	00 00 00 
  800420848f:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208492:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208496:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420849a:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  800420849d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042084a2:	c9                   	leaveq 
  80042084a3:	c3                   	retq   

00000080042084a4 <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  80042084a4:	55                   	push   %rbp
  80042084a5:	48 89 e5             	mov    %rsp,%rbp
  80042084a8:	48 83 ec 40          	sub    $0x40,%rsp
  80042084ac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042084b0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042084b4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t *)va + len;
  80042084b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042084c0:	48 01 d0             	add    %rdx,%rax
  80042084c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva)
  80042084c7:	e9 c8 00 00 00       	jmpq   8004208594 <region_alloc+0xf0>
	{
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  80042084cc:	bf 00 00 00 00       	mov    $0x0,%edi
  80042084d1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042084d8:	00 00 00 
  80042084db:	ff d0                	callq  *%rax
  80042084dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042084e1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042084e6:	75 30                	jne    8004208518 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  80042084e8:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  80042084ed:	48 ba e0 9c 21 04 80 	movabs $0x8004219ce0,%rdx
  80042084f4:	00 00 00 
  80042084f7:	be bb 01 00 00       	mov    $0x1bb,%esi
  80042084fc:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208503:	00 00 00 
  8004208506:	b8 00 00 00 00       	mov    $0x0,%eax
  800420850b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208512:	00 00 00 
  8004208515:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P | PTE_W | PTE_U)) < 0)
  8004208518:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420851c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208523:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208527:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420852b:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208530:	48 89 c7             	mov    %rax,%rdi
  8004208533:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420853a:	00 00 00 
  800420853d:	ff d0                	callq  *%rax
  800420853f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208542:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208546:	79 30                	jns    8004208578 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208548:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420854b:	89 c1                	mov    %eax,%ecx
  800420854d:	48 ba 18 9d 21 04 80 	movabs $0x8004219d18,%rdx
  8004208554:	00 00 00 
  8004208557:	be bf 01 00 00       	mov    $0x1bf,%esi
  800420855c:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208563:	00 00 00 
  8004208566:	b8 00 00 00 00       	mov    $0x0,%eax
  800420856b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208572:	00 00 00 
  8004208575:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t *)va + PGSIZE, PGSIZE);
  8004208578:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420857c:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208582:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420858a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208590:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t *)va + len;

	while (va < endva)
  8004208594:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208598:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420859c:	0f 82 2a ff ff ff    	jb     80042084cc <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P | PTE_W | PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t *)va + PGSIZE, PGSIZE);
	}
}
  80042085a2:	c9                   	leaveq 
  80042085a3:	c3                   	retq   

00000080042085a4 <load_icode>:
// Finally, this function maps one page for the program's initial stack.
//
// load_icode panics if it encounters problems.
//
void load_icode(struct Env *e, uint8_t *binary)
{
  80042085a4:	55                   	push   %rbp
  80042085a5:	48 89 e5             	mov    %rsp,%rbp
  80042085a8:	53                   	push   %rbx
  80042085a9:	48 83 ec 78          	sub    $0x78,%rsp
  80042085ad:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  80042085b1:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  80042085b5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042085b9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC)
  80042085bd:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042085c2:	0f 84 6f 03 00 00    	je     8004208937 <load_icode+0x393>
  80042085c8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042085cc:	8b 00                	mov    (%rax),%eax
  80042085ce:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  80042085d3:	0f 85 5e 03 00 00    	jne    8004208937 <load_icode+0x393>
	{
		lcr3(PADDR((uint64_t)e->env_pml4e));
  80042085d9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042085dd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042085e4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042085e8:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042085ef:	00 00 00 
  80042085f2:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042085f6:	77 32                	ja     800420862a <load_icode+0x86>
  80042085f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085fc:	48 89 c1             	mov    %rax,%rcx
  80042085ff:	48 ba 40 9d 21 04 80 	movabs $0x8004219d40,%rdx
  8004208606:	00 00 00 
  8004208609:	be e1 01 00 00       	mov    $0x1e1,%esi
  800420860e:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208615:	00 00 00 
  8004208618:	b8 00 00 00 00       	mov    $0x0,%eax
  800420861d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208624:	00 00 00 
  8004208627:	41 ff d0             	callq  *%r8
  800420862a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208631:	ff ff ff 
  8004208634:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208638:	48 01 d0             	add    %rdx,%rax
  800420863b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420863f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208643:	0f 22 d8             	mov    %rax,%cr3
		ph = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208646:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420864a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800420864e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208652:	48 01 d0             	add    %rdx,%rax
  8004208655:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208659:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420865d:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208661:	0f b7 c0             	movzwl %ax,%eax
  8004208664:	48 c1 e0 03          	shl    $0x3,%rax
  8004208668:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420866f:	00 
  8004208670:	48 29 c2             	sub    %rax,%rdx
  8004208673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208677:	48 01 d0             	add    %rdx,%rax
  800420867a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for (; ph < eph; ph++)
  800420867e:	e9 bd 00 00 00       	jmpq   8004208740 <load_icode+0x19c>
		{
			if (ph->p_type == ELF_PROG_LOAD)
  8004208683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208687:	8b 00                	mov    (%rax),%eax
  8004208689:	83 f8 01             	cmp    $0x1,%eax
  800420868c:	0f 85 a9 00 00 00    	jne    800420873b <load_icode+0x197>
			{
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208696:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420869a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420869e:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042086a2:	48 89 c1             	mov    %rax,%rcx
  80042086a5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042086a9:	48 89 ce             	mov    %rcx,%rsi
  80042086ac:	48 89 c7             	mov    %rax,%rdi
  80042086af:	48 b8 a4 84 20 04 80 	movabs $0x80042084a4,%rax
  80042086b6:	00 00 00 
  80042086b9:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  80042086bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086bf:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042086c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086c7:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042086cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042086cf:	48 01 c1             	add    %rax,%rcx
  80042086d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086d6:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042086da:	48 89 ce             	mov    %rcx,%rsi
  80042086dd:	48 89 c7             	mov    %rax,%rdi
  80042086e0:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  80042086e7:	00 00 00 
  80042086ea:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz)
  80042086ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086f0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042086f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086f8:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042086fc:	48 39 c2             	cmp    %rax,%rdx
  80042086ff:	73 3a                	jae    800420873b <load_icode+0x197>
				{
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz - ph->p_filesz);
  8004208701:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208705:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420870d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208711:	48 29 c2             	sub    %rax,%rdx
  8004208714:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208718:	48 8b 48 10          	mov    0x10(%rax),%rcx
  800420871c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208720:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208724:	48 01 c8             	add    %rcx,%rax
  8004208727:	be 00 00 00 00       	mov    $0x0,%esi
  800420872c:	48 89 c7             	mov    %rax,%rdi
  800420872f:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  8004208736:	00 00 00 
  8004208739:	ff d0                	callq  *%rax
	if (elf && elf->e_magic == ELF_MAGIC)
	{
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for (; ph < eph; ph++)
  800420873b:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208740:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208744:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208748:	0f 82 35 ff ff ff    	jb     8004208683 <load_icode+0xdf>
				{
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz - ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void *)(USTACKTOP - PGSIZE), PGSIZE);
  800420874e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208752:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208757:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  800420875c:	48 89 c7             	mov    %rax,%rdi
  800420875f:	48 b8 a4 84 20 04 80 	movabs $0x80042084a4,%rax
  8004208766:	00 00 00 
  8004208769:	ff d0                	callq  *%rax
		e->env_tf.tf_rip = elf->e_entry;
  800420876b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420876f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208773:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208777:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp = USTACKTOP; //keeping stack 8 byte aligned
  800420877e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208782:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208787:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  800420878e:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208795:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208796:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420879a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420879e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087a2:	48 01 d0             	add    %rdx,%rax
  80042087a5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  80042087a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ad:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042087b1:	0f b7 c0             	movzwl %ax,%eax
  80042087b4:	48 c1 e0 06          	shl    $0x6,%rax
  80042087b8:	48 89 c2             	mov    %rax,%rdx
  80042087bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087bf:	48 01 d0             	add    %rdx,%rax
  80042087c2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr *esh = sh + elf->e_shnum;
  80042087c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ca:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042087ce:	0f b7 c0             	movzwl %ax,%eax
  80042087d1:	48 c1 e0 06          	shl    $0x6,%rax
  80042087d5:	48 89 c2             	mov    %rax,%rdx
  80042087d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087dc:	48 01 d0             	add    %rdx,%rax
  80042087df:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for (; sh < esh; sh++)
  80042087e3:	e9 27 01 00 00       	jmpq   800420890f <load_icode+0x36b>
		{
			char *name = (char *)((uint8_t *)elf + shstr_tab->sh_offset) + sh->sh_name;
  80042087e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042087ec:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042087f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087f4:	8b 00                	mov    (%rax),%eax
  80042087f6:	89 c0                	mov    %eax,%eax
  80042087f8:	48 01 c2             	add    %rax,%rdx
  80042087fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ff:	48 01 d0             	add    %rdx,%rax
  8004208802:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if (!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev") || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame") || !strcmp(name, ".debug_str"))
  8004208806:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420880a:	48 be 64 9d 21 04 80 	movabs $0x8004219d64,%rsi
  8004208811:	00 00 00 
  8004208814:	48 89 c7             	mov    %rax,%rdi
  8004208817:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  800420881e:	00 00 00 
  8004208821:	ff d0                	callq  *%rax
  8004208823:	85 c0                	test   %eax,%eax
  8004208825:	0f 84 84 00 00 00    	je     80042088af <load_icode+0x30b>
  800420882b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420882f:	48 be 70 9d 21 04 80 	movabs $0x8004219d70,%rsi
  8004208836:	00 00 00 
  8004208839:	48 89 c7             	mov    %rax,%rdi
  800420883c:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004208843:	00 00 00 
  8004208846:	ff d0                	callq  *%rax
  8004208848:	85 c0                	test   %eax,%eax
  800420884a:	74 63                	je     80042088af <load_icode+0x30b>
  800420884c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208850:	48 be 7e 9d 21 04 80 	movabs $0x8004219d7e,%rsi
  8004208857:	00 00 00 
  800420885a:	48 89 c7             	mov    %rax,%rdi
  800420885d:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004208864:	00 00 00 
  8004208867:	ff d0                	callq  *%rax
  8004208869:	85 c0                	test   %eax,%eax
  800420886b:	74 42                	je     80042088af <load_icode+0x30b>
  800420886d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208871:	48 be 8a 9d 21 04 80 	movabs $0x8004219d8a,%rsi
  8004208878:	00 00 00 
  800420887b:	48 89 c7             	mov    %rax,%rdi
  800420887e:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004208885:	00 00 00 
  8004208888:	ff d0                	callq  *%rax
  800420888a:	85 c0                	test   %eax,%eax
  800420888c:	74 21                	je     80042088af <load_icode+0x30b>
  800420888e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208892:	48 be 94 9d 21 04 80 	movabs $0x8004219d94,%rsi
  8004208899:	00 00 00 
  800420889c:	48 89 c7             	mov    %rax,%rdi
  800420889f:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  80042088a6:	00 00 00 
  80042088a9:	ff d0                	callq  *%rax
  80042088ab:	85 c0                	test   %eax,%eax
  80042088ad:	75 5b                	jne    800420890a <load_icode+0x366>
			{
				region_alloc(e, (void *)debug_address, sh->sh_size);
  80042088af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088b3:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042088b7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  80042088bb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042088bf:	48 89 ce             	mov    %rcx,%rsi
  80042088c2:	48 89 c7             	mov    %rax,%rdi
  80042088c5:	48 b8 a4 84 20 04 80 	movabs $0x80042084a4,%rax
  80042088cc:	00 00 00 
  80042088cf:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  80042088d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088d5:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042088d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088dd:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042088e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042088e5:	48 01 c1             	add    %rax,%rcx
  80042088e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042088ec:	48 89 ce             	mov    %rcx,%rsi
  80042088ef:	48 89 c7             	mov    %rax,%rdi
  80042088f2:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  80042088f9:	00 00 00 
  80042088fc:	ff d0                	callq  *%rax
					   sh->sh_size);
				debug_address += sh->sh_size;
  80042088fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208902:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208906:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr *esh = sh + elf->e_shnum;
		for (; sh < esh; sh++)
  800420890a:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  800420890f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208913:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208917:	0f 82 cb fe ff ff    	jb     80042087e8 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
					   sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  800420891d:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004208924:	00 00 00 
  8004208927:	48 8b 00             	mov    (%rax),%rax
  800420892a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420892e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208932:	0f 22 d8             	mov    %rax,%cr3
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC)
	{
  8004208935:	eb 2a                	jmp    8004208961 <load_icode+0x3bd>
		}
		lcr3(boot_cr3);
	}
	else
	{
		panic("Invalid Binary");
  8004208937:	48 ba 9f 9d 21 04 80 	movabs $0x8004219d9f,%rdx
  800420893e:	00 00 00 
  8004208941:	be 07 02 00 00       	mov    $0x207,%esi
  8004208946:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  800420894d:	00 00 00 
  8004208950:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208955:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420895c:	00 00 00 
  800420895f:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208961:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208965:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208969:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208970:	48 83 c4 78          	add    $0x78,%rsp
  8004208974:	5b                   	pop    %rbx
  8004208975:	5d                   	pop    %rbp
  8004208976:	c3                   	retq   

0000008004208977 <env_create>:
// This function is ONLY called during kernel initialization,
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void env_create(uint8_t *binary, enum EnvType type)
{
  8004208977:	55                   	push   %rbp
  8004208978:	48 89 e5             	mov    %rsp,%rbp
  800420897b:	48 83 ec 20          	sub    $0x20,%rsp
  800420897f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208983:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208986:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420898a:	be 00 00 00 00       	mov    $0x0,%esi
  800420898f:	48 89 c7             	mov    %rax,%rdi
  8004208992:	48 b8 16 83 20 04 80 	movabs $0x8004208316,%rax
  8004208999:	00 00 00 
  800420899c:	ff d0                	callq  *%rax
  800420899e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042089a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089a5:	79 30                	jns    80042089d7 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  80042089a7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042089aa:	89 c1                	mov    %eax,%ecx
  80042089ac:	48 ba b0 9d 21 04 80 	movabs $0x8004219db0,%rdx
  80042089b3:	00 00 00 
  80042089b6:	be 1a 02 00 00       	mov    $0x21a,%esi
  80042089bb:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  80042089c2:	00 00 00 
  80042089c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042089ca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042089d1:	00 00 00 
  80042089d4:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  80042089d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042089df:	48 89 d6             	mov    %rdx,%rsi
  80042089e2:	48 89 c7             	mov    %rax,%rdi
  80042089e5:	48 b8 a4 85 20 04 80 	movabs $0x80042085a4,%rax
  80042089ec:	00 00 00 
  80042089ef:	ff d0                	callq  *%rax
	e->env_type = type;
  80042089f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089f5:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042089f8:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  80042089fe:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004208a02:	75 19                	jne    8004208a1d <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  8004208a04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a08:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208a0c:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  8004208a13:	80 ce 30             	or     $0x30,%dh
  8004208a16:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004208a1d:	c9                   	leaveq 
  8004208a1e:	c3                   	retq   

0000008004208a1f <env_free>:

//
// Frees env e and all memory it uses.
//
void env_free(struct Env *e)
{
  8004208a1f:	55                   	push   %rbp
  8004208a20:	48 89 e5             	mov    %rsp,%rbp
  8004208a23:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004208a2a:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004208a31:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208a38:	00 00 00 
  8004208a3b:	ff d0                	callq  *%rax
  8004208a3d:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208a44:	00 00 00 
  8004208a47:	48 98                	cltq   
  8004208a49:	48 c1 e0 03          	shl    $0x3,%rax
  8004208a4d:	48 89 c1             	mov    %rax,%rcx
  8004208a50:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208a54:	48 01 c8             	add    %rcx,%rax
  8004208a57:	48 01 d0             	add    %rdx,%rax
  8004208a5a:	48 83 c0 08          	add    $0x8,%rax
  8004208a5e:	48 8b 00             	mov    (%rax),%rax
  8004208a61:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  8004208a68:	75 18                	jne    8004208a82 <env_free+0x63>
		lcr3(boot_cr3);
  8004208a6a:	48 b8 e0 b5 69 04 80 	movabs $0x800469b5e0,%rax
  8004208a71:	00 00 00 
  8004208a74:	48 8b 00             	mov    (%rax),%rax
  8004208a77:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004208a7b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208a7f:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  8004208a82:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208a89:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208a90:	48 8b 00             	mov    (%rax),%rax
  8004208a93:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208a99:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208a9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208aa1:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208aa5:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004208aa8:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004208aab:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208ab2:	00 00 00 
  8004208ab5:	48 8b 00             	mov    (%rax),%rax
  8004208ab8:	48 39 c2             	cmp    %rax,%rdx
  8004208abb:	72 32                	jb     8004208aef <env_free+0xd0>
  8004208abd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208ac1:	48 89 c1             	mov    %rax,%rcx
  8004208ac4:	48 ba b8 9c 21 04 80 	movabs $0x8004219cb8,%rdx
  8004208acb:	00 00 00 
  8004208ace:	be 3f 02 00 00       	mov    $0x23f,%esi
  8004208ad3:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208ada:	00 00 00 
  8004208add:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ae2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208ae9:	00 00 00 
  8004208aec:	41 ff d0             	callq  *%r8
  8004208aef:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208af6:	00 00 00 
  8004208af9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208afd:	48 01 d0             	add    %rdx,%rax
  8004208b00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for (pdpe_index = 0; pdpe_index <= 3; pdpe_index++)
  8004208b04:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004208b0b:	00 
  8004208b0c:	e9 ab 02 00 00       	jmpq   8004208dbc <env_free+0x39d>
	{
		if (!(env_pdpe[pdpe_index] & PTE_P))
  8004208b11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208b15:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b1c:	00 
  8004208b1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b21:	48 01 d0             	add    %rdx,%rax
  8004208b24:	48 8b 00             	mov    (%rax),%rax
  8004208b27:	83 e0 01             	and    $0x1,%eax
  8004208b2a:	48 85 c0             	test   %rax,%rax
  8004208b2d:	75 05                	jne    8004208b34 <env_free+0x115>
			continue;
  8004208b2f:	e9 83 02 00 00       	jmpq   8004208db7 <env_free+0x398>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  8004208b34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208b38:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b3f:	00 
  8004208b40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b44:	48 01 d0             	add    %rdx,%rax
  8004208b47:	48 8b 00             	mov    (%rax),%rax
  8004208b4a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b50:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208b54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b58:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208b5c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004208b5f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004208b62:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208b69:	00 00 00 
  8004208b6c:	48 8b 00             	mov    (%rax),%rax
  8004208b6f:	48 39 c2             	cmp    %rax,%rdx
  8004208b72:	72 32                	jb     8004208ba6 <env_free+0x187>
  8004208b74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b78:	48 89 c1             	mov    %rax,%rcx
  8004208b7b:	48 ba b8 9c 21 04 80 	movabs $0x8004219cb8,%rdx
  8004208b82:	00 00 00 
  8004208b85:	be 48 02 00 00       	mov    $0x248,%esi
  8004208b8a:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208b91:	00 00 00 
  8004208b94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b99:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208ba0:	00 00 00 
  8004208ba3:	41 ff d0             	callq  *%r8
  8004208ba6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208bad:	00 00 00 
  8004208bb0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208bb4:	48 01 d0             	add    %rdx,%rax
  8004208bb7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit = pdpe_index == 3 ? PDX(UTOP) : PDX(0xFFFFFFFF);
  8004208bbb:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208bc0:	75 07                	jne    8004208bc9 <env_free+0x1aa>
  8004208bc2:	b8 04 00 00 00       	mov    $0x4,%eax
  8004208bc7:	eb 05                	jmp    8004208bce <env_free+0x1af>
  8004208bc9:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004208bce:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++)
  8004208bd1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208bd8:	00 
  8004208bd9:	e9 6e 01 00 00       	jmpq   8004208d4c <env_free+0x32d>
		{

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004208bde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208be2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208be9:	00 
  8004208bea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bee:	48 01 d0             	add    %rdx,%rax
  8004208bf1:	48 8b 00             	mov    (%rax),%rax
  8004208bf4:	83 e0 01             	and    $0x1,%eax
  8004208bf7:	48 85 c0             	test   %rax,%rax
  8004208bfa:	75 05                	jne    8004208c01 <env_free+0x1e2>
				continue;
  8004208bfc:	e9 46 01 00 00       	jmpq   8004208d47 <env_free+0x328>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004208c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c0c:	00 
  8004208c0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208c11:	48 01 d0             	add    %rdx,%rax
  8004208c14:	48 8b 00             	mov    (%rax),%rax
  8004208c17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208c1d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t *)KADDR(pa);
  8004208c21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208c25:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004208c29:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c2d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208c31:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004208c34:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004208c37:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004208c3e:	00 00 00 
  8004208c41:	48 8b 00             	mov    (%rax),%rax
  8004208c44:	48 39 c2             	cmp    %rax,%rdx
  8004208c47:	72 32                	jb     8004208c7b <env_free+0x25c>
  8004208c49:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c4d:	48 89 c1             	mov    %rax,%rcx
  8004208c50:	48 ba b8 9c 21 04 80 	movabs $0x8004219cb8,%rdx
  8004208c57:	00 00 00 
  8004208c5a:	be 53 02 00 00       	mov    $0x253,%esi
  8004208c5f:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004208c66:	00 00 00 
  8004208c69:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c6e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208c75:	00 00 00 
  8004208c78:	41 ff d0             	callq  *%r8
  8004208c7b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208c82:	00 00 00 
  8004208c85:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c89:	48 01 d0             	add    %rdx,%rax
  8004208c8c:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++)
  8004208c90:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004208c97:	00 
  8004208c98:	eb 67                	jmp    8004208d01 <env_free+0x2e2>
			{
				if (pt[pteno] & PTE_P)
  8004208c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c9e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ca5:	00 
  8004208ca6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004208caa:	48 01 d0             	add    %rdx,%rax
  8004208cad:	48 8b 00             	mov    (%rax),%rax
  8004208cb0:	83 e0 01             	and    $0x1,%eax
  8004208cb3:	48 85 c0             	test   %rax,%rax
  8004208cb6:	74 44                	je     8004208cfc <env_free+0x2dd>
				{
					page_remove(e->env_pml4e, PGADDR((uint64_t)0, pdpe_index, pdeno, pteno, 0));
  8004208cb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cbc:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004208cc0:	48 89 c2             	mov    %rax,%rdx
  8004208cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208cc7:	48 c1 e0 15          	shl    $0x15,%rax
  8004208ccb:	48 09 c2             	or     %rax,%rdx
  8004208cce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208cd2:	48 c1 e0 0c          	shl    $0xc,%rax
  8004208cd6:	48 09 d0             	or     %rdx,%rax
  8004208cd9:	48 89 c2             	mov    %rax,%rdx
  8004208cdc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208ce3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208cea:	48 89 d6             	mov    %rdx,%rsi
  8004208ced:	48 89 c7             	mov    %rax,%rdi
  8004208cf0:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004208cf7:	00 00 00 
  8004208cfa:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t *)KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++)
  8004208cfc:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004208d01:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004208d08:	00 
  8004208d09:	76 8f                	jbe    8004208c9a <env_free+0x27b>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0, pdpe_index, pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004208d0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208d0f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d16:	00 
  8004208d17:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208d1b:	48 01 d0             	add    %rdx,%rax
  8004208d1e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004208d25:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d29:	48 89 c7             	mov    %rax,%rdi
  8004208d2c:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d33:	00 00 00 
  8004208d36:	ff d0                	callq  *%rax
  8004208d38:	48 89 c7             	mov    %rax,%rdi
  8004208d3b:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d42:	00 00 00 
  8004208d45:	ff d0                	callq  *%rax
		if (!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit = pdpe_index == 3 ? PDX(UTOP) : PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++)
  8004208d47:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004208d4c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004208d4f:	48 98                	cltq   
  8004208d51:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208d55:	0f 87 83 fe ff ff    	ja     8004208bde <env_free+0x1bf>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  8004208d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d66:	00 
  8004208d67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d6b:	48 01 d0             	add    %rdx,%rax
  8004208d6e:	48 8b 00             	mov    (%rax),%rax
  8004208d71:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d77:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  8004208d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d7f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d86:	00 
  8004208d87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d8b:	48 01 d0             	add    %rdx,%rax
  8004208d8e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004208d95:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d99:	48 89 c7             	mov    %rax,%rdi
  8004208d9c:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208da3:	00 00 00 
  8004208da6:	ff d0                	callq  *%rax
  8004208da8:	48 89 c7             	mov    %rax,%rdi
  8004208dab:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208db2:	00 00 00 
  8004208db5:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for (pdpe_index = 0; pdpe_index <= 3; pdpe_index++)
  8004208db7:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004208dbc:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208dc1:	0f 86 4a fd ff ff    	jbe    8004208b11 <env_free+0xf2>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  8004208dc7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dce:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208dd5:	48 8b 00             	mov    (%rax),%rax
  8004208dd8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208dde:	48 89 c7             	mov    %rax,%rdi
  8004208de1:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208de8:	00 00 00 
  8004208deb:	ff d0                	callq  *%rax
  8004208ded:	48 89 c7             	mov    %rax,%rdi
  8004208df0:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208df7:	00 00 00 
  8004208dfa:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004208dfc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e03:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208e0a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004208e11:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e18:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208e1f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004208e23:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e2a:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208e31:	00 00 00 00 
	e->env_cr3 = 0;
  8004208e35:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e3c:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208e43:	00 00 00 00 
	page_decref(pa2page(pa));
  8004208e47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e4b:	48 89 c7             	mov    %rax,%rdi
  8004208e4e:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208e55:	00 00 00 
  8004208e58:	ff d0                	callq  *%rax
  8004208e5a:	48 89 c7             	mov    %rax,%rdi
  8004208e5d:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208e64:	00 00 00 
  8004208e67:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208e69:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e70:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208e77:	00 00 00 
	e->env_link = env_free_list;
  8004208e7a:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208e81:	00 00 00 
  8004208e84:	48 8b 10             	mov    (%rax),%rdx
  8004208e87:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e8e:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004208e95:	48 b8 60 c2 49 04 80 	movabs $0x800449c260,%rax
  8004208e9c:	00 00 00 
  8004208e9f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004208ea6:	48 89 10             	mov    %rdx,(%rax)
}
  8004208ea9:	c9                   	leaveq 
  8004208eaa:	c3                   	retq   

0000008004208eab <env_destroy>:
// Frees environment e.
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void env_destroy(struct Env *e)
{
  8004208eab:	55                   	push   %rbp
  8004208eac:	48 89 e5             	mov    %rsp,%rbp
  8004208eaf:	48 83 ec 10          	sub    $0x10,%rsp
  8004208eb3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e)
  8004208eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ebb:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208ec1:	83 f8 03             	cmp    $0x3,%eax
  8004208ec4:	75 49                	jne    8004208f0f <env_destroy+0x64>
  8004208ec6:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208ecd:	00 00 00 
  8004208ed0:	ff d0                	callq  *%rax
  8004208ed2:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208ed9:	00 00 00 
  8004208edc:	48 98                	cltq   
  8004208ede:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ee2:	48 89 c1             	mov    %rax,%rcx
  8004208ee5:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208ee9:	48 01 c8             	add    %rcx,%rax
  8004208eec:	48 01 d0             	add    %rdx,%rax
  8004208eef:	48 83 c0 08          	add    $0x8,%rax
  8004208ef3:	48 8b 00             	mov    (%rax),%rax
  8004208ef6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208efa:	74 13                	je     8004208f0f <env_destroy+0x64>
	{
		e->env_status = ENV_DYING;
  8004208efc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208f00:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004208f07:	00 00 00 
		return;
  8004208f0a:	e9 89 00 00 00       	jmpq   8004208f98 <env_destroy+0xed>
	}

	env_free(e);
  8004208f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208f13:	48 89 c7             	mov    %rax,%rdi
  8004208f16:	48 b8 1f 8a 20 04 80 	movabs $0x8004208a1f,%rax
  8004208f1d:	00 00 00 
  8004208f20:	ff d0                	callq  *%rax
	if (curenv == e)
  8004208f22:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208f29:	00 00 00 
  8004208f2c:	ff d0                	callq  *%rax
  8004208f2e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208f35:	00 00 00 
  8004208f38:	48 98                	cltq   
  8004208f3a:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f3e:	48 89 c1             	mov    %rax,%rcx
  8004208f41:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f45:	48 01 c8             	add    %rcx,%rax
  8004208f48:	48 01 d0             	add    %rdx,%rax
  8004208f4b:	48 83 c0 08          	add    $0x8,%rax
  8004208f4f:	48 8b 00             	mov    (%rax),%rax
  8004208f52:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208f56:	75 40                	jne    8004208f98 <env_destroy+0xed>
	{
		curenv = NULL;
  8004208f58:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208f5f:	00 00 00 
  8004208f62:	ff d0                	callq  *%rax
  8004208f64:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208f6b:	00 00 00 
  8004208f6e:	48 98                	cltq   
  8004208f70:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f74:	48 89 c1             	mov    %rax,%rcx
  8004208f77:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f7b:	48 01 c8             	add    %rcx,%rax
  8004208f7e:	48 01 d0             	add    %rdx,%rax
  8004208f81:	48 83 c0 08          	add    $0x8,%rax
  8004208f85:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004208f8c:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  8004208f93:	00 00 00 
  8004208f96:	ff d0                	callq  *%rax
	}
}
  8004208f98:	c9                   	leaveq 
  8004208f99:	c3                   	retq   

0000008004208f9a <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
//
// This function does not return.
//
void env_pop_tf(struct Trapframe *tf)
{
  8004208f9a:	55                   	push   %rbp
  8004208f9b:	48 89 e5             	mov    %rsp,%rbp
  8004208f9e:	53                   	push   %rbx
  8004208f9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004208fa3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  8004208fa7:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208fae:	00 00 00 
  8004208fb1:	ff d0                	callq  *%rax
  8004208fb3:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004208fba:	00 00 00 
  8004208fbd:	48 98                	cltq   
  8004208fbf:	48 c1 e0 03          	shl    $0x3,%rax
  8004208fc3:	48 89 c1             	mov    %rax,%rcx
  8004208fc6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208fca:	48 01 c8             	add    %rcx,%rax
  8004208fcd:	48 01 d0             	add    %rdx,%rax
  8004208fd0:	48 83 c0 08          	add    $0x8,%rax
  8004208fd4:	48 8b 18             	mov    (%rax),%rbx
  8004208fd7:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004208fde:	00 00 00 
  8004208fe1:	ff d0                	callq  *%rax
  8004208fe3:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n" POPA
  8004208fe9:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004208fed:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004208ff1:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004208ff6:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004208ffb:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209000:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209005:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  800420900a:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  800420900f:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004209014:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209019:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  800420901e:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004209023:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209028:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  800420902d:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  8004209032:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004209037:	48 83 c4 78          	add    $0x78,%rsp
  800420903b:	8e 04 24             	mov    (%rsp),%es
  800420903e:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  8004209042:	48 83 c4 10          	add    $0x10,%rsp
  8004209046:	48 83 c4 10          	add    $0x10,%rsp
  800420904a:	48 cf                	iretq  
					 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
					 "\tiretq"
					 :
					 : "g"(tf)
					 : "memory");
	panic("iret failed"); /* mostly to placate the compiler */
  800420904c:	48 ba d8 9d 21 04 80 	movabs $0x8004219dd8,%rdx
  8004209053:	00 00 00 
  8004209056:	be a1 02 00 00       	mov    $0x2a1,%esi
  800420905b:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004209062:	00 00 00 
  8004209065:	b8 00 00 00 00       	mov    $0x0,%eax
  800420906a:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004209071:	00 00 00 
  8004209074:	ff d1                	callq  *%rcx

0000008004209076 <env_run>:
//
// This function does not return.
//
// CHANGED FOR LAB 0
void env_run(struct Env *e)
{
  8004209076:	55                   	push   %rbp
  8004209077:	48 89 e5             	mov    %rsp,%rbp
  800420907a:	48 83 ec 20          	sub    $0x20,%rsp
  800420907e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e)
  8004209082:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004209089:	00 00 00 
  800420908c:	ff d0                	callq  *%rax
  800420908e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209095:	00 00 00 
  8004209098:	48 98                	cltq   
  800420909a:	48 c1 e0 03          	shl    $0x3,%rax
  800420909e:	48 89 c1             	mov    %rax,%rcx
  80042090a1:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090a5:	48 01 c8             	add    %rcx,%rax
  80042090a8:	48 01 d0             	add    %rdx,%rax
  80042090ab:	48 83 c0 08          	add    $0x8,%rax
  80042090af:	48 8b 00             	mov    (%rax),%rax
  80042090b2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042090b6:	0f 84 28 01 00 00    	je     80042091e4 <env_run+0x16e>
	{
		if (curenv && curenv->env_status == ENV_RUNNING)
  80042090bc:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  80042090c3:	00 00 00 
  80042090c6:	ff d0                	callq  *%rax
  80042090c8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  80042090cf:	00 00 00 
  80042090d2:	48 98                	cltq   
  80042090d4:	48 c1 e0 03          	shl    $0x3,%rax
  80042090d8:	48 89 c1             	mov    %rax,%rcx
  80042090db:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090df:	48 01 c8             	add    %rcx,%rax
  80042090e2:	48 01 d0             	add    %rdx,%rax
  80042090e5:	48 83 c0 08          	add    $0x8,%rax
  80042090e9:	48 8b 00             	mov    (%rax),%rax
  80042090ec:	48 85 c0             	test   %rax,%rax
  80042090ef:	74 75                	je     8004209166 <env_run+0xf0>
  80042090f1:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  80042090f8:	00 00 00 
  80042090fb:	ff d0                	callq  *%rax
  80042090fd:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209104:	00 00 00 
  8004209107:	48 98                	cltq   
  8004209109:	48 c1 e0 03          	shl    $0x3,%rax
  800420910d:	48 89 c1             	mov    %rax,%rcx
  8004209110:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209114:	48 01 c8             	add    %rcx,%rax
  8004209117:	48 01 d0             	add    %rdx,%rax
  800420911a:	48 83 c0 08          	add    $0x8,%rax
  800420911e:	48 8b 00             	mov    (%rax),%rax
  8004209121:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209127:	83 f8 03             	cmp    $0x3,%eax
  800420912a:	75 3a                	jne    8004209166 <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  800420912c:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004209133:	00 00 00 
  8004209136:	ff d0                	callq  *%rax
  8004209138:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420913f:	00 00 00 
  8004209142:	48 98                	cltq   
  8004209144:	48 c1 e0 03          	shl    $0x3,%rax
  8004209148:	48 89 c1             	mov    %rax,%rcx
  800420914b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420914f:	48 01 c8             	add    %rcx,%rax
  8004209152:	48 01 d0             	add    %rdx,%rax
  8004209155:	48 83 c0 08          	add    $0x8,%rax
  8004209159:	48 8b 00             	mov    (%rax),%rax
  800420915c:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004209163:	00 00 00 
		//cprintf("cpu %d switch from env %d to env %d\n",
		//	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  8004209166:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420916d:	00 00 00 
  8004209170:	ff d0                	callq  *%rax
  8004209172:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004209179:	00 00 00 
  800420917c:	48 98                	cltq   
  800420917e:	48 c1 e0 03          	shl    $0x3,%rax
  8004209182:	48 89 c1             	mov    %rax,%rcx
  8004209185:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209189:	48 01 c8             	add    %rcx,%rax
  800420918c:	48 01 d0             	add    %rdx,%rax
  800420918f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209197:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  800420919a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420919e:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  80042091a5:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs += 1;
  80042091a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091ac:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  80042091b2:	8d 50 01             	lea    0x1(%rax),%edx
  80042091b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091b9:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
		// restore e's address space
		if (e->env_type != ENV_TYPE_GUEST)
  80042091bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091c3:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042091c9:	83 f8 03             	cmp    $0x3,%eax
  80042091cc:	74 16                	je     80042091e4 <env_run+0x16e>
			lcr3(e->env_cr3);
  80042091ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091d2:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042091d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042091dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091e1:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  80042091e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091e8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042091ee:	83 f8 03             	cmp    $0x3,%eax
  80042091f1:	74 35                	je     8004209228 <env_run+0x1b2>
  80042091f3:	48 b9 e4 9d 21 04 80 	movabs $0x8004219de4,%rcx
  80042091fa:	00 00 00 
  80042091fd:	48 ba 01 9e 21 04 80 	movabs $0x8004219e01,%rdx
  8004209204:	00 00 00 
  8004209207:	be c2 02 00 00       	mov    $0x2c2,%esi
  800420920c:	48 bf 07 9d 21 04 80 	movabs $0x8004219d07,%rdi
  8004209213:	00 00 00 
  8004209216:	b8 00 00 00 00       	mov    $0x0,%eax
  800420921b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004209222:	00 00 00 
  8004209225:	41 ff d0             	callq  *%r8
	{
		unlock_kernel();
		env_pop_tf(&e->env_tf);
	}
#else /* VMM_GUEST */
	unlock_kernel();
  8004209228:	48 b8 28 7f 20 04 80 	movabs $0x8004207f28,%rax
  800420922f:	00 00 00 
  8004209232:	ff d0                	callq  *%rax
	env_pop_tf(&e->env_tf);
  8004209234:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209238:	48 89 c7             	mov    %rax,%rdi
  800420923b:	48 b8 9a 8f 20 04 80 	movabs $0x8004208f9a,%rax
  8004209242:	00 00 00 
  8004209245:	ff d0                	callq  *%rax

0000008004209247 <mc146818_read>:
  8004209247:	55                   	push   %rbp
  8004209248:	48 89 e5             	mov    %rsp,%rbp
  800420924b:	48 83 ec 14          	sub    $0x14,%rsp
  800420924f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209252:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209255:	0f b6 c0             	movzbl %al,%eax
  8004209258:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420925f:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209262:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209266:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209269:	ee                   	out    %al,(%dx)
  800420926a:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209271:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209274:	89 c2                	mov    %eax,%edx
  8004209276:	ec                   	in     (%dx),%al
  8004209277:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420927a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420927e:	0f b6 c0             	movzbl %al,%eax
  8004209281:	c9                   	leaveq 
  8004209282:	c3                   	retq   

0000008004209283 <mc146818_write>:
  8004209283:	55                   	push   %rbp
  8004209284:	48 89 e5             	mov    %rsp,%rbp
  8004209287:	48 83 ec 18          	sub    $0x18,%rsp
  800420928b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420928e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209291:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209294:	0f b6 c0             	movzbl %al,%eax
  8004209297:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420929e:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042092a1:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042092a5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092a8:	ee                   	out    %al,(%dx)
  80042092a9:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042092ac:	0f b6 c0             	movzbl %al,%eax
  80042092af:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  80042092b6:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042092b9:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042092bd:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042092c0:	ee                   	out    %al,(%dx)
  80042092c1:	c9                   	leaveq 
  80042092c2:	c3                   	retq   

00000080042092c3 <pic_init>:
  80042092c3:	55                   	push   %rbp
  80042092c4:	48 89 e5             	mov    %rsp,%rbp
  80042092c7:	48 83 ec 70          	sub    $0x70,%rsp
  80042092cb:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  80042092d2:	00 00 00 
  80042092d5:	c6 00 01             	movb   $0x1,(%rax)
  80042092d8:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  80042092df:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042092e3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042092e7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092ea:	ee                   	out    %al,(%dx)
  80042092eb:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042092f2:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042092f6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042092fa:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042092fd:	ee                   	out    %al,(%dx)
  80042092fe:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  8004209305:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  8004209309:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420930d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004209310:	ee                   	out    %al,(%dx)
  8004209311:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  8004209318:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  800420931c:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004209320:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209323:	ee                   	out    %al,(%dx)
  8004209324:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  800420932b:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  800420932f:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004209333:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209336:	ee                   	out    %al,(%dx)
  8004209337:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  800420933e:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209342:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209346:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209349:	ee                   	out    %al,(%dx)
  800420934a:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209351:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209355:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209359:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420935c:	ee                   	out    %al,(%dx)
  800420935d:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209364:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209368:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  800420936c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420936f:	ee                   	out    %al,(%dx)
  8004209370:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209377:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  800420937b:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  800420937f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209382:	ee                   	out    %al,(%dx)
  8004209383:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  800420938a:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  800420938e:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209392:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209395:	ee                   	out    %al,(%dx)
  8004209396:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  800420939d:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  80042093a1:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  80042093a5:	8b 55 ac             	mov    -0x54(%rbp),%edx
  80042093a8:	ee                   	out    %al,(%dx)
  80042093a9:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  80042093b0:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  80042093b4:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  80042093b8:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  80042093bb:	ee                   	out    %al,(%dx)
  80042093bc:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  80042093c3:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  80042093c7:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  80042093cb:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042093ce:	ee                   	out    %al,(%dx)
  80042093cf:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  80042093d6:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  80042093da:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  80042093de:	8b 55 94             	mov    -0x6c(%rbp),%edx
  80042093e1:	ee                   	out    %al,(%dx)
  80042093e2:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093e9:	00 00 00 
  80042093ec:	0f b7 00             	movzwl (%rax),%eax
  80042093ef:	66 83 f8 ff          	cmp    $0xffff,%ax
  80042093f3:	74 1e                	je     8004209413 <pic_init+0x150>
  80042093f5:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093fc:	00 00 00 
  80042093ff:	0f b7 00             	movzwl (%rax),%eax
  8004209402:	0f b7 c0             	movzwl %ax,%eax
  8004209405:	89 c7                	mov    %eax,%edi
  8004209407:	48 b8 15 94 20 04 80 	movabs $0x8004209415,%rax
  800420940e:	00 00 00 
  8004209411:	ff d0                	callq  *%rax
  8004209413:	c9                   	leaveq 
  8004209414:	c3                   	retq   

0000008004209415 <irq_setmask_8259A>:
  8004209415:	55                   	push   %rbp
  8004209416:	48 89 e5             	mov    %rsp,%rbp
  8004209419:	48 83 ec 30          	sub    $0x30,%rsp
  800420941d:	89 f8                	mov    %edi,%eax
  800420941f:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209423:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  800420942a:	00 00 00 
  800420942d:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209431:	66 89 10             	mov    %dx,(%rax)
  8004209434:	48 b8 68 c2 49 04 80 	movabs $0x800449c268,%rax
  800420943b:	00 00 00 
  800420943e:	0f b6 00             	movzbl (%rax),%eax
  8004209441:	83 f0 01             	xor    $0x1,%eax
  8004209444:	84 c0                	test   %al,%al
  8004209446:	74 05                	je     800420944d <irq_setmask_8259A+0x38>
  8004209448:	e9 b7 00 00 00       	jmpq   8004209504 <irq_setmask_8259A+0xef>
  800420944d:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209451:	0f b6 c0             	movzbl %al,%eax
  8004209454:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  800420945b:	88 45 f7             	mov    %al,-0x9(%rbp)
  800420945e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209462:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209465:	ee                   	out    %al,(%dx)
  8004209466:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  800420946a:	66 c1 e8 08          	shr    $0x8,%ax
  800420946e:	0f b6 c0             	movzbl %al,%eax
  8004209471:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209478:	88 45 ef             	mov    %al,-0x11(%rbp)
  800420947b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420947f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209482:	ee                   	out    %al,(%dx)
  8004209483:	48 bf 16 9e 21 04 80 	movabs $0x8004219e16,%rdi
  800420948a:	00 00 00 
  800420948d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209492:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004209499:	00 00 00 
  800420949c:	ff d2                	callq  *%rdx
  800420949e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042094a5:	eb 3c                	jmp    80042094e3 <irq_setmask_8259A+0xce>
  80042094a7:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  80042094ab:	f7 d0                	not    %eax
  80042094ad:	89 c2                	mov    %eax,%edx
  80042094af:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042094b2:	89 c1                	mov    %eax,%ecx
  80042094b4:	d3 fa                	sar    %cl,%edx
  80042094b6:	89 d0                	mov    %edx,%eax
  80042094b8:	83 e0 01             	and    $0x1,%eax
  80042094bb:	85 c0                	test   %eax,%eax
  80042094bd:	74 20                	je     80042094df <irq_setmask_8259A+0xca>
  80042094bf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042094c2:	89 c6                	mov    %eax,%esi
  80042094c4:	48 bf 2a 9e 21 04 80 	movabs $0x8004219e2a,%rdi
  80042094cb:	00 00 00 
  80042094ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094d3:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042094da:	00 00 00 
  80042094dd:	ff d2                	callq  *%rdx
  80042094df:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042094e3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042094e7:	7e be                	jle    80042094a7 <irq_setmask_8259A+0x92>
  80042094e9:	48 bf 2e 9e 21 04 80 	movabs $0x8004219e2e,%rdi
  80042094f0:	00 00 00 
  80042094f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094f8:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042094ff:	00 00 00 
  8004209502:	ff d2                	callq  *%rdx
  8004209504:	c9                   	leaveq 
  8004209505:	c3                   	retq   

0000008004209506 <irq_eoi>:
  8004209506:	55                   	push   %rbp
  8004209507:	48 89 e5             	mov    %rsp,%rbp
  800420950a:	48 83 ec 10          	sub    $0x10,%rsp
  800420950e:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209515:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209519:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420951d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209520:	ee                   	out    %al,(%dx)
  8004209521:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209528:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  800420952c:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209530:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209533:	ee                   	out    %al,(%dx)
  8004209534:	c9                   	leaveq 
  8004209535:	c3                   	retq   

0000008004209536 <putch>:
  8004209536:	55                   	push   %rbp
  8004209537:	48 89 e5             	mov    %rsp,%rbp
  800420953a:	48 83 ec 10          	sub    $0x10,%rsp
  800420953e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209541:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209545:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209548:	89 c7                	mov    %eax,%edi
  800420954a:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  8004209551:	00 00 00 
  8004209554:	ff d0                	callq  *%rax
  8004209556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420955a:	48 83 c0 04          	add    $0x4,%rax
  800420955e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209562:	c9                   	leaveq 
  8004209563:	c3                   	retq   

0000008004209564 <vcprintf>:
  8004209564:	55                   	push   %rbp
  8004209565:	48 89 e5             	mov    %rsp,%rbp
  8004209568:	48 83 ec 30          	sub    $0x30,%rsp
  800420956c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209570:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209574:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420957b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420957f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209583:	48 8b 0a             	mov    (%rdx),%rcx
  8004209586:	48 89 08             	mov    %rcx,(%rax)
  8004209589:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420958d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209591:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209595:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209599:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  800420959d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042095a1:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  80042095a5:	48 89 c6             	mov    %rax,%rsi
  80042095a8:	48 bf 36 95 20 04 80 	movabs $0x8004209536,%rdi
  80042095af:	00 00 00 
  80042095b2:	48 b8 30 f4 20 04 80 	movabs $0x800420f430,%rax
  80042095b9:	00 00 00 
  80042095bc:	ff d0                	callq  *%rax
  80042095be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042095c1:	c9                   	leaveq 
  80042095c2:	c3                   	retq   

00000080042095c3 <cprintf>:
  80042095c3:	55                   	push   %rbp
  80042095c4:	48 89 e5             	mov    %rsp,%rbp
  80042095c7:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  80042095ce:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  80042095d5:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  80042095dc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042095e3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042095ea:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042095f1:	84 c0                	test   %al,%al
  80042095f3:	74 20                	je     8004209615 <cprintf+0x52>
  80042095f5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042095f9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042095fd:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209601:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209605:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209609:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420960d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209611:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209615:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420961c:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209623:	00 00 00 
  8004209626:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420962d:	00 00 00 
  8004209630:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209634:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420963b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209642:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209649:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209650:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209657:	48 8b 0a             	mov    (%rdx),%rcx
  800420965a:	48 89 08             	mov    %rcx,(%rax)
  800420965d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209661:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209665:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209669:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420966d:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209674:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420967b:	48 89 d6             	mov    %rdx,%rsi
  800420967e:	48 89 c7             	mov    %rax,%rdi
  8004209681:	48 b8 64 95 20 04 80 	movabs $0x8004209564,%rax
  8004209688:	00 00 00 
  800420968b:	ff d0                	callq  *%rax
  800420968d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209693:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209699:	c9                   	leaveq 
  800420969a:	c3                   	retq   

000000800420969b <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420969b:	55                   	push   %rbp
  800420969c:	48 89 e5             	mov    %rsp,%rbp
  800420969f:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042096a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042096a7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042096aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042096ae:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042096b1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042096b5:	f0 87 02             	lock xchg %eax,(%rdx)
  80042096b8:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042096bb:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042096be:	c9                   	leaveq 
  80042096bf:	c3                   	retq   

00000080042096c0 <lock_kernel>:
  80042096c0:	55                   	push   %rbp
  80042096c1:	48 89 e5             	mov    %rsp,%rbp
  80042096c4:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042096cb:	00 00 00 
  80042096ce:	48 b8 ad 73 21 04 80 	movabs $0x80042173ad,%rax
  80042096d5:	00 00 00 
  80042096d8:	ff d0                	callq  *%rax
  80042096da:	5d                   	pop    %rbp
  80042096db:	c3                   	retq   

00000080042096dc <trapname>:
  80042096dc:	55                   	push   %rbp
  80042096dd:	48 89 e5             	mov    %rsp,%rbp
  80042096e0:	48 83 ec 04          	sub    $0x4,%rsp
  80042096e4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042096e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042096ea:	83 f8 13             	cmp    $0x13,%eax
  80042096ed:	77 16                	ja     8004209705 <trapname+0x29>
  80042096ef:	48 b8 40 a2 21 04 80 	movabs $0x800421a240,%rax
  80042096f6:	00 00 00 
  80042096f9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042096fc:	48 63 d2             	movslq %edx,%rdx
  80042096ff:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209703:	eb 34                	jmp    8004209739 <trapname+0x5d>
  8004209705:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209709:	75 0c                	jne    8004209717 <trapname+0x3b>
  800420970b:	48 b8 40 9e 21 04 80 	movabs $0x8004219e40,%rax
  8004209712:	00 00 00 
  8004209715:	eb 22                	jmp    8004209739 <trapname+0x5d>
  8004209717:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  800420971b:	7e 12                	jle    800420972f <trapname+0x53>
  800420971d:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209721:	7f 0c                	jg     800420972f <trapname+0x53>
  8004209723:	48 b8 4c 9e 21 04 80 	movabs $0x8004219e4c,%rax
  800420972a:	00 00 00 
  800420972d:	eb 0a                	jmp    8004209739 <trapname+0x5d>
  800420972f:	48 b8 5f 9e 21 04 80 	movabs $0x8004219e5f,%rax
  8004209736:	00 00 00 
  8004209739:	c9                   	leaveq 
  800420973a:	c3                   	retq   

000000800420973b <trap_init>:
  800420973b:	55                   	push   %rbp
  800420973c:	48 89 e5             	mov    %rsp,%rbp
  800420973f:	48 83 ec 10          	sub    $0x10,%rsp
  8004209743:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420974a:	e9 7d 01 00 00       	jmpq   80042098cc <trap_init+0x191>
  800420974f:	48 b8 06 d2 20 04 80 	movabs $0x800420d206,%rax
  8004209756:	00 00 00 
  8004209759:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  8004209760:	00 00 00 
  8004209763:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209766:	48 63 c9             	movslq %ecx,%rcx
  8004209769:	48 c1 e1 04          	shl    $0x4,%rcx
  800420976d:	48 01 ca             	add    %rcx,%rdx
  8004209770:	66 89 02             	mov    %ax,(%rdx)
  8004209773:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420977a:	00 00 00 
  800420977d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209780:	48 63 d2             	movslq %edx,%rdx
  8004209783:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209787:	48 01 d0             	add    %rdx,%rax
  800420978a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209790:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209797:	00 00 00 
  800420979a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420979d:	48 63 d2             	movslq %edx,%rdx
  80042097a0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097a4:	48 01 d0             	add    %rdx,%rax
  80042097a7:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042097ab:	83 e2 f8             	and    $0xfffffff8,%edx
  80042097ae:	88 50 04             	mov    %dl,0x4(%rax)
  80042097b1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097b8:	00 00 00 
  80042097bb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097be:	48 63 d2             	movslq %edx,%rdx
  80042097c1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097c5:	48 01 d0             	add    %rdx,%rax
  80042097c8:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042097cc:	83 e2 07             	and    $0x7,%edx
  80042097cf:	88 50 04             	mov    %dl,0x4(%rax)
  80042097d2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097d9:	00 00 00 
  80042097dc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097df:	48 63 d2             	movslq %edx,%rdx
  80042097e2:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097e6:	48 01 d0             	add    %rdx,%rax
  80042097e9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097ed:	83 e2 f0             	and    $0xfffffff0,%edx
  80042097f0:	83 ca 0e             	or     $0xe,%edx
  80042097f3:	88 50 05             	mov    %dl,0x5(%rax)
  80042097f6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042097fd:	00 00 00 
  8004209800:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209803:	48 63 d2             	movslq %edx,%rdx
  8004209806:	48 c1 e2 04          	shl    $0x4,%rdx
  800420980a:	48 01 d0             	add    %rdx,%rax
  800420980d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209811:	83 e2 ef             	and    $0xffffffef,%edx
  8004209814:	88 50 05             	mov    %dl,0x5(%rax)
  8004209817:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420981e:	00 00 00 
  8004209821:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209824:	48 63 d2             	movslq %edx,%rdx
  8004209827:	48 c1 e2 04          	shl    $0x4,%rdx
  800420982b:	48 01 d0             	add    %rdx,%rax
  800420982e:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209832:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209835:	88 50 05             	mov    %dl,0x5(%rax)
  8004209838:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420983f:	00 00 00 
  8004209842:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209845:	48 63 d2             	movslq %edx,%rdx
  8004209848:	48 c1 e2 04          	shl    $0x4,%rdx
  800420984c:	48 01 d0             	add    %rdx,%rax
  800420984f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209853:	83 ca 80             	or     $0xffffff80,%edx
  8004209856:	88 50 05             	mov    %dl,0x5(%rax)
  8004209859:	48 b8 06 d2 20 04 80 	movabs $0x800420d206,%rax
  8004209860:	00 00 00 
  8004209863:	48 c1 e8 10          	shr    $0x10,%rax
  8004209867:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420986e:	00 00 00 
  8004209871:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209874:	48 63 c9             	movslq %ecx,%rcx
  8004209877:	48 c1 e1 04          	shl    $0x4,%rcx
  800420987b:	48 01 ca             	add    %rcx,%rdx
  800420987e:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209882:	48 b8 06 d2 20 04 80 	movabs $0x800420d206,%rax
  8004209889:	00 00 00 
  800420988c:	48 c1 e8 20          	shr    $0x20,%rax
  8004209890:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  8004209897:	00 00 00 
  800420989a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420989d:	48 63 c9             	movslq %ecx,%rcx
  80042098a0:	48 c1 e1 04          	shl    $0x4,%rcx
  80042098a4:	48 01 ca             	add    %rcx,%rdx
  80042098a7:	89 42 08             	mov    %eax,0x8(%rdx)
  80042098aa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098b1:	00 00 00 
  80042098b4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042098b7:	48 63 d2             	movslq %edx,%rdx
  80042098ba:	48 c1 e2 04          	shl    $0x4,%rdx
  80042098be:	48 01 d0             	add    %rdx,%rax
  80042098c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  80042098c8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042098cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042098cf:	3d ff 00 00 00       	cmp    $0xff,%eax
  80042098d4:	0f 86 75 fe ff ff    	jbe    800420974f <trap_init+0x14>
  80042098da:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  80042098e1:	00 00 00 
  80042098e4:	89 c2                	mov    %eax,%edx
  80042098e6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098ed:	00 00 00 
  80042098f0:	66 89 10             	mov    %dx,(%rax)
  80042098f3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042098fa:	00 00 00 
  80042098fd:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209903:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420990a:	00 00 00 
  800420990d:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209911:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209914:	88 50 04             	mov    %dl,0x4(%rax)
  8004209917:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420991e:	00 00 00 
  8004209921:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209925:	83 e2 07             	and    $0x7,%edx
  8004209928:	88 50 04             	mov    %dl,0x4(%rax)
  800420992b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209932:	00 00 00 
  8004209935:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209939:	83 e2 f0             	and    $0xfffffff0,%edx
  800420993c:	83 ca 0e             	or     $0xe,%edx
  800420993f:	88 50 05             	mov    %dl,0x5(%rax)
  8004209942:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209949:	00 00 00 
  800420994c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209950:	83 e2 ef             	and    $0xffffffef,%edx
  8004209953:	88 50 05             	mov    %dl,0x5(%rax)
  8004209956:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420995d:	00 00 00 
  8004209960:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209964:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209967:	88 50 05             	mov    %dl,0x5(%rax)
  800420996a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209971:	00 00 00 
  8004209974:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209978:	83 ca 80             	or     $0xffffff80,%edx
  800420997b:	88 50 05             	mov    %dl,0x5(%rax)
  800420997e:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  8004209985:	00 00 00 
  8004209988:	48 c1 e8 10          	shr    $0x10,%rax
  800420998c:	89 c2                	mov    %eax,%edx
  800420998e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209995:	00 00 00 
  8004209998:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420999c:	48 b8 10 d1 20 04 80 	movabs $0x800420d110,%rax
  80042099a3:	00 00 00 
  80042099a6:	48 c1 e8 20          	shr    $0x20,%rax
  80042099aa:	89 c2                	mov    %eax,%edx
  80042099ac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099b3:	00 00 00 
  80042099b6:	89 50 08             	mov    %edx,0x8(%rax)
  80042099b9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099c0:	00 00 00 
  80042099c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  80042099ca:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  80042099d1:	00 00 00 
  80042099d4:	89 c2                	mov    %eax,%edx
  80042099d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099dd:	00 00 00 
  80042099e0:	66 89 50 10          	mov    %dx,0x10(%rax)
  80042099e4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099eb:	00 00 00 
  80042099ee:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  80042099f4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  80042099fb:	00 00 00 
  80042099fe:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004209a02:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209a05:	88 50 14             	mov    %dl,0x14(%rax)
  8004209a08:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a0f:	00 00 00 
  8004209a12:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004209a16:	83 e2 07             	and    $0x7,%edx
  8004209a19:	88 50 14             	mov    %dl,0x14(%rax)
  8004209a1c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a23:	00 00 00 
  8004209a26:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a2a:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209a2d:	83 ca 0e             	or     $0xe,%edx
  8004209a30:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a33:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a3a:	00 00 00 
  8004209a3d:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a41:	83 e2 ef             	and    $0xffffffef,%edx
  8004209a44:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a47:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a4e:	00 00 00 
  8004209a51:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a55:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209a58:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a5b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a62:	00 00 00 
  8004209a65:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a69:	83 ca 80             	or     $0xffffff80,%edx
  8004209a6c:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a6f:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  8004209a76:	00 00 00 
  8004209a79:	48 c1 e8 10          	shr    $0x10,%rax
  8004209a7d:	89 c2                	mov    %eax,%edx
  8004209a7f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209a86:	00 00 00 
  8004209a89:	66 89 50 16          	mov    %dx,0x16(%rax)
  8004209a8d:	48 b8 1a d1 20 04 80 	movabs $0x800420d11a,%rax
  8004209a94:	00 00 00 
  8004209a97:	48 c1 e8 20          	shr    $0x20,%rax
  8004209a9b:	89 c2                	mov    %eax,%edx
  8004209a9d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209aa4:	00 00 00 
  8004209aa7:	89 50 18             	mov    %edx,0x18(%rax)
  8004209aaa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ab1:	00 00 00 
  8004209ab4:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  8004209abb:	48 b8 24 d1 20 04 80 	movabs $0x800420d124,%rax
  8004209ac2:	00 00 00 
  8004209ac5:	89 c2                	mov    %eax,%edx
  8004209ac7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ace:	00 00 00 
  8004209ad1:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004209ad5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209adc:	00 00 00 
  8004209adf:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004209ae5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209aec:	00 00 00 
  8004209aef:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209af3:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209af6:	88 50 24             	mov    %dl,0x24(%rax)
  8004209af9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b00:	00 00 00 
  8004209b03:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209b07:	83 e2 07             	and    $0x7,%edx
  8004209b0a:	88 50 24             	mov    %dl,0x24(%rax)
  8004209b0d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b14:	00 00 00 
  8004209b17:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b1b:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209b1e:	83 ca 0e             	or     $0xe,%edx
  8004209b21:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b24:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b2b:	00 00 00 
  8004209b2e:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b32:	83 e2 ef             	and    $0xffffffef,%edx
  8004209b35:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b38:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b3f:	00 00 00 
  8004209b42:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b46:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209b49:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b4c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b53:	00 00 00 
  8004209b56:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b5a:	83 ca 80             	or     $0xffffff80,%edx
  8004209b5d:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b60:	48 b8 24 d1 20 04 80 	movabs $0x800420d124,%rax
  8004209b67:	00 00 00 
  8004209b6a:	48 c1 e8 10          	shr    $0x10,%rax
  8004209b6e:	89 c2                	mov    %eax,%edx
  8004209b70:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b77:	00 00 00 
  8004209b7a:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004209b7e:	48 b8 24 d1 20 04 80 	movabs $0x800420d124,%rax
  8004209b85:	00 00 00 
  8004209b88:	48 c1 e8 20          	shr    $0x20,%rax
  8004209b8c:	89 c2                	mov    %eax,%edx
  8004209b8e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209b95:	00 00 00 
  8004209b98:	89 50 28             	mov    %edx,0x28(%rax)
  8004209b9b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ba2:	00 00 00 
  8004209ba5:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  8004209bac:	48 b8 2e d1 20 04 80 	movabs $0x800420d12e,%rax
  8004209bb3:	00 00 00 
  8004209bb6:	89 c2                	mov    %eax,%edx
  8004209bb8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bbf:	00 00 00 
  8004209bc2:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004209bc6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bcd:	00 00 00 
  8004209bd0:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004209bd6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bdd:	00 00 00 
  8004209be0:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209be4:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209be7:	88 50 34             	mov    %dl,0x34(%rax)
  8004209bea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209bf1:	00 00 00 
  8004209bf4:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209bf8:	83 e2 07             	and    $0x7,%edx
  8004209bfb:	88 50 34             	mov    %dl,0x34(%rax)
  8004209bfe:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c05:	00 00 00 
  8004209c08:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c0c:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209c0f:	83 ca 0e             	or     $0xe,%edx
  8004209c12:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c15:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c1c:	00 00 00 
  8004209c1f:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c23:	83 e2 ef             	and    $0xffffffef,%edx
  8004209c26:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c29:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c30:	00 00 00 
  8004209c33:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c37:	83 ca 60             	or     $0x60,%edx
  8004209c3a:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c3d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c44:	00 00 00 
  8004209c47:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c4b:	83 ca 80             	or     $0xffffff80,%edx
  8004209c4e:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c51:	48 b8 2e d1 20 04 80 	movabs $0x800420d12e,%rax
  8004209c58:	00 00 00 
  8004209c5b:	48 c1 e8 10          	shr    $0x10,%rax
  8004209c5f:	89 c2                	mov    %eax,%edx
  8004209c61:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c68:	00 00 00 
  8004209c6b:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004209c6f:	48 b8 2e d1 20 04 80 	movabs $0x800420d12e,%rax
  8004209c76:	00 00 00 
  8004209c79:	48 c1 e8 20          	shr    $0x20,%rax
  8004209c7d:	89 c2                	mov    %eax,%edx
  8004209c7f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c86:	00 00 00 
  8004209c89:	89 50 38             	mov    %edx,0x38(%rax)
  8004209c8c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209c93:	00 00 00 
  8004209c96:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  8004209c9d:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  8004209ca4:	00 00 00 
  8004209ca7:	89 c2                	mov    %eax,%edx
  8004209ca9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cb0:	00 00 00 
  8004209cb3:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004209cb7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cbe:	00 00 00 
  8004209cc1:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004209cc7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cce:	00 00 00 
  8004209cd1:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209cd5:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209cd8:	88 50 44             	mov    %dl,0x44(%rax)
  8004209cdb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ce2:	00 00 00 
  8004209ce5:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209ce9:	83 e2 07             	and    $0x7,%edx
  8004209cec:	88 50 44             	mov    %dl,0x44(%rax)
  8004209cef:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209cf6:	00 00 00 
  8004209cf9:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cfd:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209d00:	83 ca 0e             	or     $0xe,%edx
  8004209d03:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d06:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d0d:	00 00 00 
  8004209d10:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d14:	83 e2 ef             	and    $0xffffffef,%edx
  8004209d17:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d1a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d21:	00 00 00 
  8004209d24:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d28:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209d2b:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d2e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d35:	00 00 00 
  8004209d38:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d3c:	83 ca 80             	or     $0xffffff80,%edx
  8004209d3f:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d42:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  8004209d49:	00 00 00 
  8004209d4c:	48 c1 e8 10          	shr    $0x10,%rax
  8004209d50:	89 c2                	mov    %eax,%edx
  8004209d52:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d59:	00 00 00 
  8004209d5c:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004209d60:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  8004209d67:	00 00 00 
  8004209d6a:	48 c1 e8 20          	shr    $0x20,%rax
  8004209d6e:	89 c2                	mov    %eax,%edx
  8004209d70:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d77:	00 00 00 
  8004209d7a:	89 50 48             	mov    %edx,0x48(%rax)
  8004209d7d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209d84:	00 00 00 
  8004209d87:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  8004209d8e:	48 b8 42 d1 20 04 80 	movabs $0x800420d142,%rax
  8004209d95:	00 00 00 
  8004209d98:	89 c2                	mov    %eax,%edx
  8004209d9a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209da1:	00 00 00 
  8004209da4:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004209da8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209daf:	00 00 00 
  8004209db2:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004209db8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dbf:	00 00 00 
  8004209dc2:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209dc6:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209dc9:	88 50 54             	mov    %dl,0x54(%rax)
  8004209dcc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dd3:	00 00 00 
  8004209dd6:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209dda:	83 e2 07             	and    $0x7,%edx
  8004209ddd:	88 50 54             	mov    %dl,0x54(%rax)
  8004209de0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209de7:	00 00 00 
  8004209dea:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dee:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209df1:	83 ca 0e             	or     $0xe,%edx
  8004209df4:	88 50 55             	mov    %dl,0x55(%rax)
  8004209df7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209dfe:	00 00 00 
  8004209e01:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e05:	83 e2 ef             	and    $0xffffffef,%edx
  8004209e08:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e0b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e12:	00 00 00 
  8004209e15:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e19:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209e1c:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e1f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e26:	00 00 00 
  8004209e29:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e2d:	83 ca 80             	or     $0xffffff80,%edx
  8004209e30:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e33:	48 b8 42 d1 20 04 80 	movabs $0x800420d142,%rax
  8004209e3a:	00 00 00 
  8004209e3d:	48 c1 e8 10          	shr    $0x10,%rax
  8004209e41:	89 c2                	mov    %eax,%edx
  8004209e43:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e4a:	00 00 00 
  8004209e4d:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004209e51:	48 b8 42 d1 20 04 80 	movabs $0x800420d142,%rax
  8004209e58:	00 00 00 
  8004209e5b:	48 c1 e8 20          	shr    $0x20,%rax
  8004209e5f:	89 c2                	mov    %eax,%edx
  8004209e61:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e68:	00 00 00 
  8004209e6b:	89 50 58             	mov    %edx,0x58(%rax)
  8004209e6e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e75:	00 00 00 
  8004209e78:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  8004209e7f:	48 b8 4c d1 20 04 80 	movabs $0x800420d14c,%rax
  8004209e86:	00 00 00 
  8004209e89:	89 c2                	mov    %eax,%edx
  8004209e8b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209e92:	00 00 00 
  8004209e95:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004209e99:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ea0:	00 00 00 
  8004209ea3:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004209ea9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209eb0:	00 00 00 
  8004209eb3:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209eb7:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209eba:	88 50 64             	mov    %dl,0x64(%rax)
  8004209ebd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ec4:	00 00 00 
  8004209ec7:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209ecb:	83 e2 07             	and    $0x7,%edx
  8004209ece:	88 50 64             	mov    %dl,0x64(%rax)
  8004209ed1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ed8:	00 00 00 
  8004209edb:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209edf:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ee2:	83 ca 0e             	or     $0xe,%edx
  8004209ee5:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ee8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209eef:	00 00 00 
  8004209ef2:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209ef6:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ef9:	88 50 65             	mov    %dl,0x65(%rax)
  8004209efc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f03:	00 00 00 
  8004209f06:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f0a:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209f0d:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f10:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f17:	00 00 00 
  8004209f1a:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f1e:	83 ca 80             	or     $0xffffff80,%edx
  8004209f21:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f24:	48 b8 4c d1 20 04 80 	movabs $0x800420d14c,%rax
  8004209f2b:	00 00 00 
  8004209f2e:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f32:	89 c2                	mov    %eax,%edx
  8004209f34:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f3b:	00 00 00 
  8004209f3e:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004209f42:	48 b8 4c d1 20 04 80 	movabs $0x800420d14c,%rax
  8004209f49:	00 00 00 
  8004209f4c:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f50:	89 c2                	mov    %eax,%edx
  8004209f52:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f59:	00 00 00 
  8004209f5c:	89 50 68             	mov    %edx,0x68(%rax)
  8004209f5f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f66:	00 00 00 
  8004209f69:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  8004209f70:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  8004209f77:	00 00 00 
  8004209f7a:	89 c2                	mov    %eax,%edx
  8004209f7c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f83:	00 00 00 
  8004209f86:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004209f8a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209f91:	00 00 00 
  8004209f94:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004209f9a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209fa8:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fab:	88 50 74             	mov    %dl,0x74(%rax)
  8004209fae:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fb5:	00 00 00 
  8004209fb8:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209fbc:	83 e2 07             	and    $0x7,%edx
  8004209fbf:	88 50 74             	mov    %dl,0x74(%rax)
  8004209fc2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fc9:	00 00 00 
  8004209fcc:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fd0:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209fd3:	83 ca 0e             	or     $0xe,%edx
  8004209fd6:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fd9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209fe0:	00 00 00 
  8004209fe3:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fe7:	83 e2 ef             	and    $0xffffffef,%edx
  8004209fea:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fed:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  8004209ff4:	00 00 00 
  8004209ff7:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209ffb:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ffe:	88 50 75             	mov    %dl,0x75(%rax)
  800420a001:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a008:	00 00 00 
  800420a00b:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a00f:	83 ca 80             	or     $0xffffff80,%edx
  800420a012:	88 50 75             	mov    %dl,0x75(%rax)
  800420a015:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420a01c:	00 00 00 
  800420a01f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a023:	89 c2                	mov    %eax,%edx
  800420a025:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a02c:	00 00 00 
  800420a02f:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a033:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420a03a:	00 00 00 
  800420a03d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a041:	89 c2                	mov    %eax,%edx
  800420a043:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a04a:	00 00 00 
  800420a04d:	89 50 78             	mov    %edx,0x78(%rax)
  800420a050:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a057:	00 00 00 
  800420a05a:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a061:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420a068:	00 00 00 
  800420a06b:	89 c2                	mov    %eax,%edx
  800420a06d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a074:	00 00 00 
  800420a077:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a07e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a085:	00 00 00 
  800420a088:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a08f:	08 00 
  800420a091:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a098:	00 00 00 
  800420a09b:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a0a2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0a5:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a0ab:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0b2:	00 00 00 
  800420a0b5:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a0bc:	83 e2 07             	and    $0x7,%edx
  800420a0bf:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a0c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0cc:	00 00 00 
  800420a0cf:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0d6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0d9:	83 ca 0e             	or     $0xe,%edx
  800420a0dc:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0e2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a0e9:	00 00 00 
  800420a0ec:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0f3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0f6:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0fc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a103:	00 00 00 
  800420a106:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a10d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a110:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a116:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a11d:	00 00 00 
  800420a120:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a127:	83 ca 80             	or     $0xffffff80,%edx
  800420a12a:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a130:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420a137:	00 00 00 
  800420a13a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a13e:	89 c2                	mov    %eax,%edx
  800420a140:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a147:	00 00 00 
  800420a14a:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a151:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420a158:	00 00 00 
  800420a15b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a15f:	89 c2                	mov    %eax,%edx
  800420a161:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a168:	00 00 00 
  800420a16b:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a171:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a178:	00 00 00 
  800420a17b:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a182:	00 00 00 
  800420a185:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420a18c:	00 00 00 
  800420a18f:	89 c2                	mov    %eax,%edx
  800420a191:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a198:	00 00 00 
  800420a19b:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a1a2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1a9:	00 00 00 
  800420a1ac:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a1b3:	08 00 
  800420a1b5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1bc:	00 00 00 
  800420a1bf:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a1c6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1c9:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a1cf:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1d6:	00 00 00 
  800420a1d9:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a1e0:	83 e2 07             	and    $0x7,%edx
  800420a1e3:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a1e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a1f0:	00 00 00 
  800420a1f3:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1fa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1fd:	83 ca 0e             	or     $0xe,%edx
  800420a200:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a206:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a20d:	00 00 00 
  800420a210:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a217:	83 e2 ef             	and    $0xffffffef,%edx
  800420a21a:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a220:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a227:	00 00 00 
  800420a22a:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a231:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a234:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a23a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a241:	00 00 00 
  800420a244:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a24b:	83 ca 80             	or     $0xffffff80,%edx
  800420a24e:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a254:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420a25b:	00 00 00 
  800420a25e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a262:	89 c2                	mov    %eax,%edx
  800420a264:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a26b:	00 00 00 
  800420a26e:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a275:	48 b8 68 d1 20 04 80 	movabs $0x800420d168,%rax
  800420a27c:	00 00 00 
  800420a27f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a283:	89 c2                	mov    %eax,%edx
  800420a285:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a28c:	00 00 00 
  800420a28f:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a295:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a29c:	00 00 00 
  800420a29f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a2a6:	00 00 00 
  800420a2a9:	48 b8 70 d1 20 04 80 	movabs $0x800420d170,%rax
  800420a2b0:	00 00 00 
  800420a2b3:	89 c2                	mov    %eax,%edx
  800420a2b5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2bc:	00 00 00 
  800420a2bf:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a2c6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2cd:	00 00 00 
  800420a2d0:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a2d7:	08 00 
  800420a2d9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2e0:	00 00 00 
  800420a2e3:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a2ea:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2ed:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a2f3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a2fa:	00 00 00 
  800420a2fd:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a304:	83 e2 07             	and    $0x7,%edx
  800420a307:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a30d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a314:	00 00 00 
  800420a317:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a31e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a321:	83 ca 0e             	or     $0xe,%edx
  800420a324:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a32a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a331:	00 00 00 
  800420a334:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a33b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a33e:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a344:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a34b:	00 00 00 
  800420a34e:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a355:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a358:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a35e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a365:	00 00 00 
  800420a368:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a36f:	83 ca 80             	or     $0xffffff80,%edx
  800420a372:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a378:	48 b8 70 d1 20 04 80 	movabs $0x800420d170,%rax
  800420a37f:	00 00 00 
  800420a382:	48 c1 e8 10          	shr    $0x10,%rax
  800420a386:	89 c2                	mov    %eax,%edx
  800420a388:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a38f:	00 00 00 
  800420a392:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a399:	48 b8 70 d1 20 04 80 	movabs $0x800420d170,%rax
  800420a3a0:	00 00 00 
  800420a3a3:	48 c1 e8 20          	shr    $0x20,%rax
  800420a3a7:	89 c2                	mov    %eax,%edx
  800420a3a9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3b0:	00 00 00 
  800420a3b3:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420a3b9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3c0:	00 00 00 
  800420a3c3:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420a3ca:	00 00 00 
  800420a3cd:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420a3d4:	00 00 00 
  800420a3d7:	89 c2                	mov    %eax,%edx
  800420a3d9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3e0:	00 00 00 
  800420a3e3:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420a3ea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a3f1:	00 00 00 
  800420a3f4:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420a3fb:	08 00 
  800420a3fd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a404:	00 00 00 
  800420a407:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a40e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a411:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a417:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a41e:	00 00 00 
  800420a421:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a428:	83 e2 07             	and    $0x7,%edx
  800420a42b:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a431:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a438:	00 00 00 
  800420a43b:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a442:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a445:	83 ca 0e             	or     $0xe,%edx
  800420a448:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a44e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a455:	00 00 00 
  800420a458:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a45f:	83 e2 ef             	and    $0xffffffef,%edx
  800420a462:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a468:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a46f:	00 00 00 
  800420a472:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a479:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a47c:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a482:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a489:	00 00 00 
  800420a48c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a493:	83 ca 80             	or     $0xffffff80,%edx
  800420a496:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a49c:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420a4a3:	00 00 00 
  800420a4a6:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4aa:	89 c2                	mov    %eax,%edx
  800420a4ac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4b3:	00 00 00 
  800420a4b6:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420a4bd:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420a4c4:	00 00 00 
  800420a4c7:	48 c1 e8 20          	shr    $0x20,%rax
  800420a4cb:	89 c2                	mov    %eax,%edx
  800420a4cd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4d4:	00 00 00 
  800420a4d7:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420a4dd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a4e4:	00 00 00 
  800420a4e7:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420a4ee:	00 00 00 
  800420a4f1:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a4f8:	00 00 00 
  800420a4fb:	89 c2                	mov    %eax,%edx
  800420a4fd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a504:	00 00 00 
  800420a507:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420a50e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a515:	00 00 00 
  800420a518:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420a51f:	08 00 
  800420a521:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a528:	00 00 00 
  800420a52b:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a532:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a535:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a53b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a542:	00 00 00 
  800420a545:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a54c:	83 e2 07             	and    $0x7,%edx
  800420a54f:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a555:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a55c:	00 00 00 
  800420a55f:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a566:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a569:	83 ca 0e             	or     $0xe,%edx
  800420a56c:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a572:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a579:	00 00 00 
  800420a57c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a583:	83 e2 ef             	and    $0xffffffef,%edx
  800420a586:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a58c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a593:	00 00 00 
  800420a596:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a59d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5a0:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a5a6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5ad:	00 00 00 
  800420a5b0:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a5b7:	83 ca 80             	or     $0xffffff80,%edx
  800420a5ba:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a5c0:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a5c7:	00 00 00 
  800420a5ca:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5ce:	89 c2                	mov    %eax,%edx
  800420a5d0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5d7:	00 00 00 
  800420a5da:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420a5e1:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a5e8:	00 00 00 
  800420a5eb:	48 c1 e8 20          	shr    $0x20,%rax
  800420a5ef:	89 c2                	mov    %eax,%edx
  800420a5f1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a5f8:	00 00 00 
  800420a5fb:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420a601:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a608:	00 00 00 
  800420a60b:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420a612:	00 00 00 
  800420a615:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a61c:	00 00 00 
  800420a61f:	89 c2                	mov    %eax,%edx
  800420a621:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a628:	00 00 00 
  800420a62b:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420a632:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a639:	00 00 00 
  800420a63c:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420a643:	08 00 
  800420a645:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a64c:	00 00 00 
  800420a64f:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a656:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a659:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a65f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a666:	00 00 00 
  800420a669:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a670:	83 e2 07             	and    $0x7,%edx
  800420a673:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a679:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a680:	00 00 00 
  800420a683:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a68a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a68d:	83 ca 0e             	or     $0xe,%edx
  800420a690:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a696:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a69d:	00 00 00 
  800420a6a0:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a6aa:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6b0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6b7:	00 00 00 
  800420a6ba:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6c4:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6ca:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6d1:	00 00 00 
  800420a6d4:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6db:	83 ca 80             	or     $0xffffff80,%edx
  800420a6de:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6e4:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a6eb:	00 00 00 
  800420a6ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6f2:	89 c2                	mov    %eax,%edx
  800420a6f4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a6fb:	00 00 00 
  800420a6fe:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420a705:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a70c:	00 00 00 
  800420a70f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a713:	89 c2                	mov    %eax,%edx
  800420a715:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a71c:	00 00 00 
  800420a71f:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420a725:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a72c:	00 00 00 
  800420a72f:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420a736:	00 00 00 
  800420a739:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a740:	00 00 00 
  800420a743:	89 c2                	mov    %eax,%edx
  800420a745:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a74c:	00 00 00 
  800420a74f:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420a756:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a75d:	00 00 00 
  800420a760:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420a767:	08 00 
  800420a769:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a770:	00 00 00 
  800420a773:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a77a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a77d:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a783:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a78a:	00 00 00 
  800420a78d:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a794:	83 e2 07             	and    $0x7,%edx
  800420a797:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a79d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7a4:	00 00 00 
  800420a7a7:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a7b1:	83 ca 0e             	or     $0xe,%edx
  800420a7b4:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7ba:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7c1:	00 00 00 
  800420a7c4:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7ce:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7d4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7db:	00 00 00 
  800420a7de:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7e8:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7ee:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a7f5:	00 00 00 
  800420a7f8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a802:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a808:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a80f:	00 00 00 
  800420a812:	48 c1 e8 10          	shr    $0x10,%rax
  800420a816:	89 c2                	mov    %eax,%edx
  800420a818:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a81f:	00 00 00 
  800420a822:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420a829:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a830:	00 00 00 
  800420a833:	48 c1 e8 20          	shr    $0x20,%rax
  800420a837:	89 c2                	mov    %eax,%edx
  800420a839:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a840:	00 00 00 
  800420a843:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420a849:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a850:	00 00 00 
  800420a853:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420a85a:	00 00 00 
  800420a85d:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420a864:	00 00 00 
  800420a867:	89 c2                	mov    %eax,%edx
  800420a869:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a870:	00 00 00 
  800420a873:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420a87a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a881:	00 00 00 
  800420a884:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420a88b:	08 00 
  800420a88d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a894:	00 00 00 
  800420a897:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a89e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a8a1:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a8a7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8ae:	00 00 00 
  800420a8b1:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a8b8:	83 e2 07             	and    $0x7,%edx
  800420a8bb:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a8c1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8c8:	00 00 00 
  800420a8cb:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8d5:	83 ca 0e             	or     $0xe,%edx
  800420a8d8:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8de:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8e5:	00 00 00 
  800420a8e8:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8f2:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8f8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a8ff:	00 00 00 
  800420a902:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a909:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a90c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a912:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a919:	00 00 00 
  800420a91c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a923:	83 ca 80             	or     $0xffffff80,%edx
  800420a926:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a92c:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420a933:	00 00 00 
  800420a936:	48 c1 e8 10          	shr    $0x10,%rax
  800420a93a:	89 c2                	mov    %eax,%edx
  800420a93c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a943:	00 00 00 
  800420a946:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420a94d:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420a954:	00 00 00 
  800420a957:	48 c1 e8 20          	shr    $0x20,%rax
  800420a95b:	89 c2                	mov    %eax,%edx
  800420a95d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a964:	00 00 00 
  800420a967:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420a96d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a974:	00 00 00 
  800420a977:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420a97e:	00 00 00 
  800420a981:	48 b8 9a d1 20 04 80 	movabs $0x800420d19a,%rax
  800420a988:	00 00 00 
  800420a98b:	89 c2                	mov    %eax,%edx
  800420a98d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a994:	00 00 00 
  800420a997:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420a99e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9a5:	00 00 00 
  800420a9a8:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420a9af:	08 00 
  800420a9b1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9b8:	00 00 00 
  800420a9bb:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a9c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9c5:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a9cb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9d2:	00 00 00 
  800420a9d5:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a9dc:	83 e2 07             	and    $0x7,%edx
  800420a9df:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a9e5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420a9ec:	00 00 00 
  800420a9ef:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9f6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9f9:	83 ca 0e             	or     $0xe,%edx
  800420a9fc:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa02:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa09:	00 00 00 
  800420aa0c:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa13:	83 e2 ef             	and    $0xffffffef,%edx
  800420aa16:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa1c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa23:	00 00 00 
  800420aa26:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa2d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa30:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa36:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa3d:	00 00 00 
  800420aa40:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa47:	83 ca 80             	or     $0xffffff80,%edx
  800420aa4a:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa50:	48 b8 9a d1 20 04 80 	movabs $0x800420d19a,%rax
  800420aa57:	00 00 00 
  800420aa5a:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa5e:	89 c2                	mov    %eax,%edx
  800420aa60:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa67:	00 00 00 
  800420aa6a:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420aa71:	48 b8 9a d1 20 04 80 	movabs $0x800420d19a,%rax
  800420aa78:	00 00 00 
  800420aa7b:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa7f:	89 c2                	mov    %eax,%edx
  800420aa81:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa88:	00 00 00 
  800420aa8b:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420aa91:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aa98:	00 00 00 
  800420aa9b:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420aaa2:	00 00 00 
  800420aaa5:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420aaac:	00 00 00 
  800420aaaf:	89 c2                	mov    %eax,%edx
  800420aab1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aab8:	00 00 00 
  800420aabb:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420aac2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aac9:	00 00 00 
  800420aacc:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420aad3:	08 00 
  800420aad5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aadc:	00 00 00 
  800420aadf:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aae6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aae9:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aaef:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aaf6:	00 00 00 
  800420aaf9:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420ab00:	83 e2 07             	and    $0x7,%edx
  800420ab03:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420ab09:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab10:	00 00 00 
  800420ab13:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab1d:	83 ca 0e             	or     $0xe,%edx
  800420ab20:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab26:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab2d:	00 00 00 
  800420ab30:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab37:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab3a:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab40:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab47:	00 00 00 
  800420ab4a:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab54:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab5a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab61:	00 00 00 
  800420ab64:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab6b:	83 ca 80             	or     $0xffffff80,%edx
  800420ab6e:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab74:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420ab7b:	00 00 00 
  800420ab7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab82:	89 c2                	mov    %eax,%edx
  800420ab84:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ab8b:	00 00 00 
  800420ab8e:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420ab95:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420ab9c:	00 00 00 
  800420ab9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aba3:	89 c2                	mov    %eax,%edx
  800420aba5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abac:	00 00 00 
  800420abaf:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420abb5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abbc:	00 00 00 
  800420abbf:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420abc6:	00 00 00 
  800420abc9:	48 b8 a6 d1 20 04 80 	movabs $0x800420d1a6,%rax
  800420abd0:	00 00 00 
  800420abd3:	89 c2                	mov    %eax,%edx
  800420abd5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abdc:	00 00 00 
  800420abdf:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420abe6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420abed:	00 00 00 
  800420abf0:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420abf7:	08 00 
  800420abf9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac00:	00 00 00 
  800420ac03:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ac0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ac0d:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ac13:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac1a:	00 00 00 
  800420ac1d:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ac24:	83 e2 07             	and    $0x7,%edx
  800420ac27:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ac2d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac34:	00 00 00 
  800420ac37:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac41:	83 ca 0e             	or     $0xe,%edx
  800420ac44:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac4a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac51:	00 00 00 
  800420ac54:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac5e:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac64:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac6b:	00 00 00 
  800420ac6e:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac78:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac7e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ac85:	00 00 00 
  800420ac88:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ac92:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac98:	48 b8 a6 d1 20 04 80 	movabs $0x800420d1a6,%rax
  800420ac9f:	00 00 00 
  800420aca2:	48 c1 e8 10          	shr    $0x10,%rax
  800420aca6:	89 c2                	mov    %eax,%edx
  800420aca8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acaf:	00 00 00 
  800420acb2:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420acb9:	48 b8 a6 d1 20 04 80 	movabs $0x800420d1a6,%rax
  800420acc0:	00 00 00 
  800420acc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420acc7:	89 c2                	mov    %eax,%edx
  800420acc9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420acd0:	00 00 00 
  800420acd3:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420acd9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ace0:	00 00 00 
  800420ace3:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420acea:	00 00 00 
  800420aced:	48 b8 ac d1 20 04 80 	movabs $0x800420d1ac,%rax
  800420acf4:	00 00 00 
  800420acf7:	89 c2                	mov    %eax,%edx
  800420acf9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad00:	00 00 00 
  800420ad03:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420ad0a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad11:	00 00 00 
  800420ad14:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420ad1b:	08 00 
  800420ad1d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad24:	00 00 00 
  800420ad27:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad31:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad37:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad3e:	00 00 00 
  800420ad41:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad48:	83 e2 07             	and    $0x7,%edx
  800420ad4b:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad51:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad58:	00 00 00 
  800420ad5b:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad65:	83 ca 0e             	or     $0xe,%edx
  800420ad68:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad6e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad75:	00 00 00 
  800420ad78:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad82:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad88:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ad8f:	00 00 00 
  800420ad92:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad9c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ada2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ada9:	00 00 00 
  800420adac:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420adb3:	83 ca 80             	or     $0xffffff80,%edx
  800420adb6:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420adbc:	48 b8 ac d1 20 04 80 	movabs $0x800420d1ac,%rax
  800420adc3:	00 00 00 
  800420adc6:	48 c1 e8 10          	shr    $0x10,%rax
  800420adca:	89 c2                	mov    %eax,%edx
  800420adcc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420add3:	00 00 00 
  800420add6:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420addd:	48 b8 ac d1 20 04 80 	movabs $0x800420d1ac,%rax
  800420ade4:	00 00 00 
  800420ade7:	48 c1 e8 20          	shr    $0x20,%rax
  800420adeb:	89 c2                	mov    %eax,%edx
  800420aded:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420adf4:	00 00 00 
  800420adf7:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420adfd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae04:	00 00 00 
  800420ae07:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420ae0e:	00 00 00 
  800420ae11:	48 b8 b2 d1 20 04 80 	movabs $0x800420d1b2,%rax
  800420ae18:	00 00 00 
  800420ae1b:	89 c2                	mov    %eax,%edx
  800420ae1d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae24:	00 00 00 
  800420ae27:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420ae2e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae35:	00 00 00 
  800420ae38:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420ae3f:	08 00 
  800420ae41:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae48:	00 00 00 
  800420ae4b:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae55:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae5b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae62:	00 00 00 
  800420ae65:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae6c:	83 e2 07             	and    $0x7,%edx
  800420ae6f:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae75:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae7c:	00 00 00 
  800420ae7f:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae89:	83 ca 0e             	or     $0xe,%edx
  800420ae8c:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae92:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ae99:	00 00 00 
  800420ae9c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aea3:	83 e2 ef             	and    $0xffffffef,%edx
  800420aea6:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aeac:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aeb3:	00 00 00 
  800420aeb6:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aebd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aec0:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aec6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aecd:	00 00 00 
  800420aed0:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aed7:	83 ca 80             	or     $0xffffff80,%edx
  800420aeda:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aee0:	48 b8 b2 d1 20 04 80 	movabs $0x800420d1b2,%rax
  800420aee7:	00 00 00 
  800420aeea:	48 c1 e8 10          	shr    $0x10,%rax
  800420aeee:	89 c2                	mov    %eax,%edx
  800420aef0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aef7:	00 00 00 
  800420aefa:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420af01:	48 b8 b2 d1 20 04 80 	movabs $0x800420d1b2,%rax
  800420af08:	00 00 00 
  800420af0b:	48 c1 e8 20          	shr    $0x20,%rax
  800420af0f:	89 c2                	mov    %eax,%edx
  800420af11:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af18:	00 00 00 
  800420af1b:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420af21:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af28:	00 00 00 
  800420af2b:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420af32:	00 00 00 
  800420af35:	48 b8 b8 d1 20 04 80 	movabs $0x800420d1b8,%rax
  800420af3c:	00 00 00 
  800420af3f:	89 c2                	mov    %eax,%edx
  800420af41:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af48:	00 00 00 
  800420af4b:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420af52:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af59:	00 00 00 
  800420af5c:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420af63:	08 00 
  800420af65:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af6c:	00 00 00 
  800420af6f:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af76:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af79:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af7f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420af86:	00 00 00 
  800420af89:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af90:	83 e2 07             	and    $0x7,%edx
  800420af93:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af99:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afa0:	00 00 00 
  800420afa3:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afaa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420afad:	83 ca 0e             	or     $0xe,%edx
  800420afb0:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afb6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afbd:	00 00 00 
  800420afc0:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afc7:	83 e2 ef             	and    $0xffffffef,%edx
  800420afca:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afd0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420afd7:	00 00 00 
  800420afda:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afe1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afe4:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afea:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420aff1:	00 00 00 
  800420aff4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420affb:	83 ca 80             	or     $0xffffff80,%edx
  800420affe:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b004:	48 b8 b8 d1 20 04 80 	movabs $0x800420d1b8,%rax
  800420b00b:	00 00 00 
  800420b00e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b012:	89 c2                	mov    %eax,%edx
  800420b014:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b01b:	00 00 00 
  800420b01e:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b025:	48 b8 b8 d1 20 04 80 	movabs $0x800420d1b8,%rax
  800420b02c:	00 00 00 
  800420b02f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b033:	89 c2                	mov    %eax,%edx
  800420b035:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b03c:	00 00 00 
  800420b03f:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b045:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b04c:	00 00 00 
  800420b04f:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b056:	00 00 00 
  800420b059:	48 b8 be d1 20 04 80 	movabs $0x800420d1be,%rax
  800420b060:	00 00 00 
  800420b063:	89 c2                	mov    %eax,%edx
  800420b065:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b06c:	00 00 00 
  800420b06f:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b076:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b07d:	00 00 00 
  800420b080:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b087:	08 00 
  800420b089:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b090:	00 00 00 
  800420b093:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b09a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b09d:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b0a3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0aa:	00 00 00 
  800420b0ad:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b0b4:	83 e2 07             	and    $0x7,%edx
  800420b0b7:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b0bd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0c4:	00 00 00 
  800420b0c7:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0ce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0d1:	83 ca 0e             	or     $0xe,%edx
  800420b0d4:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0da:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0e1:	00 00 00 
  800420b0e4:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0eb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ee:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0f4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b0fb:	00 00 00 
  800420b0fe:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b105:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b108:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b10e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b115:	00 00 00 
  800420b118:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b11f:	83 ca 80             	or     $0xffffff80,%edx
  800420b122:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b128:	48 b8 be d1 20 04 80 	movabs $0x800420d1be,%rax
  800420b12f:	00 00 00 
  800420b132:	48 c1 e8 10          	shr    $0x10,%rax
  800420b136:	89 c2                	mov    %eax,%edx
  800420b138:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b13f:	00 00 00 
  800420b142:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b149:	48 b8 be d1 20 04 80 	movabs $0x800420d1be,%rax
  800420b150:	00 00 00 
  800420b153:	48 c1 e8 20          	shr    $0x20,%rax
  800420b157:	89 c2                	mov    %eax,%edx
  800420b159:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b160:	00 00 00 
  800420b163:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b169:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b170:	00 00 00 
  800420b173:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b17a:	00 00 00 
  800420b17d:	48 b8 c4 d1 20 04 80 	movabs $0x800420d1c4,%rax
  800420b184:	00 00 00 
  800420b187:	89 c2                	mov    %eax,%edx
  800420b189:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b190:	00 00 00 
  800420b193:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b19a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1a1:	00 00 00 
  800420b1a4:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b1ab:	08 00 
  800420b1ad:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1b4:	00 00 00 
  800420b1b7:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b1be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b1c1:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b1c7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1ce:	00 00 00 
  800420b1d1:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b1d8:	83 e2 07             	and    $0x7,%edx
  800420b1db:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b1e1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b1e8:	00 00 00 
  800420b1eb:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1f5:	83 ca 0e             	or     $0xe,%edx
  800420b1f8:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1fe:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b205:	00 00 00 
  800420b208:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b20f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b212:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b218:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b21f:	00 00 00 
  800420b222:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b229:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b22c:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b232:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b239:	00 00 00 
  800420b23c:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b243:	83 ca 80             	or     $0xffffff80,%edx
  800420b246:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b24c:	48 b8 c4 d1 20 04 80 	movabs $0x800420d1c4,%rax
  800420b253:	00 00 00 
  800420b256:	48 c1 e8 10          	shr    $0x10,%rax
  800420b25a:	89 c2                	mov    %eax,%edx
  800420b25c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b263:	00 00 00 
  800420b266:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b26d:	48 b8 c4 d1 20 04 80 	movabs $0x800420d1c4,%rax
  800420b274:	00 00 00 
  800420b277:	48 c1 e8 20          	shr    $0x20,%rax
  800420b27b:	89 c2                	mov    %eax,%edx
  800420b27d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b284:	00 00 00 
  800420b287:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b28d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b294:	00 00 00 
  800420b297:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b29e:	00 00 00 
  800420b2a1:	48 b8 ca d1 20 04 80 	movabs $0x800420d1ca,%rax
  800420b2a8:	00 00 00 
  800420b2ab:	89 c2                	mov    %eax,%edx
  800420b2ad:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2b4:	00 00 00 
  800420b2b7:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b2be:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2c5:	00 00 00 
  800420b2c8:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b2cf:	08 00 
  800420b2d1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2d8:	00 00 00 
  800420b2db:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2e5:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b2eb:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b2f2:	00 00 00 
  800420b2f5:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2fc:	83 e2 07             	and    $0x7,%edx
  800420b2ff:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b305:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b30c:	00 00 00 
  800420b30f:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b316:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b319:	83 ca 0e             	or     $0xe,%edx
  800420b31c:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b322:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b329:	00 00 00 
  800420b32c:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b333:	83 e2 ef             	and    $0xffffffef,%edx
  800420b336:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b33c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b343:	00 00 00 
  800420b346:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b34d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b350:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b356:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b35d:	00 00 00 
  800420b360:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b367:	83 ca 80             	or     $0xffffff80,%edx
  800420b36a:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b370:	48 b8 ca d1 20 04 80 	movabs $0x800420d1ca,%rax
  800420b377:	00 00 00 
  800420b37a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b37e:	89 c2                	mov    %eax,%edx
  800420b380:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b387:	00 00 00 
  800420b38a:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b391:	48 b8 ca d1 20 04 80 	movabs $0x800420d1ca,%rax
  800420b398:	00 00 00 
  800420b39b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b39f:	89 c2                	mov    %eax,%edx
  800420b3a1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420b3b1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3b8:	00 00 00 
  800420b3bb:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420b3c2:	00 00 00 
  800420b3c5:	48 b8 d0 d1 20 04 80 	movabs $0x800420d1d0,%rax
  800420b3cc:	00 00 00 
  800420b3cf:	89 c2                	mov    %eax,%edx
  800420b3d1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3d8:	00 00 00 
  800420b3db:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420b3e2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3e9:	00 00 00 
  800420b3ec:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420b3f3:	08 00 
  800420b3f5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b3fc:	00 00 00 
  800420b3ff:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b406:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b409:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b40f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b416:	00 00 00 
  800420b419:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b420:	83 e2 07             	and    $0x7,%edx
  800420b423:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b429:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b430:	00 00 00 
  800420b433:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b43a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b43d:	83 ca 0e             	or     $0xe,%edx
  800420b440:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b446:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b44d:	00 00 00 
  800420b450:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b457:	83 e2 ef             	and    $0xffffffef,%edx
  800420b45a:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b460:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b467:	00 00 00 
  800420b46a:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b471:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b474:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b47a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b481:	00 00 00 
  800420b484:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b48b:	83 ca 80             	or     $0xffffff80,%edx
  800420b48e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b494:	48 b8 d0 d1 20 04 80 	movabs $0x800420d1d0,%rax
  800420b49b:	00 00 00 
  800420b49e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b4a2:	89 c2                	mov    %eax,%edx
  800420b4a4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4ab:	00 00 00 
  800420b4ae:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420b4b5:	48 b8 d0 d1 20 04 80 	movabs $0x800420d1d0,%rax
  800420b4bc:	00 00 00 
  800420b4bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b4c3:	89 c2                	mov    %eax,%edx
  800420b4c5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420b4d5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4dc:	00 00 00 
  800420b4df:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420b4e6:	00 00 00 
  800420b4e9:	48 b8 d6 d1 20 04 80 	movabs $0x800420d1d6,%rax
  800420b4f0:	00 00 00 
  800420b4f3:	89 c2                	mov    %eax,%edx
  800420b4f5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b4fc:	00 00 00 
  800420b4ff:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420b506:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b50d:	00 00 00 
  800420b510:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420b517:	08 00 
  800420b519:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b520:	00 00 00 
  800420b523:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b52a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b52d:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b533:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b53a:	00 00 00 
  800420b53d:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b544:	83 e2 07             	and    $0x7,%edx
  800420b547:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b54d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b554:	00 00 00 
  800420b557:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b55e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b561:	83 ca 0e             	or     $0xe,%edx
  800420b564:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b56a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b571:	00 00 00 
  800420b574:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b57b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b57e:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b584:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b58b:	00 00 00 
  800420b58e:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b595:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b598:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b59e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5a5:	00 00 00 
  800420b5a8:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b5af:	83 ca 80             	or     $0xffffff80,%edx
  800420b5b2:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b5b8:	48 b8 d6 d1 20 04 80 	movabs $0x800420d1d6,%rax
  800420b5bf:	00 00 00 
  800420b5c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5c6:	89 c2                	mov    %eax,%edx
  800420b5c8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5cf:	00 00 00 
  800420b5d2:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420b5d9:	48 b8 d6 d1 20 04 80 	movabs $0x800420d1d6,%rax
  800420b5e0:	00 00 00 
  800420b5e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5e7:	89 c2                	mov    %eax,%edx
  800420b5e9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420b5f9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b600:	00 00 00 
  800420b603:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420b60a:	00 00 00 
  800420b60d:	48 b8 dc d1 20 04 80 	movabs $0x800420d1dc,%rax
  800420b614:	00 00 00 
  800420b617:	89 c2                	mov    %eax,%edx
  800420b619:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b620:	00 00 00 
  800420b623:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420b62a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b631:	00 00 00 
  800420b634:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420b63b:	08 00 
  800420b63d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b644:	00 00 00 
  800420b647:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b64e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b651:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b657:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b65e:	00 00 00 
  800420b661:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b668:	83 e2 07             	and    $0x7,%edx
  800420b66b:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b671:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b678:	00 00 00 
  800420b67b:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b682:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b685:	83 ca 0e             	or     $0xe,%edx
  800420b688:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b68e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b695:	00 00 00 
  800420b698:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b69f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b6a2:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6a8:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6af:	00 00 00 
  800420b6b2:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b6bc:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6c2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6c9:	00 00 00 
  800420b6cc:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b6d6:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6dc:	48 b8 dc d1 20 04 80 	movabs $0x800420d1dc,%rax
  800420b6e3:	00 00 00 
  800420b6e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6ea:	89 c2                	mov    %eax,%edx
  800420b6ec:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b6f3:	00 00 00 
  800420b6f6:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420b6fd:	48 b8 dc d1 20 04 80 	movabs $0x800420d1dc,%rax
  800420b704:	00 00 00 
  800420b707:	48 c1 e8 20          	shr    $0x20,%rax
  800420b70b:	89 c2                	mov    %eax,%edx
  800420b70d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b714:	00 00 00 
  800420b717:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420b71d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b724:	00 00 00 
  800420b727:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420b72e:	00 00 00 
  800420b731:	48 b8 e2 d1 20 04 80 	movabs $0x800420d1e2,%rax
  800420b738:	00 00 00 
  800420b73b:	89 c2                	mov    %eax,%edx
  800420b73d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b744:	00 00 00 
  800420b747:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420b74e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b755:	00 00 00 
  800420b758:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420b75f:	08 00 
  800420b761:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b768:	00 00 00 
  800420b76b:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b772:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b775:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b77b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b782:	00 00 00 
  800420b785:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b78c:	83 e2 07             	and    $0x7,%edx
  800420b78f:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b795:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b79c:	00 00 00 
  800420b79f:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b7a9:	83 ca 0e             	or     $0xe,%edx
  800420b7ac:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7b2:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7b9:	00 00 00 
  800420b7bc:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7c6:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7cc:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7d3:	00 00 00 
  800420b7d6:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7e0:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7e6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b7ed:	00 00 00 
  800420b7f0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b7fa:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b800:	48 b8 e2 d1 20 04 80 	movabs $0x800420d1e2,%rax
  800420b807:	00 00 00 
  800420b80a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b80e:	89 c2                	mov    %eax,%edx
  800420b810:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b817:	00 00 00 
  800420b81a:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420b821:	48 b8 e2 d1 20 04 80 	movabs $0x800420d1e2,%rax
  800420b828:	00 00 00 
  800420b82b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b82f:	89 c2                	mov    %eax,%edx
  800420b831:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b838:	00 00 00 
  800420b83b:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420b841:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b848:	00 00 00 
  800420b84b:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420b852:	00 00 00 
  800420b855:	48 b8 e8 d1 20 04 80 	movabs $0x800420d1e8,%rax
  800420b85c:	00 00 00 
  800420b85f:	89 c2                	mov    %eax,%edx
  800420b861:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b868:	00 00 00 
  800420b86b:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420b872:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b879:	00 00 00 
  800420b87c:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420b883:	08 00 
  800420b885:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b88c:	00 00 00 
  800420b88f:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b896:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b899:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b89f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8a6:	00 00 00 
  800420b8a9:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b8b0:	83 e2 07             	and    $0x7,%edx
  800420b8b3:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b8b9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8c0:	00 00 00 
  800420b8c3:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8cd:	83 ca 0e             	or     $0xe,%edx
  800420b8d0:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8d6:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8dd:	00 00 00 
  800420b8e0:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8ea:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8f0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b8f7:	00 00 00 
  800420b8fa:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b901:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b904:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b90a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b911:	00 00 00 
  800420b914:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b91b:	83 ca 80             	or     $0xffffff80,%edx
  800420b91e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b924:	48 b8 e8 d1 20 04 80 	movabs $0x800420d1e8,%rax
  800420b92b:	00 00 00 
  800420b92e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b932:	89 c2                	mov    %eax,%edx
  800420b934:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b93b:	00 00 00 
  800420b93e:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420b945:	48 b8 e8 d1 20 04 80 	movabs $0x800420d1e8,%rax
  800420b94c:	00 00 00 
  800420b94f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b953:	89 c2                	mov    %eax,%edx
  800420b955:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b95c:	00 00 00 
  800420b95f:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420b965:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b96c:	00 00 00 
  800420b96f:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420b976:	00 00 00 
  800420b979:	48 b8 ee d1 20 04 80 	movabs $0x800420d1ee,%rax
  800420b980:	00 00 00 
  800420b983:	89 c2                	mov    %eax,%edx
  800420b985:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b98c:	00 00 00 
  800420b98f:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420b996:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b99d:	00 00 00 
  800420b9a0:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420b9a7:	08 00 
  800420b9a9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9b0:	00 00 00 
  800420b9b3:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b9ba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b9bd:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b9c3:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9ca:	00 00 00 
  800420b9cd:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b9d4:	83 e2 07             	and    $0x7,%edx
  800420b9d7:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b9dd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420b9e4:	00 00 00 
  800420b9e7:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9ee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9f1:	83 ca 0e             	or     $0xe,%edx
  800420b9f4:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9fa:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba01:	00 00 00 
  800420ba04:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ba0e:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba14:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba1b:	00 00 00 
  800420ba1e:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba28:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba2e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba35:	00 00 00 
  800420ba38:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba3f:	83 ca 80             	or     $0xffffff80,%edx
  800420ba42:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba48:	48 b8 ee d1 20 04 80 	movabs $0x800420d1ee,%rax
  800420ba4f:	00 00 00 
  800420ba52:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba56:	89 c2                	mov    %eax,%edx
  800420ba58:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba5f:	00 00 00 
  800420ba62:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420ba69:	48 b8 ee d1 20 04 80 	movabs $0x800420d1ee,%rax
  800420ba70:	00 00 00 
  800420ba73:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba77:	89 c2                	mov    %eax,%edx
  800420ba79:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba80:	00 00 00 
  800420ba83:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420ba89:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420ba90:	00 00 00 
  800420ba93:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420ba9a:	00 00 00 
  800420ba9d:	48 b8 f4 d1 20 04 80 	movabs $0x800420d1f4,%rax
  800420baa4:	00 00 00 
  800420baa7:	89 c2                	mov    %eax,%edx
  800420baa9:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bab0:	00 00 00 
  800420bab3:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420baba:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bac1:	00 00 00 
  800420bac4:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420bacb:	08 00 
  800420bacd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bad4:	00 00 00 
  800420bad7:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420bade:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bae1:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bae7:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420baee:	00 00 00 
  800420baf1:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420baf8:	83 e2 07             	and    $0x7,%edx
  800420bafb:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bb01:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb08:	00 00 00 
  800420bb0b:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bb15:	83 ca 0e             	or     $0xe,%edx
  800420bb18:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb1e:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb25:	00 00 00 
  800420bb28:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb32:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb38:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb3f:	00 00 00 
  800420bb42:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb4c:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb52:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb59:	00 00 00 
  800420bb5c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb63:	83 ca 80             	or     $0xffffff80,%edx
  800420bb66:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb6c:	48 b8 f4 d1 20 04 80 	movabs $0x800420d1f4,%rax
  800420bb73:	00 00 00 
  800420bb76:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb7a:	89 c2                	mov    %eax,%edx
  800420bb7c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bb83:	00 00 00 
  800420bb86:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420bb8d:	48 b8 f4 d1 20 04 80 	movabs $0x800420d1f4,%rax
  800420bb94:	00 00 00 
  800420bb97:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb9b:	89 c2                	mov    %eax,%edx
  800420bb9d:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bba4:	00 00 00 
  800420bba7:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420bbad:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbb4:	00 00 00 
  800420bbb7:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420bbbe:	00 00 00 
  800420bbc1:	48 b8 fa d1 20 04 80 	movabs $0x800420d1fa,%rax
  800420bbc8:	00 00 00 
  800420bbcb:	89 c2                	mov    %eax,%edx
  800420bbcd:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbd4:	00 00 00 
  800420bbd7:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420bbde:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbe5:	00 00 00 
  800420bbe8:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420bbef:	08 00 
  800420bbf1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bbf8:	00 00 00 
  800420bbfb:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bc02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bc05:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bc0b:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc12:	00 00 00 
  800420bc15:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bc1c:	83 e2 07             	and    $0x7,%edx
  800420bc1f:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bc25:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc2c:	00 00 00 
  800420bc2f:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc39:	83 ca 0e             	or     $0xe,%edx
  800420bc3c:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc42:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc49:	00 00 00 
  800420bc4c:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc56:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc5c:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc63:	00 00 00 
  800420bc66:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc70:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc76:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bc7d:	00 00 00 
  800420bc80:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc87:	83 ca 80             	or     $0xffffff80,%edx
  800420bc8a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc90:	48 b8 fa d1 20 04 80 	movabs $0x800420d1fa,%rax
  800420bc97:	00 00 00 
  800420bc9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc9e:	89 c2                	mov    %eax,%edx
  800420bca0:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bca7:	00 00 00 
  800420bcaa:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420bcb1:	48 b8 fa d1 20 04 80 	movabs $0x800420d1fa,%rax
  800420bcb8:	00 00 00 
  800420bcbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bcbf:	89 c2                	mov    %eax,%edx
  800420bcc1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcc8:	00 00 00 
  800420bccb:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420bcd1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcd8:	00 00 00 
  800420bcdb:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420bce2:	00 00 00 
  800420bce5:	48 b8 00 d2 20 04 80 	movabs $0x800420d200,%rax
  800420bcec:	00 00 00 
  800420bcef:	89 c2                	mov    %eax,%edx
  800420bcf1:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bcf8:	00 00 00 
  800420bcfb:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420bd02:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd09:	00 00 00 
  800420bd0c:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420bd13:	08 00 
  800420bd15:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd1c:	00 00 00 
  800420bd1f:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bd26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd29:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd2f:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd36:	00 00 00 
  800420bd39:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bd40:	83 e2 07             	and    $0x7,%edx
  800420bd43:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd49:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd50:	00 00 00 
  800420bd53:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd5d:	83 ca 0e             	or     $0xe,%edx
  800420bd60:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd66:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd6d:	00 00 00 
  800420bd70:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd77:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd7a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd80:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bd87:	00 00 00 
  800420bd8a:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd91:	83 ca 60             	or     $0x60,%edx
  800420bd94:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd9a:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bda1:	00 00 00 
  800420bda4:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bdab:	83 ca 80             	or     $0xffffff80,%edx
  800420bdae:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bdb4:	48 b8 00 d2 20 04 80 	movabs $0x800420d200,%rax
  800420bdbb:	00 00 00 
  800420bdbe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bdc2:	89 c2                	mov    %eax,%edx
  800420bdc4:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bdcb:	00 00 00 
  800420bdce:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420bdd5:	48 b8 00 d2 20 04 80 	movabs $0x800420d200,%rax
  800420bddc:	00 00 00 
  800420bddf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bde3:	89 c2                	mov    %eax,%edx
  800420bde5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bdec:	00 00 00 
  800420bdef:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420bdf5:	48 b8 80 c2 49 04 80 	movabs $0x800449c280,%rax
  800420bdfc:	00 00 00 
  800420bdff:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420be06:	00 00 00 
  800420be09:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420be10:	00 00 00 
  800420be13:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420be18:	48 ba 80 c2 49 04 80 	movabs $0x800449c280,%rdx
  800420be1f:	00 00 00 
  800420be22:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420be29:	00 00 00 
  800420be2c:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420be30:	48 b8 3e be 20 04 80 	movabs $0x800420be3e,%rax
  800420be37:	00 00 00 
  800420be3a:	ff d0                	callq  *%rax
  800420be3c:	c9                   	leaveq 
  800420be3d:	c3                   	retq   

000000800420be3e <trap_init_percpu>:
  800420be3e:	55                   	push   %rbp
  800420be3f:	48 89 e5             	mov    %rsp,%rbp
  800420be42:	53                   	push   %rbx
  800420be43:	48 83 ec 18          	sub    $0x18,%rsp
  800420be47:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420be4e:	00 00 00 
  800420be51:	ff d0                	callq  *%rax
  800420be53:	01 c0                	add    %eax,%eax
  800420be55:	83 c0 05             	add    $0x5,%eax
  800420be58:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420be5b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420be62:	00 00 00 
  800420be65:	ff d0                	callq  *%rax
  800420be67:	89 c3                	mov    %eax,%ebx
  800420be69:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420be70:	00 00 00 
  800420be73:	ff d0                	callq  *%rax
  800420be75:	89 c2                	mov    %eax,%edx
  800420be77:	89 d0                	mov    %edx,%eax
  800420be79:	01 c0                	add    %eax,%eax
  800420be7b:	01 d0                	add    %edx,%eax
  800420be7d:	c1 e0 0f             	shl    $0xf,%eax
  800420be80:	48 98                	cltq   
  800420be82:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420be89:	00 00 00 
  800420be8c:	48 29 c2             	sub    %rax,%rdx
  800420be8f:	48 89 d0             	mov    %rdx,%rax
  800420be92:	48 89 c2             	mov    %rax,%rdx
  800420be95:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  800420be9c:	00 00 00 
  800420be9f:	48 63 c3             	movslq %ebx,%rax
  800420bea2:	48 c1 e0 03          	shl    $0x3,%rax
  800420bea6:	48 89 c6             	mov    %rax,%rsi
  800420bea9:	48 c1 e6 04          	shl    $0x4,%rsi
  800420bead:	48 01 f0             	add    %rsi,%rax
  800420beb0:	48 01 c8             	add    %rcx,%rax
  800420beb3:	48 83 c0 10          	add    $0x10,%rax
  800420beb7:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420bebb:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bec2:	00 00 00 
  800420bec5:	48 8b 00             	mov    (%rax),%rax
  800420bec8:	48 c1 f8 10          	sar    $0x10,%rax
  800420becc:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bed0:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bed7:	00 00 00 
  800420beda:	ff d0                	callq  *%rax
  800420bedc:	c1 e0 04             	shl    $0x4,%eax
  800420bedf:	48 98                	cltq   
  800420bee1:	48 01 d8             	add    %rbx,%rax
  800420bee4:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420bee9:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bef0:	00 00 00 
  800420bef3:	48 8b 00             	mov    (%rax),%rax
  800420bef6:	48 c1 f8 10          	sar    $0x10,%rax
  800420befa:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420befe:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bf05:	00 00 00 
  800420bf08:	ff d0                	callq  *%rax
  800420bf0a:	c1 e0 04             	shl    $0x4,%eax
  800420bf0d:	48 98                	cltq   
  800420bf0f:	48 01 d8             	add    %rbx,%rax
  800420bf12:	48 89 c3             	mov    %rax,%rbx
  800420bf15:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	ff d0                	callq  *%rax
  800420bf21:	48 98                	cltq   
  800420bf23:	48 c1 e0 03          	shl    $0x3,%rax
  800420bf27:	48 89 c2             	mov    %rax,%rdx
  800420bf2a:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bf2e:	48 01 d0             	add    %rdx,%rax
  800420bf31:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf35:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420bf3c:	00 00 00 
  800420bf3f:	48 01 d0             	add    %rdx,%rax
  800420bf42:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420bf46:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf4d:	00 00 00 
  800420bf50:	48 8b 00             	mov    (%rax),%rax
  800420bf53:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf57:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf5b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bf62:	00 00 00 
  800420bf65:	ff d0                	callq  *%rax
  800420bf67:	c1 e0 04             	shl    $0x4,%eax
  800420bf6a:	48 98                	cltq   
  800420bf6c:	48 01 d8             	add    %rbx,%rax
  800420bf6f:	48 89 c3             	mov    %rax,%rbx
  800420bf72:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bf79:	00 00 00 
  800420bf7c:	ff d0                	callq  *%rax
  800420bf7e:	48 98                	cltq   
  800420bf80:	48 c1 e0 03          	shl    $0x3,%rax
  800420bf84:	48 89 c2             	mov    %rax,%rdx
  800420bf87:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bf8b:	48 01 d0             	add    %rdx,%rax
  800420bf8e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf92:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420bf99:	00 00 00 
  800420bf9c:	48 01 d0             	add    %rdx,%rax
  800420bf9f:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfa3:	88 43 04             	mov    %al,0x4(%rbx)
  800420bfa6:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfad:	00 00 00 
  800420bfb0:	48 8b 00             	mov    (%rax),%rax
  800420bfb3:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfb7:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfbb:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bfc2:	00 00 00 
  800420bfc5:	ff d0                	callq  *%rax
  800420bfc7:	c1 e0 04             	shl    $0x4,%eax
  800420bfca:	48 98                	cltq   
  800420bfcc:	48 01 d8             	add    %rbx,%rax
  800420bfcf:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bfd3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bfd6:	83 ca 09             	or     $0x9,%edx
  800420bfd9:	88 50 05             	mov    %dl,0x5(%rax)
  800420bfdc:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfe3:	00 00 00 
  800420bfe6:	48 8b 00             	mov    (%rax),%rax
  800420bfe9:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfed:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bff1:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420bff8:	00 00 00 
  800420bffb:	ff d0                	callq  *%rax
  800420bffd:	c1 e0 04             	shl    $0x4,%eax
  800420c000:	48 98                	cltq   
  800420c002:	48 01 d8             	add    %rbx,%rax
  800420c005:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c009:	83 e2 ef             	and    $0xffffffef,%edx
  800420c00c:	88 50 05             	mov    %dl,0x5(%rax)
  800420c00f:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c016:	00 00 00 
  800420c019:	48 8b 00             	mov    (%rax),%rax
  800420c01c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c020:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c024:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c02b:	00 00 00 
  800420c02e:	ff d0                	callq  *%rax
  800420c030:	c1 e0 04             	shl    $0x4,%eax
  800420c033:	48 98                	cltq   
  800420c035:	48 01 d8             	add    %rbx,%rax
  800420c038:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c03c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c03f:	88 50 05             	mov    %dl,0x5(%rax)
  800420c042:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c049:	00 00 00 
  800420c04c:	48 8b 00             	mov    (%rax),%rax
  800420c04f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c053:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c057:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c05e:	00 00 00 
  800420c061:	ff d0                	callq  *%rax
  800420c063:	c1 e0 04             	shl    $0x4,%eax
  800420c066:	48 98                	cltq   
  800420c068:	48 01 d8             	add    %rbx,%rax
  800420c06b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c06f:	83 ca 80             	or     $0xffffff80,%edx
  800420c072:	88 50 05             	mov    %dl,0x5(%rax)
  800420c075:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c07c:	00 00 00 
  800420c07f:	48 8b 00             	mov    (%rax),%rax
  800420c082:	48 c1 f8 10          	sar    $0x10,%rax
  800420c086:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c08a:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c091:	00 00 00 
  800420c094:	ff d0                	callq  *%rax
  800420c096:	c1 e0 04             	shl    $0x4,%eax
  800420c099:	48 98                	cltq   
  800420c09b:	48 01 d8             	add    %rbx,%rax
  800420c09e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0a5:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0a8:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0af:	00 00 00 
  800420c0b2:	48 8b 00             	mov    (%rax),%rax
  800420c0b5:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0b9:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0bd:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c0c4:	00 00 00 
  800420c0c7:	ff d0                	callq  *%rax
  800420c0c9:	c1 e0 04             	shl    $0x4,%eax
  800420c0cc:	48 98                	cltq   
  800420c0ce:	48 01 d8             	add    %rbx,%rax
  800420c0d1:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0d5:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0d8:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0db:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0e2:	00 00 00 
  800420c0e5:	48 8b 00             	mov    (%rax),%rax
  800420c0e8:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0ec:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0f0:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c0f7:	00 00 00 
  800420c0fa:	ff d0                	callq  *%rax
  800420c0fc:	c1 e0 04             	shl    $0x4,%eax
  800420c0ff:	48 98                	cltq   
  800420c101:	48 01 d8             	add    %rbx,%rax
  800420c104:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c108:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c10b:	88 50 06             	mov    %dl,0x6(%rax)
  800420c10e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c115:	00 00 00 
  800420c118:	48 8b 00             	mov    (%rax),%rax
  800420c11b:	48 c1 f8 10          	sar    $0x10,%rax
  800420c11f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c123:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c12a:	00 00 00 
  800420c12d:	ff d0                	callq  *%rax
  800420c12f:	c1 e0 04             	shl    $0x4,%eax
  800420c132:	48 98                	cltq   
  800420c134:	48 01 d8             	add    %rbx,%rax
  800420c137:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c13b:	83 e2 7f             	and    $0x7f,%edx
  800420c13e:	88 50 06             	mov    %dl,0x6(%rax)
  800420c141:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c148:	00 00 00 
  800420c14b:	48 8b 00             	mov    (%rax),%rax
  800420c14e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c152:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c156:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c15d:	00 00 00 
  800420c160:	ff d0                	callq  *%rax
  800420c162:	c1 e0 04             	shl    $0x4,%eax
  800420c165:	48 98                	cltq   
  800420c167:	48 01 d8             	add    %rbx,%rax
  800420c16a:	48 89 c3             	mov    %rax,%rbx
  800420c16d:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c174:	00 00 00 
  800420c177:	ff d0                	callq  *%rax
  800420c179:	48 98                	cltq   
  800420c17b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c17f:	48 89 c2             	mov    %rax,%rdx
  800420c182:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c186:	48 01 d0             	add    %rdx,%rax
  800420c189:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c18d:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c194:	00 00 00 
  800420c197:	48 01 d0             	add    %rdx,%rax
  800420c19a:	48 c1 e8 18          	shr    $0x18,%rax
  800420c19e:	88 43 07             	mov    %al,0x7(%rbx)
  800420c1a1:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1a8:	00 00 00 
  800420c1ab:	48 8b 00             	mov    (%rax),%rax
  800420c1ae:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1b2:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c1b6:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c1bd:	00 00 00 
  800420c1c0:	ff d0                	callq  *%rax
  800420c1c2:	c1 e0 04             	shl    $0x4,%eax
  800420c1c5:	48 98                	cltq   
  800420c1c7:	48 01 d8             	add    %rbx,%rax
  800420c1ca:	48 89 c3             	mov    %rax,%rbx
  800420c1cd:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c1d4:	00 00 00 
  800420c1d7:	ff d0                	callq  *%rax
  800420c1d9:	48 98                	cltq   
  800420c1db:	48 c1 e0 03          	shl    $0x3,%rax
  800420c1df:	48 89 c2             	mov    %rax,%rdx
  800420c1e2:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c1e6:	48 01 d0             	add    %rdx,%rax
  800420c1e9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c1ed:	48 b8 20 d0 69 04 80 	movabs $0x800469d020,%rax
  800420c1f4:	00 00 00 
  800420c1f7:	48 01 d0             	add    %rdx,%rax
  800420c1fa:	48 c1 e8 20          	shr    $0x20,%rax
  800420c1fe:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c201:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c208:	00 00 00 
  800420c20b:	48 8b 00             	mov    (%rax),%rax
  800420c20e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c212:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c216:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c21d:	00 00 00 
  800420c220:	ff d0                	callq  *%rax
  800420c222:	c1 e0 04             	shl    $0x4,%eax
  800420c225:	48 98                	cltq   
  800420c227:	48 01 d8             	add    %rbx,%rax
  800420c22a:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c22e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c235:	00 00 00 
  800420c238:	48 8b 00             	mov    (%rax),%rax
  800420c23b:	48 c1 f8 10          	sar    $0x10,%rax
  800420c23f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c243:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c24a:	00 00 00 
  800420c24d:	ff d0                	callq  *%rax
  800420c24f:	c1 e0 04             	shl    $0x4,%eax
  800420c252:	48 98                	cltq   
  800420c254:	48 01 d8             	add    %rbx,%rax
  800420c257:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c25b:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c262:	00 00 00 
  800420c265:	48 8b 00             	mov    (%rax),%rax
  800420c268:	48 c1 f8 10          	sar    $0x10,%rax
  800420c26c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c270:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c277:	00 00 00 
  800420c27a:	ff d0                	callq  *%rax
  800420c27c:	c1 e0 04             	shl    $0x4,%eax
  800420c27f:	48 98                	cltq   
  800420c281:	48 01 d8             	add    %rbx,%rax
  800420c284:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c28a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c28d:	c1 e0 03             	shl    $0x3,%eax
  800420c290:	0f b7 c0             	movzwl %ax,%eax
  800420c293:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c297:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c29b:	0f 00 d8             	ltr    %ax
  800420c29e:	48 b8 80 d2 49 04 80 	movabs $0x800449d280,%rax
  800420c2a5:	00 00 00 
  800420c2a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c2ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c2b0:	0f 01 18             	lidt   (%rax)
  800420c2b3:	48 83 c4 18          	add    $0x18,%rsp
  800420c2b7:	5b                   	pop    %rbx
  800420c2b8:	5d                   	pop    %rbp
  800420c2b9:	c3                   	retq   

000000800420c2ba <print_trapframe>:
  800420c2ba:	55                   	push   %rbp
  800420c2bb:	48 89 e5             	mov    %rsp,%rbp
  800420c2be:	48 83 ec 20          	sub    $0x20,%rsp
  800420c2c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c2c6:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c2cd:	00 00 00 
  800420c2d0:	ff d0                	callq  *%rax
  800420c2d2:	89 c2                	mov    %eax,%edx
  800420c2d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2d8:	48 89 c6             	mov    %rax,%rsi
  800420c2db:	48 bf 6e 9e 21 04 80 	movabs $0x8004219e6e,%rdi
  800420c2e2:	00 00 00 
  800420c2e5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2ea:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420c2f1:	00 00 00 
  800420c2f4:	ff d1                	callq  *%rcx
  800420c2f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2fa:	48 89 c7             	mov    %rax,%rdi
  800420c2fd:	48 b8 cb c5 20 04 80 	movabs $0x800420c5cb,%rax
  800420c304:	00 00 00 
  800420c307:	ff d0                	callq  *%rax
  800420c309:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c30d:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c311:	0f b7 c0             	movzwl %ax,%eax
  800420c314:	89 c6                	mov    %eax,%esi
  800420c316:	48 bf 8c 9e 21 04 80 	movabs $0x8004219e8c,%rdi
  800420c31d:	00 00 00 
  800420c320:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c325:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c32c:	00 00 00 
  800420c32f:	ff d2                	callq  *%rdx
  800420c331:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c335:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c33c:	0f b7 c0             	movzwl %ax,%eax
  800420c33f:	89 c6                	mov    %eax,%esi
  800420c341:	48 bf 9f 9e 21 04 80 	movabs $0x8004219e9f,%rdi
  800420c348:	00 00 00 
  800420c34b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c350:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c357:	00 00 00 
  800420c35a:	ff d2                	callq  *%rdx
  800420c35c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c360:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c367:	89 c7                	mov    %eax,%edi
  800420c369:	48 b8 dc 96 20 04 80 	movabs $0x80042096dc,%rax
  800420c370:	00 00 00 
  800420c373:	ff d0                	callq  *%rax
  800420c375:	48 89 c2             	mov    %rax,%rdx
  800420c378:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c37c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c383:	48 89 c6             	mov    %rax,%rsi
  800420c386:	48 bf b2 9e 21 04 80 	movabs $0x8004219eb2,%rdi
  800420c38d:	00 00 00 
  800420c390:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c395:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420c39c:	00 00 00 
  800420c39f:	ff d1                	callq  *%rcx
  800420c3a1:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420c3a8:	00 00 00 
  800420c3ab:	48 8b 00             	mov    (%rax),%rax
  800420c3ae:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420c3b2:	75 3a                	jne    800420c3ee <print_trapframe+0x134>
  800420c3b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3b8:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c3bf:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c3c3:	75 29                	jne    800420c3ee <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420c3c5:	0f 20 d0             	mov    %cr2,%rax
  800420c3c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420c3cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c3d0:	48 89 c6             	mov    %rax,%rsi
  800420c3d3:	48 bf c4 9e 21 04 80 	movabs $0x8004219ec4,%rdi
  800420c3da:	00 00 00 
  800420c3dd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3e2:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c3e9:	00 00 00 
  800420c3ec:	ff d2                	callq  *%rdx
  800420c3ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3f2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3f9:	48 89 c6             	mov    %rax,%rsi
  800420c3fc:	48 bf d3 9e 21 04 80 	movabs $0x8004219ed3,%rdi
  800420c403:	00 00 00 
  800420c406:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c40b:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c412:	00 00 00 
  800420c415:	ff d2                	callq  *%rdx
  800420c417:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c41b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c422:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c426:	0f 85 9c 00 00 00    	jne    800420c4c8 <print_trapframe+0x20e>
  800420c42c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c430:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c437:	83 e0 01             	and    $0x1,%eax
  800420c43a:	48 85 c0             	test   %rax,%rax
  800420c43d:	74 0c                	je     800420c44b <print_trapframe+0x191>
  800420c43f:	48 b9 e1 9e 21 04 80 	movabs $0x8004219ee1,%rcx
  800420c446:	00 00 00 
  800420c449:	eb 0a                	jmp    800420c455 <print_trapframe+0x19b>
  800420c44b:	48 b9 ec 9e 21 04 80 	movabs $0x8004219eec,%rcx
  800420c452:	00 00 00 
  800420c455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c459:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c460:	83 e0 02             	and    $0x2,%eax
  800420c463:	48 85 c0             	test   %rax,%rax
  800420c466:	74 0c                	je     800420c474 <print_trapframe+0x1ba>
  800420c468:	48 ba f8 9e 21 04 80 	movabs $0x8004219ef8,%rdx
  800420c46f:	00 00 00 
  800420c472:	eb 0a                	jmp    800420c47e <print_trapframe+0x1c4>
  800420c474:	48 ba fe 9e 21 04 80 	movabs $0x8004219efe,%rdx
  800420c47b:	00 00 00 
  800420c47e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c482:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c489:	83 e0 04             	and    $0x4,%eax
  800420c48c:	48 85 c0             	test   %rax,%rax
  800420c48f:	74 0c                	je     800420c49d <print_trapframe+0x1e3>
  800420c491:	48 b8 03 9f 21 04 80 	movabs $0x8004219f03,%rax
  800420c498:	00 00 00 
  800420c49b:	eb 0a                	jmp    800420c4a7 <print_trapframe+0x1ed>
  800420c49d:	48 b8 08 9f 21 04 80 	movabs $0x8004219f08,%rax
  800420c4a4:	00 00 00 
  800420c4a7:	48 89 c6             	mov    %rax,%rsi
  800420c4aa:	48 bf 0f 9f 21 04 80 	movabs $0x8004219f0f,%rdi
  800420c4b1:	00 00 00 
  800420c4b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4b9:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  800420c4c0:	00 00 00 
  800420c4c3:	41 ff d0             	callq  *%r8
  800420c4c6:	eb 1b                	jmp    800420c4e3 <print_trapframe+0x229>
  800420c4c8:	48 bf 1e 9f 21 04 80 	movabs $0x8004219f1e,%rdi
  800420c4cf:	00 00 00 
  800420c4d2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4d7:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c4de:	00 00 00 
  800420c4e1:	ff d2                	callq  *%rdx
  800420c4e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4e7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420c4ee:	48 89 c6             	mov    %rax,%rsi
  800420c4f1:	48 bf 20 9f 21 04 80 	movabs $0x8004219f20,%rdi
  800420c4f8:	00 00 00 
  800420c4fb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c500:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c507:	00 00 00 
  800420c50a:	ff d2                	callq  *%rdx
  800420c50c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c510:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c517:	0f b7 c0             	movzwl %ax,%eax
  800420c51a:	89 c6                	mov    %eax,%esi
  800420c51c:	48 bf 2f 9f 21 04 80 	movabs $0x8004219f2f,%rdi
  800420c523:	00 00 00 
  800420c526:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c52b:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c532:	00 00 00 
  800420c535:	ff d2                	callq  *%rdx
  800420c537:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c53b:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420c542:	48 89 c6             	mov    %rax,%rsi
  800420c545:	48 bf 42 9f 21 04 80 	movabs $0x8004219f42,%rdi
  800420c54c:	00 00 00 
  800420c54f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c554:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c55b:	00 00 00 
  800420c55e:	ff d2                	callq  *%rdx
  800420c560:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c564:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c56b:	0f b7 c0             	movzwl %ax,%eax
  800420c56e:	83 e0 03             	and    $0x3,%eax
  800420c571:	85 c0                	test   %eax,%eax
  800420c573:	74 54                	je     800420c5c9 <print_trapframe+0x30f>
  800420c575:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c579:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420c580:	48 89 c6             	mov    %rax,%rsi
  800420c583:	48 bf 51 9f 21 04 80 	movabs $0x8004219f51,%rdi
  800420c58a:	00 00 00 
  800420c58d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c592:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c599:	00 00 00 
  800420c59c:	ff d2                	callq  *%rdx
  800420c59e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c5a2:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420c5a9:	0f b7 c0             	movzwl %ax,%eax
  800420c5ac:	89 c6                	mov    %eax,%esi
  800420c5ae:	48 bf 60 9f 21 04 80 	movabs $0x8004219f60,%rdi
  800420c5b5:	00 00 00 
  800420c5b8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5bd:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c5c4:	00 00 00 
  800420c5c7:	ff d2                	callq  *%rdx
  800420c5c9:	c9                   	leaveq 
  800420c5ca:	c3                   	retq   

000000800420c5cb <print_regs>:
  800420c5cb:	55                   	push   %rbp
  800420c5cc:	48 89 e5             	mov    %rsp,%rbp
  800420c5cf:	48 83 ec 10          	sub    $0x10,%rsp
  800420c5d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c5d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5db:	48 8b 00             	mov    (%rax),%rax
  800420c5de:	48 89 c6             	mov    %rax,%rsi
  800420c5e1:	48 bf 73 9f 21 04 80 	movabs $0x8004219f73,%rdi
  800420c5e8:	00 00 00 
  800420c5eb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5f0:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c5f7:	00 00 00 
  800420c5fa:	ff d2                	callq  *%rdx
  800420c5fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c600:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c604:	48 89 c6             	mov    %rax,%rsi
  800420c607:	48 bf 82 9f 21 04 80 	movabs $0x8004219f82,%rdi
  800420c60e:	00 00 00 
  800420c611:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c616:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c61d:	00 00 00 
  800420c620:	ff d2                	callq  *%rdx
  800420c622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c626:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c62a:	48 89 c6             	mov    %rax,%rsi
  800420c62d:	48 bf 91 9f 21 04 80 	movabs $0x8004219f91,%rdi
  800420c634:	00 00 00 
  800420c637:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c63c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c643:	00 00 00 
  800420c646:	ff d2                	callq  *%rdx
  800420c648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c64c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c650:	48 89 c6             	mov    %rax,%rsi
  800420c653:	48 bf a0 9f 21 04 80 	movabs $0x8004219fa0,%rdi
  800420c65a:	00 00 00 
  800420c65d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c662:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c669:	00 00 00 
  800420c66c:	ff d2                	callq  *%rdx
  800420c66e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c672:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420c676:	48 89 c6             	mov    %rax,%rsi
  800420c679:	48 bf af 9f 21 04 80 	movabs $0x8004219faf,%rdi
  800420c680:	00 00 00 
  800420c683:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c688:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c68f:	00 00 00 
  800420c692:	ff d2                	callq  *%rdx
  800420c694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c698:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c69c:	48 89 c6             	mov    %rax,%rsi
  800420c69f:	48 bf be 9f 21 04 80 	movabs $0x8004219fbe,%rdi
  800420c6a6:	00 00 00 
  800420c6a9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6ae:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c6b5:	00 00 00 
  800420c6b8:	ff d2                	callq  *%rdx
  800420c6ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6be:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420c6c2:	48 89 c6             	mov    %rax,%rsi
  800420c6c5:	48 bf cd 9f 21 04 80 	movabs $0x8004219fcd,%rdi
  800420c6cc:	00 00 00 
  800420c6cf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6d4:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c6db:	00 00 00 
  800420c6de:	ff d2                	callq  *%rdx
  800420c6e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6e4:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420c6e8:	48 89 c6             	mov    %rax,%rsi
  800420c6eb:	48 bf db 9f 21 04 80 	movabs $0x8004219fdb,%rdi
  800420c6f2:	00 00 00 
  800420c6f5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6fa:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c701:	00 00 00 
  800420c704:	ff d2                	callq  *%rdx
  800420c706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c70a:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420c70e:	48 89 c6             	mov    %rax,%rsi
  800420c711:	48 bf e9 9f 21 04 80 	movabs $0x8004219fe9,%rdi
  800420c718:	00 00 00 
  800420c71b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c720:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c727:	00 00 00 
  800420c72a:	ff d2                	callq  *%rdx
  800420c72c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c730:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420c734:	48 89 c6             	mov    %rax,%rsi
  800420c737:	48 bf f8 9f 21 04 80 	movabs $0x8004219ff8,%rdi
  800420c73e:	00 00 00 
  800420c741:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c746:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c74d:	00 00 00 
  800420c750:	ff d2                	callq  *%rdx
  800420c752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c756:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420c75a:	48 89 c6             	mov    %rax,%rsi
  800420c75d:	48 bf 07 a0 21 04 80 	movabs $0x800421a007,%rdi
  800420c764:	00 00 00 
  800420c767:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c76c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c773:	00 00 00 
  800420c776:	ff d2                	callq  *%rdx
  800420c778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c77c:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420c780:	48 89 c6             	mov    %rax,%rsi
  800420c783:	48 bf 16 a0 21 04 80 	movabs $0x800421a016,%rdi
  800420c78a:	00 00 00 
  800420c78d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c792:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c799:	00 00 00 
  800420c79c:	ff d2                	callq  *%rdx
  800420c79e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7a2:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420c7a6:	48 89 c6             	mov    %rax,%rsi
  800420c7a9:	48 bf 25 a0 21 04 80 	movabs $0x800421a025,%rdi
  800420c7b0:	00 00 00 
  800420c7b3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7b8:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c7bf:	00 00 00 
  800420c7c2:	ff d2                	callq  *%rdx
  800420c7c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7c8:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420c7cc:	48 89 c6             	mov    %rax,%rsi
  800420c7cf:	48 bf 34 a0 21 04 80 	movabs $0x800421a034,%rdi
  800420c7d6:	00 00 00 
  800420c7d9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7de:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c7e5:	00 00 00 
  800420c7e8:	ff d2                	callq  *%rdx
  800420c7ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7ee:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c7f2:	48 89 c6             	mov    %rax,%rsi
  800420c7f5:	48 bf 43 a0 21 04 80 	movabs $0x800421a043,%rdi
  800420c7fc:	00 00 00 
  800420c7ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c804:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c80b:	00 00 00 
  800420c80e:	ff d2                	callq  *%rdx
  800420c810:	c9                   	leaveq 
  800420c811:	c3                   	retq   

000000800420c812 <trap_dispatch>:
  800420c812:	55                   	push   %rbp
  800420c813:	48 89 e5             	mov    %rsp,%rbp
  800420c816:	48 83 ec 20          	sub    $0x20,%rsp
  800420c81a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c81e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c822:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c829:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c82d:	75 18                	jne    800420c847 <trap_dispatch+0x35>
  800420c82f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c833:	48 89 c7             	mov    %rax,%rdi
  800420c836:	48 b8 8f cd 20 04 80 	movabs $0x800420cd8f,%rax
  800420c83d:	00 00 00 
  800420c840:	ff d0                	callq  *%rax
  800420c842:	e9 e9 01 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c847:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c84b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c852:	48 83 f8 30          	cmp    $0x30,%rax
  800420c856:	75 55                	jne    800420c8ad <trap_dispatch+0x9b>
  800420c858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c85c:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420c860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c864:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420c868:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c86c:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420c870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c874:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420c878:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c87c:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420c880:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c884:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c888:	4d 89 c1             	mov    %r8,%r9
  800420c88b:	49 89 f8             	mov    %rdi,%r8
  800420c88e:	48 89 c7             	mov    %rax,%rdi
  800420c891:	48 b8 e5 e2 20 04 80 	movabs $0x800420e2e5,%rax
  800420c898:	00 00 00 
  800420c89b:	ff d0                	callq  *%rax
  800420c89d:	48 89 c2             	mov    %rax,%rdx
  800420c8a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8a4:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420c8a8:	e9 83 01 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c8ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8b1:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8b8:	48 83 f8 03          	cmp    $0x3,%rax
  800420c8bc:	75 18                	jne    800420c8d6 <trap_dispatch+0xc4>
  800420c8be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8c2:	48 89 c7             	mov    %rax,%rdi
  800420c8c5:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420c8cc:	00 00 00 
  800420c8cf:	ff d0                	callq  *%rax
  800420c8d1:	e9 5a 01 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c8d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8da:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8e1:	48 83 f8 27          	cmp    $0x27,%rax
  800420c8e5:	75 33                	jne    800420c91a <trap_dispatch+0x108>
  800420c8e7:	48 bf 52 a0 21 04 80 	movabs $0x800421a052,%rdi
  800420c8ee:	00 00 00 
  800420c8f1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c8f6:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420c8fd:	00 00 00 
  800420c900:	ff d2                	callq  *%rdx
  800420c902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c906:	48 89 c7             	mov    %rax,%rdi
  800420c909:	48 b8 ba c2 20 04 80 	movabs $0x800420c2ba,%rax
  800420c910:	00 00 00 
  800420c913:	ff d0                	callq  *%rax
  800420c915:	e9 16 01 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c91a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c91e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c925:	48 83 f8 20          	cmp    $0x20,%rax
  800420c929:	75 33                	jne    800420c95e <trap_dispatch+0x14c>
  800420c92b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c932:	00 00 00 
  800420c935:	ff d0                	callq  *%rax
  800420c937:	85 c0                	test   %eax,%eax
  800420c939:	75 0c                	jne    800420c947 <trap_dispatch+0x135>
  800420c93b:	48 b8 5e 88 21 04 80 	movabs $0x800421885e,%rax
  800420c942:	00 00 00 
  800420c945:	ff d0                	callq  *%rax
  800420c947:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c94c:	0f 01 c1             	vmcall 
  800420c94f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420c952:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  800420c959:	00 00 00 
  800420c95c:	ff d0                	callq  *%rax
  800420c95e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c962:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c969:	48 83 f8 21          	cmp    $0x21,%rax
  800420c96d:	75 11                	jne    800420c980 <trap_dispatch+0x16e>
  800420c96f:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420c976:	00 00 00 
  800420c979:	ff d0                	callq  *%rax
  800420c97b:	e9 b0 00 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c980:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c984:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c98b:	48 83 f8 24          	cmp    $0x24,%rax
  800420c98f:	75 11                	jne    800420c9a2 <trap_dispatch+0x190>
  800420c991:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  800420c998:	00 00 00 
  800420c99b:	ff d0                	callq  *%rax
  800420c99d:	e9 8e 00 00 00       	jmpq   800420ca30 <trap_dispatch+0x21e>
  800420c9a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9a6:	48 89 c7             	mov    %rax,%rdi
  800420c9a9:	48 b8 ba c2 20 04 80 	movabs $0x800420c2ba,%rax
  800420c9b0:	00 00 00 
  800420c9b3:	ff d0                	callq  *%rax
  800420c9b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9b9:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c9c0:	66 83 f8 08          	cmp    $0x8,%ax
  800420c9c4:	75 2a                	jne    800420c9f0 <trap_dispatch+0x1de>
  800420c9c6:	48 ba 6f a0 21 04 80 	movabs $0x800421a06f,%rdx
  800420c9cd:	00 00 00 
  800420c9d0:	be 77 01 00 00       	mov    $0x177,%esi
  800420c9d5:	48 bf 88 a0 21 04 80 	movabs $0x800421a088,%rdi
  800420c9dc:	00 00 00 
  800420c9df:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9e4:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420c9eb:	00 00 00 
  800420c9ee:	ff d1                	callq  *%rcx
  800420c9f0:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420c9f7:	00 00 00 
  800420c9fa:	ff d0                	callq  *%rax
  800420c9fc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ca03:	00 00 00 
  800420ca06:	48 98                	cltq   
  800420ca08:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca0c:	48 89 c1             	mov    %rax,%rcx
  800420ca0f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ca13:	48 01 c8             	add    %rcx,%rax
  800420ca16:	48 01 d0             	add    %rdx,%rax
  800420ca19:	48 83 c0 08          	add    $0x8,%rax
  800420ca1d:	48 8b 00             	mov    (%rax),%rax
  800420ca20:	48 89 c7             	mov    %rax,%rdi
  800420ca23:	48 b8 ab 8e 20 04 80 	movabs $0x8004208eab,%rax
  800420ca2a:	00 00 00 
  800420ca2d:	ff d0                	callq  *%rax
  800420ca2f:	90                   	nop
  800420ca30:	c9                   	leaveq 
  800420ca31:	c3                   	retq   

000000800420ca32 <trap>:
  800420ca32:	55                   	push   %rbp
  800420ca33:	48 89 e5             	mov    %rsp,%rbp
  800420ca36:	48 83 ec 20          	sub    $0x20,%rsp
  800420ca3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ca3e:	fc                   	cld    
  800420ca3f:	48 b8 d0 b5 69 04 80 	movabs $0x800469b5d0,%rax
  800420ca46:	00 00 00 
  800420ca49:	48 8b 00             	mov    (%rax),%rax
  800420ca4c:	48 85 c0             	test   %rax,%rax
  800420ca4f:	74 01                	je     800420ca52 <trap+0x20>
  800420ca51:	f4                   	hlt    
  800420ca52:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ca59:	00 00 00 
  800420ca5c:	ff d0                	callq  *%rax
  800420ca5e:	48 98                	cltq   
  800420ca60:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca64:	48 89 c2             	mov    %rax,%rdx
  800420ca67:	48 c1 e2 04          	shl    $0x4,%rdx
  800420ca6b:	48 01 d0             	add    %rdx,%rax
  800420ca6e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ca75:	00 00 00 
  800420ca78:	48 01 d0             	add    %rdx,%rax
  800420ca7b:	48 83 c0 04          	add    $0x4,%rax
  800420ca7f:	be 01 00 00 00       	mov    $0x1,%esi
  800420ca84:	48 89 c7             	mov    %rax,%rdi
  800420ca87:	48 b8 9b 96 20 04 80 	movabs $0x800420969b,%rax
  800420ca8e:	00 00 00 
  800420ca91:	ff d0                	callq  *%rax
  800420ca93:	83 f8 02             	cmp    $0x2,%eax
  800420ca96:	75 0c                	jne    800420caa4 <trap+0x72>
  800420ca98:	48 b8 c0 96 20 04 80 	movabs $0x80042096c0,%rax
  800420ca9f:	00 00 00 
  800420caa2:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420caa4:	9c                   	pushfq 
  800420caa5:	58                   	pop    %rax
  800420caa6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420caaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420caae:	25 00 02 00 00       	and    $0x200,%eax
  800420cab3:	48 85 c0             	test   %rax,%rax
  800420cab6:	74 35                	je     800420caed <trap+0xbb>
  800420cab8:	48 b9 97 a0 21 04 80 	movabs $0x800421a097,%rcx
  800420cabf:	00 00 00 
  800420cac2:	48 ba b0 a0 21 04 80 	movabs $0x800421a0b0,%rdx
  800420cac9:	00 00 00 
  800420cacc:	be 94 01 00 00       	mov    $0x194,%esi
  800420cad1:	48 bf 88 a0 21 04 80 	movabs $0x800421a088,%rdi
  800420cad8:	00 00 00 
  800420cadb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cae0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cae7:	00 00 00 
  800420caea:	41 ff d0             	callq  *%r8
  800420caed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caf1:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420caf8:	0f b7 c0             	movzwl %ax,%eax
  800420cafb:	83 e0 03             	and    $0x3,%eax
  800420cafe:	83 f8 03             	cmp    $0x3,%eax
  800420cb01:	0f 85 a9 01 00 00    	jne    800420ccb0 <trap+0x27e>
  800420cb07:	48 b8 c0 96 20 04 80 	movabs $0x80042096c0,%rax
  800420cb0e:	00 00 00 
  800420cb11:	ff d0                	callq  *%rax
  800420cb13:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cb1a:	00 00 00 
  800420cb1d:	ff d0                	callq  *%rax
  800420cb1f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb26:	00 00 00 
  800420cb29:	48 98                	cltq   
  800420cb2b:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb2f:	48 89 c1             	mov    %rax,%rcx
  800420cb32:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb36:	48 01 c8             	add    %rcx,%rax
  800420cb39:	48 01 d0             	add    %rdx,%rax
  800420cb3c:	48 83 c0 08          	add    $0x8,%rax
  800420cb40:	48 8b 00             	mov    (%rax),%rax
  800420cb43:	48 85 c0             	test   %rax,%rax
  800420cb46:	75 35                	jne    800420cb7d <trap+0x14b>
  800420cb48:	48 b9 c5 a0 21 04 80 	movabs $0x800421a0c5,%rcx
  800420cb4f:	00 00 00 
  800420cb52:	48 ba b0 a0 21 04 80 	movabs $0x800421a0b0,%rdx
  800420cb59:	00 00 00 
  800420cb5c:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420cb61:	48 bf 88 a0 21 04 80 	movabs $0x800421a088,%rdi
  800420cb68:	00 00 00 
  800420cb6b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb70:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cb77:	00 00 00 
  800420cb7a:	41 ff d0             	callq  *%r8
  800420cb7d:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cb84:	00 00 00 
  800420cb87:	ff d0                	callq  *%rax
  800420cb89:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cb90:	00 00 00 
  800420cb93:	48 98                	cltq   
  800420cb95:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb99:	48 89 c1             	mov    %rax,%rcx
  800420cb9c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cba0:	48 01 c8             	add    %rcx,%rax
  800420cba3:	48 01 d0             	add    %rdx,%rax
  800420cba6:	48 83 c0 08          	add    $0x8,%rax
  800420cbaa:	48 8b 00             	mov    (%rax),%rax
  800420cbad:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cbb3:	83 f8 01             	cmp    $0x1,%eax
  800420cbb6:	75 7f                	jne    800420cc37 <trap+0x205>
  800420cbb8:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cbbf:	00 00 00 
  800420cbc2:	ff d0                	callq  *%rax
  800420cbc4:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cbcb:	00 00 00 
  800420cbce:	48 98                	cltq   
  800420cbd0:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbd4:	48 89 c1             	mov    %rax,%rcx
  800420cbd7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbdb:	48 01 c8             	add    %rcx,%rax
  800420cbde:	48 01 d0             	add    %rdx,%rax
  800420cbe1:	48 83 c0 08          	add    $0x8,%rax
  800420cbe5:	48 8b 00             	mov    (%rax),%rax
  800420cbe8:	48 89 c7             	mov    %rax,%rdi
  800420cbeb:	48 b8 1f 8a 20 04 80 	movabs $0x8004208a1f,%rax
  800420cbf2:	00 00 00 
  800420cbf5:	ff d0                	callq  *%rax
  800420cbf7:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cbfe:	00 00 00 
  800420cc01:	ff d0                	callq  *%rax
  800420cc03:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc0a:	00 00 00 
  800420cc0d:	48 98                	cltq   
  800420cc0f:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc13:	48 89 c1             	mov    %rax,%rcx
  800420cc16:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc1a:	48 01 c8             	add    %rcx,%rax
  800420cc1d:	48 01 d0             	add    %rdx,%rax
  800420cc20:	48 83 c0 08          	add    $0x8,%rax
  800420cc24:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420cc2b:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  800420cc32:	00 00 00 
  800420cc35:	ff d0                	callq  *%rax
  800420cc37:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cc3e:	00 00 00 
  800420cc41:	ff d0                	callq  *%rax
  800420cc43:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc4a:	00 00 00 
  800420cc4d:	48 98                	cltq   
  800420cc4f:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc53:	48 89 c1             	mov    %rax,%rcx
  800420cc56:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc5a:	48 01 c8             	add    %rcx,%rax
  800420cc5d:	48 01 d0             	add    %rdx,%rax
  800420cc60:	48 83 c0 08          	add    $0x8,%rax
  800420cc64:	48 8b 10             	mov    (%rax),%rdx
  800420cc67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc6b:	48 89 c6             	mov    %rax,%rsi
  800420cc6e:	b8 18 00 00 00       	mov    $0x18,%eax
  800420cc73:	48 89 d7             	mov    %rdx,%rdi
  800420cc76:	48 89 c1             	mov    %rax,%rcx
  800420cc79:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420cc7c:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cc83:	00 00 00 
  800420cc86:	ff d0                	callq  *%rax
  800420cc88:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cc8f:	00 00 00 
  800420cc92:	48 98                	cltq   
  800420cc94:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc98:	48 89 c1             	mov    %rax,%rcx
  800420cc9b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc9f:	48 01 c8             	add    %rcx,%rax
  800420cca2:	48 01 d0             	add    %rdx,%rax
  800420cca5:	48 83 c0 08          	add    $0x8,%rax
  800420cca9:	48 8b 00             	mov    (%rax),%rax
  800420ccac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ccb0:	48 b8 90 d2 49 04 80 	movabs $0x800449d290,%rax
  800420ccb7:	00 00 00 
  800420ccba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ccbe:	48 89 10             	mov    %rdx,(%rax)
  800420ccc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ccc5:	48 89 c7             	mov    %rax,%rdi
  800420ccc8:	48 b8 12 c8 20 04 80 	movabs $0x800420c812,%rax
  800420cccf:	00 00 00 
  800420ccd2:	ff d0                	callq  *%rax
  800420ccd4:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ccdb:	00 00 00 
  800420ccde:	ff d0                	callq  *%rax
  800420cce0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cce7:	00 00 00 
  800420ccea:	48 98                	cltq   
  800420ccec:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccf0:	48 89 c1             	mov    %rax,%rcx
  800420ccf3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccf7:	48 01 c8             	add    %rcx,%rax
  800420ccfa:	48 01 d0             	add    %rdx,%rax
  800420ccfd:	48 83 c0 08          	add    $0x8,%rax
  800420cd01:	48 8b 00             	mov    (%rax),%rax
  800420cd04:	48 85 c0             	test   %rax,%rax
  800420cd07:	74 7a                	je     800420cd83 <trap+0x351>
  800420cd09:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cd10:	00 00 00 
  800420cd13:	ff d0                	callq  *%rax
  800420cd15:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cd1c:	00 00 00 
  800420cd1f:	48 98                	cltq   
  800420cd21:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd25:	48 89 c1             	mov    %rax,%rcx
  800420cd28:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd2c:	48 01 c8             	add    %rcx,%rax
  800420cd2f:	48 01 d0             	add    %rdx,%rax
  800420cd32:	48 83 c0 08          	add    $0x8,%rax
  800420cd36:	48 8b 00             	mov    (%rax),%rax
  800420cd39:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cd3f:	83 f8 03             	cmp    $0x3,%eax
  800420cd42:	75 3f                	jne    800420cd83 <trap+0x351>
  800420cd44:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cd4b:	00 00 00 
  800420cd4e:	ff d0                	callq  *%rax
  800420cd50:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cd57:	00 00 00 
  800420cd5a:	48 98                	cltq   
  800420cd5c:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd60:	48 89 c1             	mov    %rax,%rcx
  800420cd63:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd67:	48 01 c8             	add    %rcx,%rax
  800420cd6a:	48 01 d0             	add    %rdx,%rax
  800420cd6d:	48 83 c0 08          	add    $0x8,%rax
  800420cd71:	48 8b 00             	mov    (%rax),%rax
  800420cd74:	48 89 c7             	mov    %rax,%rdi
  800420cd77:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  800420cd7e:	00 00 00 
  800420cd81:	ff d0                	callq  *%rax
  800420cd83:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  800420cd8a:	00 00 00 
  800420cd8d:	ff d0                	callq  *%rax

000000800420cd8f <page_fault_handler>:
  800420cd8f:	55                   	push   %rbp
  800420cd90:	48 89 e5             	mov    %rsp,%rbp
  800420cd93:	53                   	push   %rbx
  800420cd94:	48 83 ec 38          	sub    $0x38,%rsp
  800420cd98:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420cd9c:	0f 20 d0             	mov    %cr2,%rax
  800420cd9f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420cda3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420cda7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420cdab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cdaf:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cdb6:	0f b7 c0             	movzwl %ax,%eax
  800420cdb9:	83 e0 03             	and    $0x3,%eax
  800420cdbc:	85 c0                	test   %eax,%eax
  800420cdbe:	75 3d                	jne    800420cdfd <page_fault_handler+0x6e>
  800420cdc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cdc4:	48 89 c7             	mov    %rax,%rdi
  800420cdc7:	48 b8 ba c2 20 04 80 	movabs $0x800420c2ba,%rax
  800420cdce:	00 00 00 
  800420cdd1:	ff d0                	callq  *%rax
  800420cdd3:	48 ba cc a0 21 04 80 	movabs $0x800421a0cc,%rdx
  800420cdda:	00 00 00 
  800420cddd:	be de 01 00 00       	mov    $0x1de,%esi
  800420cde2:	48 bf 88 a0 21 04 80 	movabs $0x800421a088,%rdi
  800420cde9:	00 00 00 
  800420cdec:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdf1:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420cdf8:	00 00 00 
  800420cdfb:	ff d1                	callq  *%rcx
  800420cdfd:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ce04:	00 00 00 
  800420ce07:	ff d0                	callq  *%rax
  800420ce09:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ce10:	00 00 00 
  800420ce13:	48 98                	cltq   
  800420ce15:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce19:	48 89 c1             	mov    %rax,%rcx
  800420ce1c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce20:	48 01 c8             	add    %rcx,%rax
  800420ce23:	48 01 d0             	add    %rdx,%rax
  800420ce26:	48 83 c0 08          	add    $0x8,%rax
  800420ce2a:	48 8b 00             	mov    (%rax),%rax
  800420ce2d:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420ce34:	48 85 c0             	test   %rax,%rax
  800420ce37:	0f 85 b8 00 00 00    	jne    800420cef5 <page_fault_handler+0x166>
  800420ce3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce41:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420ce48:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ce4f:	00 00 00 
  800420ce52:	ff d0                	callq  *%rax
  800420ce54:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ce5b:	00 00 00 
  800420ce5e:	48 98                	cltq   
  800420ce60:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce64:	48 89 c1             	mov    %rax,%rcx
  800420ce67:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce6b:	48 01 c8             	add    %rcx,%rax
  800420ce6e:	48 01 d0             	add    %rdx,%rax
  800420ce71:	48 83 c0 08          	add    $0x8,%rax
  800420ce75:	48 8b 00             	mov    (%rax),%rax
  800420ce78:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ce7e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ce82:	48 89 d9             	mov    %rbx,%rcx
  800420ce85:	89 c6                	mov    %eax,%esi
  800420ce87:	48 bf d8 a0 21 04 80 	movabs $0x800421a0d8,%rdi
  800420ce8e:	00 00 00 
  800420ce91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce96:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  800420ce9d:	00 00 00 
  800420cea0:	41 ff d0             	callq  *%r8
  800420cea3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cea7:	48 89 c7             	mov    %rax,%rdi
  800420ceaa:	48 b8 ba c2 20 04 80 	movabs $0x800420c2ba,%rax
  800420ceb1:	00 00 00 
  800420ceb4:	ff d0                	callq  *%rax
  800420ceb6:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cebd:	00 00 00 
  800420cec0:	ff d0                	callq  *%rax
  800420cec2:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cec9:	00 00 00 
  800420cecc:	48 98                	cltq   
  800420cece:	48 c1 e0 03          	shl    $0x3,%rax
  800420ced2:	48 89 c1             	mov    %rax,%rcx
  800420ced5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ced9:	48 01 c8             	add    %rcx,%rax
  800420cedc:	48 01 d0             	add    %rdx,%rax
  800420cedf:	48 83 c0 08          	add    $0x8,%rax
  800420cee3:	48 8b 00             	mov    (%rax),%rax
  800420cee6:	48 89 c7             	mov    %rax,%rdi
  800420cee9:	48 b8 ab 8e 20 04 80 	movabs $0x8004208eab,%rax
  800420cef0:	00 00 00 
  800420cef3:	ff d0                	callq  *%rax
  800420cef5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cef9:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cf00:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420cf05:	48 39 c2             	cmp    %rax,%rdx
  800420cf08:	76 2c                	jbe    800420cf36 <page_fault_handler+0x1a7>
  800420cf0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf0e:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cf15:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420cf1a:	48 39 c2             	cmp    %rax,%rdx
  800420cf1d:	77 17                	ja     800420cf36 <page_fault_handler+0x1a7>
  800420cf1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf23:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cf2a:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420cf30:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf34:	eb 09                	jmp    800420cf3f <page_fault_handler+0x1b0>
  800420cf36:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420cf3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf3f:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420cf46:	00 00 00 
  800420cf49:	ff d0                	callq  *%rax
  800420cf4b:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420cf52:	00 00 00 
  800420cf55:	48 98                	cltq   
  800420cf57:	48 c1 e0 03          	shl    $0x3,%rax
  800420cf5b:	48 89 c1             	mov    %rax,%rcx
  800420cf5e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cf62:	48 01 c8             	add    %rcx,%rax
  800420cf65:	48 01 d0             	add    %rdx,%rax
  800420cf68:	48 83 c0 08          	add    $0x8,%rax
  800420cf6c:	48 8b 00             	mov    (%rax),%rax
  800420cf6f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420cf73:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420cf78:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420cf7d:	48 89 c7             	mov    %rax,%rdi
  800420cf80:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420cf87:	00 00 00 
  800420cf8a:	ff d0                	callq  *%rax
  800420cf8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf90:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cf94:	48 89 10             	mov    %rdx,(%rax)
  800420cf97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf9b:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420cfa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfa6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cfaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cfb2:	48 8b 0a             	mov    (%rdx),%rcx
  800420cfb5:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420cfb9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420cfbd:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420cfc1:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420cfc5:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420cfc9:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420cfcd:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420cfd1:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420cfd5:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420cfd9:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420cfdd:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420cfe1:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420cfe5:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420cfe9:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420cfed:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420cff1:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420cff5:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420cff9:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420cffd:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d001:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d005:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d009:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d00d:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d011:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d015:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d019:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d01d:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d021:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d025:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d02c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d030:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d037:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d03b:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d042:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d046:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d04d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d051:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d058:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d05c:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d067:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d06e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d072:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d076:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d07d:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d084:	00 00 00 
  800420d087:	ff d0                	callq  *%rax
  800420d089:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d090:	00 00 00 
  800420d093:	48 98                	cltq   
  800420d095:	48 c1 e0 03          	shl    $0x3,%rax
  800420d099:	48 89 c1             	mov    %rax,%rcx
  800420d09c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0a0:	48 01 c8             	add    %rcx,%rax
  800420d0a3:	48 01 d0             	add    %rdx,%rax
  800420d0a6:	48 83 c0 08          	add    $0x8,%rax
  800420d0aa:	48 8b 00             	mov    (%rax),%rax
  800420d0ad:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d0b4:	48 89 c2             	mov    %rax,%rdx
  800420d0b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d0bb:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d0c2:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d0c9:	00 00 00 
  800420d0cc:	ff d0                	callq  *%rax
  800420d0ce:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d0d5:	00 00 00 
  800420d0d8:	48 98                	cltq   
  800420d0da:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0de:	48 89 c1             	mov    %rax,%rcx
  800420d0e1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0e5:	48 01 c8             	add    %rcx,%rax
  800420d0e8:	48 01 d0             	add    %rdx,%rax
  800420d0eb:	48 83 c0 08          	add    $0x8,%rax
  800420d0ef:	48 8b 00             	mov    (%rax),%rax
  800420d0f2:	48 89 c7             	mov    %rax,%rdi
  800420d0f5:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  800420d0fc:	00 00 00 
  800420d0ff:	ff d0                	callq  *%rax
  800420d101:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d108:	00 00 00 
  800420d10b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000800420d110 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d110:	6a 00                	pushq  $0x0
  800420d112:	6a 00                	pushq  $0x0
  800420d114:	e9 f7 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d119:	90                   	nop

000000800420d11a <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d11a:	6a 00                	pushq  $0x0
  800420d11c:	6a 01                	pushq  $0x1
  800420d11e:	e9 ed 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d123:	90                   	nop

000000800420d124 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d124:	6a 00                	pushq  $0x0
  800420d126:	6a 02                	pushq  $0x2
  800420d128:	e9 e3 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d12d:	90                   	nop

000000800420d12e <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d12e:	6a 00                	pushq  $0x0
  800420d130:	6a 03                	pushq  $0x3
  800420d132:	e9 d9 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d137:	90                   	nop

000000800420d138 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d138:	6a 00                	pushq  $0x0
  800420d13a:	6a 04                	pushq  $0x4
  800420d13c:	e9 cf 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d141:	90                   	nop

000000800420d142 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d142:	6a 00                	pushq  $0x0
  800420d144:	6a 05                	pushq  $0x5
  800420d146:	e9 c5 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d14b:	90                   	nop

000000800420d14c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d14c:	6a 00                	pushq  $0x0
  800420d14e:	6a 06                	pushq  $0x6
  800420d150:	e9 bb 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d155:	90                   	nop

000000800420d156 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d156:	6a 00                	pushq  $0x0
  800420d158:	6a 07                	pushq  $0x7
  800420d15a:	e9 b1 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d15f:	90                   	nop

000000800420d160 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d160:	6a 08                	pushq  $0x8
  800420d162:	e9 a9 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d167:	90                   	nop

000000800420d168 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d168:	6a 0a                	pushq  $0xa
  800420d16a:	e9 a1 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d16f:	90                   	nop

000000800420d170 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d170:	6a 0b                	pushq  $0xb
  800420d172:	e9 99 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d177:	90                   	nop

000000800420d178 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d178:	6a 0c                	pushq  $0xc
  800420d17a:	e9 91 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d17f:	90                   	nop

000000800420d180 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d180:	6a 0d                	pushq  $0xd
  800420d182:	e9 89 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d187:	90                   	nop

000000800420d188 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d188:	6a 0e                	pushq  $0xe
  800420d18a:	e9 81 00 00 00       	jmpq   800420d210 <_alltraps>
  800420d18f:	90                   	nop

000000800420d190 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d190:	6a 00                	pushq  $0x0
  800420d192:	6a 10                	pushq  $0x10
  800420d194:	eb 7a                	jmp    800420d210 <_alltraps>

000000800420d196 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d196:	6a 11                	pushq  $0x11
  800420d198:	eb 76                	jmp    800420d210 <_alltraps>

000000800420d19a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d19a:	6a 00                	pushq  $0x0
  800420d19c:	6a 12                	pushq  $0x12
  800420d19e:	eb 70                	jmp    800420d210 <_alltraps>

000000800420d1a0 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d1a0:	6a 00                	pushq  $0x0
  800420d1a2:	6a 20                	pushq  $0x20
  800420d1a4:	eb 6a                	jmp    800420d210 <_alltraps>

000000800420d1a6 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d1a6:	6a 00                	pushq  $0x0
  800420d1a8:	6a 21                	pushq  $0x21
  800420d1aa:	eb 64                	jmp    800420d210 <_alltraps>

000000800420d1ac <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d1ac:	6a 00                	pushq  $0x0
  800420d1ae:	6a 22                	pushq  $0x22
  800420d1b0:	eb 5e                	jmp    800420d210 <_alltraps>

000000800420d1b2 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d1b2:	6a 00                	pushq  $0x0
  800420d1b4:	6a 23                	pushq  $0x23
  800420d1b6:	eb 58                	jmp    800420d210 <_alltraps>

000000800420d1b8 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d1b8:	6a 00                	pushq  $0x0
  800420d1ba:	6a 24                	pushq  $0x24
  800420d1bc:	eb 52                	jmp    800420d210 <_alltraps>

000000800420d1be <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d1be:	6a 00                	pushq  $0x0
  800420d1c0:	6a 25                	pushq  $0x25
  800420d1c2:	eb 4c                	jmp    800420d210 <_alltraps>

000000800420d1c4 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d1c4:	6a 00                	pushq  $0x0
  800420d1c6:	6a 26                	pushq  $0x26
  800420d1c8:	eb 46                	jmp    800420d210 <_alltraps>

000000800420d1ca <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d1ca:	6a 00                	pushq  $0x0
  800420d1cc:	6a 27                	pushq  $0x27
  800420d1ce:	eb 40                	jmp    800420d210 <_alltraps>

000000800420d1d0 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d1d0:	6a 00                	pushq  $0x0
  800420d1d2:	6a 28                	pushq  $0x28
  800420d1d4:	eb 3a                	jmp    800420d210 <_alltraps>

000000800420d1d6 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d1d6:	6a 00                	pushq  $0x0
  800420d1d8:	6a 29                	pushq  $0x29
  800420d1da:	eb 34                	jmp    800420d210 <_alltraps>

000000800420d1dc <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d1dc:	6a 00                	pushq  $0x0
  800420d1de:	6a 2a                	pushq  $0x2a
  800420d1e0:	eb 2e                	jmp    800420d210 <_alltraps>

000000800420d1e2 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d1e2:	6a 00                	pushq  $0x0
  800420d1e4:	6a 2b                	pushq  $0x2b
  800420d1e6:	eb 28                	jmp    800420d210 <_alltraps>

000000800420d1e8 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d1e8:	6a 00                	pushq  $0x0
  800420d1ea:	6a 2c                	pushq  $0x2c
  800420d1ec:	eb 22                	jmp    800420d210 <_alltraps>

000000800420d1ee <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d1ee:	6a 00                	pushq  $0x0
  800420d1f0:	6a 2d                	pushq  $0x2d
  800420d1f2:	eb 1c                	jmp    800420d210 <_alltraps>

000000800420d1f4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d1f4:	6a 00                	pushq  $0x0
  800420d1f6:	6a 2e                	pushq  $0x2e
  800420d1f8:	eb 16                	jmp    800420d210 <_alltraps>

000000800420d1fa <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d1fa:	6a 00                	pushq  $0x0
  800420d1fc:	6a 2f                	pushq  $0x2f
  800420d1fe:	eb 10                	jmp    800420d210 <_alltraps>

000000800420d200 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d200:	6a 00                	pushq  $0x0
  800420d202:	6a 30                	pushq  $0x30
  800420d204:	eb 0a                	jmp    800420d210 <_alltraps>

000000800420d206 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d206:	68 f4 01 00 00       	pushq  $0x1f4
  800420d20b:	eb 03                	jmp    800420d210 <_alltraps>
  800420d20d:	0f 1f 00             	nopl   (%rax)

000000800420d210 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d210:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d214:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d218:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d21b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d21f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d224:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d229:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d22e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d233:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d238:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d23d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d242:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d247:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d24c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d251:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d256:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d25b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d260:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d265:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d269:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d26e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d270:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d272:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d274:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d276:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d278:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d27b:	e8 b2 f7 ff ff       	callq  800420ca32 <trap>

000000800420d280 <spin>:
spin:	jmp spin
  800420d280:	eb fe                	jmp    800420d280 <spin>

000000800420d282 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d282:	55                   	push   %rbp
  800420d283:	48 89 e5             	mov    %rsp,%rbp
  800420d286:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d28a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d28e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d291:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d295:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d298:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d29c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d29f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d2a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d2a5:	c9                   	leaveq 
  800420d2a6:	c3                   	retq   

000000800420d2a7 <unlock_kernel>:
  800420d2a7:	55                   	push   %rbp
  800420d2a8:	48 89 e5             	mov    %rsp,%rbp
  800420d2ab:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420d2b2:	00 00 00 
  800420d2b5:	48 b8 84 74 21 04 80 	movabs $0x8004217484,%rax
  800420d2bc:	00 00 00 
  800420d2bf:	ff d0                	callq  *%rax
  800420d2c1:	f3 90                	pause  
  800420d2c3:	5d                   	pop    %rbp
  800420d2c4:	c3                   	retq   

000000800420d2c5 <sched_yield>:
  800420d2c5:	55                   	push   %rbp
  800420d2c6:	48 89 e5             	mov    %rsp,%rbp
  800420d2c9:	48 83 ec 10          	sub    $0x10,%rsp
  800420d2cd:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d2d4:	00 00 00 
  800420d2d7:	ff d0                	callq  *%rax
  800420d2d9:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d2e0:	00 00 00 
  800420d2e3:	48 98                	cltq   
  800420d2e5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2e9:	48 89 c1             	mov    %rax,%rcx
  800420d2ec:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2f0:	48 01 c8             	add    %rcx,%rax
  800420d2f3:	48 01 d0             	add    %rdx,%rax
  800420d2f6:	48 83 c0 08          	add    $0x8,%rax
  800420d2fa:	48 8b 00             	mov    (%rax),%rax
  800420d2fd:	48 85 c0             	test   %rax,%rax
  800420d300:	74 60                	je     800420d362 <sched_yield+0x9d>
  800420d302:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d309:	00 00 00 
  800420d30c:	ff d0                	callq  *%rax
  800420d30e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d315:	00 00 00 
  800420d318:	48 98                	cltq   
  800420d31a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d31e:	48 89 c1             	mov    %rax,%rcx
  800420d321:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d325:	48 01 c8             	add    %rcx,%rax
  800420d328:	48 01 d0             	add    %rdx,%rax
  800420d32b:	48 83 c0 08          	add    $0x8,%rax
  800420d32f:	48 8b 00             	mov    (%rax),%rax
  800420d332:	48 89 c2             	mov    %rax,%rdx
  800420d335:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d33c:	00 00 00 
  800420d33f:	48 8b 00             	mov    (%rax),%rax
  800420d342:	48 29 c2             	sub    %rax,%rdx
  800420d345:	48 89 d0             	mov    %rdx,%rax
  800420d348:	48 c1 f8 03          	sar    $0x3,%rax
  800420d34c:	48 89 c2             	mov    %rax,%rdx
  800420d34f:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420d356:	fa a4 4f 
  800420d359:	48 0f af c2          	imul   %rdx,%rax
  800420d35d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d360:	eb 07                	jmp    800420d369 <sched_yield+0xa4>
  800420d362:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420d369:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420d370:	eb 75                	jmp    800420d3e7 <sched_yield+0x122>
  800420d372:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d375:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420d378:	01 c2                	add    %eax,%edx
  800420d37a:	89 d0                	mov    %edx,%eax
  800420d37c:	c1 f8 1f             	sar    $0x1f,%eax
  800420d37f:	c1 e8 16             	shr    $0x16,%eax
  800420d382:	01 c2                	add    %eax,%edx
  800420d384:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420d38a:	29 c2                	sub    %eax,%edx
  800420d38c:	89 d0                	mov    %edx,%eax
  800420d38e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420d391:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d398:	00 00 00 
  800420d39b:	48 8b 10             	mov    (%rax),%rdx
  800420d39e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d3a1:	48 98                	cltq   
  800420d3a3:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d3aa:	48 01 d0             	add    %rdx,%rax
  800420d3ad:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3b3:	83 f8 02             	cmp    $0x2,%eax
  800420d3b6:	75 2b                	jne    800420d3e3 <sched_yield+0x11e>
  800420d3b8:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d3bf:	00 00 00 
  800420d3c2:	48 8b 10             	mov    (%rax),%rdx
  800420d3c5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d3c8:	48 98                	cltq   
  800420d3ca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d3d1:	48 01 d0             	add    %rdx,%rax
  800420d3d4:	48 89 c7             	mov    %rax,%rdi
  800420d3d7:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  800420d3de:	00 00 00 
  800420d3e1:	ff d0                	callq  *%rax
  800420d3e3:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d3e7:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420d3ee:	7e 82                	jle    800420d372 <sched_yield+0xad>
  800420d3f0:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d3f7:	00 00 00 
  800420d3fa:	ff d0                	callq  *%rax
  800420d3fc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d403:	00 00 00 
  800420d406:	48 98                	cltq   
  800420d408:	48 c1 e0 03          	shl    $0x3,%rax
  800420d40c:	48 89 c1             	mov    %rax,%rcx
  800420d40f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d413:	48 01 c8             	add    %rcx,%rax
  800420d416:	48 01 d0             	add    %rdx,%rax
  800420d419:	48 83 c0 08          	add    $0x8,%rax
  800420d41d:	48 8b 00             	mov    (%rax),%rax
  800420d420:	48 85 c0             	test   %rax,%rax
  800420d423:	74 7a                	je     800420d49f <sched_yield+0x1da>
  800420d425:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d42c:	00 00 00 
  800420d42f:	ff d0                	callq  *%rax
  800420d431:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d438:	00 00 00 
  800420d43b:	48 98                	cltq   
  800420d43d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d441:	48 89 c1             	mov    %rax,%rcx
  800420d444:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d448:	48 01 c8             	add    %rcx,%rax
  800420d44b:	48 01 d0             	add    %rdx,%rax
  800420d44e:	48 83 c0 08          	add    $0x8,%rax
  800420d452:	48 8b 00             	mov    (%rax),%rax
  800420d455:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d45b:	83 f8 03             	cmp    $0x3,%eax
  800420d45e:	75 3f                	jne    800420d49f <sched_yield+0x1da>
  800420d460:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d467:	00 00 00 
  800420d46a:	ff d0                	callq  *%rax
  800420d46c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d473:	00 00 00 
  800420d476:	48 98                	cltq   
  800420d478:	48 c1 e0 03          	shl    $0x3,%rax
  800420d47c:	48 89 c1             	mov    %rax,%rcx
  800420d47f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d483:	48 01 c8             	add    %rcx,%rax
  800420d486:	48 01 d0             	add    %rdx,%rax
  800420d489:	48 83 c0 08          	add    $0x8,%rax
  800420d48d:	48 8b 00             	mov    (%rax),%rax
  800420d490:	48 89 c7             	mov    %rax,%rdi
  800420d493:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  800420d49a:	00 00 00 
  800420d49d:	ff d0                	callq  *%rax
  800420d49f:	48 b8 ad d4 20 04 80 	movabs $0x800420d4ad,%rax
  800420d4a6:	00 00 00 
  800420d4a9:	ff d0                	callq  *%rax
  800420d4ab:	c9                   	leaveq 
  800420d4ac:	c3                   	retq   

000000800420d4ad <sched_halt>:
  800420d4ad:	55                   	push   %rbp
  800420d4ae:	48 89 e5             	mov    %rsp,%rbp
  800420d4b1:	48 83 ec 20          	sub    $0x20,%rsp
  800420d4b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420d4bc:	eb 79                	jmp    800420d537 <sched_halt+0x8a>
  800420d4be:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d4c5:	00 00 00 
  800420d4c8:	48 8b 10             	mov    (%rax),%rdx
  800420d4cb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4ce:	48 98                	cltq   
  800420d4d0:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4d7:	48 01 d0             	add    %rdx,%rax
  800420d4da:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4e0:	83 f8 02             	cmp    $0x2,%eax
  800420d4e3:	74 5f                	je     800420d544 <sched_halt+0x97>
  800420d4e5:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d4ec:	00 00 00 
  800420d4ef:	48 8b 10             	mov    (%rax),%rdx
  800420d4f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4f5:	48 98                	cltq   
  800420d4f7:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4fe:	48 01 d0             	add    %rdx,%rax
  800420d501:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d507:	83 f8 03             	cmp    $0x3,%eax
  800420d50a:	74 38                	je     800420d544 <sched_halt+0x97>
  800420d50c:	48 b8 58 c2 49 04 80 	movabs $0x800449c258,%rax
  800420d513:	00 00 00 
  800420d516:	48 8b 10             	mov    (%rax),%rdx
  800420d519:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d51c:	48 98                	cltq   
  800420d51e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d525:	48 01 d0             	add    %rdx,%rax
  800420d528:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d52e:	83 f8 01             	cmp    $0x1,%eax
  800420d531:	74 11                	je     800420d544 <sched_halt+0x97>
  800420d533:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420d537:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420d53e:	0f 8e 7a ff ff ff    	jle    800420d4be <sched_halt+0x11>
  800420d544:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420d54b:	75 2e                	jne    800420d57b <sched_halt+0xce>
  800420d54d:	48 bf e0 a2 21 04 80 	movabs $0x800421a2e0,%rdi
  800420d554:	00 00 00 
  800420d557:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d55c:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420d563:	00 00 00 
  800420d566:	ff d2                	callq  *%rdx
  800420d568:	bf 00 00 00 00       	mov    $0x0,%edi
  800420d56d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420d574:	00 00 00 
  800420d577:	ff d0                	callq  *%rax
  800420d579:	eb ed                	jmp    800420d568 <sched_halt+0xbb>
  800420d57b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d582:	00 00 00 
  800420d585:	ff d0                	callq  *%rax
  800420d587:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d58e:	00 00 00 
  800420d591:	48 98                	cltq   
  800420d593:	48 c1 e0 03          	shl    $0x3,%rax
  800420d597:	48 89 c1             	mov    %rax,%rcx
  800420d59a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d59e:	48 01 c8             	add    %rcx,%rax
  800420d5a1:	48 01 d0             	add    %rdx,%rax
  800420d5a4:	48 83 c0 08          	add    $0x8,%rax
  800420d5a8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d5af:	48 b8 e8 b5 69 04 80 	movabs $0x800469b5e8,%rax
  800420d5b6:	00 00 00 
  800420d5b9:	48 8b 00             	mov    (%rax),%rax
  800420d5bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420d5c0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420d5c7:	00 00 00 
  800420d5ca:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420d5ce:	77 32                	ja     800420d602 <sched_halt+0x155>
  800420d5d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d5d4:	48 89 c1             	mov    %rax,%rcx
  800420d5d7:	48 ba 10 a3 21 04 80 	movabs $0x800421a310,%rdx
  800420d5de:	00 00 00 
  800420d5e1:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420d5e6:	48 bf 34 a3 21 04 80 	movabs $0x800421a334,%rdi
  800420d5ed:	00 00 00 
  800420d5f0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d5f5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420d5fc:	00 00 00 
  800420d5ff:	41 ff d0             	callq  *%r8
  800420d602:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420d609:	ff ff ff 
  800420d60c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d610:	48 01 d0             	add    %rdx,%rax
  800420d613:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420d617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d61b:	0f 22 d8             	mov    %rax,%cr3
  800420d61e:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d625:	00 00 00 
  800420d628:	ff d0                	callq  *%rax
  800420d62a:	48 98                	cltq   
  800420d62c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d630:	48 89 c2             	mov    %rax,%rdx
  800420d633:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d637:	48 01 d0             	add    %rdx,%rax
  800420d63a:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d641:	00 00 00 
  800420d644:	48 01 d0             	add    %rdx,%rax
  800420d647:	48 83 c0 04          	add    $0x4,%rax
  800420d64b:	be 02 00 00 00       	mov    $0x2,%esi
  800420d650:	48 89 c7             	mov    %rax,%rdi
  800420d653:	48 b8 82 d2 20 04 80 	movabs $0x800420d282,%rax
  800420d65a:	00 00 00 
  800420d65d:	ff d0                	callq  *%rax
  800420d65f:	48 b8 a7 d2 20 04 80 	movabs $0x800420d2a7,%rax
  800420d666:	00 00 00 
  800420d669:	ff d0                	callq  *%rax
  800420d66b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d672:	00 00 00 
  800420d675:	ff d0                	callq  *%rax
  800420d677:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d67e:	00 00 00 
  800420d681:	48 98                	cltq   
  800420d683:	48 c1 e0 03          	shl    $0x3,%rax
  800420d687:	48 89 c1             	mov    %rax,%rcx
  800420d68a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d68e:	48 01 c8             	add    %rcx,%rax
  800420d691:	48 01 d0             	add    %rdx,%rax
  800420d694:	48 83 c0 10          	add    $0x10,%rax
  800420d698:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420d69c:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420d6a3:	48 89 c4             	mov    %rax,%rsp
  800420d6a6:	6a 00                	pushq  $0x0
  800420d6a8:	6a 00                	pushq  $0x0
  800420d6aa:	fb                   	sti    
  800420d6ab:	f4                   	hlt    
  800420d6ac:	c9                   	leaveq 
  800420d6ad:	c3                   	retq   

000000800420d6ae <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420d6ae:	55                   	push   %rbp
  800420d6af:	48 89 e5             	mov    %rsp,%rbp
  800420d6b2:	48 83 ec 10          	sub    $0x10,%rsp
  800420d6b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d6ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420d6be:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d6c5:	00 00 00 
  800420d6c8:	ff d0                	callq  *%rax
  800420d6ca:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d6d1:	00 00 00 
  800420d6d4:	48 98                	cltq   
  800420d6d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d6da:	48 89 c1             	mov    %rax,%rcx
  800420d6dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d6e1:	48 01 c8             	add    %rcx,%rax
  800420d6e4:	48 01 d0             	add    %rdx,%rax
  800420d6e7:	48 83 c0 08          	add    $0x8,%rax
  800420d6eb:	48 8b 00             	mov    (%rax),%rax
  800420d6ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d6f2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d6f6:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d6fb:	48 89 c7             	mov    %rax,%rdi
  800420d6fe:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d705:	00 00 00 
  800420d708:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420d70a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d70e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d712:	48 89 c6             	mov    %rax,%rsi
  800420d715:	48 bf 48 a3 21 04 80 	movabs $0x800421a348,%rdi
  800420d71c:	00 00 00 
  800420d71f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d724:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420d72b:	00 00 00 
  800420d72e:	ff d1                	callq  *%rcx
}
  800420d730:	c9                   	leaveq 
  800420d731:	c3                   	retq   

000000800420d732 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420d732:	55                   	push   %rbp
  800420d733:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420d736:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  800420d73d:	00 00 00 
  800420d740:	ff d0                	callq  *%rax
}
  800420d742:	5d                   	pop    %rbp
  800420d743:	c3                   	retq   

000000800420d744 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420d744:	55                   	push   %rbp
  800420d745:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420d748:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d74f:	00 00 00 
  800420d752:	ff d0                	callq  *%rax
  800420d754:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d75b:	00 00 00 
  800420d75e:	48 98                	cltq   
  800420d760:	48 c1 e0 03          	shl    $0x3,%rax
  800420d764:	48 89 c1             	mov    %rax,%rcx
  800420d767:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d76b:	48 01 c8             	add    %rcx,%rax
  800420d76e:	48 01 d0             	add    %rdx,%rax
  800420d771:	48 83 c0 08          	add    $0x8,%rax
  800420d775:	48 8b 00             	mov    (%rax),%rax
  800420d778:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d77e:	5d                   	pop    %rbp
  800420d77f:	c3                   	retq   

000000800420d780 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420d780:	55                   	push   %rbp
  800420d781:	48 89 e5             	mov    %rsp,%rbp
  800420d784:	48 83 ec 20          	sub    $0x20,%rsp
  800420d788:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d78b:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d78f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d792:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d797:	48 89 ce             	mov    %rcx,%rsi
  800420d79a:	89 c7                	mov    %eax,%edi
  800420d79c:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d7a3:	00 00 00 
  800420d7a6:	ff d0                	callq  *%rax
  800420d7a8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d7ab:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d7af:	79 05                	jns    800420d7b6 <sys_env_destroy+0x36>
		return r;
  800420d7b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d7b4:	eb 18                	jmp    800420d7ce <sys_env_destroy+0x4e>
	env_destroy(e);
  800420d7b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d7ba:	48 89 c7             	mov    %rax,%rdi
  800420d7bd:	48 b8 ab 8e 20 04 80 	movabs $0x8004208eab,%rax
  800420d7c4:	00 00 00 
  800420d7c7:	ff d0                	callq  *%rax
	return 0;
  800420d7c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d7ce:	c9                   	leaveq 
  800420d7cf:	c3                   	retq   

000000800420d7d0 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420d7d0:	55                   	push   %rbp
  800420d7d1:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420d7d4:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  800420d7db:	00 00 00 
  800420d7de:	ff d0                	callq  *%rax

000000800420d7e0 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420d7e0:	55                   	push   %rbp
  800420d7e1:	48 89 e5             	mov    %rsp,%rbp
  800420d7e4:	53                   	push   %rbx
  800420d7e5:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420d7e9:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d7f0:	00 00 00 
  800420d7f3:	ff d0                	callq  *%rax
  800420d7f5:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d7fc:	00 00 00 
  800420d7ff:	48 98                	cltq   
  800420d801:	48 c1 e0 03          	shl    $0x3,%rax
  800420d805:	48 89 c1             	mov    %rax,%rcx
  800420d808:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d80c:	48 01 c8             	add    %rcx,%rax
  800420d80f:	48 01 d0             	add    %rdx,%rax
  800420d812:	48 83 c0 08          	add    $0x8,%rax
  800420d816:	48 8b 00             	mov    (%rax),%rax
  800420d819:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420d81f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420d823:	89 d6                	mov    %edx,%esi
  800420d825:	48 89 c7             	mov    %rax,%rdi
  800420d828:	48 b8 16 83 20 04 80 	movabs $0x8004208316,%rax
  800420d82f:	00 00 00 
  800420d832:	ff d0                	callq  *%rax
  800420d834:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420d837:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420d83b:	79 05                	jns    800420d842 <sys_exofork+0x62>
		return r;
  800420d83d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d840:	eb 6c                	jmp    800420d8ae <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420d842:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d846:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420d84d:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420d850:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420d854:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d85b:	00 00 00 
  800420d85e:	ff d0                	callq  *%rax
  800420d860:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d867:	00 00 00 
  800420d86a:	48 98                	cltq   
  800420d86c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d870:	48 89 c1             	mov    %rax,%rcx
  800420d873:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d877:	48 01 c8             	add    %rcx,%rax
  800420d87a:	48 01 d0             	add    %rdx,%rax
  800420d87d:	48 83 c0 08          	add    $0x8,%rax
  800420d881:	48 8b 00             	mov    (%rax),%rax
  800420d884:	48 89 da             	mov    %rbx,%rdx
  800420d887:	48 89 c6             	mov    %rax,%rsi
  800420d88a:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d88f:	48 89 d7             	mov    %rdx,%rdi
  800420d892:	48 89 c1             	mov    %rax,%rcx
  800420d895:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420d898:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d89c:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420d8a3:	00 
	return e->env_id;
  800420d8a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d8a8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420d8ae:	48 83 c4 18          	add    $0x18,%rsp
  800420d8b2:	5b                   	pop    %rbx
  800420d8b3:	5d                   	pop    %rbp
  800420d8b4:	c3                   	retq   

000000800420d8b5 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420d8b5:	55                   	push   %rbp
  800420d8b6:	48 89 e5             	mov    %rsp,%rbp
  800420d8b9:	48 83 ec 20          	sub    $0x20,%rsp
  800420d8bd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d8c0:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d8c3:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d8c7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d8ca:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d8cf:	48 89 ce             	mov    %rcx,%rsi
  800420d8d2:	89 c7                	mov    %eax,%edi
  800420d8d4:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d8db:	00 00 00 
  800420d8de:	ff d0                	callq  *%rax
  800420d8e0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d8e3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d8e7:	79 05                	jns    800420d8ee <sys_env_set_status+0x39>
		return r;
  800420d8e9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d8ec:	eb 25                	jmp    800420d913 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420d8ee:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420d8f2:	74 0d                	je     800420d901 <sys_env_set_status+0x4c>
  800420d8f4:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420d8f8:	74 07                	je     800420d901 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420d8fa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420d8ff:	eb 12                	jmp    800420d913 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420d901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d905:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420d908:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420d90e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d913:	c9                   	leaveq 
  800420d914:	c3                   	retq   

000000800420d915 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420d915:	55                   	push   %rbp
  800420d916:	48 89 e5             	mov    %rsp,%rbp
  800420d919:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420d920:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420d926:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420d92d:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420d934:	00 00 00 
  800420d937:	ff d0                	callq  *%rax
  800420d939:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420d940:	00 00 00 
  800420d943:	48 98                	cltq   
  800420d945:	48 c1 e0 03          	shl    $0x3,%rax
  800420d949:	48 89 c1             	mov    %rax,%rcx
  800420d94c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d950:	48 01 c8             	add    %rcx,%rax
  800420d953:	48 01 d0             	add    %rdx,%rax
  800420d956:	48 83 c0 08          	add    $0x8,%rax
  800420d95a:	48 8b 00             	mov    (%rax),%rax
  800420d95d:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420d964:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d969:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420d96e:	48 89 c7             	mov    %rax,%rdi
  800420d971:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d978:	00 00 00 
  800420d97b:	ff d0                	callq  *%rax
	ltf = *tf;
  800420d97d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420d984:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420d98b:	48 89 c6             	mov    %rax,%rsi
  800420d98e:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d993:	48 89 d7             	mov    %rdx,%rdi
  800420d996:	48 89 c1             	mov    %rax,%rcx
  800420d999:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420d99c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d9a0:	80 cc 02             	or     $0x2,%ah
  800420d9a3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420d9a7:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420d9ab:	83 c8 03             	or     $0x3,%eax
  800420d9ae:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420d9b2:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d9b6:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420d9bc:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d9c1:	48 89 ce             	mov    %rcx,%rsi
  800420d9c4:	89 c7                	mov    %eax,%edi
  800420d9c6:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d9cd:	00 00 00 
  800420d9d0:	ff d0                	callq  *%rax
  800420d9d2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9d5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9d9:	79 05                	jns    800420d9e0 <sys_env_set_trapframe+0xcb>
		return r;
  800420d9db:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9de:	eb 21                	jmp    800420da01 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420d9e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d9e4:	48 89 c2             	mov    %rax,%rdx
  800420d9e7:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420d9ee:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d9f3:	48 89 d7             	mov    %rdx,%rdi
  800420d9f6:	48 89 c1             	mov    %rax,%rcx
  800420d9f9:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420d9fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420da01:	c9                   	leaveq 
  800420da02:	c3                   	retq   

000000800420da03 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420da03:	55                   	push   %rbp
  800420da04:	48 89 e5             	mov    %rsp,%rbp
  800420da07:	48 83 ec 20          	sub    $0x20,%rsp
  800420da0b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420da0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420da12:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420da16:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420da19:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da1e:	48 89 ce             	mov    %rcx,%rsi
  800420da21:	89 c7                	mov    %eax,%edi
  800420da23:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420da2a:	00 00 00 
  800420da2d:	ff d0                	callq  *%rax
  800420da2f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da32:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da36:	79 05                	jns    800420da3d <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420da38:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da3b:	eb 14                	jmp    800420da51 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420da3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420da45:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420da4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420da51:	c9                   	leaveq 
  800420da52:	c3                   	retq   

000000800420da53 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420da53:	55                   	push   %rbp
  800420da54:	48 89 e5             	mov    %rsp,%rbp
  800420da57:	48 83 ec 30          	sub    $0x30,%rsp
  800420da5b:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420da5e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420da62:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420da65:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420da69:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420da6c:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da71:	48 89 ce             	mov    %rcx,%rsi
  800420da74:	89 c7                	mov    %eax,%edi
  800420da76:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420da7d:	00 00 00 
  800420da80:	ff d0                	callq  *%rax
  800420da82:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da85:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da89:	79 08                	jns    800420da93 <sys_page_alloc+0x40>
		return r;
  800420da8b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da8e:	e9 a7 00 00 00       	jmpq   800420db3a <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420da93:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420da96:	f7 d0                	not    %eax
  800420da98:	83 e0 05             	and    $0x5,%eax
  800420da9b:	85 c0                	test   %eax,%eax
  800420da9d:	75 0c                	jne    800420daab <sys_page_alloc+0x58>
  800420da9f:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420daa2:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420daa7:	85 c0                	test   %eax,%eax
  800420daa9:	74 0a                	je     800420dab5 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420daab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dab0:	e9 85 00 00 00       	jmpq   800420db3a <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420dab5:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dabc:	00 00 00 
  800420dabf:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420dac3:	76 07                	jbe    800420dacc <sys_page_alloc+0x79>
		return -E_INVAL;
  800420dac5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420daca:	eb 6e                	jmp    800420db3a <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420dacc:	bf 01 00 00 00       	mov    $0x1,%edi
  800420dad1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420dad8:	00 00 00 
  800420dadb:	ff d0                	callq  *%rax
  800420dadd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dae1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420dae6:	75 07                	jne    800420daef <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420dae8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420daed:	eb 4b                	jmp    800420db3a <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420daef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420daf3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dafa:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420dafd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420db01:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420db05:	48 89 c7             	mov    %rax,%rdi
  800420db08:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420db0f:	00 00 00 
  800420db12:	ff d0                	callq  *%rax
  800420db14:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db17:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db1b:	79 18                	jns    800420db35 <sys_page_alloc+0xe2>
		page_free(pp);
  800420db1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420db21:	48 89 c7             	mov    %rax,%rdi
  800420db24:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420db2b:	00 00 00 
  800420db2e:	ff d0                	callq  *%rax
		return r;
  800420db30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420db33:	eb 05                	jmp    800420db3a <sys_page_alloc+0xe7>
	}
	return 0;
  800420db35:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420db3a:	c9                   	leaveq 
  800420db3b:	c3                   	retq   

000000800420db3c <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420db3c:	55                   	push   %rbp
  800420db3d:	48 89 e5             	mov    %rsp,%rbp
  800420db40:	48 83 ec 60          	sub    $0x60,%rsp
  800420db44:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420db47:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420db4b:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420db4e:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420db52:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420db56:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db5d:	00 00 00 
  800420db60:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420db64:	77 10                	ja     800420db76 <sys_page_map+0x3a>
  800420db66:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db6d:	00 00 00 
  800420db70:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420db74:	76 0a                	jbe    800420db80 <sys_page_map+0x44>
		return -E_INVAL;
  800420db76:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db7b:	e9 3f 01 00 00       	jmpq   800420dcbf <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420db80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420db84:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420db88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420db8c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420db92:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420db96:	75 18                	jne    800420dbb0 <sys_page_map+0x74>
  800420db98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420db9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420dba0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dba4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dbaa:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420dbae:	74 0a                	je     800420dbba <sys_page_map+0x7e>
		return -E_INVAL;
  800420dbb0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbb5:	e9 05 01 00 00       	jmpq   800420dcbf <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420dbba:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dbbe:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dbc1:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dbc6:	48 89 ce             	mov    %rcx,%rsi
  800420dbc9:	89 c7                	mov    %eax,%edi
  800420dbcb:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dbd2:	00 00 00 
  800420dbd5:	ff d0                	callq  *%rax
  800420dbd7:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dbda:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dbde:	78 26                	js     800420dc06 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420dbe0:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420dbe4:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420dbe7:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dbec:	48 89 ce             	mov    %rcx,%rsi
  800420dbef:	89 c7                	mov    %eax,%edi
  800420dbf1:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dbf8:	00 00 00 
  800420dbfb:	ff d0                	callq  *%rax
  800420dbfd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc00:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc04:	79 08                	jns    800420dc0e <sys_page_map+0xd2>
		return r;
  800420dc06:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc09:	e9 b1 00 00 00       	jmpq   800420dcbf <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420dc0e:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc11:	f7 d0                	not    %eax
  800420dc13:	83 e0 05             	and    $0x5,%eax
  800420dc16:	85 c0                	test   %eax,%eax
  800420dc18:	75 0c                	jne    800420dc26 <sys_page_map+0xea>
  800420dc1a:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc1d:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dc22:	85 c0                	test   %eax,%eax
  800420dc24:	74 0a                	je     800420dc30 <sys_page_map+0xf4>
		return -E_INVAL;
  800420dc26:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc2b:	e9 8f 00 00 00       	jmpq   800420dcbf <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420dc30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dc34:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc3b:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420dc3f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420dc43:	48 89 ce             	mov    %rcx,%rsi
  800420dc46:	48 89 c7             	mov    %rax,%rdi
  800420dc49:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420dc50:	00 00 00 
  800420dc53:	ff d0                	callq  *%rax
  800420dc55:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420dc59:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420dc5e:	75 07                	jne    800420dc67 <sys_page_map+0x12b>
		return -E_INVAL;
  800420dc60:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc65:	eb 58                	jmp    800420dcbf <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420dc67:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc6a:	83 e0 02             	and    $0x2,%eax
  800420dc6d:	85 c0                	test   %eax,%eax
  800420dc6f:	74 16                	je     800420dc87 <sys_page_map+0x14b>
  800420dc71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dc75:	48 8b 00             	mov    (%rax),%rax
  800420dc78:	83 e0 02             	and    $0x2,%eax
  800420dc7b:	48 85 c0             	test   %rax,%rax
  800420dc7e:	75 07                	jne    800420dc87 <sys_page_map+0x14b>
		return -E_INVAL;
  800420dc80:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc85:	eb 38                	jmp    800420dcbf <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420dc87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dc8b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc92:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420dc95:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420dc99:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dc9d:	48 89 c7             	mov    %rax,%rdi
  800420dca0:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dca7:	00 00 00 
  800420dcaa:	ff d0                	callq  *%rax
  800420dcac:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dcaf:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dcb3:	79 05                	jns    800420dcba <sys_page_map+0x17e>
		return r;
  800420dcb5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dcb8:	eb 05                	jmp    800420dcbf <sys_page_map+0x183>
	return 0;
  800420dcba:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dcbf:	c9                   	leaveq 
  800420dcc0:	c3                   	retq   

000000800420dcc1 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420dcc1:	55                   	push   %rbp
  800420dcc2:	48 89 e5             	mov    %rsp,%rbp
  800420dcc5:	48 83 ec 20          	sub    $0x20,%rsp
  800420dcc9:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dccc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420dcd0:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dcd4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dcd7:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dcdc:	48 89 ce             	mov    %rcx,%rsi
  800420dcdf:	89 c7                	mov    %eax,%edi
  800420dce1:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dce8:	00 00 00 
  800420dceb:	ff d0                	callq  *%rax
  800420dced:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dcf0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dcf4:	79 05                	jns    800420dcfb <sys_page_unmap+0x3a>
		return r;
  800420dcf6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dcf9:	eb 4b                	jmp    800420dd46 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420dcfb:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd02:	00 00 00 
  800420dd05:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420dd09:	77 0e                	ja     800420dd19 <sys_page_unmap+0x58>
  800420dd0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dd0f:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420dd14:	48 85 c0             	test   %rax,%rax
  800420dd17:	74 07                	je     800420dd20 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420dd19:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dd1e:	eb 26                	jmp    800420dd46 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420dd20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd24:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dd2b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420dd2f:	48 89 d6             	mov    %rdx,%rsi
  800420dd32:	48 89 c7             	mov    %rax,%rdi
  800420dd35:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  800420dd3c:	00 00 00 
  800420dd3f:	ff d0                	callq  *%rax
	return 0;
  800420dd41:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420dd46:	c9                   	leaveq 
  800420dd47:	c3                   	retq   

000000800420dd48 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420dd48:	55                   	push   %rbp
  800420dd49:	48 89 e5             	mov    %rsp,%rbp
  800420dd4c:	53                   	push   %rbx
  800420dd4d:	48 83 ec 48          	sub    $0x48,%rsp
  800420dd51:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420dd54:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420dd57:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420dd5b:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420dd5e:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dd62:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420dd65:	ba 00 00 00 00       	mov    $0x0,%edx
  800420dd6a:	48 89 ce             	mov    %rcx,%rsi
  800420dd6d:	89 c7                	mov    %eax,%edi
  800420dd6f:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dd76:	00 00 00 
  800420dd79:	ff d0                	callq  *%rax
  800420dd7b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dd7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420dd82:	79 08                	jns    800420dd8c <sys_ipc_try_send+0x44>
        return r;
  800420dd84:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dd87:	e9 25 03 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420dd8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dd90:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420dd97:	83 f0 01             	xor    $0x1,%eax
  800420dd9a:	84 c0                	test   %al,%al
  800420dd9c:	74 0a                	je     800420dda8 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420dd9e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420dda3:	e9 09 03 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420dda8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420ddaf:	00 00 00 
  800420ddb2:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420ddb6:	0f 87 70 02 00 00    	ja     800420e02c <sys_ipc_try_send+0x2e4>
  800420ddbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ddc0:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420ddc7:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420ddce:	00 00 00 
  800420ddd1:	48 39 c2             	cmp    %rax,%rdx
  800420ddd4:	0f 87 52 02 00 00    	ja     800420e02c <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420ddda:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dddd:	f7 d0                	not    %eax
  800420dddf:	83 e0 05             	and    $0x5,%eax
  800420dde2:	85 c0                	test   %eax,%eax
  800420dde4:	75 0c                	jne    800420ddf2 <sys_ipc_try_send+0xaa>
  800420dde6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dde9:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420ddee:	85 c0                	test   %eax,%eax
  800420ddf0:	74 60                	je     800420de52 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420ddf2:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ddf9:	00 00 00 
  800420ddfc:	ff d0                	callq  *%rax
  800420ddfe:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de05:	00 00 00 
  800420de08:	48 98                	cltq   
  800420de0a:	48 c1 e0 03          	shl    $0x3,%rax
  800420de0e:	48 89 c1             	mov    %rax,%rcx
  800420de11:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de15:	48 01 c8             	add    %rcx,%rax
  800420de18:	48 01 d0             	add    %rdx,%rax
  800420de1b:	48 83 c0 08          	add    $0x8,%rax
  800420de1f:	48 8b 00             	mov    (%rax),%rax
  800420de22:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420de28:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420de2b:	89 c6                	mov    %eax,%esi
  800420de2d:	48 bf 50 a3 21 04 80 	movabs $0x800421a350,%rdi
  800420de34:	00 00 00 
  800420de37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de3c:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420de43:	00 00 00 
  800420de46:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420de48:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420de4d:	e9 5f 02 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420de52:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420de59:	00 00 00 
  800420de5c:	ff d0                	callq  *%rax
  800420de5e:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420de65:	00 00 00 
  800420de68:	48 98                	cltq   
  800420de6a:	48 c1 e0 03          	shl    $0x3,%rax
  800420de6e:	48 89 c1             	mov    %rax,%rcx
  800420de71:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de75:	48 01 c8             	add    %rcx,%rax
  800420de78:	48 01 d0             	add    %rdx,%rax
  800420de7b:	48 83 c0 08          	add    $0x8,%rax
  800420de7f:	48 8b 00             	mov    (%rax),%rax
  800420de82:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420de89:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420de8d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420de91:	48 89 ce             	mov    %rcx,%rsi
  800420de94:	48 89 c7             	mov    %rax,%rdi
  800420de97:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420de9e:	00 00 00 
  800420dea1:	ff d0                	callq  *%rax
  800420dea3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420dea7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420deac:	75 61                	jne    800420df0f <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420deae:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420deb5:	00 00 00 
  800420deb8:	ff d0                	callq  *%rax
  800420deba:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420dec1:	00 00 00 
  800420dec4:	48 98                	cltq   
  800420dec6:	48 c1 e0 03          	shl    $0x3,%rax
  800420deca:	48 89 c1             	mov    %rax,%rcx
  800420decd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ded1:	48 01 c8             	add    %rcx,%rax
  800420ded4:	48 01 d0             	add    %rdx,%rax
  800420ded7:	48 83 c0 08          	add    $0x8,%rax
  800420dedb:	48 8b 00             	mov    (%rax),%rax
  800420dede:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dee4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420dee8:	89 c6                	mov    %eax,%esi
  800420deea:	48 bf 78 a3 21 04 80 	movabs $0x800421a378,%rdi
  800420def1:	00 00 00 
  800420def4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420def9:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  800420df00:	00 00 00 
  800420df03:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420df05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420df0a:	e9 a2 01 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420df0f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420df12:	83 e0 02             	and    $0x2,%eax
  800420df15:	85 c0                	test   %eax,%eax
  800420df17:	74 6c                	je     800420df85 <sys_ipc_try_send+0x23d>
  800420df19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420df1d:	48 8b 00             	mov    (%rax),%rax
  800420df20:	83 e0 02             	and    $0x2,%eax
  800420df23:	48 85 c0             	test   %rax,%rax
  800420df26:	75 5d                	jne    800420df85 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420df28:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420df2f:	00 00 00 
  800420df32:	ff d0                	callq  *%rax
  800420df34:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420df3b:	00 00 00 
  800420df3e:	48 98                	cltq   
  800420df40:	48 c1 e0 03          	shl    $0x3,%rax
  800420df44:	48 89 c1             	mov    %rax,%rcx
  800420df47:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df4b:	48 01 c8             	add    %rcx,%rax
  800420df4e:	48 01 d0             	add    %rdx,%rax
  800420df51:	48 83 c0 08          	add    $0x8,%rax
  800420df55:	48 8b 00             	mov    (%rax),%rax
  800420df58:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420df5e:	89 c6                	mov    %eax,%esi
  800420df60:	48 bf b0 a3 21 04 80 	movabs $0x800421a3b0,%rdi
  800420df67:	00 00 00 
  800420df6a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df6f:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420df76:	00 00 00 
  800420df79:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420df7b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420df80:	e9 2c 01 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420df85:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420df88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df8c:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420df93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df97:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420df9e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dfa2:	48 89 c7             	mov    %rax,%rdi
  800420dfa5:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dfac:	00 00 00 
  800420dfaf:	ff d0                	callq  *%rax
  800420dfb1:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420dfb4:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420dfb8:	79 63                	jns    800420e01d <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420dfba:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420dfc1:	00 00 00 
  800420dfc4:	ff d0                	callq  *%rax
  800420dfc6:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420dfcd:	00 00 00 
  800420dfd0:	48 98                	cltq   
  800420dfd2:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfd6:	48 89 c1             	mov    %rax,%rcx
  800420dfd9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfdd:	48 01 c8             	add    %rcx,%rax
  800420dfe0:	48 01 d0             	add    %rdx,%rax
  800420dfe3:	48 83 c0 08          	add    $0x8,%rax
  800420dfe7:	48 8b 00             	mov    (%rax),%rax
  800420dfea:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dff0:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420dff3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420dff7:	89 c6                	mov    %eax,%esi
  800420dff9:	48 bf f8 a3 21 04 80 	movabs $0x800421a3f8,%rdi
  800420e000:	00 00 00 
  800420e003:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e008:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  800420e00f:	00 00 00 
  800420e012:	41 ff d0             	callq  *%r8
            return r;
  800420e015:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e018:	e9 94 00 00 00       	jmpq   800420e0b1 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e01d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e021:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e024:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e02a:	eb 0e                	jmp    800420e03a <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e02c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e030:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e037:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e03a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e03e:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e045:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e049:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e050:	00 00 00 
  800420e053:	ff d0                	callq  *%rax
  800420e055:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e05c:	00 00 00 
  800420e05f:	48 98                	cltq   
  800420e061:	48 c1 e0 03          	shl    $0x3,%rax
  800420e065:	48 89 c1             	mov    %rax,%rcx
  800420e068:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e06c:	48 01 c8             	add    %rcx,%rax
  800420e06f:	48 01 d0             	add    %rdx,%rax
  800420e072:	48 83 c0 08          	add    $0x8,%rax
  800420e076:	48 8b 00             	mov    (%rax),%rax
  800420e079:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e07f:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e085:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e089:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e08c:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e092:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e096:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e09d:	00 
    e->env_status = ENV_RUNNABLE;
  800420e09e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e0a2:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e0a9:	00 00 00 
    return 0;
  800420e0ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e0b1:	48 83 c4 48          	add    $0x48,%rsp
  800420e0b5:	5b                   	pop    %rbx
  800420e0b6:	5d                   	pop    %rbp
  800420e0b7:	c3                   	retq   

000000800420e0b8 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e0b8:	55                   	push   %rbp
  800420e0b9:	48 89 e5             	mov    %rsp,%rbp
  800420e0bc:	48 83 ec 10          	sub    $0x10,%rsp
  800420e0c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e0c4:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e0cb:	00 00 00 
  800420e0ce:	ff d0                	callq  *%rax
  800420e0d0:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e0d7:	00 00 00 
  800420e0da:	48 98                	cltq   
  800420e0dc:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0e0:	48 89 c1             	mov    %rax,%rcx
  800420e0e3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0e7:	48 01 c8             	add    %rcx,%rax
  800420e0ea:	48 01 d0             	add    %rdx,%rax
  800420e0ed:	48 83 c0 08          	add    $0x8,%rax
  800420e0f1:	48 8b 00             	mov    (%rax),%rax
  800420e0f4:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e0fb:	84 c0                	test   %al,%al
  800420e0fd:	74 2a                	je     800420e129 <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e0ff:	48 ba 31 a4 21 04 80 	movabs $0x800421a431,%rdx
  800420e106:	00 00 00 
  800420e109:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e10e:	48 bf 42 a4 21 04 80 	movabs $0x800421a442,%rdi
  800420e115:	00 00 00 
  800420e118:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e11d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420e124:	00 00 00 
  800420e127:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420e129:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e130:	00 00 00 
  800420e133:	ff d0                	callq  *%rax
  800420e135:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e13c:	00 00 00 
  800420e13f:	48 98                	cltq   
  800420e141:	48 c1 e0 03          	shl    $0x3,%rax
  800420e145:	48 89 c1             	mov    %rax,%rcx
  800420e148:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e14c:	48 01 c8             	add    %rcx,%rax
  800420e14f:	48 01 d0             	add    %rdx,%rax
  800420e152:	48 83 c0 08          	add    $0x8,%rax
  800420e156:	48 8b 00             	mov    (%rax),%rax
  800420e159:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420e160:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e167:	00 00 00 
  800420e16a:	ff d0                	callq  *%rax
  800420e16c:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e173:	00 00 00 
  800420e176:	48 98                	cltq   
  800420e178:	48 c1 e0 03          	shl    $0x3,%rax
  800420e17c:	48 89 c1             	mov    %rax,%rcx
  800420e17f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e183:	48 01 c8             	add    %rcx,%rax
  800420e186:	48 01 d0             	add    %rdx,%rax
  800420e189:	48 83 c0 08          	add    $0x8,%rax
  800420e18d:	48 8b 00             	mov    (%rax),%rax
  800420e190:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e194:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420e19b:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e1a2:	00 00 00 
  800420e1a5:	ff d0                	callq  *%rax
  800420e1a7:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e1ae:	00 00 00 
  800420e1b1:	48 98                	cltq   
  800420e1b3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1b7:	48 89 c1             	mov    %rax,%rcx
  800420e1ba:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1be:	48 01 c8             	add    %rcx,%rax
  800420e1c1:	48 01 d0             	add    %rdx,%rax
  800420e1c4:	48 83 c0 08          	add    $0x8,%rax
  800420e1c8:	48 8b 00             	mov    (%rax),%rax
  800420e1cb:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e1d2:	00 00 00 
	sched_yield();
  800420e1d5:	48 b8 c5 d2 20 04 80 	movabs $0x800420d2c5,%rax
  800420e1dc:	00 00 00 
  800420e1df:	ff d0                	callq  *%rax

000000800420e1e1 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420e1e1:	55                   	push   %rbp
  800420e1e2:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420e1e5:	48 b8 d0 88 21 04 80 	movabs $0x80042188d0,%rax
  800420e1ec:	00 00 00 
  800420e1ef:	ff d0                	callq  *%rax
}
  800420e1f1:	5d                   	pop    %rbp
  800420e1f2:	c3                   	retq   

000000800420e1f3 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420e1f3:	55                   	push   %rbp
  800420e1f4:	48 89 e5             	mov    %rsp,%rbp
  800420e1f7:	48 83 ec 10          	sub    $0x10,%rsp
  800420e1fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e1ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420e203:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e20a:	00 00 00 
  800420e20d:	ff d0                	callq  *%rax
  800420e20f:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e216:	00 00 00 
  800420e219:	48 98                	cltq   
  800420e21b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e21f:	48 89 c1             	mov    %rax,%rcx
  800420e222:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e226:	48 01 c8             	add    %rcx,%rax
  800420e229:	48 01 d0             	add    %rdx,%rax
  800420e22c:	48 83 c0 08          	add    $0x8,%rax
  800420e230:	48 8b 00             	mov    (%rax),%rax
  800420e233:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e237:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e23b:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e240:	48 89 c7             	mov    %rax,%rdi
  800420e243:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e24a:	00 00 00 
  800420e24d:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420e24f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e253:	89 c2                	mov    %eax,%edx
  800420e255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e259:	89 d6                	mov    %edx,%esi
  800420e25b:	48 89 c7             	mov    %rax,%rdi
  800420e25e:	48 b8 59 7a 21 04 80 	movabs $0x8004217a59,%rax
  800420e265:	00 00 00 
  800420e268:	ff d0                	callq  *%rax
}
  800420e26a:	c9                   	leaveq 
  800420e26b:	c3                   	retq   

000000800420e26c <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420e26c:	55                   	push   %rbp
  800420e26d:	48 89 e5             	mov    %rsp,%rbp
  800420e270:	48 83 ec 10          	sub    $0x10,%rsp
  800420e274:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e278:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420e27c:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420e283:	00 00 00 
  800420e286:	ff d0                	callq  *%rax
  800420e288:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420e28f:	00 00 00 
  800420e292:	48 98                	cltq   
  800420e294:	48 c1 e0 03          	shl    $0x3,%rax
  800420e298:	48 89 c1             	mov    %rax,%rcx
  800420e29b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e29f:	48 01 c8             	add    %rcx,%rax
  800420e2a2:	48 01 d0             	add    %rdx,%rax
  800420e2a5:	48 83 c0 08          	add    $0x8,%rax
  800420e2a9:	48 8b 00             	mov    (%rax),%rax
  800420e2ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e2b0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e2b4:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e2b9:	48 89 c7             	mov    %rax,%rdi
  800420e2bc:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e2c3:	00 00 00 
  800420e2c6:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420e2c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2cc:	89 c2                	mov    %eax,%edx
  800420e2ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e2d2:	89 d6                	mov    %edx,%esi
  800420e2d4:	48 89 c7             	mov    %rax,%rdi
  800420e2d7:	48 b8 c8 7b 21 04 80 	movabs $0x8004217bc8,%rax
  800420e2de:	00 00 00 
  800420e2e1:	ff d0                	callq  *%rax
}
  800420e2e3:	c9                   	leaveq 
  800420e2e4:	c3                   	retq   

000000800420e2e5 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420e2e5:	55                   	push   %rbp
  800420e2e6:	48 89 e5             	mov    %rsp,%rbp
  800420e2e9:	48 83 ec 30          	sub    $0x30,%rsp
  800420e2ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e2f1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e2f5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420e2f9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420e2fd:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420e301:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420e305:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
  800420e30a:	0f 87 0d 02 00 00    	ja     800420e51d <syscall+0x238>
  800420e310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e314:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420e31b:	00 
  800420e31c:	48 b8 58 a4 21 04 80 	movabs $0x800421a458,%rax
  800420e323:	00 00 00 
  800420e326:	48 01 d0             	add    %rdx,%rax
  800420e329:	48 8b 00             	mov    (%rax),%rax
  800420e32c:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420e32e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e332:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e336:	48 89 d6             	mov    %rdx,%rsi
  800420e339:	48 89 c7             	mov    %rax,%rdi
  800420e33c:	48 b8 ae d6 20 04 80 	movabs $0x800420d6ae,%rax
  800420e343:	00 00 00 
  800420e346:	ff d0                	callq  *%rax
		return 0;
  800420e348:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e34d:	e9 d2 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_cgetc:
		return sys_cgetc();
  800420e352:	48 b8 32 d7 20 04 80 	movabs $0x800420d732,%rax
  800420e359:	00 00 00 
  800420e35c:	ff d0                	callq  *%rax
  800420e35e:	48 98                	cltq   
  800420e360:	e9 bf 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_getenvid:
		return sys_getenvid();
  800420e365:	48 b8 44 d7 20 04 80 	movabs $0x800420d744,%rax
  800420e36c:	00 00 00 
  800420e36f:	ff d0                	callq  *%rax
  800420e371:	48 98                	cltq   
  800420e373:	e9 ac 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420e378:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e37c:	89 c7                	mov    %eax,%edi
  800420e37e:	48 b8 80 d7 20 04 80 	movabs $0x800420d780,%rax
  800420e385:	00 00 00 
  800420e388:	ff d0                	callq  *%rax
  800420e38a:	48 98                	cltq   
  800420e38c:	e9 93 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420e391:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e395:	89 c2                	mov    %eax,%edx
  800420e397:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420e39b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e39f:	48 89 ce             	mov    %rcx,%rsi
  800420e3a2:	89 c7                	mov    %eax,%edi
  800420e3a4:	48 b8 53 da 20 04 80 	movabs $0x800420da53,%rax
  800420e3ab:	00 00 00 
  800420e3ae:	ff d0                	callq  *%rax
  800420e3b0:	48 98                	cltq   
  800420e3b2:	e9 6d 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420e3b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3bb:	89 c7                	mov    %eax,%edi
  800420e3bd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420e3c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e3c5:	89 c2                	mov    %eax,%edx
  800420e3c7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420e3cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3cf:	41 89 f8             	mov    %edi,%r8d
  800420e3d2:	89 c7                	mov    %eax,%edi
  800420e3d4:	48 b8 3c db 20 04 80 	movabs $0x800420db3c,%rax
  800420e3db:	00 00 00 
  800420e3de:	ff d0                	callq  *%rax
  800420e3e0:	48 98                	cltq   
  800420e3e2:	e9 3d 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420e3e7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e3eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3ef:	48 89 d6             	mov    %rdx,%rsi
  800420e3f2:	89 c7                	mov    %eax,%edi
  800420e3f4:	48 b8 c1 dc 20 04 80 	movabs $0x800420dcc1,%rax
  800420e3fb:	00 00 00 
  800420e3fe:	ff d0                	callq  *%rax
  800420e400:	48 98                	cltq   
  800420e402:	e9 1d 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_exofork:
		return sys_exofork();
  800420e407:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420e40e:	00 00 00 
  800420e411:	ff d0                	callq  *%rax
  800420e413:	48 98                	cltq   
  800420e415:	e9 0a 01 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420e41a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e41e:	89 c2                	mov    %eax,%edx
  800420e420:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e424:	89 d6                	mov    %edx,%esi
  800420e426:	89 c7                	mov    %eax,%edi
  800420e428:	48 b8 b5 d8 20 04 80 	movabs $0x800420d8b5,%rax
  800420e42f:	00 00 00 
  800420e432:	ff d0                	callq  *%rax
  800420e434:	48 98                	cltq   
  800420e436:	e9 e9 00 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420e43b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e43f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e443:	48 89 d6             	mov    %rdx,%rsi
  800420e446:	89 c7                	mov    %eax,%edi
  800420e448:	48 b8 15 d9 20 04 80 	movabs $0x800420d915,%rax
  800420e44f:	00 00 00 
  800420e452:	ff d0                	callq  *%rax
  800420e454:	48 98                	cltq   
  800420e456:	e9 c9 00 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420e45b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e45f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e463:	48 89 d6             	mov    %rdx,%rsi
  800420e466:	89 c7                	mov    %eax,%edi
  800420e468:	48 b8 03 da 20 04 80 	movabs $0x800420da03,%rax
  800420e46f:	00 00 00 
  800420e472:	ff d0                	callq  *%rax
  800420e474:	48 98                	cltq   
  800420e476:	e9 a9 00 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_yield:
		sys_yield();
  800420e47b:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420e482:	00 00 00 
  800420e485:	ff d0                	callq  *%rax
		return 0;
  800420e487:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e48c:	e9 93 00 00 00       	jmpq   800420e524 <syscall+0x23f>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420e491:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e495:	89 c1                	mov    %eax,%ecx
  800420e497:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e49b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e49f:	89 c6                	mov    %eax,%esi
  800420e4a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4a5:	89 c7                	mov    %eax,%edi
  800420e4a7:	48 b8 48 dd 20 04 80 	movabs $0x800420dd48,%rax
  800420e4ae:	00 00 00 
  800420e4b1:	ff d0                	callq  *%rax
  800420e4b3:	48 98                	cltq   
  800420e4b5:	eb 6d                	jmp    800420e524 <syscall+0x23f>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420e4b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4bb:	48 89 c7             	mov    %rax,%rdi
  800420e4be:	48 b8 b8 e0 20 04 80 	movabs $0x800420e0b8,%rax
  800420e4c5:	00 00 00 
  800420e4c8:	ff d0                	callq  *%rax
		return 0;
  800420e4ca:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e4cf:	eb 53                	jmp    800420e524 <syscall+0x23f>
	case SYS_time_msec:
		return sys_time_msec();
  800420e4d1:	48 b8 e1 e1 20 04 80 	movabs $0x800420e1e1,%rax
  800420e4d8:	00 00 00 
  800420e4db:	ff d0                	callq  *%rax
  800420e4dd:	48 98                	cltq   
  800420e4df:	eb 43                	jmp    800420e524 <syscall+0x23f>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420e4e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e4e9:	48 89 d6             	mov    %rdx,%rsi
  800420e4ec:	48 89 c7             	mov    %rax,%rdi
  800420e4ef:	48 b8 f3 e1 20 04 80 	movabs $0x800420e1f3,%rax
  800420e4f6:	00 00 00 
  800420e4f9:	ff d0                	callq  *%rax
  800420e4fb:	48 98                	cltq   
  800420e4fd:	eb 25                	jmp    800420e524 <syscall+0x23f>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420e4ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e503:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e507:	48 89 d6             	mov    %rdx,%rsi
  800420e50a:	48 89 c7             	mov    %rax,%rdi
  800420e50d:	48 b8 6c e2 20 04 80 	movabs $0x800420e26c,%rax
  800420e514:	00 00 00 
  800420e517:	ff d0                	callq  *%rax
  800420e519:	48 98                	cltq   
  800420e51b:	eb 07                	jmp    800420e524 <syscall+0x23f>
		sys_vmx_incr_vmdisk_number();
		return 0;
#endif

	default:
		return -E_NO_SYS;
  800420e51d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420e524:	c9                   	leaveq 
  800420e525:	c3                   	retq   

000000800420e526 <list_func_die>:
  800420e526:	55                   	push   %rbp
  800420e527:	48 89 e5             	mov    %rsp,%rbp
  800420e52a:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420e531:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420e538:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420e53f:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420e546:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e54d:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420e554:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e558:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e55f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e566:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e56a:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420e571:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e578:	48 89 d1             	mov    %rdx,%rcx
  800420e57b:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e580:	48 89 ce             	mov    %rcx,%rsi
  800420e583:	48 89 c7             	mov    %rax,%rdi
  800420e586:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  800420e58d:	00 00 00 
  800420e590:	ff d0                	callq  *%rax
  800420e592:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420e599:	00 
  800420e59a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e5a1:	00 
  800420e5a2:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e5ad:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420e5b1:	74 0a                	je     800420e5bd <list_func_die+0x97>
  800420e5b3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e5b8:	e9 cd 06 00 00       	jmpq   800420ec8a <list_func_die+0x764>
  800420e5bd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420e5c4:	ba 38 00 00 00       	mov    $0x38,%edx
  800420e5c9:	be 00 00 00 00       	mov    $0x0,%esi
  800420e5ce:	48 89 c7             	mov    %rax,%rdi
  800420e5d1:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800420e5d8:	00 00 00 
  800420e5db:	ff d0                	callq  *%rax
  800420e5dd:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e5e4:	be 11 00 00 00       	mov    $0x11,%esi
  800420e5e9:	48 89 c7             	mov    %rax,%rdi
  800420e5ec:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e5f3:	00 00 00 
  800420e5f6:	ff d0                	callq  *%rax
  800420e5f8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420e5fc:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e603:	be 12 00 00 00       	mov    $0x12,%esi
  800420e608:	48 89 c7             	mov    %rax,%rdi
  800420e60b:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e612:	00 00 00 
  800420e615:	ff d0                	callq  *%rax
  800420e617:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420e61b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420e620:	0f 84 5f 06 00 00    	je     800420ec85 <list_func_die+0x75f>
  800420e626:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e62a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e62e:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e635:	0f 83 4a 06 00 00    	jae    800420ec85 <list_func_die+0x75f>
  800420e63b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e640:	0f 84 3f 06 00 00    	je     800420ec85 <list_func_die+0x75f>
  800420e646:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e64a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e64e:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e655:	0f 86 2a 06 00 00    	jbe    800420ec85 <list_func_die+0x75f>
  800420e65b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e662:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e669:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e670:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e677:	48 89 10             	mov    %rdx,(%rax)
  800420e67a:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e681:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e688:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e68f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420e693:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e69a:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420e6a1:	48 89 c7             	mov    %rax,%rdi
  800420e6a4:	48 b8 1b fd 20 04 80 	movabs $0x800420fd1b,%rax
  800420e6ab:	00 00 00 
  800420e6ae:	ff d0                	callq  *%rax
  800420e6b0:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420e6b7:	89 42 18             	mov    %eax,0x18(%rdx)
  800420e6ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e6be:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420e6c2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e6c9:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420e6cd:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e6d4:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e6db:	48 85 c0             	test   %rax,%rax
  800420e6de:	75 35                	jne    800420e715 <list_func_die+0x1ef>
  800420e6e0:	48 b9 00 a8 21 04 80 	movabs $0x800421a800,%rcx
  800420e6e7:	00 00 00 
  800420e6ea:	48 ba 0c a8 21 04 80 	movabs $0x800421a80c,%rdx
  800420e6f1:	00 00 00 
  800420e6f4:	be 95 00 00 00       	mov    $0x95,%esi
  800420e6f9:	48 bf 21 a8 21 04 80 	movabs $0x800421a821,%rdi
  800420e700:	00 00 00 
  800420e703:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e708:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420e70f:	00 00 00 
  800420e712:	41 ff d0             	callq  *%r8
  800420e715:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e71c:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e723:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420e72a:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420e731:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e736:	48 89 c7             	mov    %rax,%rdi
  800420e739:	48 b8 7c 55 21 04 80 	movabs $0x800421557c,%rax
  800420e740:	00 00 00 
  800420e743:	ff d0                	callq  *%rax
  800420e745:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420e74c:	89 c2                	mov    %eax,%edx
  800420e74e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e755:	89 50 08             	mov    %edx,0x8(%rax)
  800420e758:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e75f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420e766:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e76d:	00 00 00 
  800420e770:	48 8b 00             	mov    (%rax),%rax
  800420e773:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e77a:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e781:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e785:	48 89 c7             	mov    %rax,%rdi
  800420e788:	48 b8 2c 22 21 04 80 	movabs $0x800421222c,%rax
  800420e78f:	00 00 00 
  800420e792:	ff d0                	callq  *%rax
  800420e794:	83 f8 04             	cmp    $0x4,%eax
  800420e797:	0f 84 e1 04 00 00    	je     800420ec7e <list_func_die+0x758>
  800420e79d:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e7a4:	48 83 f8 05          	cmp    $0x5,%rax
  800420e7a8:	74 05                	je     800420e7af <list_func_die+0x289>
  800420e7aa:	e9 cf 04 00 00       	jmpq   800420ec7e <list_func_die+0x758>
  800420e7af:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e7b6:	be 49 00 00 00       	mov    $0x49,%esi
  800420e7bb:	48 89 c7             	mov    %rax,%rdi
  800420e7be:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e7c5:	00 00 00 
  800420e7c8:	ff d0                	callq  *%rax
  800420e7ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e7ce:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e7d3:	0f 84 d7 00 00 00    	je     800420e8b0 <list_func_die+0x38a>
  800420e7d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e7dd:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e7e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e7e5:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e7e9:	48 01 d0             	add    %rdx,%rax
  800420e7ec:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420e7f0:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e7f7:	00 00 00 
  800420e7fa:	48 8b 08             	mov    (%rax),%rcx
  800420e7fd:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e804:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420e808:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e80c:	48 8b 38             	mov    (%rax),%rdi
  800420e80f:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420e813:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420e817:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420e81c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420e820:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420e825:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420e829:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420e82e:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420e832:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420e837:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420e83b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420e840:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420e844:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420e849:	48 89 cf             	mov    %rcx,%rdi
  800420e84c:	48 b8 52 1e 21 04 80 	movabs $0x8004211e52,%rax
  800420e853:	00 00 00 
  800420e856:	ff d0                	callq  *%rax
  800420e858:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e85f:	be 0b 00 00 00       	mov    $0xb,%esi
  800420e864:	48 89 c7             	mov    %rax,%rdi
  800420e867:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e86e:	00 00 00 
  800420e871:	ff d0                	callq  *%rax
  800420e873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e877:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e87c:	74 0e                	je     800420e88c <list_func_die+0x366>
  800420e87e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e882:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e886:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420e88a:	eb 24                	jmp    800420e8b0 <list_func_die+0x38a>
  800420e88c:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e893:	be 49 00 00 00       	mov    $0x49,%esi
  800420e898:	48 89 c7             	mov    %rax,%rdi
  800420e89b:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e8a2:	00 00 00 
  800420e8a5:	ff d0                	callq  *%rax
  800420e8a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e8ab:	e9 1e ff ff ff       	jmpq   800420e7ce <list_func_die+0x2a8>
  800420e8b0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e8b7:	00 
  800420e8b8:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e8bf:	be 02 00 00 00       	mov    $0x2,%esi
  800420e8c4:	48 89 c7             	mov    %rax,%rdi
  800420e8c7:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420e8ce:	00 00 00 
  800420e8d1:	ff d0                	callq  *%rax
  800420e8d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e8d7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e8dc:	0f 84 a2 00 00 00    	je     800420e984 <list_func_die+0x45e>
  800420e8e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e8e6:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420e8ea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420e8ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e8f2:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420e8f6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e8fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e8fe:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e902:	48 83 f8 03          	cmp    $0x3,%rax
  800420e906:	72 7c                	jb     800420e984 <list_func_die+0x45e>
  800420e908:	48 83 f8 04          	cmp    $0x4,%rax
  800420e90c:	76 06                	jbe    800420e914 <list_func_die+0x3ee>
  800420e90e:	48 83 f8 0a          	cmp    $0xa,%rax
  800420e912:	75 70                	jne    800420e984 <list_func_die+0x45e>
  800420e914:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420e91b:	00 
  800420e91c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e920:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420e924:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420e928:	0f b6 00             	movzbl (%rax),%eax
  800420e92b:	88 45 af             	mov    %al,-0x51(%rbp)
  800420e92e:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420e933:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420e937:	75 4a                	jne    800420e983 <list_func_die+0x45d>
  800420e939:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e93d:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420e944:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420e94b:	48 89 c7             	mov    %rax,%rdi
  800420e94e:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  800420e955:	00 00 00 
  800420e958:	ff d0                	callq  *%rax
  800420e95a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e95e:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e965:	48 89 c2             	mov    %rax,%rdx
  800420e968:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e96c:	48 29 c2             	sub    %rax,%rdx
  800420e96f:	48 89 d0             	mov    %rdx,%rax
  800420e972:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420e976:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420e97d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420e981:	eb 00                	jmp    800420e983 <list_func_die+0x45d>
  800420e983:	90                   	nop
  800420e984:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e98b:	8b 48 28             	mov    0x28(%rax),%ecx
  800420e98e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e992:	89 c2                	mov    %eax,%edx
  800420e994:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e99b:	48 63 c9             	movslq %ecx,%rcx
  800420e99e:	48 83 c1 08          	add    $0x8,%rcx
  800420e9a2:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420e9a6:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9ad:	8b 50 28             	mov    0x28(%rax),%edx
  800420e9b0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9b7:	48 63 d2             	movslq %edx,%rdx
  800420e9ba:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420e9be:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e9c2:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420e9c7:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9ce:	8b 40 28             	mov    0x28(%rax),%eax
  800420e9d1:	8d 50 01             	lea    0x1(%rax),%edx
  800420e9d4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9db:	89 50 28             	mov    %edx,0x28(%rax)
  800420e9de:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e9e5:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e9ec:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e9f1:	48 89 ce             	mov    %rcx,%rsi
  800420e9f4:	48 89 c7             	mov    %rax,%rdi
  800420e9f7:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  800420e9fe:	00 00 00 
  800420ea01:	ff d0                	callq  *%rax
  800420ea03:	e9 40 02 00 00       	jmpq   800420ec48 <list_func_die+0x722>
  800420ea08:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420ea0f:	48 83 f8 05          	cmp    $0x5,%rax
  800420ea13:	74 05                	je     800420ea1a <list_func_die+0x4f4>
  800420ea15:	e9 64 02 00 00       	jmpq   800420ec7e <list_func_die+0x758>
  800420ea1a:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ea21:	be 49 00 00 00       	mov    $0x49,%esi
  800420ea26:	48 89 c7             	mov    %rax,%rdi
  800420ea29:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420ea30:	00 00 00 
  800420ea33:	ff d0                	callq  *%rax
  800420ea35:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea39:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea3e:	0f 84 b1 00 00 00    	je     800420eaf5 <list_func_die+0x5cf>
  800420ea44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ea48:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420ea4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea50:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ea54:	48 01 d0             	add    %rdx,%rax
  800420ea57:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420ea5b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ea62:	00 00 00 
  800420ea65:	48 8b 08             	mov    (%rax),%rcx
  800420ea68:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420ea6f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420ea73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ea77:	48 8b 38             	mov    (%rax),%rdi
  800420ea7a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420ea7e:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420ea82:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420ea87:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420ea8b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420ea90:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420ea94:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420ea99:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420ea9d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420eaa2:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420eaa6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420eaab:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420eaaf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420eab4:	48 89 cf             	mov    %rcx,%rdi
  800420eab7:	48 b8 52 1e 21 04 80 	movabs $0x8004211e52,%rax
  800420eabe:	00 00 00 
  800420eac1:	ff d0                	callq  *%rax
  800420eac3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420eaca:	be 0b 00 00 00       	mov    $0xb,%esi
  800420eacf:	48 89 c7             	mov    %rax,%rdi
  800420ead2:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420ead9:	00 00 00 
  800420eadc:	ff d0                	callq  *%rax
  800420eade:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420eae2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420eae7:	74 0c                	je     800420eaf5 <list_func_die+0x5cf>
  800420eae9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eaed:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420eaf1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420eaf5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420eafc:	00 
  800420eafd:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420eb04:	be 02 00 00 00       	mov    $0x2,%esi
  800420eb09:	48 89 c7             	mov    %rax,%rdi
  800420eb0c:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  800420eb13:	00 00 00 
  800420eb16:	ff d0                	callq  *%rax
  800420eb18:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420eb1c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420eb21:	0f 84 a2 00 00 00    	je     800420ebc9 <list_func_die+0x6a3>
  800420eb27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb2b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420eb2f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420eb33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb37:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420eb3b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420eb3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb43:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420eb47:	48 83 f8 03          	cmp    $0x3,%rax
  800420eb4b:	72 7c                	jb     800420ebc9 <list_func_die+0x6a3>
  800420eb4d:	48 83 f8 04          	cmp    $0x4,%rax
  800420eb51:	76 06                	jbe    800420eb59 <list_func_die+0x633>
  800420eb53:	48 83 f8 0a          	cmp    $0xa,%rax
  800420eb57:	75 70                	jne    800420ebc9 <list_func_die+0x6a3>
  800420eb59:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eb60:	00 
  800420eb61:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb65:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420eb69:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420eb6d:	0f b6 00             	movzbl (%rax),%eax
  800420eb70:	88 45 97             	mov    %al,-0x69(%rbp)
  800420eb73:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420eb78:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420eb7c:	75 4a                	jne    800420ebc8 <list_func_die+0x6a2>
  800420eb7e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eb82:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420eb89:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420eb90:	48 89 c7             	mov    %rax,%rdi
  800420eb93:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  800420eb9a:	00 00 00 
  800420eb9d:	ff d0                	callq  *%rax
  800420eb9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420eba3:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ebaa:	48 89 c2             	mov    %rax,%rdx
  800420ebad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ebb1:	48 29 c2             	sub    %rax,%rdx
  800420ebb4:	48 89 d0             	mov    %rdx,%rax
  800420ebb7:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420ebbb:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ebc2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420ebc6:	eb 00                	jmp    800420ebc8 <list_func_die+0x6a2>
  800420ebc8:	90                   	nop
  800420ebc9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebd0:	8b 48 28             	mov    0x28(%rax),%ecx
  800420ebd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ebd7:	89 c2                	mov    %eax,%edx
  800420ebd9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebe0:	48 63 c9             	movslq %ecx,%rcx
  800420ebe3:	48 83 c1 08          	add    $0x8,%rcx
  800420ebe7:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420ebeb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebf2:	8b 50 28             	mov    0x28(%rax),%edx
  800420ebf5:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ebfc:	48 63 d2             	movslq %edx,%rdx
  800420ebff:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420ec03:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ec07:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420ec0c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ec13:	8b 40 28             	mov    0x28(%rax),%eax
  800420ec16:	8d 50 01             	lea    0x1(%rax),%edx
  800420ec19:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ec20:	89 50 28             	mov    %edx,0x28(%rax)
  800420ec23:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ec2a:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420ec31:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ec36:	48 89 ce             	mov    %rcx,%rsi
  800420ec39:	48 89 c7             	mov    %rax,%rdi
  800420ec3c:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  800420ec43:	00 00 00 
  800420ec46:	ff d0                	callq  *%rax
  800420ec48:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ec4f:	00 00 00 
  800420ec52:	48 8b 00             	mov    (%rax),%rax
  800420ec55:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420ec59:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420ec60:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420ec67:	48 89 c7             	mov    %rax,%rdi
  800420ec6a:	48 b8 e8 1f 21 04 80 	movabs $0x8004211fe8,%rax
  800420ec71:	00 00 00 
  800420ec74:	ff d0                	callq  *%rax
  800420ec76:	85 c0                	test   %eax,%eax
  800420ec78:	0f 84 8a fd ff ff    	je     800420ea08 <list_func_die+0x4e2>
  800420ec7e:	b8 01 00 00 00       	mov    $0x1,%eax
  800420ec83:	eb 05                	jmp    800420ec8a <list_func_die+0x764>
  800420ec85:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec8a:	c9                   	leaveq 
  800420ec8b:	c3                   	retq   

000000800420ec8c <debuginfo_rip>:
  800420ec8c:	55                   	push   %rbp
  800420ec8d:	48 89 e5             	mov    %rsp,%rbp
  800420ec90:	53                   	push   %rbx
  800420ec91:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420ec98:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420ec9f:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420eca6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420ecad:	00 
  800420ecae:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420ecb5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ecb9:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ecc0:	48 bb 32 a8 21 04 80 	movabs $0x800421a832,%rbx
  800420ecc7:	00 00 00 
  800420ecca:	48 89 18             	mov    %rbx,(%rax)
  800420eccd:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ecd4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420ecdb:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ece2:	48 bb 32 a8 21 04 80 	movabs $0x800421a832,%rbx
  800420ece9:	00 00 00 
  800420ecec:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420ecf0:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ecf7:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420ecfe:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ed05:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ed0c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420ed10:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ed17:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420ed1e:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420ed25:	00 00 00 
  800420ed28:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420ed2f:	76 13                	jbe    800420ed44 <debuginfo_rip+0xb8>
  800420ed31:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420ed38:	00 00 00 
  800420ed3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ed3f:	e9 04 01 00 00       	jmpq   800420ee48 <debuginfo_rip+0x1bc>
  800420ed44:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ed4b:	00 00 00 
  800420ed4e:	ff d0                	callq  *%rax
  800420ed50:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed57:	00 00 00 
  800420ed5a:	48 98                	cltq   
  800420ed5c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed60:	48 89 c1             	mov    %rax,%rcx
  800420ed63:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed67:	48 01 c8             	add    %rcx,%rax
  800420ed6a:	48 01 d0             	add    %rdx,%rax
  800420ed6d:	48 83 c0 08          	add    $0x8,%rax
  800420ed71:	48 8b 10             	mov    (%rax),%rdx
  800420ed74:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420ed7b:	00 00 00 
  800420ed7e:	48 8b 00             	mov    (%rax),%rax
  800420ed81:	48 39 c2             	cmp    %rax,%rdx
  800420ed84:	0f 84 83 00 00 00    	je     800420ee0d <debuginfo_rip+0x181>
  800420ed8a:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ed91:	00 00 00 
  800420ed94:	ff d0                	callq  *%rax
  800420ed96:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ed9d:	00 00 00 
  800420eda0:	48 98                	cltq   
  800420eda2:	48 c1 e0 03          	shl    $0x3,%rax
  800420eda6:	48 89 c1             	mov    %rax,%rcx
  800420eda9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420edad:	48 01 c8             	add    %rcx,%rax
  800420edb0:	48 01 d0             	add    %rdx,%rax
  800420edb3:	48 83 c0 08          	add    $0x8,%rax
  800420edb7:	48 8b 00             	mov    (%rax),%rax
  800420edba:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420edc1:	48 89 c7             	mov    %rax,%rdi
  800420edc4:	48 b8 77 57 21 04 80 	movabs $0x8004215777,%rax
  800420edcb:	00 00 00 
  800420edce:	ff d0                	callq  *%rax
  800420edd0:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420edd7:	00 00 00 
  800420edda:	ff d0                	callq  *%rax
  800420eddc:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ede3:	00 00 00 
  800420ede6:	48 98                	cltq   
  800420ede8:	48 c1 e0 03          	shl    $0x3,%rax
  800420edec:	48 89 c1             	mov    %rax,%rcx
  800420edef:	48 c1 e1 04          	shl    $0x4,%rcx
  800420edf3:	48 01 c8             	add    %rcx,%rax
  800420edf6:	48 01 d0             	add    %rdx,%rax
  800420edf9:	48 83 c0 08          	add    $0x8,%rax
  800420edfd:	48 8b 10             	mov    (%rax),%rdx
  800420ee00:	48 b8 98 d2 49 04 80 	movabs $0x800449d298,%rax
  800420ee07:	00 00 00 
  800420ee0a:	48 89 10             	mov    %rdx,(%rax)
  800420ee0d:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800420ee14:	00 00 00 
  800420ee17:	ff d0                	callq  *%rax
  800420ee19:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800420ee20:	00 00 00 
  800420ee23:	48 98                	cltq   
  800420ee25:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee29:	48 89 c1             	mov    %rax,%rcx
  800420ee2c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ee30:	48 01 c8             	add    %rcx,%rax
  800420ee33:	48 01 d0             	add    %rdx,%rax
  800420ee36:	48 83 c0 08          	add    $0x8,%rax
  800420ee3a:	48 8b 00             	mov    (%rax),%rax
  800420ee3d:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ee44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ee48:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee4f:	00 00 00 
  800420ee52:	48 8b 00             	mov    (%rax),%rax
  800420ee55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee59:	48 89 d6             	mov    %rdx,%rsi
  800420ee5c:	48 89 c7             	mov    %rax,%rdi
  800420ee5f:	48 b8 60 0e 21 04 80 	movabs $0x8004210e60,%rax
  800420ee66:	00 00 00 
  800420ee69:	ff d0                	callq  *%rax
  800420ee6b:	48 bf 3c a8 21 04 80 	movabs $0x800421a83c,%rdi
  800420ee72:	00 00 00 
  800420ee75:	48 b8 f7 56 21 04 80 	movabs $0x80042156f7,%rax
  800420ee7c:	00 00 00 
  800420ee7f:	ff d0                	callq  *%rax
  800420ee81:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420ee85:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ee8c:	00 00 00 
  800420ee8f:	48 8b 00             	mov    (%rax),%rax
  800420ee92:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420ee96:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420ee9a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420ee9e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eea5:	00 00 00 
  800420eea8:	48 8b 00             	mov    (%rax),%rax
  800420eeab:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420eeaf:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420eeb3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420eeb7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eebe:	00 00 00 
  800420eec1:	48 8b 00             	mov    (%rax),%rax
  800420eec4:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420eec8:	48 85 c0             	test   %rax,%rax
  800420eecb:	75 35                	jne    800420ef02 <debuginfo_rip+0x276>
  800420eecd:	48 b9 48 a8 21 04 80 	movabs $0x800421a848,%rcx
  800420eed4:	00 00 00 
  800420eed7:	48 ba 0c a8 21 04 80 	movabs $0x800421a80c,%rdx
  800420eede:	00 00 00 
  800420eee1:	be 40 01 00 00       	mov    $0x140,%esi
  800420eee6:	48 bf 21 a8 21 04 80 	movabs $0x800421a821,%rdi
  800420eeed:	00 00 00 
  800420eef0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eef5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420eefc:	00 00 00 
  800420eeff:	41 ff d0             	callq  *%r8
  800420ef02:	e9 6f 01 00 00       	jmpq   800420f076 <debuginfo_rip+0x3ea>
  800420ef07:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef0e:	00 00 00 
  800420ef11:	48 8b 00             	mov    (%rax),%rax
  800420ef14:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420ef18:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420ef1f:	be 00 00 00 00       	mov    $0x0,%esi
  800420ef24:	48 89 c7             	mov    %rax,%rdi
  800420ef27:	48 b8 e8 1f 21 04 80 	movabs $0x8004211fe8,%rax
  800420ef2e:	00 00 00 
  800420ef31:	ff d0                	callq  *%rax
  800420ef33:	83 f8 04             	cmp    $0x4,%eax
  800420ef36:	75 05                	jne    800420ef3d <debuginfo_rip+0x2b1>
  800420ef38:	e9 39 01 00 00       	jmpq   800420f076 <debuginfo_rip+0x3ea>
  800420ef3d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ef41:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420ef48:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420ef4f:	00 00 00 00 
  800420ef53:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ef5a:	00 00 00 
  800420ef5d:	48 8b 00             	mov    (%rax),%rax
  800420ef60:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420ef67:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420ef6e:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420ef72:	48 89 c7             	mov    %rax,%rdi
  800420ef75:	48 b8 2c 22 21 04 80 	movabs $0x800421222c,%rax
  800420ef7c:	00 00 00 
  800420ef7f:	ff d0                	callq  *%rax
  800420ef81:	83 f8 04             	cmp    $0x4,%eax
  800420ef84:	75 05                	jne    800420ef8b <debuginfo_rip+0x2ff>
  800420ef86:	e9 eb 00 00 00       	jmpq   800420f076 <debuginfo_rip+0x3ea>
  800420ef8b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ef8f:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420ef96:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420ef9d:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420efa4:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420efab:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420efb2:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420efb9:	48 89 ce             	mov    %rcx,%rsi
  800420efbc:	48 89 c7             	mov    %rax,%rdi
  800420efbf:	48 b8 26 e5 20 04 80 	movabs $0x800420e526,%rax
  800420efc6:	00 00 00 
  800420efc9:	ff d0                	callq  *%rax
  800420efcb:	85 c0                	test   %eax,%eax
  800420efcd:	74 30                	je     800420efff <debuginfo_rip+0x373>
  800420efcf:	90                   	nop
  800420efd0:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420efd7:	00 00 00 
  800420efda:	48 8b 00             	mov    (%rax),%rax
  800420efdd:	be 00 00 00 00       	mov    $0x0,%esi
  800420efe2:	48 89 c7             	mov    %rax,%rdi
  800420efe5:	48 b8 04 49 21 04 80 	movabs $0x8004214904,%rax
  800420efec:	00 00 00 
  800420efef:	ff d0                	callq  *%rax
  800420eff1:	83 f8 01             	cmp    $0x1,%eax
  800420eff4:	0f 85 bb 00 00 00    	jne    800420f0b5 <debuginfo_rip+0x429>
  800420effa:	e9 ac 00 00 00       	jmpq   800420f0ab <debuginfo_rip+0x41f>
  800420efff:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f006:	00 00 00 
  800420f009:	48 8b 00             	mov    (%rax),%rax
  800420f00c:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f010:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420f017:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420f01e:	48 89 c7             	mov    %rax,%rdi
  800420f021:	48 b8 e8 1f 21 04 80 	movabs $0x8004211fe8,%rax
  800420f028:	00 00 00 
  800420f02b:	ff d0                	callq  *%rax
  800420f02d:	85 c0                	test   %eax,%eax
  800420f02f:	79 02                	jns    800420f033 <debuginfo_rip+0x3a7>
  800420f031:	eb 43                	jmp    800420f076 <debuginfo_rip+0x3ea>
  800420f033:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420f03a:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420f041:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f046:	48 89 ce             	mov    %rcx,%rsi
  800420f049:	48 89 c7             	mov    %rax,%rdi
  800420f04c:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  800420f053:	00 00 00 
  800420f056:	ff d0                	callq  *%rax
  800420f058:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f05c:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f063:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f06a:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f071:	e9 2e ff ff ff       	jmpq   800420efa4 <debuginfo_rip+0x318>
  800420f076:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f07d:	00 00 00 
  800420f080:	48 8b 00             	mov    (%rax),%rax
  800420f083:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420f087:	48 89 d6             	mov    %rdx,%rsi
  800420f08a:	48 89 c7             	mov    %rax,%rdi
  800420f08d:	48 b8 42 0f 21 04 80 	movabs $0x8004210f42,%rax
  800420f094:	00 00 00 
  800420f097:	ff d0                	callq  *%rax
  800420f099:	85 c0                	test   %eax,%eax
  800420f09b:	0f 84 66 fe ff ff    	je     800420ef07 <debuginfo_rip+0x27b>
  800420f0a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f0a6:	e9 a0 00 00 00       	jmpq   800420f14b <debuginfo_rip+0x4bf>
  800420f0ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f0b0:	e9 96 00 00 00       	jmpq   800420f14b <debuginfo_rip+0x4bf>
  800420f0b5:	48 b8 80 c6 22 04 80 	movabs $0x800422c680,%rax
  800420f0bc:	00 00 00 
  800420f0bf:	48 8b 08             	mov    (%rax),%rcx
  800420f0c2:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f0c9:	00 00 00 
  800420f0cc:	48 8b 10             	mov    (%rax),%rdx
  800420f0cf:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f0d6:	00 00 00 
  800420f0d9:	48 8b 00             	mov    (%rax),%rax
  800420f0dc:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420f0e3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f0e9:	48 89 c7             	mov    %rax,%rdi
  800420f0ec:	48 b8 6d 24 21 04 80 	movabs $0x800421246d,%rax
  800420f0f3:	00 00 00 
  800420f0f6:	ff d0                	callq  *%rax
  800420f0f8:	85 c0                	test   %eax,%eax
  800420f0fa:	75 4a                	jne    800420f146 <debuginfo_rip+0x4ba>
  800420f0fc:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f103:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420f10a:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f111:	00 00 00 
  800420f114:	48 8b 30             	mov    (%rax),%rsi
  800420f117:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f11e:	00 00 00 
  800420f121:	48 8b 00             	mov    (%rax),%rax
  800420f124:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f12b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f131:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f137:	48 89 c7             	mov    %rax,%rdi
  800420f13a:	48 b8 79 37 21 04 80 	movabs $0x8004213779,%rax
  800420f141:	00 00 00 
  800420f144:	ff d0                	callq  *%rax
  800420f146:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f14b:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420f152:	5b                   	pop    %rbx
  800420f153:	5d                   	pop    %rbp
  800420f154:	c3                   	retq   

000000800420f155 <printnum>:
  800420f155:	55                   	push   %rbp
  800420f156:	48 89 e5             	mov    %rsp,%rbp
  800420f159:	53                   	push   %rbx
  800420f15a:	48 83 ec 38          	sub    $0x38,%rsp
  800420f15e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f162:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420f166:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420f16a:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420f16d:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420f171:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420f175:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420f178:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420f17c:	77 3b                	ja     800420f1b9 <printnum+0x64>
  800420f17e:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420f181:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420f185:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420f188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f18c:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f191:	48 f7 f3             	div    %rbx
  800420f194:	48 89 c2             	mov    %rax,%rdx
  800420f197:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420f19a:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f19d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f1a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1a5:	41 89 f9             	mov    %edi,%r9d
  800420f1a8:	48 89 c7             	mov    %rax,%rdi
  800420f1ab:	48 b8 55 f1 20 04 80 	movabs $0x800420f155,%rax
  800420f1b2:	00 00 00 
  800420f1b5:	ff d0                	callq  *%rax
  800420f1b7:	eb 1e                	jmp    800420f1d7 <printnum+0x82>
  800420f1b9:	eb 12                	jmp    800420f1cd <printnum+0x78>
  800420f1bb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f1bf:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420f1c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1c6:	48 89 ce             	mov    %rcx,%rsi
  800420f1c9:	89 d7                	mov    %edx,%edi
  800420f1cb:	ff d0                	callq  *%rax
  800420f1cd:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420f1d1:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420f1d5:	7f e4                	jg     800420f1bb <printnum+0x66>
  800420f1d7:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f1da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f1de:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f1e3:	48 f7 f1             	div    %rcx
  800420f1e6:	48 89 d0             	mov    %rdx,%rax
  800420f1e9:	48 ba 50 aa 21 04 80 	movabs $0x800421aa50,%rdx
  800420f1f0:	00 00 00 
  800420f1f3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420f1f7:	0f be d0             	movsbl %al,%edx
  800420f1fa:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f1fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f202:	48 89 ce             	mov    %rcx,%rsi
  800420f205:	89 d7                	mov    %edx,%edi
  800420f207:	ff d0                	callq  *%rax
  800420f209:	48 83 c4 38          	add    $0x38,%rsp
  800420f20d:	5b                   	pop    %rbx
  800420f20e:	5d                   	pop    %rbp
  800420f20f:	c3                   	retq   

000000800420f210 <getuint>:
  800420f210:	55                   	push   %rbp
  800420f211:	48 89 e5             	mov    %rsp,%rbp
  800420f214:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f218:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f21c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f21f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f223:	7e 52                	jle    800420f277 <getuint+0x67>
  800420f225:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f229:	8b 00                	mov    (%rax),%eax
  800420f22b:	83 f8 30             	cmp    $0x30,%eax
  800420f22e:	73 24                	jae    800420f254 <getuint+0x44>
  800420f230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f234:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f238:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f23c:	8b 00                	mov    (%rax),%eax
  800420f23e:	89 c0                	mov    %eax,%eax
  800420f240:	48 01 d0             	add    %rdx,%rax
  800420f243:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f247:	8b 12                	mov    (%rdx),%edx
  800420f249:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f24c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f250:	89 0a                	mov    %ecx,(%rdx)
  800420f252:	eb 17                	jmp    800420f26b <getuint+0x5b>
  800420f254:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f258:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f25c:	48 89 d0             	mov    %rdx,%rax
  800420f25f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f263:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f267:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f26b:	48 8b 00             	mov    (%rax),%rax
  800420f26e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f272:	e9 a3 00 00 00       	jmpq   800420f31a <getuint+0x10a>
  800420f277:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f27b:	74 4f                	je     800420f2cc <getuint+0xbc>
  800420f27d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f281:	8b 00                	mov    (%rax),%eax
  800420f283:	83 f8 30             	cmp    $0x30,%eax
  800420f286:	73 24                	jae    800420f2ac <getuint+0x9c>
  800420f288:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f28c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f294:	8b 00                	mov    (%rax),%eax
  800420f296:	89 c0                	mov    %eax,%eax
  800420f298:	48 01 d0             	add    %rdx,%rax
  800420f29b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f29f:	8b 12                	mov    (%rdx),%edx
  800420f2a1:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f2a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2a8:	89 0a                	mov    %ecx,(%rdx)
  800420f2aa:	eb 17                	jmp    800420f2c3 <getuint+0xb3>
  800420f2ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2b0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f2b4:	48 89 d0             	mov    %rdx,%rax
  800420f2b7:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f2bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2bf:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f2c3:	48 8b 00             	mov    (%rax),%rax
  800420f2c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f2ca:	eb 4e                	jmp    800420f31a <getuint+0x10a>
  800420f2cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2d0:	8b 00                	mov    (%rax),%eax
  800420f2d2:	83 f8 30             	cmp    $0x30,%eax
  800420f2d5:	73 24                	jae    800420f2fb <getuint+0xeb>
  800420f2d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2db:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f2df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2e3:	8b 00                	mov    (%rax),%eax
  800420f2e5:	89 c0                	mov    %eax,%eax
  800420f2e7:	48 01 d0             	add    %rdx,%rax
  800420f2ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2ee:	8b 12                	mov    (%rdx),%edx
  800420f2f0:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f2f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2f7:	89 0a                	mov    %ecx,(%rdx)
  800420f2f9:	eb 17                	jmp    800420f312 <getuint+0x102>
  800420f2fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2ff:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f303:	48 89 d0             	mov    %rdx,%rax
  800420f306:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f30a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f30e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f312:	8b 00                	mov    (%rax),%eax
  800420f314:	89 c0                	mov    %eax,%eax
  800420f316:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f31a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f31e:	c9                   	leaveq 
  800420f31f:	c3                   	retq   

000000800420f320 <getint>:
  800420f320:	55                   	push   %rbp
  800420f321:	48 89 e5             	mov    %rsp,%rbp
  800420f324:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f328:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f32c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f32f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f333:	7e 52                	jle    800420f387 <getint+0x67>
  800420f335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f339:	8b 00                	mov    (%rax),%eax
  800420f33b:	83 f8 30             	cmp    $0x30,%eax
  800420f33e:	73 24                	jae    800420f364 <getint+0x44>
  800420f340:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f344:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f348:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f34c:	8b 00                	mov    (%rax),%eax
  800420f34e:	89 c0                	mov    %eax,%eax
  800420f350:	48 01 d0             	add    %rdx,%rax
  800420f353:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f357:	8b 12                	mov    (%rdx),%edx
  800420f359:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f35c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f360:	89 0a                	mov    %ecx,(%rdx)
  800420f362:	eb 17                	jmp    800420f37b <getint+0x5b>
  800420f364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f368:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f36c:	48 89 d0             	mov    %rdx,%rax
  800420f36f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f373:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f377:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f37b:	48 8b 00             	mov    (%rax),%rax
  800420f37e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f382:	e9 a3 00 00 00       	jmpq   800420f42a <getint+0x10a>
  800420f387:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f38b:	74 4f                	je     800420f3dc <getint+0xbc>
  800420f38d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f391:	8b 00                	mov    (%rax),%eax
  800420f393:	83 f8 30             	cmp    $0x30,%eax
  800420f396:	73 24                	jae    800420f3bc <getint+0x9c>
  800420f398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f39c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f3a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3a4:	8b 00                	mov    (%rax),%eax
  800420f3a6:	89 c0                	mov    %eax,%eax
  800420f3a8:	48 01 d0             	add    %rdx,%rax
  800420f3ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3af:	8b 12                	mov    (%rdx),%edx
  800420f3b1:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f3b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3b8:	89 0a                	mov    %ecx,(%rdx)
  800420f3ba:	eb 17                	jmp    800420f3d3 <getint+0xb3>
  800420f3bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3c0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f3c4:	48 89 d0             	mov    %rdx,%rax
  800420f3c7:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f3cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3cf:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f3d3:	48 8b 00             	mov    (%rax),%rax
  800420f3d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f3da:	eb 4e                	jmp    800420f42a <getint+0x10a>
  800420f3dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3e0:	8b 00                	mov    (%rax),%eax
  800420f3e2:	83 f8 30             	cmp    $0x30,%eax
  800420f3e5:	73 24                	jae    800420f40b <getint+0xeb>
  800420f3e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f3ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3f3:	8b 00                	mov    (%rax),%eax
  800420f3f5:	89 c0                	mov    %eax,%eax
  800420f3f7:	48 01 d0             	add    %rdx,%rax
  800420f3fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3fe:	8b 12                	mov    (%rdx),%edx
  800420f400:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f403:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f407:	89 0a                	mov    %ecx,(%rdx)
  800420f409:	eb 17                	jmp    800420f422 <getint+0x102>
  800420f40b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f40f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f413:	48 89 d0             	mov    %rdx,%rax
  800420f416:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f41a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f41e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f422:	8b 00                	mov    (%rax),%eax
  800420f424:	48 98                	cltq   
  800420f426:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f42e:	c9                   	leaveq 
  800420f42f:	c3                   	retq   

000000800420f430 <vprintfmt>:
  800420f430:	55                   	push   %rbp
  800420f431:	48 89 e5             	mov    %rsp,%rbp
  800420f434:	41 54                	push   %r12
  800420f436:	53                   	push   %rbx
  800420f437:	48 83 ec 60          	sub    $0x60,%rsp
  800420f43b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420f43f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420f443:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f447:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420f44b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f44f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f453:	48 8b 0a             	mov    (%rdx),%rcx
  800420f456:	48 89 08             	mov    %rcx,(%rax)
  800420f459:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f45d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f461:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f465:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f469:	eb 17                	jmp    800420f482 <vprintfmt+0x52>
  800420f46b:	85 db                	test   %ebx,%ebx
  800420f46d:	0f 84 cc 04 00 00    	je     800420f93f <vprintfmt+0x50f>
  800420f473:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f477:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f47b:	48 89 d6             	mov    %rdx,%rsi
  800420f47e:	89 df                	mov    %ebx,%edi
  800420f480:	ff d0                	callq  *%rax
  800420f482:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f486:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f48a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f48e:	0f b6 00             	movzbl (%rax),%eax
  800420f491:	0f b6 d8             	movzbl %al,%ebx
  800420f494:	83 fb 25             	cmp    $0x25,%ebx
  800420f497:	75 d2                	jne    800420f46b <vprintfmt+0x3b>
  800420f499:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420f49d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420f4a4:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f4ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f4b2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420f4b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f4bd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f4c1:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f4c5:	0f b6 00             	movzbl (%rax),%eax
  800420f4c8:	0f b6 d8             	movzbl %al,%ebx
  800420f4cb:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420f4ce:	83 f8 55             	cmp    $0x55,%eax
  800420f4d1:	0f 87 34 04 00 00    	ja     800420f90b <vprintfmt+0x4db>
  800420f4d7:	89 c0                	mov    %eax,%eax
  800420f4d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f4e0:	00 
  800420f4e1:	48 b8 78 aa 21 04 80 	movabs $0x800421aa78,%rax
  800420f4e8:	00 00 00 
  800420f4eb:	48 01 d0             	add    %rdx,%rax
  800420f4ee:	48 8b 00             	mov    (%rax),%rax
  800420f4f1:	ff e0                	jmpq   *%rax
  800420f4f3:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420f4f7:	eb c0                	jmp    800420f4b9 <vprintfmt+0x89>
  800420f4f9:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420f4fd:	eb ba                	jmp    800420f4b9 <vprintfmt+0x89>
  800420f4ff:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420f506:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420f509:	89 d0                	mov    %edx,%eax
  800420f50b:	c1 e0 02             	shl    $0x2,%eax
  800420f50e:	01 d0                	add    %edx,%eax
  800420f510:	01 c0                	add    %eax,%eax
  800420f512:	01 d8                	add    %ebx,%eax
  800420f514:	83 e8 30             	sub    $0x30,%eax
  800420f517:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f51a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f51e:	0f b6 00             	movzbl (%rax),%eax
  800420f521:	0f be d8             	movsbl %al,%ebx
  800420f524:	83 fb 2f             	cmp    $0x2f,%ebx
  800420f527:	7e 0c                	jle    800420f535 <vprintfmt+0x105>
  800420f529:	83 fb 39             	cmp    $0x39,%ebx
  800420f52c:	7f 07                	jg     800420f535 <vprintfmt+0x105>
  800420f52e:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420f533:	eb d1                	jmp    800420f506 <vprintfmt+0xd6>
  800420f535:	eb 58                	jmp    800420f58f <vprintfmt+0x15f>
  800420f537:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f53a:	83 f8 30             	cmp    $0x30,%eax
  800420f53d:	73 17                	jae    800420f556 <vprintfmt+0x126>
  800420f53f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f543:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f546:	89 c0                	mov    %eax,%eax
  800420f548:	48 01 d0             	add    %rdx,%rax
  800420f54b:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f54e:	83 c2 08             	add    $0x8,%edx
  800420f551:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f554:	eb 0f                	jmp    800420f565 <vprintfmt+0x135>
  800420f556:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f55a:	48 89 d0             	mov    %rdx,%rax
  800420f55d:	48 83 c2 08          	add    $0x8,%rdx
  800420f561:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f565:	8b 00                	mov    (%rax),%eax
  800420f567:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f56a:	eb 23                	jmp    800420f58f <vprintfmt+0x15f>
  800420f56c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f570:	79 0c                	jns    800420f57e <vprintfmt+0x14e>
  800420f572:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420f579:	e9 3b ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f57e:	e9 36 ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f583:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420f58a:	e9 2a ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f58f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f593:	79 12                	jns    800420f5a7 <vprintfmt+0x177>
  800420f595:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f598:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420f59b:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f5a2:	e9 12 ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f5a7:	e9 0d ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f5ac:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420f5b0:	e9 04 ff ff ff       	jmpq   800420f4b9 <vprintfmt+0x89>
  800420f5b5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5b8:	83 f8 30             	cmp    $0x30,%eax
  800420f5bb:	73 17                	jae    800420f5d4 <vprintfmt+0x1a4>
  800420f5bd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f5c1:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5c4:	89 c0                	mov    %eax,%eax
  800420f5c6:	48 01 d0             	add    %rdx,%rax
  800420f5c9:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f5cc:	83 c2 08             	add    $0x8,%edx
  800420f5cf:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f5d2:	eb 0f                	jmp    800420f5e3 <vprintfmt+0x1b3>
  800420f5d4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f5d8:	48 89 d0             	mov    %rdx,%rax
  800420f5db:	48 83 c2 08          	add    $0x8,%rdx
  800420f5df:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f5e3:	8b 10                	mov    (%rax),%edx
  800420f5e5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f5e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f5ed:	48 89 ce             	mov    %rcx,%rsi
  800420f5f0:	89 d7                	mov    %edx,%edi
  800420f5f2:	ff d0                	callq  *%rax
  800420f5f4:	e9 40 03 00 00       	jmpq   800420f939 <vprintfmt+0x509>
  800420f5f9:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f5fc:	83 f8 30             	cmp    $0x30,%eax
  800420f5ff:	73 17                	jae    800420f618 <vprintfmt+0x1e8>
  800420f601:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f605:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f608:	89 c0                	mov    %eax,%eax
  800420f60a:	48 01 d0             	add    %rdx,%rax
  800420f60d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f610:	83 c2 08             	add    $0x8,%edx
  800420f613:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f616:	eb 0f                	jmp    800420f627 <vprintfmt+0x1f7>
  800420f618:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f61c:	48 89 d0             	mov    %rdx,%rax
  800420f61f:	48 83 c2 08          	add    $0x8,%rdx
  800420f623:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f627:	8b 18                	mov    (%rax),%ebx
  800420f629:	85 db                	test   %ebx,%ebx
  800420f62b:	79 02                	jns    800420f62f <vprintfmt+0x1ff>
  800420f62d:	f7 db                	neg    %ebx
  800420f62f:	83 fb 15             	cmp    $0x15,%ebx
  800420f632:	7f 16                	jg     800420f64a <vprintfmt+0x21a>
  800420f634:	48 b8 a0 a9 21 04 80 	movabs $0x800421a9a0,%rax
  800420f63b:	00 00 00 
  800420f63e:	48 63 d3             	movslq %ebx,%rdx
  800420f641:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420f645:	4d 85 e4             	test   %r12,%r12
  800420f648:	75 2e                	jne    800420f678 <vprintfmt+0x248>
  800420f64a:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f64e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f652:	89 d9                	mov    %ebx,%ecx
  800420f654:	48 ba 61 aa 21 04 80 	movabs $0x800421aa61,%rdx
  800420f65b:	00 00 00 
  800420f65e:	48 89 c7             	mov    %rax,%rdi
  800420f661:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f666:	49 b8 48 f9 20 04 80 	movabs $0x800420f948,%r8
  800420f66d:	00 00 00 
  800420f670:	41 ff d0             	callq  *%r8
  800420f673:	e9 c1 02 00 00       	jmpq   800420f939 <vprintfmt+0x509>
  800420f678:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f67c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f680:	4c 89 e1             	mov    %r12,%rcx
  800420f683:	48 ba 6a aa 21 04 80 	movabs $0x800421aa6a,%rdx
  800420f68a:	00 00 00 
  800420f68d:	48 89 c7             	mov    %rax,%rdi
  800420f690:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f695:	49 b8 48 f9 20 04 80 	movabs $0x800420f948,%r8
  800420f69c:	00 00 00 
  800420f69f:	41 ff d0             	callq  *%r8
  800420f6a2:	e9 92 02 00 00       	jmpq   800420f939 <vprintfmt+0x509>
  800420f6a7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f6aa:	83 f8 30             	cmp    $0x30,%eax
  800420f6ad:	73 17                	jae    800420f6c6 <vprintfmt+0x296>
  800420f6af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f6b3:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f6b6:	89 c0                	mov    %eax,%eax
  800420f6b8:	48 01 d0             	add    %rdx,%rax
  800420f6bb:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f6be:	83 c2 08             	add    $0x8,%edx
  800420f6c1:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f6c4:	eb 0f                	jmp    800420f6d5 <vprintfmt+0x2a5>
  800420f6c6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f6ca:	48 89 d0             	mov    %rdx,%rax
  800420f6cd:	48 83 c2 08          	add    $0x8,%rdx
  800420f6d1:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f6d5:	4c 8b 20             	mov    (%rax),%r12
  800420f6d8:	4d 85 e4             	test   %r12,%r12
  800420f6db:	75 0a                	jne    800420f6e7 <vprintfmt+0x2b7>
  800420f6dd:	49 bc 6d aa 21 04 80 	movabs $0x800421aa6d,%r12
  800420f6e4:	00 00 00 
  800420f6e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f6eb:	7e 3f                	jle    800420f72c <vprintfmt+0x2fc>
  800420f6ed:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420f6f1:	74 39                	je     800420f72c <vprintfmt+0x2fc>
  800420f6f3:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f6f6:	48 98                	cltq   
  800420f6f8:	48 89 c6             	mov    %rax,%rsi
  800420f6fb:	4c 89 e7             	mov    %r12,%rdi
  800420f6fe:	48 b8 49 fd 20 04 80 	movabs $0x800420fd49,%rax
  800420f705:	00 00 00 
  800420f708:	ff d0                	callq  *%rax
  800420f70a:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420f70d:	eb 17                	jmp    800420f726 <vprintfmt+0x2f6>
  800420f70f:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420f713:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f717:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f71b:	48 89 ce             	mov    %rcx,%rsi
  800420f71e:	89 d7                	mov    %edx,%edi
  800420f720:	ff d0                	callq  *%rax
  800420f722:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f726:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f72a:	7f e3                	jg     800420f70f <vprintfmt+0x2df>
  800420f72c:	eb 37                	jmp    800420f765 <vprintfmt+0x335>
  800420f72e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420f732:	74 1e                	je     800420f752 <vprintfmt+0x322>
  800420f734:	83 fb 1f             	cmp    $0x1f,%ebx
  800420f737:	7e 05                	jle    800420f73e <vprintfmt+0x30e>
  800420f739:	83 fb 7e             	cmp    $0x7e,%ebx
  800420f73c:	7e 14                	jle    800420f752 <vprintfmt+0x322>
  800420f73e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f742:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f746:	48 89 d6             	mov    %rdx,%rsi
  800420f749:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420f74e:	ff d0                	callq  *%rax
  800420f750:	eb 0f                	jmp    800420f761 <vprintfmt+0x331>
  800420f752:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f756:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f75a:	48 89 d6             	mov    %rdx,%rsi
  800420f75d:	89 df                	mov    %ebx,%edi
  800420f75f:	ff d0                	callq  *%rax
  800420f761:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f765:	4c 89 e0             	mov    %r12,%rax
  800420f768:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420f76c:	0f b6 00             	movzbl (%rax),%eax
  800420f76f:	0f be d8             	movsbl %al,%ebx
  800420f772:	85 db                	test   %ebx,%ebx
  800420f774:	74 10                	je     800420f786 <vprintfmt+0x356>
  800420f776:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f77a:	78 b2                	js     800420f72e <vprintfmt+0x2fe>
  800420f77c:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420f780:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f784:	79 a8                	jns    800420f72e <vprintfmt+0x2fe>
  800420f786:	eb 16                	jmp    800420f79e <vprintfmt+0x36e>
  800420f788:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f78c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f790:	48 89 d6             	mov    %rdx,%rsi
  800420f793:	bf 20 00 00 00       	mov    $0x20,%edi
  800420f798:	ff d0                	callq  *%rax
  800420f79a:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f79e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f7a2:	7f e4                	jg     800420f788 <vprintfmt+0x358>
  800420f7a4:	e9 90 01 00 00       	jmpq   800420f939 <vprintfmt+0x509>
  800420f7a9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7ad:	be 03 00 00 00       	mov    $0x3,%esi
  800420f7b2:	48 89 c7             	mov    %rax,%rdi
  800420f7b5:	48 b8 20 f3 20 04 80 	movabs $0x800420f320,%rax
  800420f7bc:	00 00 00 
  800420f7bf:	ff d0                	callq  *%rax
  800420f7c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f7c9:	48 85 c0             	test   %rax,%rax
  800420f7cc:	79 1d                	jns    800420f7eb <vprintfmt+0x3bb>
  800420f7ce:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f7d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f7d6:	48 89 d6             	mov    %rdx,%rsi
  800420f7d9:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420f7de:	ff d0                	callq  *%rax
  800420f7e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f7e4:	48 f7 d8             	neg    %rax
  800420f7e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7eb:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f7f2:	e9 d5 00 00 00       	jmpq   800420f8cc <vprintfmt+0x49c>
  800420f7f7:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7fb:	be 03 00 00 00       	mov    $0x3,%esi
  800420f800:	48 89 c7             	mov    %rax,%rdi
  800420f803:	48 b8 10 f2 20 04 80 	movabs $0x800420f210,%rax
  800420f80a:	00 00 00 
  800420f80d:	ff d0                	callq  *%rax
  800420f80f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f813:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f81a:	e9 ad 00 00 00       	jmpq   800420f8cc <vprintfmt+0x49c>
  800420f81f:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f823:	be 03 00 00 00       	mov    $0x3,%esi
  800420f828:	48 89 c7             	mov    %rax,%rdi
  800420f82b:	48 b8 10 f2 20 04 80 	movabs $0x800420f210,%rax
  800420f832:	00 00 00 
  800420f835:	ff d0                	callq  *%rax
  800420f837:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f83b:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800420f842:	e9 85 00 00 00       	jmpq   800420f8cc <vprintfmt+0x49c>
  800420f847:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f84b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f84f:	48 89 d6             	mov    %rdx,%rsi
  800420f852:	bf 30 00 00 00       	mov    $0x30,%edi
  800420f857:	ff d0                	callq  *%rax
  800420f859:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f85d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f861:	48 89 d6             	mov    %rdx,%rsi
  800420f864:	bf 78 00 00 00       	mov    $0x78,%edi
  800420f869:	ff d0                	callq  *%rax
  800420f86b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f86e:	83 f8 30             	cmp    $0x30,%eax
  800420f871:	73 17                	jae    800420f88a <vprintfmt+0x45a>
  800420f873:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f877:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f87a:	89 c0                	mov    %eax,%eax
  800420f87c:	48 01 d0             	add    %rdx,%rax
  800420f87f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f882:	83 c2 08             	add    $0x8,%edx
  800420f885:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f888:	eb 0f                	jmp    800420f899 <vprintfmt+0x469>
  800420f88a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f88e:	48 89 d0             	mov    %rdx,%rax
  800420f891:	48 83 c2 08          	add    $0x8,%rdx
  800420f895:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f899:	48 8b 00             	mov    (%rax),%rax
  800420f89c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f8a0:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f8a7:	eb 23                	jmp    800420f8cc <vprintfmt+0x49c>
  800420f8a9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f8ad:	be 03 00 00 00       	mov    $0x3,%esi
  800420f8b2:	48 89 c7             	mov    %rax,%rdi
  800420f8b5:	48 b8 10 f2 20 04 80 	movabs $0x800420f210,%rax
  800420f8bc:	00 00 00 
  800420f8bf:	ff d0                	callq  *%rax
  800420f8c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f8c5:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f8cc:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420f8d1:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420f8d4:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420f8d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f8db:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f8df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f8e3:	45 89 c1             	mov    %r8d,%r9d
  800420f8e6:	41 89 f8             	mov    %edi,%r8d
  800420f8e9:	48 89 c7             	mov    %rax,%rdi
  800420f8ec:	48 b8 55 f1 20 04 80 	movabs $0x800420f155,%rax
  800420f8f3:	00 00 00 
  800420f8f6:	ff d0                	callq  *%rax
  800420f8f8:	eb 3f                	jmp    800420f939 <vprintfmt+0x509>
  800420f8fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f8fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f902:	48 89 d6             	mov    %rdx,%rsi
  800420f905:	89 df                	mov    %ebx,%edi
  800420f907:	ff d0                	callq  *%rax
  800420f909:	eb 2e                	jmp    800420f939 <vprintfmt+0x509>
  800420f90b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f90f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f913:	48 89 d6             	mov    %rdx,%rsi
  800420f916:	bf 25 00 00 00       	mov    $0x25,%edi
  800420f91b:	ff d0                	callq  *%rax
  800420f91d:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f922:	eb 05                	jmp    800420f929 <vprintfmt+0x4f9>
  800420f924:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420f929:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f92d:	48 83 e8 01          	sub    $0x1,%rax
  800420f931:	0f b6 00             	movzbl (%rax),%eax
  800420f934:	3c 25                	cmp    $0x25,%al
  800420f936:	75 ec                	jne    800420f924 <vprintfmt+0x4f4>
  800420f938:	90                   	nop
  800420f939:	90                   	nop
  800420f93a:	e9 43 fb ff ff       	jmpq   800420f482 <vprintfmt+0x52>
  800420f93f:	48 83 c4 60          	add    $0x60,%rsp
  800420f943:	5b                   	pop    %rbx
  800420f944:	41 5c                	pop    %r12
  800420f946:	5d                   	pop    %rbp
  800420f947:	c3                   	retq   

000000800420f948 <printfmt>:
  800420f948:	55                   	push   %rbp
  800420f949:	48 89 e5             	mov    %rsp,%rbp
  800420f94c:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420f953:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420f95a:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420f961:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420f968:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420f96f:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420f976:	84 c0                	test   %al,%al
  800420f978:	74 20                	je     800420f99a <printfmt+0x52>
  800420f97a:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420f97e:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420f982:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420f986:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420f98a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420f98e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420f992:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420f996:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420f99a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420f9a1:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420f9a8:	00 00 00 
  800420f9ab:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420f9b2:	00 00 00 
  800420f9b5:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420f9b9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420f9c0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f9c7:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420f9ce:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420f9d5:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420f9dc:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420f9e3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420f9ea:	48 89 c7             	mov    %rax,%rdi
  800420f9ed:	48 b8 30 f4 20 04 80 	movabs $0x800420f430,%rax
  800420f9f4:	00 00 00 
  800420f9f7:	ff d0                	callq  *%rax
  800420f9f9:	c9                   	leaveq 
  800420f9fa:	c3                   	retq   

000000800420f9fb <sprintputch>:
  800420f9fb:	55                   	push   %rbp
  800420f9fc:	48 89 e5             	mov    %rsp,%rbp
  800420f9ff:	48 83 ec 10          	sub    $0x10,%rsp
  800420fa03:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420fa06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fa0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fa0e:	8b 40 10             	mov    0x10(%rax),%eax
  800420fa11:	8d 50 01             	lea    0x1(%rax),%edx
  800420fa14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fa18:	89 50 10             	mov    %edx,0x10(%rax)
  800420fa1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fa1f:	48 8b 10             	mov    (%rax),%rdx
  800420fa22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fa26:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420fa2a:	48 39 c2             	cmp    %rax,%rdx
  800420fa2d:	73 17                	jae    800420fa46 <sprintputch+0x4b>
  800420fa2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fa33:	48 8b 00             	mov    (%rax),%rax
  800420fa36:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420fa3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fa3e:	48 89 0a             	mov    %rcx,(%rdx)
  800420fa41:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420fa44:	88 10                	mov    %dl,(%rax)
  800420fa46:	c9                   	leaveq 
  800420fa47:	c3                   	retq   

000000800420fa48 <vsnprintf>:
  800420fa48:	55                   	push   %rbp
  800420fa49:	48 89 e5             	mov    %rsp,%rbp
  800420fa4c:	48 83 ec 50          	sub    $0x50,%rsp
  800420fa50:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420fa54:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420fa57:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420fa5b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420fa5f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420fa63:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420fa67:	48 8b 0a             	mov    (%rdx),%rcx
  800420fa6a:	48 89 08             	mov    %rcx,(%rax)
  800420fa6d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fa71:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fa75:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fa79:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fa7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fa81:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fa85:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420fa88:	48 98                	cltq   
  800420fa8a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420fa8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fa92:	48 01 d0             	add    %rdx,%rax
  800420fa95:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fa99:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420faa0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420faa5:	74 06                	je     800420faad <vsnprintf+0x65>
  800420faa7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420faab:	7f 07                	jg     800420fab4 <vsnprintf+0x6c>
  800420faad:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420fab2:	eb 2f                	jmp    800420fae3 <vsnprintf+0x9b>
  800420fab4:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420fab8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420fabc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420fac0:	48 89 c6             	mov    %rax,%rsi
  800420fac3:	48 bf fb f9 20 04 80 	movabs $0x800420f9fb,%rdi
  800420faca:	00 00 00 
  800420facd:	48 b8 30 f4 20 04 80 	movabs $0x800420f430,%rax
  800420fad4:	00 00 00 
  800420fad7:	ff d0                	callq  *%rax
  800420fad9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fadd:	c6 00 00             	movb   $0x0,(%rax)
  800420fae0:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420fae3:	c9                   	leaveq 
  800420fae4:	c3                   	retq   

000000800420fae5 <snprintf>:
  800420fae5:	55                   	push   %rbp
  800420fae6:	48 89 e5             	mov    %rsp,%rbp
  800420fae9:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420faf0:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420faf7:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420fafd:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fb04:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fb0b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fb12:	84 c0                	test   %al,%al
  800420fb14:	74 20                	je     800420fb36 <snprintf+0x51>
  800420fb16:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fb1a:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fb1e:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fb22:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fb26:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fb2a:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fb2e:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fb32:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fb36:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  800420fb3d:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420fb44:	00 00 00 
  800420fb47:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420fb4e:	00 00 00 
  800420fb51:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420fb55:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420fb5c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fb63:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fb6a:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420fb71:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420fb78:	48 8b 0a             	mov    (%rdx),%rcx
  800420fb7b:	48 89 08             	mov    %rcx,(%rax)
  800420fb7e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fb82:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fb86:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fb8a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fb8e:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420fb95:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420fb9c:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420fba2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420fba9:	48 89 c7             	mov    %rax,%rdi
  800420fbac:	48 b8 48 fa 20 04 80 	movabs $0x800420fa48,%rax
  800420fbb3:	00 00 00 
  800420fbb6:	ff d0                	callq  *%rax
  800420fbb8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  800420fbbe:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800420fbc4:	c9                   	leaveq 
  800420fbc5:	c3                   	retq   

000000800420fbc6 <readline>:
  800420fbc6:	55                   	push   %rbp
  800420fbc7:	48 89 e5             	mov    %rsp,%rbp
  800420fbca:	48 83 ec 20          	sub    $0x20,%rsp
  800420fbce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fbd2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fbd7:	74 22                	je     800420fbfb <readline+0x35>
  800420fbd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbdd:	48 89 c6             	mov    %rax,%rsi
  800420fbe0:	48 bf 28 ad 21 04 80 	movabs $0x800421ad28,%rdi
  800420fbe7:	00 00 00 
  800420fbea:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fbef:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420fbf6:	00 00 00 
  800420fbf9:	ff d2                	callq  *%rdx
  800420fbfb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fc02:	bf 00 00 00 00       	mov    $0x0,%edi
  800420fc07:	48 b8 7a 13 20 04 80 	movabs $0x800420137a,%rax
  800420fc0e:	00 00 00 
  800420fc11:	ff d0                	callq  *%rax
  800420fc13:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420fc16:	48 b8 58 13 20 04 80 	movabs $0x8004201358,%rax
  800420fc1d:	00 00 00 
  800420fc20:	ff d0                	callq  *%rax
  800420fc22:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420fc25:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420fc29:	79 30                	jns    800420fc5b <readline+0x95>
  800420fc2b:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800420fc2f:	74 20                	je     800420fc51 <readline+0x8b>
  800420fc31:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fc34:	89 c6                	mov    %eax,%esi
  800420fc36:	48 bf 2b ad 21 04 80 	movabs $0x800421ad2b,%rdi
  800420fc3d:	00 00 00 
  800420fc40:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fc45:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800420fc4c:	00 00 00 
  800420fc4f:	ff d2                	callq  *%rdx
  800420fc51:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fc56:	e9 be 00 00 00       	jmpq   800420fd19 <readline+0x153>
  800420fc5b:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420fc5f:	74 06                	je     800420fc67 <readline+0xa1>
  800420fc61:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420fc65:	75 26                	jne    800420fc8d <readline+0xc7>
  800420fc67:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420fc6b:	7e 20                	jle    800420fc8d <readline+0xc7>
  800420fc6d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fc71:	74 11                	je     800420fc84 <readline+0xbe>
  800420fc73:	bf 08 00 00 00       	mov    $0x8,%edi
  800420fc78:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fc7f:	00 00 00 
  800420fc82:	ff d0                	callq  *%rax
  800420fc84:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420fc88:	e9 87 00 00 00       	jmpq   800420fd14 <readline+0x14e>
  800420fc8d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420fc91:	7e 3f                	jle    800420fcd2 <readline+0x10c>
  800420fc93:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420fc9a:	7f 36                	jg     800420fcd2 <readline+0x10c>
  800420fc9c:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fca0:	74 11                	je     800420fcb3 <readline+0xed>
  800420fca2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fca5:	89 c7                	mov    %eax,%edi
  800420fca7:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fcae:	00 00 00 
  800420fcb1:	ff d0                	callq  *%rax
  800420fcb3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fcb6:	8d 50 01             	lea    0x1(%rax),%edx
  800420fcb9:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800420fcbc:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420fcbf:	89 d1                	mov    %edx,%ecx
  800420fcc1:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fcc8:	00 00 00 
  800420fccb:	48 98                	cltq   
  800420fccd:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420fcd0:	eb 42                	jmp    800420fd14 <readline+0x14e>
  800420fcd2:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800420fcd6:	74 06                	je     800420fcde <readline+0x118>
  800420fcd8:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800420fcdc:	75 36                	jne    800420fd14 <readline+0x14e>
  800420fcde:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fce2:	74 11                	je     800420fcf5 <readline+0x12f>
  800420fce4:	bf 0a 00 00 00       	mov    $0xa,%edi
  800420fce9:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420fcf0:	00 00 00 
  800420fcf3:	ff d0                	callq  *%rax
  800420fcf5:	48 ba a0 d2 49 04 80 	movabs $0x800449d2a0,%rdx
  800420fcfc:	00 00 00 
  800420fcff:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fd02:	48 98                	cltq   
  800420fd04:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800420fd08:	48 b8 a0 d2 49 04 80 	movabs $0x800449d2a0,%rax
  800420fd0f:	00 00 00 
  800420fd12:	eb 05                	jmp    800420fd19 <readline+0x153>
  800420fd14:	e9 fd fe ff ff       	jmpq   800420fc16 <readline+0x50>
  800420fd19:	c9                   	leaveq 
  800420fd1a:	c3                   	retq   

000000800420fd1b <strlen>:
  800420fd1b:	55                   	push   %rbp
  800420fd1c:	48 89 e5             	mov    %rsp,%rbp
  800420fd1f:	48 83 ec 18          	sub    $0x18,%rsp
  800420fd23:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd27:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fd2e:	eb 09                	jmp    800420fd39 <strlen+0x1e>
  800420fd30:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fd34:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fd39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd3d:	0f b6 00             	movzbl (%rax),%eax
  800420fd40:	84 c0                	test   %al,%al
  800420fd42:	75 ec                	jne    800420fd30 <strlen+0x15>
  800420fd44:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fd47:	c9                   	leaveq 
  800420fd48:	c3                   	retq   

000000800420fd49 <strnlen>:
  800420fd49:	55                   	push   %rbp
  800420fd4a:	48 89 e5             	mov    %rsp,%rbp
  800420fd4d:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd51:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd55:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd59:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fd60:	eb 0e                	jmp    800420fd70 <strnlen+0x27>
  800420fd62:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fd66:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fd6b:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  800420fd70:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420fd75:	74 0b                	je     800420fd82 <strnlen+0x39>
  800420fd77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd7b:	0f b6 00             	movzbl (%rax),%eax
  800420fd7e:	84 c0                	test   %al,%al
  800420fd80:	75 e0                	jne    800420fd62 <strnlen+0x19>
  800420fd82:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fd85:	c9                   	leaveq 
  800420fd86:	c3                   	retq   

000000800420fd87 <strcpy>:
  800420fd87:	55                   	push   %rbp
  800420fd88:	48 89 e5             	mov    %rsp,%rbp
  800420fd8b:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fd97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fd9f:	90                   	nop
  800420fda0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fda4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fda8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fdac:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fdb0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fdb4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fdb8:	0f b6 12             	movzbl (%rdx),%edx
  800420fdbb:	88 10                	mov    %dl,(%rax)
  800420fdbd:	0f b6 00             	movzbl (%rax),%eax
  800420fdc0:	84 c0                	test   %al,%al
  800420fdc2:	75 dc                	jne    800420fda0 <strcpy+0x19>
  800420fdc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fdc8:	c9                   	leaveq 
  800420fdc9:	c3                   	retq   

000000800420fdca <strcat>:
  800420fdca:	55                   	push   %rbp
  800420fdcb:	48 89 e5             	mov    %rsp,%rbp
  800420fdce:	48 83 ec 20          	sub    $0x20,%rsp
  800420fdd2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fdd6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fdda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdde:	48 89 c7             	mov    %rax,%rdi
  800420fde1:	48 b8 1b fd 20 04 80 	movabs $0x800420fd1b,%rax
  800420fde8:	00 00 00 
  800420fdeb:	ff d0                	callq  *%rax
  800420fded:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420fdf0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fdf3:	48 63 d0             	movslq %eax,%rdx
  800420fdf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdfa:	48 01 c2             	add    %rax,%rdx
  800420fdfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fe01:	48 89 c6             	mov    %rax,%rsi
  800420fe04:	48 89 d7             	mov    %rdx,%rdi
  800420fe07:	48 b8 87 fd 20 04 80 	movabs $0x800420fd87,%rax
  800420fe0e:	00 00 00 
  800420fe11:	ff d0                	callq  *%rax
  800420fe13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe17:	c9                   	leaveq 
  800420fe18:	c3                   	retq   

000000800420fe19 <strncpy>:
  800420fe19:	55                   	push   %rbp
  800420fe1a:	48 89 e5             	mov    %rsp,%rbp
  800420fe1d:	48 83 ec 28          	sub    $0x28,%rsp
  800420fe21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe25:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fe29:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fe2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fe35:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420fe3c:	00 
  800420fe3d:	eb 2a                	jmp    800420fe69 <strncpy+0x50>
  800420fe3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe43:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fe47:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420fe4b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fe4f:	0f b6 12             	movzbl (%rdx),%edx
  800420fe52:	88 10                	mov    %dl,(%rax)
  800420fe54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fe58:	0f b6 00             	movzbl (%rax),%eax
  800420fe5b:	84 c0                	test   %al,%al
  800420fe5d:	74 05                	je     800420fe64 <strncpy+0x4b>
  800420fe5f:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  800420fe64:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420fe69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe6d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fe71:	72 cc                	jb     800420fe3f <strncpy+0x26>
  800420fe73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fe77:	c9                   	leaveq 
  800420fe78:	c3                   	retq   

000000800420fe79 <strlcpy>:
  800420fe79:	55                   	push   %rbp
  800420fe7a:	48 89 e5             	mov    %rsp,%rbp
  800420fe7d:	48 83 ec 28          	sub    $0x28,%rsp
  800420fe81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fe89:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fe8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fe95:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fe9a:	74 3d                	je     800420fed9 <strlcpy+0x60>
  800420fe9c:	eb 1d                	jmp    800420febb <strlcpy+0x42>
  800420fe9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fea2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fea6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420feaa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420feae:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420feb2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420feb6:	0f b6 12             	movzbl (%rdx),%edx
  800420feb9:	88 10                	mov    %dl,(%rax)
  800420febb:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  800420fec0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420fec5:	74 0b                	je     800420fed2 <strlcpy+0x59>
  800420fec7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fecb:	0f b6 00             	movzbl (%rax),%eax
  800420fece:	84 c0                	test   %al,%al
  800420fed0:	75 cc                	jne    800420fe9e <strlcpy+0x25>
  800420fed2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fed6:	c6 00 00             	movb   $0x0,(%rax)
  800420fed9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fedd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fee1:	48 29 c2             	sub    %rax,%rdx
  800420fee4:	48 89 d0             	mov    %rdx,%rax
  800420fee7:	c9                   	leaveq 
  800420fee8:	c3                   	retq   

000000800420fee9 <strcmp>:
  800420fee9:	55                   	push   %rbp
  800420feea:	48 89 e5             	mov    %rsp,%rbp
  800420feed:	48 83 ec 10          	sub    $0x10,%rsp
  800420fef1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fef5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fef9:	eb 0a                	jmp    800420ff05 <strcmp+0x1c>
  800420fefb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff00:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420ff05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff09:	0f b6 00             	movzbl (%rax),%eax
  800420ff0c:	84 c0                	test   %al,%al
  800420ff0e:	74 12                	je     800420ff22 <strcmp+0x39>
  800420ff10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff14:	0f b6 10             	movzbl (%rax),%edx
  800420ff17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ff1b:	0f b6 00             	movzbl (%rax),%eax
  800420ff1e:	38 c2                	cmp    %al,%dl
  800420ff20:	74 d9                	je     800420fefb <strcmp+0x12>
  800420ff22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff26:	0f b6 00             	movzbl (%rax),%eax
  800420ff29:	0f b6 d0             	movzbl %al,%edx
  800420ff2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ff30:	0f b6 00             	movzbl (%rax),%eax
  800420ff33:	0f b6 c0             	movzbl %al,%eax
  800420ff36:	29 c2                	sub    %eax,%edx
  800420ff38:	89 d0                	mov    %edx,%eax
  800420ff3a:	c9                   	leaveq 
  800420ff3b:	c3                   	retq   

000000800420ff3c <strncmp>:
  800420ff3c:	55                   	push   %rbp
  800420ff3d:	48 89 e5             	mov    %rsp,%rbp
  800420ff40:	48 83 ec 18          	sub    $0x18,%rsp
  800420ff44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ff48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ff4c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ff50:	eb 0f                	jmp    800420ff61 <strncmp+0x25>
  800420ff52:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  800420ff57:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ff5c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420ff61:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff66:	74 1d                	je     800420ff85 <strncmp+0x49>
  800420ff68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff6c:	0f b6 00             	movzbl (%rax),%eax
  800420ff6f:	84 c0                	test   %al,%al
  800420ff71:	74 12                	je     800420ff85 <strncmp+0x49>
  800420ff73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff77:	0f b6 10             	movzbl (%rax),%edx
  800420ff7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ff7e:	0f b6 00             	movzbl (%rax),%eax
  800420ff81:	38 c2                	cmp    %al,%dl
  800420ff83:	74 cd                	je     800420ff52 <strncmp+0x16>
  800420ff85:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff8a:	75 07                	jne    800420ff93 <strncmp+0x57>
  800420ff8c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff91:	eb 18                	jmp    800420ffab <strncmp+0x6f>
  800420ff93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff97:	0f b6 00             	movzbl (%rax),%eax
  800420ff9a:	0f b6 d0             	movzbl %al,%edx
  800420ff9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ffa1:	0f b6 00             	movzbl (%rax),%eax
  800420ffa4:	0f b6 c0             	movzbl %al,%eax
  800420ffa7:	29 c2                	sub    %eax,%edx
  800420ffa9:	89 d0                	mov    %edx,%eax
  800420ffab:	c9                   	leaveq 
  800420ffac:	c3                   	retq   

000000800420ffad <strchr>:
  800420ffad:	55                   	push   %rbp
  800420ffae:	48 89 e5             	mov    %rsp,%rbp
  800420ffb1:	48 83 ec 0c          	sub    $0xc,%rsp
  800420ffb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ffb9:	89 f0                	mov    %esi,%eax
  800420ffbb:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420ffbe:	eb 17                	jmp    800420ffd7 <strchr+0x2a>
  800420ffc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffc4:	0f b6 00             	movzbl (%rax),%eax
  800420ffc7:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420ffca:	75 06                	jne    800420ffd2 <strchr+0x25>
  800420ffcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffd0:	eb 15                	jmp    800420ffe7 <strchr+0x3a>
  800420ffd2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ffd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffdb:	0f b6 00             	movzbl (%rax),%eax
  800420ffde:	84 c0                	test   %al,%al
  800420ffe0:	75 de                	jne    800420ffc0 <strchr+0x13>
  800420ffe2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ffe7:	c9                   	leaveq 
  800420ffe8:	c3                   	retq   

000000800420ffe9 <strfind>:
  800420ffe9:	55                   	push   %rbp
  800420ffea:	48 89 e5             	mov    %rsp,%rbp
  800420ffed:	48 83 ec 0c          	sub    $0xc,%rsp
  800420fff1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fff5:	89 f0                	mov    %esi,%eax
  800420fff7:	88 45 f4             	mov    %al,-0xc(%rbp)
  800420fffa:	eb 13                	jmp    800421000f <strfind+0x26>
  800420fffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210000:	0f b6 00             	movzbl (%rax),%eax
  8004210003:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210006:	75 02                	jne    800421000a <strfind+0x21>
  8004210008:	eb 10                	jmp    800421001a <strfind+0x31>
  800421000a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421000f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210013:	0f b6 00             	movzbl (%rax),%eax
  8004210016:	84 c0                	test   %al,%al
  8004210018:	75 e2                	jne    800420fffc <strfind+0x13>
  800421001a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421001e:	c9                   	leaveq 
  800421001f:	c3                   	retq   

0000008004210020 <memset>:
  8004210020:	55                   	push   %rbp
  8004210021:	48 89 e5             	mov    %rsp,%rbp
  8004210024:	48 83 ec 18          	sub    $0x18,%rsp
  8004210028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421002c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  800421002f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210033:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210038:	75 06                	jne    8004210040 <memset+0x20>
  800421003a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421003e:	eb 69                	jmp    80042100a9 <memset+0x89>
  8004210040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210044:	83 e0 03             	and    $0x3,%eax
  8004210047:	48 85 c0             	test   %rax,%rax
  800421004a:	75 48                	jne    8004210094 <memset+0x74>
  800421004c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210050:	83 e0 03             	and    $0x3,%eax
  8004210053:	48 85 c0             	test   %rax,%rax
  8004210056:	75 3c                	jne    8004210094 <memset+0x74>
  8004210058:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  800421005f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210062:	c1 e0 18             	shl    $0x18,%eax
  8004210065:	89 c2                	mov    %eax,%edx
  8004210067:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421006a:	c1 e0 10             	shl    $0x10,%eax
  800421006d:	09 c2                	or     %eax,%edx
  800421006f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210072:	c1 e0 08             	shl    $0x8,%eax
  8004210075:	09 d0                	or     %edx,%eax
  8004210077:	09 45 f4             	or     %eax,-0xc(%rbp)
  800421007a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421007e:	48 c1 e8 02          	shr    $0x2,%rax
  8004210082:	48 89 c1             	mov    %rax,%rcx
  8004210085:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210089:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421008c:	48 89 d7             	mov    %rdx,%rdi
  800421008f:	fc                   	cld    
  8004210090:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210092:	eb 11                	jmp    80042100a5 <memset+0x85>
  8004210094:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210098:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421009b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421009f:	48 89 d7             	mov    %rdx,%rdi
  80042100a2:	fc                   	cld    
  80042100a3:	f3 aa                	rep stos %al,%es:(%rdi)
  80042100a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100a9:	c9                   	leaveq 
  80042100aa:	c3                   	retq   

00000080042100ab <memmove>:
  80042100ab:	55                   	push   %rbp
  80042100ac:	48 89 e5             	mov    %rsp,%rbp
  80042100af:	48 83 ec 28          	sub    $0x28,%rsp
  80042100b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042100b7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042100bb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042100bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042100c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042100c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042100cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100d3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042100d7:	0f 83 88 00 00 00    	jae    8004210165 <memmove+0xba>
  80042100dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042100e5:	48 01 d0             	add    %rdx,%rax
  80042100e8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042100ec:	76 77                	jbe    8004210165 <memmove+0xba>
  80042100ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100f2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042100f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100fa:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  80042100fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210102:	83 e0 03             	and    $0x3,%eax
  8004210105:	48 85 c0             	test   %rax,%rax
  8004210108:	75 3b                	jne    8004210145 <memmove+0x9a>
  800421010a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421010e:	83 e0 03             	and    $0x3,%eax
  8004210111:	48 85 c0             	test   %rax,%rax
  8004210114:	75 2f                	jne    8004210145 <memmove+0x9a>
  8004210116:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421011a:	83 e0 03             	and    $0x3,%eax
  800421011d:	48 85 c0             	test   %rax,%rax
  8004210120:	75 23                	jne    8004210145 <memmove+0x9a>
  8004210122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210126:	48 83 e8 04          	sub    $0x4,%rax
  800421012a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421012e:	48 83 ea 04          	sub    $0x4,%rdx
  8004210132:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210136:	48 c1 e9 02          	shr    $0x2,%rcx
  800421013a:	48 89 c7             	mov    %rax,%rdi
  800421013d:	48 89 d6             	mov    %rdx,%rsi
  8004210140:	fd                   	std    
  8004210141:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210143:	eb 1d                	jmp    8004210162 <memmove+0xb7>
  8004210145:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210149:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421014d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210151:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210155:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210159:	48 89 d7             	mov    %rdx,%rdi
  800421015c:	48 89 c1             	mov    %rax,%rcx
  800421015f:	fd                   	std    
  8004210160:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210162:	fc                   	cld    
  8004210163:	eb 57                	jmp    80042101bc <memmove+0x111>
  8004210165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210169:	83 e0 03             	and    $0x3,%eax
  800421016c:	48 85 c0             	test   %rax,%rax
  800421016f:	75 36                	jne    80042101a7 <memmove+0xfc>
  8004210171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210175:	83 e0 03             	and    $0x3,%eax
  8004210178:	48 85 c0             	test   %rax,%rax
  800421017b:	75 2a                	jne    80042101a7 <memmove+0xfc>
  800421017d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210181:	83 e0 03             	and    $0x3,%eax
  8004210184:	48 85 c0             	test   %rax,%rax
  8004210187:	75 1e                	jne    80042101a7 <memmove+0xfc>
  8004210189:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421018d:	48 c1 e8 02          	shr    $0x2,%rax
  8004210191:	48 89 c1             	mov    %rax,%rcx
  8004210194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210198:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421019c:	48 89 c7             	mov    %rax,%rdi
  800421019f:	48 89 d6             	mov    %rdx,%rsi
  80042101a2:	fc                   	cld    
  80042101a3:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042101a5:	eb 15                	jmp    80042101bc <memmove+0x111>
  80042101a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042101ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042101af:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042101b3:	48 89 c7             	mov    %rax,%rdi
  80042101b6:	48 89 d6             	mov    %rdx,%rsi
  80042101b9:	fc                   	cld    
  80042101ba:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042101bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101c0:	c9                   	leaveq 
  80042101c1:	c3                   	retq   

00000080042101c2 <memcpy>:
  80042101c2:	55                   	push   %rbp
  80042101c3:	48 89 e5             	mov    %rsp,%rbp
  80042101c6:	48 83 ec 18          	sub    $0x18,%rsp
  80042101ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042101ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042101d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042101d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101da:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042101de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101e2:	48 89 ce             	mov    %rcx,%rsi
  80042101e5:	48 89 c7             	mov    %rax,%rdi
  80042101e8:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  80042101ef:	00 00 00 
  80042101f2:	ff d0                	callq  *%rax
  80042101f4:	c9                   	leaveq 
  80042101f5:	c3                   	retq   

00000080042101f6 <memcmp>:
  80042101f6:	55                   	push   %rbp
  80042101f7:	48 89 e5             	mov    %rsp,%rbp
  80042101fa:	48 83 ec 28          	sub    $0x28,%rsp
  80042101fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210202:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210206:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421020a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421020e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210212:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210216:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421021a:	eb 36                	jmp    8004210252 <memcmp+0x5c>
  800421021c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210220:	0f b6 10             	movzbl (%rax),%edx
  8004210223:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210227:	0f b6 00             	movzbl (%rax),%eax
  800421022a:	38 c2                	cmp    %al,%dl
  800421022c:	74 1a                	je     8004210248 <memcmp+0x52>
  800421022e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210232:	0f b6 00             	movzbl (%rax),%eax
  8004210235:	0f b6 d0             	movzbl %al,%edx
  8004210238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421023c:	0f b6 00             	movzbl (%rax),%eax
  800421023f:	0f b6 c0             	movzbl %al,%eax
  8004210242:	29 c2                	sub    %eax,%edx
  8004210244:	89 d0                	mov    %edx,%eax
  8004210246:	eb 20                	jmp    8004210268 <memcmp+0x72>
  8004210248:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421024d:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210252:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210256:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421025a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421025e:	48 85 c0             	test   %rax,%rax
  8004210261:	75 b9                	jne    800421021c <memcmp+0x26>
  8004210263:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210268:	c9                   	leaveq 
  8004210269:	c3                   	retq   

000000800421026a <memfind>:
  800421026a:	55                   	push   %rbp
  800421026b:	48 89 e5             	mov    %rsp,%rbp
  800421026e:	48 83 ec 28          	sub    $0x28,%rsp
  8004210272:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210276:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210279:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421027d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210281:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210285:	48 01 d0             	add    %rdx,%rax
  8004210288:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421028c:	eb 15                	jmp    80042102a3 <memfind+0x39>
  800421028e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210292:	0f b6 10             	movzbl (%rax),%edx
  8004210295:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210298:	38 c2                	cmp    %al,%dl
  800421029a:	75 02                	jne    800421029e <memfind+0x34>
  800421029c:	eb 0f                	jmp    80042102ad <memfind+0x43>
  800421029e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042102a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102a7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042102ab:	72 e1                	jb     800421028e <memfind+0x24>
  80042102ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102b1:	c9                   	leaveq 
  80042102b2:	c3                   	retq   

00000080042102b3 <strtol>:
  80042102b3:	55                   	push   %rbp
  80042102b4:	48 89 e5             	mov    %rsp,%rbp
  80042102b7:	48 83 ec 34          	sub    $0x34,%rsp
  80042102bb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042102bf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042102c3:	89 55 cc             	mov    %edx,-0x34(%rbp)
  80042102c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042102cd:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042102d4:	00 
  80042102d5:	eb 05                	jmp    80042102dc <strtol+0x29>
  80042102d7:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042102dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102e0:	0f b6 00             	movzbl (%rax),%eax
  80042102e3:	3c 20                	cmp    $0x20,%al
  80042102e5:	74 f0                	je     80042102d7 <strtol+0x24>
  80042102e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102eb:	0f b6 00             	movzbl (%rax),%eax
  80042102ee:	3c 09                	cmp    $0x9,%al
  80042102f0:	74 e5                	je     80042102d7 <strtol+0x24>
  80042102f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102f6:	0f b6 00             	movzbl (%rax),%eax
  80042102f9:	3c 2b                	cmp    $0x2b,%al
  80042102fb:	75 07                	jne    8004210304 <strtol+0x51>
  80042102fd:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210302:	eb 17                	jmp    800421031b <strtol+0x68>
  8004210304:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210308:	0f b6 00             	movzbl (%rax),%eax
  800421030b:	3c 2d                	cmp    $0x2d,%al
  800421030d:	75 0c                	jne    800421031b <strtol+0x68>
  800421030f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210314:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  800421031b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421031f:	74 06                	je     8004210327 <strtol+0x74>
  8004210321:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210325:	75 28                	jne    800421034f <strtol+0x9c>
  8004210327:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421032b:	0f b6 00             	movzbl (%rax),%eax
  800421032e:	3c 30                	cmp    $0x30,%al
  8004210330:	75 1d                	jne    800421034f <strtol+0x9c>
  8004210332:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210336:	48 83 c0 01          	add    $0x1,%rax
  800421033a:	0f b6 00             	movzbl (%rax),%eax
  800421033d:	3c 78                	cmp    $0x78,%al
  800421033f:	75 0e                	jne    800421034f <strtol+0x9c>
  8004210341:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210346:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  800421034d:	eb 2c                	jmp    800421037b <strtol+0xc8>
  800421034f:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210353:	75 19                	jne    800421036e <strtol+0xbb>
  8004210355:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210359:	0f b6 00             	movzbl (%rax),%eax
  800421035c:	3c 30                	cmp    $0x30,%al
  800421035e:	75 0e                	jne    800421036e <strtol+0xbb>
  8004210360:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210365:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  800421036c:	eb 0d                	jmp    800421037b <strtol+0xc8>
  800421036e:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210372:	75 07                	jne    800421037b <strtol+0xc8>
  8004210374:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  800421037b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421037f:	0f b6 00             	movzbl (%rax),%eax
  8004210382:	3c 2f                	cmp    $0x2f,%al
  8004210384:	7e 1d                	jle    80042103a3 <strtol+0xf0>
  8004210386:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421038a:	0f b6 00             	movzbl (%rax),%eax
  800421038d:	3c 39                	cmp    $0x39,%al
  800421038f:	7f 12                	jg     80042103a3 <strtol+0xf0>
  8004210391:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210395:	0f b6 00             	movzbl (%rax),%eax
  8004210398:	0f be c0             	movsbl %al,%eax
  800421039b:	83 e8 30             	sub    $0x30,%eax
  800421039e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042103a1:	eb 4e                	jmp    80042103f1 <strtol+0x13e>
  80042103a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103a7:	0f b6 00             	movzbl (%rax),%eax
  80042103aa:	3c 60                	cmp    $0x60,%al
  80042103ac:	7e 1d                	jle    80042103cb <strtol+0x118>
  80042103ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103b2:	0f b6 00             	movzbl (%rax),%eax
  80042103b5:	3c 7a                	cmp    $0x7a,%al
  80042103b7:	7f 12                	jg     80042103cb <strtol+0x118>
  80042103b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103bd:	0f b6 00             	movzbl (%rax),%eax
  80042103c0:	0f be c0             	movsbl %al,%eax
  80042103c3:	83 e8 57             	sub    $0x57,%eax
  80042103c6:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042103c9:	eb 26                	jmp    80042103f1 <strtol+0x13e>
  80042103cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103cf:	0f b6 00             	movzbl (%rax),%eax
  80042103d2:	3c 40                	cmp    $0x40,%al
  80042103d4:	7e 48                	jle    800421041e <strtol+0x16b>
  80042103d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103da:	0f b6 00             	movzbl (%rax),%eax
  80042103dd:	3c 5a                	cmp    $0x5a,%al
  80042103df:	7f 3d                	jg     800421041e <strtol+0x16b>
  80042103e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103e5:	0f b6 00             	movzbl (%rax),%eax
  80042103e8:	0f be c0             	movsbl %al,%eax
  80042103eb:	83 e8 37             	sub    $0x37,%eax
  80042103ee:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042103f1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042103f4:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  80042103f7:	7c 02                	jl     80042103fb <strtol+0x148>
  80042103f9:	eb 23                	jmp    800421041e <strtol+0x16b>
  80042103fb:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210400:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210403:	48 98                	cltq   
  8004210405:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800421040a:	48 89 c2             	mov    %rax,%rdx
  800421040d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210410:	48 98                	cltq   
  8004210412:	48 01 d0             	add    %rdx,%rax
  8004210415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210419:	e9 5d ff ff ff       	jmpq   800421037b <strtol+0xc8>
  800421041e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210423:	74 0b                	je     8004210430 <strtol+0x17d>
  8004210425:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210429:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421042d:	48 89 10             	mov    %rdx,(%rax)
  8004210430:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210434:	74 09                	je     800421043f <strtol+0x18c>
  8004210436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421043a:	48 f7 d8             	neg    %rax
  800421043d:	eb 04                	jmp    8004210443 <strtol+0x190>
  800421043f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210443:	c9                   	leaveq 
  8004210444:	c3                   	retq   

0000008004210445 <strstr>:
  8004210445:	55                   	push   %rbp
  8004210446:	48 89 e5             	mov    %rsp,%rbp
  8004210449:	48 83 ec 30          	sub    $0x30,%rsp
  800421044d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210451:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210455:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210459:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421045d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210461:	0f b6 00             	movzbl (%rax),%eax
  8004210464:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210467:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421046b:	75 06                	jne    8004210473 <strstr+0x2e>
  800421046d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210471:	eb 6b                	jmp    80042104de <strstr+0x99>
  8004210473:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210477:	48 89 c7             	mov    %rax,%rdi
  800421047a:	48 b8 1b fd 20 04 80 	movabs $0x800420fd1b,%rax
  8004210481:	00 00 00 
  8004210484:	ff d0                	callq  *%rax
  8004210486:	48 98                	cltq   
  8004210488:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421048c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210490:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210494:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210498:	0f b6 00             	movzbl (%rax),%eax
  800421049b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421049e:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  80042104a2:	75 07                	jne    80042104ab <strstr+0x66>
  80042104a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042104a9:	eb 33                	jmp    80042104de <strstr+0x99>
  80042104ab:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042104af:	3a 45 ff             	cmp    -0x1(%rbp),%al
  80042104b2:	75 d8                	jne    800421048c <strstr+0x47>
  80042104b4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042104b8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042104bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104c0:	48 89 ce             	mov    %rcx,%rsi
  80042104c3:	48 89 c7             	mov    %rax,%rdi
  80042104c6:	48 b8 3c ff 20 04 80 	movabs $0x800420ff3c,%rax
  80042104cd:	00 00 00 
  80042104d0:	ff d0                	callq  *%rax
  80042104d2:	85 c0                	test   %eax,%eax
  80042104d4:	75 b6                	jne    800421048c <strstr+0x47>
  80042104d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104da:	48 83 e8 01          	sub    $0x1,%rax
  80042104de:	c9                   	leaveq 
  80042104df:	c3                   	retq   

00000080042104e0 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042104e0:	55                   	push   %rbp
  80042104e1:	48 89 e5             	mov    %rsp,%rbp
  80042104e4:	48 83 ec 24          	sub    $0x24,%rsp
  80042104e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042104ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042104f0:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042104f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042104f7:	48 8b 10             	mov    (%rax),%rdx
  80042104fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104fe:	48 01 d0             	add    %rdx,%rax
  8004210501:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210505:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421050c:	00 
	switch (bytes_to_read) {
  800421050d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210510:	83 f8 02             	cmp    $0x2,%eax
  8004210513:	0f 84 ab 00 00 00    	je     80042105c4 <_dwarf_read_lsb+0xe4>
  8004210519:	83 f8 02             	cmp    $0x2,%eax
  800421051c:	7f 0e                	jg     800421052c <_dwarf_read_lsb+0x4c>
  800421051e:	83 f8 01             	cmp    $0x1,%eax
  8004210521:	0f 84 b3 00 00 00    	je     80042105da <_dwarf_read_lsb+0xfa>
  8004210527:	e9 d9 00 00 00       	jmpq   8004210605 <_dwarf_read_lsb+0x125>
  800421052c:	83 f8 04             	cmp    $0x4,%eax
  800421052f:	74 65                	je     8004210596 <_dwarf_read_lsb+0xb6>
  8004210531:	83 f8 08             	cmp    $0x8,%eax
  8004210534:	0f 85 cb 00 00 00    	jne    8004210605 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421053a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421053e:	48 83 c0 04          	add    $0x4,%rax
  8004210542:	0f b6 00             	movzbl (%rax),%eax
  8004210545:	0f b6 c0             	movzbl %al,%eax
  8004210548:	48 c1 e0 20          	shl    $0x20,%rax
  800421054c:	48 89 c2             	mov    %rax,%rdx
  800421054f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210553:	48 83 c0 05          	add    $0x5,%rax
  8004210557:	0f b6 00             	movzbl (%rax),%eax
  800421055a:	0f b6 c0             	movzbl %al,%eax
  800421055d:	48 c1 e0 28          	shl    $0x28,%rax
  8004210561:	48 09 d0             	or     %rdx,%rax
  8004210564:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210568:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421056c:	48 83 c0 06          	add    $0x6,%rax
  8004210570:	0f b6 00             	movzbl (%rax),%eax
  8004210573:	0f b6 c0             	movzbl %al,%eax
  8004210576:	48 c1 e0 30          	shl    $0x30,%rax
  800421057a:	48 89 c2             	mov    %rax,%rdx
  800421057d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210581:	48 83 c0 07          	add    $0x7,%rax
  8004210585:	0f b6 00             	movzbl (%rax),%eax
  8004210588:	0f b6 c0             	movzbl %al,%eax
  800421058b:	48 c1 e0 38          	shl    $0x38,%rax
  800421058f:	48 09 d0             	or     %rdx,%rax
  8004210592:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210596:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421059a:	48 83 c0 02          	add    $0x2,%rax
  800421059e:	0f b6 00             	movzbl (%rax),%eax
  80042105a1:	0f b6 c0             	movzbl %al,%eax
  80042105a4:	48 c1 e0 10          	shl    $0x10,%rax
  80042105a8:	48 89 c2             	mov    %rax,%rdx
  80042105ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105af:	48 83 c0 03          	add    $0x3,%rax
  80042105b3:	0f b6 00             	movzbl (%rax),%eax
  80042105b6:	0f b6 c0             	movzbl %al,%eax
  80042105b9:	48 c1 e0 18          	shl    $0x18,%rax
  80042105bd:	48 09 d0             	or     %rdx,%rax
  80042105c0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042105c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105c8:	48 83 c0 01          	add    $0x1,%rax
  80042105cc:	0f b6 00             	movzbl (%rax),%eax
  80042105cf:	0f b6 c0             	movzbl %al,%eax
  80042105d2:	48 c1 e0 08          	shl    $0x8,%rax
  80042105d6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042105da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105de:	0f b6 00             	movzbl (%rax),%eax
  80042105e1:	0f b6 c0             	movzbl %al,%eax
  80042105e4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042105e8:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  80042105e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042105ed:	48 8b 10             	mov    (%rax),%rdx
  80042105f0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042105f3:	48 98                	cltq   
  80042105f5:	48 01 c2             	add    %rax,%rdx
  80042105f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042105fc:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042105ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210603:	eb 05                	jmp    800421060a <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210605:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  800421060a:	c9                   	leaveq 
  800421060b:	c3                   	retq   

000000800421060c <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  800421060c:	55                   	push   %rbp
  800421060d:	48 89 e5             	mov    %rsp,%rbp
  8004210610:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210614:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210618:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421061b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421061f:	48 8b 00             	mov    (%rax),%rax
  8004210622:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210626:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421062d:	00 
	switch (bytes_to_read) {
  800421062e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210631:	83 f8 02             	cmp    $0x2,%eax
  8004210634:	0f 84 ab 00 00 00    	je     80042106e5 <_dwarf_decode_lsb+0xd9>
  800421063a:	83 f8 02             	cmp    $0x2,%eax
  800421063d:	7f 0e                	jg     800421064d <_dwarf_decode_lsb+0x41>
  800421063f:	83 f8 01             	cmp    $0x1,%eax
  8004210642:	0f 84 b3 00 00 00    	je     80042106fb <_dwarf_decode_lsb+0xef>
  8004210648:	e9 d9 00 00 00       	jmpq   8004210726 <_dwarf_decode_lsb+0x11a>
  800421064d:	83 f8 04             	cmp    $0x4,%eax
  8004210650:	74 65                	je     80042106b7 <_dwarf_decode_lsb+0xab>
  8004210652:	83 f8 08             	cmp    $0x8,%eax
  8004210655:	0f 85 cb 00 00 00    	jne    8004210726 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421065b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421065f:	48 83 c0 04          	add    $0x4,%rax
  8004210663:	0f b6 00             	movzbl (%rax),%eax
  8004210666:	0f b6 c0             	movzbl %al,%eax
  8004210669:	48 c1 e0 20          	shl    $0x20,%rax
  800421066d:	48 89 c2             	mov    %rax,%rdx
  8004210670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210674:	48 83 c0 05          	add    $0x5,%rax
  8004210678:	0f b6 00             	movzbl (%rax),%eax
  800421067b:	0f b6 c0             	movzbl %al,%eax
  800421067e:	48 c1 e0 28          	shl    $0x28,%rax
  8004210682:	48 09 d0             	or     %rdx,%rax
  8004210685:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210689:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421068d:	48 83 c0 06          	add    $0x6,%rax
  8004210691:	0f b6 00             	movzbl (%rax),%eax
  8004210694:	0f b6 c0             	movzbl %al,%eax
  8004210697:	48 c1 e0 30          	shl    $0x30,%rax
  800421069b:	48 89 c2             	mov    %rax,%rdx
  800421069e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106a2:	48 83 c0 07          	add    $0x7,%rax
  80042106a6:	0f b6 00             	movzbl (%rax),%eax
  80042106a9:	0f b6 c0             	movzbl %al,%eax
  80042106ac:	48 c1 e0 38          	shl    $0x38,%rax
  80042106b0:	48 09 d0             	or     %rdx,%rax
  80042106b3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042106b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106bb:	48 83 c0 02          	add    $0x2,%rax
  80042106bf:	0f b6 00             	movzbl (%rax),%eax
  80042106c2:	0f b6 c0             	movzbl %al,%eax
  80042106c5:	48 c1 e0 10          	shl    $0x10,%rax
  80042106c9:	48 89 c2             	mov    %rax,%rdx
  80042106cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106d0:	48 83 c0 03          	add    $0x3,%rax
  80042106d4:	0f b6 00             	movzbl (%rax),%eax
  80042106d7:	0f b6 c0             	movzbl %al,%eax
  80042106da:	48 c1 e0 18          	shl    $0x18,%rax
  80042106de:	48 09 d0             	or     %rdx,%rax
  80042106e1:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042106e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106e9:	48 83 c0 01          	add    $0x1,%rax
  80042106ed:	0f b6 00             	movzbl (%rax),%eax
  80042106f0:	0f b6 c0             	movzbl %al,%eax
  80042106f3:	48 c1 e0 08          	shl    $0x8,%rax
  80042106f7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042106fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106ff:	0f b6 00             	movzbl (%rax),%eax
  8004210702:	0f b6 c0             	movzbl %al,%eax
  8004210705:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210709:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421070a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421070e:	48 8b 10             	mov    (%rax),%rdx
  8004210711:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210714:	48 98                	cltq   
  8004210716:	48 01 c2             	add    %rax,%rdx
  8004210719:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421071d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210724:	eb 05                	jmp    800421072b <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210726:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421072b:	c9                   	leaveq 
  800421072c:	c3                   	retq   

000000800421072d <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421072d:	55                   	push   %rbp
  800421072e:	48 89 e5             	mov    %rsp,%rbp
  8004210731:	48 83 ec 24          	sub    $0x24,%rsp
  8004210735:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210739:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421073d:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210740:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210744:	48 8b 10             	mov    (%rax),%rdx
  8004210747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421074b:	48 01 d0             	add    %rdx,%rax
  800421074e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004210752:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210755:	83 f8 02             	cmp    $0x2,%eax
  8004210758:	74 35                	je     800421078f <_dwarf_read_msb+0x62>
  800421075a:	83 f8 02             	cmp    $0x2,%eax
  800421075d:	7f 0a                	jg     8004210769 <_dwarf_read_msb+0x3c>
  800421075f:	83 f8 01             	cmp    $0x1,%eax
  8004210762:	74 18                	je     800421077c <_dwarf_read_msb+0x4f>
  8004210764:	e9 53 01 00 00       	jmpq   80042108bc <_dwarf_read_msb+0x18f>
  8004210769:	83 f8 04             	cmp    $0x4,%eax
  800421076c:	74 49                	je     80042107b7 <_dwarf_read_msb+0x8a>
  800421076e:	83 f8 08             	cmp    $0x8,%eax
  8004210771:	0f 84 96 00 00 00    	je     800421080d <_dwarf_read_msb+0xe0>
  8004210777:	e9 40 01 00 00       	jmpq   80042108bc <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  800421077c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210780:	0f b6 00             	movzbl (%rax),%eax
  8004210783:	0f b6 c0             	movzbl %al,%eax
  8004210786:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421078a:	e9 34 01 00 00       	jmpq   80042108c3 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800421078f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210793:	48 83 c0 01          	add    $0x1,%rax
  8004210797:	0f b6 00             	movzbl (%rax),%eax
  800421079a:	0f b6 d0             	movzbl %al,%edx
  800421079d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107a1:	0f b6 00             	movzbl (%rax),%eax
  80042107a4:	0f b6 c0             	movzbl %al,%eax
  80042107a7:	48 c1 e0 08          	shl    $0x8,%rax
  80042107ab:	48 09 d0             	or     %rdx,%rax
  80042107ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042107b2:	e9 0c 01 00 00       	jmpq   80042108c3 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042107b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107bb:	48 83 c0 03          	add    $0x3,%rax
  80042107bf:	0f b6 00             	movzbl (%rax),%eax
  80042107c2:	0f b6 c0             	movzbl %al,%eax
  80042107c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042107c9:	48 83 c2 02          	add    $0x2,%rdx
  80042107cd:	0f b6 12             	movzbl (%rdx),%edx
  80042107d0:	0f b6 d2             	movzbl %dl,%edx
  80042107d3:	48 c1 e2 08          	shl    $0x8,%rdx
  80042107d7:	48 09 d0             	or     %rdx,%rax
  80042107da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042107de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107e2:	48 83 c0 01          	add    $0x1,%rax
  80042107e6:	0f b6 00             	movzbl (%rax),%eax
  80042107e9:	0f b6 c0             	movzbl %al,%eax
  80042107ec:	48 c1 e0 10          	shl    $0x10,%rax
  80042107f0:	48 89 c2             	mov    %rax,%rdx
  80042107f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107f7:	0f b6 00             	movzbl (%rax),%eax
  80042107fa:	0f b6 c0             	movzbl %al,%eax
  80042107fd:	48 c1 e0 18          	shl    $0x18,%rax
  8004210801:	48 09 d0             	or     %rdx,%rax
  8004210804:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210808:	e9 b6 00 00 00       	jmpq   80042108c3 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421080d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210811:	48 83 c0 07          	add    $0x7,%rax
  8004210815:	0f b6 00             	movzbl (%rax),%eax
  8004210818:	0f b6 c0             	movzbl %al,%eax
  800421081b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421081f:	48 83 c2 06          	add    $0x6,%rdx
  8004210823:	0f b6 12             	movzbl (%rdx),%edx
  8004210826:	0f b6 d2             	movzbl %dl,%edx
  8004210829:	48 c1 e2 08          	shl    $0x8,%rdx
  800421082d:	48 09 d0             	or     %rdx,%rax
  8004210830:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210838:	48 83 c0 05          	add    $0x5,%rax
  800421083c:	0f b6 00             	movzbl (%rax),%eax
  800421083f:	0f b6 c0             	movzbl %al,%eax
  8004210842:	48 c1 e0 10          	shl    $0x10,%rax
  8004210846:	48 89 c2             	mov    %rax,%rdx
  8004210849:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421084d:	48 83 c0 04          	add    $0x4,%rax
  8004210851:	0f b6 00             	movzbl (%rax),%eax
  8004210854:	0f b6 c0             	movzbl %al,%eax
  8004210857:	48 c1 e0 18          	shl    $0x18,%rax
  800421085b:	48 09 d0             	or     %rdx,%rax
  800421085e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210866:	48 83 c0 03          	add    $0x3,%rax
  800421086a:	0f b6 00             	movzbl (%rax),%eax
  800421086d:	0f b6 c0             	movzbl %al,%eax
  8004210870:	48 c1 e0 20          	shl    $0x20,%rax
  8004210874:	48 89 c2             	mov    %rax,%rdx
  8004210877:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421087b:	48 83 c0 02          	add    $0x2,%rax
  800421087f:	0f b6 00             	movzbl (%rax),%eax
  8004210882:	0f b6 c0             	movzbl %al,%eax
  8004210885:	48 c1 e0 28          	shl    $0x28,%rax
  8004210889:	48 09 d0             	or     %rdx,%rax
  800421088c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210894:	48 83 c0 01          	add    $0x1,%rax
  8004210898:	0f b6 00             	movzbl (%rax),%eax
  800421089b:	0f b6 c0             	movzbl %al,%eax
  800421089e:	48 c1 e0 30          	shl    $0x30,%rax
  80042108a2:	48 89 c2             	mov    %rax,%rdx
  80042108a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108a9:	0f b6 00             	movzbl (%rax),%eax
  80042108ac:	0f b6 c0             	movzbl %al,%eax
  80042108af:	48 c1 e0 38          	shl    $0x38,%rax
  80042108b3:	48 09 d0             	or     %rdx,%rax
  80042108b6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042108ba:	eb 07                	jmp    80042108c3 <_dwarf_read_msb+0x196>
	default:
		return (0);
  80042108bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042108c1:	eb 1a                	jmp    80042108dd <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  80042108c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042108c7:	48 8b 10             	mov    (%rax),%rdx
  80042108ca:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042108cd:	48 98                	cltq   
  80042108cf:	48 01 c2             	add    %rax,%rdx
  80042108d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042108d6:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042108d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042108dd:	c9                   	leaveq 
  80042108de:	c3                   	retq   

00000080042108df <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  80042108df:	55                   	push   %rbp
  80042108e0:	48 89 e5             	mov    %rsp,%rbp
  80042108e3:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042108e7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042108eb:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  80042108ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108f2:	48 8b 00             	mov    (%rax),%rax
  80042108f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042108f9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210900:	00 
	switch (bytes_to_read) {
  8004210901:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210904:	83 f8 02             	cmp    $0x2,%eax
  8004210907:	74 35                	je     800421093e <_dwarf_decode_msb+0x5f>
  8004210909:	83 f8 02             	cmp    $0x2,%eax
  800421090c:	7f 0a                	jg     8004210918 <_dwarf_decode_msb+0x39>
  800421090e:	83 f8 01             	cmp    $0x1,%eax
  8004210911:	74 18                	je     800421092b <_dwarf_decode_msb+0x4c>
  8004210913:	e9 53 01 00 00       	jmpq   8004210a6b <_dwarf_decode_msb+0x18c>
  8004210918:	83 f8 04             	cmp    $0x4,%eax
  800421091b:	74 49                	je     8004210966 <_dwarf_decode_msb+0x87>
  800421091d:	83 f8 08             	cmp    $0x8,%eax
  8004210920:	0f 84 96 00 00 00    	je     80042109bc <_dwarf_decode_msb+0xdd>
  8004210926:	e9 40 01 00 00       	jmpq   8004210a6b <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800421092b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421092f:	0f b6 00             	movzbl (%rax),%eax
  8004210932:	0f b6 c0             	movzbl %al,%eax
  8004210935:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210939:	e9 34 01 00 00       	jmpq   8004210a72 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800421093e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210942:	48 83 c0 01          	add    $0x1,%rax
  8004210946:	0f b6 00             	movzbl (%rax),%eax
  8004210949:	0f b6 d0             	movzbl %al,%edx
  800421094c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210950:	0f b6 00             	movzbl (%rax),%eax
  8004210953:	0f b6 c0             	movzbl %al,%eax
  8004210956:	48 c1 e0 08          	shl    $0x8,%rax
  800421095a:	48 09 d0             	or     %rdx,%rax
  800421095d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210961:	e9 0c 01 00 00       	jmpq   8004210a72 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421096a:	48 83 c0 03          	add    $0x3,%rax
  800421096e:	0f b6 00             	movzbl (%rax),%eax
  8004210971:	0f b6 c0             	movzbl %al,%eax
  8004210974:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210978:	48 83 c2 02          	add    $0x2,%rdx
  800421097c:	0f b6 12             	movzbl (%rdx),%edx
  800421097f:	0f b6 d2             	movzbl %dl,%edx
  8004210982:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210986:	48 09 d0             	or     %rdx,%rax
  8004210989:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800421098d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210991:	48 83 c0 01          	add    $0x1,%rax
  8004210995:	0f b6 00             	movzbl (%rax),%eax
  8004210998:	0f b6 c0             	movzbl %al,%eax
  800421099b:	48 c1 e0 10          	shl    $0x10,%rax
  800421099f:	48 89 c2             	mov    %rax,%rdx
  80042109a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109a6:	0f b6 00             	movzbl (%rax),%eax
  80042109a9:	0f b6 c0             	movzbl %al,%eax
  80042109ac:	48 c1 e0 18          	shl    $0x18,%rax
  80042109b0:	48 09 d0             	or     %rdx,%rax
  80042109b3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042109b7:	e9 b6 00 00 00       	jmpq   8004210a72 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042109bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109c0:	48 83 c0 07          	add    $0x7,%rax
  80042109c4:	0f b6 00             	movzbl (%rax),%eax
  80042109c7:	0f b6 c0             	movzbl %al,%eax
  80042109ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042109ce:	48 83 c2 06          	add    $0x6,%rdx
  80042109d2:	0f b6 12             	movzbl (%rdx),%edx
  80042109d5:	0f b6 d2             	movzbl %dl,%edx
  80042109d8:	48 c1 e2 08          	shl    $0x8,%rdx
  80042109dc:	48 09 d0             	or     %rdx,%rax
  80042109df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042109e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109e7:	48 83 c0 05          	add    $0x5,%rax
  80042109eb:	0f b6 00             	movzbl (%rax),%eax
  80042109ee:	0f b6 c0             	movzbl %al,%eax
  80042109f1:	48 c1 e0 10          	shl    $0x10,%rax
  80042109f5:	48 89 c2             	mov    %rax,%rdx
  80042109f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109fc:	48 83 c0 04          	add    $0x4,%rax
  8004210a00:	0f b6 00             	movzbl (%rax),%eax
  8004210a03:	0f b6 c0             	movzbl %al,%eax
  8004210a06:	48 c1 e0 18          	shl    $0x18,%rax
  8004210a0a:	48 09 d0             	or     %rdx,%rax
  8004210a0d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210a11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a15:	48 83 c0 03          	add    $0x3,%rax
  8004210a19:	0f b6 00             	movzbl (%rax),%eax
  8004210a1c:	0f b6 c0             	movzbl %al,%eax
  8004210a1f:	48 c1 e0 20          	shl    $0x20,%rax
  8004210a23:	48 89 c2             	mov    %rax,%rdx
  8004210a26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a2a:	48 83 c0 02          	add    $0x2,%rax
  8004210a2e:	0f b6 00             	movzbl (%rax),%eax
  8004210a31:	0f b6 c0             	movzbl %al,%eax
  8004210a34:	48 c1 e0 28          	shl    $0x28,%rax
  8004210a38:	48 09 d0             	or     %rdx,%rax
  8004210a3b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210a3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a43:	48 83 c0 01          	add    $0x1,%rax
  8004210a47:	0f b6 00             	movzbl (%rax),%eax
  8004210a4a:	0f b6 c0             	movzbl %al,%eax
  8004210a4d:	48 c1 e0 30          	shl    $0x30,%rax
  8004210a51:	48 89 c2             	mov    %rax,%rdx
  8004210a54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a58:	0f b6 00             	movzbl (%rax),%eax
  8004210a5b:	0f b6 c0             	movzbl %al,%eax
  8004210a5e:	48 c1 e0 38          	shl    $0x38,%rax
  8004210a62:	48 09 d0             	or     %rdx,%rax
  8004210a65:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210a69:	eb 07                	jmp    8004210a72 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004210a6b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a70:	eb 1a                	jmp    8004210a8c <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004210a72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a76:	48 8b 10             	mov    (%rax),%rdx
  8004210a79:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210a7c:	48 98                	cltq   
  8004210a7e:	48 01 c2             	add    %rax,%rdx
  8004210a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a85:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210a88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210a8c:	c9                   	leaveq 
  8004210a8d:	c3                   	retq   

0000008004210a8e <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210a8e:	55                   	push   %rbp
  8004210a8f:	48 89 e5             	mov    %rsp,%rbp
  8004210a92:	48 83 ec 30          	sub    $0x30,%rsp
  8004210a96:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210a9a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004210a9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210aa5:	00 
	uint8_t b;
	int shift = 0;
  8004210aa6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210aad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210ab1:	48 8b 10             	mov    (%rax),%rdx
  8004210ab4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ab8:	48 01 d0             	add    %rdx,%rax
  8004210abb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210abf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ac3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210ac7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210acb:	0f b6 00             	movzbl (%rax),%eax
  8004210ace:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210ad1:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ad5:	83 e0 7f             	and    $0x7f,%eax
  8004210ad8:	89 c2                	mov    %eax,%edx
  8004210ada:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210add:	89 c1                	mov    %eax,%ecx
  8004210adf:	d3 e2                	shl    %cl,%edx
  8004210ae1:	89 d0                	mov    %edx,%eax
  8004210ae3:	48 98                	cltq   
  8004210ae5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210ae9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210aed:	48 8b 00             	mov    (%rax),%rax
  8004210af0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210af4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210af8:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210afb:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210aff:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b03:	84 c0                	test   %al,%al
  8004210b05:	78 b8                	js     8004210abf <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004210b07:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210b0b:	7f 1f                	jg     8004210b2c <_dwarf_read_sleb128+0x9e>
  8004210b0d:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b11:	83 e0 40             	and    $0x40,%eax
  8004210b14:	85 c0                	test   %eax,%eax
  8004210b16:	74 14                	je     8004210b2c <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004210b18:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210b1b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210b20:	89 c1                	mov    %eax,%ecx
  8004210b22:	d3 e2                	shl    %cl,%edx
  8004210b24:	89 d0                	mov    %edx,%eax
  8004210b26:	48 98                	cltq   
  8004210b28:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004210b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210b30:	c9                   	leaveq 
  8004210b31:	c3                   	retq   

0000008004210b32 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210b32:	55                   	push   %rbp
  8004210b33:	48 89 e5             	mov    %rsp,%rbp
  8004210b36:	48 83 ec 30          	sub    $0x30,%rsp
  8004210b3a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210b3e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004210b42:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210b49:	00 
	uint8_t b;
	int shift = 0;
  8004210b4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210b51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b55:	48 8b 10             	mov    (%rax),%rdx
  8004210b58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b5c:	48 01 d0             	add    %rdx,%rax
  8004210b5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b67:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b6b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b6f:	0f b6 00             	movzbl (%rax),%eax
  8004210b72:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210b75:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210b79:	83 e0 7f             	and    $0x7f,%eax
  8004210b7c:	89 c2                	mov    %eax,%edx
  8004210b7e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210b81:	89 c1                	mov    %eax,%ecx
  8004210b83:	d3 e2                	shl    %cl,%edx
  8004210b85:	89 d0                	mov    %edx,%eax
  8004210b87:	48 98                	cltq   
  8004210b89:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210b8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b91:	48 8b 00             	mov    (%rax),%rax
  8004210b94:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210b9c:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210b9f:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210ba3:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ba7:	84 c0                	test   %al,%al
  8004210ba9:	78 b8                	js     8004210b63 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004210bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210baf:	c9                   	leaveq 
  8004210bb0:	c3                   	retq   

0000008004210bb1 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004210bb1:	55                   	push   %rbp
  8004210bb2:	48 89 e5             	mov    %rsp,%rbp
  8004210bb5:	48 83 ec 28          	sub    $0x28,%rsp
  8004210bb9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004210bbd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210bc4:	00 
	uint8_t b;
	int shift = 0;
  8004210bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210bcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bd0:	48 8b 00             	mov    (%rax),%rax
  8004210bd3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210bd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bdb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210bdf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210be3:	0f b6 00             	movzbl (%rax),%eax
  8004210be6:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210be9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210bed:	83 e0 7f             	and    $0x7f,%eax
  8004210bf0:	89 c2                	mov    %eax,%edx
  8004210bf2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bf5:	89 c1                	mov    %eax,%ecx
  8004210bf7:	d3 e2                	shl    %cl,%edx
  8004210bf9:	89 d0                	mov    %edx,%eax
  8004210bfb:	48 98                	cltq   
  8004210bfd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210c01:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210c05:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c09:	84 c0                	test   %al,%al
  8004210c0b:	78 ca                	js     8004210bd7 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004210c0d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210c11:	7f 1f                	jg     8004210c32 <_dwarf_decode_sleb128+0x81>
  8004210c13:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c17:	83 e0 40             	and    $0x40,%eax
  8004210c1a:	85 c0                	test   %eax,%eax
  8004210c1c:	74 14                	je     8004210c32 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004210c1e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c21:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210c26:	89 c1                	mov    %eax,%ecx
  8004210c28:	d3 e2                	shl    %cl,%edx
  8004210c2a:	89 d0                	mov    %edx,%eax
  8004210c2c:	48 98                	cltq   
  8004210c2e:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004210c32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210c3a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210c41:	c9                   	leaveq 
  8004210c42:	c3                   	retq   

0000008004210c43 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004210c43:	55                   	push   %rbp
  8004210c44:	48 89 e5             	mov    %rsp,%rbp
  8004210c47:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c4b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004210c4f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210c56:	00 
	uint8_t b;
	int shift = 0;
  8004210c57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210c5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c62:	48 8b 00             	mov    (%rax),%rax
  8004210c65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210c69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c6d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c71:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210c75:	0f b6 00             	movzbl (%rax),%eax
  8004210c78:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210c7b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c7f:	83 e0 7f             	and    $0x7f,%eax
  8004210c82:	89 c2                	mov    %eax,%edx
  8004210c84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c87:	89 c1                	mov    %eax,%ecx
  8004210c89:	d3 e2                	shl    %cl,%edx
  8004210c8b:	89 d0                	mov    %edx,%eax
  8004210c8d:	48 98                	cltq   
  8004210c8f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210c93:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210c97:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c9b:	84 c0                	test   %al,%al
  8004210c9d:	78 ca                	js     8004210c69 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004210c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210ca7:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210cae:	c9                   	leaveq 
  8004210caf:	c3                   	retq   

0000008004210cb0 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004210cb0:	55                   	push   %rbp
  8004210cb1:	48 89 e5             	mov    %rsp,%rbp
  8004210cb4:	48 83 ec 28          	sub    $0x28,%rsp
  8004210cb8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210cbc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210cc0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004210cc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cc8:	48 8b 10             	mov    (%rax),%rdx
  8004210ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ccf:	48 01 d0             	add    %rdx,%rax
  8004210cd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004210cde:	eb 17                	jmp    8004210cf7 <_dwarf_read_string+0x47>
		src++;
  8004210ce0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004210ce5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ce9:	48 8b 00             	mov    (%rax),%rax
  8004210cec:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210cf0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cf4:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004210cf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cfb:	0f b6 00             	movzbl (%rax),%eax
  8004210cfe:	84 c0                	test   %al,%al
  8004210d00:	74 0d                	je     8004210d0f <_dwarf_read_string+0x5f>
  8004210d02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d06:	48 8b 00             	mov    (%rax),%rax
  8004210d09:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210d0d:	72 d1                	jb     8004210ce0 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004210d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d13:	0f b6 00             	movzbl (%rax),%eax
  8004210d16:	84 c0                	test   %al,%al
  8004210d18:	75 1f                	jne    8004210d39 <_dwarf_read_string+0x89>
  8004210d1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d1e:	48 8b 00             	mov    (%rax),%rax
  8004210d21:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210d25:	73 12                	jae    8004210d39 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004210d27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d2b:	48 8b 00             	mov    (%rax),%rax
  8004210d2e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210d32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d36:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210d39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210d3d:	c9                   	leaveq 
  8004210d3e:	c3                   	retq   

0000008004210d3f <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004210d3f:	55                   	push   %rbp
  8004210d40:	48 89 e5             	mov    %rsp,%rbp
  8004210d43:	48 83 ec 28          	sub    $0x28,%rsp
  8004210d47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d4f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004210d53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d57:	48 8b 10             	mov    (%rax),%rdx
  8004210d5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d5e:	48 01 d0             	add    %rdx,%rax
  8004210d61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210d65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004210d6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d71:	48 8b 10             	mov    (%rax),%rdx
  8004210d74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d78:	48 01 c2             	add    %rax,%rdx
  8004210d7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d7f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210d82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210d86:	c9                   	leaveq 
  8004210d87:	c3                   	retq   

0000008004210d88 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004210d88:	55                   	push   %rbp
  8004210d89:	48 89 e5             	mov    %rsp,%rbp
  8004210d8c:	48 83 ec 20          	sub    $0x20,%rsp
  8004210d90:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004210d94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210d9c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210da1:	75 35                	jne    8004210dd8 <_dwarf_elf_get_byte_order+0x50>
  8004210da3:	48 b9 40 ad 21 04 80 	movabs $0x800421ad40,%rcx
  8004210daa:	00 00 00 
  8004210dad:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004210db4:	00 00 00 
  8004210db7:	be 29 01 00 00       	mov    $0x129,%esi
  8004210dbc:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004210dc3:	00 00 00 
  8004210dc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210dcb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210dd2:	00 00 00 
  8004210dd5:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004210dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ddc:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004210de0:	0f b6 c0             	movzbl %al,%eax
  8004210de3:	83 f8 02             	cmp    $0x2,%eax
  8004210de6:	75 07                	jne    8004210def <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004210de8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210ded:	eb 05                	jmp    8004210df4 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004210def:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004210df4:	c9                   	leaveq 
  8004210df5:	c3                   	retq   

0000008004210df6 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004210df6:	55                   	push   %rbp
  8004210df7:	48 89 e5             	mov    %rsp,%rbp
  8004210dfa:	48 83 ec 20          	sub    $0x20,%rsp
  8004210dfe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004210e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210e0a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210e0f:	75 35                	jne    8004210e46 <_dwarf_elf_get_pointer_size+0x50>
  8004210e11:	48 b9 40 ad 21 04 80 	movabs $0x800421ad40,%rcx
  8004210e18:	00 00 00 
  8004210e1b:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004210e22:	00 00 00 
  8004210e25:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004210e2a:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004210e31:	00 00 00 
  8004210e34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210e39:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004210e40:	00 00 00 
  8004210e43:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004210e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e4a:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004210e4e:	3c 01                	cmp    $0x1,%al
  8004210e50:	75 07                	jne    8004210e59 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004210e52:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210e57:	eb 05                	jmp    8004210e5e <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004210e59:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004210e5e:	c9                   	leaveq 
  8004210e5f:	c3                   	retq   

0000008004210e60 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004210e60:	55                   	push   %rbp
  8004210e61:	48 89 e5             	mov    %rsp,%rbp
  8004210e64:	53                   	push   %rbx
  8004210e65:	48 83 ec 18          	sub    $0x18,%rsp
  8004210e69:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e6d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004210e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e75:	ba 60 00 00 00       	mov    $0x60,%edx
  8004210e7a:	be 00 00 00 00       	mov    $0x0,%esi
  8004210e7f:	48 89 c7             	mov    %rax,%rdi
  8004210e82:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  8004210e89:	00 00 00 
  8004210e8c:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004210e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e92:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004210e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e9d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004210ea4:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004210ea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ea9:	48 89 c7             	mov    %rax,%rdi
  8004210eac:	48 b8 f6 0d 21 04 80 	movabs $0x8004210df6,%rax
  8004210eb3:	00 00 00 
  8004210eb6:	ff d0                	callq  *%rax
  8004210eb8:	0f b6 d0             	movzbl %al,%edx
  8004210ebb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ebf:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004210ec2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ec6:	48 89 c7             	mov    %rax,%rdi
  8004210ec9:	48 b8 88 0d 21 04 80 	movabs $0x8004210d88,%rax
  8004210ed0:	00 00 00 
  8004210ed3:	ff d0                	callq  *%rax
  8004210ed5:	85 c0                	test   %eax,%eax
  8004210ed7:	75 26                	jne    8004210eff <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004210ed9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210edd:	48 b9 2d 07 21 04 80 	movabs $0x800421072d,%rcx
  8004210ee4:	00 00 00 
  8004210ee7:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004210eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210eef:	48 bb df 08 21 04 80 	movabs $0x80042108df,%rbx
  8004210ef6:	00 00 00 
  8004210ef9:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004210efd:	eb 24                	jmp    8004210f23 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004210eff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f03:	48 b9 e0 04 21 04 80 	movabs $0x80042104e0,%rcx
  8004210f0a:	00 00 00 
  8004210f0d:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004210f11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f15:	48 be 0c 06 21 04 80 	movabs $0x800421060c,%rsi
  8004210f1c:	00 00 00 
  8004210f1f:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004210f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f27:	48 89 c7             	mov    %rax,%rdi
  8004210f2a:	48 b8 2d 24 21 04 80 	movabs $0x800421242d,%rax
  8004210f31:	00 00 00 
  8004210f34:	ff d0                	callq  *%rax
	return 0;
  8004210f36:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210f3b:	48 83 c4 18          	add    $0x18,%rsp
  8004210f3f:	5b                   	pop    %rbx
  8004210f40:	5d                   	pop    %rbp
  8004210f41:	c3                   	retq   

0000008004210f42 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004210f42:	55                   	push   %rbp
  8004210f43:	48 89 e5             	mov    %rsp,%rbp
  8004210f46:	48 83 ec 20          	sub    $0x20,%rsp
  8004210f4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004210f52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f56:	48 8b 10             	mov    (%rax),%rdx
  8004210f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f5d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004210f61:	48 39 c2             	cmp    %rax,%rdx
  8004210f64:	76 0a                	jbe    8004210f70 <_get_next_cu+0x2e>
		return -1;
  8004210f66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210f6b:	e9 6b 01 00 00       	jmpq   80042110db <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004210f70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f74:	48 8b 00             	mov    (%rax),%rax
  8004210f77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004210f7b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210f7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f83:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004210f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f8b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210f8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f93:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210f97:	48 89 d1             	mov    %rdx,%rcx
  8004210f9a:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210f9e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004210fa3:	48 89 cf             	mov    %rcx,%rdi
  8004210fa6:	ff d0                	callq  *%rax
  8004210fa8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004210fab:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004210faf:	75 2a                	jne    8004210fdb <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004210fb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fb5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210fb9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210fbd:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210fc1:	48 89 d1             	mov    %rdx,%rcx
  8004210fc4:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004210fc8:	ba 08 00 00 00       	mov    $0x8,%edx
  8004210fcd:	48 89 cf             	mov    %rcx,%rdi
  8004210fd0:	ff d0                	callq  *%rax
  8004210fd2:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004210fd5:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004210fd9:	eb 04                	jmp    8004210fdf <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004210fdb:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004210fdf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fe3:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004210fe7:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004210fea:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210fed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ff1:	48 01 c2             	add    %rax,%rdx
  8004210ff4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ff8:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004210ffb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fff:	48 8b 10             	mov    (%rax),%rdx
  8004211002:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211006:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  800421100a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421100d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211011:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211014:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211018:	75 07                	jne    8004211021 <_get_next_cu+0xdf>
  800421101a:	b8 04 00 00 00       	mov    $0x4,%eax
  800421101f:	eb 05                	jmp    8004211026 <_get_next_cu+0xe4>
  8004211021:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211026:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421102a:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  800421102d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211031:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211035:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211039:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800421103d:	48 89 d1             	mov    %rdx,%rcx
  8004211040:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211044:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211049:	48 89 cf             	mov    %rcx,%rdi
  800421104c:	ff d0                	callq  *%rax
  800421104e:	89 c2                	mov    %eax,%edx
  8004211050:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211054:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211058:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421105c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211060:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211064:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211068:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  800421106c:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211070:	48 89 cf             	mov    %rcx,%rdi
  8004211073:	ff d0                	callq  *%rax
  8004211075:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211079:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  800421107d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211081:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211085:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211089:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800421108d:	48 89 d1             	mov    %rdx,%rcx
  8004211090:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211094:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211099:	48 89 cf             	mov    %rcx,%rdi
  800421109c:	ff d0                	callq  *%rax
  800421109e:	89 c2                	mov    %eax,%edx
  80042110a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110a4:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  80042110a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042110af:	66 83 f8 01          	cmp    $0x1,%ax
  80042110b3:	76 0e                	jbe    80042110c3 <_get_next_cu+0x181>
  80042110b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110b9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042110bd:	66 83 f8 04          	cmp    $0x4,%ax
  80042110c1:	76 07                	jbe    80042110ca <_get_next_cu+0x188>
		return -1;
  80042110c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042110c8:	eb 11                	jmp    80042110db <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  80042110ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042110ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110d2:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  80042110d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042110db:	c9                   	leaveq 
  80042110dc:	c3                   	retq   

00000080042110dd <print_cu>:

void print_cu(Dwarf_CU cu)
{
  80042110dd:	55                   	push   %rbp
  80042110de:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  80042110e1:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  80042110e5:	0f b6 c8             	movzbl %al,%ecx
  80042110e8:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  80042110ec:	0f b7 d0             	movzwl %ax,%edx
  80042110ef:	48 8b 45 10          	mov    0x10(%rbp),%rax
  80042110f3:	48 89 c6             	mov    %rax,%rsi
  80042110f6:	48 bf 72 ad 21 04 80 	movabs $0x800421ad72,%rdi
  80042110fd:	00 00 00 
  8004211100:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211105:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  800421110c:	00 00 00 
  800421110f:	41 ff d0             	callq  *%r8
}
  8004211112:	5d                   	pop    %rbp
  8004211113:	c3                   	retq   

0000008004211114 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211114:	55                   	push   %rbp
  8004211115:	48 89 e5             	mov    %rsp,%rbp
  8004211118:	48 83 ec 60          	sub    $0x60,%rsp
  800421111c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211120:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211124:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211128:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  800421112c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211131:	75 35                	jne    8004211168 <_dwarf_abbrev_parse+0x54>
  8004211133:	48 b9 81 ad 21 04 80 	movabs $0x800421ad81,%rcx
  800421113a:	00 00 00 
  800421113d:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211144:	00 00 00 
  8004211147:	be a4 01 00 00       	mov    $0x1a4,%esi
  800421114c:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004211153:	00 00 00 
  8004211156:	b8 00 00 00 00       	mov    $0x0,%eax
  800421115b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211162:	00 00 00 
  8004211165:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211168:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  800421116d:	75 35                	jne    80042111a4 <_dwarf_abbrev_parse+0x90>
  800421116f:	48 b9 8d ad 21 04 80 	movabs $0x800421ad8d,%rcx
  8004211176:	00 00 00 
  8004211179:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211180:	00 00 00 
  8004211183:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211188:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  800421118f:	00 00 00 
  8004211192:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211197:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421119e:	00 00 00 
  80042111a1:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  80042111a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042111a8:	48 8b 10             	mov    (%rax),%rdx
  80042111ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042111af:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042111b3:	48 39 c2             	cmp    %rax,%rdx
  80042111b6:	72 0a                	jb     80042111c2 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  80042111b8:	b8 04 00 00 00       	mov    $0x4,%eax
  80042111bd:	e9 d3 01 00 00       	jmpq   8004211395 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  80042111c2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042111c6:	48 8b 00             	mov    (%rax),%rax
  80042111c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  80042111cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042111d1:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042111d5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042111d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111dd:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042111e1:	48 89 d6             	mov    %rdx,%rsi
  80042111e4:	48 89 c7             	mov    %rax,%rdi
  80042111e7:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  80042111ee:	00 00 00 
  80042111f1:	ff d0                	callq  *%rax
  80042111f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  80042111f7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042111fc:	75 15                	jne    8004211213 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  80042111fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211202:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211209:	b8 00 00 00 00       	mov    $0x0,%eax
  800421120e:	e9 82 01 00 00       	jmpq   8004211395 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211213:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211217:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421121b:	48 89 d6             	mov    %rdx,%rsi
  800421121e:	48 89 c7             	mov    %rax,%rdi
  8004211221:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004211228:	00 00 00 
  800421122b:	ff d0                	callq  *%rax
  800421122d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211231:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211235:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211239:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421123d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211241:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211246:	48 89 cf             	mov    %rcx,%rdi
  8004211249:	ff d0                	callq  *%rax
  800421124b:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  800421124e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211252:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211256:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211259:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421125d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211261:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211265:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211269:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  800421126d:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211270:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211274:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211278:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  800421127c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211280:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211287:	00 
	abp->ab_atnum    = 0;
  8004211288:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421128c:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211293:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211294:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211298:	48 8b 00             	mov    (%rax),%rax
  800421129b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421129f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112a3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042112a7:	48 89 d6             	mov    %rdx,%rsi
  80042112aa:	48 89 c7             	mov    %rax,%rdi
  80042112ad:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  80042112b4:	00 00 00 
  80042112b7:	ff d0                	callq  *%rax
  80042112b9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042112bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112c1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042112c5:	48 89 d6             	mov    %rdx,%rsi
  80042112c8:	48 89 c7             	mov    %rax,%rdi
  80042112cb:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  80042112d2:	00 00 00 
  80042112d5:	ff d0                	callq  *%rax
  80042112d7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  80042112db:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042112e0:	0f 84 89 00 00 00    	je     800421136f <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  80042112e6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042112ea:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042112ee:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042112f2:	48 89 d0             	mov    %rdx,%rax
  80042112f5:	48 01 c0             	add    %rax,%rax
  80042112f8:	48 01 d0             	add    %rdx,%rax
  80042112fb:	48 c1 e0 03          	shl    $0x3,%rax
  80042112ff:	48 01 c8             	add    %rcx,%rax
  8004211302:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211306:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421130a:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  800421130d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211311:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211315:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211319:	48 89 d0             	mov    %rdx,%rax
  800421131c:	48 01 c0             	add    %rax,%rax
  800421131f:	48 01 d0             	add    %rdx,%rax
  8004211322:	48 c1 e0 03          	shl    $0x3,%rax
  8004211326:	48 01 c8             	add    %rcx,%rax
  8004211329:	48 8d 50 38          	lea    0x38(%rax),%rdx
  800421132d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211331:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211334:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211338:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421133c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211340:	48 89 d0             	mov    %rdx,%rax
  8004211343:	48 01 c0             	add    %rax,%rax
  8004211346:	48 01 d0             	add    %rdx,%rax
  8004211349:	48 c1 e0 03          	shl    $0x3,%rax
  800421134d:	48 01 c8             	add    %rcx,%rax
  8004211350:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211354:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211358:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  800421135b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421135f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211363:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211367:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421136b:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  800421136f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211374:	0f 85 1a ff ff ff    	jne    8004211294 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  800421137a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421137e:	48 8b 00             	mov    (%rax),%rax
  8004211381:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211385:	48 89 c2             	mov    %rax,%rdx
  8004211388:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421138c:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211390:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211395:	c9                   	leaveq 
  8004211396:	c3                   	retq   

0000008004211397 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211397:	55                   	push   %rbp
  8004211398:	48 89 e5             	mov    %rsp,%rbp
  800421139b:	48 83 ec 70          	sub    $0x70,%rsp
  800421139f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042113a3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042113a7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  80042113ab:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042113b0:	75 0a                	jne    80042113bc <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  80042113b2:	b8 04 00 00 00       	mov    $0x4,%eax
  80042113b7:	e9 0a 01 00 00       	jmpq   80042114c6 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  80042113bc:	48 bf 98 ad 21 04 80 	movabs $0x800421ad98,%rdi
  80042113c3:	00 00 00 
  80042113c6:	48 b8 f7 56 21 04 80 	movabs $0x80042156f7,%rax
  80042113cd:	00 00 00 
  80042113d0:	ff d0                	callq  *%rax
  80042113d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  80042113d6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042113db:	75 35                	jne    8004211412 <_dwarf_abbrev_find+0x7b>
  80042113dd:	48 b9 8d ad 21 04 80 	movabs $0x800421ad8d,%rcx
  80042113e4:	00 00 00 
  80042113e7:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  80042113ee:	00 00 00 
  80042113f1:	be e5 01 00 00       	mov    $0x1e5,%esi
  80042113f6:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  80042113fd:	00 00 00 
  8004211400:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211405:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421140c:	00 00 00 
  800421140f:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211412:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211416:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800421141a:	e9 8d 00 00 00       	jmpq   80042114ac <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  800421141f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211423:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211427:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800421142b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421142f:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211433:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211437:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  800421143b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211440:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211444:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211449:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  800421144d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211452:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211456:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800421145b:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  800421145f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211464:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211468:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  800421146d:	48 89 c7             	mov    %rax,%rdi
  8004211470:	48 b8 14 11 21 04 80 	movabs $0x8004211114,%rax
  8004211477:	00 00 00 
  800421147a:	ff d0                	callq  *%rax
  800421147c:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  800421147f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004211483:	74 05                	je     800421148a <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004211485:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211488:	eb 3c                	jmp    80042114c6 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  800421148a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421148e:	48 8b 00             	mov    (%rax),%rax
  8004211491:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004211495:	75 07                	jne    800421149e <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004211497:	b8 00 00 00 00       	mov    $0x0,%eax
  800421149c:	eb 28                	jmp    80042114c6 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  800421149e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042114a2:	48 8b 00             	mov    (%rax),%rax
  80042114a5:	48 85 c0             	test   %rax,%rax
  80042114a8:	75 02                	jne    80042114ac <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  80042114aa:	eb 15                	jmp    80042114c1 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  80042114ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042114b0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042114b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114b8:	48 39 c2             	cmp    %rax,%rdx
  80042114bb:	0f 87 5e ff ff ff    	ja     800421141f <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  80042114c1:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042114c6:	c9                   	leaveq 
  80042114c7:	c3                   	retq   

00000080042114c8 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  80042114c8:	55                   	push   %rbp
  80042114c9:	48 89 e5             	mov    %rsp,%rbp
  80042114cc:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  80042114d3:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042114da:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042114e1:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042114e8:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  80042114ef:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  80042114f6:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  80042114fd:	48 bf a6 ad 21 04 80 	movabs $0x800421ada6,%rdi
  8004211504:	00 00 00 
  8004211507:	48 b8 f7 56 21 04 80 	movabs $0x80042156f7,%rax
  800421150e:	00 00 00 
  8004211511:	ff d0                	callq  *%rax
  8004211513:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004211517:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421151b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421151f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004211523:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421152a:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800421152e:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004211531:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004211538:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421153f:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211544:	be 00 00 00 00       	mov    $0x0,%esi
  8004211549:	48 89 c7             	mov    %rax,%rdi
  800421154c:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  8004211553:	00 00 00 
  8004211556:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004211558:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421155f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  8004211566:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421156d:	48 8b 00             	mov    (%rax),%rax
  8004211570:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  8004211574:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421157b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421157f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  8004211583:	8b 45 10             	mov    0x10(%rbp),%eax
  8004211586:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004211589:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004211590:	00 

	switch (form) {
  8004211591:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004211598:	20 
  8004211599:	0f 87 82 04 00 00    	ja     8004211a21 <_dwarf_attr_init+0x559>
  800421159f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042115a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042115ad:	00 
  80042115ae:	48 b8 d0 ad 21 04 80 	movabs $0x800421add0,%rax
  80042115b5:	00 00 00 
  80042115b8:	48 01 d0             	add    %rdx,%rax
  80042115bb:	48 8b 00             	mov    (%rax),%rax
  80042115be:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042115c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042115c7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042115cb:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042115d2:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042115d6:	0f b6 d2             	movzbl %dl,%edx
  80042115d9:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042115e0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042115e4:	48 89 cf             	mov    %rcx,%rdi
  80042115e7:	ff d0                	callq  *%rax
  80042115e9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042115ed:	e9 37 04 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042115f2:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042115f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115fd:	48 89 d6             	mov    %rdx,%rsi
  8004211600:	48 89 c7             	mov    %rax,%rdi
  8004211603:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  800421160a:	00 00 00 
  800421160d:	ff d0                	callq  *%rax
  800421160f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211613:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211617:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421161e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211622:	48 89 ce             	mov    %rcx,%rsi
  8004211625:	48 89 c7             	mov    %rax,%rdi
  8004211628:	48 b8 3f 0d 21 04 80 	movabs $0x8004210d3f,%rax
  800421162f:	00 00 00 
  8004211632:	ff d0                	callq  *%rax
  8004211634:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211638:	e9 ec 03 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800421163d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211644:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211648:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421164f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211653:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211658:	48 89 cf             	mov    %rcx,%rdi
  800421165b:	ff d0                	callq  *%rax
  800421165d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211661:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211665:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421166c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211670:	48 89 ce             	mov    %rcx,%rsi
  8004211673:	48 89 c7             	mov    %rax,%rdi
  8004211676:	48 b8 3f 0d 21 04 80 	movabs $0x8004210d3f,%rax
  800421167d:	00 00 00 
  8004211680:	ff d0                	callq  *%rax
  8004211682:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211686:	e9 9e 03 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800421168b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211692:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211696:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421169d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116a1:	ba 02 00 00 00       	mov    $0x2,%edx
  80042116a6:	48 89 cf             	mov    %rcx,%rdi
  80042116a9:	ff d0                	callq  *%rax
  80042116ab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042116af:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042116b3:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042116ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116be:	48 89 ce             	mov    %rcx,%rsi
  80042116c1:	48 89 c7             	mov    %rax,%rdi
  80042116c4:	48 b8 3f 0d 21 04 80 	movabs $0x8004210d3f,%rax
  80042116cb:	00 00 00 
  80042116ce:	ff d0                	callq  *%rax
  80042116d0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042116d4:	e9 50 03 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042116d9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116e4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042116eb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116ef:	ba 04 00 00 00       	mov    $0x4,%edx
  80042116f4:	48 89 cf             	mov    %rcx,%rdi
  80042116f7:	ff d0                	callq  *%rax
  80042116f9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042116fd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211701:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211708:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421170c:	48 89 ce             	mov    %rcx,%rsi
  800421170f:	48 89 c7             	mov    %rax,%rdi
  8004211712:	48 b8 3f 0d 21 04 80 	movabs $0x8004210d3f,%rax
  8004211719:	00 00 00 
  800421171c:	ff d0                	callq  *%rax
  800421171e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211722:	e9 02 03 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211727:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421172e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211732:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211739:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421173d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211742:	48 89 cf             	mov    %rcx,%rdi
  8004211745:	ff d0                	callq  *%rax
  8004211747:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421174b:	e9 d9 02 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004211750:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211757:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421175b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211762:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211766:	ba 02 00 00 00       	mov    $0x2,%edx
  800421176b:	48 89 cf             	mov    %rcx,%rdi
  800421176e:	ff d0                	callq  *%rax
  8004211770:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211774:	e9 b0 02 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211779:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211780:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211784:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421178b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421178f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211794:	48 89 cf             	mov    %rcx,%rdi
  8004211797:	ff d0                	callq  *%rax
  8004211799:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421179d:	e9 87 02 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042117a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042117ad:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042117b4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042117b8:	ba 08 00 00 00       	mov    $0x8,%edx
  80042117bd:	48 89 cf             	mov    %rcx,%rdi
  80042117c0:	ff d0                	callq  *%rax
  80042117c2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042117c6:	e9 5e 02 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  80042117cb:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042117d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117d6:	48 89 d6             	mov    %rdx,%rsi
  80042117d9:	48 89 c7             	mov    %rax,%rdi
  80042117dc:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  80042117e3:	00 00 00 
  80042117e6:	ff d0                	callq  *%rax
  80042117e8:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  80042117ef:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  80042117f6:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  80042117fd:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211804:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421180b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211812:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211819:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004211820:	4d 89 c1             	mov    %r8,%r9
  8004211823:	49 89 f8             	mov    %rdi,%r8
  8004211826:	48 89 c7             	mov    %rax,%rdi
  8004211829:	48 b8 c8 14 21 04 80 	movabs $0x80042114c8,%rax
  8004211830:	00 00 00 
  8004211833:	ff d0                	callq  *%rax
  8004211835:	e9 1d 03 00 00       	jmpq   8004211b57 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  800421183a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211841:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211845:	66 83 f8 02          	cmp    $0x2,%ax
  8004211849:	75 2f                	jne    800421187a <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800421184b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211852:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211856:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421185d:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211861:	0f b6 d2             	movzbl %dl,%edx
  8004211864:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421186b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421186f:	48 89 cf             	mov    %rcx,%rdi
  8004211872:	ff d0                	callq  *%rax
  8004211874:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004211878:	eb 39                	jmp    80042118b3 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  800421187a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211881:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211885:	66 83 f8 03          	cmp    $0x3,%ax
  8004211889:	75 28                	jne    80042118b3 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421188b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211892:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211896:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421189a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042118a1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042118a5:	48 89 cf             	mov    %rcx,%rdi
  80042118a8:	ff d0                	callq  *%rax
  80042118aa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118ae:	e9 76 01 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
  80042118b3:	e9 71 01 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042118b8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042118bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118c3:	48 89 d6             	mov    %rdx,%rsi
  80042118c6:	48 89 c7             	mov    %rax,%rdi
  80042118c9:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  80042118d0:	00 00 00 
  80042118d3:	ff d0                	callq  *%rax
  80042118d5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118d9:	e9 4b 01 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  80042118de:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042118e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118e9:	48 89 d6             	mov    %rdx,%rsi
  80042118ec:	48 89 c7             	mov    %rax,%rdi
  80042118ef:	48 b8 8e 0a 21 04 80 	movabs $0x8004210a8e,%rax
  80042118f6:	00 00 00 
  80042118f9:	ff d0                	callq  *%rax
  80042118fb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118ff:	e9 25 01 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211904:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421190b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421190f:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211913:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421191a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421191e:	48 89 cf             	mov    %rcx,%rdi
  8004211921:	ff d0                	callq  *%rax
  8004211923:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211927:	e9 fd 00 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800421192c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211930:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004211934:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421193b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421193f:	48 89 ce             	mov    %rcx,%rsi
  8004211942:	48 89 c7             	mov    %rax,%rdi
  8004211945:	48 b8 b0 0c 21 04 80 	movabs $0x8004210cb0,%rax
  800421194c:	00 00 00 
  800421194f:	ff d0                	callq  *%rax
  8004211951:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211955:	e9 cf 00 00 00       	jmpq   8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421195a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211961:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211965:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211969:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211970:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211974:	48 89 cf             	mov    %rcx,%rdi
  8004211977:	ff d0                	callq  *%rax
  8004211979:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  800421197d:	48 bf b2 ad 21 04 80 	movabs $0x800421adb2,%rdi
  8004211984:	00 00 00 
  8004211987:	48 b8 f7 56 21 04 80 	movabs $0x80042156f7,%rax
  800421198e:	00 00 00 
  8004211991:	ff d0                	callq  *%rax
  8004211993:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004211997:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421199c:	75 35                	jne    80042119d3 <_dwarf_attr_init+0x50b>
  800421199e:	48 b9 bd ad 21 04 80 	movabs $0x800421adbd,%rcx
  80042119a5:	00 00 00 
  80042119a8:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  80042119af:	00 00 00 
  80042119b2:	be 51 02 00 00       	mov    $0x251,%esi
  80042119b7:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  80042119be:	00 00 00 
  80042119c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042119c6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042119cd:	00 00 00 
  80042119d0:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  80042119d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042119d7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042119db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042119df:	48 01 d0             	add    %rdx,%rax
  80042119e2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042119e6:	eb 41                	jmp    8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  80042119e8:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  80042119ef:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  80042119f0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042119f4:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042119fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119ff:	48 89 ce             	mov    %rcx,%rsi
  8004211a02:	48 89 c7             	mov    %rax,%rdi
  8004211a05:	48 b8 3f 0d 21 04 80 	movabs $0x8004210d3f,%rax
  8004211a0c:	00 00 00 
  8004211a0f:	ff d0                	callq  *%rax
  8004211a11:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211a15:	eb 12                	jmp    8004211a29 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004211a17:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004211a1e:	00 
		break;
  8004211a1f:	eb 08                	jmp    8004211a29 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004211a21:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004211a28:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004211a29:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211a2d:	0f 85 21 01 00 00    	jne    8004211b54 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004211a33:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004211a3a:	09 
  8004211a3b:	74 1e                	je     8004211a5b <_dwarf_attr_init+0x593>
  8004211a3d:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004211a44:	0a 
  8004211a45:	74 14                	je     8004211a5b <_dwarf_attr_init+0x593>
  8004211a47:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004211a4e:	03 
  8004211a4f:	74 0a                	je     8004211a5b <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004211a51:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004211a58:	04 
  8004211a59:	75 10                	jne    8004211a6b <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004211a5b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211a5f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004211a63:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211a67:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004211a6b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004211a6f:	48 83 f8 03          	cmp    $0x3,%rax
  8004211a73:	75 39                	jne    8004211aae <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004211a75:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211a79:	48 83 f8 08          	cmp    $0x8,%rax
  8004211a7d:	74 1c                	je     8004211a9b <_dwarf_attr_init+0x5d3>
  8004211a7f:	48 83 f8 0e          	cmp    $0xe,%rax
  8004211a83:	74 02                	je     8004211a87 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004211a85:	eb 27                	jmp    8004211aae <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  8004211a87:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211a8b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211a92:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211a99:	eb 13                	jmp    8004211aae <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004211a9b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211a9f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211aa6:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211aad:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004211aae:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211ab5:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211abc:	8d 48 01             	lea    0x1(%rax),%ecx
  8004211abf:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004211ac6:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004211acc:	0f b6 c0             	movzbl %al,%eax
  8004211acf:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211ad6:	48 63 d0             	movslq %eax,%rdx
  8004211ad9:	48 89 d0             	mov    %rdx,%rax
  8004211adc:	48 01 c0             	add    %rax,%rax
  8004211adf:	48 01 d0             	add    %rdx,%rax
  8004211ae2:	48 c1 e0 05          	shl    $0x5,%rax
  8004211ae6:	48 01 c8             	add    %rcx,%rax
  8004211ae9:	48 05 70 03 00 00    	add    $0x370,%rax
  8004211aef:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004211af6:	48 89 10             	mov    %rdx,(%rax)
  8004211af9:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004211b00:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004211b04:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004211b08:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004211b0c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004211b10:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211b14:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004211b18:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004211b1c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211b20:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004211b24:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211b28:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004211b2c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004211b30:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004211b34:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211b38:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004211b3c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004211b40:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004211b44:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004211b48:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004211b4c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211b50:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004211b54:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004211b57:	c9                   	leaveq 
  8004211b58:	c3                   	retq   

0000008004211b59 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004211b59:	55                   	push   %rbp
  8004211b5a:	48 89 e5             	mov    %rsp,%rbp
  8004211b5d:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004211b64:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004211b6b:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004211b72:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004211b79:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004211b7f:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004211b86:	00 
  8004211b87:	75 35                	jne    8004211bbe <dwarf_search_die_within_cu+0x65>
  8004211b89:	48 b9 d8 ae 21 04 80 	movabs $0x800421aed8,%rcx
  8004211b90:	00 00 00 
  8004211b93:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211b9a:	00 00 00 
  8004211b9d:	be 86 02 00 00       	mov    $0x286,%esi
  8004211ba2:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004211ba9:	00 00 00 
  8004211bac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211bb1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211bb8:	00 00 00 
  8004211bbb:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004211bbe:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004211bc5:	00 
  8004211bc6:	75 35                	jne    8004211bfd <dwarf_search_die_within_cu+0xa4>
  8004211bc8:	48 b9 dc ae 21 04 80 	movabs $0x800421aedc,%rcx
  8004211bcf:	00 00 00 
  8004211bd2:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211bd9:	00 00 00 
  8004211bdc:	be 88 02 00 00       	mov    $0x288,%esi
  8004211be1:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004211be8:	00 00 00 
  8004211beb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211bf0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211bf7:	00 00 00 
  8004211bfa:	41 ff d0             	callq  *%r8

	level = 1;
  8004211bfd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211c04:	e9 17 02 00 00       	jmpq   8004211e20 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004211c09:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211c10:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004211c14:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211c1b:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211c1f:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004211c26:	48 89 d6             	mov    %rdx,%rsi
  8004211c29:	48 89 c7             	mov    %rax,%rdi
  8004211c2c:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004211c33:	00 00 00 
  8004211c36:	ff d0                	callq  *%rax
  8004211c38:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004211c3c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211c41:	75 22                	jne    8004211c65 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004211c43:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211c47:	74 09                	je     8004211c52 <dwarf_search_die_within_cu+0xf9>
  8004211c49:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211c50:	75 0a                	jne    8004211c5c <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004211c52:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211c57:	e9 f4 01 00 00       	jmpq   8004211e50 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004211c5c:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004211c60:	e9 bb 01 00 00       	jmpq   8004211e20 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004211c65:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211c6c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211c70:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211c77:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004211c7b:	48 89 34 24          	mov    %rsi,(%rsp)
  8004211c7f:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004211c83:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004211c88:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004211c8c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004211c91:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004211c95:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004211c9a:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004211c9e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004211ca3:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004211ca7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004211cac:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004211cb0:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004211cb5:	48 89 ce             	mov    %rcx,%rsi
  8004211cb8:	48 89 c7             	mov    %rax,%rdi
  8004211cbb:	48 b8 97 13 21 04 80 	movabs $0x8004211397,%rax
  8004211cc2:	00 00 00 
  8004211cc5:	ff d0                	callq  *%rax
  8004211cc7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211cca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211cce:	74 08                	je     8004211cd8 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004211cd0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211cd3:	e9 78 01 00 00       	jmpq   8004211e50 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004211cd8:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211cdf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211ce3:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004211ce6:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211ced:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211cf1:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004211cf5:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211cfc:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004211d00:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211d07:	b8 66 00 00 00       	mov    $0x66,%eax
  8004211d0c:	48 89 d6             	mov    %rdx,%rsi
  8004211d0f:	48 89 c1             	mov    %rax,%rcx
  8004211d12:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004211d15:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211d1c:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004211d23:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004211d2a:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211d31:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211d35:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004211d3c:	e9 8e 00 00 00       	jmpq   8004211dcf <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004211d41:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211d44:	48 63 d0             	movslq %eax,%rdx
  8004211d47:	48 89 d0             	mov    %rdx,%rax
  8004211d4a:	48 01 c0             	add    %rax,%rax
  8004211d4d:	48 01 d0             	add    %rdx,%rax
  8004211d50:	48 c1 e0 03          	shl    $0x3,%rax
  8004211d54:	48 01 e8             	add    %rbp,%rax
  8004211d57:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004211d5d:	48 8b 08             	mov    (%rax),%rcx
  8004211d60:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004211d67:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211d6a:	48 63 d0             	movslq %eax,%rdx
  8004211d6d:	48 89 d0             	mov    %rdx,%rax
  8004211d70:	48 01 c0             	add    %rax,%rax
  8004211d73:	48 01 d0             	add    %rdx,%rax
  8004211d76:	48 c1 e0 03          	shl    $0x3,%rax
  8004211d7a:	48 83 c0 30          	add    $0x30,%rax
  8004211d7e:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004211d82:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004211d89:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004211d90:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211d97:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004211d9e:	49 89 c9             	mov    %rcx,%r9
  8004211da1:	49 89 f8             	mov    %rdi,%r8
  8004211da4:	48 89 d1             	mov    %rdx,%rcx
  8004211da7:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004211dab:	48 89 c7             	mov    %rax,%rdi
  8004211dae:	48 b8 c8 14 21 04 80 	movabs $0x80042114c8,%rax
  8004211db5:	00 00 00 
  8004211db8:	ff d0                	callq  *%rax
  8004211dba:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211dbd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211dc1:	74 08                	je     8004211dcb <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004211dc3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211dc6:	e9 85 00 00 00       	jmpq   8004211e50 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211dcb:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004211dcf:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211dd2:	48 63 d0             	movslq %eax,%rdx
  8004211dd5:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004211ddc:	48 39 c2             	cmp    %rax,%rdx
  8004211ddf:	0f 82 5c ff ff ff    	jb     8004211d41 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004211de5:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004211dec:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211df3:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004211df7:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211dfe:	74 19                	je     8004211e19 <dwarf_search_die_within_cu+0x2c0>
  8004211e00:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211e04:	7e 13                	jle    8004211e19 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211e06:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004211e0d:	3c 01                	cmp    $0x1,%al
  8004211e0f:	75 06                	jne    8004211e17 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004211e11:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211e15:	eb 09                	jmp    8004211e20 <dwarf_search_die_within_cu+0x2c7>
  8004211e17:	eb 07                	jmp    8004211e20 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004211e19:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e1e:	eb 30                	jmp    8004211e50 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211e20:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004211e24:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211e2b:	48 39 c2             	cmp    %rax,%rdx
  8004211e2e:	76 1b                	jbe    8004211e4b <dwarf_search_die_within_cu+0x2f2>
  8004211e30:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211e37:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004211e3b:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211e42:	48 39 c2             	cmp    %rax,%rdx
  8004211e45:	0f 87 be fd ff ff    	ja     8004211c09 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004211e4b:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211e50:	c9                   	leaveq 
  8004211e51:	c3                   	retq   

0000008004211e52 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004211e52:	55                   	push   %rbp
  8004211e53:	48 89 e5             	mov    %rsp,%rbp
  8004211e56:	48 83 ec 60          	sub    $0x60,%rsp
  8004211e5a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211e5e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211e62:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004211e66:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211e6b:	75 35                	jne    8004211ea2 <dwarf_offdie+0x50>
  8004211e6d:	48 b9 d8 ae 21 04 80 	movabs $0x800421aed8,%rcx
  8004211e74:	00 00 00 
  8004211e77:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211e7e:	00 00 00 
  8004211e81:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004211e86:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004211e8d:	00 00 00 
  8004211e90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e95:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211e9c:	00 00 00 
  8004211e9f:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211ea2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211ea7:	75 35                	jne    8004211ede <dwarf_offdie+0x8c>
  8004211ea9:	48 b9 dc ae 21 04 80 	movabs $0x800421aedc,%rcx
  8004211eb0:	00 00 00 
  8004211eb3:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004211eba:	00 00 00 
  8004211ebd:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004211ec2:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004211ec9:	00 00 00 
  8004211ecc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ed1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211ed8:	00 00 00 
  8004211edb:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004211ede:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004211ee2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211ee6:	76 66                	jbe    8004211f4e <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004211ee8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211eec:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004211ef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ef4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004211ef8:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004211efc:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004211f00:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004211f05:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004211f09:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004211f0e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004211f12:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004211f17:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004211f1b:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004211f20:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004211f24:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004211f29:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004211f2d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004211f32:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004211f37:	48 89 c7             	mov    %rax,%rdi
  8004211f3a:	48 b8 59 1b 21 04 80 	movabs $0x8004211b59,%rax
  8004211f41:	00 00 00 
  8004211f44:	ff d0                	callq  *%rax
  8004211f46:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004211f49:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004211f4c:	eb 05                	jmp    8004211f53 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004211f4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211f53:	c9                   	leaveq 
  8004211f54:	c3                   	retq   

0000008004211f55 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004211f55:	55                   	push   %rbp
  8004211f56:	48 89 e5             	mov    %rsp,%rbp
  8004211f59:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211f5d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211f61:	89 f0                	mov    %esi,%eax
  8004211f63:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004211f67:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211f6e:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211f6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004211f76:	eb 57                	jmp    8004211fcf <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004211f78:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211f7c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211f7f:	48 63 d0             	movslq %eax,%rdx
  8004211f82:	48 89 d0             	mov    %rdx,%rax
  8004211f85:	48 01 c0             	add    %rax,%rax
  8004211f88:	48 01 d0             	add    %rdx,%rax
  8004211f8b:	48 c1 e0 05          	shl    $0x5,%rax
  8004211f8f:	48 01 c8             	add    %rcx,%rax
  8004211f92:	48 05 80 03 00 00    	add    $0x380,%rax
  8004211f98:	48 8b 10             	mov    (%rax),%rdx
  8004211f9b:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004211f9f:	48 39 c2             	cmp    %rax,%rdx
  8004211fa2:	75 27                	jne    8004211fcb <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004211fa4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211fa7:	48 63 d0             	movslq %eax,%rdx
  8004211faa:	48 89 d0             	mov    %rdx,%rax
  8004211fad:	48 01 c0             	add    %rax,%rax
  8004211fb0:	48 01 d0             	add    %rdx,%rax
  8004211fb3:	48 c1 e0 05          	shl    $0x5,%rax
  8004211fb7:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004211fbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fc2:	48 01 d0             	add    %rdx,%rax
  8004211fc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004211fc9:	eb 17                	jmp    8004211fe2 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004211fcb:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004211fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fd3:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211fda:	0f b6 c0             	movzbl %al,%eax
  8004211fdd:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004211fe0:	7f 96                	jg     8004211f78 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004211fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211fe6:	c9                   	leaveq 
  8004211fe7:	c3                   	retq   

0000008004211fe8 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004211fe8:	55                   	push   %rbp
  8004211fe9:	48 89 e5             	mov    %rsp,%rbp
  8004211fec:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004211ff0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211ff4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211ff8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004211ffc:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212000:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212005:	75 35                	jne    800421203c <dwarf_siblingof+0x54>
  8004212007:	48 b9 d8 ae 21 04 80 	movabs $0x800421aed8,%rcx
  800421200e:	00 00 00 
  8004212011:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004212018:	00 00 00 
  800421201b:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212020:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004212027:	00 00 00 
  800421202a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421202f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212036:	00 00 00 
  8004212039:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800421203c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212041:	75 35                	jne    8004212078 <dwarf_siblingof+0x90>
  8004212043:	48 b9 dc ae 21 04 80 	movabs $0x800421aedc,%rcx
  800421204a:	00 00 00 
  800421204d:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004212054:	00 00 00 
  8004212057:	be ed 02 00 00       	mov    $0x2ed,%esi
  800421205c:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  8004212063:	00 00 00 
  8004212066:	b8 00 00 00 00       	mov    $0x0,%eax
  800421206b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212072:	00 00 00 
  8004212075:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212078:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421207d:	75 35                	jne    80042120b4 <dwarf_siblingof+0xcc>
  800421207f:	48 b9 e4 ae 21 04 80 	movabs $0x800421aee4,%rcx
  8004212086:	00 00 00 
  8004212089:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004212090:	00 00 00 
  8004212093:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212098:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  800421209f:	00 00 00 
  80042120a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042120a7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042120ae:	00 00 00 
  80042120b1:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  80042120b4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042120b9:	75 65                	jne    8004212120 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  80042120bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042120bf:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042120c3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042120c7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042120cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042120cf:	48 8b 38             	mov    (%rax),%rdi
  80042120d2:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042120d6:	48 8b 78 08          	mov    0x8(%rax),%rdi
  80042120da:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042120df:	48 8b 78 10          	mov    0x10(%rax),%rdi
  80042120e3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042120e8:	48 8b 78 18          	mov    0x18(%rax),%rdi
  80042120ec:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042120f1:	48 8b 78 20          	mov    0x20(%rax),%rdi
  80042120f5:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042120fa:	48 8b 78 28          	mov    0x28(%rax),%rdi
  80042120fe:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212103:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212107:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421210c:	48 89 cf             	mov    %rcx,%rdi
  800421210f:	48 b8 52 1e 21 04 80 	movabs $0x8004211e52,%rax
  8004212116:	00 00 00 
  8004212119:	ff d0                	callq  *%rax
  800421211b:	e9 0a 01 00 00       	jmpq   800421222a <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212120:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212127:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421212b:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800421212f:	84 c0                	test   %al,%al
  8004212131:	75 0e                	jne    8004212141 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212133:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212137:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421213b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421213f:	eb 6b                	jmp    80042121ac <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212141:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212145:	be 01 00 00 00       	mov    $0x1,%esi
  800421214a:	48 89 c7             	mov    %rax,%rdi
  800421214d:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  8004212154:	00 00 00 
  8004212157:	ff d0                	callq  *%rax
  8004212159:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421215d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212162:	74 35                	je     8004212199 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212168:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421216c:	48 83 f8 10          	cmp    $0x10,%rax
  8004212170:	74 19                	je     800421218b <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212172:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212176:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421217a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421217e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212182:	48 01 d0             	add    %rdx,%rax
  8004212185:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212189:	eb 21                	jmp    80042121ac <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  800421218b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421218f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212193:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212197:	eb 13                	jmp    80042121ac <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212199:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421219d:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042121a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  80042121a5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  80042121ac:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042121af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042121b3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  80042121b7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  80042121bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042121bf:	4c 8b 00             	mov    (%rax),%r8
  80042121c2:	4c 89 04 24          	mov    %r8,(%rsp)
  80042121c6:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042121ca:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042121cf:	4c 8b 40 10          	mov    0x10(%rax),%r8
  80042121d3:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042121d8:	4c 8b 40 18          	mov    0x18(%rax),%r8
  80042121dc:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  80042121e1:	4c 8b 40 20          	mov    0x20(%rax),%r8
  80042121e5:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  80042121ea:	4c 8b 40 28          	mov    0x28(%rax),%r8
  80042121ee:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  80042121f3:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042121f7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042121fc:	48 b8 59 1b 21 04 80 	movabs $0x8004211b59,%rax
  8004212203:	00 00 00 
  8004212206:	ff d0                	callq  *%rax
  8004212208:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  800421220b:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  800421220f:	75 07                	jne    8004212218 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212211:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212216:	eb 12                	jmp    800421222a <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212218:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421221c:	74 07                	je     8004212225 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  800421221e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212223:	eb 05                	jmp    800421222a <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212225:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421222a:	c9                   	leaveq 
  800421222b:	c3                   	retq   

000000800421222c <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  800421222c:	55                   	push   %rbp
  800421222d:	48 89 e5             	mov    %rsp,%rbp
  8004212230:	48 83 ec 70          	sub    $0x70,%rsp
  8004212234:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212238:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421223c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212240:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212244:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212249:	75 35                	jne    8004212280 <dwarf_child+0x54>
  800421224b:	48 b9 e7 ae 21 04 80 	movabs $0x800421aee7,%rcx
  8004212252:	00 00 00 
  8004212255:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  800421225c:	00 00 00 
  800421225f:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212264:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  800421226b:	00 00 00 
  800421226e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212273:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421227a:	00 00 00 
  800421227d:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212280:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212285:	75 35                	jne    80042122bc <dwarf_child+0x90>
  8004212287:	48 b9 dc ae 21 04 80 	movabs $0x800421aedc,%rcx
  800421228e:	00 00 00 
  8004212291:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004212298:	00 00 00 
  800421229b:	be 1d 03 00 00       	mov    $0x31d,%esi
  80042122a0:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  80042122a7:	00 00 00 
  80042122aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122af:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042122b6:	00 00 00 
  80042122b9:	41 ff d0             	callq  *%r8
	assert(dbg);
  80042122bc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042122c1:	75 35                	jne    80042122f8 <dwarf_child+0xcc>
  80042122c3:	48 b9 d8 ae 21 04 80 	movabs $0x800421aed8,%rcx
  80042122ca:	00 00 00 
  80042122cd:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  80042122d4:	00 00 00 
  80042122d7:	be 1e 03 00 00       	mov    $0x31e,%esi
  80042122dc:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  80042122e3:	00 00 00 
  80042122e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122eb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042122f2:	00 00 00 
  80042122f5:	41 ff d0             	callq  *%r8
	assert(cu);
  80042122f8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042122fd:	75 35                	jne    8004212334 <dwarf_child+0x108>
  80042122ff:	48 b9 e4 ae 21 04 80 	movabs $0x800421aee4,%rcx
  8004212306:	00 00 00 
  8004212309:	48 ba 4a ad 21 04 80 	movabs $0x800421ad4a,%rdx
  8004212310:	00 00 00 
  8004212313:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212318:	48 bf 5f ad 21 04 80 	movabs $0x800421ad5f,%rdi
  800421231f:	00 00 00 
  8004212322:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212327:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421232e:	00 00 00 
  8004212331:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212334:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212338:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800421233c:	84 c0                	test   %al,%al
  800421233e:	75 0a                	jne    800421234a <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212340:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212345:	e9 84 00 00 00       	jmpq   80042123ce <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  800421234a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421234e:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212352:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212356:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  800421235a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421235e:	48 8b 08             	mov    (%rax),%rcx
  8004212361:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212365:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212369:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421236e:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212372:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212377:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421237b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212380:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212384:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212389:	48 8b 48 28          	mov    0x28(%rax),%rcx
  800421238d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212392:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212396:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421239b:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042123a0:	48 b8 59 1b 21 04 80 	movabs $0x8004211b59,%rax
  80042123a7:	00 00 00 
  80042123aa:	ff d0                	callq  *%rax
  80042123ac:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  80042123af:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  80042123b3:	75 07                	jne    80042123bc <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042123b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042123ba:	eb 12                	jmp    80042123ce <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  80042123bc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042123c0:	74 07                	je     80042123c9 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  80042123c2:	b8 01 00 00 00       	mov    $0x1,%eax
  80042123c7:	eb 05                	jmp    80042123ce <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  80042123c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042123ce:	c9                   	leaveq 
  80042123cf:	c3                   	retq   

00000080042123d0 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  80042123d0:	55                   	push   %rbp
  80042123d1:	48 89 e5             	mov    %rsp,%rbp
  80042123d4:	48 83 ec 20          	sub    $0x20,%rsp
  80042123d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  80042123dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123e0:	48 8b 00             	mov    (%rax),%rax
  80042123e3:	48 89 c7             	mov    %rax,%rdi
  80042123e6:	48 b8 f7 56 21 04 80 	movabs $0x80042156f7,%rax
  80042123ed:	00 00 00 
  80042123f0:	ff d0                	callq  *%rax
  80042123f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  80042123f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042123fa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042123fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212402:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212406:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421240a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421240e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212412:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421241a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421241e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212422:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212426:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421242b:	c9                   	leaveq 
  800421242c:	c3                   	retq   

000000800421242d <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  800421242d:	55                   	push   %rbp
  800421242e:	48 89 e5             	mov    %rsp,%rbp
  8004212431:	48 83 ec 08          	sub    $0x8,%rsp
  8004212435:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421243d:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212443:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212447:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  800421244d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212451:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212457:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421245b:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212461:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212465:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  800421246b:	c9                   	leaveq 
  800421246c:	c3                   	retq   

000000800421246d <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  800421246d:	55                   	push   %rbp
  800421246e:	48 89 e5             	mov    %rsp,%rbp
  8004212471:	48 83 ec 40          	sub    $0x40,%rsp
  8004212475:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212479:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421247d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212481:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212485:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212489:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421248d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212495:	ba 80 00 00 00       	mov    $0x80,%edx
  800421249a:	be 00 00 00 00       	mov    $0x0,%esi
  800421249f:	48 89 c7             	mov    %rax,%rdi
  80042124a2:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042124a9:	00 00 00 
  80042124ac:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  80042124ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124b2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042124b6:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  80042124ba:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042124bf:	75 07                	jne    80042124c8 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  80042124c1:	b8 01 00 00 00       	mov    $0x1,%eax
  80042124c6:	eb 75                	jmp    800421253d <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042124c8:	eb 59                	jmp    8004212523 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  80042124ca:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  80042124ce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042124d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124d6:	be 01 00 00 00       	mov    $0x1,%esi
  80042124db:	48 89 c7             	mov    %rax,%rdi
  80042124de:	48 b8 82 46 21 04 80 	movabs $0x8004214682,%rax
  80042124e5:	00 00 00 
  80042124e8:	ff d0                	callq  *%rax
  80042124ea:	85 c0                	test   %eax,%eax
  80042124ec:	79 07                	jns    80042124f5 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  80042124ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042124f3:	eb 48                	jmp    800421253d <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042124f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124f9:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042124fd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212501:	77 20                	ja     8004212523 <dwarf_get_fde_at_pc+0xb6>
  8004212503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212507:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  800421250b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421250f:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212513:	48 01 d0             	add    %rdx,%rax
  8004212516:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421251a:	76 07                	jbe    8004212523 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  800421251c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212521:	eb 1a                	jmp    800421253d <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212523:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212527:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421252b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421252f:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004212533:	48 39 c2             	cmp    %rax,%rdx
  8004212536:	72 92                	jb     80042124ca <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004212538:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  800421253d:	c9                   	leaveq 
  800421253e:	c3                   	retq   

000000800421253f <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  800421253f:	55                   	push   %rbp
  8004212540:	48 89 e5             	mov    %rsp,%rbp
  8004212543:	53                   	push   %rbx
  8004212544:	48 83 ec 38          	sub    $0x38,%rsp
  8004212548:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421254c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212550:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212554:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004212558:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421255d:	75 35                	jne    8004212594 <_dwarf_frame_regtable_copy+0x55>
  800421255f:	48 b9 fa ae 21 04 80 	movabs $0x800421aefa,%rcx
  8004212566:	00 00 00 
  8004212569:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004212570:	00 00 00 
  8004212573:	be 57 00 00 00       	mov    $0x57,%esi
  8004212578:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  800421257f:	00 00 00 
  8004212582:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212587:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421258e:	00 00 00 
  8004212591:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004212594:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212599:	75 35                	jne    80042125d0 <_dwarf_frame_regtable_copy+0x91>
  800421259b:	48 b9 32 af 21 04 80 	movabs $0x800421af32,%rcx
  80042125a2:	00 00 00 
  80042125a5:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  80042125ac:	00 00 00 
  80042125af:	be 58 00 00 00       	mov    $0x58,%esi
  80042125b4:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  80042125bb:	00 00 00 
  80042125be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042125c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042125ca:	00 00 00 
  80042125cd:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  80042125d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125d4:	48 8b 00             	mov    (%rax),%rax
  80042125d7:	48 85 c0             	test   %rax,%rax
  80042125da:	75 39                	jne    8004212615 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  80042125dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125e0:	48 bb e0 d6 49 04 80 	movabs $0x800449d6e0,%rbx
  80042125e7:	00 00 00 
  80042125ea:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  80042125ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042125f1:	48 8b 00             	mov    (%rax),%rax
  80042125f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042125f8:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  80042125fc:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004212600:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212604:	48 8b 00             	mov    (%rax),%rax
  8004212607:	48 bb e0 b7 69 04 80 	movabs $0x800469b7e0,%rbx
  800421260e:	00 00 00 
  8004212611:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212615:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004212619:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421261d:	48 8b 00             	mov    (%rax),%rax
  8004212620:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212625:	48 89 ce             	mov    %rcx,%rsi
  8004212628:	48 89 c7             	mov    %rax,%rdi
  800421262b:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  8004212632:	00 00 00 
  8004212635:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212637:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800421263e:	eb 5a                	jmp    800421269a <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004212640:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212644:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212648:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421264b:	48 63 d0             	movslq %eax,%rdx
  800421264e:	48 89 d0             	mov    %rdx,%rax
  8004212651:	48 01 c0             	add    %rax,%rax
  8004212654:	48 01 d0             	add    %rdx,%rax
  8004212657:	48 c1 e0 03          	shl    $0x3,%rax
  800421265b:	48 01 c1             	add    %rax,%rcx
  800421265e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212662:	48 8b 00             	mov    (%rax),%rax
  8004212665:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212669:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421266c:	48 63 d0             	movslq %eax,%rdx
  800421266f:	48 89 d0             	mov    %rdx,%rax
  8004212672:	48 01 c0             	add    %rax,%rax
  8004212675:	48 01 d0             	add    %rdx,%rax
  8004212678:	48 c1 e0 03          	shl    $0x3,%rax
  800421267c:	48 01 f0             	add    %rsi,%rax
  800421267f:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212684:	48 89 ce             	mov    %rcx,%rsi
  8004212687:	48 89 c7             	mov    %rax,%rdi
  800421268a:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  8004212691:	00 00 00 
  8004212694:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004212696:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421269a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421269e:	48 8b 00             	mov    (%rax),%rax
  80042126a1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042126a5:	0f b7 c0             	movzwl %ax,%eax
  80042126a8:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042126ab:	7e 10                	jle    80042126bd <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  80042126ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042126b1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042126b5:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042126b8:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042126bb:	7f 83                	jg     8004212640 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  80042126bd:	eb 32                	jmp    80042126f1 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  80042126bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042126c3:	48 8b 00             	mov    (%rax),%rax
  80042126c6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042126ca:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042126cd:	48 63 d0             	movslq %eax,%rdx
  80042126d0:	48 89 d0             	mov    %rdx,%rax
  80042126d3:	48 01 c0             	add    %rax,%rax
  80042126d6:	48 01 d0             	add    %rdx,%rax
  80042126d9:	48 c1 e0 03          	shl    $0x3,%rax
  80042126dd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  80042126e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042126e5:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  80042126e9:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  80042126ed:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042126f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042126f5:	48 8b 00             	mov    (%rax),%rax
  80042126f8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042126fc:	0f b7 c0             	movzwl %ax,%eax
  80042126ff:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212702:	7f bb                	jg     80042126bf <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004212704:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212709:	48 83 c4 38          	add    $0x38,%rsp
  800421270d:	5b                   	pop    %rbx
  800421270e:	5d                   	pop    %rbp
  800421270f:	c3                   	retq   

0000008004212710 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004212710:	55                   	push   %rbp
  8004212711:	48 89 e5             	mov    %rsp,%rbp
  8004212714:	53                   	push   %rbx
  8004212715:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800421271c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004212720:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004212724:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004212728:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421272c:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  8004212733:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  800421273a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  8004212741:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004212748:	00 
  8004212749:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421274d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  8004212751:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212755:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212759:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  800421275c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212760:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212764:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  8004212768:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421276c:	48 89 c7             	mov    %rax,%rdi
  800421276f:	48 b8 3f 25 21 04 80 	movabs $0x800421253f,%rax
  8004212776:	00 00 00 
  8004212779:	ff d0                	callq  *%rax
	p = insts;
  800421277b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421277f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  8004212783:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212787:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421278b:	48 01 d0             	add    %rdx,%rax
  800421278e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  8004212792:	e9 3a 0d 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004212797:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421279b:	0f b6 00             	movzbl (%rax),%eax
  800421279e:	84 c0                	test   %al,%al
  80042127a0:	75 11                	jne    80042127b3 <_dwarf_frame_run_inst+0xa3>
			p++;
  80042127a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042127a6:	48 83 c0 01          	add    $0x1,%rax
  80042127aa:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  80042127ae:	e9 1e 0d 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  80042127b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042127b7:	0f b6 00             	movzbl (%rax),%eax
  80042127ba:	83 e0 c0             	and    $0xffffffc0,%eax
  80042127bd:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  80042127c0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042127c4:	0f b6 00             	movzbl (%rax),%eax
  80042127c7:	83 e0 3f             	and    $0x3f,%eax
  80042127ca:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  80042127cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042127d1:	48 83 c0 01          	add    $0x1,%rax
  80042127d5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  80042127d9:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  80042127dd:	0f 84 a1 01 00 00    	je     8004212984 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  80042127e3:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042127e7:	3d 80 00 00 00       	cmp    $0x80,%eax
  80042127ec:	74 38                	je     8004212826 <_dwarf_frame_run_inst+0x116>
  80042127ee:	3d c0 00 00 00       	cmp    $0xc0,%eax
  80042127f3:	0f 84 01 01 00 00    	je     80042128fa <_dwarf_frame_run_inst+0x1ea>
  80042127f9:	83 f8 40             	cmp    $0x40,%eax
  80042127fc:	0f 85 71 01 00 00    	jne    8004212973 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004212802:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212806:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421280d:	ff 
  800421280e:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004212812:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212816:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421281a:	73 05                	jae    8004212821 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800421281c:	e9 be 0c 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004212821:	e9 59 01 00 00       	jmpq   800421297f <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004212826:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421282a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421282e:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212831:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212835:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212839:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421283d:	66 39 c2             	cmp    %ax,%dx
  8004212840:	72 0c                	jb     800421284e <_dwarf_frame_run_inst+0x13e>
  8004212842:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212849:	e9 91 0c 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  800421284e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212852:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212856:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421285a:	48 89 d0             	mov    %rdx,%rax
  800421285d:	48 01 c0             	add    %rax,%rax
  8004212860:	48 01 d0             	add    %rdx,%rax
  8004212863:	48 c1 e0 03          	shl    $0x3,%rax
  8004212867:	48 01 c8             	add    %rcx,%rax
  800421286a:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  800421286d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212871:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212875:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212879:	48 89 d0             	mov    %rdx,%rax
  800421287c:	48 01 c0             	add    %rax,%rax
  800421287f:	48 01 d0             	add    %rdx,%rax
  8004212882:	48 c1 e0 03          	shl    $0x3,%rax
  8004212886:	48 01 c8             	add    %rcx,%rax
  8004212889:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  800421288d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212891:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212895:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212899:	48 89 d0             	mov    %rdx,%rax
  800421289c:	48 01 c0             	add    %rax,%rax
  800421289f:	48 01 d0             	add    %rdx,%rax
  80042128a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042128a6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042128aa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042128ae:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042128b2:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  80042128b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128ba:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042128be:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128c2:	48 89 d0             	mov    %rdx,%rax
  80042128c5:	48 01 c0             	add    %rax,%rax
  80042128c8:	48 01 d0             	add    %rdx,%rax
  80042128cb:	48 c1 e0 03          	shl    $0x3,%rax
  80042128cf:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  80042128d3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042128d7:	48 89 c7             	mov    %rax,%rdi
  80042128da:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  80042128e1:	00 00 00 
  80042128e4:	ff d0                	callq  *%rax
  80042128e6:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042128ed:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  80042128f1:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  80042128f5:	e9 85 00 00 00       	jmpq   800421297f <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  80042128fa:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042128fe:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212902:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212905:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212909:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421290d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212911:	66 39 c2             	cmp    %ax,%dx
  8004212914:	72 0c                	jb     8004212922 <_dwarf_frame_run_inst+0x212>
  8004212916:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421291d:	e9 bd 0b 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004212922:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212926:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421292a:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421292e:	48 89 d0             	mov    %rdx,%rax
  8004212931:	48 01 c0             	add    %rax,%rax
  8004212934:	48 01 d0             	add    %rdx,%rax
  8004212937:	48 c1 e0 03          	shl    $0x3,%rax
  800421293b:	48 01 c1             	add    %rax,%rcx
  800421293e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212942:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212946:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421294a:	48 89 d0             	mov    %rdx,%rax
  800421294d:	48 01 c0             	add    %rax,%rax
  8004212950:	48 01 d0             	add    %rdx,%rax
  8004212953:	48 c1 e0 03          	shl    $0x3,%rax
  8004212957:	48 01 f0             	add    %rsi,%rax
  800421295a:	ba 18 00 00 00       	mov    $0x18,%edx
  800421295f:	48 89 ce             	mov    %rcx,%rsi
  8004212962:	48 89 c7             	mov    %rax,%rdi
  8004212965:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  800421296c:	00 00 00 
  800421296f:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004212971:	eb 0c                	jmp    800421297f <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004212973:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  800421297a:	e9 60 0b 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  800421297f:	e9 4d 0b 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  8004212984:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212988:	83 f8 16             	cmp    $0x16,%eax
  800421298b:	0f 87 37 0b 00 00    	ja     80042134c8 <_dwarf_frame_run_inst+0xdb8>
  8004212991:	89 c0                	mov    %eax,%eax
  8004212993:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421299a:	00 
  800421299b:	48 b8 40 af 21 04 80 	movabs $0x800421af40,%rax
  80042129a2:	00 00 00 
  80042129a5:	48 01 d0             	add    %rdx,%rax
  80042129a8:	48 8b 00             	mov    (%rax),%rax
  80042129ab:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  80042129ad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042129b1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042129b5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042129b9:	8b 4a 28             	mov    0x28(%rdx),%ecx
  80042129bc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042129c0:	89 ce                	mov    %ecx,%esi
  80042129c2:	48 89 d7             	mov    %rdx,%rdi
  80042129c5:	ff d0                	callq  *%rax
  80042129c7:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042129cb:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042129cf:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042129d3:	73 05                	jae    80042129da <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  80042129d5:	e9 05 0b 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			break;
  80042129da:	e9 f2 0a 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  80042129df:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042129e3:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042129e7:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042129eb:	be 01 00 00 00       	mov    $0x1,%esi
  80042129f0:	48 89 d7             	mov    %rdx,%rdi
  80042129f3:	ff d0                	callq  *%rax
  80042129f5:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042129fc:	ff 
  80042129fd:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a01:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a05:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a09:	73 05                	jae    8004212a10 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004212a0b:	e9 cf 0a 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212a10:	e9 bc 0a 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004212a15:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a19:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a1d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a21:	be 02 00 00 00       	mov    $0x2,%esi
  8004212a26:	48 89 d7             	mov    %rdx,%rdi
  8004212a29:	ff d0                	callq  *%rax
  8004212a2b:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212a32:	ff 
  8004212a33:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a37:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a3b:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a3f:	73 05                	jae    8004212a46 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004212a41:	e9 99 0a 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212a46:	e9 86 0a 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004212a4b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a4f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a53:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a57:	be 04 00 00 00       	mov    $0x4,%esi
  8004212a5c:	48 89 d7             	mov    %rdx,%rdi
  8004212a5f:	ff d0                	callq  *%rax
  8004212a61:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212a68:	ff 
  8004212a69:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a6d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a71:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a75:	73 05                	jae    8004212a7c <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  8004212a77:	e9 63 0a 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212a7c:	e9 50 0a 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004212a81:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212a85:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212a89:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212a8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212a90:	48 89 c7             	mov    %rax,%rdi
  8004212a93:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212a9a:	00 00 00 
  8004212a9d:	ff d0                	callq  *%rax
  8004212a9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212aa3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212aa7:	48 89 c7             	mov    %rax,%rdi
  8004212aaa:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212ab1:	00 00 00 
  8004212ab4:	ff d0                	callq  *%rax
  8004212ab6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212aba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212abe:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212ac2:	0f b7 c0             	movzwl %ax,%eax
  8004212ac5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212ac9:	77 0c                	ja     8004212ad7 <_dwarf_frame_run_inst+0x3c7>
  8004212acb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212ad2:	e9 08 0a 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004212ad7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212adb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212adf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ae3:	48 89 d0             	mov    %rdx,%rax
  8004212ae6:	48 01 c0             	add    %rax,%rax
  8004212ae9:	48 01 d0             	add    %rdx,%rax
  8004212aec:	48 c1 e0 03          	shl    $0x3,%rax
  8004212af0:	48 01 c8             	add    %rcx,%rax
  8004212af3:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004212af6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212afa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212afe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b02:	48 89 d0             	mov    %rdx,%rax
  8004212b05:	48 01 c0             	add    %rax,%rax
  8004212b08:	48 01 d0             	add    %rdx,%rax
  8004212b0b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b0f:	48 01 c8             	add    %rcx,%rax
  8004212b12:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212b16:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b1a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b1e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b22:	48 89 d0             	mov    %rdx,%rax
  8004212b25:	48 01 c0             	add    %rax,%rax
  8004212b28:	48 01 d0             	add    %rdx,%rax
  8004212b2b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b2f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212b33:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212b37:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212b3b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004212b3f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b43:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b47:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b4b:	48 89 d0             	mov    %rdx,%rax
  8004212b4e:	48 01 c0             	add    %rax,%rax
  8004212b51:	48 01 d0             	add    %rdx,%rax
  8004212b54:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b58:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212b5c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212b63:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004212b68:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004212b6c:	e9 60 09 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004212b71:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212b75:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212b79:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212b7c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212b80:	48 89 c7             	mov    %rax,%rdi
  8004212b83:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212b8a:	00 00 00 
  8004212b8d:	ff d0                	callq  *%rax
  8004212b8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212b93:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b97:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212b9b:	0f b7 c0             	movzwl %ax,%eax
  8004212b9e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212ba2:	77 0c                	ja     8004212bb0 <_dwarf_frame_run_inst+0x4a0>
  8004212ba4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212bab:	e9 2f 09 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004212bb0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212bb4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bb8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212bbc:	48 89 d0             	mov    %rdx,%rax
  8004212bbf:	48 01 c0             	add    %rax,%rax
  8004212bc2:	48 01 d0             	add    %rdx,%rax
  8004212bc5:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bc9:	48 01 c1             	add    %rax,%rcx
  8004212bcc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bd0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212bd4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212bd8:	48 89 d0             	mov    %rdx,%rax
  8004212bdb:	48 01 c0             	add    %rax,%rax
  8004212bde:	48 01 d0             	add    %rdx,%rax
  8004212be1:	48 c1 e0 03          	shl    $0x3,%rax
  8004212be5:	48 01 f0             	add    %rsi,%rax
  8004212be8:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212bed:	48 89 ce             	mov    %rcx,%rsi
  8004212bf0:	48 89 c7             	mov    %rax,%rdi
  8004212bf3:	48 b8 c2 01 21 04 80 	movabs $0x80042101c2,%rax
  8004212bfa:	00 00 00 
  8004212bfd:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004212bff:	e9 cd 08 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004212c04:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212c08:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212c0c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212c0f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c13:	48 89 c7             	mov    %rax,%rdi
  8004212c16:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212c1d:	00 00 00 
  8004212c20:	ff d0                	callq  *%rax
  8004212c22:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212c26:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c2a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212c2e:	0f b7 c0             	movzwl %ax,%eax
  8004212c31:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212c35:	77 0c                	ja     8004212c43 <_dwarf_frame_run_inst+0x533>
  8004212c37:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212c3e:	e9 9c 08 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212c43:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c47:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c4b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c4f:	48 89 d0             	mov    %rdx,%rax
  8004212c52:	48 01 c0             	add    %rax,%rax
  8004212c55:	48 01 d0             	add    %rdx,%rax
  8004212c58:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c5c:	48 01 c8             	add    %rcx,%rax
  8004212c5f:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004212c62:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c66:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c6a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c6e:	48 89 d0             	mov    %rdx,%rax
  8004212c71:	48 01 c0             	add    %rax,%rax
  8004212c74:	48 01 d0             	add    %rdx,%rax
  8004212c77:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c7b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212c7f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212c83:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004212c87:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212c8b:	e9 41 08 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004212c90:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c94:	48 89 c7             	mov    %rax,%rdi
  8004212c97:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212c9e:	00 00 00 
  8004212ca1:	ff d0                	callq  *%rax
  8004212ca3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212ca7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cab:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212caf:	0f b7 c0             	movzwl %ax,%eax
  8004212cb2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212cb6:	77 0c                	ja     8004212cc4 <_dwarf_frame_run_inst+0x5b4>
  8004212cb8:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212cbf:	e9 1b 08 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212cc4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cc8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ccc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212cd0:	48 89 d0             	mov    %rdx,%rax
  8004212cd3:	48 01 c0             	add    %rax,%rax
  8004212cd6:	48 01 d0             	add    %rdx,%rax
  8004212cd9:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cdd:	48 01 c8             	add    %rcx,%rax
  8004212ce0:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004212ce3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ce7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ceb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212cef:	48 89 d0             	mov    %rdx,%rax
  8004212cf2:	48 01 c0             	add    %rax,%rax
  8004212cf5:	48 01 d0             	add    %rdx,%rax
  8004212cf8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cfc:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212d00:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d04:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004212d08:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212d0c:	e9 c0 07 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004212d11:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212d15:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212d19:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212d1c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d20:	48 89 c7             	mov    %rax,%rdi
  8004212d23:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212d2a:	00 00 00 
  8004212d2d:	ff d0                	callq  *%rax
  8004212d2f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004212d33:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d37:	48 89 c7             	mov    %rax,%rdi
  8004212d3a:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212d41:	00 00 00 
  8004212d44:	ff d0                	callq  *%rax
  8004212d46:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212d4a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d4e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212d52:	0f b7 c0             	movzwl %ax,%eax
  8004212d55:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212d59:	77 0c                	ja     8004212d67 <_dwarf_frame_run_inst+0x657>
  8004212d5b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212d62:	e9 78 07 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212d67:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d6b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d6f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d73:	48 89 d0             	mov    %rdx,%rax
  8004212d76:	48 01 c0             	add    %rax,%rax
  8004212d79:	48 01 d0             	add    %rdx,%rax
  8004212d7c:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d80:	48 01 c8             	add    %rcx,%rax
  8004212d83:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004212d86:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d8a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d8e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d92:	48 89 d0             	mov    %rdx,%rax
  8004212d95:	48 01 c0             	add    %rax,%rax
  8004212d98:	48 01 d0             	add    %rdx,%rax
  8004212d9b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d9f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212da3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212da7:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212dab:	e9 21 07 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004212db0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212db4:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212db8:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004212dbc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212dc0:	48 89 c7             	mov    %rax,%rdi
  8004212dc3:	48 b8 3f 25 21 04 80 	movabs $0x800421253f,%rax
  8004212dca:	00 00 00 
  8004212dcd:	ff d0                	callq  *%rax
			break;
  8004212dcf:	e9 fd 06 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004212dd4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212dd8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ddc:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004212ddf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212de3:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212de7:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004212deb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212def:	48 89 c7             	mov    %rax,%rdi
  8004212df2:	48 b8 3f 25 21 04 80 	movabs $0x800421253f,%rax
  8004212df9:	00 00 00 
  8004212dfc:	ff d0                	callq  *%rax
			break;
  8004212dfe:	e9 ce 06 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004212e03:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e07:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e0b:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212e0e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e12:	48 89 c7             	mov    %rax,%rdi
  8004212e15:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212e1c:	00 00 00 
  8004212e1f:	ff d0                	callq  *%rax
  8004212e21:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212e25:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e29:	48 89 c7             	mov    %rax,%rdi
  8004212e2c:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212e33:	00 00 00 
  8004212e36:	ff d0                	callq  *%rax
  8004212e38:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212e3c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e40:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212e43:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e47:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004212e4b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e4f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e53:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212e57:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e5b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212e63:	e9 69 06 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004212e68:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e6c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e70:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212e73:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e77:	48 89 c7             	mov    %rax,%rdi
  8004212e7a:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212e81:	00 00 00 
  8004212e84:	ff d0                	callq  *%rax
  8004212e86:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004212e8a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e8e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e92:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004212e96:	e9 36 06 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004212e9b:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e9f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ea3:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004212ea6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212eaa:	48 89 c7             	mov    %rax,%rdi
  8004212ead:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212eb4:	00 00 00 
  8004212eb7:	ff d0                	callq  *%rax
  8004212eb9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212ebd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ec1:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212ec4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ec8:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212ecc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ed0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212ed4:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212ed8:	e9 f4 05 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004212edd:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ee1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ee5:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004212ee8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212eec:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004212eef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ef3:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004212ef7:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004212efb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212eff:	48 89 c7             	mov    %rax,%rdi
  8004212f02:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212f09:	00 00 00 
  8004212f0c:	ff d0                	callq  *%rax
  8004212f0e:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004212f12:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f16:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212f1a:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004212f1e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212f22:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f26:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212f2a:	48 01 d0             	add    %rdx,%rax
  8004212f2d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212f31:	e9 9b 05 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004212f36:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212f3a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212f3e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212f41:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f45:	48 89 c7             	mov    %rax,%rdi
  8004212f48:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212f4f:	00 00 00 
  8004212f52:	ff d0                	callq  *%rax
  8004212f54:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212f58:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f5c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212f60:	0f b7 c0             	movzwl %ax,%eax
  8004212f63:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212f67:	77 0c                	ja     8004212f75 <_dwarf_frame_run_inst+0x865>
  8004212f69:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212f70:	e9 6a 05 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212f75:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f79:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f7d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f81:	48 89 d0             	mov    %rdx,%rax
  8004212f84:	48 01 c0             	add    %rax,%rax
  8004212f87:	48 01 d0             	add    %rdx,%rax
  8004212f8a:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f8e:	48 01 c8             	add    %rcx,%rax
  8004212f91:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004212f94:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f98:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f9c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fa0:	48 89 d0             	mov    %rdx,%rax
  8004212fa3:	48 01 c0             	add    %rax,%rax
  8004212fa6:	48 01 d0             	add    %rdx,%rax
  8004212fa9:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fad:	48 01 c8             	add    %rcx,%rax
  8004212fb0:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004212fb4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fb8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212fbc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fc0:	48 89 d0             	mov    %rdx,%rax
  8004212fc3:	48 01 c0             	add    %rax,%rax
  8004212fc6:	48 01 d0             	add    %rdx,%rax
  8004212fc9:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fcd:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004212fd1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212fd5:	48 89 c7             	mov    %rax,%rdi
  8004212fd8:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004212fdf:	00 00 00 
  8004212fe2:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004212fe4:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004212fe8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fec:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ff0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ff4:	48 89 d0             	mov    %rdx,%rax
  8004212ff7:	48 01 c0             	add    %rax,%rax
  8004212ffa:	48 01 d0             	add    %rdx,%rax
  8004212ffd:	48 c1 e0 03          	shl    $0x3,%rax
  8004213001:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213005:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213009:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800421300d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213011:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213015:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213019:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421301d:	48 89 d0             	mov    %rdx,%rax
  8004213020:	48 01 c0             	add    %rax,%rax
  8004213023:	48 01 d0             	add    %rdx,%rax
  8004213026:	48 c1 e0 03          	shl    $0x3,%rax
  800421302a:	48 01 f0             	add    %rsi,%rax
  800421302d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213031:	48 01 c8             	add    %rcx,%rax
  8004213034:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213038:	e9 94 04 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  800421303d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213041:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213045:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213048:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421304c:	48 89 c7             	mov    %rax,%rdi
  800421304f:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004213056:	00 00 00 
  8004213059:	ff d0                	callq  *%rax
  800421305b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421305f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213063:	48 89 c7             	mov    %rax,%rdi
  8004213066:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  800421306d:	00 00 00 
  8004213070:	ff d0                	callq  *%rax
  8004213072:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213076:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421307a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421307e:	0f b7 c0             	movzwl %ax,%eax
  8004213081:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213085:	77 0c                	ja     8004213093 <_dwarf_frame_run_inst+0x983>
  8004213087:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421308e:	e9 4c 04 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213093:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213097:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421309b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421309f:	48 89 d0             	mov    %rdx,%rax
  80042130a2:	48 01 c0             	add    %rax,%rax
  80042130a5:	48 01 d0             	add    %rdx,%rax
  80042130a8:	48 c1 e0 03          	shl    $0x3,%rax
  80042130ac:	48 01 c8             	add    %rcx,%rax
  80042130af:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  80042130b2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130b6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042130ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130be:	48 89 d0             	mov    %rdx,%rax
  80042130c1:	48 01 c0             	add    %rax,%rax
  80042130c4:	48 01 d0             	add    %rdx,%rax
  80042130c7:	48 c1 e0 03          	shl    $0x3,%rax
  80042130cb:	48 01 c8             	add    %rcx,%rax
  80042130ce:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042130d2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130d6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042130da:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130de:	48 89 d0             	mov    %rdx,%rax
  80042130e1:	48 01 c0             	add    %rax,%rax
  80042130e4:	48 01 d0             	add    %rdx,%rax
  80042130e7:	48 c1 e0 03          	shl    $0x3,%rax
  80042130eb:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042130ef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042130f3:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042130f7:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042130fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130ff:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213103:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213107:	48 89 d0             	mov    %rdx,%rax
  800421310a:	48 01 c0             	add    %rax,%rax
  800421310d:	48 01 d0             	add    %rdx,%rax
  8004213110:	48 c1 e0 03          	shl    $0x3,%rax
  8004213114:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213118:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421311f:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213124:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213128:	e9 a4 03 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  800421312d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213131:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213135:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213138:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421313c:	48 89 c7             	mov    %rax,%rdi
  800421313f:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004213146:	00 00 00 
  8004213149:	ff d0                	callq  *%rax
  800421314b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421314f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213153:	48 89 c7             	mov    %rax,%rdi
  8004213156:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  800421315d:	00 00 00 
  8004213160:	ff d0                	callq  *%rax
  8004213162:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213166:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421316a:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800421316d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213171:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213175:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213179:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421317d:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213181:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213185:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421318c:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213191:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213195:	e9 37 03 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  800421319a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421319e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042131a2:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  80042131a5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131a9:	48 89 c7             	mov    %rax,%rdi
  80042131ac:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  80042131b3:	00 00 00 
  80042131b6:	ff d0                	callq  *%rax
  80042131b8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042131bc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131c0:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042131c3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131c7:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042131cb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131cf:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042131d6:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  80042131db:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042131df:	e9 ed 02 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  80042131e4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042131e8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042131ec:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042131ef:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131f3:	48 89 c7             	mov    %rax,%rdi
  80042131f6:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  80042131fd:	00 00 00 
  8004213200:	ff d0                	callq  *%rax
  8004213202:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213206:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421320a:	48 89 c7             	mov    %rax,%rdi
  800421320d:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004213214:	00 00 00 
  8004213217:	ff d0                	callq  *%rax
  8004213219:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421321d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213221:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213225:	0f b7 c0             	movzwl %ax,%eax
  8004213228:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421322c:	77 0c                	ja     800421323a <_dwarf_frame_run_inst+0xb2a>
  800421322e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213235:	e9 a5 02 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421323a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421323e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213242:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213246:	48 89 d0             	mov    %rdx,%rax
  8004213249:	48 01 c0             	add    %rax,%rax
  800421324c:	48 01 d0             	add    %rdx,%rax
  800421324f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213253:	48 01 c8             	add    %rcx,%rax
  8004213256:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213259:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421325d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213261:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213265:	48 89 d0             	mov    %rdx,%rax
  8004213268:	48 01 c0             	add    %rax,%rax
  800421326b:	48 01 d0             	add    %rdx,%rax
  800421326e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213272:	48 01 c8             	add    %rcx,%rax
  8004213275:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213279:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421327d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213281:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213285:	48 89 d0             	mov    %rdx,%rax
  8004213288:	48 01 c0             	add    %rax,%rax
  800421328b:	48 01 d0             	add    %rdx,%rax
  800421328e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213292:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213296:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421329a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421329e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042132a2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132a6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132aa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132ae:	48 89 d0             	mov    %rdx,%rax
  80042132b1:	48 01 c0             	add    %rax,%rax
  80042132b4:	48 01 d0             	add    %rdx,%rax
  80042132b7:	48 c1 e0 03          	shl    $0x3,%rax
  80042132bb:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042132bf:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042132c6:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042132cb:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042132cf:	e9 fd 01 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  80042132d4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042132d8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042132dc:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042132df:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042132e3:	48 89 c7             	mov    %rax,%rdi
  80042132e6:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  80042132ed:	00 00 00 
  80042132f0:	ff d0                	callq  *%rax
  80042132f2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042132f6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042132fa:	48 89 c7             	mov    %rax,%rdi
  80042132fd:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  8004213304:	00 00 00 
  8004213307:	ff d0                	callq  *%rax
  8004213309:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421330d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213311:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213315:	0f b7 c0             	movzwl %ax,%eax
  8004213318:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421331c:	77 0c                	ja     800421332a <_dwarf_frame_run_inst+0xc1a>
  800421331e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213325:	e9 b5 01 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421332a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421332e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213332:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213336:	48 89 d0             	mov    %rdx,%rax
  8004213339:	48 01 c0             	add    %rax,%rax
  800421333c:	48 01 d0             	add    %rdx,%rax
  800421333f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213343:	48 01 c8             	add    %rcx,%rax
  8004213346:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213349:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421334d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213351:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213355:	48 89 d0             	mov    %rdx,%rax
  8004213358:	48 01 c0             	add    %rax,%rax
  800421335b:	48 01 d0             	add    %rdx,%rax
  800421335e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213362:	48 01 c8             	add    %rcx,%rax
  8004213365:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213369:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421336d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213371:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213375:	48 89 d0             	mov    %rdx,%rax
  8004213378:	48 01 c0             	add    %rax,%rax
  800421337b:	48 01 d0             	add    %rdx,%rax
  800421337e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213382:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213386:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421338a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421338e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213392:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213396:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421339a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421339e:	48 89 d0             	mov    %rdx,%rax
  80042133a1:	48 01 c0             	add    %rax,%rax
  80042133a4:	48 01 d0             	add    %rdx,%rax
  80042133a7:	48 c1 e0 03          	shl    $0x3,%rax
  80042133ab:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042133af:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042133b6:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  80042133bb:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042133bf:	e9 0d 01 00 00       	jmpq   80042134d1 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  80042133c4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042133c8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042133cc:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042133cf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133d3:	48 89 c7             	mov    %rax,%rdi
  80042133d6:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  80042133dd:	00 00 00 
  80042133e0:	ff d0                	callq  *%rax
  80042133e2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042133e6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133ea:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042133ee:	0f b7 c0             	movzwl %ax,%eax
  80042133f1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042133f5:	77 0c                	ja     8004213403 <_dwarf_frame_run_inst+0xcf3>
  80042133f7:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042133fe:	e9 dc 00 00 00       	jmpq   80042134df <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213403:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213407:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421340b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421340f:	48 89 d0             	mov    %rdx,%rax
  8004213412:	48 01 c0             	add    %rax,%rax
  8004213415:	48 01 d0             	add    %rdx,%rax
  8004213418:	48 c1 e0 03          	shl    $0x3,%rax
  800421341c:	48 01 c8             	add    %rcx,%rax
  800421341f:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213422:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213426:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421342a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421342e:	48 89 d0             	mov    %rdx,%rax
  8004213431:	48 01 c0             	add    %rax,%rax
  8004213434:	48 01 d0             	add    %rdx,%rax
  8004213437:	48 c1 e0 03          	shl    $0x3,%rax
  800421343b:	48 01 c8             	add    %rcx,%rax
  800421343e:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213442:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213446:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421344a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421344e:	48 89 d0             	mov    %rdx,%rax
  8004213451:	48 01 c0             	add    %rax,%rax
  8004213454:	48 01 d0             	add    %rdx,%rax
  8004213457:	48 c1 e0 03          	shl    $0x3,%rax
  800421345b:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  800421345f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213463:	48 89 c7             	mov    %rax,%rdi
  8004213466:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  800421346d:	00 00 00 
  8004213470:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213472:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213476:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421347a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421347e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213482:	48 89 d0             	mov    %rdx,%rax
  8004213485:	48 01 c0             	add    %rax,%rax
  8004213488:	48 01 d0             	add    %rdx,%rax
  800421348b:	48 c1 e0 03          	shl    $0x3,%rax
  800421348f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213493:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213497:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800421349b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421349f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134a3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042134a7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134ab:	48 89 d0             	mov    %rdx,%rax
  80042134ae:	48 01 c0             	add    %rax,%rax
  80042134b1:	48 01 d0             	add    %rdx,%rax
  80042134b4:	48 c1 e0 03          	shl    $0x3,%rax
  80042134b8:	48 01 f0             	add    %rsi,%rax
  80042134bb:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042134bf:	48 01 c8             	add    %rcx,%rax
  80042134c2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042134c6:	eb 09                	jmp    80042134d1 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042134c8:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  80042134cf:	eb 0e                	jmp    80042134df <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  80042134d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042134d5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042134d9:	0f 82 b8 f2 ff ff    	jb     8004212797 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  80042134df:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  80042134e2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  80042134e9:	5b                   	pop    %rbx
  80042134ea:	5d                   	pop    %rbp
  80042134eb:	c3                   	retq   

00000080042134ec <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  80042134ec:	55                   	push   %rbp
  80042134ed:	48 89 e5             	mov    %rsp,%rbp
  80042134f0:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  80042134f4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042134f8:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042134fc:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213500:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213504:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004213508:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  800421350c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213511:	75 35                	jne    8004213548 <_dwarf_frame_get_internal_table+0x5c>
  8004213513:	48 b9 f8 af 21 04 80 	movabs $0x800421aff8,%rcx
  800421351a:	00 00 00 
  800421351d:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004213524:	00 00 00 
  8004213527:	be 83 01 00 00       	mov    $0x183,%esi
  800421352c:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  8004213533:	00 00 00 
  8004213536:	b8 00 00 00 00       	mov    $0x0,%eax
  800421353b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213542:	00 00 00 
  8004213545:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004213548:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421354d:	75 35                	jne    8004213584 <_dwarf_frame_get_internal_table+0x98>
  800421354f:	48 b9 07 b0 21 04 80 	movabs $0x800421b007,%rcx
  8004213556:	00 00 00 
  8004213559:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004213560:	00 00 00 
  8004213563:	be 86 01 00 00       	mov    $0x186,%esi
  8004213568:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  800421356f:	00 00 00 
  8004213572:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213577:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421357e:	00 00 00 
  8004213581:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  8004213584:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213588:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421358c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004213590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213594:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213599:	be 00 00 00 00       	mov    $0x0,%esi
  800421359e:	48 89 c7             	mov    %rax,%rdi
  80042135a1:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042135a8:	00 00 00 
  80042135ab:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  80042135ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042135b1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042135b5:	0f b7 d0             	movzwl %ax,%edx
  80042135b8:	48 89 d0             	mov    %rdx,%rax
  80042135bb:	48 01 c0             	add    %rax,%rax
  80042135be:	48 01 d0             	add    %rdx,%rax
  80042135c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042135c5:	48 89 c2             	mov    %rax,%rdx
  80042135c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042135cc:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042135d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042135d5:	48 89 c7             	mov    %rax,%rdi
  80042135d8:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  80042135df:	00 00 00 
  80042135e2:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042135e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042135eb:	eb 2f                	jmp    800421361c <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  80042135ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042135f1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042135f8:	48 63 d0             	movslq %eax,%rdx
  80042135fb:	48 89 d0             	mov    %rdx,%rax
  80042135fe:	48 01 c0             	add    %rax,%rax
  8004213601:	48 01 d0             	add    %rdx,%rax
  8004213604:	48 c1 e0 03          	shl    $0x3,%rax
  8004213608:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421360c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213610:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213614:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213618:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421361c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213620:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213624:	0f b7 c0             	movzwl %ax,%eax
  8004213627:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421362a:	7f c1                	jg     80042135ed <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  800421362c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213630:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213634:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004213638:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421363d:	75 35                	jne    8004213674 <_dwarf_frame_get_internal_table+0x188>
  800421363f:	48 b9 13 b0 21 04 80 	movabs $0x800421b013,%rcx
  8004213646:	00 00 00 
  8004213649:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004213650:	00 00 00 
  8004213653:	be 95 01 00 00       	mov    $0x195,%esi
  8004213658:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  800421365f:	00 00 00 
  8004213662:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213667:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421366e:	00 00 00 
  8004213671:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  8004213674:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213678:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800421367c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213680:	4c 8b 40 38          	mov    0x38(%rax),%r8
  8004213684:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213688:	48 8b 48 70          	mov    0x70(%rax),%rcx
  800421368c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213690:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004213694:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213698:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421369c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  80042136a0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042136a5:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  80042136a9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042136ae:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  80042136b5:	ff ff 
  80042136b7:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  80042136be:	00 
  80042136bf:	48 89 c7             	mov    %rax,%rdi
  80042136c2:	48 b8 10 27 21 04 80 	movabs $0x8004212710,%rax
  80042136c9:	00 00 00 
  80042136cc:	ff d0                	callq  *%rax
  80042136ce:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  80042136d1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042136d5:	74 08                	je     80042136df <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  80042136d7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042136da:	e9 98 00 00 00       	jmpq   8004213777 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  80042136df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136e3:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042136e7:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042136eb:	77 6f                	ja     800421375c <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  80042136ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136f1:	48 8b 78 30          	mov    0x30(%rax),%rdi
  80042136f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042136f9:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042136fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213701:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004213705:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213709:	48 8b 48 58          	mov    0x58(%rax),%rcx
  800421370d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213711:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004213715:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213719:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421371d:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004213721:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004213726:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800421372a:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800421372f:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  8004213733:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004213738:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421373c:	4d 89 d0             	mov    %r10,%r8
  800421373f:	48 89 c7             	mov    %rax,%rdi
  8004213742:	48 b8 10 27 21 04 80 	movabs $0x8004212710,%rax
  8004213749:	00 00 00 
  800421374c:	ff d0                	callq  *%rax
  800421374e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  8004213751:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213755:	74 05                	je     800421375c <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  8004213757:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421375a:	eb 1b                	jmp    8004213777 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  800421375c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213760:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213764:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  8004213767:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421376b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421376f:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004213772:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213777:	c9                   	leaveq 
  8004213778:	c3                   	retq   

0000008004213779 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004213779:	55                   	push   %rbp
  800421377a:	48 89 e5             	mov    %rsp,%rbp
  800421377d:	48 83 ec 50          	sub    $0x50,%rsp
  8004213781:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213785:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004213789:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421378d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004213791:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004213795:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004213799:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421379e:	74 07                	je     80042137a7 <dwarf_get_fde_info_for_all_regs+0x2e>
  80042137a0:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042137a5:	75 0a                	jne    80042137b1 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042137a7:	b8 01 00 00 00       	mov    $0x1,%eax
  80042137ac:	e9 eb 02 00 00       	jmpq   8004213a9c <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  80042137b1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042137b6:	75 35                	jne    80042137ed <dwarf_get_fde_info_for_all_regs+0x74>
  80042137b8:	48 b9 07 b0 21 04 80 	movabs $0x800421b007,%rcx
  80042137bf:	00 00 00 
  80042137c2:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  80042137c9:	00 00 00 
  80042137cc:	be bf 01 00 00       	mov    $0x1bf,%esi
  80042137d1:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  80042137d8:	00 00 00 
  80042137db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042137e0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042137e7:	00 00 00 
  80042137ea:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  80042137ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137f1:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042137f5:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042137f9:	77 19                	ja     8004213814 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  80042137fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137ff:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213803:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213807:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421380b:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  800421380e:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213812:	77 0a                	ja     800421381e <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004213814:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213819:	e9 7e 02 00 00       	jmpq   8004213a9c <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  800421381e:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004213822:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004213826:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421382a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421382e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213832:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213836:	4d 89 c1             	mov    %r8,%r9
  8004213839:	49 89 f8             	mov    %rdi,%r8
  800421383c:	48 89 c7             	mov    %rax,%rdi
  800421383f:	48 b8 ec 34 21 04 80 	movabs $0x80042134ec,%rax
  8004213846:	00 00 00 
  8004213849:	ff d0                	callq  *%rax
  800421384b:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  800421384e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004213852:	74 0a                	je     800421385e <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  8004213854:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213859:	e9 3e 02 00 00       	jmpq   8004213a9c <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  800421385e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213862:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213866:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  800421386a:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  800421386f:	0f 87 b1 00 00 00    	ja     8004213926 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004213875:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004213879:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421387d:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  8004213880:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213884:	48 63 c9             	movslq %ecx,%rcx
  8004213887:	48 83 c1 01          	add    $0x1,%rcx
  800421388b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421388f:	48 01 ca             	add    %rcx,%rdx
  8004213892:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004213894:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421389c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042138a0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042138a4:	48 63 c9             	movslq %ecx,%rcx
  80042138a7:	48 83 c1 01          	add    $0x1,%rcx
  80042138ab:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138af:	48 01 ca             	add    %rcx,%rdx
  80042138b2:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  80042138b5:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042138b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138bd:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042138c1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042138c5:	48 63 c9             	movslq %ecx,%rcx
  80042138c8:	48 83 c1 01          	add    $0x1,%rcx
  80042138cc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138d0:	48 01 ca             	add    %rcx,%rdx
  80042138d3:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  80042138d7:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042138db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138df:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042138e3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042138e7:	48 63 c9             	movslq %ecx,%rcx
  80042138ea:	48 83 c1 01          	add    $0x1,%rcx
  80042138ee:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138f2:	48 01 ca             	add    %rcx,%rdx
  80042138f5:	48 83 c2 08          	add    $0x8,%rdx
  80042138f9:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  80042138fc:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004213900:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004213904:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213908:	48 63 d2             	movslq %edx,%rdx
  800421390b:	48 83 c2 01          	add    $0x1,%rdx
  800421390f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004213913:	48 01 d0             	add    %rdx,%rax
  8004213916:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421391a:	48 8b 00             	mov    (%rax),%rax
  800421391d:	48 89 01             	mov    %rax,(%rcx)
  8004213920:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004213924:	eb 3c                	jmp    8004213962 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004213926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421392a:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  800421392d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213931:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  8004213933:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213937:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  800421393b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421393f:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004213942:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213946:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  800421394a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421394e:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004213952:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213956:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421395a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421395e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213962:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004213969:	e9 fd 00 00 00       	jmpq   8004213a6b <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  800421396e:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004213972:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213975:	75 05                	jne    800421397c <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  8004213977:	e9 eb 00 00 00       	jmpq   8004213a67 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  800421397c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213980:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213984:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213987:	48 63 d0             	movslq %eax,%rdx
  800421398a:	48 89 d0             	mov    %rdx,%rax
  800421398d:	48 01 c0             	add    %rax,%rax
  8004213990:	48 01 d0             	add    %rdx,%rax
  8004213993:	48 c1 e0 03          	shl    $0x3,%rax
  8004213997:	48 01 c8             	add    %rcx,%rax
  800421399a:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  800421399d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042139a1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042139a4:	48 63 c9             	movslq %ecx,%rcx
  80042139a7:	48 83 c1 01          	add    $0x1,%rcx
  80042139ab:	48 c1 e1 04          	shl    $0x4,%rcx
  80042139af:	48 01 ca             	add    %rcx,%rdx
  80042139b2:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  80042139b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139b8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042139bf:	48 63 d0             	movslq %eax,%rdx
  80042139c2:	48 89 d0             	mov    %rdx,%rax
  80042139c5:	48 01 c0             	add    %rax,%rax
  80042139c8:	48 01 d0             	add    %rdx,%rax
  80042139cb:	48 c1 e0 03          	shl    $0x3,%rax
  80042139cf:	48 01 c8             	add    %rcx,%rax
  80042139d2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  80042139d6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042139da:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042139dd:	48 63 c9             	movslq %ecx,%rcx
  80042139e0:	48 83 c1 01          	add    $0x1,%rcx
  80042139e4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042139e8:	48 01 ca             	add    %rcx,%rdx
  80042139eb:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  80042139ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139f2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042139f9:	48 63 d0             	movslq %eax,%rdx
  80042139fc:	48 89 d0             	mov    %rdx,%rax
  80042139ff:	48 01 c0             	add    %rax,%rax
  8004213a02:	48 01 d0             	add    %rdx,%rax
  8004213a05:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a09:	48 01 c8             	add    %rcx,%rax
  8004213a0c:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213a10:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213a14:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a17:	48 63 c9             	movslq %ecx,%rcx
  8004213a1a:	48 83 c1 01          	add    $0x1,%rcx
  8004213a1e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a22:	48 01 ca             	add    %rcx,%rdx
  8004213a25:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004213a29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a2d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a31:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213a34:	48 63 d0             	movslq %eax,%rdx
  8004213a37:	48 89 d0             	mov    %rdx,%rax
  8004213a3a:	48 01 c0             	add    %rax,%rax
  8004213a3d:	48 01 d0             	add    %rdx,%rax
  8004213a40:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a44:	48 01 c8             	add    %rcx,%rax
  8004213a47:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  8004213a4b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213a4f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a52:	48 63 c9             	movslq %ecx,%rcx
  8004213a55:	48 83 c1 01          	add    $0x1,%rcx
  8004213a59:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a5d:	48 01 ca             	add    %rcx,%rdx
  8004213a60:	48 83 c2 08          	add    $0x8,%rdx
  8004213a64:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  8004213a67:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213a6b:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004213a6f:	7f 14                	jg     8004213a85 <dwarf_get_fde_info_for_all_regs+0x30c>
  8004213a71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213a75:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004213a79:	0f b7 c0             	movzwl %ax,%eax
  8004213a7c:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213a7f:	0f 8f e9 fe ff ff    	jg     800421396e <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  8004213a85:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004213a8a:	74 0b                	je     8004213a97 <dwarf_get_fde_info_for_all_regs+0x31e>
  8004213a8c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213a90:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213a94:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004213a97:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213a9c:	c9                   	leaveq 
  8004213a9d:	c3                   	retq   

0000008004213a9e <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004213a9e:	55                   	push   %rbp
  8004213a9f:	48 89 e5             	mov    %rsp,%rbp
  8004213aa2:	48 83 ec 40          	sub    $0x40,%rsp
  8004213aa6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213aaa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213aae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213ab2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213ab6:	44 89 c0             	mov    %r8d,%eax
  8004213ab9:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004213abd:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004213ac0:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004213ac4:	75 0a                	jne    8004213ad0 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004213ac6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213acb:	e9 e6 01 00 00       	jmpq   8004213cb6 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004213ad0:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213ad4:	83 e0 f0             	and    $0xfffffff0,%eax
  8004213ad7:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004213ada:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004213ade:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213ae2:	83 f8 0c             	cmp    $0xc,%eax
  8004213ae5:	0f 87 72 01 00 00    	ja     8004213c5d <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004213aeb:	89 c0                	mov    %eax,%eax
  8004213aed:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213af4:	00 
  8004213af5:	48 b8 20 b0 21 04 80 	movabs $0x800421b020,%rax
  8004213afc:	00 00 00 
  8004213aff:	48 01 d0             	add    %rdx,%rax
  8004213b02:	48 8b 00             	mov    (%rax),%rax
  8004213b05:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004213b07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b0b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b0f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213b13:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213b16:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b1a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b1e:	48 89 cf             	mov    %rcx,%rdi
  8004213b21:	ff d0                	callq  *%rax
  8004213b23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b27:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b2a:	e9 35 01 00 00       	jmpq   8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004213b2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213b37:	48 89 d6             	mov    %rdx,%rsi
  8004213b3a:	48 89 c7             	mov    %rax,%rdi
  8004213b3d:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004213b44:	00 00 00 
  8004213b47:	ff d0                	callq  *%rax
  8004213b49:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b4d:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b50:	e9 0f 01 00 00       	jmpq   8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004213b55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b59:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b5d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b61:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b65:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213b6a:	48 89 cf             	mov    %rcx,%rdi
  8004213b6d:	ff d0                	callq  *%rax
  8004213b6f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b73:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b76:	e9 e9 00 00 00       	jmpq   8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004213b7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b7f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b83:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b87:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b8b:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213b90:	48 89 cf             	mov    %rcx,%rdi
  8004213b93:	ff d0                	callq  *%rax
  8004213b95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b99:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213b9c:	e9 c3 00 00 00       	jmpq   8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004213ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ba5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ba9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213bad:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bb1:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213bb6:	48 89 cf             	mov    %rcx,%rdi
  8004213bb9:	ff d0                	callq  *%rax
  8004213bbb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213bbf:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213bc2:	e9 9d 00 00 00       	jmpq   8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004213bc7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213bcf:	48 89 d6             	mov    %rdx,%rsi
  8004213bd2:	48 89 c7             	mov    %rax,%rdi
  8004213bd5:	48 b8 8e 0a 21 04 80 	movabs $0x8004210a8e,%rax
  8004213bdc:	00 00 00 
  8004213bdf:	ff d0                	callq  *%rax
  8004213be1:	48 89 c2             	mov    %rax,%rdx
  8004213be4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213be8:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213beb:	eb 77                	jmp    8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004213bed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213bf1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213bf5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213bf9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bfd:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213c02:	48 89 cf             	mov    %rcx,%rdi
  8004213c05:	ff d0                	callq  *%rax
  8004213c07:	48 0f bf d0          	movswq %ax,%rdx
  8004213c0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c0f:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c12:	eb 50                	jmp    8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004213c14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c18:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213c1c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213c20:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213c24:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213c29:	48 89 cf             	mov    %rcx,%rdi
  8004213c2c:	ff d0                	callq  *%rax
  8004213c2e:	48 63 d0             	movslq %eax,%rdx
  8004213c31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c35:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c38:	eb 2a                	jmp    8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004213c3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c3e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213c42:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213c46:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213c4a:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213c4f:	48 89 cf             	mov    %rcx,%rdi
  8004213c52:	ff d0                	callq  *%rax
  8004213c54:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213c58:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213c5b:	eb 07                	jmp    8004213c64 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213c5d:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213c62:	eb 52                	jmp    8004213cb6 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004213c64:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004213c68:	75 47                	jne    8004213cb1 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004213c6a:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213c6e:	83 f8 01             	cmp    $0x1,%eax
  8004213c71:	7c 3d                	jl     8004213cb0 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213c73:	83 f8 04             	cmp    $0x4,%eax
  8004213c76:	7e 0a                	jle    8004213c82 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004213c78:	83 e8 09             	sub    $0x9,%eax
  8004213c7b:	83 f8 03             	cmp    $0x3,%eax
  8004213c7e:	77 30                	ja     8004213cb0 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213c80:	eb 17                	jmp    8004213c99 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004213c82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c86:	48 8b 10             	mov    (%rax),%rdx
  8004213c89:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c8d:	48 01 c2             	add    %rax,%rdx
  8004213c90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c94:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213c97:	eb 18                	jmp    8004213cb1 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004213c99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c9d:	48 8b 10             	mov    (%rax),%rdx
  8004213ca0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ca4:	48 01 c2             	add    %rax,%rdx
  8004213ca7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213cab:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213cae:	eb 01                	jmp    8004213cb1 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004213cb0:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004213cb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213cb6:	c9                   	leaveq 
  8004213cb7:	c3                   	retq   

0000008004213cb8 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004213cb8:	55                   	push   %rbp
  8004213cb9:	48 89 e5             	mov    %rsp,%rbp
  8004213cbc:	48 83 ec 50          	sub    $0x50,%rsp
  8004213cc0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213cc4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213cc8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004213ccc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213cd0:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213cd4:	48 85 c0             	test   %rax,%rax
  8004213cd7:	74 0f                	je     8004213ce8 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004213cd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213cdd:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213ce1:	0f b6 00             	movzbl (%rax),%eax
  8004213ce4:	3c 7a                	cmp    $0x7a,%al
  8004213ce6:	74 35                	je     8004213d1d <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004213ce8:	48 b9 88 b0 21 04 80 	movabs $0x800421b088,%rcx
  8004213cef:	00 00 00 
  8004213cf2:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004213cf9:	00 00 00 
  8004213cfc:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004213d01:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  8004213d08:	00 00 00 
  8004213d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213d10:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213d17:	00 00 00 
  8004213d1a:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004213d1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d21:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213d25:	48 83 c0 01          	add    $0x1,%rax
  8004213d29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004213d2d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d31:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213d35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004213d39:	e9 af 00 00 00       	jmpq   8004213ded <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004213d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213d42:	0f b6 00             	movzbl (%rax),%eax
  8004213d45:	0f b6 c0             	movzbl %al,%eax
  8004213d48:	83 f8 50             	cmp    $0x50,%eax
  8004213d4b:	74 18                	je     8004213d65 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004213d4d:	83 f8 52             	cmp    $0x52,%eax
  8004213d50:	74 77                	je     8004213dc9 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004213d52:	83 f8 4c             	cmp    $0x4c,%eax
  8004213d55:	0f 85 86 00 00 00    	jne    8004213de1 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004213d5b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004213d60:	e9 83 00 00 00       	jmpq   8004213de8 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004213d65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213d69:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213d6d:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213d71:	0f b6 00             	movzbl (%rax),%eax
  8004213d74:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004213d77:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004213d7e:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004213d7f:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004213d84:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004213d88:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213d8c:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004213d90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213d94:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004213d98:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004213d9c:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004213da2:	48 89 c7             	mov    %rax,%rdi
  8004213da5:	48 b8 9e 3a 21 04 80 	movabs $0x8004213a9e,%rax
  8004213dac:	00 00 00 
  8004213daf:	ff d0                	callq  *%rax
  8004213db1:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004213db4:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004213db8:	74 05                	je     8004213dbf <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004213dba:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004213dbd:	eb 42                	jmp    8004213e01 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004213dbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213dc3:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004213dc7:	eb 1f                	jmp    8004213de8 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004213dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213dcd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213dd1:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213dd5:	0f b6 10             	movzbl (%rax),%edx
  8004213dd8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ddc:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004213ddf:	eb 07                	jmp    8004213de8 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213de1:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213de6:	eb 19                	jmp    8004213e01 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004213de8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004213ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213df1:	0f b6 00             	movzbl (%rax),%eax
  8004213df4:	84 c0                	test   %al,%al
  8004213df6:	0f 85 42 ff ff ff    	jne    8004213d3e <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004213dfc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213e01:	c9                   	leaveq 
  8004213e02:	c3                   	retq   

0000008004213e03 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004213e03:	55                   	push   %rbp
  8004213e04:	48 89 e5             	mov    %rsp,%rbp
  8004213e07:	48 83 ec 60          	sub    $0x60,%rsp
  8004213e0b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213e0f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213e13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213e17:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213e1b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004213e1f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213e24:	75 35                	jne    8004213e5b <_dwarf_frame_set_cie+0x58>
  8004213e26:	48 b9 bd b0 21 04 80 	movabs $0x800421b0bd,%rcx
  8004213e2d:	00 00 00 
  8004213e30:	48 ba 07 af 21 04 80 	movabs $0x800421af07,%rdx
  8004213e37:	00 00 00 
  8004213e3a:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004213e3f:	48 bf 1c af 21 04 80 	movabs $0x800421af1c,%rdi
  8004213e46:	00 00 00 
  8004213e49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213e4e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213e55:	00 00 00 
  8004213e58:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004213e5b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213e5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004213e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e67:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e6b:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004213e6e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213e72:	48 8b 10             	mov    (%rax),%rdx
  8004213e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e79:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004213e7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e81:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e89:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213e8d:	48 89 d1             	mov    %rdx,%rcx
  8004213e90:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213e94:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213e99:	48 89 cf             	mov    %rcx,%rdi
  8004213e9c:	ff d0                	callq  *%rax
  8004213e9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004213ea2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213ea7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004213eab:	75 2e                	jne    8004213edb <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004213ead:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004213eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213eb8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ebc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213ec0:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213ec4:	48 89 d1             	mov    %rdx,%rcx
  8004213ec7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213ecb:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213ed0:	48 89 cf             	mov    %rcx,%rdi
  8004213ed3:	ff d0                	callq  *%rax
  8004213ed5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213ed9:	eb 07                	jmp    8004213ee2 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004213edb:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004213ee2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213ee6:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004213eea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213eee:	48 8b 00             	mov    (%rax),%rax
  8004213ef1:	48 29 c2             	sub    %rax,%rdx
  8004213ef4:	48 89 d0             	mov    %rdx,%rax
  8004213ef7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004213efb:	73 0a                	jae    8004213f07 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004213efd:	b8 12 00 00 00       	mov    $0x12,%eax
  8004213f02:	e9 5d 03 00 00       	jmpq   8004214264 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004213f07:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f0b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f0f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213f13:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213f17:	48 89 d1             	mov    %rdx,%rcx
  8004213f1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004213f1d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213f21:	48 89 cf             	mov    %rcx,%rdi
  8004213f24:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004213f26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004213f2e:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004213f32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f36:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f3a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213f3e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213f42:	48 89 d1             	mov    %rdx,%rcx
  8004213f45:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004213f49:	ba 01 00 00 00       	mov    $0x1,%edx
  8004213f4e:	48 89 cf             	mov    %rcx,%rdi
  8004213f51:	ff d0                	callq  *%rax
  8004213f53:	89 c2                	mov    %eax,%edx
  8004213f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f59:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213f5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f61:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213f65:	66 83 f8 01          	cmp    $0x1,%ax
  8004213f69:	74 26                	je     8004213f91 <_dwarf_frame_set_cie+0x18e>
  8004213f6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f6f:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213f73:	66 83 f8 03          	cmp    $0x3,%ax
  8004213f77:	74 18                	je     8004213f91 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004213f79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f7d:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213f81:	66 83 f8 04          	cmp    $0x4,%ax
  8004213f85:	74 0a                	je     8004213f91 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004213f87:	b8 16 00 00 00       	mov    $0x16,%eax
  8004213f8c:	e9 d3 02 00 00       	jmpq   8004214264 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004213f91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f95:	48 8b 10             	mov    (%rax),%rdx
  8004213f98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f9c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213fa0:	48 01 d0             	add    %rdx,%rax
  8004213fa3:	48 89 c2             	mov    %rax,%rdx
  8004213fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213faa:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004213fae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213fb2:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213fb6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004213fba:	90                   	nop
  8004213fbb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213fbf:	48 8b 00             	mov    (%rax),%rax
  8004213fc2:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004213fc6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004213fca:	48 89 0a             	mov    %rcx,(%rdx)
  8004213fcd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213fd1:	48 01 d0             	add    %rdx,%rax
  8004213fd4:	0f b6 00             	movzbl (%rax),%eax
  8004213fd7:	84 c0                	test   %al,%al
  8004213fd9:	75 e0                	jne    8004213fbb <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004213fdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fdf:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213fe3:	0f b6 00             	movzbl (%rax),%eax
  8004213fe6:	84 c0                	test   %al,%al
  8004213fe8:	74 48                	je     8004214032 <_dwarf_frame_set_cie+0x22f>
  8004213fea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fee:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213ff2:	0f b6 00             	movzbl (%rax),%eax
  8004213ff5:	3c 7a                	cmp    $0x7a,%al
  8004213ff7:	74 39                	je     8004214032 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004213ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ffd:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214001:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214005:	75 07                	jne    800421400e <_dwarf_frame_set_cie+0x20b>
  8004214007:	b8 04 00 00 00       	mov    $0x4,%eax
  800421400c:	eb 05                	jmp    8004214013 <_dwarf_frame_set_cie+0x210>
  800421400e:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214013:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214016:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421401a:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800421401e:	48 01 c2             	add    %rax,%rdx
  8004214021:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214025:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214028:	b8 00 00 00 00       	mov    $0x0,%eax
  800421402d:	e9 32 02 00 00       	jmpq   8004214264 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214032:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214036:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421403a:	48 be c5 b0 21 04 80 	movabs $0x800421b0c5,%rsi
  8004214041:	00 00 00 
  8004214044:	48 89 c7             	mov    %rax,%rdi
  8004214047:	48 b8 45 04 21 04 80 	movabs $0x8004210445,%rax
  800421404e:	00 00 00 
  8004214051:	ff d0                	callq  *%rax
  8004214053:	48 85 c0             	test   %rax,%rax
  8004214056:	74 28                	je     8004214080 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214058:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421405c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214060:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214064:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214067:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421406b:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421406f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214073:	48 89 cf             	mov    %rcx,%rdi
  8004214076:	ff d0                	callq  *%rax
  8004214078:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421407c:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214080:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214084:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214088:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421408c:	48 89 d6             	mov    %rdx,%rsi
  800421408f:	48 89 c7             	mov    %rax,%rdi
  8004214092:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004214099:	00 00 00 
  800421409c:	ff d0                	callq  *%rax
  800421409e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140a2:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042140a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140aa:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042140ae:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042140b2:	48 89 d6             	mov    %rdx,%rsi
  80042140b5:	48 89 c7             	mov    %rax,%rdi
  80042140b8:	48 b8 8e 0a 21 04 80 	movabs $0x8004210a8e,%rax
  80042140bf:	00 00 00 
  80042140c2:	ff d0                	callq  *%rax
  80042140c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140c8:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  80042140cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140d0:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042140d4:	66 83 f8 01          	cmp    $0x1,%ax
  80042140d8:	75 2b                	jne    8004214105 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  80042140da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140de:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042140e2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042140e6:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042140ea:	48 89 d1             	mov    %rdx,%rcx
  80042140ed:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042140f1:	ba 01 00 00 00       	mov    $0x1,%edx
  80042140f6:	48 89 cf             	mov    %rcx,%rdi
  80042140f9:	ff d0                	callq  *%rax
  80042140fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042140ff:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214103:	eb 26                	jmp    800421412b <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214105:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214109:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421410d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214111:	48 89 d6             	mov    %rdx,%rsi
  8004214114:	48 89 c7             	mov    %rax,%rdi
  8004214117:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  800421411e:	00 00 00 
  8004214121:	ff d0                	callq  *%rax
  8004214123:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214127:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  800421412b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421412f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214133:	0f b6 00             	movzbl (%rax),%eax
  8004214136:	3c 7a                	cmp    $0x7a,%al
  8004214138:	0f 85 93 00 00 00    	jne    80042141d1 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421413e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214142:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214146:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421414a:	48 89 d6             	mov    %rdx,%rsi
  800421414d:	48 89 c7             	mov    %rax,%rdi
  8004214150:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004214157:	00 00 00 
  800421415a:	ff d0                	callq  *%rax
  800421415c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214160:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214164:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214168:	48 8b 10             	mov    (%rax),%rdx
  800421416b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421416f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214173:	48 01 d0             	add    %rdx,%rax
  8004214176:	48 89 c2             	mov    %rax,%rdx
  8004214179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421417d:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214181:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214185:	48 8b 10             	mov    (%rax),%rdx
  8004214188:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421418c:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214190:	48 01 c2             	add    %rax,%rdx
  8004214193:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214197:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  800421419a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421419e:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  80042141a2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042141a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042141aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141ae:	48 89 ce             	mov    %rcx,%rsi
  80042141b1:	48 89 c7             	mov    %rax,%rdi
  80042141b4:	48 b8 b8 3c 21 04 80 	movabs $0x8004213cb8,%rax
  80042141bb:	00 00 00 
  80042141be:	ff d0                	callq  *%rax
  80042141c0:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  80042141c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042141c7:	74 08                	je     80042141d1 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  80042141c9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042141cc:	e9 93 00 00 00       	jmpq   8004214264 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042141d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141d5:	48 8b 10             	mov    (%rax),%rdx
  80042141d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141dc:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042141e0:	48 01 d0             	add    %rdx,%rax
  80042141e3:	48 89 c2             	mov    %rax,%rdx
  80042141e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141ea:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  80042141ee:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042141f2:	75 2a                	jne    800421421e <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  80042141f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141f8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042141fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214200:	48 01 c2             	add    %rax,%rdx
  8004214203:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214207:	48 8b 00             	mov    (%rax),%rax
  800421420a:	48 29 c2             	sub    %rax,%rdx
  800421420d:	48 89 d0             	mov    %rdx,%rax
  8004214210:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214218:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421421c:	eb 28                	jmp    8004214246 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  800421421e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214222:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421422a:	48 01 c2             	add    %rax,%rdx
  800421422d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214231:	48 8b 00             	mov    (%rax),%rax
  8004214234:	48 29 c2             	sub    %rax,%rdx
  8004214237:	48 89 d0             	mov    %rdx,%rax
  800421423a:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421423e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214242:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214246:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421424a:	48 8b 10             	mov    (%rax),%rdx
  800421424d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214251:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214255:	48 01 c2             	add    %rax,%rdx
  8004214258:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421425c:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800421425f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214264:	c9                   	leaveq 
  8004214265:	c3                   	retq   

0000008004214266 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214266:	55                   	push   %rbp
  8004214267:	48 89 e5             	mov    %rsp,%rbp
  800421426a:	48 83 ec 70          	sub    $0x70,%rsp
  800421426e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214272:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214276:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421427a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421427e:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214282:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214286:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421428a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  800421428e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214292:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214296:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214299:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421429d:	48 8b 10             	mov    (%rax),%rdx
  80042142a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142a4:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042142a8:	48 01 d0             	add    %rdx,%rax
  80042142ab:	48 89 c2             	mov    %rax,%rdx
  80042142ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142b2:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  80042142b6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042142ba:	48 8b 10             	mov    (%rax),%rdx
  80042142bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142c1:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042142c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042142cd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042142d1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042142d5:	48 89 d1             	mov    %rdx,%rcx
  80042142d8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042142dc:	ba 04 00 00 00       	mov    $0x4,%edx
  80042142e1:	48 89 cf             	mov    %rcx,%rdi
  80042142e4:	ff d0                	callq  *%rax
  80042142e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  80042142ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042142ef:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042142f3:	75 2e                	jne    8004214323 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  80042142f5:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042142fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214300:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214304:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214308:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421430c:	48 89 d1             	mov    %rdx,%rcx
  800421430f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214313:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214318:	48 89 cf             	mov    %rcx,%rdi
  800421431b:	ff d0                	callq  *%rax
  800421431d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214321:	eb 07                	jmp    800421432a <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214323:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800421432a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421432e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214332:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214336:	48 8b 00             	mov    (%rax),%rax
  8004214339:	48 29 c2             	sub    %rax,%rdx
  800421433c:	48 89 d0             	mov    %rdx,%rax
  800421433f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214343:	73 0a                	jae    800421434f <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214345:	b8 12 00 00 00       	mov    $0x12,%eax
  800421434a:	e9 ca 02 00 00       	jmpq   8004214619 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  800421434f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214353:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214357:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  800421435b:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421435f:	74 5e                	je     80042143bf <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214361:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214365:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214369:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421436d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214371:	48 89 d1             	mov    %rdx,%rcx
  8004214374:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214378:	ba 04 00 00 00       	mov    $0x4,%edx
  800421437d:	48 89 cf             	mov    %rcx,%rdi
  8004214380:	ff d0                	callq  *%rax
  8004214382:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214386:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  800421438a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421438e:	48 8b 10             	mov    (%rax),%rdx
  8004214391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214395:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214399:	48 29 c2             	sub    %rax,%rdx
  800421439c:	48 89 d0             	mov    %rdx,%rax
  800421439f:	48 83 e8 04          	sub    $0x4,%rax
  80042143a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  80042143a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143ab:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042143af:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042143b3:	75 3d                	jne    80042143f2 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  80042143b5:	b8 13 00 00 00       	mov    $0x13,%eax
  80042143ba:	e9 5a 02 00 00       	jmpq   8004214619 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  80042143bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143c3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042143c7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042143cb:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042143cf:	48 89 d1             	mov    %rdx,%rcx
  80042143d2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042143d5:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042143d9:	48 89 cf             	mov    %rcx,%rdi
  80042143dc:	ff d0                	callq  *%rax
  80042143de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042143e2:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  80042143e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143ea:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042143ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  80042143f2:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042143f6:	0f 84 c9 00 00 00    	je     80042144c5 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042143fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214400:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214404:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214408:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421440b:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800421440f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214413:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214417:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421441b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421441f:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214423:	48 89 c2             	mov    %rax,%rdx
  8004214426:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421442a:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800421442e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214432:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214436:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421443a:	48 89 c7             	mov    %rax,%rdi
  800421443d:	48 b8 9e 3a 21 04 80 	movabs $0x8004213a9e,%rax
  8004214444:	00 00 00 
  8004214447:	ff d0                	callq  *%rax
  8004214449:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  800421444c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214450:	74 08                	je     800421445a <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214452:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214455:	e9 bf 01 00 00       	jmpq   8004214619 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  800421445a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421445e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214462:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214466:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421446a:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421446e:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214472:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214476:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421447a:	48 89 c2             	mov    %rax,%rdx
  800421447d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214481:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214485:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214489:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421448d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214491:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214497:	48 89 c7             	mov    %rax,%rdi
  800421449a:	48 b8 9e 3a 21 04 80 	movabs $0x8004213a9e,%rax
  80042144a1:	00 00 00 
  80042144a4:	ff d0                	callq  *%rax
  80042144a6:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  80042144a9:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042144ad:	74 08                	je     80042144b7 <_dwarf_frame_set_fde+0x251>
			return (ret);
  80042144af:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042144b2:	e9 62 01 00 00       	jmpq   8004214619 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  80042144b7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042144bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144bf:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042144c3:	eb 50                	jmp    8004214515 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042144c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144cd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042144d1:	8b 52 28             	mov    0x28(%rdx),%edx
  80042144d4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042144d8:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042144dc:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042144e0:	48 89 cf             	mov    %rcx,%rdi
  80042144e3:	ff d0                	callq  *%rax
  80042144e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042144e9:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042144ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144f1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144f5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042144f9:	8b 52 28             	mov    0x28(%rdx),%edx
  80042144fc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214500:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214504:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214508:	48 89 cf             	mov    %rcx,%rdi
  800421450b:	ff d0                	callq  *%rax
  800421450d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214511:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004214515:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214519:	74 6b                	je     8004214586 <_dwarf_frame_set_fde+0x320>
  800421451b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421451f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214523:	0f b6 00             	movzbl (%rax),%eax
  8004214526:	3c 7a                	cmp    $0x7a,%al
  8004214528:	75 5c                	jne    8004214586 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421452a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421452e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214532:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004214536:	48 89 d6             	mov    %rdx,%rsi
  8004214539:	48 89 c7             	mov    %rax,%rdi
  800421453c:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004214543:	00 00 00 
  8004214546:	ff d0                	callq  *%rax
  8004214548:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421454c:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214550:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214554:	48 8b 10             	mov    (%rax),%rdx
  8004214557:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421455b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421455f:	48 01 d0             	add    %rdx,%rax
  8004214562:	48 89 c2             	mov    %rax,%rdx
  8004214565:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214569:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  800421456d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214571:	48 8b 10             	mov    (%rax),%rdx
  8004214574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214578:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421457c:	48 01 c2             	add    %rax,%rdx
  800421457f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214583:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214586:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421458a:	48 8b 10             	mov    (%rax),%rdx
  800421458d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214591:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214595:	48 01 d0             	add    %rdx,%rax
  8004214598:	48 89 c2             	mov    %rax,%rdx
  800421459b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421459f:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  80042145a3:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042145a7:	75 2a                	jne    80042145d3 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  80042145a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145ad:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042145b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042145b5:	48 01 c2             	add    %rax,%rdx
  80042145b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042145bc:	48 8b 00             	mov    (%rax),%rax
  80042145bf:	48 29 c2             	sub    %rax,%rdx
  80042145c2:	48 89 d0             	mov    %rdx,%rax
  80042145c5:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042145c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145cd:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042145d1:	eb 28                	jmp    80042145fb <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  80042145d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145d7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042145db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042145df:	48 01 c2             	add    %rax,%rdx
  80042145e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042145e6:	48 8b 00             	mov    (%rax),%rax
  80042145e9:	48 29 c2             	sub    %rax,%rdx
  80042145ec:	48 89 d0             	mov    %rdx,%rax
  80042145ef:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042145f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145f7:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  80042145fb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042145ff:	48 8b 10             	mov    (%rax),%rdx
  8004214602:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214606:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421460a:	48 01 c2             	add    %rax,%rdx
  800421460d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214611:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214614:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214619:	c9                   	leaveq 
  800421461a:	c3                   	retq   

000000800421461b <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421461b:	55                   	push   %rbp
  800421461c:	48 89 e5             	mov    %rsp,%rbp
  800421461f:	48 83 ec 20          	sub    $0x20,%rsp
  8004214623:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214627:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  800421462b:	48 b8 a0 d6 49 04 80 	movabs $0x800449d6a0,%rax
  8004214632:	00 00 00 
  8004214635:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004214639:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421463d:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214641:	48 85 c0             	test   %rax,%rax
  8004214644:	74 07                	je     800421464d <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004214646:	b8 00 00 00 00       	mov    $0x0,%eax
  800421464b:	eb 33                	jmp    8004214680 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  800421464d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214651:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  8004214655:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214659:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  800421465d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214661:	48 b9 20 be 69 04 80 	movabs $0x800469be20,%rcx
  8004214668:	00 00 00 
  800421466b:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  800421466f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214673:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214677:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  800421467b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214680:	c9                   	leaveq 
  8004214681:	c3                   	retq   

0000008004214682 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  8004214682:	55                   	push   %rbp
  8004214683:	48 89 e5             	mov    %rsp,%rbp
  8004214686:	48 83 ec 60          	sub    $0x60,%rsp
  800421468a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421468e:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004214691:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214695:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004214699:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  80042146a0:	00 00 00 
  80042146a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  80042146a7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  80042146ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146b2:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042146b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  80042146ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146be:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042146c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042146c6:	48 39 c2             	cmp    %rax,%rdx
  80042146c9:	0f 86 fe 01 00 00    	jbe    80042148cd <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  80042146cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042146d3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  80042146d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146db:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146df:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042146e3:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042146e7:	48 89 d1             	mov    %rdx,%rcx
  80042146ea:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042146ee:	ba 04 00 00 00       	mov    $0x4,%edx
  80042146f3:	48 89 cf             	mov    %rcx,%rdi
  80042146f6:	ff d0                	callq  *%rax
  80042146f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  80042146fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214701:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214705:	75 2e                	jne    8004214735 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004214707:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  800421470e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214712:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214716:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421471a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421471e:	48 89 d1             	mov    %rdx,%rcx
  8004214721:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004214725:	ba 08 00 00 00       	mov    $0x8,%edx
  800421472a:	48 89 cf             	mov    %rcx,%rdi
  800421472d:	ff d0                	callq  *%rax
  800421472f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214733:	eb 07                	jmp    800421473c <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  8004214735:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  800421473c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214740:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214744:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214748:	48 29 c2             	sub    %rax,%rdx
  800421474b:	48 89 d0             	mov    %rdx,%rax
  800421474e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214752:	72 0d                	jb     8004214761 <_dwarf_get_next_fde+0xdf>
  8004214754:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214759:	75 10                	jne    800421476b <_dwarf_get_next_fde+0xe9>
  800421475b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421475f:	75 0a                	jne    800421476b <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214761:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214766:	e9 67 01 00 00       	jmpq   80042148d2 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  800421476b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421476f:	74 11                	je     8004214782 <_dwarf_get_next_fde+0x100>
  8004214771:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214776:	75 0a                	jne    8004214782 <_dwarf_get_next_fde+0x100>
			return(-1);
  8004214778:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421477d:	e9 50 01 00 00       	jmpq   80042148d2 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  8004214782:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214786:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421478a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421478e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214792:	48 89 d1             	mov    %rdx,%rcx
  8004214795:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214798:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421479c:	48 89 cf             	mov    %rcx,%rdi
  800421479f:	ff d0                	callq  *%rax
  80042147a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  80042147a5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042147a9:	74 79                	je     8004214824 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  80042147ab:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042147b0:	75 32                	jne    80042147e4 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042147b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042147b6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042147ba:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042147be:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042147c2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042147c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147ca:	49 89 f8             	mov    %rdi,%r8
  80042147cd:	48 89 c7             	mov    %rax,%rdi
  80042147d0:	48 b8 03 3e 21 04 80 	movabs $0x8004213e03,%rax
  80042147d7:	00 00 00 
  80042147da:	ff d0                	callq  *%rax
  80042147dc:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042147df:	e9 c8 00 00 00       	jmpq   80042148ac <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  80042147e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042147e8:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042147ec:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042147f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042147f4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042147f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147fc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214800:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214804:	4d 89 c1             	mov    %r8,%r9
  8004214807:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421480d:	48 89 c7             	mov    %rax,%rdi
  8004214810:	48 b8 66 42 21 04 80 	movabs $0x8004214266,%rax
  8004214817:	00 00 00 
  800421481a:	ff d0                	callq  *%rax
  800421481c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421481f:	e9 88 00 00 00       	jmpq   80042148ac <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004214824:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214828:	75 0b                	jne    8004214835 <_dwarf_get_next_fde+0x1b3>
  800421482a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421482f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004214833:	74 0d                	je     8004214842 <_dwarf_get_next_fde+0x1c0>
  8004214835:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004214839:	75 36                	jne    8004214871 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  800421483b:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004214840:	75 2f                	jne    8004214871 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214842:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214846:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421484a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421484e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214852:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214856:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421485a:	49 89 f8             	mov    %rdi,%r8
  800421485d:	48 89 c7             	mov    %rax,%rdi
  8004214860:	48 b8 03 3e 21 04 80 	movabs $0x8004213e03,%rax
  8004214867:	00 00 00 
  800421486a:	ff d0                	callq  *%rax
  800421486c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421486f:	eb 3b                	jmp    80042148ac <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004214871:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214875:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004214879:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800421487d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214881:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214885:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214889:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421488d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214891:	4d 89 c1             	mov    %r8,%r9
  8004214894:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421489a:	48 89 c7             	mov    %rax,%rdi
  800421489d:	48 b8 66 42 21 04 80 	movabs $0x8004214266,%rax
  80042148a4:	00 00 00 
  80042148a7:	ff d0                	callq  *%rax
  80042148a9:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  80042148ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042148b0:	74 07                	je     80042148b9 <_dwarf_get_next_fde+0x237>
			return(-1);
  80042148b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042148b7:	eb 19                	jmp    80042148d2 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  80042148b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042148bd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  80042148c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042148c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148c9:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  80042148cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042148d2:	c9                   	leaveq 
  80042148d3:	c3                   	retq   

00000080042148d4 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  80042148d4:	55                   	push   %rbp
  80042148d5:	48 89 e5             	mov    %rsp,%rbp
  80042148d8:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042148dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042148e0:	89 f0                	mov    %esi,%eax
  80042148e2:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  80042148e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148ea:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042148ee:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  80042148f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148f6:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  80042148fa:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  80042148fe:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004214902:	c9                   	leaveq 
  8004214903:	c3                   	retq   

0000008004214904 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004214904:	55                   	push   %rbp
  8004214905:	48 89 e5             	mov    %rsp,%rbp
  8004214908:	48 83 ec 10          	sub    $0x10,%rsp
  800421490c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004214910:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004214914:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214919:	75 0a                	jne    8004214925 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421491b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214920:	e9 85 00 00 00       	jmpq   80042149aa <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004214925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214929:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421492d:	48 85 c0             	test   %rax,%rax
  8004214930:	75 25                	jne    8004214957 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004214932:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421493a:	48 89 d6             	mov    %rdx,%rsi
  800421493d:	48 89 c7             	mov    %rax,%rdi
  8004214940:	48 b8 1b 46 21 04 80 	movabs $0x800421461b,%rax
  8004214947:	00 00 00 
  800421494a:	ff d0                	callq  *%rax
  800421494c:	85 c0                	test   %eax,%eax
  800421494e:	74 07                	je     8004214957 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004214950:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214955:	eb 53                	jmp    80042149aa <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  8004214957:	48 bf a0 c6 22 04 80 	movabs $0x800422c6a0,%rdi
  800421495e:	00 00 00 
  8004214961:	48 b8 d0 23 21 04 80 	movabs $0x80042123d0,%rax
  8004214968:	00 00 00 
  800421496b:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  800421496d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214971:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004214978:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004214979:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214980:	00 00 00 
  8004214983:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214987:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421498b:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  800421498f:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214996:	00 00 00 
  8004214999:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421499d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042149a1:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  80042149a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042149aa:	c9                   	leaveq 
  80042149ab:	c3                   	retq   

00000080042149ac <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042149ac:	55                   	push   %rbp
  80042149ad:	48 89 e5             	mov    %rsp,%rbp
  80042149b0:	53                   	push   %rbx
  80042149b1:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  80042149b8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  80042149bc:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  80042149c0:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  80042149c7:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  80042149ce:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  80042149d5:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  80042149dc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042149e0:	48 83 c0 48          	add    $0x48,%rax
  80042149e4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  80042149e8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042149ef:	00 
  80042149f0:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  80042149f7:	00 
  80042149f8:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  80042149ff:	00 
  8004214a00:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214a07:	00 
  8004214a08:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214a0c:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214a10:	0f b6 c0             	movzbl %al,%eax
  8004214a13:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214a16:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214a1d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214a24:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214a2b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214a32:	e9 0a 05 00 00       	jmpq   8004214f41 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  8004214a37:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a3e:	0f b6 00             	movzbl (%rax),%eax
  8004214a41:	84 c0                	test   %al,%al
  8004214a43:	0f 85 78 01 00 00    	jne    8004214bc1 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004214a49:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a50:	48 83 c0 01          	add    $0x1,%rax
  8004214a54:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004214a5b:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214a62:	48 89 c7             	mov    %rax,%rdi
  8004214a65:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214a6c:	00 00 00 
  8004214a6f:	ff d0                	callq  *%rax
  8004214a71:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004214a75:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214a7c:	0f b6 00             	movzbl (%rax),%eax
  8004214a7f:	0f b6 c0             	movzbl %al,%eax
  8004214a82:	83 f8 02             	cmp    $0x2,%eax
  8004214a85:	74 7a                	je     8004214b01 <_dwarf_lineno_run_program+0x155>
  8004214a87:	83 f8 03             	cmp    $0x3,%eax
  8004214a8a:	0f 84 b3 00 00 00    	je     8004214b43 <_dwarf_lineno_run_program+0x197>
  8004214a90:	83 f8 01             	cmp    $0x1,%eax
  8004214a93:	0f 85 09 01 00 00    	jne    8004214ba2 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004214a99:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214aa0:	48 83 c0 01          	add    $0x1,%rax
  8004214aa4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004214aab:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004214ab2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004214ab9:	00 
  8004214aba:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214ac1:	00 
  8004214ac2:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004214ac9:	00 
  8004214aca:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214ad1:	00 
  8004214ad2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ad6:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214ada:	0f b6 c0             	movzbl %al,%eax
  8004214add:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214ae0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214ae7:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214aee:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214af5:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214afc:	e9 bb 00 00 00       	jmpq   8004214bbc <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004214b01:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b08:	48 83 c0 01          	add    $0x1,%rax
  8004214b0c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004214b13:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214b1a:	00 00 00 
  8004214b1d:	48 8b 00             	mov    (%rax),%rax
  8004214b20:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214b24:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004214b28:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004214b2c:	0f b6 ca             	movzbl %dl,%ecx
  8004214b2f:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214b36:	89 ce                	mov    %ecx,%esi
  8004214b38:	48 89 d7             	mov    %rdx,%rdi
  8004214b3b:	ff d0                	callq  *%rax
  8004214b3d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004214b41:	eb 79                	jmp    8004214bbc <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004214b43:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214b4a:	48 83 c0 01          	add    $0x1,%rax
  8004214b4e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004214b55:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214b5c:	00 00 00 
  8004214b5f:	48 8b 08             	mov    (%rax),%rcx
  8004214b62:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004214b69:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004214b70:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214b74:	49 89 c8             	mov    %rcx,%r8
  8004214b77:	48 89 d1             	mov    %rdx,%rcx
  8004214b7a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004214b7f:	48 89 c7             	mov    %rax,%rdi
  8004214b82:	48 b8 64 4f 21 04 80 	movabs $0x8004214f64,%rax
  8004214b89:	00 00 00 
  8004214b8c:	ff d0                	callq  *%rax
  8004214b8e:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004214b91:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004214b95:	74 09                	je     8004214ba0 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004214b97:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004214b98:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004214b9b:	e9 ba 03 00 00       	jmpq   8004214f5a <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004214ba0:	eb 1a                	jmp    8004214bbc <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004214ba2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004214ba9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214bad:	48 01 d0             	add    %rdx,%rax
  8004214bb0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004214bb7:	e9 85 03 00 00       	jmpq   8004214f41 <_dwarf_lineno_run_program+0x595>
  8004214bbc:	e9 80 03 00 00       	jmpq   8004214f41 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004214bc1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214bc8:	0f b6 00             	movzbl (%rax),%eax
  8004214bcb:	84 c0                	test   %al,%al
  8004214bcd:	0f 84 3c 02 00 00    	je     8004214e0f <_dwarf_lineno_run_program+0x463>
  8004214bd3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214bda:	0f b6 10             	movzbl (%rax),%edx
  8004214bdd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214be1:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214be5:	38 c2                	cmp    %al,%dl
  8004214be7:	0f 83 22 02 00 00    	jae    8004214e0f <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004214bed:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214bf4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214bf8:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214bff:	0f b6 00             	movzbl (%rax),%eax
  8004214c02:	0f b6 c0             	movzbl %al,%eax
  8004214c05:	83 f8 0c             	cmp    $0xc,%eax
  8004214c08:	0f 87 fb 01 00 00    	ja     8004214e09 <_dwarf_lineno_run_program+0x45d>
  8004214c0e:	89 c0                	mov    %eax,%eax
  8004214c10:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214c17:	00 
  8004214c18:	48 b8 c8 b0 21 04 80 	movabs $0x800421b0c8,%rax
  8004214c1f:	00 00 00 
  8004214c22:	48 01 d0             	add    %rdx,%rax
  8004214c25:	48 8b 00             	mov    (%rax),%rax
  8004214c28:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004214c2a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214c31:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214c35:	73 0a                	jae    8004214c41 <_dwarf_lineno_run_program+0x295>
  8004214c37:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214c3c:	e9 19 03 00 00       	jmpq   8004214f5a <_dwarf_lineno_run_program+0x5ae>
  8004214c41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c49:	48 89 10             	mov    %rdx,(%rax)
  8004214c4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c50:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214c57:	00 
  8004214c58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214c60:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214c64:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c68:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214c6c:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214c70:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214c74:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c78:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214c7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c80:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214c83:	89 50 28             	mov    %edx,0x28(%rax)
  8004214c86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c8a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214c8d:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214c90:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c94:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214c97:	89 50 30             	mov    %edx,0x30(%rax)
  8004214c9a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214c9e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214ca5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214ca9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214cad:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004214cb4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004214cbb:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004214cc2:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214cc9:	e9 3c 01 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214cce:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214cd5:	48 89 c7             	mov    %rax,%rdi
  8004214cd8:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214cdf:	00 00 00 
  8004214ce2:	ff d0                	callq  *%rax
					li->li_minlen;
  8004214ce4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004214ce8:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214cec:	0f b6 d2             	movzbl %dl,%edx
  8004214cef:	48 0f af c2          	imul   %rdx,%rax
  8004214cf3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004214cf7:	e9 0e 01 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004214cfc:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214d03:	48 89 c7             	mov    %rax,%rdi
  8004214d06:	48 b8 b1 0b 21 04 80 	movabs $0x8004210bb1,%rax
  8004214d0d:	00 00 00 
  8004214d10:	ff d0                	callq  *%rax
  8004214d12:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004214d16:	e9 ef 00 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004214d1b:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214d22:	48 89 c7             	mov    %rax,%rdi
  8004214d25:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214d2c:	00 00 00 
  8004214d2f:	ff d0                	callq  *%rax
  8004214d31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004214d35:	e9 d0 00 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004214d3a:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214d41:	48 89 c7             	mov    %rax,%rdi
  8004214d44:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214d4b:	00 00 00 
  8004214d4e:	ff d0                	callq  *%rax
  8004214d50:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004214d54:	e9 b1 00 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004214d59:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004214d5d:	0f 94 c0             	sete   %al
  8004214d60:	0f b6 c0             	movzbl %al,%eax
  8004214d63:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004214d66:	e9 9f 00 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004214d6b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004214d72:	e9 93 00 00 00       	jmpq   8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004214d77:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d7b:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214d7f:	0f b6 c0             	movzbl %al,%eax
  8004214d82:	ba ff 00 00 00       	mov    $0xff,%edx
  8004214d87:	89 d1                	mov    %edx,%ecx
  8004214d89:	29 c1                	sub    %eax,%ecx
  8004214d8b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d8f:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214d93:	0f b6 d8             	movzbl %al,%ebx
  8004214d96:	89 c8                	mov    %ecx,%eax
  8004214d98:	99                   	cltd   
  8004214d99:	f7 fb                	idiv   %ebx
  8004214d9b:	89 c2                	mov    %eax,%edx
  8004214d9d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214da1:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214da5:	0f b6 c0             	movzbl %al,%eax
  8004214da8:	0f af c2             	imul   %edx,%eax
  8004214dab:	48 98                	cltq   
  8004214dad:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214db1:	eb 57                	jmp    8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004214db3:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214dba:	00 00 00 
  8004214dbd:	48 8b 00             	mov    (%rax),%rax
  8004214dc0:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214dc4:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214dcb:	be 02 00 00 00       	mov    $0x2,%esi
  8004214dd0:	48 89 d7             	mov    %rdx,%rdi
  8004214dd3:	ff d0                	callq  *%rax
  8004214dd5:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214dd9:	eb 2f                	jmp    8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004214ddb:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004214de2:	eb 26                	jmp    8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004214de4:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004214deb:	eb 1d                	jmp    8004214e0a <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004214ded:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214df4:	48 89 c7             	mov    %rax,%rdi
  8004214df7:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214dfe:	00 00 00 
  8004214e01:	ff d0                	callq  *%rax
  8004214e03:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004214e07:	eb 01                	jmp    8004214e0a <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004214e09:	90                   	nop
			}

		} else {
  8004214e0a:	e9 32 01 00 00       	jmpq   8004214f41 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004214e0f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e13:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004214e17:	0f be c8             	movsbl %al,%ecx
  8004214e1a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e21:	0f b6 00             	movzbl (%rax),%eax
  8004214e24:	0f b6 d0             	movzbl %al,%edx
  8004214e27:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e2b:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214e2f:	0f b6 c0             	movzbl %al,%eax
  8004214e32:	29 c2                	sub    %eax,%edx
  8004214e34:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e38:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214e3c:	0f b6 f0             	movzbl %al,%esi
  8004214e3f:	89 d0                	mov    %edx,%eax
  8004214e41:	99                   	cltd   
  8004214e42:	f7 fe                	idiv   %esi
  8004214e44:	89 d0                	mov    %edx,%eax
  8004214e46:	01 c8                	add    %ecx,%eax
  8004214e48:	48 98                	cltq   
  8004214e4a:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004214e4e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e55:	0f b6 00             	movzbl (%rax),%eax
  8004214e58:	0f b6 d0             	movzbl %al,%edx
  8004214e5b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e5f:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214e63:	0f b6 c0             	movzbl %al,%eax
  8004214e66:	89 d1                	mov    %edx,%ecx
  8004214e68:	29 c1                	sub    %eax,%ecx
  8004214e6a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e6e:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214e72:	0f b6 d8             	movzbl %al,%ebx
  8004214e75:	89 c8                	mov    %ecx,%eax
  8004214e77:	99                   	cltd   
  8004214e78:	f7 fb                	idiv   %ebx
  8004214e7a:	89 c2                	mov    %eax,%edx
  8004214e7c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e80:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214e84:	0f b6 c0             	movzbl %al,%eax
  8004214e87:	0f af c2             	imul   %edx,%eax
  8004214e8a:	48 98                	cltq   
  8004214e8c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004214e90:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214e97:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214e9b:	73 0a                	jae    8004214ea7 <_dwarf_lineno_run_program+0x4fb>
  8004214e9d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214ea2:	e9 b3 00 00 00       	jmpq   8004214f5a <_dwarf_lineno_run_program+0x5ae>
  8004214ea7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214eab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214eaf:	48 89 10             	mov    %rdx,(%rax)
  8004214eb2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214eb6:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214ebd:	00 
  8004214ebe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ec2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214ec6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214eca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ece:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214ed2:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214ed6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214eda:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ede:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214ee2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ee6:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214ee9:	89 50 28             	mov    %edx,0x28(%rax)
  8004214eec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ef0:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214ef3:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214ef6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214efa:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214efd:	89 50 30             	mov    %edx,0x30(%rax)
  8004214f00:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214f04:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214f0b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214f0f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214f13:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004214f1a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004214f21:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004214f28:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004214f2f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f36:	48 83 c0 01          	add    $0x1,%rax
  8004214f3a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214f41:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f48:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004214f4f:	0f 82 e2 fa ff ff    	jb     8004214a37 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004214f55:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004214f5a:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004214f61:	5b                   	pop    %rbx
  8004214f62:	5d                   	pop    %rbp
  8004214f63:	c3                   	retq   

0000008004214f64 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004214f64:	55                   	push   %rbp
  8004214f65:	48 89 e5             	mov    %rsp,%rbp
  8004214f68:	53                   	push   %rbx
  8004214f69:	48 83 ec 48          	sub    $0x48,%rsp
  8004214f6d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004214f71:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214f75:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214f79:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214f7d:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004214f81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214f85:	48 8b 00             	mov    (%rax),%rax
  8004214f88:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004214f8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214f90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004214f94:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004214f98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f9c:	48 89 c7             	mov    %rax,%rdi
  8004214f9f:	48 b8 1b fd 20 04 80 	movabs $0x800420fd1b,%rax
  8004214fa6:	00 00 00 
  8004214fa9:	ff d0                	callq  *%rax
  8004214fab:	48 98                	cltq   
  8004214fad:	48 83 c0 01          	add    $0x1,%rax
  8004214fb1:	48 01 d8             	add    %rbx,%rax
  8004214fb4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004214fb8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214fbc:	48 89 c7             	mov    %rax,%rdi
  8004214fbf:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214fc6:	00 00 00 
  8004214fc9:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004214fcb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214fcf:	48 89 c7             	mov    %rax,%rdi
  8004214fd2:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214fd9:	00 00 00 
  8004214fdc:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004214fde:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004214fe2:	48 89 c7             	mov    %rax,%rdi
  8004214fe5:	48 b8 43 0c 21 04 80 	movabs $0x8004210c43,%rax
  8004214fec:	00 00 00 
  8004214fef:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004214ff1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214ff5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214ff9:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004214ffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215001:	48 83 c4 48          	add    $0x48,%rsp
  8004215005:	5b                   	pop    %rbx
  8004215006:	5d                   	pop    %rbp
  8004215007:	c3                   	retq   

0000008004215008 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215008:	55                   	push   %rbp
  8004215009:	48 89 e5             	mov    %rsp,%rbp
  800421500c:	53                   	push   %rbx
  800421500d:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215014:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  800421501b:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215022:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215029:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215030:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215037:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421503e:	00 
  800421503f:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215046:	00 
  8004215047:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421504e:	00 
  800421504f:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215056:	00 
  8004215057:	48 b8 30 b1 21 04 80 	movabs $0x800421b130,%rax
  800421505e:	00 00 00 
  8004215061:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215065:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215069:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  800421506d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215074:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800421507b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  800421507f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215084:	75 35                	jne    80042150bb <_dwarf_lineno_init+0xb3>
  8004215086:	48 b9 3c b1 21 04 80 	movabs $0x800421b13c,%rcx
  800421508d:	00 00 00 
  8004215090:	48 ba 47 b1 21 04 80 	movabs $0x800421b147,%rdx
  8004215097:	00 00 00 
  800421509a:	be 13 01 00 00       	mov    $0x113,%esi
  800421509f:	48 bf 5c b1 21 04 80 	movabs $0x800421b15c,%rdi
  80042150a6:	00 00 00 
  80042150a9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042150ae:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042150b5:	00 00 00 
  80042150b8:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  80042150bb:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042150c2:	00 00 00 
  80042150c5:	48 8b 00             	mov    (%rax),%rax
  80042150c8:	48 85 c0             	test   %rax,%rax
  80042150cb:	75 35                	jne    8004215102 <_dwarf_lineno_init+0xfa>
  80042150cd:	48 b9 73 b1 21 04 80 	movabs $0x800421b173,%rcx
  80042150d4:	00 00 00 
  80042150d7:	48 ba 47 b1 21 04 80 	movabs $0x800421b147,%rdx
  80042150de:	00 00 00 
  80042150e1:	be 14 01 00 00       	mov    $0x114,%esi
  80042150e6:	48 bf 5c b1 21 04 80 	movabs $0x800421b15c,%rdi
  80042150ed:	00 00 00 
  80042150f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042150f5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042150fc:	00 00 00 
  80042150ff:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215102:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215106:	48 89 c7             	mov    %rax,%rdi
  8004215109:	48 b8 d0 23 21 04 80 	movabs $0x80042123d0,%rax
  8004215110:	00 00 00 
  8004215113:	ff d0                	callq  *%rax
  8004215115:	85 c0                	test   %eax,%eax
  8004215117:	74 0a                	je     8004215123 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215119:	b8 00 00 00 00       	mov    $0x0,%eax
  800421511e:	e9 4f 04 00 00       	jmpq   8004215572 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215123:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421512a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  800421512e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215135:	00 00 00 
  8004215138:	48 8b 00             	mov    (%rax),%rax
  800421513b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421513f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215143:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215147:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421514e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215153:	48 89 cf             	mov    %rcx,%rdi
  8004215156:	ff d0                	callq  *%rax
  8004215158:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  800421515c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215161:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215165:	75 37                	jne    800421519e <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215167:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  800421516e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215175:	00 00 00 
  8004215178:	48 8b 00             	mov    (%rax),%rax
  800421517b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421517f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215183:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215187:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421518e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215193:	48 89 cf             	mov    %rcx,%rdi
  8004215196:	ff d0                	callq  *%rax
  8004215198:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421519c:	eb 07                	jmp    80042151a5 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  800421519e:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  80042151a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042151a9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042151ad:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042151b4:	48 29 c2             	sub    %rax,%rdx
  80042151b7:	48 89 d0             	mov    %rdx,%rax
  80042151ba:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042151be:	73 0a                	jae    80042151ca <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  80042151c0:	b8 0f 00 00 00       	mov    $0xf,%eax
  80042151c5:	e9 a8 03 00 00       	jmpq   8004215572 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  80042151ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042151ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042151d2:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  80042151d5:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  80042151dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151e0:	48 01 d0             	add    %rdx,%rax
  80042151e3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  80042151e7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151ee:	00 00 00 
  80042151f1:	48 8b 00             	mov    (%rax),%rax
  80042151f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151f8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151fc:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215200:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215207:	ba 02 00 00 00       	mov    $0x2,%edx
  800421520c:	48 89 cf             	mov    %rcx,%rdi
  800421520f:	ff d0                	callq  *%rax
  8004215211:	89 c2                	mov    %eax,%edx
  8004215213:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215217:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  800421521b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215222:	00 00 00 
  8004215225:	48 8b 00             	mov    (%rax),%rax
  8004215228:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421522c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215230:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215234:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215237:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421523e:	48 89 cf             	mov    %rcx,%rdi
  8004215241:	ff d0                	callq  *%rax
  8004215243:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215247:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  800421524b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215252:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215256:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421525d:	00 00 00 
  8004215260:	48 8b 00             	mov    (%rax),%rax
  8004215263:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215267:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421526b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421526f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215276:	ba 01 00 00 00       	mov    $0x1,%edx
  800421527b:	48 89 cf             	mov    %rcx,%rdi
  800421527e:	ff d0                	callq  *%rax
  8004215280:	89 c2                	mov    %eax,%edx
  8004215282:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215286:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215289:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215290:	00 00 00 
  8004215293:	48 8b 00             	mov    (%rax),%rax
  8004215296:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421529a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421529e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152a2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152a9:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152ae:	48 89 cf             	mov    %rcx,%rdi
  80042152b1:	ff d0                	callq  *%rax
  80042152b3:	89 c2                	mov    %eax,%edx
  80042152b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152b9:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  80042152bc:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042152c3:	00 00 00 
  80042152c6:	48 8b 00             	mov    (%rax),%rax
  80042152c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152cd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152d1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152d5:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152dc:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152e1:	48 89 cf             	mov    %rcx,%rdi
  80042152e4:	ff d0                	callq  *%rax
  80042152e6:	89 c2                	mov    %eax,%edx
  80042152e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152ec:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  80042152ef:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042152f6:	00 00 00 
  80042152f9:	48 8b 00             	mov    (%rax),%rax
  80042152fc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215300:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215304:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215308:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421530f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215314:	48 89 cf             	mov    %rcx,%rdi
  8004215317:	ff d0                	callq  *%rax
  8004215319:	89 c2                	mov    %eax,%edx
  800421531b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421531f:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215322:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215329:	00 00 00 
  800421532c:	48 8b 00             	mov    (%rax),%rax
  800421532f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215333:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215337:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421533b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215342:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215347:	48 89 cf             	mov    %rcx,%rdi
  800421534a:	ff d0                	callq  *%rax
  800421534c:	89 c2                	mov    %eax,%edx
  800421534e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215352:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215355:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215359:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421535d:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215360:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215364:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215368:	0f b6 c0             	movzbl %al,%eax
  800421536b:	83 e8 01             	sub    $0x1,%eax
  800421536e:	39 c2                	cmp    %eax,%edx
  8004215370:	7d 0c                	jge    800421537e <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215372:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215379:	e9 f1 01 00 00       	jmpq   800421556f <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  800421537e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215382:	48 bb 60 c4 69 04 80 	movabs $0x800469c460,%rbx
  8004215389:	00 00 00 
  800421538c:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215390:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215397:	eb 41                	jmp    80042153da <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215399:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421539d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042153a1:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042153a4:	48 98                	cltq   
  80042153a6:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042153aa:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042153b1:	00 00 00 
  80042153b4:	48 8b 00             	mov    (%rax),%rax
  80042153b7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042153bb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042153bf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042153c3:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042153ca:	ba 01 00 00 00       	mov    $0x1,%edx
  80042153cf:	48 89 cf             	mov    %rcx,%rdi
  80042153d2:	ff d0                	callq  *%rax
  80042153d4:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  80042153d6:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  80042153da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153de:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042153e2:	0f b6 c0             	movzbl %al,%eax
  80042153e5:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  80042153e8:	7f af                	jg     8004215399 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  80042153ea:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042153f1:	00 
	p = ds->ds_data + offset;
  80042153f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042153f6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042153fa:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215401:	48 01 d0             	add    %rdx,%rax
  8004215404:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  800421540b:	eb 1f                	jmp    800421542c <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  800421540d:	90                   	nop
  800421540e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215415:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215419:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215420:	0f b6 00             	movzbl (%rax),%eax
  8004215423:	84 c0                	test   %al,%al
  8004215425:	75 e7                	jne    800421540e <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215427:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  800421542c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215433:	0f b6 00             	movzbl (%rax),%eax
  8004215436:	84 c0                	test   %al,%al
  8004215438:	75 d3                	jne    800421540d <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  800421543a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421543e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215442:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215446:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421544d:	48 89 c2             	mov    %rax,%rdx
  8004215450:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215454:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215458:	48 29 c2             	sub    %rax,%rdx
  800421545b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421545f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215463:	48 98                	cltq   
  8004215465:	48 39 c2             	cmp    %rax,%rdx
  8004215468:	7e 0c                	jle    8004215476 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421546a:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215471:	e9 f9 00 00 00       	jmpq   800421556f <_dwarf_lineno_init+0x567>
	}
	p++;
  8004215476:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421547d:	48 83 c0 01          	add    $0x1,%rax
  8004215481:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215488:	eb 3c                	jmp    80042154c6 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  800421548a:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215491:	00 00 00 
  8004215494:	48 8b 08             	mov    (%rax),%rcx
  8004215497:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800421549e:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  80042154a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042154a9:	49 89 c8             	mov    %rcx,%r8
  80042154ac:	48 89 d1             	mov    %rdx,%rcx
  80042154af:	ba 00 00 00 00       	mov    $0x0,%edx
  80042154b4:	48 89 c7             	mov    %rax,%rdi
  80042154b7:	48 b8 64 4f 21 04 80 	movabs $0x8004214f64,%rax
  80042154be:	00 00 00 
  80042154c1:	ff d0                	callq  *%rax
  80042154c3:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042154c6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154cd:	0f b6 00             	movzbl (%rax),%eax
  80042154d0:	84 c0                	test   %al,%al
  80042154d2:	75 b6                	jne    800421548a <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  80042154d4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154db:	48 83 c0 01          	add    $0x1,%rax
  80042154df:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  80042154e6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154ed:	48 89 c2             	mov    %rax,%rdx
  80042154f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042154f4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042154f8:	48 29 c2             	sub    %rax,%rdx
  80042154fb:	48 89 d0             	mov    %rdx,%rax
  80042154fe:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215502:	48 89 c2             	mov    %rax,%rdx
  8004215505:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215509:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421550d:	48 39 c2             	cmp    %rax,%rdx
  8004215510:	74 09                	je     800421551b <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215512:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215519:	eb 54                	jmp    800421556f <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  800421551b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421551f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215523:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215527:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800421552b:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004215532:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004215539:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004215540:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004215544:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215548:	4d 89 c1             	mov    %r8,%r9
  800421554b:	49 89 f8             	mov    %rdi,%r8
  800421554e:	48 89 c7             	mov    %rax,%rdi
  8004215551:	48 b8 ac 49 21 04 80 	movabs $0x80042149ac,%rax
  8004215558:	00 00 00 
  800421555b:	ff d0                	callq  *%rax
  800421555d:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004215560:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215564:	74 02                	je     8004215568 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  8004215566:	eb 07                	jmp    800421556f <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004215568:	b8 00 00 00 00       	mov    $0x0,%eax
  800421556d:	eb 03                	jmp    8004215572 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  800421556f:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004215572:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004215579:	5b                   	pop    %rbx
  800421557a:	5d                   	pop    %rbp
  800421557b:	c3                   	retq   

000000800421557c <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  800421557c:	55                   	push   %rbp
  800421557d:	48 89 e5             	mov    %rsp,%rbp
  8004215580:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004215587:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421558e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004215595:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800421559c:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  80042155a3:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  80042155aa:	00 
  80042155ab:	75 35                	jne    80042155e2 <dwarf_srclines+0x66>
  80042155ad:	48 b9 7f b1 21 04 80 	movabs $0x800421b17f,%rcx
  80042155b4:	00 00 00 
  80042155b7:	48 ba 47 b1 21 04 80 	movabs $0x800421b147,%rdx
  80042155be:	00 00 00 
  80042155c1:	be 9a 01 00 00       	mov    $0x19a,%esi
  80042155c6:	48 bf 5c b1 21 04 80 	movabs $0x800421b15c,%rdi
  80042155cd:	00 00 00 
  80042155d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042155d5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042155dc:	00 00 00 
  80042155df:	41 ff d0             	callq  *%r8
	assert(linebuf);
  80042155e2:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  80042155e9:	00 
  80042155ea:	75 35                	jne    8004215621 <dwarf_srclines+0xa5>
  80042155ec:	48 b9 83 b1 21 04 80 	movabs $0x800421b183,%rcx
  80042155f3:	00 00 00 
  80042155f6:	48 ba 47 b1 21 04 80 	movabs $0x800421b147,%rdx
  80042155fd:	00 00 00 
  8004215600:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004215605:	48 bf 5c b1 21 04 80 	movabs $0x800421b15c,%rdi
  800421560c:	00 00 00 
  800421560f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215614:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421561b:	00 00 00 
  800421561e:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215621:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004215628:	ba 88 00 00 00       	mov    $0x88,%edx
  800421562d:	be 00 00 00 00       	mov    $0x0,%esi
  8004215632:	48 89 c7             	mov    %rax,%rdi
  8004215635:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800421563c:	00 00 00 
  800421563f:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004215641:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215648:	be 10 00 00 00       	mov    $0x10,%esi
  800421564d:	48 89 c7             	mov    %rax,%rdi
  8004215650:	48 b8 55 1f 21 04 80 	movabs $0x8004211f55,%rax
  8004215657:	00 00 00 
  800421565a:	ff d0                	callq  *%rax
  800421565c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215660:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215665:	75 0a                	jne    8004215671 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004215667:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421566c:	e9 84 00 00 00       	jmpq   80042156f5 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004215671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215675:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004215679:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004215680:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004215687:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  800421568e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215695:	49 89 f8             	mov    %rdi,%r8
  8004215698:	48 89 c7             	mov    %rax,%rdi
  800421569b:	48 b8 08 50 21 04 80 	movabs $0x8004215008,%rax
  80042156a2:	00 00 00 
  80042156a5:	ff d0                	callq  *%rax
  80042156a7:	85 c0                	test   %eax,%eax
  80042156a9:	74 07                	je     80042156b2 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  80042156ab:	b8 01 00 00 00       	mov    $0x1,%eax
  80042156b0:	eb 43                	jmp    80042156f5 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  80042156b2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042156b9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042156bd:	48 89 10             	mov    %rdx,(%rax)
  80042156c0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042156c4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042156c8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042156cc:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042156d0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042156d4:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042156d8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042156dc:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042156e0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042156e4:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042156e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042156ec:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  80042156f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042156f5:	c9                   	leaveq 
  80042156f6:	c3                   	retq   

00000080042156f7 <_dwarf_find_section>:
  80042156f7:	55                   	push   %rbp
  80042156f8:	48 89 e5             	mov    %rsp,%rbp
  80042156fb:	48 83 ec 20          	sub    $0x20,%rsp
  80042156ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215703:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421570a:	00 
  800421570b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215712:	eb 57                	jmp    800421576b <_dwarf_find_section+0x74>
  8004215714:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421571b:	00 00 00 
  800421571e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215721:	48 63 d2             	movslq %edx,%rdx
  8004215724:	48 c1 e2 05          	shl    $0x5,%rdx
  8004215728:	48 01 d0             	add    %rdx,%rax
  800421572b:	48 8b 00             	mov    (%rax),%rax
  800421572e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215732:	48 89 d6             	mov    %rdx,%rsi
  8004215735:	48 89 c7             	mov    %rax,%rdi
  8004215738:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  800421573f:	00 00 00 
  8004215742:	ff d0                	callq  *%rax
  8004215744:	85 c0                	test   %eax,%eax
  8004215746:	75 1f                	jne    8004215767 <_dwarf_find_section+0x70>
  8004215748:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421574b:	48 98                	cltq   
  800421574d:	48 c1 e0 05          	shl    $0x5,%rax
  8004215751:	48 89 c2             	mov    %rax,%rdx
  8004215754:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421575b:	00 00 00 
  800421575e:	48 01 d0             	add    %rdx,%rax
  8004215761:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215765:	eb 0a                	jmp    8004215771 <_dwarf_find_section+0x7a>
  8004215767:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421576b:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421576f:	7e a3                	jle    8004215714 <_dwarf_find_section+0x1d>
  8004215771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215775:	c9                   	leaveq 
  8004215776:	c3                   	retq   

0000008004215777 <find_debug_sections>:
  8004215777:	55                   	push   %rbp
  8004215778:	48 89 e5             	mov    %rsp,%rbp
  800421577b:	48 83 ec 40          	sub    $0x40,%rsp
  800421577f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215783:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215787:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421578b:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004215792:	00 
  8004215793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215797:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421579b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421579f:	48 01 d0             	add    %rdx,%rax
  80042157a2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042157a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157aa:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042157ae:	0f b7 c0             	movzwl %ax,%eax
  80042157b1:	48 c1 e0 06          	shl    $0x6,%rax
  80042157b5:	48 89 c2             	mov    %rax,%rdx
  80042157b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042157bc:	48 01 d0             	add    %rdx,%rax
  80042157bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042157c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157c7:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042157cb:	0f b7 c0             	movzwl %ax,%eax
  80042157ce:	48 c1 e0 06          	shl    $0x6,%rax
  80042157d2:	48 89 c2             	mov    %rax,%rdx
  80042157d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042157d9:	48 01 d0             	add    %rdx,%rax
  80042157dc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042157e0:	e9 4b 02 00 00       	jmpq   8004215a30 <find_debug_sections+0x2b9>
  80042157e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042157e9:	8b 00                	mov    (%rax),%eax
  80042157eb:	89 c2                	mov    %eax,%edx
  80042157ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042157f1:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042157f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042157f9:	48 01 c8             	add    %rcx,%rax
  80042157fc:	48 01 d0             	add    %rdx,%rax
  80042157ff:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215803:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215807:	48 be 8b b1 21 04 80 	movabs $0x800421b18b,%rsi
  800421580e:	00 00 00 
  8004215811:	48 89 c7             	mov    %rax,%rdi
  8004215814:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  800421581b:	00 00 00 
  800421581e:	ff d0                	callq  *%rax
  8004215820:	85 c0                	test   %eax,%eax
  8004215822:	75 4b                	jne    800421586f <find_debug_sections+0xf8>
  8004215824:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215828:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421582f:	00 00 00 
  8004215832:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215836:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421583d:	00 00 00 
  8004215840:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215844:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215848:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421584c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215850:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215857:	00 00 00 
  800421585a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421585e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215862:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215866:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421586a:	e9 bc 01 00 00       	jmpq   8004215a2b <find_debug_sections+0x2b4>
  800421586f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215873:	48 be 97 b1 21 04 80 	movabs $0x800421b197,%rsi
  800421587a:	00 00 00 
  800421587d:	48 89 c7             	mov    %rax,%rdi
  8004215880:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004215887:	00 00 00 
  800421588a:	ff d0                	callq  *%rax
  800421588c:	85 c0                	test   %eax,%eax
  800421588e:	75 4b                	jne    80042158db <find_debug_sections+0x164>
  8004215890:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215894:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421589b:	00 00 00 
  800421589e:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042158a2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158a9:	00 00 00 
  80042158ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042158b0:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042158b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158b8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042158bc:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158c3:	00 00 00 
  80042158c6:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042158ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158ce:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042158d2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042158d6:	e9 50 01 00 00       	jmpq   8004215a2b <find_debug_sections+0x2b4>
  80042158db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042158df:	48 be af b1 21 04 80 	movabs $0x800421b1af,%rsi
  80042158e6:	00 00 00 
  80042158e9:	48 89 c7             	mov    %rax,%rdi
  80042158ec:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  80042158f3:	00 00 00 
  80042158f6:	ff d0                	callq  *%rax
  80042158f8:	85 c0                	test   %eax,%eax
  80042158fa:	75 4b                	jne    8004215947 <find_debug_sections+0x1d0>
  80042158fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215900:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215907:	00 00 00 
  800421590a:	48 89 50 68          	mov    %rdx,0x68(%rax)
  800421590e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215915:	00 00 00 
  8004215918:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421591c:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215924:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215928:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421592f:	00 00 00 
  8004215932:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421593a:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421593e:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215942:	e9 e4 00 00 00       	jmpq   8004215a2b <find_debug_sections+0x2b4>
  8004215947:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421594b:	48 be a5 b1 21 04 80 	movabs $0x800421b1a5,%rsi
  8004215952:	00 00 00 
  8004215955:	48 89 c7             	mov    %rax,%rdi
  8004215958:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  800421595f:	00 00 00 
  8004215962:	ff d0                	callq  *%rax
  8004215964:	85 c0                	test   %eax,%eax
  8004215966:	75 53                	jne    80042159bb <find_debug_sections+0x244>
  8004215968:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421596c:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215970:	48 89 c2             	mov    %rax,%rdx
  8004215973:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421597a:	00 00 00 
  800421597d:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004215981:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215985:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215989:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215990:	00 00 00 
  8004215993:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421599b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421599f:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159a6:	00 00 00 
  80042159a9:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042159ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159b1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042159b5:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042159b9:	eb 70                	jmp    8004215a2b <find_debug_sections+0x2b4>
  80042159bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042159bf:	48 be bb b1 21 04 80 	movabs $0x800421b1bb,%rsi
  80042159c6:	00 00 00 
  80042159c9:	48 89 c7             	mov    %rax,%rdi
  80042159cc:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  80042159d3:	00 00 00 
  80042159d6:	ff d0                	callq  *%rax
  80042159d8:	85 c0                	test   %eax,%eax
  80042159da:	75 4f                	jne    8004215a2b <find_debug_sections+0x2b4>
  80042159dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042159e0:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159e7:	00 00 00 
  80042159ea:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  80042159f1:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159f8:	00 00 00 
  80042159fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042159ff:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004215a06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a0a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215a0e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a15:	00 00 00 
  8004215a18:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004215a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a23:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215a27:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215a2b:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004215a30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a34:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004215a38:	0f 82 a7 fd ff ff    	jb     80042157e5 <find_debug_sections+0x6e>
  8004215a3e:	c9                   	leaveq 
  8004215a3f:	c3                   	retq   

0000008004215a40 <read_section_headers>:
  8004215a40:	55                   	push   %rbp
  8004215a41:	48 89 e5             	mov    %rsp,%rbp
  8004215a44:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004215a4b:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004215a52:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004215a59:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004215a60:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a65:	ba 14 00 00 00       	mov    $0x14,%edx
  8004215a6a:	48 89 f7             	mov    %rsi,%rdi
  8004215a6d:	48 89 d1             	mov    %rdx,%rcx
  8004215a70:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004215a73:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004215a7a:	00 
  8004215a7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215a7f:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004215a86:	48 01 d0             	add    %rdx,%rax
  8004215a89:	48 83 e8 01          	sub    $0x1,%rax
  8004215a8d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215a91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215a95:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215a9a:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004215a9e:	48 89 d0             	mov    %rdx,%rax
  8004215aa1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215aa5:	48 29 c2             	sub    %rax,%rdx
  8004215aa8:	48 89 d0             	mov    %rdx,%rax
  8004215aab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215aaf:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004215ab6:	00 00 00 00 
  8004215aba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215abe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215ac2:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004215ac9:	00 
  8004215aca:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004215ad1:	00 00 00 
  8004215ad4:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004215adb:	75 11                	jne    8004215aee <read_section_headers+0xae>
  8004215add:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215ae4:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215ae8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215aec:	eb 26                	jmp    8004215b14 <read_section_headers+0xd4>
  8004215aee:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215af5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215af9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b00:	48 01 c2             	add    %rax,%rdx
  8004215b03:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004215b0a:	ff ff ff 
  8004215b0d:	48 01 d0             	add    %rdx,%rax
  8004215b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215b14:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b1b:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215b1f:	0f b7 c0             	movzwl %ax,%eax
  8004215b22:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004215b25:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b2c:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004215b30:	0f b7 c0             	movzwl %ax,%eax
  8004215b33:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004215b36:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b3d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004215b41:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004215b44:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004215b48:	48 63 f0             	movslq %eax,%rsi
  8004215b4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b4f:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215b56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215b5a:	48 89 c7             	mov    %rax,%rdi
  8004215b5d:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  8004215b64:	00 00 00 
  8004215b67:	ff d0                	callq  *%rax
  8004215b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b6d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004215b71:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215b75:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215b7b:	48 89 c2             	mov    %rax,%rdx
  8004215b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b82:	48 29 d0             	sub    %rdx,%rax
  8004215b85:	48 89 c2             	mov    %rax,%rdx
  8004215b88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b8c:	48 01 d0             	add    %rdx,%rax
  8004215b8f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004215b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215b9a:	eb 24                	jmp    8004215bc0 <read_section_headers+0x180>
  8004215b9c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215b9f:	48 98                	cltq   
  8004215ba1:	48 c1 e0 06          	shl    $0x6,%rax
  8004215ba5:	48 89 c2             	mov    %rax,%rdx
  8004215ba8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215bac:	48 01 c2             	add    %rax,%rdx
  8004215baf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215bb2:	48 98                	cltq   
  8004215bb4:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004215bbb:	ff 
  8004215bbc:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215bc0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215bc3:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004215bc6:	7c d4                	jl     8004215b9c <read_section_headers+0x15c>
  8004215bc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bcc:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215bd0:	0f b7 c0             	movzwl %ax,%eax
  8004215bd3:	48 98                	cltq   
  8004215bd5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215bdc:	ff 
  8004215bdd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004215be1:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215be8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215bec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215bf0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215bf4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215bf8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215bfc:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215c03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215c07:	48 01 c8             	add    %rcx,%rax
  8004215c0a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215c11:	48 89 c7             	mov    %rax,%rdi
  8004215c14:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  8004215c1b:	00 00 00 
  8004215c1e:	ff d0                	callq  *%rax
  8004215c20:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c24:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215c28:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c2c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c30:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004215c34:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004215c38:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215c3e:	48 29 c2             	sub    %rax,%rdx
  8004215c41:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215c45:	48 01 c2             	add    %rax,%rdx
  8004215c48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215c4c:	48 01 d0             	add    %rdx,%rax
  8004215c4f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004215c53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215c5a:	e9 04 05 00 00       	jmpq   8004216163 <read_section_headers+0x723>
  8004215c5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c62:	48 98                	cltq   
  8004215c64:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c6b:	ff 
  8004215c6c:	8b 00                	mov    (%rax),%eax
  8004215c6e:	89 c2                	mov    %eax,%edx
  8004215c70:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004215c74:	48 01 d0             	add    %rdx,%rax
  8004215c77:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004215c7b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215c82:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004215c87:	48 85 c0             	test   %rax,%rax
  8004215c8a:	74 35                	je     8004215cc1 <read_section_headers+0x281>
  8004215c8c:	48 b9 c6 b1 21 04 80 	movabs $0x800421b1c6,%rcx
  8004215c93:	00 00 00 
  8004215c96:	48 ba df b1 21 04 80 	movabs $0x800421b1df,%rdx
  8004215c9d:	00 00 00 
  8004215ca0:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004215ca5:	48 bf f4 b1 21 04 80 	movabs $0x800421b1f4,%rdi
  8004215cac:	00 00 00 
  8004215caf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215cb4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215cbb:	00 00 00 
  8004215cbe:	41 ff d0             	callq  *%r8
  8004215cc1:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215cc8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215ccc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215cd0:	48 be 8b b1 21 04 80 	movabs $0x800421b18b,%rsi
  8004215cd7:	00 00 00 
  8004215cda:	48 89 c7             	mov    %rax,%rdi
  8004215cdd:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004215ce4:	00 00 00 
  8004215ce7:	ff d0                	callq  *%rax
  8004215ce9:	85 c0                	test   %eax,%eax
  8004215ceb:	0f 85 d8 00 00 00    	jne    8004215dc9 <read_section_headers+0x389>
  8004215cf1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cf4:	48 98                	cltq   
  8004215cf6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215cfd:	ff 
  8004215cfe:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d02:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d05:	48 98                	cltq   
  8004215d07:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d0e:	ff 
  8004215d0f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215d13:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215d1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215d1e:	48 01 c8             	add    %rcx,%rax
  8004215d21:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215d28:	48 89 c7             	mov    %rax,%rdi
  8004215d2b:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  8004215d32:	00 00 00 
  8004215d35:	ff d0                	callq  *%rax
  8004215d37:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d3a:	48 98                	cltq   
  8004215d3c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d43:	ff 
  8004215d44:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d4b:	48 98                	cltq   
  8004215d4d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d54:	ff 
  8004215d55:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d59:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004215d5d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d61:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215d67:	48 29 c2             	sub    %rax,%rdx
  8004215d6a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215d6e:	48 01 c2             	add    %rax,%rdx
  8004215d71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215d75:	48 01 c2             	add    %rax,%rdx
  8004215d78:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d7f:	00 00 00 
  8004215d82:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215d86:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d8d:	00 00 00 
  8004215d90:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215d94:	48 89 c2             	mov    %rax,%rdx
  8004215d97:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d9e:	00 00 00 
  8004215da1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215da5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215da8:	48 98                	cltq   
  8004215daa:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215db1:	ff 
  8004215db2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215db6:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215dbd:	00 00 00 
  8004215dc0:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215dc4:	e9 96 03 00 00       	jmpq   800421615f <read_section_headers+0x71f>
  8004215dc9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215dcd:	48 be 97 b1 21 04 80 	movabs $0x800421b197,%rsi
  8004215dd4:	00 00 00 
  8004215dd7:	48 89 c7             	mov    %rax,%rdi
  8004215dda:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004215de1:	00 00 00 
  8004215de4:	ff d0                	callq  *%rax
  8004215de6:	85 c0                	test   %eax,%eax
  8004215de8:	0f 85 de 00 00 00    	jne    8004215ecc <read_section_headers+0x48c>
  8004215dee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215df1:	48 98                	cltq   
  8004215df3:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215dfa:	ff 
  8004215dfb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215dff:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e02:	48 98                	cltq   
  8004215e04:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e0b:	ff 
  8004215e0c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215e10:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215e17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215e1b:	48 01 c8             	add    %rcx,%rax
  8004215e1e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215e25:	48 89 c7             	mov    %rax,%rdi
  8004215e28:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  8004215e2f:	00 00 00 
  8004215e32:	ff d0                	callq  *%rax
  8004215e34:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e37:	48 98                	cltq   
  8004215e39:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e40:	ff 
  8004215e41:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215e45:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e48:	48 98                	cltq   
  8004215e4a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e51:	ff 
  8004215e52:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e56:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215e5d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215e64:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215e6a:	48 29 c2             	sub    %rax,%rdx
  8004215e6d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215e71:	48 01 c2             	add    %rax,%rdx
  8004215e74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215e78:	48 01 c2             	add    %rax,%rdx
  8004215e7b:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e82:	00 00 00 
  8004215e85:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215e89:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e90:	00 00 00 
  8004215e93:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215e97:	48 89 c2             	mov    %rax,%rdx
  8004215e9a:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ea1:	00 00 00 
  8004215ea4:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215ea8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215eab:	48 98                	cltq   
  8004215ead:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215eb4:	ff 
  8004215eb5:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215eb9:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ec0:	00 00 00 
  8004215ec3:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215ec7:	e9 93 02 00 00       	jmpq   800421615f <read_section_headers+0x71f>
  8004215ecc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215ed0:	48 be af b1 21 04 80 	movabs $0x800421b1af,%rsi
  8004215ed7:	00 00 00 
  8004215eda:	48 89 c7             	mov    %rax,%rdi
  8004215edd:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004215ee4:	00 00 00 
  8004215ee7:	ff d0                	callq  *%rax
  8004215ee9:	85 c0                	test   %eax,%eax
  8004215eeb:	0f 85 de 00 00 00    	jne    8004215fcf <read_section_headers+0x58f>
  8004215ef1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ef4:	48 98                	cltq   
  8004215ef6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215efd:	ff 
  8004215efe:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f02:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f05:	48 98                	cltq   
  8004215f07:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f0e:	ff 
  8004215f0f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215f13:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215f1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215f1e:	48 01 c8             	add    %rcx,%rax
  8004215f21:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215f28:	48 89 c7             	mov    %rax,%rdi
  8004215f2b:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  8004215f32:	00 00 00 
  8004215f35:	ff d0                	callq  *%rax
  8004215f37:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f3a:	48 98                	cltq   
  8004215f3c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f43:	ff 
  8004215f44:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f4b:	48 98                	cltq   
  8004215f4d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f54:	ff 
  8004215f55:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f59:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004215f60:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004215f67:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215f6d:	48 29 c2             	sub    %rax,%rdx
  8004215f70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215f74:	48 01 c2             	add    %rax,%rdx
  8004215f77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215f7b:	48 01 c2             	add    %rax,%rdx
  8004215f7e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f85:	00 00 00 
  8004215f88:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004215f8c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f93:	00 00 00 
  8004215f96:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004215f9a:	48 89 c2             	mov    %rax,%rdx
  8004215f9d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215fa4:	00 00 00 
  8004215fa7:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215fab:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fae:	48 98                	cltq   
  8004215fb0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fb7:	ff 
  8004215fb8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215fbc:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215fc3:	00 00 00 
  8004215fc6:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215fca:	e9 90 01 00 00       	jmpq   800421615f <read_section_headers+0x71f>
  8004215fcf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215fd3:	48 be a5 b1 21 04 80 	movabs $0x800421b1a5,%rsi
  8004215fda:	00 00 00 
  8004215fdd:	48 89 c7             	mov    %rax,%rdi
  8004215fe0:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  8004215fe7:	00 00 00 
  8004215fea:	ff d0                	callq  *%rax
  8004215fec:	85 c0                	test   %eax,%eax
  8004215fee:	75 65                	jne    8004216055 <read_section_headers+0x615>
  8004215ff0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ff3:	48 98                	cltq   
  8004215ff5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ffc:	ff 
  8004215ffd:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216001:	48 89 c2             	mov    %rax,%rdx
  8004216004:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421600b:	00 00 00 
  800421600e:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216012:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216019:	00 00 00 
  800421601c:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216020:	48 89 c2             	mov    %rax,%rdx
  8004216023:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421602a:	00 00 00 
  800421602d:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216031:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216034:	48 98                	cltq   
  8004216036:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421603d:	ff 
  800421603e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216042:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216049:	00 00 00 
  800421604c:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216050:	e9 0a 01 00 00       	jmpq   800421615f <read_section_headers+0x71f>
  8004216055:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216059:	48 be bb b1 21 04 80 	movabs $0x800421b1bb,%rsi
  8004216060:	00 00 00 
  8004216063:	48 89 c7             	mov    %rax,%rdi
  8004216066:	48 b8 e9 fe 20 04 80 	movabs $0x800420fee9,%rax
  800421606d:	00 00 00 
  8004216070:	ff d0                	callq  *%rax
  8004216072:	85 c0                	test   %eax,%eax
  8004216074:	0f 85 e5 00 00 00    	jne    800421615f <read_section_headers+0x71f>
  800421607a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421607d:	48 98                	cltq   
  800421607f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216086:	ff 
  8004216087:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421608b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421608e:	48 98                	cltq   
  8004216090:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216097:	ff 
  8004216098:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421609c:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042160a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042160a7:	48 01 c8             	add    %rcx,%rax
  80042160aa:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042160b1:	48 89 c7             	mov    %rax,%rdi
  80042160b4:	48 b8 7f 61 21 04 80 	movabs $0x800421617f,%rax
  80042160bb:	00 00 00 
  80042160be:	ff d0                	callq  *%rax
  80042160c0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160c3:	48 98                	cltq   
  80042160c5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160cc:	ff 
  80042160cd:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042160d1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160d4:	48 98                	cltq   
  80042160d6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160dd:	ff 
  80042160de:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160e2:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042160e9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042160f0:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042160f6:	48 29 c2             	sub    %rax,%rdx
  80042160f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042160fd:	48 01 c2             	add    %rax,%rdx
  8004216100:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216104:	48 01 c2             	add    %rax,%rdx
  8004216107:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421610e:	00 00 00 
  8004216111:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216118:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421611f:	00 00 00 
  8004216122:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216129:	48 89 c2             	mov    %rax,%rdx
  800421612c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216133:	00 00 00 
  8004216136:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800421613d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216140:	48 98                	cltq   
  8004216142:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216149:	ff 
  800421614a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421614e:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216155:	00 00 00 
  8004216158:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421615f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216163:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216166:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216169:	0f 8c f0 fa ff ff    	jl     8004215c5f <read_section_headers+0x21f>
  800421616f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216173:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421617a:	48 01 d0             	add    %rdx,%rax
  800421617d:	c9                   	leaveq 
  800421617e:	c3                   	retq   

000000800421617f <readseg>:
  800421617f:	55                   	push   %rbp
  8004216180:	48 89 e5             	mov    %rsp,%rbp
  8004216183:	48 83 ec 30          	sub    $0x30,%rsp
  8004216187:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421618b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421618f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216193:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216197:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421619b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421619f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042161a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042161a7:	48 01 d0             	add    %rdx,%rax
  80042161aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042161ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042161b2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042161b7:	48 85 c0             	test   %rax,%rax
  80042161ba:	74 35                	je     80042161f1 <readseg+0x72>
  80042161bc:	48 b9 05 b2 21 04 80 	movabs $0x800421b205,%rcx
  80042161c3:	00 00 00 
  80042161c6:	48 ba df b1 21 04 80 	movabs $0x800421b1df,%rdx
  80042161cd:	00 00 00 
  80042161d0:	be c4 00 00 00       	mov    $0xc4,%esi
  80042161d5:	48 bf f4 b1 21 04 80 	movabs $0x800421b1f4,%rdi
  80042161dc:	00 00 00 
  80042161df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042161e4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042161eb:	00 00 00 
  80042161ee:	41 ff d0             	callq  *%r8
  80042161f1:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  80042161f8:	ff 
  80042161f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042161fd:	48 c1 e8 09          	shr    $0x9,%rax
  8004216201:	48 83 c0 01          	add    $0x1,%rax
  8004216205:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216209:	eb 3c                	jmp    8004216247 <readseg+0xc8>
  800421620b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421620f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216213:	48 89 d6             	mov    %rdx,%rsi
  8004216216:	48 89 c7             	mov    %rax,%rdi
  8004216219:	48 b8 0f 63 21 04 80 	movabs $0x800421630f,%rax
  8004216220:	00 00 00 
  8004216223:	ff d0                	callq  *%rax
  8004216225:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  800421622c:	00 
  800421622d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216231:	48 8b 00             	mov    (%rax),%rax
  8004216234:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  800421623b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421623f:	48 89 10             	mov    %rdx,(%rax)
  8004216242:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216247:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421624b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421624f:	72 ba                	jb     800421620b <readseg+0x8c>
  8004216251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216255:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421625a:	48 89 c2             	mov    %rax,%rdx
  800421625d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216261:	48 01 d0             	add    %rdx,%rax
  8004216264:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  800421626a:	76 2f                	jbe    800421629b <readseg+0x11c>
  800421626c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216270:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216274:	48 89 d6             	mov    %rdx,%rsi
  8004216277:	48 89 c7             	mov    %rax,%rdi
  800421627a:	48 b8 0f 63 21 04 80 	movabs $0x800421630f,%rax
  8004216281:	00 00 00 
  8004216284:	ff d0                	callq  *%rax
  8004216286:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421628a:	48 8b 00             	mov    (%rax),%rax
  800421628d:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216294:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216298:	48 89 10             	mov    %rdx,(%rax)
  800421629b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421629f:	48 8b 00             	mov    (%rax),%rax
  80042162a2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042162a7:	48 85 c0             	test   %rax,%rax
  80042162aa:	74 35                	je     80042162e1 <readseg+0x162>
  80042162ac:	48 b9 18 b2 21 04 80 	movabs $0x800421b218,%rcx
  80042162b3:	00 00 00 
  80042162b6:	48 ba df b1 21 04 80 	movabs $0x800421b1df,%rdx
  80042162bd:	00 00 00 
  80042162c0:	be da 00 00 00       	mov    $0xda,%esi
  80042162c5:	48 bf f4 b1 21 04 80 	movabs $0x800421b1f4,%rdi
  80042162cc:	00 00 00 
  80042162cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042162d4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042162db:	00 00 00 
  80042162de:	41 ff d0             	callq  *%r8
  80042162e1:	c9                   	leaveq 
  80042162e2:	c3                   	retq   

00000080042162e3 <waitdisk>:
  80042162e3:	55                   	push   %rbp
  80042162e4:	48 89 e5             	mov    %rsp,%rbp
  80042162e7:	48 83 ec 10          	sub    $0x10,%rsp
  80042162eb:	90                   	nop
  80042162ec:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042162f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042162f6:	89 c2                	mov    %eax,%edx
  80042162f8:	ec                   	in     (%dx),%al
  80042162f9:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  80042162fc:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216300:	0f b6 c0             	movzbl %al,%eax
  8004216303:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216308:	83 f8 40             	cmp    $0x40,%eax
  800421630b:	75 df                	jne    80042162ec <waitdisk+0x9>
  800421630d:	c9                   	leaveq 
  800421630e:	c3                   	retq   

000000800421630f <readsect>:
  800421630f:	55                   	push   %rbp
  8004216310:	48 89 e5             	mov    %rsp,%rbp
  8004216313:	48 83 ec 60          	sub    $0x60,%rsp
  8004216317:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421631b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421631f:	48 b8 e3 62 21 04 80 	movabs $0x80042162e3,%rax
  8004216326:	00 00 00 
  8004216329:	ff d0                	callq  *%rax
  800421632b:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216332:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216336:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800421633a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421633d:	ee                   	out    %al,(%dx)
  800421633e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216342:	0f b6 c0             	movzbl %al,%eax
  8004216345:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  800421634c:	88 45 f3             	mov    %al,-0xd(%rbp)
  800421634f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216353:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216356:	ee                   	out    %al,(%dx)
  8004216357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421635b:	48 c1 e8 08          	shr    $0x8,%rax
  800421635f:	0f b6 c0             	movzbl %al,%eax
  8004216362:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216369:	88 45 eb             	mov    %al,-0x15(%rbp)
  800421636c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216370:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216373:	ee                   	out    %al,(%dx)
  8004216374:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216378:	48 c1 e8 10          	shr    $0x10,%rax
  800421637c:	0f b6 c0             	movzbl %al,%eax
  800421637f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216386:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216389:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800421638d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216390:	ee                   	out    %al,(%dx)
  8004216391:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216395:	48 c1 e8 18          	shr    $0x18,%rax
  8004216399:	83 c8 e0             	or     $0xffffffe0,%eax
  800421639c:	0f b6 c0             	movzbl %al,%eax
  800421639f:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  80042163a6:	88 45 db             	mov    %al,-0x25(%rbp)
  80042163a9:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042163ad:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042163b0:	ee                   	out    %al,(%dx)
  80042163b1:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  80042163b8:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  80042163bc:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042163c0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042163c3:	ee                   	out    %al,(%dx)
  80042163c4:	48 b8 e3 62 21 04 80 	movabs $0x80042162e3,%rax
  80042163cb:	00 00 00 
  80042163ce:	ff d0                	callq  *%rax
  80042163d0:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  80042163d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042163db:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042163df:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  80042163e6:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042163e9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  80042163ed:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042163f0:	48 89 ce             	mov    %rcx,%rsi
  80042163f3:	48 89 f7             	mov    %rsi,%rdi
  80042163f6:	89 c1                	mov    %eax,%ecx
  80042163f8:	fc                   	cld    
  80042163f9:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  80042163fb:	89 c8                	mov    %ecx,%eax
  80042163fd:	48 89 fe             	mov    %rdi,%rsi
  8004216400:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216404:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216407:	c9                   	leaveq 
  8004216408:	c3                   	retq   
  8004216409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000008004216410 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216410:	fa                   	cli    
	xorw    %ax, %ax
  8004216411:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216413:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216415:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216417:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216419:	0f 01 16             	lgdt   (%rsi)
  800421641c:	e0 70                	loopne 800421648e <start64+0x10>
	movl    %cr0, %eax
  800421641e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216421:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216425:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216428:	ea                   	(bad)  
  8004216429:	1d                   	.byte 0x1d
  800421642a:	70 08                	jo     8004216434 <start32+0x7>
	...

000000800421642d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  800421642d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216431:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216433:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216435:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216437:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421643b:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421643d:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
  800421643f:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif

	movl %eax,%cr4
  8004216444:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216447:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421d50e <bootstack+0x150e>
	movl    %cr0, %eax
  800421644e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216451:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216454:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216457:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  800421645c:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  800421645f:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216464:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216466:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  800421646a:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  800421646c:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  800421646f:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216474:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216477:	ea                   	(bad)  
  8004216478:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004216479:	70 00                	jo     800421647b <start32+0x4e>
  800421647b:	00 08                	add    %cl,(%rax)
	...

000000800421647e <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  800421647e:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216482:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216484:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216486:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216488:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421648c:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421648e:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216490:	48 a1 d8 b5 69 04 80 	movabs 0x800469b5d8,%rax
  8004216497:	00 00 00 
	movq    %rax,%rsp
  800421649a:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  800421649d:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  80042164a4:	48 b8 1e 05 20 04 80 	movabs $0x800420051e,%rax
  80042164ab:	00 00 00 
	call    *%rax
  80042164ae:	ff d0                	callq  *%rax

00000080042164b0 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  80042164b0:	eb fe                	jmp    80042164b0 <spin>
  80042164b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000080042164b8 <gdt>:
	...
  80042164c0:	ff                   	(bad)  
  80042164c1:	ff 00                	incl   (%rax)
  80042164c3:	00 00                	add    %al,(%rax)
  80042164c5:	9a                   	(bad)  
  80042164c6:	af                   	scas   %es:(%rdi),%eax
  80042164c7:	00 ff                	add    %bh,%bh
  80042164c9:	ff 00                	incl   (%rax)
  80042164cb:	00 00                	add    %al,(%rax)
  80042164cd:	92                   	xchg   %eax,%edx
  80042164ce:	af                   	scas   %es:(%rdi),%eax
	...

00000080042164d0 <gdtdesc>:
  80042164d0:	17                   	(bad)  
  80042164d1:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  80042164d7:	90                   	nop

00000080042164d8 <gdt32>:
	...
  80042164e0:	ff                   	(bad)  
  80042164e1:	ff 00                	incl   (%rax)
  80042164e3:	00 00                	add    %al,(%rax)
  80042164e5:	9a                   	(bad)  
  80042164e6:	cf                   	iret   
  80042164e7:	00 ff                	add    %bh,%bh
  80042164e9:	ff 00                	incl   (%rax)
  80042164eb:	00 00                	add    %al,(%rax)
  80042164ed:	92                   	xchg   %eax,%edx
  80042164ee:	cf                   	iret   
	...

00000080042164f0 <gdt32desc>:
  80042164f0:	17                   	(bad)  
  80042164f1:	00 c8                	add    %cl,%al
  80042164f3:	70 00                	jo     80042164f5 <gdt32desc+0x5>
	...

00000080042164f6 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  80042164f6:	90                   	nop

00000080042164f7 <sum>:
  80042164f7:	55                   	push   %rbp
  80042164f8:	48 89 e5             	mov    %rsp,%rbp
  80042164fb:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042164ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216503:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004216506:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421650d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004216514:	eb 1a                	jmp    8004216530 <sum+0x39>
  8004216516:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216519:	48 63 d0             	movslq %eax,%rdx
  800421651c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216520:	48 01 d0             	add    %rdx,%rax
  8004216523:	0f b6 00             	movzbl (%rax),%eax
  8004216526:	0f b6 c0             	movzbl %al,%eax
  8004216529:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421652c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004216530:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216533:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216536:	7c de                	jl     8004216516 <sum+0x1f>
  8004216538:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421653b:	c9                   	leaveq 
  800421653c:	c3                   	retq   

000000800421653d <mpsearch1>:
  800421653d:	55                   	push   %rbp
  800421653e:	48 89 e5             	mov    %rsp,%rbp
  8004216541:	48 83 ec 40          	sub    $0x40,%rsp
  8004216545:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004216549:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421654c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216550:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216558:	48 c1 e8 0c          	shr    $0xc,%rax
  800421655c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421655f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216562:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216569:	00 00 00 
  800421656c:	48 8b 00             	mov    (%rax),%rax
  800421656f:	48 39 c2             	cmp    %rax,%rdx
  8004216572:	72 32                	jb     80042165a6 <mpsearch1+0x69>
  8004216574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216578:	48 89 c1             	mov    %rax,%rcx
  800421657b:	48 ba 38 b2 21 04 80 	movabs $0x800421b238,%rdx
  8004216582:	00 00 00 
  8004216585:	be 74 00 00 00       	mov    $0x74,%esi
  800421658a:	48 bf 5b b2 21 04 80 	movabs $0x800421b25b,%rdi
  8004216591:	00 00 00 
  8004216594:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216599:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042165a0:	00 00 00 
  80042165a3:	41 ff d0             	callq  *%r8
  80042165a6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042165ad:	00 00 00 
  80042165b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165b4:	48 01 d0             	add    %rdx,%rax
  80042165b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042165bb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042165be:	48 63 d0             	movslq %eax,%rdx
  80042165c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042165c5:	48 01 d0             	add    %rdx,%rax
  80042165c8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042165cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165d0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042165d4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042165d7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042165da:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042165e1:	00 00 00 
  80042165e4:	48 8b 00             	mov    (%rax),%rax
  80042165e7:	48 39 c2             	cmp    %rax,%rdx
  80042165ea:	72 32                	jb     800421661e <mpsearch1+0xe1>
  80042165ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165f0:	48 89 c1             	mov    %rax,%rcx
  80042165f3:	48 ba 38 b2 21 04 80 	movabs $0x800421b238,%rdx
  80042165fa:	00 00 00 
  80042165fd:	be 74 00 00 00       	mov    $0x74,%esi
  8004216602:	48 bf 5b b2 21 04 80 	movabs $0x800421b25b,%rdi
  8004216609:	00 00 00 
  800421660c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216611:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216618:	00 00 00 
  800421661b:	41 ff d0             	callq  *%r8
  800421661e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216625:	00 00 00 
  8004216628:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421662c:	48 01 d0             	add    %rdx,%rax
  800421662f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216633:	eb 4d                	jmp    8004216682 <mpsearch1+0x145>
  8004216635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216639:	ba 04 00 00 00       	mov    $0x4,%edx
  800421663e:	48 be 6e b2 21 04 80 	movabs $0x800421b26e,%rsi
  8004216645:	00 00 00 
  8004216648:	48 89 c7             	mov    %rax,%rdi
  800421664b:	48 b8 f6 01 21 04 80 	movabs $0x80042101f6,%rax
  8004216652:	00 00 00 
  8004216655:	ff d0                	callq  *%rax
  8004216657:	85 c0                	test   %eax,%eax
  8004216659:	75 22                	jne    800421667d <mpsearch1+0x140>
  800421665b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421665f:	be 10 00 00 00       	mov    $0x10,%esi
  8004216664:	48 89 c7             	mov    %rax,%rdi
  8004216667:	48 b8 f7 64 21 04 80 	movabs $0x80042164f7,%rax
  800421666e:	00 00 00 
  8004216671:	ff d0                	callq  *%rax
  8004216673:	84 c0                	test   %al,%al
  8004216675:	75 06                	jne    800421667d <mpsearch1+0x140>
  8004216677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421667b:	eb 14                	jmp    8004216691 <mpsearch1+0x154>
  800421667d:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  8004216682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216686:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421668a:	72 a9                	jb     8004216635 <mpsearch1+0xf8>
  800421668c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216691:	c9                   	leaveq 
  8004216692:	c3                   	retq   

0000008004216693 <mpsearch>:
  8004216693:	55                   	push   %rbp
  8004216694:	48 89 e5             	mov    %rsp,%rbp
  8004216697:	48 83 ec 30          	sub    $0x30,%rsp
  800421669b:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042166a2:	00 
  80042166a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166a7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042166ab:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042166ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042166b1:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042166b8:	00 00 00 
  80042166bb:	48 8b 00             	mov    (%rax),%rax
  80042166be:	48 39 c2             	cmp    %rax,%rdx
  80042166c1:	72 32                	jb     80042166f5 <mpsearch+0x62>
  80042166c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166c7:	48 89 c1             	mov    %rax,%rcx
  80042166ca:	48 ba 38 b2 21 04 80 	movabs $0x800421b238,%rdx
  80042166d1:	00 00 00 
  80042166d4:	be 8c 00 00 00       	mov    $0x8c,%esi
  80042166d9:	48 bf 5b b2 21 04 80 	movabs $0x800421b25b,%rdi
  80042166e0:	00 00 00 
  80042166e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042166e8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042166ef:	00 00 00 
  80042166f2:	41 ff d0             	callq  *%r8
  80042166f5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042166fc:	00 00 00 
  80042166ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216703:	48 01 d0             	add    %rdx,%rax
  8004216706:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421670a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421670e:	48 83 c0 0e          	add    $0xe,%rax
  8004216712:	0f b7 00             	movzwl (%rax),%eax
  8004216715:	0f b7 c0             	movzwl %ax,%eax
  8004216718:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421671b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421671f:	74 2c                	je     800421674d <mpsearch+0xba>
  8004216721:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004216725:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216728:	be 00 04 00 00       	mov    $0x400,%esi
  800421672d:	48 89 c7             	mov    %rax,%rdi
  8004216730:	48 b8 3d 65 21 04 80 	movabs $0x800421653d,%rax
  8004216737:	00 00 00 
  800421673a:	ff d0                	callq  *%rax
  800421673c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216740:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216745:	74 49                	je     8004216790 <mpsearch+0xfd>
  8004216747:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421674b:	eb 59                	jmp    80042167a6 <mpsearch+0x113>
  800421674d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216751:	48 83 c0 13          	add    $0x13,%rax
  8004216755:	0f b7 00             	movzwl (%rax),%eax
  8004216758:	0f b7 c0             	movzwl %ax,%eax
  800421675b:	c1 e0 0a             	shl    $0xa,%eax
  800421675e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216761:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216764:	2d 00 04 00 00       	sub    $0x400,%eax
  8004216769:	89 c0                	mov    %eax,%eax
  800421676b:	be 00 04 00 00       	mov    $0x400,%esi
  8004216770:	48 89 c7             	mov    %rax,%rdi
  8004216773:	48 b8 3d 65 21 04 80 	movabs $0x800421653d,%rax
  800421677a:	00 00 00 
  800421677d:	ff d0                	callq  *%rax
  800421677f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216783:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216788:	74 06                	je     8004216790 <mpsearch+0xfd>
  800421678a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421678e:	eb 16                	jmp    80042167a6 <mpsearch+0x113>
  8004216790:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216795:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  800421679a:	48 b8 3d 65 21 04 80 	movabs $0x800421653d,%rax
  80042167a1:	00 00 00 
  80042167a4:	ff d0                	callq  *%rax
  80042167a6:	c9                   	leaveq 
  80042167a7:	c3                   	retq   

00000080042167a8 <mpconfig>:
  80042167a8:	55                   	push   %rbp
  80042167a9:	48 89 e5             	mov    %rsp,%rbp
  80042167ac:	48 83 ec 30          	sub    $0x30,%rsp
  80042167b0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042167b4:	48 b8 93 66 21 04 80 	movabs $0x8004216693,%rax
  80042167bb:	00 00 00 
  80042167be:	ff d0                	callq  *%rax
  80042167c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042167c4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042167c9:	75 0a                	jne    80042167d5 <mpconfig+0x2d>
  80042167cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167d0:	e9 f6 01 00 00       	jmpq   80042169cb <mpconfig+0x223>
  80042167d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042167d9:	8b 40 04             	mov    0x4(%rax),%eax
  80042167dc:	85 c0                	test   %eax,%eax
  80042167de:	74 0c                	je     80042167ec <mpconfig+0x44>
  80042167e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042167e4:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  80042167e8:	84 c0                	test   %al,%al
  80042167ea:	74 25                	je     8004216811 <mpconfig+0x69>
  80042167ec:	48 bf 78 b2 21 04 80 	movabs $0x800421b278,%rdi
  80042167f3:	00 00 00 
  80042167f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167fb:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216802:	00 00 00 
  8004216805:	ff d2                	callq  *%rdx
  8004216807:	b8 00 00 00 00       	mov    $0x0,%eax
  800421680c:	e9 ba 01 00 00       	jmpq   80042169cb <mpconfig+0x223>
  8004216811:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216815:	8b 40 04             	mov    0x4(%rax),%eax
  8004216818:	89 c0                	mov    %eax,%eax
  800421681a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421681e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216822:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216826:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004216829:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421682c:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  8004216833:	00 00 00 
  8004216836:	48 8b 00             	mov    (%rax),%rax
  8004216839:	48 39 c2             	cmp    %rax,%rdx
  800421683c:	72 32                	jb     8004216870 <mpconfig+0xc8>
  800421683e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216842:	48 89 c1             	mov    %rax,%rcx
  8004216845:	48 ba 38 b2 21 04 80 	movabs $0x800421b238,%rdx
  800421684c:	00 00 00 
  800421684f:	be ad 00 00 00       	mov    $0xad,%esi
  8004216854:	48 bf 5b b2 21 04 80 	movabs $0x800421b25b,%rdi
  800421685b:	00 00 00 
  800421685e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216863:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421686a:	00 00 00 
  800421686d:	41 ff d0             	callq  *%r8
  8004216870:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216877:	00 00 00 
  800421687a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421687e:	48 01 d0             	add    %rdx,%rax
  8004216881:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216885:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216889:	ba 04 00 00 00       	mov    $0x4,%edx
  800421688e:	48 be a5 b2 21 04 80 	movabs $0x800421b2a5,%rsi
  8004216895:	00 00 00 
  8004216898:	48 89 c7             	mov    %rax,%rdi
  800421689b:	48 b8 f6 01 21 04 80 	movabs $0x80042101f6,%rax
  80042168a2:	00 00 00 
  80042168a5:	ff d0                	callq  *%rax
  80042168a7:	85 c0                	test   %eax,%eax
  80042168a9:	74 25                	je     80042168d0 <mpconfig+0x128>
  80042168ab:	48 bf b0 b2 21 04 80 	movabs $0x800421b2b0,%rdi
  80042168b2:	00 00 00 
  80042168b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168ba:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042168c1:	00 00 00 
  80042168c4:	ff d2                	callq  *%rdx
  80042168c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168cb:	e9 fb 00 00 00       	jmpq   80042169cb <mpconfig+0x223>
  80042168d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168d4:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  80042168d8:	0f b7 d0             	movzwl %ax,%edx
  80042168db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168df:	89 d6                	mov    %edx,%esi
  80042168e1:	48 89 c7             	mov    %rax,%rdi
  80042168e4:	48 b8 f7 64 21 04 80 	movabs $0x80042164f7,%rax
  80042168eb:	00 00 00 
  80042168ee:	ff d0                	callq  *%rax
  80042168f0:	84 c0                	test   %al,%al
  80042168f2:	74 25                	je     8004216919 <mpconfig+0x171>
  80042168f4:	48 bf e8 b2 21 04 80 	movabs $0x800421b2e8,%rdi
  80042168fb:	00 00 00 
  80042168fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216903:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800421690a:	00 00 00 
  800421690d:	ff d2                	callq  *%rdx
  800421690f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216914:	e9 b2 00 00 00       	jmpq   80042169cb <mpconfig+0x223>
  8004216919:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421691d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216921:	3c 01                	cmp    $0x1,%al
  8004216923:	74 3b                	je     8004216960 <mpconfig+0x1b8>
  8004216925:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216929:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421692d:	3c 04                	cmp    $0x4,%al
  800421692f:	74 2f                	je     8004216960 <mpconfig+0x1b8>
  8004216931:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216935:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216939:	0f b6 c0             	movzbl %al,%eax
  800421693c:	89 c6                	mov    %eax,%esi
  800421693e:	48 bf 10 b3 21 04 80 	movabs $0x800421b310,%rdi
  8004216945:	00 00 00 
  8004216948:	b8 00 00 00 00       	mov    $0x0,%eax
  800421694d:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216954:	00 00 00 
  8004216957:	ff d2                	callq  *%rdx
  8004216959:	b8 00 00 00 00       	mov    $0x0,%eax
  800421695e:	eb 6b                	jmp    80042169cb <mpconfig+0x223>
  8004216960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216964:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004216968:	0f b7 c0             	movzwl %ax,%eax
  800421696b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421696f:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004216973:	0f b7 ca             	movzwl %dx,%ecx
  8004216976:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421697a:	48 01 ca             	add    %rcx,%rdx
  800421697d:	89 c6                	mov    %eax,%esi
  800421697f:	48 89 d7             	mov    %rdx,%rdi
  8004216982:	48 b8 f7 64 21 04 80 	movabs $0x80042164f7,%rax
  8004216989:	00 00 00 
  800421698c:	ff d0                	callq  *%rax
  800421698e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216992:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004216996:	38 d0                	cmp    %dl,%al
  8004216998:	74 22                	je     80042169bc <mpconfig+0x214>
  800421699a:	48 bf 30 b3 21 04 80 	movabs $0x800421b330,%rdi
  80042169a1:	00 00 00 
  80042169a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169a9:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  80042169b0:	00 00 00 
  80042169b3:	ff d2                	callq  *%rdx
  80042169b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169ba:	eb 0f                	jmp    80042169cb <mpconfig+0x223>
  80042169bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042169c4:	48 89 10             	mov    %rdx,(%rax)
  80042169c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042169cb:	c9                   	leaveq 
  80042169cc:	c3                   	retq   

00000080042169cd <mp_init>:
  80042169cd:	55                   	push   %rbp
  80042169ce:	48 89 e5             	mov    %rsp,%rbp
  80042169d1:	53                   	push   %rbx
  80042169d2:	48 83 ec 58          	sub    $0x58,%rsp
  80042169d6:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  80042169dd:	00 00 00 
  80042169e0:	48 bb 20 d0 69 04 80 	movabs $0x800469d020,%rbx
  80042169e7:	00 00 00 
  80042169ea:	48 89 18             	mov    %rbx,(%rax)
  80042169ed:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  80042169f1:	48 89 c7             	mov    %rax,%rdi
  80042169f4:	48 b8 a8 67 21 04 80 	movabs $0x80042167a8,%rax
  80042169fb:	00 00 00 
  80042169fe:	ff d0                	callq  *%rax
  8004216a00:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216a04:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216a09:	75 05                	jne    8004216a10 <mp_init+0x43>
  8004216a0b:	e9 d2 03 00 00       	jmpq   8004216de2 <mp_init+0x415>
  8004216a10:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216a17:	00 00 00 
  8004216a1a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216a20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a24:	8b 40 24             	mov    0x24(%rax),%eax
  8004216a27:	89 c2                	mov    %eax,%edx
  8004216a29:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216a30:	00 00 00 
  8004216a33:	48 89 10             	mov    %rdx,(%rax)
  8004216a36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a3a:	48 83 c0 2c          	add    $0x2c,%rax
  8004216a3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216a42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216a49:	e9 17 02 00 00       	jmpq   8004216c65 <mp_init+0x298>
  8004216a4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a52:	0f b6 00             	movzbl (%rax),%eax
  8004216a55:	0f b6 c0             	movzbl %al,%eax
  8004216a58:	85 c0                	test   %eax,%eax
  8004216a5a:	74 16                	je     8004216a72 <mp_init+0xa5>
  8004216a5c:	85 c0                	test   %eax,%eax
  8004216a5e:	0f 88 b8 01 00 00    	js     8004216c1c <mp_init+0x24f>
  8004216a64:	83 f8 04             	cmp    $0x4,%eax
  8004216a67:	0f 8f af 01 00 00    	jg     8004216c1c <mp_init+0x24f>
  8004216a6d:	e9 a3 01 00 00       	jmpq   8004216c15 <mp_init+0x248>
  8004216a72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a76:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216a7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a7e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216a82:	0f b6 c0             	movzbl %al,%eax
  8004216a85:	83 e0 02             	and    $0x2,%eax
  8004216a88:	85 c0                	test   %eax,%eax
  8004216a8a:	74 51                	je     8004216add <mp_init+0x110>
  8004216a8c:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216a93:	00 00 00 
  8004216a96:	8b 00                	mov    (%rax),%eax
  8004216a98:	48 98                	cltq   
  8004216a9a:	48 c1 e0 03          	shl    $0x3,%rax
  8004216a9e:	48 89 c2             	mov    %rax,%rdx
  8004216aa1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216aa5:	48 01 d0             	add    %rdx,%rax
  8004216aa8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216aaf:	00 00 00 
  8004216ab2:	48 01 c2             	add    %rax,%rdx
  8004216ab5:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216abc:	00 00 00 
  8004216abf:	48 89 10             	mov    %rdx,(%rax)
  8004216ac2:	48 bf 5d b3 21 04 80 	movabs $0x800421b35d,%rdi
  8004216ac9:	00 00 00 
  8004216acc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216ad1:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216ad8:	00 00 00 
  8004216adb:	ff d2                	callq  *%rdx
  8004216add:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216ae4:	00 00 00 
  8004216ae7:	8b 00                	mov    (%rax),%eax
  8004216ae9:	83 f8 03             	cmp    $0x3,%eax
  8004216aec:	0f 8f f4 00 00 00    	jg     8004216be6 <mp_init+0x219>
  8004216af2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216af6:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004216afa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216afe:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216b02:	0f b6 f0             	movzbl %al,%esi
  8004216b05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b09:	8b 78 08             	mov    0x8(%rax),%edi
  8004216b0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b10:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004216b14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b18:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004216b1c:	0f b6 c8             	movzbl %al,%ecx
  8004216b1f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b23:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216b27:	0f b6 d0             	movzbl %al,%edx
  8004216b2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b2e:	0f b6 00             	movzbl (%rax),%eax
  8004216b31:	0f b6 c0             	movzbl %al,%eax
  8004216b34:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004216b39:	89 34 24             	mov    %esi,(%rsp)
  8004216b3c:	41 89 f9             	mov    %edi,%r9d
  8004216b3f:	4d 89 d0             	mov    %r10,%r8
  8004216b42:	89 c6                	mov    %eax,%esi
  8004216b44:	48 bf 70 b3 21 04 80 	movabs $0x800421b370,%rdi
  8004216b4b:	00 00 00 
  8004216b4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b53:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  8004216b5a:	00 00 00 
  8004216b5d:	41 ff d2             	callq  *%r10
  8004216b60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b64:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216b68:	0f b6 c0             	movzbl %al,%eax
  8004216b6b:	83 e0 01             	and    $0x1,%eax
  8004216b6e:	85 c0                	test   %eax,%eax
  8004216b70:	74 57                	je     8004216bc9 <mp_init+0x1fc>
  8004216b72:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b79:	00 00 00 
  8004216b7c:	8b 30                	mov    (%rax),%esi
  8004216b7e:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216b85:	00 00 00 
  8004216b88:	8b 00                	mov    (%rax),%eax
  8004216b8a:	89 c2                	mov    %eax,%edx
  8004216b8c:	48 b9 20 d0 69 04 80 	movabs $0x800469d020,%rcx
  8004216b93:	00 00 00 
  8004216b96:	48 63 c6             	movslq %esi,%rax
  8004216b99:	48 c1 e0 03          	shl    $0x3,%rax
  8004216b9d:	48 89 c6             	mov    %rax,%rsi
  8004216ba0:	48 c1 e6 04          	shl    $0x4,%rsi
  8004216ba4:	48 01 f0             	add    %rsi,%rax
  8004216ba7:	48 01 c8             	add    %rcx,%rax
  8004216baa:	88 10                	mov    %dl,(%rax)
  8004216bac:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216bb3:	00 00 00 
  8004216bb6:	8b 00                	mov    (%rax),%eax
  8004216bb8:	8d 50 01             	lea    0x1(%rax),%edx
  8004216bbb:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216bc2:	00 00 00 
  8004216bc5:	89 10                	mov    %edx,(%rax)
  8004216bc7:	eb 45                	jmp    8004216c0e <mp_init+0x241>
  8004216bc9:	48 bf c0 b3 21 04 80 	movabs $0x800421b3c0,%rdi
  8004216bd0:	00 00 00 
  8004216bd3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216bd8:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216bdf:	00 00 00 
  8004216be2:	ff d2                	callq  *%rdx
  8004216be4:	eb 28                	jmp    8004216c0e <mp_init+0x241>
  8004216be6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216bea:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216bee:	0f b6 c0             	movzbl %al,%eax
  8004216bf1:	89 c6                	mov    %eax,%esi
  8004216bf3:	48 bf f0 b3 21 04 80 	movabs $0x800421b3f0,%rdi
  8004216bfa:	00 00 00 
  8004216bfd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c02:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216c09:	00 00 00 
  8004216c0c:	ff d2                	callq  *%rdx
  8004216c0e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004216c13:	eb 4c                	jmp    8004216c61 <mp_init+0x294>
  8004216c15:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004216c1a:	eb 45                	jmp    8004216c61 <mp_init+0x294>
  8004216c1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216c20:	0f b6 00             	movzbl (%rax),%eax
  8004216c23:	0f b6 c0             	movzbl %al,%eax
  8004216c26:	89 c6                	mov    %eax,%esi
  8004216c28:	48 bf 18 b4 21 04 80 	movabs $0x800421b418,%rdi
  8004216c2f:	00 00 00 
  8004216c32:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c37:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216c3e:	00 00 00 
  8004216c41:	ff d2                	callq  *%rdx
  8004216c43:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216c4a:	00 00 00 
  8004216c4d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004216c53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c57:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216c5b:	0f b7 c0             	movzwl %ax,%eax
  8004216c5e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216c61:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216c65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c69:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216c6d:	0f b7 c0             	movzwl %ax,%eax
  8004216c70:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216c73:	0f 87 d5 fd ff ff    	ja     8004216a4e <mp_init+0x81>
  8004216c79:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216c80:	eb 53                	jmp    8004216cd5 <mp_init+0x308>
  8004216c82:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216c89:	00 00 00 
  8004216c8c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216c8f:	48 c1 e0 03          	shl    $0x3,%rax
  8004216c93:	48 89 c1             	mov    %rax,%rcx
  8004216c96:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216c9a:	48 01 c8             	add    %rcx,%rax
  8004216c9d:	48 01 d0             	add    %rdx,%rax
  8004216ca0:	48 83 c0 70          	add    $0x70,%rax
  8004216ca4:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004216ca8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216caf:	00 00 00 
  8004216cb2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216cb5:	48 c1 e0 03          	shl    $0x3,%rax
  8004216cb9:	48 89 c1             	mov    %rax,%rcx
  8004216cbc:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216cc0:	48 01 c8             	add    %rcx,%rax
  8004216cc3:	48 01 d0             	add    %rdx,%rax
  8004216cc6:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004216cca:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216cd1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216cd5:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004216cd9:	76 a7                	jbe    8004216c82 <mp_init+0x2b5>
  8004216cdb:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216ce2:	00 00 00 
  8004216ce5:	48 8b 00             	mov    (%rax),%rax
  8004216ce8:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004216cef:	48 b8 00 d0 69 04 80 	movabs $0x800469d000,%rax
  8004216cf6:	00 00 00 
  8004216cf9:	8b 00                	mov    (%rax),%eax
  8004216cfb:	85 c0                	test   %eax,%eax
  8004216cfd:	75 41                	jne    8004216d40 <mp_init+0x373>
  8004216cff:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216d06:	00 00 00 
  8004216d09:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216d0f:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216d16:	00 00 00 
  8004216d19:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216d20:	48 bf 38 b4 21 04 80 	movabs $0x800421b438,%rdi
  8004216d27:	00 00 00 
  8004216d2a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d2f:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216d36:	00 00 00 
  8004216d39:	ff d2                	callq  *%rdx
  8004216d3b:	e9 a2 00 00 00       	jmpq   8004216de2 <mp_init+0x415>
  8004216d40:	48 b8 48 d2 69 04 80 	movabs $0x800469d248,%rax
  8004216d47:	00 00 00 
  8004216d4a:	8b 10                	mov    (%rax),%edx
  8004216d4c:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216d53:	00 00 00 
  8004216d56:	48 8b 00             	mov    (%rax),%rax
  8004216d59:	0f b6 00             	movzbl (%rax),%eax
  8004216d5c:	0f b6 c0             	movzbl %al,%eax
  8004216d5f:	89 c6                	mov    %eax,%esi
  8004216d61:	48 bf 64 b4 21 04 80 	movabs $0x800421b464,%rdi
  8004216d68:	00 00 00 
  8004216d6b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d70:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  8004216d77:	00 00 00 
  8004216d7a:	ff d1                	callq  *%rcx
  8004216d7c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216d80:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004216d84:	84 c0                	test   %al,%al
  8004216d86:	74 5a                	je     8004216de2 <mp_init+0x415>
  8004216d88:	48 bf 88 b4 21 04 80 	movabs $0x800421b488,%rdi
  8004216d8f:	00 00 00 
  8004216d92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d97:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004216d9e:	00 00 00 
  8004216da1:	ff d2                	callq  *%rdx
  8004216da3:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004216daa:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216dae:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004216db2:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216db5:	ee                   	out    %al,(%dx)
  8004216db6:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216dbd:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216dc0:	89 c2                	mov    %eax,%edx
  8004216dc2:	ec                   	in     (%dx),%al
  8004216dc3:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004216dc6:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004216dca:	83 c8 01             	or     $0x1,%eax
  8004216dcd:	0f b6 c0             	movzbl %al,%eax
  8004216dd0:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004216dd7:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216dda:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004216dde:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004216de1:	ee                   	out    %al,(%dx)
  8004216de2:	48 83 c4 58          	add    $0x58,%rsp
  8004216de6:	5b                   	pop    %rbx
  8004216de7:	5d                   	pop    %rbp
  8004216de8:	c3                   	retq   

0000008004216de9 <lapicw>:
  8004216de9:	55                   	push   %rbp
  8004216dea:	48 89 e5             	mov    %rsp,%rbp
  8004216ded:	48 83 ec 08          	sub    $0x8,%rsp
  8004216df1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004216df4:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004216df7:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216dfe:	00 00 00 
  8004216e01:	48 8b 00             	mov    (%rax),%rax
  8004216e04:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216e07:	48 63 d2             	movslq %edx,%rdx
  8004216e0a:	48 c1 e2 02          	shl    $0x2,%rdx
  8004216e0e:	48 01 c2             	add    %rax,%rdx
  8004216e11:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216e14:	89 02                	mov    %eax,(%rdx)
  8004216e16:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216e1d:	00 00 00 
  8004216e20:	48 8b 00             	mov    (%rax),%rax
  8004216e23:	48 83 c0 20          	add    $0x20,%rax
  8004216e27:	8b 00                	mov    (%rax),%eax
  8004216e29:	c9                   	leaveq 
  8004216e2a:	c3                   	retq   

0000008004216e2b <lapic_init>:
  8004216e2b:	55                   	push   %rbp
  8004216e2c:	48 89 e5             	mov    %rsp,%rbp
  8004216e2f:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216e36:	00 00 00 
  8004216e39:	48 8b 00             	mov    (%rax),%rax
  8004216e3c:	48 85 c0             	test   %rax,%rax
  8004216e3f:	75 05                	jne    8004216e46 <lapic_init+0x1b>
  8004216e41:	e9 da 01 00 00       	jmpq   8004217020 <lapic_init+0x1f5>
  8004216e46:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004216e4d:	00 00 00 
  8004216e50:	48 8b 00             	mov    (%rax),%rax
  8004216e53:	be 00 10 00 00       	mov    $0x1000,%esi
  8004216e58:	48 89 c7             	mov    %rax,%rdi
  8004216e5b:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004216e62:	00 00 00 
  8004216e65:	ff d0                	callq  *%rax
  8004216e67:	48 ba 08 e0 6d 04 80 	movabs $0x80046de008,%rdx
  8004216e6e:	00 00 00 
  8004216e71:	48 89 02             	mov    %rax,(%rdx)
  8004216e74:	be 27 01 00 00       	mov    $0x127,%esi
  8004216e79:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004216e7e:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216e85:	00 00 00 
  8004216e88:	ff d0                	callq  *%rax
  8004216e8a:	be 0b 00 00 00       	mov    $0xb,%esi
  8004216e8f:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004216e94:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216e9b:	00 00 00 
  8004216e9e:	ff d0                	callq  *%rax
  8004216ea0:	be 20 00 02 00       	mov    $0x20020,%esi
  8004216ea5:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004216eaa:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216eb1:	00 00 00 
  8004216eb4:	ff d0                	callq  *%rax
  8004216eb6:	be 80 96 98 00       	mov    $0x989680,%esi
  8004216ebb:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004216ec0:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216ec7:	00 00 00 
  8004216eca:	ff d0                	callq  *%rax
  8004216ecc:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004216ed3:	00 00 00 
  8004216ed6:	ff d0                	callq  *%rax
  8004216ed8:	48 98                	cltq   
  8004216eda:	48 c1 e0 03          	shl    $0x3,%rax
  8004216ede:	48 89 c2             	mov    %rax,%rdx
  8004216ee1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216ee5:	48 01 d0             	add    %rdx,%rax
  8004216ee8:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004216eef:	00 00 00 
  8004216ef2:	48 01 c2             	add    %rax,%rdx
  8004216ef5:	48 b8 40 d2 69 04 80 	movabs $0x800469d240,%rax
  8004216efc:	00 00 00 
  8004216eff:	48 8b 00             	mov    (%rax),%rax
  8004216f02:	48 39 c2             	cmp    %rax,%rdx
  8004216f05:	74 16                	je     8004216f1d <lapic_init+0xf2>
  8004216f07:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f0c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004216f11:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216f18:	00 00 00 
  8004216f1b:	ff d0                	callq  *%rax
  8004216f1d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f22:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004216f27:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216f2e:	00 00 00 
  8004216f31:	ff d0                	callq  *%rax
  8004216f33:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216f3a:	00 00 00 
  8004216f3d:	48 8b 00             	mov    (%rax),%rax
  8004216f40:	48 83 c0 30          	add    $0x30,%rax
  8004216f44:	8b 00                	mov    (%rax),%eax
  8004216f46:	c1 e8 10             	shr    $0x10,%eax
  8004216f49:	0f b6 c0             	movzbl %al,%eax
  8004216f4c:	83 f8 03             	cmp    $0x3,%eax
  8004216f4f:	76 16                	jbe    8004216f67 <lapic_init+0x13c>
  8004216f51:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f56:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004216f5b:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216f62:	00 00 00 
  8004216f65:	ff d0                	callq  *%rax
  8004216f67:	be 33 00 00 00       	mov    $0x33,%esi
  8004216f6c:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004216f71:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216f78:	00 00 00 
  8004216f7b:	ff d0                	callq  *%rax
  8004216f7d:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f82:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216f87:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216f8e:	00 00 00 
  8004216f91:	ff d0                	callq  *%rax
  8004216f93:	be 00 00 00 00       	mov    $0x0,%esi
  8004216f98:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216f9d:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216fa4:	00 00 00 
  8004216fa7:	ff d0                	callq  *%rax
  8004216fa9:	be 00 00 00 00       	mov    $0x0,%esi
  8004216fae:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004216fb3:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216fba:	00 00 00 
  8004216fbd:	ff d0                	callq  *%rax
  8004216fbf:	be 00 00 00 00       	mov    $0x0,%esi
  8004216fc4:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004216fc9:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216fd0:	00 00 00 
  8004216fd3:	ff d0                	callq  *%rax
  8004216fd5:	be 00 85 08 00       	mov    $0x88500,%esi
  8004216fda:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004216fdf:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004216fe6:	00 00 00 
  8004216fe9:	ff d0                	callq  *%rax
  8004216feb:	90                   	nop
  8004216fec:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004216ff3:	00 00 00 
  8004216ff6:	48 8b 00             	mov    (%rax),%rax
  8004216ff9:	48 05 00 03 00 00    	add    $0x300,%rax
  8004216fff:	8b 00                	mov    (%rax),%eax
  8004217001:	25 00 10 00 00       	and    $0x1000,%eax
  8004217006:	85 c0                	test   %eax,%eax
  8004217008:	75 e2                	jne    8004216fec <lapic_init+0x1c1>
  800421700a:	be 00 00 00 00       	mov    $0x0,%esi
  800421700f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217014:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  800421701b:	00 00 00 
  800421701e:	ff d0                	callq  *%rax
  8004217020:	5d                   	pop    %rbp
  8004217021:	c3                   	retq   

0000008004217022 <cpunum>:
  8004217022:	55                   	push   %rbp
  8004217023:	48 89 e5             	mov    %rsp,%rbp
  8004217026:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  800421702d:	00 00 00 
  8004217030:	48 8b 00             	mov    (%rax),%rax
  8004217033:	48 85 c0             	test   %rax,%rax
  8004217036:	74 18                	je     8004217050 <cpunum+0x2e>
  8004217038:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  800421703f:	00 00 00 
  8004217042:	48 8b 00             	mov    (%rax),%rax
  8004217045:	48 83 c0 20          	add    $0x20,%rax
  8004217049:	8b 00                	mov    (%rax),%eax
  800421704b:	c1 e8 18             	shr    $0x18,%eax
  800421704e:	eb 05                	jmp    8004217055 <cpunum+0x33>
  8004217050:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217055:	5d                   	pop    %rbp
  8004217056:	c3                   	retq   

0000008004217057 <lapic_eoi>:
  8004217057:	55                   	push   %rbp
  8004217058:	48 89 e5             	mov    %rsp,%rbp
  800421705b:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004217062:	00 00 00 
  8004217065:	48 8b 00             	mov    (%rax),%rax
  8004217068:	48 85 c0             	test   %rax,%rax
  800421706b:	74 16                	je     8004217083 <lapic_eoi+0x2c>
  800421706d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217072:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217077:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  800421707e:	00 00 00 
  8004217081:	ff d0                	callq  *%rax
  8004217083:	5d                   	pop    %rbp
  8004217084:	c3                   	retq   

0000008004217085 <microdelay>:
  8004217085:	55                   	push   %rbp
  8004217086:	48 89 e5             	mov    %rsp,%rbp
  8004217089:	48 83 ec 04          	sub    $0x4,%rsp
  800421708d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217090:	c9                   	leaveq 
  8004217091:	c3                   	retq   

0000008004217092 <lapic_startap>:
  8004217092:	55                   	push   %rbp
  8004217093:	48 89 e5             	mov    %rsp,%rbp
  8004217096:	48 83 ec 40          	sub    $0x40,%rsp
  800421709a:	89 f8                	mov    %edi,%eax
  800421709c:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800421709f:	88 45 cc             	mov    %al,-0x34(%rbp)
  80042170a2:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  80042170a9:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  80042170ad:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042170b1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042170b4:	ee                   	out    %al,(%dx)
  80042170b5:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  80042170bc:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  80042170c0:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042170c4:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042170c7:	ee                   	out    %al,(%dx)
  80042170c8:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  80042170cf:	00 
  80042170d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042170d8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042170db:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042170de:	48 b8 f0 b5 69 04 80 	movabs $0x800469b5f0,%rax
  80042170e5:	00 00 00 
  80042170e8:	48 8b 00             	mov    (%rax),%rax
  80042170eb:	48 39 c2             	cmp    %rax,%rdx
  80042170ee:	72 32                	jb     8004217122 <lapic_startap+0x90>
  80042170f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170f4:	48 89 c1             	mov    %rax,%rcx
  80042170f7:	48 ba d0 b4 21 04 80 	movabs $0x800421b4d0,%rdx
  80042170fe:	00 00 00 
  8004217101:	be 99 00 00 00       	mov    $0x99,%esi
  8004217106:	48 bf f3 b4 21 04 80 	movabs $0x800421b4f3,%rdi
  800421710d:	00 00 00 
  8004217110:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217115:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421711c:	00 00 00 
  800421711f:	41 ff d0             	callq  *%r8
  8004217122:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217129:	00 00 00 
  800421712c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217130:	48 01 d0             	add    %rdx,%rax
  8004217133:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217137:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421713b:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217140:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217144:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217148:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421714b:	c1 e8 04             	shr    $0x4,%eax
  800421714e:	66 89 02             	mov    %ax,(%rdx)
  8004217151:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217155:	c1 e0 18             	shl    $0x18,%eax
  8004217158:	89 c6                	mov    %eax,%esi
  800421715a:	bf c4 00 00 00       	mov    $0xc4,%edi
  800421715f:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004217166:	00 00 00 
  8004217169:	ff d0                	callq  *%rax
  800421716b:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217170:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217175:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  800421717c:	00 00 00 
  800421717f:	ff d0                	callq  *%rax
  8004217181:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217186:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  800421718d:	00 00 00 
  8004217190:	ff d0                	callq  *%rax
  8004217192:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217197:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421719c:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  80042171a3:	00 00 00 
  80042171a6:	ff d0                	callq  *%rax
  80042171a8:	bf 64 00 00 00       	mov    $0x64,%edi
  80042171ad:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  80042171b4:	00 00 00 
  80042171b7:	ff d0                	callq  *%rax
  80042171b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042171c0:	eb 4b                	jmp    800421720d <lapic_startap+0x17b>
  80042171c2:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042171c6:	c1 e0 18             	shl    $0x18,%eax
  80042171c9:	89 c6                	mov    %eax,%esi
  80042171cb:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042171d0:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  80042171d7:	00 00 00 
  80042171da:	ff d0                	callq  *%rax
  80042171dc:	8b 45 c8             	mov    -0x38(%rbp),%eax
  80042171df:	c1 e8 0c             	shr    $0xc,%eax
  80042171e2:	80 cc 06             	or     $0x6,%ah
  80042171e5:	89 c6                	mov    %eax,%esi
  80042171e7:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042171ec:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  80042171f3:	00 00 00 
  80042171f6:	ff d0                	callq  *%rax
  80042171f8:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042171fd:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  8004217204:	00 00 00 
  8004217207:	ff d0                	callq  *%rax
  8004217209:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421720d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217211:	7e af                	jle    80042171c2 <lapic_startap+0x130>
  8004217213:	c9                   	leaveq 
  8004217214:	c3                   	retq   

0000008004217215 <lapic_ipi>:
  8004217215:	55                   	push   %rbp
  8004217216:	48 89 e5             	mov    %rsp,%rbp
  8004217219:	48 83 ec 08          	sub    $0x8,%rsp
  800421721d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217220:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217223:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217228:	89 c6                	mov    %eax,%esi
  800421722a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421722f:	48 b8 e9 6d 21 04 80 	movabs $0x8004216de9,%rax
  8004217236:	00 00 00 
  8004217239:	ff d0                	callq  *%rax
  800421723b:	90                   	nop
  800421723c:	48 b8 08 e0 6d 04 80 	movabs $0x80046de008,%rax
  8004217243:	00 00 00 
  8004217246:	48 8b 00             	mov    (%rax),%rax
  8004217249:	48 05 00 03 00 00    	add    $0x300,%rax
  800421724f:	8b 00                	mov    (%rax),%eax
  8004217251:	25 00 10 00 00       	and    $0x1000,%eax
  8004217256:	85 c0                	test   %eax,%eax
  8004217258:	75 e2                	jne    800421723c <lapic_ipi+0x27>
  800421725a:	c9                   	leaveq 
  800421725b:	c3                   	retq   

000000800421725c <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800421725c:	55                   	push   %rbp
  800421725d:	48 89 e5             	mov    %rsp,%rbp
  8004217260:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217264:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217268:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800421726b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421726f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217272:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217276:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217279:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800421727c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800421727f:	c9                   	leaveq 
  8004217280:	c3                   	retq   

0000008004217281 <get_caller_pcs>:
  8004217281:	55                   	push   %rbp
  8004217282:	48 89 e5             	mov    %rsp,%rbp
  8004217285:	48 83 ec 28          	sub    $0x28,%rsp
  8004217289:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  800421728d:	48 89 e8             	mov    %rbp,%rax
  8004217290:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217298:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421729c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042172a3:	eb 45                	jmp    80042172ea <get_caller_pcs+0x69>
  80042172a5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042172aa:	74 44                	je     80042172f0 <get_caller_pcs+0x6f>
  80042172ac:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042172b3:	00 00 00 
  80042172b6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042172ba:	76 34                	jbe    80042172f0 <get_caller_pcs+0x6f>
  80042172bc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042172bf:	48 98                	cltq   
  80042172c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042172c8:	00 
  80042172c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172cd:	48 01 c2             	add    %rax,%rdx
  80042172d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042172d4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042172d8:	48 89 02             	mov    %rax,(%rdx)
  80042172db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042172df:	48 8b 00             	mov    (%rax),%rax
  80042172e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042172e6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042172ea:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042172ee:	7e b5                	jle    80042172a5 <get_caller_pcs+0x24>
  80042172f0:	eb 1f                	jmp    8004217311 <get_caller_pcs+0x90>
  80042172f2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042172f5:	48 98                	cltq   
  80042172f7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042172fe:	00 
  80042172ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217303:	48 01 d0             	add    %rdx,%rax
  8004217306:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421730d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217311:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217315:	7e db                	jle    80042172f2 <get_caller_pcs+0x71>
  8004217317:	c9                   	leaveq 
  8004217318:	c3                   	retq   

0000008004217319 <holding>:
  8004217319:	55                   	push   %rbp
  800421731a:	48 89 e5             	mov    %rsp,%rbp
  800421731d:	53                   	push   %rbx
  800421731e:	48 83 ec 18          	sub    $0x18,%rsp
  8004217322:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421732a:	8b 00                	mov    (%rax),%eax
  800421732c:	85 c0                	test   %eax,%eax
  800421732e:	74 3d                	je     800421736d <holding+0x54>
  8004217330:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217334:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217338:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800421733f:	00 00 00 
  8004217342:	ff d0                	callq  *%rax
  8004217344:	48 98                	cltq   
  8004217346:	48 c1 e0 03          	shl    $0x3,%rax
  800421734a:	48 89 c2             	mov    %rax,%rdx
  800421734d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217351:	48 01 d0             	add    %rdx,%rax
  8004217354:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  800421735b:	00 00 00 
  800421735e:	48 01 d0             	add    %rdx,%rax
  8004217361:	48 39 c3             	cmp    %rax,%rbx
  8004217364:	75 07                	jne    800421736d <holding+0x54>
  8004217366:	b8 01 00 00 00       	mov    $0x1,%eax
  800421736b:	eb 05                	jmp    8004217372 <holding+0x59>
  800421736d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217372:	48 83 c4 18          	add    $0x18,%rsp
  8004217376:	5b                   	pop    %rbx
  8004217377:	5d                   	pop    %rbp
  8004217378:	c3                   	retq   

0000008004217379 <__spin_initlock>:
  8004217379:	55                   	push   %rbp
  800421737a:	48 89 e5             	mov    %rsp,%rbp
  800421737d:	48 83 ec 10          	sub    $0x10,%rsp
  8004217381:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217385:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421738d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217393:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217397:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421739b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421739f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042173a3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042173aa:	00 
  80042173ab:	c9                   	leaveq 
  80042173ac:	c3                   	retq   

00000080042173ad <spin_lock>:
  80042173ad:	55                   	push   %rbp
  80042173ae:	48 89 e5             	mov    %rsp,%rbp
  80042173b1:	53                   	push   %rbx
  80042173b2:	48 83 ec 18          	sub    $0x18,%rsp
  80042173b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042173ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173be:	48 89 c7             	mov    %rax,%rdi
  80042173c1:	48 b8 19 73 21 04 80 	movabs $0x8004217319,%rax
  80042173c8:	00 00 00 
  80042173cb:	ff d0                	callq  *%rax
  80042173cd:	85 c0                	test   %eax,%eax
  80042173cf:	74 44                	je     8004217415 <spin_lock+0x68>
  80042173d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173d5:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042173d9:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  80042173e0:	00 00 00 
  80042173e3:	ff d0                	callq  *%rax
  80042173e5:	49 89 d8             	mov    %rbx,%r8
  80042173e8:	89 c1                	mov    %eax,%ecx
  80042173ea:	48 ba 18 b5 21 04 80 	movabs $0x800421b518,%rdx
  80042173f1:	00 00 00 
  80042173f4:	be 42 00 00 00       	mov    $0x42,%esi
  80042173f9:	48 bf 42 b5 21 04 80 	movabs $0x800421b542,%rdi
  8004217400:	00 00 00 
  8004217403:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217408:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800421740f:	00 00 00 
  8004217412:	41 ff d1             	callq  *%r9
  8004217415:	eb 02                	jmp    8004217419 <spin_lock+0x6c>
  8004217417:	f3 90                	pause  
  8004217419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421741d:	be 01 00 00 00       	mov    $0x1,%esi
  8004217422:	48 89 c7             	mov    %rax,%rdi
  8004217425:	48 b8 5c 72 21 04 80 	movabs $0x800421725c,%rax
  800421742c:	00 00 00 
  800421742f:	ff d0                	callq  *%rax
  8004217431:	85 c0                	test   %eax,%eax
  8004217433:	75 e2                	jne    8004217417 <spin_lock+0x6a>
  8004217435:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800421743c:	00 00 00 
  800421743f:	ff d0                	callq  *%rax
  8004217441:	48 98                	cltq   
  8004217443:	48 c1 e0 03          	shl    $0x3,%rax
  8004217447:	48 89 c2             	mov    %rax,%rdx
  800421744a:	48 c1 e2 04          	shl    $0x4,%rdx
  800421744e:	48 01 d0             	add    %rdx,%rax
  8004217451:	48 ba 20 d0 69 04 80 	movabs $0x800469d020,%rdx
  8004217458:	00 00 00 
  800421745b:	48 01 c2             	add    %rax,%rdx
  800421745e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217462:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421746a:	48 83 c0 18          	add    $0x18,%rax
  800421746e:	48 89 c7             	mov    %rax,%rdi
  8004217471:	48 b8 81 72 21 04 80 	movabs $0x8004217281,%rax
  8004217478:	00 00 00 
  800421747b:	ff d0                	callq  *%rax
  800421747d:	48 83 c4 18          	add    $0x18,%rsp
  8004217481:	5b                   	pop    %rbx
  8004217482:	5d                   	pop    %rbp
  8004217483:	c3                   	retq   

0000008004217484 <spin_unlock>:
  8004217484:	55                   	push   %rbp
  8004217485:	48 89 e5             	mov    %rsp,%rbp
  8004217488:	41 54                	push   %r12
  800421748a:	53                   	push   %rbx
  800421748b:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217492:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217499:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174a0:	48 89 c7             	mov    %rax,%rdi
  80042174a3:	48 b8 19 73 21 04 80 	movabs $0x8004217319,%rax
  80042174aa:	00 00 00 
  80042174ad:	ff d0                	callq  *%rax
  80042174af:	85 c0                	test   %eax,%eax
  80042174b1:	0f 85 d2 01 00 00    	jne    8004217689 <spin_unlock+0x205>
  80042174b7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174be:	48 8d 48 18          	lea    0x18(%rax),%rcx
  80042174c2:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  80042174c9:	ba 28 00 00 00       	mov    $0x28,%edx
  80042174ce:	48 89 ce             	mov    %rcx,%rsi
  80042174d1:	48 89 c7             	mov    %rax,%rdi
  80042174d4:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  80042174db:	00 00 00 
  80042174de:	ff d0                	callq  *%rax
  80042174e0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174e7:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042174eb:	48 85 c0             	test   %rax,%rax
  80042174ee:	75 39                	jne    8004217529 <spin_unlock+0xa5>
  80042174f0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042174f7:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042174fb:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  8004217502:	00 00 00 
  8004217505:	ff d0                	callq  *%rax
  8004217507:	48 89 da             	mov    %rbx,%rdx
  800421750a:	89 c6                	mov    %eax,%esi
  800421750c:	48 bf 58 b5 21 04 80 	movabs $0x800421b558,%rdi
  8004217513:	00 00 00 
  8004217516:	b8 00 00 00 00       	mov    $0x0,%eax
  800421751b:	48 b9 c3 95 20 04 80 	movabs $0x80042095c3,%rcx
  8004217522:	00 00 00 
  8004217525:	ff d1                	callq  *%rcx
  8004217527:	eb 4d                	jmp    8004217576 <spin_unlock+0xf2>
  8004217529:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217530:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217534:	0f b6 00             	movzbl (%rax),%eax
  8004217537:	44 0f b6 e0          	movzbl %al,%r12d
  800421753b:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217542:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217546:	48 b8 22 70 21 04 80 	movabs $0x8004217022,%rax
  800421754d:	00 00 00 
  8004217550:	ff d0                	callq  *%rax
  8004217552:	44 89 e1             	mov    %r12d,%ecx
  8004217555:	48 89 da             	mov    %rbx,%rdx
  8004217558:	89 c6                	mov    %eax,%esi
  800421755a:	48 bf 98 b5 21 04 80 	movabs $0x800421b598,%rdi
  8004217561:	00 00 00 
  8004217564:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217569:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  8004217570:	00 00 00 
  8004217573:	41 ff d0             	callq  *%r8
  8004217576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800421757d:	e9 c3 00 00 00       	jmpq   8004217645 <spin_unlock+0x1c1>
  8004217582:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217585:	48 98                	cltq   
  8004217587:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421758e:	89 c0                	mov    %eax,%eax
  8004217590:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  8004217597:	48 89 d6             	mov    %rdx,%rsi
  800421759a:	48 89 c7             	mov    %rax,%rdi
  800421759d:	48 b8 8c ec 20 04 80 	movabs $0x800420ec8c,%rax
  80042175a4:	00 00 00 
  80042175a7:	ff d0                	callq  *%rax
  80042175a9:	85 c0                	test   %eax,%eax
  80042175ab:	78 6b                	js     8004217618 <spin_unlock+0x194>
  80042175ad:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042175b0:	48 98                	cltq   
  80042175b2:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042175b9:	89 c2                	mov    %eax,%edx
  80042175bb:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  80042175c2:	48 29 c2             	sub    %rax,%rdx
  80042175c5:	49 89 d0             	mov    %rdx,%r8
  80042175c8:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  80042175cf:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  80042175d5:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  80042175db:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  80042175e2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042175e5:	48 98                	cltq   
  80042175e7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042175ee:	4c 89 04 24          	mov    %r8,(%rsp)
  80042175f2:	49 89 f9             	mov    %rdi,%r9
  80042175f5:	41 89 f0             	mov    %esi,%r8d
  80042175f8:	89 c6                	mov    %eax,%esi
  80042175fa:	48 bf ce b5 21 04 80 	movabs $0x800421b5ce,%rdi
  8004217601:	00 00 00 
  8004217604:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217609:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  8004217610:	00 00 00 
  8004217613:	41 ff d2             	callq  *%r10
  8004217616:	eb 29                	jmp    8004217641 <spin_unlock+0x1bd>
  8004217618:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421761b:	48 98                	cltq   
  800421761d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217624:	89 c6                	mov    %eax,%esi
  8004217626:	48 bf e5 b5 21 04 80 	movabs $0x800421b5e5,%rdi
  800421762d:	00 00 00 
  8004217630:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217635:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  800421763c:	00 00 00 
  800421763f:	ff d2                	callq  *%rdx
  8004217641:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004217645:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004217649:	7f 14                	jg     800421765f <spin_unlock+0x1db>
  800421764b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421764e:	48 98                	cltq   
  8004217650:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217657:	85 c0                	test   %eax,%eax
  8004217659:	0f 85 23 ff ff ff    	jne    8004217582 <spin_unlock+0xfe>
  800421765f:	48 ba ed b5 21 04 80 	movabs $0x800421b5ed,%rdx
  8004217666:	00 00 00 
  8004217669:	be 6c 00 00 00       	mov    $0x6c,%esi
  800421766e:	48 bf 42 b5 21 04 80 	movabs $0x800421b542,%rdi
  8004217675:	00 00 00 
  8004217678:	b8 00 00 00 00       	mov    $0x0,%eax
  800421767d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004217684:	00 00 00 
  8004217687:	ff d1                	callq  *%rcx
  8004217689:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217690:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8004217697:	00 
  8004217698:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421769f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042176a6:	00 
  80042176a7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042176ae:	be 00 00 00 00       	mov    $0x0,%esi
  80042176b3:	48 89 c7             	mov    %rax,%rdi
  80042176b6:	48 b8 5c 72 21 04 80 	movabs $0x800421725c,%rax
  80042176bd:	00 00 00 
  80042176c0:	ff d0                	callq  *%rax
  80042176c2:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  80042176c9:	5b                   	pop    %rbx
  80042176ca:	41 5c                	pop    %r12
  80042176cc:	5d                   	pop    %rbp
  80042176cd:	c3                   	retq   

00000080042176ce <e1000_attach>:
  80042176ce:	55                   	push   %rbp
  80042176cf:	48 89 e5             	mov    %rsp,%rbp
  80042176d2:	48 83 ec 40          	sub    $0x40,%rsp
  80042176d6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042176da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042176de:	48 89 c7             	mov    %rax,%rdi
  80042176e1:	48 b8 8b 85 21 04 80 	movabs $0x800421858b,%rax
  80042176e8:	00 00 00 
  80042176eb:	ff d0                	callq  *%rax
  80042176ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042176f1:	8b 40 30             	mov    0x30(%rax),%eax
  80042176f4:	89 c2                	mov    %eax,%edx
  80042176f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042176fa:	8b 40 18             	mov    0x18(%rax),%eax
  80042176fd:	89 c0                	mov    %eax,%eax
  80042176ff:	48 89 d6             	mov    %rdx,%rsi
  8004217702:	48 89 c7             	mov    %rax,%rdi
  8004217705:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800421770c:	00 00 00 
  800421770f:	ff d0                	callq  *%rax
  8004217711:	48 ba 20 d7 49 04 80 	movabs $0x800449d720,%rdx
  8004217718:	00 00 00 
  800421771b:	48 89 02             	mov    %rax,(%rdx)
  800421771e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217725:	e9 a9 00 00 00       	jmpq   80042177d3 <e1000_attach+0x105>
  800421772a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421772d:	48 98                	cltq   
  800421772f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  8004217736:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  800421773d:	00 00 00 
  8004217740:	48 01 d0             	add    %rdx,%rax
  8004217743:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217747:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421774e:	00 00 00 
  8004217751:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004217755:	77 32                	ja     8004217789 <e1000_attach+0xbb>
  8004217757:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421775b:	48 89 c1             	mov    %rax,%rcx
  800421775e:	48 ba 00 b6 21 04 80 	movabs $0x800421b600,%rdx
  8004217765:	00 00 00 
  8004217768:	be 97 00 00 00       	mov    $0x97,%esi
  800421776d:	48 bf 24 b6 21 04 80 	movabs $0x800421b624,%rdi
  8004217774:	00 00 00 
  8004217777:	b8 00 00 00 00       	mov    $0x0,%eax
  800421777c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217783:	00 00 00 
  8004217786:	41 ff d0             	callq  *%r8
  8004217789:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217790:	ff ff ff 
  8004217793:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217797:	48 01 c2             	add    %rax,%rdx
  800421779a:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042177a1:	00 00 00 
  80042177a4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042177a7:	48 63 c9             	movslq %ecx,%rcx
  80042177aa:	48 c1 e1 04          	shl    $0x4,%rcx
  80042177ae:	48 01 c8             	add    %rcx,%rax
  80042177b1:	48 89 10             	mov    %rdx,(%rax)
  80042177b4:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042177bb:	00 00 00 
  80042177be:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042177c1:	48 63 d2             	movslq %edx,%rdx
  80042177c4:	48 c1 e2 04          	shl    $0x4,%rdx
  80042177c8:	48 01 d0             	add    %rdx,%rax
  80042177cb:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  80042177cf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042177d3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042177d7:	0f 8e 4d ff ff ff    	jle    800421772a <e1000_attach+0x5c>
  80042177dd:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042177e4:	00 00 00 
  80042177e7:	48 8b 00             	mov    (%rax),%rax
  80042177ea:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  80042177f1:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  80042177f8:	00 00 00 
  80042177fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042177ff:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217806:	00 00 00 
  8004217809:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421780d:	77 32                	ja     8004217841 <e1000_attach+0x173>
  800421780f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217813:	48 89 c1             	mov    %rax,%rcx
  8004217816:	48 ba 00 b6 21 04 80 	movabs $0x800421b600,%rdx
  800421781d:	00 00 00 
  8004217820:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004217825:	48 bf 24 b6 21 04 80 	movabs $0x800421b624,%rdi
  800421782c:	00 00 00 
  800421782f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217834:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421783b:	00 00 00 
  800421783e:	41 ff d0             	callq  *%r8
  8004217841:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217848:	ff ff ff 
  800421784b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421784f:	48 01 c8             	add    %rcx,%rax
  8004217852:	89 02                	mov    %eax,(%rdx)
  8004217854:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421785b:	00 00 00 
  800421785e:	48 8b 00             	mov    (%rax),%rax
  8004217861:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004217867:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  800421786d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217874:	00 00 00 
  8004217877:	48 8b 00             	mov    (%rax),%rax
  800421787a:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004217881:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217888:	00 00 00 
  800421788b:	48 8b 00             	mov    (%rax),%rax
  800421788e:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217895:	b8 00 00 00 00       	mov    $0x0,%eax
  800421789a:	89 01                	mov    %eax,(%rcx)
  800421789c:	89 02                	mov    %eax,(%rdx)
  800421789e:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042178a5:	00 00 00 
  80042178a8:	48 8b 00             	mov    (%rax),%rax
  80042178ab:	48 05 00 04 00 00    	add    $0x400,%rax
  80042178b1:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  80042178b7:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042178be:	00 00 00 
  80042178c1:	48 8b 00             	mov    (%rax),%rax
  80042178c4:	48 05 10 04 00 00    	add    $0x410,%rax
  80042178ca:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  80042178d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042178d7:	e9 8e 00 00 00       	jmpq   800421796a <e1000_attach+0x29c>
  80042178dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042178df:	48 98                	cltq   
  80042178e1:	48 c1 e0 0b          	shl    $0xb,%rax
  80042178e5:	48 89 c2             	mov    %rax,%rdx
  80042178e8:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  80042178ef:	00 00 00 
  80042178f2:	48 01 d0             	add    %rdx,%rax
  80042178f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042178f9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217900:	00 00 00 
  8004217903:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004217907:	77 32                	ja     800421793b <e1000_attach+0x26d>
  8004217909:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421790d:	48 89 c1             	mov    %rax,%rcx
  8004217910:	48 ba 00 b6 21 04 80 	movabs $0x800421b600,%rdx
  8004217917:	00 00 00 
  800421791a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421791f:	48 bf 24 b6 21 04 80 	movabs $0x800421b624,%rdi
  8004217926:	00 00 00 
  8004217929:	b8 00 00 00 00       	mov    $0x0,%eax
  800421792e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217935:	00 00 00 
  8004217938:	41 ff d0             	callq  *%r8
  800421793b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217942:	ff ff ff 
  8004217945:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217949:	48 01 c2             	add    %rax,%rdx
  800421794c:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217953:	00 00 00 
  8004217956:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217959:	48 63 c9             	movslq %ecx,%rcx
  800421795c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217960:	48 01 c8             	add    %rcx,%rax
  8004217963:	48 89 10             	mov    %rdx,(%rax)
  8004217966:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421796a:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004217971:	0f 8e 65 ff ff ff    	jle    80042178dc <e1000_attach+0x20e>
  8004217977:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  800421797e:	00 00 00 
  8004217981:	48 8b 00             	mov    (%rax),%rax
  8004217984:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  800421798b:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217992:	00 00 00 
  8004217995:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217999:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042179a0:	00 00 00 
  80042179a3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042179a7:	77 32                	ja     80042179db <e1000_attach+0x30d>
  80042179a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042179ad:	48 89 c1             	mov    %rax,%rcx
  80042179b0:	48 ba 00 b6 21 04 80 	movabs $0x800421b600,%rdx
  80042179b7:	00 00 00 
  80042179ba:	be ba 00 00 00       	mov    $0xba,%esi
  80042179bf:	48 bf 24 b6 21 04 80 	movabs $0x800421b624,%rdi
  80042179c6:	00 00 00 
  80042179c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179ce:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042179d5:	00 00 00 
  80042179d8:	41 ff d0             	callq  *%r8
  80042179db:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042179e2:	ff ff ff 
  80042179e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042179e9:	48 01 c8             	add    %rcx,%rax
  80042179ec:	89 02                	mov    %eax,(%rdx)
  80042179ee:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  80042179f5:	00 00 00 
  80042179f8:	48 8b 00             	mov    (%rax),%rax
  80042179fb:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004217a01:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004217a07:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a0e:	00 00 00 
  8004217a11:	48 8b 00             	mov    (%rax),%rax
  8004217a14:	48 05 10 28 00 00    	add    $0x2810,%rax
  8004217a1a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217a20:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a27:	00 00 00 
  8004217a2a:	48 8b 00             	mov    (%rax),%rax
  8004217a2d:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217a33:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004217a39:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a40:	00 00 00 
  8004217a43:	48 8b 00             	mov    (%rax),%rax
  8004217a46:	48 05 00 01 00 00    	add    $0x100,%rax
  8004217a4c:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004217a52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a57:	c9                   	leaveq 
  8004217a58:	c3                   	retq   

0000008004217a59 <e1000_transmit>:
  8004217a59:	55                   	push   %rbp
  8004217a5a:	48 89 e5             	mov    %rsp,%rbp
  8004217a5d:	48 83 ec 20          	sub    $0x20,%rsp
  8004217a61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217a65:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217a68:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a6f:	00 00 00 
  8004217a72:	48 8b 00             	mov    (%rax),%rax
  8004217a75:	48 85 c0             	test   %rax,%rax
  8004217a78:	74 09                	je     8004217a83 <e1000_transmit+0x2a>
  8004217a7a:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004217a81:	76 0a                	jbe    8004217a8d <e1000_transmit+0x34>
  8004217a83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004217a88:	e9 39 01 00 00       	jmpq   8004217bc6 <e1000_transmit+0x16d>
  8004217a8d:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217a94:	00 00 00 
  8004217a97:	48 8b 00             	mov    (%rax),%rax
  8004217a9a:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004217aa0:	8b 00                	mov    (%rax),%eax
  8004217aa2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217aa5:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217aac:	00 00 00 
  8004217aaf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217ab2:	48 63 d2             	movslq %edx,%rdx
  8004217ab5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217ab9:	48 01 d0             	add    %rdx,%rax
  8004217abc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217ac0:	0f b6 c0             	movzbl %al,%eax
  8004217ac3:	83 e0 01             	and    $0x1,%eax
  8004217ac6:	85 c0                	test   %eax,%eax
  8004217ac8:	75 25                	jne    8004217aef <e1000_transmit+0x96>
  8004217aca:	48 bf 34 b6 21 04 80 	movabs $0x800421b634,%rdi
  8004217ad1:	00 00 00 
  8004217ad4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ad9:	48 ba c3 95 20 04 80 	movabs $0x80042095c3,%rdx
  8004217ae0:	00 00 00 
  8004217ae3:	ff d2                	callq  *%rdx
  8004217ae5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217aea:	e9 d7 00 00 00       	jmpq   8004217bc6 <e1000_transmit+0x16d>
  8004217aef:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217af2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217af5:	48 98                	cltq   
  8004217af7:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004217afe:	48 b8 40 d8 49 04 80 	movabs $0x800449d840,%rax
  8004217b05:	00 00 00 
  8004217b08:	48 01 c1             	add    %rax,%rcx
  8004217b0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217b0f:	48 89 c6             	mov    %rax,%rsi
  8004217b12:	48 89 cf             	mov    %rcx,%rdi
  8004217b15:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  8004217b1c:	00 00 00 
  8004217b1f:	ff d0                	callq  *%rax
  8004217b21:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217b24:	48 ba 30 d7 49 04 80 	movabs $0x800449d730,%rdx
  8004217b2b:	00 00 00 
  8004217b2e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217b31:	48 63 c9             	movslq %ecx,%rcx
  8004217b34:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217b38:	48 01 ca             	add    %rcx,%rdx
  8004217b3b:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004217b3f:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217b46:	00 00 00 
  8004217b49:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b4c:	48 63 d2             	movslq %edx,%rdx
  8004217b4f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b53:	48 01 d0             	add    %rdx,%rax
  8004217b56:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217b5a:	83 e0 fe             	and    $0xfffffffe,%eax
  8004217b5d:	89 c2                	mov    %eax,%edx
  8004217b5f:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217b66:	00 00 00 
  8004217b69:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217b6c:	48 63 c9             	movslq %ecx,%rcx
  8004217b6f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217b73:	48 01 c8             	add    %rcx,%rax
  8004217b76:	88 50 0c             	mov    %dl,0xc(%rax)
  8004217b79:	48 b8 30 d7 49 04 80 	movabs $0x800449d730,%rax
  8004217b80:	00 00 00 
  8004217b83:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b86:	48 63 d2             	movslq %edx,%rdx
  8004217b89:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b8d:	48 01 d0             	add    %rdx,%rax
  8004217b90:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004217b94:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217b9b:	00 00 00 
  8004217b9e:	48 8b 00             	mov    (%rax),%rax
  8004217ba1:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217ba8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217bab:	8d 50 01             	lea    0x1(%rax),%edx
  8004217bae:	89 d0                	mov    %edx,%eax
  8004217bb0:	c1 f8 1f             	sar    $0x1f,%eax
  8004217bb3:	c1 e8 1c             	shr    $0x1c,%eax
  8004217bb6:	01 c2                	add    %eax,%edx
  8004217bb8:	83 e2 0f             	and    $0xf,%edx
  8004217bbb:	29 c2                	sub    %eax,%edx
  8004217bbd:	89 d0                	mov    %edx,%eax
  8004217bbf:	89 01                	mov    %eax,(%rcx)
  8004217bc1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217bc6:	c9                   	leaveq 
  8004217bc7:	c3                   	retq   

0000008004217bc8 <e1000_receive>:
  8004217bc8:	55                   	push   %rbp
  8004217bc9:	48 89 e5             	mov    %rsp,%rbp
  8004217bcc:	48 83 ec 20          	sub    $0x20,%rsp
  8004217bd0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217bd4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217bd7:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217bde:	00 00 00 
  8004217be1:	48 8b 00             	mov    (%rax),%rax
  8004217be4:	48 85 c0             	test   %rax,%rax
  8004217be7:	75 0a                	jne    8004217bf3 <e1000_receive+0x2b>
  8004217be9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217bee:	e9 59 01 00 00       	jmpq   8004217d4c <e1000_receive+0x184>
  8004217bf3:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217bfa:	00 00 00 
  8004217bfd:	48 8b 00             	mov    (%rax),%rax
  8004217c00:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217c06:	8b 00                	mov    (%rax),%eax
  8004217c08:	8d 48 01             	lea    0x1(%rax),%ecx
  8004217c0b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004217c10:	89 c8                	mov    %ecx,%eax
  8004217c12:	f7 e2                	mul    %edx
  8004217c14:	89 d0                	mov    %edx,%eax
  8004217c16:	c1 e8 06             	shr    $0x6,%eax
  8004217c19:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004217c1f:	29 c1                	sub    %eax,%ecx
  8004217c21:	89 c8                	mov    %ecx,%eax
  8004217c23:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217c26:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c2d:	00 00 00 
  8004217c30:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c33:	48 63 d2             	movslq %edx,%rdx
  8004217c36:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c3a:	48 01 d0             	add    %rdx,%rax
  8004217c3d:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217c41:	0f b6 c0             	movzbl %al,%eax
  8004217c44:	83 e0 01             	and    $0x1,%eax
  8004217c47:	85 c0                	test   %eax,%eax
  8004217c49:	75 0a                	jne    8004217c55 <e1000_receive+0x8d>
  8004217c4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c50:	e9 f7 00 00 00       	jmpq   8004217d4c <e1000_receive+0x184>
  8004217c55:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217c5c:	00 00 00 
  8004217c5f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c62:	48 63 d2             	movslq %edx,%rdx
  8004217c65:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c69:	48 01 d0             	add    %rdx,%rax
  8004217c6c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217c70:	0f b6 c0             	movzbl %al,%eax
  8004217c73:	83 e0 02             	and    $0x2,%eax
  8004217c76:	85 c0                	test   %eax,%eax
  8004217c78:	75 35                	jne    8004217caf <e1000_receive+0xe7>
  8004217c7a:	48 b9 48 b6 21 04 80 	movabs $0x800421b648,%rcx
  8004217c81:	00 00 00 
  8004217c84:	48 ba 72 b6 21 04 80 	movabs $0x800421b672,%rdx
  8004217c8b:	00 00 00 
  8004217c8e:	be ef 00 00 00       	mov    $0xef,%esi
  8004217c93:	48 bf 24 b6 21 04 80 	movabs $0x800421b624,%rdi
  8004217c9a:	00 00 00 
  8004217c9d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ca2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217ca9:	00 00 00 
  8004217cac:	41 ff d0             	callq  *%r8
  8004217caf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217cb2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217cb5:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217cbc:	00 00 00 
  8004217cbf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217cc2:	48 63 d2             	movslq %edx,%rdx
  8004217cc5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217cc9:	48 01 d0             	add    %rdx,%rax
  8004217ccc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004217cd0:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004217cd4:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004217cd8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217cdb:	39 c2                	cmp    %eax,%edx
  8004217cdd:	0f 46 c2             	cmovbe %edx,%eax
  8004217ce0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217ce3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217ce6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217ce9:	48 98                	cltq   
  8004217ceb:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217cef:	48 89 c1             	mov    %rax,%rcx
  8004217cf2:	48 b8 a0 75 4a 04 80 	movabs $0x80044a75a0,%rax
  8004217cf9:	00 00 00 
  8004217cfc:	48 01 c1             	add    %rax,%rcx
  8004217cff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d03:	48 89 ce             	mov    %rcx,%rsi
  8004217d06:	48 89 c7             	mov    %rax,%rdi
  8004217d09:	48 b8 ab 00 21 04 80 	movabs $0x80042100ab,%rax
  8004217d10:	00 00 00 
  8004217d13:	ff d0                	callq  *%rax
  8004217d15:	48 b8 20 37 4a 04 80 	movabs $0x80044a3720,%rax
  8004217d1c:	00 00 00 
  8004217d1f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217d22:	48 63 d2             	movslq %edx,%rdx
  8004217d25:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217d29:	48 01 d0             	add    %rdx,%rax
  8004217d2c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004217d30:	48 b8 20 d7 49 04 80 	movabs $0x800449d720,%rax
  8004217d37:	00 00 00 
  8004217d3a:	48 8b 00             	mov    (%rax),%rax
  8004217d3d:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004217d44:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217d47:	89 02                	mov    %eax,(%rdx)
  8004217d49:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217d4c:	c9                   	leaveq 
  8004217d4d:	c3                   	retq   

0000008004217d4e <pci_conf1_set_addr>:
  8004217d4e:	55                   	push   %rbp
  8004217d4f:	48 89 e5             	mov    %rsp,%rbp
  8004217d52:	48 83 ec 20          	sub    $0x20,%rsp
  8004217d56:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217d59:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217d5c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004217d5f:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004217d62:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004217d69:	76 35                	jbe    8004217da0 <pci_conf1_set_addr+0x52>
  8004217d6b:	48 b9 88 b6 21 04 80 	movabs $0x800421b688,%rcx
  8004217d72:	00 00 00 
  8004217d75:	48 ba 92 b6 21 04 80 	movabs $0x800421b692,%rdx
  8004217d7c:	00 00 00 
  8004217d7f:	be 31 00 00 00       	mov    $0x31,%esi
  8004217d84:	48 bf a7 b6 21 04 80 	movabs $0x800421b6a7,%rdi
  8004217d8b:	00 00 00 
  8004217d8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d93:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d9a:	00 00 00 
  8004217d9d:	41 ff d0             	callq  *%r8
  8004217da0:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004217da4:	76 35                	jbe    8004217ddb <pci_conf1_set_addr+0x8d>
  8004217da6:	48 b9 b5 b6 21 04 80 	movabs $0x800421b6b5,%rcx
  8004217dad:	00 00 00 
  8004217db0:	48 ba 92 b6 21 04 80 	movabs $0x800421b692,%rdx
  8004217db7:	00 00 00 
  8004217dba:	be 32 00 00 00       	mov    $0x32,%esi
  8004217dbf:	48 bf a7 b6 21 04 80 	movabs $0x800421b6a7,%rdi
  8004217dc6:	00 00 00 
  8004217dc9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217dce:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217dd5:	00 00 00 
  8004217dd8:	41 ff d0             	callq  *%r8
  8004217ddb:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004217ddf:	76 35                	jbe    8004217e16 <pci_conf1_set_addr+0xc8>
  8004217de1:	48 b9 be b6 21 04 80 	movabs $0x800421b6be,%rcx
  8004217de8:	00 00 00 
  8004217deb:	48 ba 92 b6 21 04 80 	movabs $0x800421b692,%rdx
  8004217df2:	00 00 00 
  8004217df5:	be 33 00 00 00       	mov    $0x33,%esi
  8004217dfa:	48 bf a7 b6 21 04 80 	movabs $0x800421b6a7,%rdi
  8004217e01:	00 00 00 
  8004217e04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217e10:	00 00 00 
  8004217e13:	41 ff d0             	callq  *%r8
  8004217e16:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004217e1d:	76 35                	jbe    8004217e54 <pci_conf1_set_addr+0x106>
  8004217e1f:	48 b9 c7 b6 21 04 80 	movabs $0x800421b6c7,%rcx
  8004217e26:	00 00 00 
  8004217e29:	48 ba 92 b6 21 04 80 	movabs $0x800421b692,%rdx
  8004217e30:	00 00 00 
  8004217e33:	be 34 00 00 00       	mov    $0x34,%esi
  8004217e38:	48 bf a7 b6 21 04 80 	movabs $0x800421b6a7,%rdi
  8004217e3f:	00 00 00 
  8004217e42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e47:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217e4e:	00 00 00 
  8004217e51:	41 ff d0             	callq  *%r8
  8004217e54:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217e57:	83 e0 03             	and    $0x3,%eax
  8004217e5a:	85 c0                	test   %eax,%eax
  8004217e5c:	74 35                	je     8004217e93 <pci_conf1_set_addr+0x145>
  8004217e5e:	48 b9 d4 b6 21 04 80 	movabs $0x800421b6d4,%rcx
  8004217e65:	00 00 00 
  8004217e68:	48 ba 92 b6 21 04 80 	movabs $0x800421b692,%rdx
  8004217e6f:	00 00 00 
  8004217e72:	be 35 00 00 00       	mov    $0x35,%esi
  8004217e77:	48 bf a7 b6 21 04 80 	movabs $0x800421b6a7,%rdi
  8004217e7e:	00 00 00 
  8004217e81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e86:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217e8d:	00 00 00 
  8004217e90:	41 ff d0             	callq  *%r8
  8004217e93:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217e96:	c1 e0 10             	shl    $0x10,%eax
  8004217e99:	89 c2                	mov    %eax,%edx
  8004217e9b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004217e9e:	c1 e0 0b             	shl    $0xb,%eax
  8004217ea1:	09 c2                	or     %eax,%edx
  8004217ea3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217ea6:	c1 e0 08             	shl    $0x8,%eax
  8004217ea9:	09 d0                	or     %edx,%eax
  8004217eab:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004217eae:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004217eb3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217eb6:	48 b8 e4 c7 22 04 80 	movabs $0x800422c7e4,%rax
  8004217ebd:	00 00 00 
  8004217ec0:	8b 00                	mov    (%rax),%eax
  8004217ec2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217ec5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217ec8:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217ecb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217ece:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004217ed1:	ef                   	out    %eax,(%dx)
  8004217ed2:	c9                   	leaveq 
  8004217ed3:	c3                   	retq   

0000008004217ed4 <pci_conf_read>:
  8004217ed4:	55                   	push   %rbp
  8004217ed5:	48 89 e5             	mov    %rsp,%rbp
  8004217ed8:	48 83 ec 20          	sub    $0x20,%rsp
  8004217edc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217ee0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217ee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ee7:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217eea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217eee:	8b 70 08             	mov    0x8(%rax),%esi
  8004217ef1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ef5:	48 8b 00             	mov    (%rax),%rax
  8004217ef8:	8b 40 08             	mov    0x8(%rax),%eax
  8004217efb:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217efe:	89 c7                	mov    %eax,%edi
  8004217f00:	48 b8 4e 7d 21 04 80 	movabs $0x8004217d4e,%rax
  8004217f07:	00 00 00 
  8004217f0a:	ff d0                	callq  *%rax
  8004217f0c:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217f13:	00 00 00 
  8004217f16:	8b 00                	mov    (%rax),%eax
  8004217f18:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004217f1b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f1e:	89 c2                	mov    %eax,%edx
  8004217f20:	ed                   	in     (%dx),%eax
  8004217f21:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004217f24:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217f27:	c9                   	leaveq 
  8004217f28:	c3                   	retq   

0000008004217f29 <pci_conf_write>:
  8004217f29:	55                   	push   %rbp
  8004217f2a:	48 89 e5             	mov    %rsp,%rbp
  8004217f2d:	48 83 ec 20          	sub    $0x20,%rsp
  8004217f31:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217f35:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217f38:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004217f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f3f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f46:	8b 70 08             	mov    0x8(%rax),%esi
  8004217f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f4d:	48 8b 00             	mov    (%rax),%rax
  8004217f50:	8b 40 08             	mov    0x8(%rax),%eax
  8004217f53:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217f56:	89 c7                	mov    %eax,%edi
  8004217f58:	48 b8 4e 7d 21 04 80 	movabs $0x8004217d4e,%rax
  8004217f5f:	00 00 00 
  8004217f62:	ff d0                	callq  *%rax
  8004217f64:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217f6b:	00 00 00 
  8004217f6e:	8b 00                	mov    (%rax),%eax
  8004217f70:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217f73:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217f76:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217f79:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217f7c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217f7f:	ef                   	out    %eax,(%dx)
  8004217f80:	c9                   	leaveq 
  8004217f81:	c3                   	retq   

0000008004217f82 <pci_attach_match>:
  8004217f82:	55                   	push   %rbp
  8004217f83:	48 89 e5             	mov    %rsp,%rbp
  8004217f86:	48 83 ec 30          	sub    $0x30,%rsp
  8004217f8a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217f8d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217f90:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004217f94:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004217f98:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217f9f:	e9 aa 00 00 00       	jmpq   800421804e <pci_attach_match+0xcc>
  8004217fa4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fa7:	48 c1 e0 04          	shl    $0x4,%rax
  8004217fab:	48 89 c2             	mov    %rax,%rdx
  8004217fae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217fb2:	48 01 d0             	add    %rdx,%rax
  8004217fb5:	8b 00                	mov    (%rax),%eax
  8004217fb7:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004217fba:	0f 85 8a 00 00 00    	jne    800421804a <pci_attach_match+0xc8>
  8004217fc0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fc3:	48 c1 e0 04          	shl    $0x4,%rax
  8004217fc7:	48 89 c2             	mov    %rax,%rdx
  8004217fca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217fce:	48 01 d0             	add    %rdx,%rax
  8004217fd1:	8b 40 04             	mov    0x4(%rax),%eax
  8004217fd4:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004217fd7:	75 71                	jne    800421804a <pci_attach_match+0xc8>
  8004217fd9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fdc:	48 c1 e0 04          	shl    $0x4,%rax
  8004217fe0:	48 89 c2             	mov    %rax,%rdx
  8004217fe3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217fe7:	48 01 d0             	add    %rdx,%rax
  8004217fea:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217fee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004217ff2:	48 89 d7             	mov    %rdx,%rdi
  8004217ff5:	ff d0                	callq  *%rax
  8004217ff7:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217ffa:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004217ffe:	7e 05                	jle    8004218005 <pci_attach_match+0x83>
  8004218000:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218003:	eb 6c                	jmp    8004218071 <pci_attach_match+0xef>
  8004218005:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218009:	79 3f                	jns    800421804a <pci_attach_match+0xc8>
  800421800b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421800e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218012:	48 89 c2             	mov    %rax,%rdx
  8004218015:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218019:	48 01 d0             	add    %rdx,%rax
  800421801c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218020:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218023:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218026:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218029:	41 89 f0             	mov    %esi,%r8d
  800421802c:	89 c6                	mov    %eax,%esi
  800421802e:	48 bf e8 b6 21 04 80 	movabs $0x800421b6e8,%rdi
  8004218035:	00 00 00 
  8004218038:	b8 00 00 00 00       	mov    $0x0,%eax
  800421803d:	49 b9 c3 95 20 04 80 	movabs $0x80042095c3,%r9
  8004218044:	00 00 00 
  8004218047:	41 ff d1             	callq  *%r9
  800421804a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421804e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218051:	48 c1 e0 04          	shl    $0x4,%rax
  8004218055:	48 89 c2             	mov    %rax,%rdx
  8004218058:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421805c:	48 01 d0             	add    %rdx,%rax
  800421805f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218063:	48 85 c0             	test   %rax,%rax
  8004218066:	0f 85 38 ff ff ff    	jne    8004217fa4 <pci_attach_match+0x22>
  800421806c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218071:	c9                   	leaveq 
  8004218072:	c3                   	retq   

0000008004218073 <pci_attach>:
  8004218073:	55                   	push   %rbp
  8004218074:	48 89 e5             	mov    %rsp,%rbp
  8004218077:	48 83 ec 10          	sub    $0x10,%rsp
  800421807b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421807f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218083:	8b 40 14             	mov    0x14(%rax),%eax
  8004218086:	c1 e8 10             	shr    $0x10,%eax
  8004218089:	0f b6 c0             	movzbl %al,%eax
  800421808c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218090:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218093:	89 d7                	mov    %edx,%edi
  8004218095:	c1 ef 18             	shr    $0x18,%edi
  8004218098:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421809c:	48 89 d1             	mov    %rdx,%rcx
  800421809f:	48 ba 00 c8 22 04 80 	movabs $0x800422c800,%rdx
  80042180a6:	00 00 00 
  80042180a9:	89 c6                	mov    %eax,%esi
  80042180ab:	48 b8 82 7f 21 04 80 	movabs $0x8004217f82,%rax
  80042180b2:	00 00 00 
  80042180b5:	ff d0                	callq  *%rax
  80042180b7:	85 c0                	test   %eax,%eax
  80042180b9:	75 39                	jne    80042180f4 <pci_attach+0x81>
  80042180bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042180bf:	8b 40 10             	mov    0x10(%rax),%eax
  80042180c2:	c1 e8 10             	shr    $0x10,%eax
  80042180c5:	89 c6                	mov    %eax,%esi
  80042180c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042180cb:	8b 40 10             	mov    0x10(%rax),%eax
  80042180ce:	0f b7 c0             	movzwl %ax,%eax
  80042180d1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042180d5:	48 89 d1             	mov    %rdx,%rcx
  80042180d8:	48 ba 20 c8 22 04 80 	movabs $0x800422c820,%rdx
  80042180df:	00 00 00 
  80042180e2:	89 c7                	mov    %eax,%edi
  80042180e4:	48 b8 82 7f 21 04 80 	movabs $0x8004217f82,%rax
  80042180eb:	00 00 00 
  80042180ee:	ff d0                	callq  *%rax
  80042180f0:	85 c0                	test   %eax,%eax
  80042180f2:	74 07                	je     80042180fb <pci_attach+0x88>
  80042180f4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042180f9:	eb 05                	jmp    8004218100 <pci_attach+0x8d>
  80042180fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218100:	c9                   	leaveq 
  8004218101:	c3                   	retq   

0000008004218102 <pci_print_func>:
  8004218102:	55                   	push   %rbp
  8004218103:	48 89 e5             	mov    %rsp,%rbp
  8004218106:	48 83 ec 40          	sub    $0x40,%rsp
  800421810a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421810e:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  8004218115:	00 00 00 
  8004218118:	48 8b 00             	mov    (%rax),%rax
  800421811b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421811f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218123:	8b 40 14             	mov    0x14(%rax),%eax
  8004218126:	c1 e8 18             	shr    $0x18,%eax
  8004218129:	83 f8 06             	cmp    $0x6,%eax
  800421812c:	77 20                	ja     800421814e <pci_print_func+0x4c>
  800421812e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218132:	8b 40 14             	mov    0x14(%rax),%eax
  8004218135:	c1 e8 18             	shr    $0x18,%eax
  8004218138:	89 c2                	mov    %eax,%edx
  800421813a:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  8004218141:	00 00 00 
  8004218144:	89 d2                	mov    %edx,%edx
  8004218146:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800421814a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421814e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218152:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218156:	0f b6 f8             	movzbl %al,%edi
  8004218159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421815d:	8b 40 14             	mov    0x14(%rax),%eax
  8004218160:	c1 e8 10             	shr    $0x10,%eax
  8004218163:	0f b6 f0             	movzbl %al,%esi
  8004218166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421816a:	8b 40 14             	mov    0x14(%rax),%eax
  800421816d:	c1 e8 18             	shr    $0x18,%eax
  8004218170:	41 89 c1             	mov    %eax,%r9d
  8004218173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218177:	8b 40 10             	mov    0x10(%rax),%eax
  800421817a:	c1 e8 10             	shr    $0x10,%eax
  800421817d:	41 89 c2             	mov    %eax,%r10d
  8004218180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218184:	8b 40 10             	mov    0x10(%rax),%eax
  8004218187:	44 0f b7 c0          	movzwl %ax,%r8d
  800421818b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421818f:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218196:	8b 50 08             	mov    0x8(%rax),%edx
  8004218199:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421819d:	48 8b 00             	mov    (%rax),%rax
  80042181a0:	8b 40 08             	mov    0x8(%rax),%eax
  80042181a3:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  80042181a7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  80042181ab:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042181b0:	89 74 24 08          	mov    %esi,0x8(%rsp)
  80042181b4:	44 89 0c 24          	mov    %r9d,(%rsp)
  80042181b8:	45 89 d1             	mov    %r10d,%r9d
  80042181bb:	89 c6                	mov    %eax,%esi
  80042181bd:	48 bf 88 b7 21 04 80 	movabs $0x800421b788,%rdi
  80042181c4:	00 00 00 
  80042181c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181cc:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  80042181d3:	00 00 00 
  80042181d6:	41 ff d2             	callq  *%r10
  80042181d9:	c9                   	leaveq 
  80042181da:	c3                   	retq   

00000080042181db <pci_scan_bus>:
  80042181db:	55                   	push   %rbp
  80042181dc:	48 89 e5             	mov    %rsp,%rbp
  80042181df:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  80042181e6:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  80042181ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042181f4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042181f8:	ba 50 00 00 00       	mov    $0x50,%edx
  80042181fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004218202:	48 89 c7             	mov    %rax,%rdi
  8004218205:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800421820c:	00 00 00 
  800421820f:	ff d0                	callq  *%rax
  8004218211:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218218:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421821c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218223:	e9 22 02 00 00       	jmpq   800421844a <pci_scan_bus+0x26f>
  8004218228:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421822c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218231:	48 89 c7             	mov    %rax,%rdi
  8004218234:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  800421823b:	00 00 00 
  800421823e:	ff d0                	callq  *%rax
  8004218240:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218243:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218246:	c1 e8 10             	shr    $0x10,%eax
  8004218249:	83 e0 7f             	and    $0x7f,%eax
  800421824c:	83 f8 01             	cmp    $0x1,%eax
  800421824f:	0f 87 ec 01 00 00    	ja     8004218441 <pci_scan_bus+0x266>
  8004218255:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218259:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421825d:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218264:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218268:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  800421826f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218273:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800421827a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421827e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218285:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218289:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218290:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218294:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421829b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421829f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  80042182a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042182aa:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042182b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042182b5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042182bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042182c0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042182c7:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  80042182ce:	00 00 00 
  80042182d1:	e9 45 01 00 00       	jmpq   800421841b <pci_scan_bus+0x240>
  80042182d6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042182dd:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  80042182e4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042182eb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  80042182f2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042182f9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218300:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218307:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421830e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218315:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421831c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218323:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421832a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218331:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218335:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800421833c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218340:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218347:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800421834b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218352:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218356:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421835d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218362:	48 89 c7             	mov    %rax,%rdi
  8004218365:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  800421836c:	00 00 00 
  800421836f:	ff d0                	callq  *%rax
  8004218371:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218377:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  800421837d:	0f b7 c0             	movzwl %ax,%eax
  8004218380:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218385:	0f 84 81 00 00 00    	je     800421840c <pci_scan_bus+0x231>
  800421838b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218392:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218397:	48 89 c7             	mov    %rax,%rdi
  800421839a:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  80042183a1:	00 00 00 
  80042183a4:	ff d0                	callq  *%rax
  80042183a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042183a9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042183ac:	88 45 98             	mov    %al,-0x68(%rbp)
  80042183af:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042183b6:	be 08 00 00 00       	mov    $0x8,%esi
  80042183bb:	48 89 c7             	mov    %rax,%rdi
  80042183be:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  80042183c5:	00 00 00 
  80042183c8:	ff d0                	callq  *%rax
  80042183ca:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  80042183d0:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  80042183d7:	00 00 00 
  80042183da:	8b 00                	mov    (%rax),%eax
  80042183dc:	85 c0                	test   %eax,%eax
  80042183de:	74 16                	je     80042183f6 <pci_scan_bus+0x21b>
  80042183e0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042183e7:	48 89 c7             	mov    %rax,%rdi
  80042183ea:	48 b8 02 81 21 04 80 	movabs $0x8004218102,%rax
  80042183f1:	00 00 00 
  80042183f4:	ff d0                	callq  *%rax
  80042183f6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042183fd:	48 89 c7             	mov    %rax,%rdi
  8004218400:	48 b8 73 80 21 04 80 	movabs $0x8004218073,%rax
  8004218407:	00 00 00 
  800421840a:	ff d0                	callq  *%rax
  800421840c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218412:	83 c0 01             	add    $0x1,%eax
  8004218415:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421841b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218421:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218424:	25 00 00 80 00       	and    $0x800000,%eax
  8004218429:	85 c0                	test   %eax,%eax
  800421842b:	74 07                	je     8004218434 <pci_scan_bus+0x259>
  800421842d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218432:	eb 05                	jmp    8004218439 <pci_scan_bus+0x25e>
  8004218434:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218439:	39 c2                	cmp    %eax,%edx
  800421843b:	0f 82 95 fe ff ff    	jb     80042182d6 <pci_scan_bus+0xfb>
  8004218441:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218444:	83 c0 01             	add    $0x1,%eax
  8004218447:	89 45 a8             	mov    %eax,-0x58(%rbp)
  800421844a:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421844d:	83 f8 1f             	cmp    $0x1f,%eax
  8004218450:	0f 86 d2 fd ff ff    	jbe    8004218228 <pci_scan_bus+0x4d>
  8004218456:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218459:	c9                   	leaveq 
  800421845a:	c3                   	retq   

000000800421845b <pci_bridge_attach>:
  800421845b:	55                   	push   %rbp
  800421845c:	48 89 e5             	mov    %rsp,%rbp
  800421845f:	48 83 ec 30          	sub    $0x30,%rsp
  8004218463:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218467:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421846b:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218470:	48 89 c7             	mov    %rax,%rdi
  8004218473:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  800421847a:	00 00 00 
  800421847d:	ff d0                	callq  *%rax
  800421847f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218482:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218486:	be 18 00 00 00       	mov    $0x18,%esi
  800421848b:	48 89 c7             	mov    %rax,%rdi
  800421848e:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  8004218495:	00 00 00 
  8004218498:	ff d0                	callq  *%rax
  800421849a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421849d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042184a0:	83 e0 0f             	and    $0xf,%eax
  80042184a3:	83 f8 01             	cmp    $0x1,%eax
  80042184a6:	75 40                	jne    80042184e8 <pci_bridge_attach+0x8d>
  80042184a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184ac:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042184af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184b3:	8b 50 08             	mov    0x8(%rax),%edx
  80042184b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184ba:	48 8b 00             	mov    (%rax),%rax
  80042184bd:	8b 40 08             	mov    0x8(%rax),%eax
  80042184c0:	89 c6                	mov    %eax,%esi
  80042184c2:	48 bf c8 b7 21 04 80 	movabs $0x800421b7c8,%rdi
  80042184c9:	00 00 00 
  80042184cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184d1:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  80042184d8:	00 00 00 
  80042184db:	41 ff d0             	callq  *%r8
  80042184de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184e3:	e9 a1 00 00 00       	jmpq   8004218589 <pci_bridge_attach+0x12e>
  80042184e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042184ec:	ba 10 00 00 00       	mov    $0x10,%edx
  80042184f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042184f6:	48 89 c7             	mov    %rax,%rdi
  80042184f9:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  8004218500:	00 00 00 
  8004218503:	ff d0                	callq  *%rax
  8004218505:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218509:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421850d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218510:	c1 e8 08             	shr    $0x8,%eax
  8004218513:	0f b6 c0             	movzbl %al,%eax
  8004218516:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218519:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218520:	00 00 00 
  8004218523:	8b 00                	mov    (%rax),%eax
  8004218525:	85 c0                	test   %eax,%eax
  8004218527:	74 48                	je     8004218571 <pci_bridge_attach+0x116>
  8004218529:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421852c:	c1 e8 10             	shr    $0x10,%eax
  800421852f:	0f b6 f8             	movzbl %al,%edi
  8004218532:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004218535:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218539:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421853c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218540:	8b 50 08             	mov    0x8(%rax),%edx
  8004218543:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218547:	48 8b 00             	mov    (%rax),%rax
  800421854a:	8b 40 08             	mov    0x8(%rax),%eax
  800421854d:	41 89 f9             	mov    %edi,%r9d
  8004218550:	41 89 f0             	mov    %esi,%r8d
  8004218553:	89 c6                	mov    %eax,%esi
  8004218555:	48 bf 00 b8 21 04 80 	movabs $0x800421b800,%rdi
  800421855c:	00 00 00 
  800421855f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218564:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  800421856b:	00 00 00 
  800421856e:	41 ff d2             	callq  *%r10
  8004218571:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218575:	48 89 c7             	mov    %rax,%rdi
  8004218578:	48 b8 db 81 21 04 80 	movabs $0x80042181db,%rax
  800421857f:	00 00 00 
  8004218582:	ff d0                	callq  *%rax
  8004218584:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218589:	c9                   	leaveq 
  800421858a:	c3                   	retq   

000000800421858b <pci_func_enable>:
  800421858b:	55                   	push   %rbp
  800421858c:	48 89 e5             	mov    %rsp,%rbp
  800421858f:	48 83 ec 40          	sub    $0x40,%rsp
  8004218593:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218597:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421859b:	ba 07 00 00 00       	mov    $0x7,%edx
  80042185a0:	be 04 00 00 00       	mov    $0x4,%esi
  80042185a5:	48 89 c7             	mov    %rax,%rdi
  80042185a8:	48 b8 29 7f 21 04 80 	movabs $0x8004217f29,%rax
  80042185af:	00 00 00 
  80042185b2:	ff d0                	callq  *%rax
  80042185b4:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  80042185bb:	e9 ee 01 00 00       	jmpq   80042187ae <pci_func_enable+0x223>
  80042185c0:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042185c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185c7:	89 d6                	mov    %edx,%esi
  80042185c9:	48 89 c7             	mov    %rax,%rdi
  80042185cc:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  80042185d3:	00 00 00 
  80042185d6:	ff d0                	callq  *%rax
  80042185d8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042185db:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  80042185e2:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042185e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185e9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042185ee:	89 ce                	mov    %ecx,%esi
  80042185f0:	48 89 c7             	mov    %rax,%rdi
  80042185f3:	48 b8 29 7f 21 04 80 	movabs $0x8004217f29,%rax
  80042185fa:	00 00 00 
  80042185fd:	ff d0                	callq  *%rax
  80042185ff:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218602:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218606:	89 d6                	mov    %edx,%esi
  8004218608:	48 89 c7             	mov    %rax,%rdi
  800421860b:	48 b8 d4 7e 21 04 80 	movabs $0x8004217ed4,%rax
  8004218612:	00 00 00 
  8004218615:	ff d0                	callq  *%rax
  8004218617:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421861a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421861e:	75 05                	jne    8004218625 <pci_func_enable+0x9a>
  8004218620:	e9 83 01 00 00       	jmpq   80042187a8 <pci_func_enable+0x21d>
  8004218625:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218628:	83 e8 10             	sub    $0x10,%eax
  800421862b:	c1 e8 02             	shr    $0x2,%eax
  800421862e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218631:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218634:	83 e0 01             	and    $0x1,%eax
  8004218637:	85 c0                	test   %eax,%eax
  8004218639:	75 65                	jne    80042186a0 <pci_func_enable+0x115>
  800421863b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421863e:	83 e0 06             	and    $0x6,%eax
  8004218641:	83 f8 04             	cmp    $0x4,%eax
  8004218644:	75 07                	jne    800421864d <pci_func_enable+0xc2>
  8004218646:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  800421864d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218650:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218653:	f7 d8                	neg    %eax
  8004218655:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218658:	83 e0 f0             	and    $0xfffffff0,%eax
  800421865b:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421865e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218661:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218664:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218667:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  800421866e:	00 00 00 
  8004218671:	8b 00                	mov    (%rax),%eax
  8004218673:	85 c0                	test   %eax,%eax
  8004218675:	74 7a                	je     80042186f1 <pci_func_enable+0x166>
  8004218677:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421867a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421867d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218680:	89 c6                	mov    %eax,%esi
  8004218682:	48 bf 30 b8 21 04 80 	movabs $0x800421b830,%rdi
  8004218689:	00 00 00 
  800421868c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218691:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  8004218698:	00 00 00 
  800421869b:	41 ff d0             	callq  *%r8
  800421869e:	eb 51                	jmp    80042186f1 <pci_func_enable+0x166>
  80042186a0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042186a3:	83 e0 fc             	and    $0xfffffffc,%eax
  80042186a6:	f7 d8                	neg    %eax
  80042186a8:	23 45 e8             	and    -0x18(%rbp),%eax
  80042186ab:	83 e0 fc             	and    $0xfffffffc,%eax
  80042186ae:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042186b1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042186b4:	83 e0 fc             	and    $0xfffffffc,%eax
  80042186b7:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042186ba:	48 b8 a0 b5 69 04 80 	movabs $0x800469b5a0,%rax
  80042186c1:	00 00 00 
  80042186c4:	8b 00                	mov    (%rax),%eax
  80042186c6:	85 c0                	test   %eax,%eax
  80042186c8:	74 27                	je     80042186f1 <pci_func_enable+0x166>
  80042186ca:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042186cd:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042186d0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042186d3:	89 c6                	mov    %eax,%esi
  80042186d5:	48 bf 58 b8 21 04 80 	movabs $0x800421b858,%rdi
  80042186dc:	00 00 00 
  80042186df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186e4:	49 b8 c3 95 20 04 80 	movabs $0x80042095c3,%r8
  80042186eb:	00 00 00 
  80042186ee:	41 ff d0             	callq  *%r8
  80042186f1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042186f4:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042186f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186fb:	89 ce                	mov    %ecx,%esi
  80042186fd:	48 89 c7             	mov    %rax,%rdi
  8004218700:	48 b8 29 7f 21 04 80 	movabs $0x8004217f29,%rax
  8004218707:	00 00 00 
  800421870a:	ff d0                	callq  *%rax
  800421870c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218710:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218713:	48 63 d2             	movslq %edx,%rdx
  8004218716:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421871a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421871d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004218721:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218725:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218728:	48 63 d2             	movslq %edx,%rdx
  800421872b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421872f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218732:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  8004218735:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004218739:	74 6d                	je     80042187a8 <pci_func_enable+0x21d>
  800421873b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421873f:	75 67                	jne    80042187a8 <pci_func_enable+0x21d>
  8004218741:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218745:	8b 40 10             	mov    0x10(%rax),%eax
  8004218748:	c1 e8 10             	shr    $0x10,%eax
  800421874b:	41 89 c0             	mov    %eax,%r8d
  800421874e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218752:	8b 40 10             	mov    0x10(%rax),%eax
  8004218755:	0f b7 f8             	movzwl %ax,%edi
  8004218758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421875c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421875f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218763:	8b 50 08             	mov    0x8(%rax),%edx
  8004218766:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421876a:	48 8b 00             	mov    (%rax),%rax
  800421876d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218770:	8b 75 f0             	mov    -0x10(%rbp),%esi
  8004218773:	89 74 24 10          	mov    %esi,0x10(%rsp)
  8004218777:	8b 75 f4             	mov    -0xc(%rbp),%esi
  800421877a:	89 74 24 08          	mov    %esi,0x8(%rsp)
  800421877e:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004218781:	89 34 24             	mov    %esi,(%rsp)
  8004218784:	45 89 c1             	mov    %r8d,%r9d
  8004218787:	41 89 f8             	mov    %edi,%r8d
  800421878a:	89 c6                	mov    %eax,%esi
  800421878c:	48 bf 80 b8 21 04 80 	movabs $0x800421b880,%rdi
  8004218793:	00 00 00 
  8004218796:	b8 00 00 00 00       	mov    $0x0,%eax
  800421879b:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  80042187a2:	00 00 00 
  80042187a5:	41 ff d2             	callq  *%r10
  80042187a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042187ab:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042187ae:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  80042187b2:	0f 86 08 fe ff ff    	jbe    80042185c0 <pci_func_enable+0x35>
  80042187b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187bc:	8b 40 10             	mov    0x10(%rax),%eax
  80042187bf:	c1 e8 10             	shr    $0x10,%eax
  80042187c2:	89 c7                	mov    %eax,%edi
  80042187c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187c8:	8b 40 10             	mov    0x10(%rax),%eax
  80042187cb:	0f b7 f0             	movzwl %ax,%esi
  80042187ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187d2:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042187d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187d9:	8b 50 08             	mov    0x8(%rax),%edx
  80042187dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187e0:	48 8b 00             	mov    (%rax),%rax
  80042187e3:	8b 40 08             	mov    0x8(%rax),%eax
  80042187e6:	41 89 f9             	mov    %edi,%r9d
  80042187e9:	41 89 f0             	mov    %esi,%r8d
  80042187ec:	89 c6                	mov    %eax,%esi
  80042187ee:	48 bf e0 b8 21 04 80 	movabs $0x800421b8e0,%rdi
  80042187f5:	00 00 00 
  80042187f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187fd:	49 ba c3 95 20 04 80 	movabs $0x80042095c3,%r10
  8004218804:	00 00 00 
  8004218807:	41 ff d2             	callq  *%r10
  800421880a:	c9                   	leaveq 
  800421880b:	c3                   	retq   

000000800421880c <pci_init>:
  800421880c:	55                   	push   %rbp
  800421880d:	48 89 e5             	mov    %rsp,%rbp
  8004218810:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218815:	be 00 00 00 00       	mov    $0x0,%esi
  800421881a:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  8004218821:	00 00 00 
  8004218824:	48 b8 20 00 21 04 80 	movabs $0x8004210020,%rax
  800421882b:	00 00 00 
  800421882e:	ff d0                	callq  *%rax
  8004218830:	48 bf b0 b5 69 04 80 	movabs $0x800469b5b0,%rdi
  8004218837:	00 00 00 
  800421883a:	48 b8 db 81 21 04 80 	movabs $0x80042181db,%rax
  8004218841:	00 00 00 
  8004218844:	ff d0                	callq  *%rax
  8004218846:	5d                   	pop    %rbp
  8004218847:	c3                   	retq   

0000008004218848 <time_init>:
  8004218848:	55                   	push   %rbp
  8004218849:	48 89 e5             	mov    %rsp,%rbp
  800421884c:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218853:	00 00 00 
  8004218856:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421885c:	5d                   	pop    %rbp
  800421885d:	c3                   	retq   

000000800421885e <time_tick>:
  800421885e:	55                   	push   %rbp
  800421885f:	48 89 e5             	mov    %rsp,%rbp
  8004218862:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218869:	00 00 00 
  800421886c:	8b 00                	mov    (%rax),%eax
  800421886e:	8d 50 01             	lea    0x1(%rax),%edx
  8004218871:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218878:	00 00 00 
  800421887b:	89 10                	mov    %edx,(%rax)
  800421887d:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  8004218884:	00 00 00 
  8004218887:	8b 10                	mov    (%rax),%edx
  8004218889:	89 d0                	mov    %edx,%eax
  800421888b:	c1 e0 02             	shl    $0x2,%eax
  800421888e:	01 d0                	add    %edx,%eax
  8004218890:	01 c0                	add    %eax,%eax
  8004218892:	89 c2                	mov    %eax,%edx
  8004218894:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  800421889b:	00 00 00 
  800421889e:	8b 00                	mov    (%rax),%eax
  80042188a0:	39 c2                	cmp    %eax,%edx
  80042188a2:	73 2a                	jae    80042188ce <time_tick+0x70>
  80042188a4:	48 ba 0f b9 21 04 80 	movabs $0x800421b90f,%rdx
  80042188ab:	00 00 00 
  80042188ae:	be 14 00 00 00       	mov    $0x14,%esi
  80042188b3:	48 bf 2a b9 21 04 80 	movabs $0x800421b92a,%rdi
  80042188ba:	00 00 00 
  80042188bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188c2:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042188c9:	00 00 00 
  80042188cc:	ff d1                	callq  *%rcx
  80042188ce:	5d                   	pop    %rbp
  80042188cf:	c3                   	retq   

00000080042188d0 <time_msec>:
  80042188d0:	55                   	push   %rbp
  80042188d1:	48 89 e5             	mov    %rsp,%rbp
  80042188d4:	48 b8 c0 b5 69 04 80 	movabs $0x800469b5c0,%rax
  80042188db:	00 00 00 
  80042188de:	8b 10                	mov    (%rax),%edx
  80042188e0:	89 d0                	mov    %edx,%eax
  80042188e2:	c1 e0 02             	shl    $0x2,%eax
  80042188e5:	01 d0                	add    %edx,%eax
  80042188e7:	01 c0                	add    %eax,%eax
  80042188e9:	5d                   	pop    %rbp
  80042188ea:	c3                   	retq   
